{"version":3,"file":"bundle.934.js","mappings":"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","sources":["webpack://ace-linters-root/./packages/ace-linters/services/base-service.ts","webpack://ace-linters-root/./packages/ace-linters/services/html/html-service.ts"],"sourcesContent":["import * as lsp from \"vscode-languageserver-protocol\";\nimport {AceLinters} from \"../types\";\nimport {mergeObjects} from \"../utils\";\nimport {TextDocument} from \"vscode-languageserver-textdocument\";\nimport {TextDocumentItem} from \"vscode-languageserver-protocol\";\n\nexport abstract class BaseService<OptionsType extends AceLinters.ServiceOptions = AceLinters.ServiceOptions> implements AceLinters.LanguageService {\n    abstract $service;\n    mode: string;\n    documents: { [sessionID: string]: TextDocument } = {};\n    options: { [sessionID: string]: OptionsType } = {};\n    globalOptions: OptionsType = {} as OptionsType;\n\n    protected constructor(mode: string) {\n        this.mode = mode;\n    }\n\n    addDocument(document: TextDocument | TextDocumentItem) {\n        if (typeof document[\"getText\"] == \"function\") {\n            this.documents[document.uri] = document as TextDocument;\n        } else {\n            this.documents[document.uri] = TextDocument.create(document.uri, document.languageId, document.version, (document as TextDocumentItem).text)\n        }\n        //TODO:\n        /*if (options)\n            this.setOptions(sessionID, options);*/\n    }\n\n    getDocument(uri: string): TextDocument {\n        return this.documents[uri];\n    }\n\n    removeDocument(document: TextDocument) {\n        delete this.documents[document.uri];\n        if (this.options[document.uri]) {\n            delete this.options[document.uri];\n        }\n    }\n\n    getDocumentValue(uri: string): string {\n        return this.getDocument(uri).getText();\n    }\n\n    setValue(uri: string, value: string) {\n        let document = this.getDocument(uri);\n        document = TextDocument.create(document.uri, document.languageId, document.version + 1, value);\n        this.documents[document.uri] = document;\n    }\n\n    setGlobalOptions(options: OptionsType) {\n        this.globalOptions = options ?? {} as OptionsType;\n    }\n\n    setOptions(sessionID: string, options: OptionsType, merge = false) {\n        this.options[sessionID] = merge ? mergeObjects(options, this.options[sessionID]) : options;\n    }\n\n    getOption<T extends keyof OptionsType>(sessionID: string, optionName: T): OptionsType[T] {\n        if (this.options[sessionID] && this.options[sessionID][optionName]) {\n            return this.options[sessionID][optionName];\n        } else {\n            return this.globalOptions[optionName];\n        }\n    }\n\n    /*applyDeltas(sessionID: string, deltas: Ace.Delta[]) { //TODO:\n        let data = deltas;\n        let document = this.getDocument(sessionID);\n\n        this.$setVersion(document);\n        if (data[0].start) {\n            document.applyDeltas(data);\n        } else {\n            for (let i = 0; i < data.length; i += 2) {\n                let d, err;\n                if (Array.isArray(data[i + 1])) {\n                    d = {action: \"insert\", start: data[i], lines: data[i + 1]};\n                } else {\n                    d = {action: \"remove\", start: data[i], end: data[i + 1]};\n                }\n\n                let linesLength = document[\"$lines\"].length;\n                if ((d.action == \"insert\" ? d.start : d.end).row >= linesLength) {\n                    err = new Error(\"Invalid delta\");\n                    err.data = {\n                        linesLength: linesLength,\n                        start: d.start,\n                        end: d.end\n                    };\n                    throw err;\n                }\n\n                document.applyDelta(d, true);\n            }\n        }\n    }*/\n\n    doComplete(document, position: lsp.Position): Promise<lsp.CompletionItem[] | lsp.CompletionList | null> {\n        return Promise.resolve(undefined);\n    }\n\n    doHover(document, position: lsp.Position): Promise<lsp.Hover | null> {\n        return Promise.resolve(undefined);\n    }\n\n    doResolve(item: lsp.CompletionItem): Promise<lsp.CompletionItem> {\n        return Promise.resolve(undefined);\n    }\n\n    doValidation(document): Promise<lsp.Diagnostic[]> {\n        return Promise.resolve([]);\n    }\n\n    format(document, range: lsp.Range, options: lsp.FormattingOptions): lsp.TextEdit[] | null {\n        return undefined;\n    }\n\n}\n","import {LanguageService as VSLanguageService} from \"vscode-html-languageservice\";\nimport {HTMLFormatConfiguration} from \"vscode-html-languageservice/lib/umd/htmlLanguageTypes\";\nimport {BaseService} from \"../base-service\";\nimport {AceLinters} from \"../../types\";\nimport * as lsp from \"vscode-languageserver-protocol\";\n\nimport * as htmlService from 'vscode-html-languageservice';\n\nexport class HtmlService extends BaseService implements AceLinters.LanguageService {\n    $service: VSLanguageService;\n\n    constructor(mode: string) {\n        super(mode);\n        this.$service = htmlService.getLanguageService();\n    }\n\n    format(document: lsp.TextDocumentIdentifier, range: lsp.Range, options: HTMLFormatConfiguration): lsp.TextEdit[] | null {\n        let fullDocument = this.getDocument(document.uri);\n        if (!fullDocument) {\n            return [];\n        }\n\n        let textEdits = this.$service.format(fullDocument, range, options);\n        return textEdits;\n    }\n\n    async doHover(document: lsp.TextDocumentIdentifier, position: lsp.Position): Promise<lsp.Hover | null> {\n        let fullDocument = this.getDocument(document.uri);\n        if (!fullDocument) {\n            return null;\n        }\n        let htmlDocument = this.$service.parseHTMLDocument(fullDocument);\n        let hover = this.$service.doHover(fullDocument, position, htmlDocument);\n        return Promise.resolve(hover);\n    }\n\n    //TODO: separate validator for HTML\n    async doValidation(document: lsp.TextDocumentIdentifier): Promise<lsp.Diagnostic[]> {\n        return [];\n    }\n\n    async doComplete(document: lsp.TextDocumentIdentifier, position: lsp.Position): Promise<lsp.CompletionItem[] | lsp.CompletionList | null> {\n        let fullDocument = this.getDocument(document.uri);\n        if (!fullDocument) {\n            return null;\n        }\n        let htmlDocument = this.$service.parseHTMLDocument(fullDocument);\n\n        let completions = this.$service.doComplete(fullDocument, position, htmlDocument);\n        return Promise.resolve(completions);\n    }\n\n    async doResolve(item: lsp.CompletionItem): Promise<lsp.CompletionItem> {\n        return item;\n    }\n}\n"],"names":[],"sourceRoot":""}