{"version":3,"file":"bundle.352.js","mappings":";;;;;;AAAa;;AAEb;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbsources":["webpack://ace-linters-root/./node_modules/ace-code/src/ext/modelist.js"],"sourcesContent":["\"use strict\";\n\nvar modes = [];\n/**\n * Suggests a mode based on the file extension present in the given path\n * @param {string} path The path to the file\n * @returns {object} Returns an object containing information about the\n *  suggested mode.\n */\nfunction getModeForPath(path) {\n    var mode = modesByName.text;\n    var fileName = path.split(/[\\/\\\\]/).pop();\n    for (var i = 0; i < modes.length; i++) {\n        if (modes[i].supportsFile(fileName)) {\n            mode = modes[i];\n            break;\n        }\n    }\n    return mode;\n}\n\nclass Mode {\n    constructor(name, caption, extensions) {\n        this.name = name;\n        this.caption = caption;\n        this.mode = \"ace/mode/\" + name;\n        this.extensions = extensions;\n        var re;\n        if (/\\^/.test(extensions)) {\n            re = extensions.replace(/\\|(\\^)?/g, function (a, b) {\n                return \"$|\" + (b ? \"^\" : \"^.*\\\\.\");\n            }) + \"$\";\n        }\n        else {\n            re = \"^.*\\\\.(\" + extensions + \")$\";\n        }\n\n        this.extRe = new RegExp(re, \"gi\");\n    }\n\n    supportsFile(filename) {\n        return filename.match(this.extRe);\n    }\n}\n\n// todo firstlinematch\nvar supportedModes = {\n    ABAP:        [\"abap\"],\n    ABC:         [\"abc\"],\n    ActionScript:[\"as\"],\n    ADA:         [\"ada|adb\"],\n    Alda:        [\"alda\"],\n    Apache_Conf: [\"^htaccess|^htgroups|^htpasswd|^conf|htaccess|htgroups|htpasswd\"],\n    Apex:        [\"apex|cls|trigger|tgr\"],\n    AQL:         [\"aql\"],\n    AsciiDoc:    [\"asciidoc|adoc\"],\n    ASL:         [\"dsl|asl|asl.json\"],\n    Assembly_x86:[\"asm|a\"],\n    AutoHotKey:  [\"ahk\"],\n    BatchFile:   [\"bat|cmd\"],\n    BibTeX:      [\"bib\"],\n    C_Cpp:       [\"cpp|c|cc|cxx|h|hh|hpp|ino\"],\n    C9Search:    [\"c9search_results\"],\n    Cirru:       [\"cirru|cr\"],\n    Clojure:     [\"clj|cljs\"],\n    Cobol:       [\"CBL|COB\"],\n    coffee:      [\"coffee|cf|cson|^Cakefile\"],\n    ColdFusion:  [\"cfm|cfc\"],\n    Crystal:     [\"cr\"],\n    CSharp:      [\"cs\"],\n    Csound_Document: [\"csd\"],\n    Csound_Orchestra: [\"orc\"],\n    Csound_Score: [\"sco\"],\n    CSS:         [\"css\"],\n    Curly:       [\"curly\"],\n    D:           [\"d|di\"],\n    Dart:        [\"dart\"],\n    Diff:        [\"diff|patch\"],\n    Dockerfile:  [\"^Dockerfile\"],\n    Dot:         [\"dot\"],\n    Drools:      [\"drl\"],\n    Edifact:     [\"edi\"],\n    Eiffel:      [\"e|ge\"],\n    EJS:         [\"ejs\"],\n    Elixir:      [\"ex|exs\"],\n    Elm:         [\"elm\"],\n    Erlang:      [\"erl|hrl\"],\n    Forth:       [\"frt|fs|ldr|fth|4th\"],\n    Fortran:     [\"f|f90\"],\n    FSharp:      [\"fsi|fs|ml|mli|fsx|fsscript\"],\n    FSL:         [\"fsl\"],\n    FTL:         [\"ftl\"],\n    Gcode:       [\"gcode\"],\n    Gherkin:     [\"feature\"],\n    Gitignore:   [\"^.gitignore\"],\n    Glsl:        [\"glsl|frag|vert\"],\n    Gobstones:   [\"gbs\"],\n    golang:      [\"go\"],\n    GraphQLSchema: [\"gql\"],\n    Groovy:      [\"groovy\"],\n    HAML:        [\"haml\"],\n    Handlebars:  [\"hbs|handlebars|tpl|mustache\"],\n    Haskell:     [\"hs\"],\n    Haskell_Cabal: [\"cabal\"],\n    haXe:        [\"hx\"],\n    Hjson:       [\"hjson\"],\n    HTML:        [\"html|htm|xhtml|vue|we|wpy\"],\n    HTML_Elixir: [\"eex|html.eex\"],\n    HTML_Ruby:   [\"erb|rhtml|html.erb\"],\n    INI:         [\"ini|conf|cfg|prefs\"],\n    Io:          [\"io\"],\n    Ion:         [\"ion\"],\n    Jack:        [\"jack\"],\n    Jade:        [\"jade|pug\"],\n    Java:        [\"java\"],\n    JavaScript:  [\"js|jsm|jsx|cjs|mjs\"],\n    JEXL:        [\"jexl\"],\n    JSON:        [\"json\"],\n    JSON5:       [\"json5\"],\n    JSONiq:      [\"jq\"],\n    JSP:         [\"jsp\"],\n    JSSM:        [\"jssm|jssm_state\"],\n    JSX:         [\"jsx\"],\n    Julia:       [\"jl\"],\n    Kotlin:      [\"kt|kts\"],\n    LaTeX:       [\"tex|latex|ltx|bib\"],\n    Latte:       [\"latte\"],\n    LESS:        [\"less\"],\n    Liquid:      [\"liquid\"],\n    Lisp:        [\"lisp\"],\n    LiveScript:  [\"ls\"],\n    Log:         [\"log\"],\n    LogiQL:      [\"logic|lql\"],\n    Logtalk:     [\"lgt\"],\n    LSL:         [\"lsl\"],\n    Lua:         [\"lua\"],\n    LuaPage:     [\"lp\"],\n    Lucene:      [\"lucene\"],\n    Makefile:    [\"^Makefile|^GNUmakefile|^makefile|^OCamlMakefile|make\"],\n    Markdown:    [\"md|markdown\"],\n    Mask:        [\"mask\"],\n    MATLAB:      [\"matlab\"],\n    Maze:        [\"mz\"],\n    MediaWiki:   [\"wiki|mediawiki\"],\n    MEL:         [\"mel\"],\n    MIPS:        [\"s|asm\"],\n    MIXAL:       [\"mixal\"],\n    MUSHCode:    [\"mc|mush\"],\n    MySQL:       [\"mysql\"],\n    Nginx:       [\"nginx|conf\"],\n    Nim:         [\"nim\"],\n    Nix:         [\"nix\"],\n    NSIS:        [\"nsi|nsh\"],\n    Nunjucks:    [\"nunjucks|nunjs|nj|njk\"],\n    ObjectiveC:  [\"m|mm\"],\n    OCaml:       [\"ml|mli\"],\n    Odin:        [\"odin\"],\n    PartiQL:     [\"partiql|pql\"],\n    Pascal:      [\"pas|p\"],\n    Perl:        [\"pl|pm\"],\n    pgSQL:       [\"pgsql\"],\n    PHP:         [\"php|inc|phtml|shtml|php3|php4|php5|phps|phpt|aw|ctp|module\"],\n    PHP_Laravel_blade: [\"blade.php\"],\n    Pig:         [\"pig\"],\n    PLSQL:       [\"plsql\"],\n    Powershell:  [\"ps1\"],\n    Praat:       [\"praat|praatscript|psc|proc\"],\n    Prisma:      [\"prisma\"],\n    Prolog:      [\"plg|prolog\"],\n    Properties:  [\"properties\"],\n    Protobuf:    [\"proto\"],\n    Puppet:      [\"epp|pp\"],\n    Python:      [\"py\"],\n    QML:         [\"qml\"],\n    R:           [\"r\"],\n    Raku:        [\"raku|rakumod|rakutest|p6|pl6|pm6\"],\n    Razor:       [\"cshtml|asp\"],\n    RDoc:        [\"Rd\"],\n    Red:         [\"red|reds\"],\n    RHTML:       [\"Rhtml\"],\n    Robot:       [\"robot|resource\"],\n    RST:         [\"rst\"],\n    Ruby:        [\"rb|ru|gemspec|rake|^Guardfile|^Rakefile|^Gemfile\"],\n    Rust:        [\"rs\"],\n    SaC:         [\"sac\"],\n    SASS:        [\"sass\"],\n    SCAD:        [\"scad\"],\n    Scala:       [\"scala|sbt\"],\n    Scheme:      [\"scm|sm|rkt|oak|scheme\"],\n    Scrypt:      [\"scrypt\"],\n    SCSS:        [\"scss\"],\n    SH:          [\"sh|bash|^.bashrc\"],\n    SJS:         [\"sjs\"],\n    Slim:        [\"slim|skim\"],\n    Smarty:      [\"smarty|tpl\"],\n    Smithy:      [\"smithy\"],\n    snippets:    [\"snippets\"],\n    Soy_Template:[\"soy\"],\n    Space:       [\"space\"],\n    SPARQL:      [\"rq\"],\n    SQL:         [\"sql\"],\n    SQLServer:   [\"sqlserver\"],\n    Stylus:      [\"styl|stylus\"],\n    SVG:         [\"svg\"],\n    Swift:       [\"swift\"],\n    Tcl:         [\"tcl\"],\n    Terraform:   [\"tf\", \"tfvars\", \"terragrunt\"],\n    Tex:         [\"tex\"],\n    Text:        [\"txt\"],\n    Textile:     [\"textile\"],\n    Toml:        [\"toml\"],\n    TSX:         [\"tsx\"],\n    Turtle:      [\"ttl\"],\n    Twig:        [\"twig|swig\"],\n    Typescript:  [\"ts|typescript|str\"],\n    Vala:        [\"vala\"],\n    VBScript:    [\"vbs|vb\"],\n    Velocity:    [\"vm\"],\n    Verilog:     [\"v|vh|sv|svh\"],\n    VHDL:        [\"vhd|vhdl\"],\n    Visualforce: [\"vfp|component|page\"],\n    Wollok:      [\"wlk|wpgm|wtest\"],\n    XML:         [\"xml|rdf|rss|wsdl|xslt|atom|mathml|mml|xul|xbl|xaml\"],\n    XQuery:      [\"xq\"],\n    YAML:        [\"yaml|yml\"],\n    Zeek:        [\"zeek|bro\"],\n    // Add the missing mode \"Django\" to ext-modelist\n    Django:      [\"html\"]\n};\n\nvar nameOverrides = {\n    ObjectiveC: \"Objective-C\",\n    CSharp: \"C#\",\n    golang: \"Go\",\n    C_Cpp: \"C and C++\",\n    Csound_Document: \"Csound Document\",\n    Csound_Orchestra: \"Csound\",\n    Csound_Score: \"Csound Score\",\n    coffee: \"CoffeeScript\",\n    HTML_Ruby: \"HTML (Ruby)\",\n    HTML_Elixir: \"HTML (Elixir)\",\n    FTL: \"FreeMarker\",\n    PHP_Laravel_blade: \"PHP (Blade Template)\",\n    Perl6: \"Perl 6\",\n    AutoHotKey: \"AutoHotkey / AutoIt\"\n};\n\nvar modesByName = {};\nfor (var name in supportedModes) {\n    var data = supportedModes[name];\n    var displayName = (nameOverrides[name] || name).replace(/_/g, \" \");\n    var filename = name.toLowerCase();\n    var mode = new Mode(filename, displayName, data[0]);\n    modesByName[filename] = mode;\n    modes.push(mode);\n}\n\nmodule.exports = {\n    getModeForPath: getModeForPath,\n    modes: modes,\n    modesByName: modesByName\n};\n"],"names":[],"sourceRoot":""}