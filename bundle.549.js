"use strict";
(self["webpackChunkace_linters_root"] = self["webpackChunkace_linters_root"] || []).push([[549],{

/***/ 1378:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "b": () => (/* binding */ BaseService)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3357);
/* harmony import */ var vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6813);


class BaseService {
    mode;
    documents = {};
    options = {};
    globalOptions = {};
    constructor(mode) {
        this.mode = mode;
    }
    addDocument(document) {
        this.documents[document.uri] = vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__/* .TextDocument.create */ .n.create(document.uri, document.languageId, document.version, document.text);
        //TODO:
        /*if (options)
            this.setOptions(sessionID, options);*/
    }
    getDocument(uri) {
        return this.documents[uri];
    }
    removeDocument(document) {
        delete this.documents[document.uri];
        if (this.options[document.uri]) {
            delete this.options[document.uri];
        }
    }
    getDocumentValue(uri) {
        return this.getDocument(uri).getText();
    }
    setValue(identifier, value) {
        let document = this.getDocument(identifier.uri);
        if (document) {
            document = vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__/* .TextDocument.create */ .n.create(document.uri, document.languageId, document.version, value);
            this.documents[document.uri] = document;
        }
    }
    setGlobalOptions(options) {
        this.globalOptions = options ?? {};
    }
    setOptions(sessionID, options, merge = false) {
        this.options[sessionID] = merge ? (0,_utils__WEBPACK_IMPORTED_MODULE_1__/* .mergeObjects */ .P)(options, this.options[sessionID]) : options;
    }
    getOption(sessionID, optionName) {
        if (this.options[sessionID] && this.options[sessionID][optionName]) {
            return this.options[sessionID][optionName];
        }
        else {
            return this.globalOptions[optionName];
        }
    }
    applyDeltas(identifier, deltas) {
        let document = this.getDocument(identifier.uri);
        if (document)
            vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__/* .TextDocument.update */ .n.update(document, deltas, identifier.version);
    }
    async doComplete(document, position) {
        return null;
    }
    async doHover(document, position) {
        return null;
    }
    async doResolve(item) {
        return null;
    }
    async doValidation(document) {
        return [];
    }
    format(document, range, options) {
        return [];
    }
}


/***/ }),

/***/ 9549:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "YamlService": () => (/* binding */ YamlService)
});

// EXTERNAL MODULE: ./packages/ace-linters/services/base-service.ts
var base_service = __webpack_require__(1378);
// EXTERNAL MODULE: ./node_modules/jsonc-parser/lib/esm/main.js + 4 modules
var main = __webpack_require__(516);
// EXTERNAL MODULE: ./node_modules/path-browserify/index.js
var path_browserify = __webpack_require__(6470);
// EXTERNAL MODULE: ./node_modules/prettier/standalone.js
var standalone = __webpack_require__(3945);
// EXTERNAL MODULE: ./node_modules/prettier/parser-yaml.js
var parser_yaml = __webpack_require__(893);
var parser_yaml_namespaceObject = /*#__PURE__*/__webpack_require__.t(parser_yaml, 2);
// EXTERNAL MODULE: ./node_modules/vscode-languageserver-textdocument/lib/esm/main.js
var esm_main = __webpack_require__(6813);
;// CONCATENATED MODULE: ./packages/yaml-language-server-esbuild/dist/index.js
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a2, b) => (typeof require !== "undefined" ? require : a2)[b]
}) : x)(function (x) {
    if (typeof require !== "undefined")
        return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
    for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
            if (!__hasOwnProp.call(to, key) && key !== except)
                __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
// If the importer is in node compatibility mode or this is not an ESM
// file that has been converted to a CommonJS file using a Babel-
// compatible transform (i.e. "__esModule" has not been set), then set
// "default" to the CommonJS "module.exports" for node compatibility.
isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-draft-07.json
var require_json_schema_draft_07 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-draft-07.json"(exports, module) {
        module.exports = {
            $schema: "http://json-schema.org/draft-07/schema#",
            $id: "http://json-schema.org/draft-07/schema#",
            title: "Core schema meta-schema",
            definitions: {
                schemaArray: {
                    type: "array",
                    minItems: 1,
                    items: { $ref: "#" }
                },
                nonNegativeInteger: {
                    type: "integer",
                    minimum: 0
                },
                nonNegativeIntegerDefault0: {
                    allOf: [{ $ref: "#/definitions/nonNegativeInteger" }, { default: 0 }]
                },
                simpleTypes: {
                    enum: ["array", "boolean", "integer", "null", "number", "object", "string"]
                },
                stringArray: {
                    type: "array",
                    items: { type: "string" },
                    uniqueItems: true,
                    default: []
                }
            },
            type: ["object", "boolean"],
            properties: {
                $id: {
                    type: "string",
                    format: "uri-reference"
                },
                $schema: {
                    type: "string",
                    format: "uri"
                },
                $ref: {
                    type: "string",
                    format: "uri-reference"
                },
                $comment: {
                    type: "string"
                },
                title: {
                    type: "string"
                },
                description: {
                    type: "string"
                },
                default: true,
                readOnly: {
                    type: "boolean",
                    default: false
                },
                examples: {
                    type: "array",
                    items: true
                },
                multipleOf: {
                    type: "number",
                    exclusiveMinimum: 0
                },
                maximum: {
                    type: "number"
                },
                exclusiveMaximum: {
                    type: "number"
                },
                minimum: {
                    type: "number"
                },
                exclusiveMinimum: {
                    type: "number"
                },
                maxLength: { $ref: "#/definitions/nonNegativeInteger" },
                minLength: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
                pattern: {
                    type: "string",
                    format: "regex"
                },
                additionalItems: { $ref: "#" },
                items: {
                    anyOf: [{ $ref: "#" }, { $ref: "#/definitions/schemaArray" }],
                    default: true
                },
                maxItems: { $ref: "#/definitions/nonNegativeInteger" },
                minItems: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
                uniqueItems: {
                    type: "boolean",
                    default: false
                },
                contains: { $ref: "#" },
                maxProperties: { $ref: "#/definitions/nonNegativeInteger" },
                minProperties: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
                required: { $ref: "#/definitions/stringArray" },
                additionalProperties: { $ref: "#" },
                definitions: {
                    type: "object",
                    additionalProperties: { $ref: "#" },
                    default: {}
                },
                properties: {
                    type: "object",
                    additionalProperties: { $ref: "#" },
                    default: {}
                },
                patternProperties: {
                    type: "object",
                    additionalProperties: { $ref: "#" },
                    propertyNames: { format: "regex" },
                    default: {}
                },
                dependencies: {
                    type: "object",
                    additionalProperties: {
                        anyOf: [{ $ref: "#" }, { $ref: "#/definitions/stringArray" }]
                    }
                },
                propertyNames: { $ref: "#" },
                const: true,
                enum: {
                    type: "array",
                    items: true,
                    minItems: 1,
                    uniqueItems: true
                },
                type: {
                    anyOf: [
                        { $ref: "#/definitions/simpleTypes" },
                        {
                            type: "array",
                            items: { $ref: "#/definitions/simpleTypes" },
                            minItems: 1,
                            uniqueItems: true
                        }
                    ]
                },
                format: { type: "string" },
                contentMediaType: { type: "string" },
                contentEncoding: { type: "string" },
                if: { $ref: "#" },
                then: { $ref: "#" },
                else: { $ref: "#" },
                allOf: { $ref: "#/definitions/schemaArray" },
                anyOf: { $ref: "#/definitions/schemaArray" },
                oneOf: { $ref: "#/definitions/schemaArray" },
                not: { $ref: "#" }
            },
            default: true
        };
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/ral.js
var require_ral = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/ral.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        var _ral;
        function RAL() {
            if (_ral === void 0) {
                throw new Error(`No runtime abstraction layer installed`);
            }
            return _ral;
        }
        (function (RAL2) {
            function install(ral) {
                if (ral === void 0) {
                    throw new Error(`No runtime abstraction layer provided`);
                }
                _ral = ral;
            }
            RAL2.install = install;
        })(RAL || (RAL = {}));
        exports.default = RAL;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/disposable.js
var require_disposable = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/disposable.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.Disposable = void 0;
        var Disposable;
        (function (Disposable2) {
            function create(func) {
                return {
                    dispose: func
                };
            }
            Disposable2.create = create;
        })(Disposable = exports.Disposable || (exports.Disposable = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/events.js
var require_events = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/events.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.Emitter = exports.Event = void 0;
        var ral_1 = require_ral();
        var Event;
        (function (Event2) {
            const _disposable = { dispose() {
                } };
            Event2.None = function () {
                return _disposable;
            };
        })(Event = exports.Event || (exports.Event = {}));
        var CallbackList = class {
            add(callback, context = null, bucket) {
                if (!this._callbacks) {
                    this._callbacks = [];
                    this._contexts = [];
                }
                this._callbacks.push(callback);
                this._contexts.push(context);
                if (Array.isArray(bucket)) {
                    bucket.push({ dispose: () => this.remove(callback, context) });
                }
            }
            remove(callback, context = null) {
                if (!this._callbacks) {
                    return;
                }
                let foundCallbackWithDifferentContext = false;
                for (let i = 0, len = this._callbacks.length; i < len; i++) {
                    if (this._callbacks[i] === callback) {
                        if (this._contexts[i] === context) {
                            this._callbacks.splice(i, 1);
                            this._contexts.splice(i, 1);
                            return;
                        }
                        else {
                            foundCallbackWithDifferentContext = true;
                        }
                    }
                }
                if (foundCallbackWithDifferentContext) {
                    throw new Error("When adding a listener with a context, you should remove it with the same context");
                }
            }
            invoke(...args) {
                if (!this._callbacks) {
                    return [];
                }
                const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);
                for (let i = 0, len = callbacks.length; i < len; i++) {
                    try {
                        ret.push(callbacks[i].apply(contexts[i], args));
                    }
                    catch (e) {
                        ral_1.default().console.error(e);
                    }
                }
                return ret;
            }
            isEmpty() {
                return !this._callbacks || this._callbacks.length === 0;
            }
            dispose() {
                this._callbacks = void 0;
                this._contexts = void 0;
            }
        };
        var Emitter = class {
            constructor(_options) {
                this._options = _options;
            }
            /**
             * For the public to allow to subscribe
             * to events from this Emitter
             */
            get event() {
                if (!this._event) {
                    this._event = (listener, thisArgs, disposables) => {
                        if (!this._callbacks) {
                            this._callbacks = new CallbackList();
                        }
                        if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {
                            this._options.onFirstListenerAdd(this);
                        }
                        this._callbacks.add(listener, thisArgs);
                        const result = {
                            dispose: () => {
                                if (!this._callbacks) {
                                    return;
                                }
                                this._callbacks.remove(listener, thisArgs);
                                result.dispose = Emitter._noop;
                                if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {
                                    this._options.onLastListenerRemove(this);
                                }
                            }
                        };
                        if (Array.isArray(disposables)) {
                            disposables.push(result);
                        }
                        return result;
                    };
                }
                return this._event;
            }
            /**
             * To be kept private to fire an event to
             * subscribers
             */
            fire(event) {
                if (this._callbacks) {
                    this._callbacks.invoke.call(this._callbacks, event);
                }
            }
            dispose() {
                if (this._callbacks) {
                    this._callbacks.dispose();
                    this._callbacks = void 0;
                }
            }
        };
        exports.Emitter = Emitter;
        Emitter._noop = function () {
        };
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/messageBuffer.js
var require_messageBuffer = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/messageBuffer.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.AbstractMessageBuffer = void 0;
        var CR = 13;
        var LF = 10;
        var CRLF = "\r\n";
        var AbstractMessageBuffer = class {
            constructor(encoding = "utf-8") {
                this._encoding = encoding;
                this._chunks = [];
                this._totalLength = 0;
            }
            get encoding() {
                return this._encoding;
            }
            append(chunk) {
                const toAppend = typeof chunk === "string" ? this.fromString(chunk, this._encoding) : chunk;
                this._chunks.push(toAppend);
                this._totalLength += toAppend.byteLength;
            }
            tryReadHeaders() {
                if (this._chunks.length === 0) {
                    return void 0;
                }
                let state = 0;
                let chunkIndex = 0;
                let offset = 0;
                let chunkBytesRead = 0;
                row: while (chunkIndex < this._chunks.length) {
                    const chunk = this._chunks[chunkIndex];
                    offset = 0;
                    column: while (offset < chunk.length) {
                        const value = chunk[offset];
                        switch (value) {
                            case CR:
                                switch (state) {
                                    case 0:
                                        state = 1;
                                        break;
                                    case 2:
                                        state = 3;
                                        break;
                                    default:
                                        state = 0;
                                }
                                break;
                            case LF:
                                switch (state) {
                                    case 1:
                                        state = 2;
                                        break;
                                    case 3:
                                        state = 4;
                                        offset++;
                                        break row;
                                    default:
                                        state = 0;
                                }
                                break;
                            default:
                                state = 0;
                        }
                        offset++;
                    }
                    chunkBytesRead += chunk.byteLength;
                    chunkIndex++;
                }
                if (state !== 4) {
                    return void 0;
                }
                const buffer = this._read(chunkBytesRead + offset);
                const result = /* @__PURE__ */ new Map();
                const headers = this.toString(buffer, "ascii").split(CRLF);
                if (headers.length < 2) {
                    return result;
                }
                for (let i = 0; i < headers.length - 2; i++) {
                    const header = headers[i];
                    const index = header.indexOf(":");
                    if (index === -1) {
                        throw new Error("Message header must separate key and value using :");
                    }
                    const key = header.substr(0, index);
                    const value = header.substr(index + 1).trim();
                    result.set(key, value);
                }
                return result;
            }
            tryReadBody(length) {
                if (this._totalLength < length) {
                    return void 0;
                }
                return this._read(length);
            }
            get numberOfBytes() {
                return this._totalLength;
            }
            _read(byteCount) {
                if (byteCount === 0) {
                    return this.emptyBuffer();
                }
                if (byteCount > this._totalLength) {
                    throw new Error(`Cannot read so many bytes!`);
                }
                if (this._chunks[0].byteLength === byteCount) {
                    const chunk = this._chunks[0];
                    this._chunks.shift();
                    this._totalLength -= byteCount;
                    return this.asNative(chunk);
                }
                if (this._chunks[0].byteLength > byteCount) {
                    const chunk = this._chunks[0];
                    const result2 = this.asNative(chunk, byteCount);
                    this._chunks[0] = chunk.slice(byteCount);
                    this._totalLength -= byteCount;
                    return result2;
                }
                const result = this.allocNative(byteCount);
                let resultOffset = 0;
                let chunkIndex = 0;
                while (byteCount > 0) {
                    const chunk = this._chunks[chunkIndex];
                    if (chunk.byteLength > byteCount) {
                        const chunkPart = chunk.slice(0, byteCount);
                        result.set(chunkPart, resultOffset);
                        resultOffset += byteCount;
                        this._chunks[chunkIndex] = chunk.slice(byteCount);
                        this._totalLength -= byteCount;
                        byteCount -= byteCount;
                    }
                    else {
                        result.set(chunk, resultOffset);
                        resultOffset += chunk.byteLength;
                        this._chunks.shift();
                        this._totalLength -= chunk.byteLength;
                        byteCount -= chunk.byteLength;
                    }
                }
                return result;
            }
        };
        exports.AbstractMessageBuffer = AbstractMessageBuffer;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/browser/ril.js
var require_ril = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/browser/ril.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        var ral_1 = require_ral();
        var disposable_1 = require_disposable();
        var events_1 = require_events();
        var messageBuffer_1 = require_messageBuffer();
        var MessageBuffer = class extends messageBuffer_1.AbstractMessageBuffer {
            constructor(encoding = "utf-8") {
                super(encoding);
                this.asciiDecoder = new TextDecoder("ascii");
            }
            emptyBuffer() {
                return MessageBuffer.emptyBuffer;
            }
            fromString(value, _encoding) {
                return new TextEncoder().encode(value);
            }
            toString(value, encoding) {
                if (encoding === "ascii") {
                    return this.asciiDecoder.decode(value);
                }
                else {
                    return new TextDecoder(encoding).decode(value);
                }
            }
            asNative(buffer, length) {
                if (length === void 0) {
                    return buffer;
                }
                else {
                    return buffer.slice(0, length);
                }
            }
            allocNative(length) {
                return new Uint8Array(length);
            }
        };
        MessageBuffer.emptyBuffer = new Uint8Array(0);
        var ReadableStreamWrapper = class {
            constructor(socket) {
                this.socket = socket;
                this._onData = new events_1.Emitter();
                this._messageListener = (event) => {
                    const blob = event.data;
                    blob.arrayBuffer().then((buffer) => {
                        this._onData.fire(new Uint8Array(buffer));
                    });
                };
                this.socket.addEventListener("message", this._messageListener);
            }
            onClose(listener) {
                this.socket.addEventListener("close", listener);
                return disposable_1.Disposable.create(() => this.socket.removeEventListener("close", listener));
            }
            onError(listener) {
                this.socket.addEventListener("error", listener);
                return disposable_1.Disposable.create(() => this.socket.removeEventListener("error", listener));
            }
            onEnd(listener) {
                this.socket.addEventListener("end", listener);
                return disposable_1.Disposable.create(() => this.socket.removeEventListener("end", listener));
            }
            onData(listener) {
                return this._onData.event(listener);
            }
        };
        var WritableStreamWrapper = class {
            constructor(socket) {
                this.socket = socket;
            }
            onClose(listener) {
                this.socket.addEventListener("close", listener);
                return disposable_1.Disposable.create(() => this.socket.removeEventListener("close", listener));
            }
            onError(listener) {
                this.socket.addEventListener("error", listener);
                return disposable_1.Disposable.create(() => this.socket.removeEventListener("error", listener));
            }
            onEnd(listener) {
                this.socket.addEventListener("end", listener);
                return disposable_1.Disposable.create(() => this.socket.removeEventListener("end", listener));
            }
            write(data, encoding) {
                if (typeof data === "string") {
                    if (encoding !== void 0 && encoding !== "utf-8") {
                        throw new Error(`In a Browser environments only utf-8 text encding is supported. But got encoding: ${encoding}`);
                    }
                    this.socket.send(data);
                }
                else {
                    this.socket.send(data);
                }
                return Promise.resolve();
            }
            end() {
                this.socket.close();
            }
        };
        var _textEncoder = new TextEncoder();
        var _ril = Object.freeze({
            messageBuffer: Object.freeze({
                create: (encoding) => new MessageBuffer(encoding)
            }),
            applicationJson: Object.freeze({
                encoder: Object.freeze({
                    name: "application/json",
                    encode: (msg, options) => {
                        if (options.charset !== "utf-8") {
                            throw new Error(`In a Browser environments only utf-8 text encding is supported. But got encoding: ${options.charset}`);
                        }
                        return Promise.resolve(_textEncoder.encode(JSON.stringify(msg, void 0, 0)));
                    }
                }),
                decoder: Object.freeze({
                    name: "application/json",
                    decode: (buffer, options) => {
                        if (!(buffer instanceof Uint8Array)) {
                            throw new Error(`In a Browser environments only Uint8Arrays are supported.`);
                        }
                        return Promise.resolve(JSON.parse(new TextDecoder(options.charset).decode(buffer)));
                    }
                })
            }),
            stream: Object.freeze({
                asReadableStream: (socket) => new ReadableStreamWrapper(socket),
                asWritableStream: (socket) => new WritableStreamWrapper(socket)
            }),
            console,
            timer: Object.freeze({
                setTimeout(callback, ms, ...args) {
                    return setTimeout(callback, ms, ...args);
                },
                clearTimeout(handle) {
                    clearTimeout(handle);
                },
                setImmediate(callback, ...args) {
                    return setTimeout(callback, 0, ...args);
                },
                clearImmediate(handle) {
                    clearTimeout(handle);
                }
            })
        });
        function RIL() {
            return _ril;
        }
        (function (RIL2) {
            function install() {
                ral_1.default.install(_ril);
            }
            RIL2.install = install;
        })(RIL || (RIL = {}));
        exports.default = RIL;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/is.js
var require_is = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/is.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
        function boolean(value) {
            return value === true || value === false;
        }
        exports.boolean = boolean;
        function string2(value) {
            return typeof value === "string" || value instanceof String;
        }
        exports.string = string2;
        function number(value) {
            return typeof value === "number" || value instanceof Number;
        }
        exports.number = number;
        function error(value) {
            return value instanceof Error;
        }
        exports.error = error;
        function func(value) {
            return typeof value === "function";
        }
        exports.func = func;
        function array(value) {
            return Array.isArray(value);
        }
        exports.array = array;
        function stringArray(value) {
            return array(value) && value.every((elem) => string2(elem));
        }
        exports.stringArray = stringArray;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/messages.js
var require_messages = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/messages.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.isResponseMessage = exports.isNotificationMessage = exports.isRequestMessage = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType = exports.RequestType0 = exports.AbstractMessageSignature = exports.ParameterStructures = exports.ResponseError = exports.ErrorCodes = void 0;
        var is = require_is();
        var ErrorCodes;
        (function (ErrorCodes2) {
            ErrorCodes2.ParseError = -32700;
            ErrorCodes2.InvalidRequest = -32600;
            ErrorCodes2.MethodNotFound = -32601;
            ErrorCodes2.InvalidParams = -32602;
            ErrorCodes2.InternalError = -32603;
            ErrorCodes2.jsonrpcReservedErrorRangeStart = -32099;
            ErrorCodes2.serverErrorStart = ErrorCodes2.jsonrpcReservedErrorRangeStart;
            ErrorCodes2.MessageWriteError = -32099;
            ErrorCodes2.MessageReadError = -32098;
            ErrorCodes2.ServerNotInitialized = -32002;
            ErrorCodes2.UnknownErrorCode = -32001;
            ErrorCodes2.jsonrpcReservedErrorRangeEnd = -32e3;
            ErrorCodes2.serverErrorEnd = ErrorCodes2.jsonrpcReservedErrorRangeEnd;
        })(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));
        var ResponseError = class extends Error {
            constructor(code, message, data) {
                super(message);
                this.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode;
                this.data = data;
                Object.setPrototypeOf(this, ResponseError.prototype);
            }
            toJson() {
                return {
                    code: this.code,
                    message: this.message,
                    data: this.data
                };
            }
        };
        exports.ResponseError = ResponseError;
        var ParameterStructures = class {
            constructor(kind) {
                this.kind = kind;
            }
            static is(value) {
                return value === ParameterStructures.auto || value === ParameterStructures.byName || value === ParameterStructures.byPosition;
            }
            toString() {
                return this.kind;
            }
        };
        exports.ParameterStructures = ParameterStructures;
        ParameterStructures.auto = new ParameterStructures("auto");
        ParameterStructures.byPosition = new ParameterStructures("byPosition");
        ParameterStructures.byName = new ParameterStructures("byName");
        var AbstractMessageSignature = class {
            constructor(method, numberOfParams) {
                this.method = method;
                this.numberOfParams = numberOfParams;
            }
            get parameterStructures() {
                return ParameterStructures.auto;
            }
        };
        exports.AbstractMessageSignature = AbstractMessageSignature;
        var RequestType0 = class extends AbstractMessageSignature {
            constructor(method) {
                super(method, 0);
            }
        };
        exports.RequestType0 = RequestType0;
        var RequestType = class extends AbstractMessageSignature {
            constructor(method, _parameterStructures = ParameterStructures.auto) {
                super(method, 1);
                this._parameterStructures = _parameterStructures;
            }
            get parameterStructures() {
                return this._parameterStructures;
            }
        };
        exports.RequestType = RequestType;
        var RequestType1 = class extends AbstractMessageSignature {
            constructor(method, _parameterStructures = ParameterStructures.auto) {
                super(method, 1);
                this._parameterStructures = _parameterStructures;
            }
            get parameterStructures() {
                return this._parameterStructures;
            }
        };
        exports.RequestType1 = RequestType1;
        var RequestType2 = class extends AbstractMessageSignature {
            constructor(method) {
                super(method, 2);
            }
        };
        exports.RequestType2 = RequestType2;
        var RequestType3 = class extends AbstractMessageSignature {
            constructor(method) {
                super(method, 3);
            }
        };
        exports.RequestType3 = RequestType3;
        var RequestType4 = class extends AbstractMessageSignature {
            constructor(method) {
                super(method, 4);
            }
        };
        exports.RequestType4 = RequestType4;
        var RequestType5 = class extends AbstractMessageSignature {
            constructor(method) {
                super(method, 5);
            }
        };
        exports.RequestType5 = RequestType5;
        var RequestType6 = class extends AbstractMessageSignature {
            constructor(method) {
                super(method, 6);
            }
        };
        exports.RequestType6 = RequestType6;
        var RequestType7 = class extends AbstractMessageSignature {
            constructor(method) {
                super(method, 7);
            }
        };
        exports.RequestType7 = RequestType7;
        var RequestType8 = class extends AbstractMessageSignature {
            constructor(method) {
                super(method, 8);
            }
        };
        exports.RequestType8 = RequestType8;
        var RequestType9 = class extends AbstractMessageSignature {
            constructor(method) {
                super(method, 9);
            }
        };
        exports.RequestType9 = RequestType9;
        var NotificationType = class extends AbstractMessageSignature {
            constructor(method, _parameterStructures = ParameterStructures.auto) {
                super(method, 1);
                this._parameterStructures = _parameterStructures;
            }
            get parameterStructures() {
                return this._parameterStructures;
            }
        };
        exports.NotificationType = NotificationType;
        var NotificationType0 = class extends AbstractMessageSignature {
            constructor(method) {
                super(method, 0);
            }
        };
        exports.NotificationType0 = NotificationType0;
        var NotificationType1 = class extends AbstractMessageSignature {
            constructor(method, _parameterStructures = ParameterStructures.auto) {
                super(method, 1);
                this._parameterStructures = _parameterStructures;
            }
            get parameterStructures() {
                return this._parameterStructures;
            }
        };
        exports.NotificationType1 = NotificationType1;
        var NotificationType2 = class extends AbstractMessageSignature {
            constructor(method) {
                super(method, 2);
            }
        };
        exports.NotificationType2 = NotificationType2;
        var NotificationType3 = class extends AbstractMessageSignature {
            constructor(method) {
                super(method, 3);
            }
        };
        exports.NotificationType3 = NotificationType3;
        var NotificationType4 = class extends AbstractMessageSignature {
            constructor(method) {
                super(method, 4);
            }
        };
        exports.NotificationType4 = NotificationType4;
        var NotificationType5 = class extends AbstractMessageSignature {
            constructor(method) {
                super(method, 5);
            }
        };
        exports.NotificationType5 = NotificationType5;
        var NotificationType6 = class extends AbstractMessageSignature {
            constructor(method) {
                super(method, 6);
            }
        };
        exports.NotificationType6 = NotificationType6;
        var NotificationType7 = class extends AbstractMessageSignature {
            constructor(method) {
                super(method, 7);
            }
        };
        exports.NotificationType7 = NotificationType7;
        var NotificationType8 = class extends AbstractMessageSignature {
            constructor(method) {
                super(method, 8);
            }
        };
        exports.NotificationType8 = NotificationType8;
        var NotificationType9 = class extends AbstractMessageSignature {
            constructor(method) {
                super(method, 9);
            }
        };
        exports.NotificationType9 = NotificationType9;
        function isRequestMessage(message) {
            const candidate = message;
            return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
        }
        exports.isRequestMessage = isRequestMessage;
        function isNotificationMessage(message) {
            const candidate = message;
            return candidate && is.string(candidate.method) && message.id === void 0;
        }
        exports.isNotificationMessage = isNotificationMessage;
        function isResponseMessage(message) {
            const candidate = message;
            return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
        }
        exports.isResponseMessage = isResponseMessage;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/cancellation.js
var require_cancellation = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/cancellation.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.CancellationTokenSource = exports.CancellationToken = void 0;
        var ral_1 = require_ral();
        var Is2 = require_is();
        var events_1 = require_events();
        var CancellationToken;
        (function (CancellationToken2) {
            CancellationToken2.None = Object.freeze({
                isCancellationRequested: false,
                onCancellationRequested: events_1.Event.None
            });
            CancellationToken2.Cancelled = Object.freeze({
                isCancellationRequested: true,
                onCancellationRequested: events_1.Event.None
            });
            function is(value) {
                const candidate = value;
                return candidate && (candidate === CancellationToken2.None || candidate === CancellationToken2.Cancelled || Is2.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested);
            }
            CancellationToken2.is = is;
        })(CancellationToken = exports.CancellationToken || (exports.CancellationToken = {}));
        var shortcutEvent = Object.freeze(function (callback, context) {
            const handle = ral_1.default().timer.setTimeout(callback.bind(context), 0);
            return { dispose() {
                    ral_1.default().timer.clearTimeout(handle);
                } };
        });
        var MutableToken = class {
            constructor() {
                this._isCancelled = false;
            }
            cancel() {
                if (!this._isCancelled) {
                    this._isCancelled = true;
                    if (this._emitter) {
                        this._emitter.fire(void 0);
                        this.dispose();
                    }
                }
            }
            get isCancellationRequested() {
                return this._isCancelled;
            }
            get onCancellationRequested() {
                if (this._isCancelled) {
                    return shortcutEvent;
                }
                if (!this._emitter) {
                    this._emitter = new events_1.Emitter();
                }
                return this._emitter.event;
            }
            dispose() {
                if (this._emitter) {
                    this._emitter.dispose();
                    this._emitter = void 0;
                }
            }
        };
        var CancellationTokenSource = class {
            get token() {
                if (!this._token) {
                    this._token = new MutableToken();
                }
                return this._token;
            }
            cancel() {
                if (!this._token) {
                    this._token = CancellationToken.Cancelled;
                }
                else {
                    this._token.cancel();
                }
            }
            dispose() {
                if (!this._token) {
                    this._token = CancellationToken.None;
                }
                else if (this._token instanceof MutableToken) {
                    this._token.dispose();
                }
            }
        };
        exports.CancellationTokenSource = CancellationTokenSource;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/messageReader.js
var require_messageReader = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/messageReader.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = void 0;
        var ral_1 = require_ral();
        var Is2 = require_is();
        var events_1 = require_events();
        var MessageReader;
        (function (MessageReader2) {
            function is(value) {
                let candidate = value;
                return candidate && Is2.func(candidate.listen) && Is2.func(candidate.dispose) && Is2.func(candidate.onError) && Is2.func(candidate.onClose) && Is2.func(candidate.onPartialMessage);
            }
            MessageReader2.is = is;
        })(MessageReader = exports.MessageReader || (exports.MessageReader = {}));
        var AbstractMessageReader = class {
            constructor() {
                this.errorEmitter = new events_1.Emitter();
                this.closeEmitter = new events_1.Emitter();
                this.partialMessageEmitter = new events_1.Emitter();
            }
            dispose() {
                this.errorEmitter.dispose();
                this.closeEmitter.dispose();
            }
            get onError() {
                return this.errorEmitter.event;
            }
            fireError(error) {
                this.errorEmitter.fire(this.asError(error));
            }
            get onClose() {
                return this.closeEmitter.event;
            }
            fireClose() {
                this.closeEmitter.fire(void 0);
            }
            get onPartialMessage() {
                return this.partialMessageEmitter.event;
            }
            firePartialMessage(info) {
                this.partialMessageEmitter.fire(info);
            }
            asError(error) {
                if (error instanceof Error) {
                    return error;
                }
                else {
                    return new Error(`Reader received error. Reason: ${Is2.string(error.message) ? error.message : "unknown"}`);
                }
            }
        };
        exports.AbstractMessageReader = AbstractMessageReader;
        var ResolvedMessageReaderOptions;
        (function (ResolvedMessageReaderOptions2) {
            function fromOptions(options) {
                var _a;
                let charset;
                let result;
                let contentDecoder;
                const contentDecoders = /* @__PURE__ */ new Map();
                let contentTypeDecoder;
                const contentTypeDecoders = /* @__PURE__ */ new Map();
                if (options === void 0 || typeof options === "string") {
                    charset = options !== null && options !== void 0 ? options : "utf-8";
                }
                else {
                    charset = (_a = options.charset) !== null && _a !== void 0 ? _a : "utf-8";
                    if (options.contentDecoder !== void 0) {
                        contentDecoder = options.contentDecoder;
                        contentDecoders.set(contentDecoder.name, contentDecoder);
                    }
                    if (options.contentDecoders !== void 0) {
                        for (const decoder of options.contentDecoders) {
                            contentDecoders.set(decoder.name, decoder);
                        }
                    }
                    if (options.contentTypeDecoder !== void 0) {
                        contentTypeDecoder = options.contentTypeDecoder;
                        contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
                    }
                    if (options.contentTypeDecoders !== void 0) {
                        for (const decoder of options.contentTypeDecoders) {
                            contentTypeDecoders.set(decoder.name, decoder);
                        }
                    }
                }
                if (contentTypeDecoder === void 0) {
                    contentTypeDecoder = ral_1.default().applicationJson.decoder;
                    contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
                }
                return { charset, contentDecoder, contentDecoders, contentTypeDecoder, contentTypeDecoders };
            }
            ResolvedMessageReaderOptions2.fromOptions = fromOptions;
        })(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));
        var ReadableStreamMessageReader = class extends AbstractMessageReader {
            constructor(readable, options) {
                super();
                this.readable = readable;
                this.options = ResolvedMessageReaderOptions.fromOptions(options);
                this.buffer = ral_1.default().messageBuffer.create(this.options.charset);
                this._partialMessageTimeout = 1e4;
                this.nextMessageLength = -1;
                this.messageToken = 0;
            }
            set partialMessageTimeout(timeout) {
                this._partialMessageTimeout = timeout;
            }
            get partialMessageTimeout() {
                return this._partialMessageTimeout;
            }
            listen(callback) {
                this.nextMessageLength = -1;
                this.messageToken = 0;
                this.partialMessageTimer = void 0;
                this.callback = callback;
                const result = this.readable.onData((data) => {
                    this.onData(data);
                });
                this.readable.onError((error) => this.fireError(error));
                this.readable.onClose(() => this.fireClose());
                return result;
            }
            onData(data) {
                this.buffer.append(data);
                while (true) {
                    if (this.nextMessageLength === -1) {
                        const headers = this.buffer.tryReadHeaders();
                        if (!headers) {
                            return;
                        }
                        const contentLength = headers.get("Content-Length");
                        if (!contentLength) {
                            throw new Error("Header must provide a Content-Length property.");
                        }
                        const length = parseInt(contentLength);
                        if (isNaN(length)) {
                            throw new Error("Content-Length value must be a number.");
                        }
                        this.nextMessageLength = length;
                    }
                    const body = this.buffer.tryReadBody(this.nextMessageLength);
                    if (body === void 0) {
                        this.setPartialMessageTimer();
                        return;
                    }
                    this.clearPartialMessageTimer();
                    this.nextMessageLength = -1;
                    let p;
                    if (this.options.contentDecoder !== void 0) {
                        p = this.options.contentDecoder.decode(body);
                    }
                    else {
                        p = Promise.resolve(body);
                    }
                    p.then((value) => {
                        this.options.contentTypeDecoder.decode(value, this.options).then((msg) => {
                            this.callback(msg);
                        }, (error) => {
                            this.fireError(error);
                        });
                    }, (error) => {
                        this.fireError(error);
                    });
                }
            }
            clearPartialMessageTimer() {
                if (this.partialMessageTimer) {
                    ral_1.default().timer.clearTimeout(this.partialMessageTimer);
                    this.partialMessageTimer = void 0;
                }
            }
            setPartialMessageTimer() {
                this.clearPartialMessageTimer();
                if (this._partialMessageTimeout <= 0) {
                    return;
                }
                this.partialMessageTimer = ral_1.default().timer.setTimeout((token, timeout) => {
                    this.partialMessageTimer = void 0;
                    if (token === this.messageToken) {
                        this.firePartialMessage({ messageToken: token, waitingTime: timeout });
                        this.setPartialMessageTimer();
                    }
                }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
            }
        };
        exports.ReadableStreamMessageReader = ReadableStreamMessageReader;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/semaphore.js
var require_semaphore = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/semaphore.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.Semaphore = void 0;
        var ral_1 = require_ral();
        var Semaphore = class {
            constructor(capacity = 1) {
                if (capacity <= 0) {
                    throw new Error("Capacity must be greater than 0");
                }
                this._capacity = capacity;
                this._active = 0;
                this._waiting = [];
            }
            lock(thunk) {
                return new Promise((resolve2, reject) => {
                    this._waiting.push({ thunk, resolve: resolve2, reject });
                    this.runNext();
                });
            }
            get active() {
                return this._active;
            }
            runNext() {
                if (this._waiting.length === 0 || this._active === this._capacity) {
                    return;
                }
                ral_1.default().timer.setImmediate(() => this.doRunNext());
            }
            doRunNext() {
                if (this._waiting.length === 0 || this._active === this._capacity) {
                    return;
                }
                const next = this._waiting.shift();
                this._active++;
                if (this._active > this._capacity) {
                    throw new Error(`To many thunks active`);
                }
                try {
                    const result = next.thunk();
                    if (result instanceof Promise) {
                        result.then((value) => {
                            this._active--;
                            next.resolve(value);
                            this.runNext();
                        }, (err) => {
                            this._active--;
                            next.reject(err);
                            this.runNext();
                        });
                    }
                    else {
                        this._active--;
                        next.resolve(result);
                        this.runNext();
                    }
                }
                catch (err) {
                    this._active--;
                    next.reject(err);
                    this.runNext();
                }
            }
        };
        exports.Semaphore = Semaphore;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/messageWriter.js
var require_messageWriter = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/messageWriter.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = void 0;
        var ral_1 = require_ral();
        var Is2 = require_is();
        var semaphore_1 = require_semaphore();
        var events_1 = require_events();
        var ContentLength = "Content-Length: ";
        var CRLF = "\r\n";
        var MessageWriter;
        (function (MessageWriter2) {
            function is(value) {
                let candidate = value;
                return candidate && Is2.func(candidate.dispose) && Is2.func(candidate.onClose) && Is2.func(candidate.onError) && Is2.func(candidate.write);
            }
            MessageWriter2.is = is;
        })(MessageWriter = exports.MessageWriter || (exports.MessageWriter = {}));
        var AbstractMessageWriter = class {
            constructor() {
                this.errorEmitter = new events_1.Emitter();
                this.closeEmitter = new events_1.Emitter();
            }
            dispose() {
                this.errorEmitter.dispose();
                this.closeEmitter.dispose();
            }
            get onError() {
                return this.errorEmitter.event;
            }
            fireError(error, message, count) {
                this.errorEmitter.fire([this.asError(error), message, count]);
            }
            get onClose() {
                return this.closeEmitter.event;
            }
            fireClose() {
                this.closeEmitter.fire(void 0);
            }
            asError(error) {
                if (error instanceof Error) {
                    return error;
                }
                else {
                    return new Error(`Writer received error. Reason: ${Is2.string(error.message) ? error.message : "unknown"}`);
                }
            }
        };
        exports.AbstractMessageWriter = AbstractMessageWriter;
        var ResolvedMessageWriterOptions;
        (function (ResolvedMessageWriterOptions2) {
            function fromOptions(options) {
                var _a, _b;
                if (options === void 0 || typeof options === "string") {
                    return { charset: options !== null && options !== void 0 ? options : "utf-8", contentTypeEncoder: ral_1.default().applicationJson.encoder };
                }
                else {
                    return { charset: (_a = options.charset) !== null && _a !== void 0 ? _a : "utf-8", contentEncoder: options.contentEncoder, contentTypeEncoder: (_b = options.contentTypeEncoder) !== null && _b !== void 0 ? _b : ral_1.default().applicationJson.encoder };
                }
            }
            ResolvedMessageWriterOptions2.fromOptions = fromOptions;
        })(ResolvedMessageWriterOptions || (ResolvedMessageWriterOptions = {}));
        var WriteableStreamMessageWriter = class extends AbstractMessageWriter {
            constructor(writable, options) {
                super();
                this.writable = writable;
                this.options = ResolvedMessageWriterOptions.fromOptions(options);
                this.errorCount = 0;
                this.writeSemaphore = new semaphore_1.Semaphore(1);
                this.writable.onError((error) => this.fireError(error));
                this.writable.onClose(() => this.fireClose());
            }
            async write(msg) {
                return this.writeSemaphore.lock(async () => {
                    const payload = this.options.contentTypeEncoder.encode(msg, this.options).then((buffer) => {
                        if (this.options.contentEncoder !== void 0) {
                            return this.options.contentEncoder.encode(buffer);
                        }
                        else {
                            return buffer;
                        }
                    });
                    return payload.then((buffer) => {
                        const headers = [];
                        headers.push(ContentLength, buffer.byteLength.toString(), CRLF);
                        headers.push(CRLF);
                        return this.doWrite(msg, headers, buffer);
                    }, (error) => {
                        this.fireError(error);
                        throw error;
                    });
                });
            }
            async doWrite(msg, headers, data) {
                try {
                    await this.writable.write(headers.join(""), "ascii");
                    return this.writable.write(data);
                }
                catch (error) {
                    this.handleError(error, msg);
                    return Promise.reject(error);
                }
            }
            handleError(error, msg) {
                this.errorCount++;
                this.fireError(error, msg, this.errorCount);
            }
            end() {
                this.writable.end();
            }
        };
        exports.WriteableStreamMessageWriter = WriteableStreamMessageWriter;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/linkedMap.js
var require_linkedMap = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/linkedMap.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.LRUCache = exports.LinkedMap = exports.Touch = void 0;
        var Touch;
        (function (Touch2) {
            Touch2.None = 0;
            Touch2.First = 1;
            Touch2.AsOld = Touch2.First;
            Touch2.Last = 2;
            Touch2.AsNew = Touch2.Last;
        })(Touch = exports.Touch || (exports.Touch = {}));
        var LinkedMap = class {
            constructor() {
                this[Symbol.toStringTag] = "LinkedMap";
                this._map = /* @__PURE__ */ new Map();
                this._head = void 0;
                this._tail = void 0;
                this._size = 0;
                this._state = 0;
            }
            clear() {
                this._map.clear();
                this._head = void 0;
                this._tail = void 0;
                this._size = 0;
                this._state++;
            }
            isEmpty() {
                return !this._head && !this._tail;
            }
            get size() {
                return this._size;
            }
            get first() {
                var _a;
                return (_a = this._head) === null || _a === void 0 ? void 0 : _a.value;
            }
            get last() {
                var _a;
                return (_a = this._tail) === null || _a === void 0 ? void 0 : _a.value;
            }
            has(key) {
                return this._map.has(key);
            }
            get(key, touch = Touch.None) {
                const item = this._map.get(key);
                if (!item) {
                    return void 0;
                }
                if (touch !== Touch.None) {
                    this.touch(item, touch);
                }
                return item.value;
            }
            set(key, value, touch = Touch.None) {
                let item = this._map.get(key);
                if (item) {
                    item.value = value;
                    if (touch !== Touch.None) {
                        this.touch(item, touch);
                    }
                }
                else {
                    item = { key, value, next: void 0, previous: void 0 };
                    switch (touch) {
                        case Touch.None:
                            this.addItemLast(item);
                            break;
                        case Touch.First:
                            this.addItemFirst(item);
                            break;
                        case Touch.Last:
                            this.addItemLast(item);
                            break;
                        default:
                            this.addItemLast(item);
                            break;
                    }
                    this._map.set(key, item);
                    this._size++;
                }
                return this;
            }
            delete(key) {
                return !!this.remove(key);
            }
            remove(key) {
                const item = this._map.get(key);
                if (!item) {
                    return void 0;
                }
                this._map.delete(key);
                this.removeItem(item);
                this._size--;
                return item.value;
            }
            shift() {
                if (!this._head && !this._tail) {
                    return void 0;
                }
                if (!this._head || !this._tail) {
                    throw new Error("Invalid list");
                }
                const item = this._head;
                this._map.delete(item.key);
                this.removeItem(item);
                this._size--;
                return item.value;
            }
            forEach(callbackfn, thisArg) {
                const state = this._state;
                let current = this._head;
                while (current) {
                    if (thisArg) {
                        callbackfn.bind(thisArg)(current.value, current.key, this);
                    }
                    else {
                        callbackfn(current.value, current.key, this);
                    }
                    if (this._state !== state) {
                        throw new Error(`LinkedMap got modified during iteration.`);
                    }
                    current = current.next;
                }
            }
            keys() {
                const map2 = this;
                const state = this._state;
                let current = this._head;
                const iterator = {
                    [Symbol.iterator]() {
                        return iterator;
                    },
                    next() {
                        if (map2._state !== state) {
                            throw new Error(`LinkedMap got modified during iteration.`);
                        }
                        if (current) {
                            const result = { value: current.key, done: false };
                            current = current.next;
                            return result;
                        }
                        else {
                            return { value: void 0, done: true };
                        }
                    }
                };
                return iterator;
            }
            values() {
                const map2 = this;
                const state = this._state;
                let current = this._head;
                const iterator = {
                    [Symbol.iterator]() {
                        return iterator;
                    },
                    next() {
                        if (map2._state !== state) {
                            throw new Error(`LinkedMap got modified during iteration.`);
                        }
                        if (current) {
                            const result = { value: current.value, done: false };
                            current = current.next;
                            return result;
                        }
                        else {
                            return { value: void 0, done: true };
                        }
                    }
                };
                return iterator;
            }
            entries() {
                const map2 = this;
                const state = this._state;
                let current = this._head;
                const iterator = {
                    [Symbol.iterator]() {
                        return iterator;
                    },
                    next() {
                        if (map2._state !== state) {
                            throw new Error(`LinkedMap got modified during iteration.`);
                        }
                        if (current) {
                            const result = { value: [current.key, current.value], done: false };
                            current = current.next;
                            return result;
                        }
                        else {
                            return { value: void 0, done: true };
                        }
                    }
                };
                return iterator;
            }
            [Symbol.iterator]() {
                return this.entries();
            }
            trimOld(newSize) {
                if (newSize >= this.size) {
                    return;
                }
                if (newSize === 0) {
                    this.clear();
                    return;
                }
                let current = this._head;
                let currentSize = this.size;
                while (current && currentSize > newSize) {
                    this._map.delete(current.key);
                    current = current.next;
                    currentSize--;
                }
                this._head = current;
                this._size = currentSize;
                if (current) {
                    current.previous = void 0;
                }
                this._state++;
            }
            addItemFirst(item) {
                if (!this._head && !this._tail) {
                    this._tail = item;
                }
                else if (!this._head) {
                    throw new Error("Invalid list");
                }
                else {
                    item.next = this._head;
                    this._head.previous = item;
                }
                this._head = item;
                this._state++;
            }
            addItemLast(item) {
                if (!this._head && !this._tail) {
                    this._head = item;
                }
                else if (!this._tail) {
                    throw new Error("Invalid list");
                }
                else {
                    item.previous = this._tail;
                    this._tail.next = item;
                }
                this._tail = item;
                this._state++;
            }
            removeItem(item) {
                if (item === this._head && item === this._tail) {
                    this._head = void 0;
                    this._tail = void 0;
                }
                else if (item === this._head) {
                    if (!item.next) {
                        throw new Error("Invalid list");
                    }
                    item.next.previous = void 0;
                    this._head = item.next;
                }
                else if (item === this._tail) {
                    if (!item.previous) {
                        throw new Error("Invalid list");
                    }
                    item.previous.next = void 0;
                    this._tail = item.previous;
                }
                else {
                    const next = item.next;
                    const previous = item.previous;
                    if (!next || !previous) {
                        throw new Error("Invalid list");
                    }
                    next.previous = previous;
                    previous.next = next;
                }
                item.next = void 0;
                item.previous = void 0;
                this._state++;
            }
            touch(item, touch) {
                if (!this._head || !this._tail) {
                    throw new Error("Invalid list");
                }
                if (touch !== Touch.First && touch !== Touch.Last) {
                    return;
                }
                if (touch === Touch.First) {
                    if (item === this._head) {
                        return;
                    }
                    const next = item.next;
                    const previous = item.previous;
                    if (item === this._tail) {
                        previous.next = void 0;
                        this._tail = previous;
                    }
                    else {
                        next.previous = previous;
                        previous.next = next;
                    }
                    item.previous = void 0;
                    item.next = this._head;
                    this._head.previous = item;
                    this._head = item;
                    this._state++;
                }
                else if (touch === Touch.Last) {
                    if (item === this._tail) {
                        return;
                    }
                    const next = item.next;
                    const previous = item.previous;
                    if (item === this._head) {
                        next.previous = void 0;
                        this._head = next;
                    }
                    else {
                        next.previous = previous;
                        previous.next = next;
                    }
                    item.next = void 0;
                    item.previous = this._tail;
                    this._tail.next = item;
                    this._tail = item;
                    this._state++;
                }
            }
            toJSON() {
                const data = [];
                this.forEach((value, key) => {
                    data.push([key, value]);
                });
                return data;
            }
            fromJSON(data) {
                this.clear();
                for (const [key, value] of data) {
                    this.set(key, value);
                }
            }
        };
        exports.LinkedMap = LinkedMap;
        var LRUCache = class extends LinkedMap {
            constructor(limit, ratio = 1) {
                super();
                this._limit = limit;
                this._ratio = Math.min(Math.max(0, ratio), 1);
            }
            get limit() {
                return this._limit;
            }
            set limit(limit) {
                this._limit = limit;
                this.checkTrim();
            }
            get ratio() {
                return this._ratio;
            }
            set ratio(ratio) {
                this._ratio = Math.min(Math.max(0, ratio), 1);
                this.checkTrim();
            }
            get(key, touch = Touch.AsNew) {
                return super.get(key, touch);
            }
            peek(key) {
                return super.get(key, Touch.None);
            }
            set(key, value) {
                super.set(key, value, Touch.Last);
                this.checkTrim();
                return this;
            }
            checkTrim() {
                if (this.size > this._limit) {
                    this.trimOld(Math.round(this._limit * this._ratio));
                }
            }
        };
        exports.LRUCache = LRUCache;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/connection.js
var require_connection = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/connection.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.createMessageConnection = exports.ConnectionOptions = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.Trace = exports.NullLogger = exports.ProgressType = void 0;
        var ral_1 = require_ral();
        var Is2 = require_is();
        var messages_1 = require_messages();
        var linkedMap_1 = require_linkedMap();
        var events_1 = require_events();
        var cancellation_1 = require_cancellation();
        var CancelNotification;
        (function (CancelNotification2) {
            CancelNotification2.type = new messages_1.NotificationType("$/cancelRequest");
        })(CancelNotification || (CancelNotification = {}));
        var ProgressNotification;
        (function (ProgressNotification2) {
            ProgressNotification2.type = new messages_1.NotificationType("$/progress");
        })(ProgressNotification || (ProgressNotification = {}));
        var ProgressType = class {
            constructor() {
            }
        };
        exports.ProgressType = ProgressType;
        var StarRequestHandler;
        (function (StarRequestHandler2) {
            function is(value) {
                return Is2.func(value);
            }
            StarRequestHandler2.is = is;
        })(StarRequestHandler || (StarRequestHandler = {}));
        exports.NullLogger = Object.freeze({
            error: () => {
            },
            warn: () => {
            },
            info: () => {
            },
            log: () => {
            }
        });
        var Trace;
        (function (Trace2) {
            Trace2[Trace2["Off"] = 0] = "Off";
            Trace2[Trace2["Messages"] = 1] = "Messages";
            Trace2[Trace2["Verbose"] = 2] = "Verbose";
        })(Trace = exports.Trace || (exports.Trace = {}));
        (function (Trace2) {
            function fromString(value) {
                if (!Is2.string(value)) {
                    return Trace2.Off;
                }
                value = value.toLowerCase();
                switch (value) {
                    case "off":
                        return Trace2.Off;
                    case "messages":
                        return Trace2.Messages;
                    case "verbose":
                        return Trace2.Verbose;
                    default:
                        return Trace2.Off;
                }
            }
            Trace2.fromString = fromString;
            function toString(value) {
                switch (value) {
                    case Trace2.Off:
                        return "off";
                    case Trace2.Messages:
                        return "messages";
                    case Trace2.Verbose:
                        return "verbose";
                    default:
                        return "off";
                }
            }
            Trace2.toString = toString;
        })(Trace = exports.Trace || (exports.Trace = {}));
        var TraceFormat;
        (function (TraceFormat2) {
            TraceFormat2["Text"] = "text";
            TraceFormat2["JSON"] = "json";
        })(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
        (function (TraceFormat2) {
            function fromString(value) {
                value = value.toLowerCase();
                if (value === "json") {
                    return TraceFormat2.JSON;
                }
                else {
                    return TraceFormat2.Text;
                }
            }
            TraceFormat2.fromString = fromString;
        })(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
        var SetTraceNotification;
        (function (SetTraceNotification2) {
            SetTraceNotification2.type = new messages_1.NotificationType("$/setTrace");
        })(SetTraceNotification = exports.SetTraceNotification || (exports.SetTraceNotification = {}));
        var LogTraceNotification;
        (function (LogTraceNotification2) {
            LogTraceNotification2.type = new messages_1.NotificationType("$/logTrace");
        })(LogTraceNotification = exports.LogTraceNotification || (exports.LogTraceNotification = {}));
        var ConnectionErrors;
        (function (ConnectionErrors2) {
            ConnectionErrors2[ConnectionErrors2["Closed"] = 1] = "Closed";
            ConnectionErrors2[ConnectionErrors2["Disposed"] = 2] = "Disposed";
            ConnectionErrors2[ConnectionErrors2["AlreadyListening"] = 3] = "AlreadyListening";
        })(ConnectionErrors = exports.ConnectionErrors || (exports.ConnectionErrors = {}));
        var ConnectionError = class extends Error {
            constructor(code, message) {
                super(message);
                this.code = code;
                Object.setPrototypeOf(this, ConnectionError.prototype);
            }
        };
        exports.ConnectionError = ConnectionError;
        var ConnectionStrategy;
        (function (ConnectionStrategy2) {
            function is(value) {
                const candidate = value;
                return candidate && Is2.func(candidate.cancelUndispatched);
            }
            ConnectionStrategy2.is = is;
        })(ConnectionStrategy = exports.ConnectionStrategy || (exports.ConnectionStrategy = {}));
        var CancellationReceiverStrategy;
        (function (CancellationReceiverStrategy2) {
            CancellationReceiverStrategy2.Message = Object.freeze({
                createCancellationTokenSource(_) {
                    return new cancellation_1.CancellationTokenSource();
                }
            });
            function is(value) {
                const candidate = value;
                return candidate && Is2.func(candidate.createCancellationTokenSource);
            }
            CancellationReceiverStrategy2.is = is;
        })(CancellationReceiverStrategy = exports.CancellationReceiverStrategy || (exports.CancellationReceiverStrategy = {}));
        var CancellationSenderStrategy;
        (function (CancellationSenderStrategy2) {
            CancellationSenderStrategy2.Message = Object.freeze({
                sendCancellation(conn, id) {
                    conn.sendNotification(CancelNotification.type, { id });
                },
                cleanup(_) {
                }
            });
            function is(value) {
                const candidate = value;
                return candidate && Is2.func(candidate.sendCancellation) && Is2.func(candidate.cleanup);
            }
            CancellationSenderStrategy2.is = is;
        })(CancellationSenderStrategy = exports.CancellationSenderStrategy || (exports.CancellationSenderStrategy = {}));
        var CancellationStrategy;
        (function (CancellationStrategy2) {
            CancellationStrategy2.Message = Object.freeze({
                receiver: CancellationReceiverStrategy.Message,
                sender: CancellationSenderStrategy.Message
            });
            function is(value) {
                const candidate = value;
                return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);
            }
            CancellationStrategy2.is = is;
        })(CancellationStrategy = exports.CancellationStrategy || (exports.CancellationStrategy = {}));
        var ConnectionOptions;
        (function (ConnectionOptions2) {
            function is(value) {
                const candidate = value;
                return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy));
            }
            ConnectionOptions2.is = is;
        })(ConnectionOptions = exports.ConnectionOptions || (exports.ConnectionOptions = {}));
        var ConnectionState;
        (function (ConnectionState2) {
            ConnectionState2[ConnectionState2["New"] = 1] = "New";
            ConnectionState2[ConnectionState2["Listening"] = 2] = "Listening";
            ConnectionState2[ConnectionState2["Closed"] = 3] = "Closed";
            ConnectionState2[ConnectionState2["Disposed"] = 4] = "Disposed";
        })(ConnectionState || (ConnectionState = {}));
        function createMessageConnection(messageReader, messageWriter, _logger, options) {
            const logger = _logger !== void 0 ? _logger : exports.NullLogger;
            let sequenceNumber = 0;
            let notificationSquenceNumber = 0;
            let unknownResponseSquenceNumber = 0;
            const version = "2.0";
            let starRequestHandler = void 0;
            const requestHandlers = /* @__PURE__ */ Object.create(null);
            let starNotificationHandler = void 0;
            const notificationHandlers = /* @__PURE__ */ Object.create(null);
            const progressHandlers = /* @__PURE__ */ new Map();
            let timer;
            let messageQueue = new linkedMap_1.LinkedMap();
            let responsePromises = /* @__PURE__ */ Object.create(null);
            let requestTokens = /* @__PURE__ */ Object.create(null);
            let trace = Trace.Off;
            let traceFormat = TraceFormat.Text;
            let tracer;
            let state = ConnectionState.New;
            const errorEmitter = new events_1.Emitter();
            const closeEmitter = new events_1.Emitter();
            const unhandledNotificationEmitter = new events_1.Emitter();
            const unhandledProgressEmitter = new events_1.Emitter();
            const disposeEmitter = new events_1.Emitter();
            const cancellationStrategy = options && options.cancellationStrategy ? options.cancellationStrategy : CancellationStrategy.Message;
            function createRequestQueueKey(id) {
                if (id === null) {
                    throw new Error(`Can't send requests with id null since the response can't be correlated.`);
                }
                return "req-" + id.toString();
            }
            function createResponseQueueKey(id) {
                if (id === null) {
                    return "res-unknown-" + (++unknownResponseSquenceNumber).toString();
                }
                else {
                    return "res-" + id.toString();
                }
            }
            function createNotificationQueueKey() {
                return "not-" + (++notificationSquenceNumber).toString();
            }
            function addMessageToQueue(queue, message) {
                if (messages_1.isRequestMessage(message)) {
                    queue.set(createRequestQueueKey(message.id), message);
                }
                else if (messages_1.isResponseMessage(message)) {
                    queue.set(createResponseQueueKey(message.id), message);
                }
                else {
                    queue.set(createNotificationQueueKey(), message);
                }
            }
            function cancelUndispatched(_message) {
                return void 0;
            }
            function isListening() {
                return state === ConnectionState.Listening;
            }
            function isClosed() {
                return state === ConnectionState.Closed;
            }
            function isDisposed() {
                return state === ConnectionState.Disposed;
            }
            function closeHandler() {
                if (state === ConnectionState.New || state === ConnectionState.Listening) {
                    state = ConnectionState.Closed;
                    closeEmitter.fire(void 0);
                }
            }
            function readErrorHandler(error) {
                errorEmitter.fire([error, void 0, void 0]);
            }
            function writeErrorHandler(data) {
                errorEmitter.fire(data);
            }
            messageReader.onClose(closeHandler);
            messageReader.onError(readErrorHandler);
            messageWriter.onClose(closeHandler);
            messageWriter.onError(writeErrorHandler);
            function triggerMessageQueue() {
                if (timer || messageQueue.size === 0) {
                    return;
                }
                timer = ral_1.default().timer.setImmediate(() => {
                    timer = void 0;
                    processMessageQueue();
                });
            }
            function processMessageQueue() {
                if (messageQueue.size === 0) {
                    return;
                }
                const message = messageQueue.shift();
                try {
                    if (messages_1.isRequestMessage(message)) {
                        handleRequest(message);
                    }
                    else if (messages_1.isNotificationMessage(message)) {
                        handleNotification(message);
                    }
                    else if (messages_1.isResponseMessage(message)) {
                        handleResponse(message);
                    }
                    else {
                        handleInvalidMessage(message);
                    }
                }
                finally {
                    triggerMessageQueue();
                }
            }
            const callback = (message) => {
                try {
                    if (messages_1.isNotificationMessage(message) && message.method === CancelNotification.type.method) {
                        const key = createRequestQueueKey(message.params.id);
                        const toCancel = messageQueue.get(key);
                        if (messages_1.isRequestMessage(toCancel)) {
                            const strategy = options === null || options === void 0 ? void 0 : options.connectionStrategy;
                            const response = strategy && strategy.cancelUndispatched ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);
                            if (response && (response.error !== void 0 || response.result !== void 0)) {
                                messageQueue.delete(key);
                                response.id = toCancel.id;
                                traceSendingResponse(response, message.method, Date.now());
                                messageWriter.write(response);
                                return;
                            }
                        }
                    }
                    addMessageToQueue(messageQueue, message);
                }
                finally {
                    triggerMessageQueue();
                }
            };
            function handleRequest(requestMessage) {
                if (isDisposed()) {
                    return;
                }
                function reply(resultOrError, method, startTime2) {
                    const message = {
                        jsonrpc: version,
                        id: requestMessage.id
                    };
                    if (resultOrError instanceof messages_1.ResponseError) {
                        message.error = resultOrError.toJson();
                    }
                    else {
                        message.result = resultOrError === void 0 ? null : resultOrError;
                    }
                    traceSendingResponse(message, method, startTime2);
                    messageWriter.write(message);
                }
                function replyError(error, method, startTime2) {
                    const message = {
                        jsonrpc: version,
                        id: requestMessage.id,
                        error: error.toJson()
                    };
                    traceSendingResponse(message, method, startTime2);
                    messageWriter.write(message);
                }
                function replySuccess(result, method, startTime2) {
                    if (result === void 0) {
                        result = null;
                    }
                    const message = {
                        jsonrpc: version,
                        id: requestMessage.id,
                        result
                    };
                    traceSendingResponse(message, method, startTime2);
                    messageWriter.write(message);
                }
                traceReceivedRequest(requestMessage);
                const element = requestHandlers[requestMessage.method];
                let type;
                let requestHandler;
                if (element) {
                    type = element.type;
                    requestHandler = element.handler;
                }
                const startTime = Date.now();
                if (requestHandler || starRequestHandler) {
                    const tokenKey = String(requestMessage.id);
                    const cancellationSource = cancellationStrategy.receiver.createCancellationTokenSource(tokenKey);
                    requestTokens[tokenKey] = cancellationSource;
                    try {
                        let handlerResult;
                        if (requestHandler) {
                            if (requestMessage.params === void 0) {
                                if (type !== void 0 && type.numberOfParams !== 0) {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines ${type.numberOfParams} params but recevied none.`), requestMessage.method, startTime);
                                    return;
                                }
                                handlerResult = requestHandler(cancellationSource.token);
                            }
                            else if (Array.isArray(requestMessage.params)) {
                                if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byName) {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by name but received parameters by position`), requestMessage.method, startTime);
                                    return;
                                }
                                handlerResult = requestHandler(...requestMessage.params, cancellationSource.token);
                            }
                            else {
                                if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by position but received parameters by name`), requestMessage.method, startTime);
                                    return;
                                }
                                handlerResult = requestHandler(requestMessage.params, cancellationSource.token);
                            }
                        }
                        else if (starRequestHandler) {
                            handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
                        }
                        const promise = handlerResult;
                        if (!handlerResult) {
                            delete requestTokens[tokenKey];
                            replySuccess(handlerResult, requestMessage.method, startTime);
                        }
                        else if (promise.then) {
                            promise.then((resultOrError) => {
                                delete requestTokens[tokenKey];
                                reply(resultOrError, requestMessage.method, startTime);
                            }, (error) => {
                                delete requestTokens[tokenKey];
                                if (error instanceof messages_1.ResponseError) {
                                    replyError(error, requestMessage.method, startTime);
                                }
                                else if (error && Is2.string(error.message)) {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                                }
                                else {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                                }
                            });
                        }
                        else {
                            delete requestTokens[tokenKey];
                            reply(handlerResult, requestMessage.method, startTime);
                        }
                    }
                    catch (error) {
                        delete requestTokens[tokenKey];
                        if (error instanceof messages_1.ResponseError) {
                            reply(error, requestMessage.method, startTime);
                        }
                        else if (error && Is2.string(error.message)) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                        }
                        else {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                        }
                    }
                }
                else {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);
                }
            }
            function handleResponse(responseMessage) {
                if (isDisposed()) {
                    return;
                }
                if (responseMessage.id === null) {
                    if (responseMessage.error) {
                        logger.error(`Received response message without id: Error is: 
${JSON.stringify(responseMessage.error, void 0, 4)}`);
                    }
                    else {
                        logger.error(`Received response message without id. No further error information provided.`);
                    }
                }
                else {
                    const key = String(responseMessage.id);
                    const responsePromise = responsePromises[key];
                    traceReceivedResponse(responseMessage, responsePromise);
                    if (responsePromise) {
                        delete responsePromises[key];
                        try {
                            if (responseMessage.error) {
                                const error = responseMessage.error;
                                responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));
                            }
                            else if (responseMessage.result !== void 0) {
                                responsePromise.resolve(responseMessage.result);
                            }
                            else {
                                throw new Error("Should never happen.");
                            }
                        }
                        catch (error) {
                            if (error.message) {
                                logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);
                            }
                            else {
                                logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);
                            }
                        }
                    }
                }
            }
            function handleNotification(message) {
                if (isDisposed()) {
                    return;
                }
                let type = void 0;
                let notificationHandler;
                if (message.method === CancelNotification.type.method) {
                    notificationHandler = (params) => {
                        const id = params.id;
                        const source = requestTokens[String(id)];
                        if (source) {
                            source.cancel();
                        }
                    };
                }
                else {
                    const element = notificationHandlers[message.method];
                    if (element) {
                        notificationHandler = element.handler;
                        type = element.type;
                    }
                }
                if (notificationHandler || starNotificationHandler) {
                    try {
                        traceReceivedNotification(message);
                        if (notificationHandler) {
                            if (message.params === void 0) {
                                if (type !== void 0) {
                                    if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {
                                        logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but recevied none.`);
                                    }
                                }
                                notificationHandler();
                            }
                            else if (Array.isArray(message.params)) {
                                if (type !== void 0) {
                                    if (type.parameterStructures === messages_1.ParameterStructures.byName) {
                                        logger.error(`Notification ${message.method} defines parameters by name but received parameters by position`);
                                    }
                                    if (type.numberOfParams !== message.params.length) {
                                        logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received ${message.params.length} argumennts`);
                                    }
                                }
                                notificationHandler(...message.params);
                            }
                            else {
                                if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                                    logger.error(`Notification ${message.method} defines parameters by position but received parameters by name`);
                                }
                                notificationHandler(message.params);
                            }
                        }
                        else if (starNotificationHandler) {
                            starNotificationHandler(message.method, message.params);
                        }
                    }
                    catch (error) {
                        if (error.message) {
                            logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);
                        }
                        else {
                            logger.error(`Notification handler '${message.method}' failed unexpectedly.`);
                        }
                    }
                }
                else {
                    unhandledNotificationEmitter.fire(message);
                }
            }
            function handleInvalidMessage(message) {
                if (!message) {
                    logger.error("Received empty message.");
                    return;
                }
                logger.error(`Received message which is neither a response nor a notification message:
${JSON.stringify(message, null, 4)}`);
                const responseMessage = message;
                if (Is2.string(responseMessage.id) || Is2.number(responseMessage.id)) {
                    const key = String(responseMessage.id);
                    const responseHandler = responsePromises[key];
                    if (responseHandler) {
                        responseHandler.reject(new Error("The received response has neither a result nor an error property."));
                    }
                }
            }
            function traceSendingRequest(message) {
                if (trace === Trace.Off || !tracer) {
                    return;
                }
                if (traceFormat === TraceFormat.Text) {
                    let data = void 0;
                    if (trace === Trace.Verbose && message.params) {
                        data = `Params: ${JSON.stringify(message.params, null, 4)}

`;
                    }
                    tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);
                }
                else {
                    logLSPMessage("send-request", message);
                }
            }
            function traceSendingNotification(message) {
                if (trace === Trace.Off || !tracer) {
                    return;
                }
                if (traceFormat === TraceFormat.Text) {
                    let data = void 0;
                    if (trace === Trace.Verbose) {
                        if (message.params) {
                            data = `Params: ${JSON.stringify(message.params, null, 4)}

`;
                        }
                        else {
                            data = "No parameters provided.\n\n";
                        }
                    }
                    tracer.log(`Sending notification '${message.method}'.`, data);
                }
                else {
                    logLSPMessage("send-notification", message);
                }
            }
            function traceSendingResponse(message, method, startTime) {
                if (trace === Trace.Off || !tracer) {
                    return;
                }
                if (traceFormat === TraceFormat.Text) {
                    let data = void 0;
                    if (trace === Trace.Verbose) {
                        if (message.error && message.error.data) {
                            data = `Error data: ${JSON.stringify(message.error.data, null, 4)}

`;
                        }
                        else {
                            if (message.result) {
                                data = `Result: ${JSON.stringify(message.result, null, 4)}

`;
                            }
                            else if (message.error === void 0) {
                                data = "No result returned.\n\n";
                            }
                        }
                    }
                    tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);
                }
                else {
                    logLSPMessage("send-response", message);
                }
            }
            function traceReceivedRequest(message) {
                if (trace === Trace.Off || !tracer) {
                    return;
                }
                if (traceFormat === TraceFormat.Text) {
                    let data = void 0;
                    if (trace === Trace.Verbose && message.params) {
                        data = `Params: ${JSON.stringify(message.params, null, 4)}

`;
                    }
                    tracer.log(`Received request '${message.method} - (${message.id})'.`, data);
                }
                else {
                    logLSPMessage("receive-request", message);
                }
            }
            function traceReceivedNotification(message) {
                if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
                    return;
                }
                if (traceFormat === TraceFormat.Text) {
                    let data = void 0;
                    if (trace === Trace.Verbose) {
                        if (message.params) {
                            data = `Params: ${JSON.stringify(message.params, null, 4)}

`;
                        }
                        else {
                            data = "No parameters provided.\n\n";
                        }
                    }
                    tracer.log(`Received notification '${message.method}'.`, data);
                }
                else {
                    logLSPMessage("receive-notification", message);
                }
            }
            function traceReceivedResponse(message, responsePromise) {
                if (trace === Trace.Off || !tracer) {
                    return;
                }
                if (traceFormat === TraceFormat.Text) {
                    let data = void 0;
                    if (trace === Trace.Verbose) {
                        if (message.error && message.error.data) {
                            data = `Error data: ${JSON.stringify(message.error.data, null, 4)}

`;
                        }
                        else {
                            if (message.result) {
                                data = `Result: ${JSON.stringify(message.result, null, 4)}

`;
                            }
                            else if (message.error === void 0) {
                                data = "No result returned.\n\n";
                            }
                        }
                    }
                    if (responsePromise) {
                        const error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : "";
                        tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);
                    }
                    else {
                        tracer.log(`Received response ${message.id} without active response promise.`, data);
                    }
                }
                else {
                    logLSPMessage("receive-response", message);
                }
            }
            function logLSPMessage(type, message) {
                if (!tracer || trace === Trace.Off) {
                    return;
                }
                const lspMessage = {
                    isLSPMessage: true,
                    type,
                    message,
                    timestamp: Date.now()
                };
                tracer.log(lspMessage);
            }
            function throwIfClosedOrDisposed() {
                if (isClosed()) {
                    throw new ConnectionError(ConnectionErrors.Closed, "Connection is closed.");
                }
                if (isDisposed()) {
                    throw new ConnectionError(ConnectionErrors.Disposed, "Connection is disposed.");
                }
            }
            function throwIfListening() {
                if (isListening()) {
                    throw new ConnectionError(ConnectionErrors.AlreadyListening, "Connection is already listening");
                }
            }
            function throwIfNotListening() {
                if (!isListening()) {
                    throw new Error("Call listen() first.");
                }
            }
            function undefinedToNull(param) {
                if (param === void 0) {
                    return null;
                }
                else {
                    return param;
                }
            }
            function nullToUndefined(param) {
                if (param === null) {
                    return void 0;
                }
                else {
                    return param;
                }
            }
            function isNamedParam(param) {
                return param !== void 0 && param !== null && !Array.isArray(param) && typeof param === "object";
            }
            function computeSingleParam(parameterStructures, param) {
                switch (parameterStructures) {
                    case messages_1.ParameterStructures.auto:
                        if (isNamedParam(param)) {
                            return nullToUndefined(param);
                        }
                        else {
                            return [undefinedToNull(param)];
                        }
                        break;
                    case messages_1.ParameterStructures.byName:
                        if (!isNamedParam(param)) {
                            throw new Error(`Recevied parameters by name but param is not an object literal.`);
                        }
                        return nullToUndefined(param);
                    case messages_1.ParameterStructures.byPosition:
                        return [undefinedToNull(param)];
                    default:
                        throw new Error(`Unknown parameter structure ${parameterStructures.toString()}`);
                }
            }
            function computeMessageParams(type, params) {
                let result;
                const numberOfParams = type.numberOfParams;
                switch (numberOfParams) {
                    case 0:
                        result = void 0;
                        break;
                    case 1:
                        result = computeSingleParam(type.parameterStructures, params[0]);
                        break;
                    default:
                        result = [];
                        for (let i = 0; i < params.length && i < numberOfParams; i++) {
                            result.push(undefinedToNull(params[i]));
                        }
                        if (params.length < numberOfParams) {
                            for (let i = params.length; i < numberOfParams; i++) {
                                result.push(null);
                            }
                        }
                        break;
                }
                return result;
            }
            const connection = {
                sendNotification: (type, ...args) => {
                    throwIfClosedOrDisposed();
                    let method;
                    let messageParams;
                    if (Is2.string(type)) {
                        method = type;
                        const first = args[0];
                        let paramStart = 0;
                        let parameterStructures = messages_1.ParameterStructures.auto;
                        if (messages_1.ParameterStructures.is(first)) {
                            paramStart = 1;
                            parameterStructures = first;
                        }
                        let paramEnd = args.length;
                        const numberOfParams = paramEnd - paramStart;
                        switch (numberOfParams) {
                            case 0:
                                messageParams = void 0;
                                break;
                            case 1:
                                messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                                break;
                            default:
                                if (parameterStructures === messages_1.ParameterStructures.byName) {
                                    throw new Error(`Recevied ${numberOfParams} parameters for 'by Name' notification parameter structure.`);
                                }
                                messageParams = args.slice(paramStart, paramEnd).map((value) => undefinedToNull(value));
                                break;
                        }
                    }
                    else {
                        const params = args;
                        method = type.method;
                        messageParams = computeMessageParams(type, params);
                    }
                    const notificationMessage = {
                        jsonrpc: version,
                        method,
                        params: messageParams
                    };
                    traceSendingNotification(notificationMessage);
                    messageWriter.write(notificationMessage);
                },
                onNotification: (type, handler) => {
                    throwIfClosedOrDisposed();
                    let method;
                    if (Is2.func(type)) {
                        starNotificationHandler = type;
                    }
                    else if (handler) {
                        if (Is2.string(type)) {
                            method = type;
                            notificationHandlers[type] = { type: void 0, handler };
                        }
                        else {
                            method = type.method;
                            notificationHandlers[type.method] = { type, handler };
                        }
                    }
                    return {
                        dispose: () => {
                            if (method !== void 0) {
                                delete notificationHandlers[method];
                            }
                            else {
                                starNotificationHandler = void 0;
                            }
                        }
                    };
                },
                onProgress: (_type, token, handler) => {
                    if (progressHandlers.has(token)) {
                        throw new Error(`Progress handler for token ${token} already registered`);
                    }
                    progressHandlers.set(token, handler);
                    return {
                        dispose: () => {
                            progressHandlers.delete(token);
                        }
                    };
                },
                sendProgress: (_type, token, value) => {
                    connection.sendNotification(ProgressNotification.type, { token, value });
                },
                onUnhandledProgress: unhandledProgressEmitter.event,
                sendRequest: (type, ...args) => {
                    throwIfClosedOrDisposed();
                    throwIfNotListening();
                    let method;
                    let messageParams;
                    let token = void 0;
                    if (Is2.string(type)) {
                        method = type;
                        const first = args[0];
                        const last = args[args.length - 1];
                        let paramStart = 0;
                        let parameterStructures = messages_1.ParameterStructures.auto;
                        if (messages_1.ParameterStructures.is(first)) {
                            paramStart = 1;
                            parameterStructures = first;
                        }
                        let paramEnd = args.length;
                        if (cancellation_1.CancellationToken.is(last)) {
                            paramEnd = paramEnd - 1;
                            token = last;
                        }
                        const numberOfParams = paramEnd - paramStart;
                        switch (numberOfParams) {
                            case 0:
                                messageParams = void 0;
                                break;
                            case 1:
                                messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                                break;
                            default:
                                if (parameterStructures === messages_1.ParameterStructures.byName) {
                                    throw new Error(`Recevied ${numberOfParams} parameters for 'by Name' request parameter structure.`);
                                }
                                messageParams = args.slice(paramStart, paramEnd).map((value) => undefinedToNull(value));
                                break;
                        }
                    }
                    else {
                        const params = args;
                        method = type.method;
                        messageParams = computeMessageParams(type, params);
                        const numberOfParams = type.numberOfParams;
                        token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : void 0;
                    }
                    const id = sequenceNumber++;
                    let disposable;
                    if (token) {
                        disposable = token.onCancellationRequested(() => {
                            cancellationStrategy.sender.sendCancellation(connection, id);
                        });
                    }
                    const result = new Promise((resolve2, reject) => {
                        const requestMessage = {
                            jsonrpc: version,
                            id,
                            method,
                            params: messageParams
                        };
                        const resolveWithCleanup = (r) => {
                            resolve2(r);
                            cancellationStrategy.sender.cleanup(id);
                            disposable === null || disposable === void 0 ? void 0 : disposable.dispose();
                        };
                        const rejectWithCleanup = (r) => {
                            reject(r);
                            cancellationStrategy.sender.cleanup(id);
                            disposable === null || disposable === void 0 ? void 0 : disposable.dispose();
                        };
                        let responsePromise = { method, timerStart: Date.now(), resolve: resolveWithCleanup, reject: rejectWithCleanup };
                        traceSendingRequest(requestMessage);
                        try {
                            messageWriter.write(requestMessage);
                        }
                        catch (e) {
                            responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, e.message ? e.message : "Unknown reason"));
                            responsePromise = null;
                        }
                        if (responsePromise) {
                            responsePromises[String(id)] = responsePromise;
                        }
                    });
                    return result;
                },
                onRequest: (type, handler) => {
                    throwIfClosedOrDisposed();
                    let method = null;
                    if (StarRequestHandler.is(type)) {
                        method = void 0;
                        starRequestHandler = type;
                    }
                    else if (Is2.string(type)) {
                        method = null;
                        if (handler !== void 0) {
                            method = type;
                            requestHandlers[type] = { handler, type: void 0 };
                        }
                    }
                    else {
                        if (handler !== void 0) {
                            method = type.method;
                            requestHandlers[type.method] = { type, handler };
                        }
                    }
                    return {
                        dispose: () => {
                            if (method === null) {
                                return;
                            }
                            if (method !== void 0) {
                                delete requestHandlers[method];
                            }
                            else {
                                starRequestHandler = void 0;
                            }
                        }
                    };
                },
                trace: (_value, _tracer, sendNotificationOrTraceOptions) => {
                    let _sendNotification = false;
                    let _traceFormat = TraceFormat.Text;
                    if (sendNotificationOrTraceOptions !== void 0) {
                        if (Is2.boolean(sendNotificationOrTraceOptions)) {
                            _sendNotification = sendNotificationOrTraceOptions;
                        }
                        else {
                            _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;
                            _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;
                        }
                    }
                    trace = _value;
                    traceFormat = _traceFormat;
                    if (trace === Trace.Off) {
                        tracer = void 0;
                    }
                    else {
                        tracer = _tracer;
                    }
                    if (_sendNotification && !isClosed() && !isDisposed()) {
                        connection.sendNotification(SetTraceNotification.type, { value: Trace.toString(_value) });
                    }
                },
                onError: errorEmitter.event,
                onClose: closeEmitter.event,
                onUnhandledNotification: unhandledNotificationEmitter.event,
                onDispose: disposeEmitter.event,
                end: () => {
                    messageWriter.end();
                },
                dispose: () => {
                    if (isDisposed()) {
                        return;
                    }
                    state = ConnectionState.Disposed;
                    disposeEmitter.fire(void 0);
                    const error = new Error("Connection got disposed.");
                    Object.keys(responsePromises).forEach((key) => {
                        responsePromises[key].reject(error);
                    });
                    responsePromises = /* @__PURE__ */ Object.create(null);
                    requestTokens = /* @__PURE__ */ Object.create(null);
                    messageQueue = new linkedMap_1.LinkedMap();
                    if (Is2.func(messageWriter.dispose)) {
                        messageWriter.dispose();
                    }
                    if (Is2.func(messageReader.dispose)) {
                        messageReader.dispose();
                    }
                },
                listen: () => {
                    throwIfClosedOrDisposed();
                    throwIfListening();
                    state = ConnectionState.Listening;
                    messageReader.listen(callback);
                },
                inspect: () => {
                    ral_1.default().console.log("inspect");
                }
            };
            connection.onNotification(LogTraceNotification.type, (params) => {
                if (trace === Trace.Off || !tracer) {
                    return;
                }
                tracer.log(params.message, trace === Trace.Verbose ? params.verbose : void 0);
            });
            connection.onNotification(ProgressNotification.type, (params) => {
                const handler = progressHandlers.get(params.token);
                if (handler) {
                    handler(params.value);
                }
                else {
                    unhandledProgressEmitter.fire(params);
                }
            });
            return connection;
        }
        exports.createMessageConnection = createMessageConnection;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/api.js
var require_api = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/api.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.Trace = exports.ProgressType = exports.createMessageConnection = exports.NullLogger = exports.ConnectionOptions = exports.ConnectionStrategy = exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = exports.CancellationToken = exports.CancellationTokenSource = exports.Emitter = exports.Event = exports.Disposable = exports.ParameterStructures = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.ErrorCodes = exports.ResponseError = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType0 = exports.RequestType = exports.RAL = void 0;
        exports.CancellationStrategy = void 0;
        var messages_1 = require_messages();
        Object.defineProperty(exports, "RequestType", { enumerable: true, get: function () {
                return messages_1.RequestType;
            } });
        Object.defineProperty(exports, "RequestType0", { enumerable: true, get: function () {
                return messages_1.RequestType0;
            } });
        Object.defineProperty(exports, "RequestType1", { enumerable: true, get: function () {
                return messages_1.RequestType1;
            } });
        Object.defineProperty(exports, "RequestType2", { enumerable: true, get: function () {
                return messages_1.RequestType2;
            } });
        Object.defineProperty(exports, "RequestType3", { enumerable: true, get: function () {
                return messages_1.RequestType3;
            } });
        Object.defineProperty(exports, "RequestType4", { enumerable: true, get: function () {
                return messages_1.RequestType4;
            } });
        Object.defineProperty(exports, "RequestType5", { enumerable: true, get: function () {
                return messages_1.RequestType5;
            } });
        Object.defineProperty(exports, "RequestType6", { enumerable: true, get: function () {
                return messages_1.RequestType6;
            } });
        Object.defineProperty(exports, "RequestType7", { enumerable: true, get: function () {
                return messages_1.RequestType7;
            } });
        Object.defineProperty(exports, "RequestType8", { enumerable: true, get: function () {
                return messages_1.RequestType8;
            } });
        Object.defineProperty(exports, "RequestType9", { enumerable: true, get: function () {
                return messages_1.RequestType9;
            } });
        Object.defineProperty(exports, "ResponseError", { enumerable: true, get: function () {
                return messages_1.ResponseError;
            } });
        Object.defineProperty(exports, "ErrorCodes", { enumerable: true, get: function () {
                return messages_1.ErrorCodes;
            } });
        Object.defineProperty(exports, "NotificationType", { enumerable: true, get: function () {
                return messages_1.NotificationType;
            } });
        Object.defineProperty(exports, "NotificationType0", { enumerable: true, get: function () {
                return messages_1.NotificationType0;
            } });
        Object.defineProperty(exports, "NotificationType1", { enumerable: true, get: function () {
                return messages_1.NotificationType1;
            } });
        Object.defineProperty(exports, "NotificationType2", { enumerable: true, get: function () {
                return messages_1.NotificationType2;
            } });
        Object.defineProperty(exports, "NotificationType3", { enumerable: true, get: function () {
                return messages_1.NotificationType3;
            } });
        Object.defineProperty(exports, "NotificationType4", { enumerable: true, get: function () {
                return messages_1.NotificationType4;
            } });
        Object.defineProperty(exports, "NotificationType5", { enumerable: true, get: function () {
                return messages_1.NotificationType5;
            } });
        Object.defineProperty(exports, "NotificationType6", { enumerable: true, get: function () {
                return messages_1.NotificationType6;
            } });
        Object.defineProperty(exports, "NotificationType7", { enumerable: true, get: function () {
                return messages_1.NotificationType7;
            } });
        Object.defineProperty(exports, "NotificationType8", { enumerable: true, get: function () {
                return messages_1.NotificationType8;
            } });
        Object.defineProperty(exports, "NotificationType9", { enumerable: true, get: function () {
                return messages_1.NotificationType9;
            } });
        Object.defineProperty(exports, "ParameterStructures", { enumerable: true, get: function () {
                return messages_1.ParameterStructures;
            } });
        var disposable_1 = require_disposable();
        Object.defineProperty(exports, "Disposable", { enumerable: true, get: function () {
                return disposable_1.Disposable;
            } });
        var events_1 = require_events();
        Object.defineProperty(exports, "Event", { enumerable: true, get: function () {
                return events_1.Event;
            } });
        Object.defineProperty(exports, "Emitter", { enumerable: true, get: function () {
                return events_1.Emitter;
            } });
        var cancellation_1 = require_cancellation();
        Object.defineProperty(exports, "CancellationTokenSource", { enumerable: true, get: function () {
                return cancellation_1.CancellationTokenSource;
            } });
        Object.defineProperty(exports, "CancellationToken", { enumerable: true, get: function () {
                return cancellation_1.CancellationToken;
            } });
        var messageReader_1 = require_messageReader();
        Object.defineProperty(exports, "MessageReader", { enumerable: true, get: function () {
                return messageReader_1.MessageReader;
            } });
        Object.defineProperty(exports, "AbstractMessageReader", { enumerable: true, get: function () {
                return messageReader_1.AbstractMessageReader;
            } });
        Object.defineProperty(exports, "ReadableStreamMessageReader", { enumerable: true, get: function () {
                return messageReader_1.ReadableStreamMessageReader;
            } });
        var messageWriter_1 = require_messageWriter();
        Object.defineProperty(exports, "MessageWriter", { enumerable: true, get: function () {
                return messageWriter_1.MessageWriter;
            } });
        Object.defineProperty(exports, "AbstractMessageWriter", { enumerable: true, get: function () {
                return messageWriter_1.AbstractMessageWriter;
            } });
        Object.defineProperty(exports, "WriteableStreamMessageWriter", { enumerable: true, get: function () {
                return messageWriter_1.WriteableStreamMessageWriter;
            } });
        var connection_1 = require_connection();
        Object.defineProperty(exports, "ConnectionStrategy", { enumerable: true, get: function () {
                return connection_1.ConnectionStrategy;
            } });
        Object.defineProperty(exports, "ConnectionOptions", { enumerable: true, get: function () {
                return connection_1.ConnectionOptions;
            } });
        Object.defineProperty(exports, "NullLogger", { enumerable: true, get: function () {
                return connection_1.NullLogger;
            } });
        Object.defineProperty(exports, "createMessageConnection", { enumerable: true, get: function () {
                return connection_1.createMessageConnection;
            } });
        Object.defineProperty(exports, "ProgressType", { enumerable: true, get: function () {
                return connection_1.ProgressType;
            } });
        Object.defineProperty(exports, "Trace", { enumerable: true, get: function () {
                return connection_1.Trace;
            } });
        Object.defineProperty(exports, "TraceFormat", { enumerable: true, get: function () {
                return connection_1.TraceFormat;
            } });
        Object.defineProperty(exports, "SetTraceNotification", { enumerable: true, get: function () {
                return connection_1.SetTraceNotification;
            } });
        Object.defineProperty(exports, "LogTraceNotification", { enumerable: true, get: function () {
                return connection_1.LogTraceNotification;
            } });
        Object.defineProperty(exports, "ConnectionErrors", { enumerable: true, get: function () {
                return connection_1.ConnectionErrors;
            } });
        Object.defineProperty(exports, "ConnectionError", { enumerable: true, get: function () {
                return connection_1.ConnectionError;
            } });
        Object.defineProperty(exports, "CancellationReceiverStrategy", { enumerable: true, get: function () {
                return connection_1.CancellationReceiverStrategy;
            } });
        Object.defineProperty(exports, "CancellationSenderStrategy", { enumerable: true, get: function () {
                return connection_1.CancellationSenderStrategy;
            } });
        Object.defineProperty(exports, "CancellationStrategy", { enumerable: true, get: function () {
                return connection_1.CancellationStrategy;
            } });
        var ral_1 = require_ral();
        exports.RAL = ral_1.default;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/browser/main.js
var require_main = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/browser/main.js"(exports) {
        "use strict";
        var __createBinding = exports && exports.__createBinding || (Object.create ? function (o, m, k, k2) {
            if (k2 === void 0)
                k2 = k;
            Object.defineProperty(o, k2, { enumerable: true, get: function () {
                    return m[k];
                } });
        } : function (o, m, k, k2) {
            if (k2 === void 0)
                k2 = k;
            o[k2] = m[k];
        });
        var __exportStar = exports && exports.__exportStar || function (m, exports2) {
            for (var p in m)
                if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
                    __createBinding(exports2, m, p);
        };
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.createMessageConnection = exports.BrowserMessageWriter = exports.BrowserMessageReader = void 0;
        var ril_1 = require_ril();
        ril_1.default.install();
        var api_1 = require_api();
        __exportStar(require_api(), exports);
        var BrowserMessageReader = class extends api_1.AbstractMessageReader {
            constructor(context) {
                super();
                this._onData = new api_1.Emitter();
                this._messageListener = (event) => {
                    this._onData.fire(event.data);
                };
                context.addEventListener("error", (event) => this.fireError(event));
                context.onmessage = this._messageListener;
            }
            listen(callback) {
                return this._onData.event(callback);
            }
        };
        exports.BrowserMessageReader = BrowserMessageReader;
        var BrowserMessageWriter = class extends api_1.AbstractMessageWriter {
            constructor(context) {
                super();
                this.context = context;
                this.errorCount = 0;
                context.addEventListener("error", (event) => this.fireError(event));
            }
            write(msg) {
                try {
                    this.context.postMessage(msg);
                    return Promise.resolve();
                }
                catch (error) {
                    this.handleError(error, msg);
                    return Promise.reject(error);
                }
            }
            handleError(error, msg) {
                this.errorCount++;
                this.fireError(error, msg, this.errorCount);
            }
            end() {
            }
        };
        exports.BrowserMessageWriter = BrowserMessageWriter;
        function createMessageConnection(reader, writer, logger, options) {
            if (logger === void 0) {
                logger = api_1.NullLogger;
            }
            if (api_1.ConnectionStrategy.is(options)) {
                options = { connectionStrategy: options };
            }
            return api_1.createMessageConnection(reader, writer, logger, options);
        }
        exports.createMessageConnection = createMessageConnection;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/browser.js
var require_browser = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/browser.js"(exports, module) {
        "use strict";
        module.exports = require_main();
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-types/lib/umd/main.js
var require_main2 = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-types/lib/umd/main.js"(exports, module) {
        (function (factory) {
            if (typeof module === "object" && typeof module.exports === "object") {
                var v = factory(__require, exports);
                if (v !== void 0)
                    module.exports = v;
            }
            else if (typeof define === "function" && define.amd) {
                define(["require", "exports"], factory);
            }
        })(function (require2, exports2) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", { value: true });
            exports2.TextDocument = exports2.EOL = exports2.SelectionRange = exports2.DocumentLink = exports2.FormattingOptions = exports2.CodeLens = exports2.CodeAction = exports2.CodeActionContext = exports2.CodeActionKind = exports2.DocumentSymbol = exports2.SymbolInformation = exports2.SymbolTag = exports2.SymbolKind = exports2.DocumentHighlight = exports2.DocumentHighlightKind = exports2.SignatureInformation = exports2.ParameterInformation = exports2.Hover = exports2.MarkedString = exports2.CompletionList = exports2.CompletionItem = exports2.InsertTextMode = exports2.InsertReplaceEdit = exports2.CompletionItemTag = exports2.InsertTextFormat = exports2.CompletionItemKind = exports2.MarkupContent = exports2.MarkupKind = exports2.TextDocumentItem = exports2.OptionalVersionedTextDocumentIdentifier = exports2.VersionedTextDocumentIdentifier = exports2.TextDocumentIdentifier = exports2.WorkspaceChange = exports2.WorkspaceEdit = exports2.DeleteFile = exports2.RenameFile = exports2.CreateFile = exports2.TextDocumentEdit = exports2.AnnotatedTextEdit = exports2.ChangeAnnotationIdentifier = exports2.ChangeAnnotation = exports2.TextEdit = exports2.Command = exports2.Diagnostic = exports2.CodeDescription = exports2.DiagnosticTag = exports2.DiagnosticSeverity = exports2.DiagnosticRelatedInformation = exports2.FoldingRange = exports2.FoldingRangeKind = exports2.ColorPresentation = exports2.ColorInformation = exports2.Color = exports2.LocationLink = exports2.Location = exports2.Range = exports2.Position = exports2.uinteger = exports2.integer = void 0;
            var integer2;
            (function (integer3) {
                integer3.MIN_VALUE = -2147483648;
                integer3.MAX_VALUE = 2147483647;
            })(integer2 = exports2.integer || (exports2.integer = {}));
            var uinteger2;
            (function (uinteger3) {
                uinteger3.MIN_VALUE = 0;
                uinteger3.MAX_VALUE = 2147483647;
            })(uinteger2 = exports2.uinteger || (exports2.uinteger = {}));
            var Position2;
            (function (Position3) {
                function create(line, character) {
                    if (line === Number.MAX_VALUE) {
                        line = uinteger2.MAX_VALUE;
                    }
                    if (character === Number.MAX_VALUE) {
                        character = uinteger2.MAX_VALUE;
                    }
                    return { line, character };
                }
                Position3.create = create;
                function is(value) {
                    var candidate = value;
                    return Is2.objectLiteral(candidate) && Is2.uinteger(candidate.line) && Is2.uinteger(candidate.character);
                }
                Position3.is = is;
            })(Position2 = exports2.Position || (exports2.Position = {}));
            var Range2;
            (function (Range3) {
                function create(one, two, three, four) {
                    if (Is2.uinteger(one) && Is2.uinteger(two) && Is2.uinteger(three) && Is2.uinteger(four)) {
                        return { start: Position2.create(one, two), end: Position2.create(three, four) };
                    }
                    else if (Position2.is(one) && Position2.is(two)) {
                        return { start: one, end: two };
                    }
                    else {
                        throw new Error("Range#create called with invalid arguments[" + one + ", " + two + ", " + three + ", " + four + "]");
                    }
                }
                Range3.create = create;
                function is(value) {
                    var candidate = value;
                    return Is2.objectLiteral(candidate) && Position2.is(candidate.start) && Position2.is(candidate.end);
                }
                Range3.is = is;
            })(Range2 = exports2.Range || (exports2.Range = {}));
            var Location2;
            (function (Location3) {
                function create(uri, range) {
                    return { uri, range };
                }
                Location3.create = create;
                function is(value) {
                    var candidate = value;
                    return Is2.defined(candidate) && Range2.is(candidate.range) && (Is2.string(candidate.uri) || Is2.undefined(candidate.uri));
                }
                Location3.is = is;
            })(Location2 = exports2.Location || (exports2.Location = {}));
            var LocationLink2;
            (function (LocationLink3) {
                function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
                    return { targetUri, targetRange, targetSelectionRange, originSelectionRange };
                }
                LocationLink3.create = create;
                function is(value) {
                    var candidate = value;
                    return Is2.defined(candidate) && Range2.is(candidate.targetRange) && Is2.string(candidate.targetUri) && (Range2.is(candidate.targetSelectionRange) || Is2.undefined(candidate.targetSelectionRange)) && (Range2.is(candidate.originSelectionRange) || Is2.undefined(candidate.originSelectionRange));
                }
                LocationLink3.is = is;
            })(LocationLink2 = exports2.LocationLink || (exports2.LocationLink = {}));
            var Color2;
            (function (Color3) {
                function create(red, green, blue, alpha) {
                    return {
                        red,
                        green,
                        blue,
                        alpha
                    };
                }
                Color3.create = create;
                function is(value) {
                    var candidate = value;
                    return Is2.numberRange(candidate.red, 0, 1) && Is2.numberRange(candidate.green, 0, 1) && Is2.numberRange(candidate.blue, 0, 1) && Is2.numberRange(candidate.alpha, 0, 1);
                }
                Color3.is = is;
            })(Color2 = exports2.Color || (exports2.Color = {}));
            var ColorInformation2;
            (function (ColorInformation3) {
                function create(range, color) {
                    return {
                        range,
                        color
                    };
                }
                ColorInformation3.create = create;
                function is(value) {
                    var candidate = value;
                    return Range2.is(candidate.range) && Color2.is(candidate.color);
                }
                ColorInformation3.is = is;
            })(ColorInformation2 = exports2.ColorInformation || (exports2.ColorInformation = {}));
            var ColorPresentation2;
            (function (ColorPresentation3) {
                function create(label, textEdit, additionalTextEdits) {
                    return {
                        label,
                        textEdit,
                        additionalTextEdits
                    };
                }
                ColorPresentation3.create = create;
                function is(value) {
                    var candidate = value;
                    return Is2.string(candidate.label) && (Is2.undefined(candidate.textEdit) || TextEdit2.is(candidate)) && (Is2.undefined(candidate.additionalTextEdits) || Is2.typedArray(candidate.additionalTextEdits, TextEdit2.is));
                }
                ColorPresentation3.is = is;
            })(ColorPresentation2 = exports2.ColorPresentation || (exports2.ColorPresentation = {}));
            var FoldingRangeKind2;
            (function (FoldingRangeKind3) {
                FoldingRangeKind3["Comment"] = "comment";
                FoldingRangeKind3["Imports"] = "imports";
                FoldingRangeKind3["Region"] = "region";
            })(FoldingRangeKind2 = exports2.FoldingRangeKind || (exports2.FoldingRangeKind = {}));
            var FoldingRange2;
            (function (FoldingRange3) {
                function create(startLine, endLine, startCharacter, endCharacter, kind) {
                    var result = {
                        startLine,
                        endLine
                    };
                    if (Is2.defined(startCharacter)) {
                        result.startCharacter = startCharacter;
                    }
                    if (Is2.defined(endCharacter)) {
                        result.endCharacter = endCharacter;
                    }
                    if (Is2.defined(kind)) {
                        result.kind = kind;
                    }
                    return result;
                }
                FoldingRange3.create = create;
                function is(value) {
                    var candidate = value;
                    return Is2.uinteger(candidate.startLine) && Is2.uinteger(candidate.startLine) && (Is2.undefined(candidate.startCharacter) || Is2.uinteger(candidate.startCharacter)) && (Is2.undefined(candidate.endCharacter) || Is2.uinteger(candidate.endCharacter)) && (Is2.undefined(candidate.kind) || Is2.string(candidate.kind));
                }
                FoldingRange3.is = is;
            })(FoldingRange2 = exports2.FoldingRange || (exports2.FoldingRange = {}));
            var DiagnosticRelatedInformation2;
            (function (DiagnosticRelatedInformation3) {
                function create(location, message) {
                    return {
                        location,
                        message
                    };
                }
                DiagnosticRelatedInformation3.create = create;
                function is(value) {
                    var candidate = value;
                    return Is2.defined(candidate) && Location2.is(candidate.location) && Is2.string(candidate.message);
                }
                DiagnosticRelatedInformation3.is = is;
            })(DiagnosticRelatedInformation2 = exports2.DiagnosticRelatedInformation || (exports2.DiagnosticRelatedInformation = {}));
            var DiagnosticSeverity2;
            (function (DiagnosticSeverity3) {
                DiagnosticSeverity3.Error = 1;
                DiagnosticSeverity3.Warning = 2;
                DiagnosticSeverity3.Information = 3;
                DiagnosticSeverity3.Hint = 4;
            })(DiagnosticSeverity2 = exports2.DiagnosticSeverity || (exports2.DiagnosticSeverity = {}));
            var DiagnosticTag2;
            (function (DiagnosticTag3) {
                DiagnosticTag3.Unnecessary = 1;
                DiagnosticTag3.Deprecated = 2;
            })(DiagnosticTag2 = exports2.DiagnosticTag || (exports2.DiagnosticTag = {}));
            var CodeDescription2;
            (function (CodeDescription3) {
                function is(value) {
                    var candidate = value;
                    return candidate !== void 0 && candidate !== null && Is2.string(candidate.href);
                }
                CodeDescription3.is = is;
            })(CodeDescription2 = exports2.CodeDescription || (exports2.CodeDescription = {}));
            var Diagnostic2;
            (function (Diagnostic3) {
                function create(range, message, severity, code, source, relatedInformation) {
                    var result = { range, message };
                    if (Is2.defined(severity)) {
                        result.severity = severity;
                    }
                    if (Is2.defined(code)) {
                        result.code = code;
                    }
                    if (Is2.defined(source)) {
                        result.source = source;
                    }
                    if (Is2.defined(relatedInformation)) {
                        result.relatedInformation = relatedInformation;
                    }
                    return result;
                }
                Diagnostic3.create = create;
                function is(value) {
                    var _a;
                    var candidate = value;
                    return Is2.defined(candidate) && Range2.is(candidate.range) && Is2.string(candidate.message) && (Is2.number(candidate.severity) || Is2.undefined(candidate.severity)) && (Is2.integer(candidate.code) || Is2.string(candidate.code) || Is2.undefined(candidate.code)) && (Is2.undefined(candidate.codeDescription) || Is2.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)) && (Is2.string(candidate.source) || Is2.undefined(candidate.source)) && (Is2.undefined(candidate.relatedInformation) || Is2.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation2.is));
                }
                Diagnostic3.is = is;
            })(Diagnostic2 = exports2.Diagnostic || (exports2.Diagnostic = {}));
            var Command2;
            (function (Command3) {
                function create(title, command) {
                    var args = [];
                    for (var _i = 2; _i < arguments.length; _i++) {
                        args[_i - 2] = arguments[_i];
                    }
                    var result = { title, command };
                    if (Is2.defined(args) && args.length > 0) {
                        result.arguments = args;
                    }
                    return result;
                }
                Command3.create = create;
                function is(value) {
                    var candidate = value;
                    return Is2.defined(candidate) && Is2.string(candidate.title) && Is2.string(candidate.command);
                }
                Command3.is = is;
            })(Command2 = exports2.Command || (exports2.Command = {}));
            var TextEdit2;
            (function (TextEdit3) {
                function replace(range, newText) {
                    return { range, newText };
                }
                TextEdit3.replace = replace;
                function insert(position, newText) {
                    return { range: { start: position, end: position }, newText };
                }
                TextEdit3.insert = insert;
                function del(range) {
                    return { range, newText: "" };
                }
                TextEdit3.del = del;
                function is(value) {
                    var candidate = value;
                    return Is2.objectLiteral(candidate) && Is2.string(candidate.newText) && Range2.is(candidate.range);
                }
                TextEdit3.is = is;
            })(TextEdit2 = exports2.TextEdit || (exports2.TextEdit = {}));
            var ChangeAnnotation2;
            (function (ChangeAnnotation3) {
                function create(label, needsConfirmation, description) {
                    var result = { label };
                    if (needsConfirmation !== void 0) {
                        result.needsConfirmation = needsConfirmation;
                    }
                    if (description !== void 0) {
                        result.description = description;
                    }
                    return result;
                }
                ChangeAnnotation3.create = create;
                function is(value) {
                    var candidate = value;
                    return candidate !== void 0 && Is2.objectLiteral(candidate) && Is2.string(candidate.label) && (Is2.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === void 0) && (Is2.string(candidate.description) || candidate.description === void 0);
                }
                ChangeAnnotation3.is = is;
            })(ChangeAnnotation2 = exports2.ChangeAnnotation || (exports2.ChangeAnnotation = {}));
            var ChangeAnnotationIdentifier2;
            (function (ChangeAnnotationIdentifier3) {
                function is(value) {
                    var candidate = value;
                    return typeof candidate === "string";
                }
                ChangeAnnotationIdentifier3.is = is;
            })(ChangeAnnotationIdentifier2 = exports2.ChangeAnnotationIdentifier || (exports2.ChangeAnnotationIdentifier = {}));
            var AnnotatedTextEdit2;
            (function (AnnotatedTextEdit3) {
                function replace(range, newText, annotation) {
                    return { range, newText, annotationId: annotation };
                }
                AnnotatedTextEdit3.replace = replace;
                function insert(position, newText, annotation) {
                    return { range: { start: position, end: position }, newText, annotationId: annotation };
                }
                AnnotatedTextEdit3.insert = insert;
                function del(range, annotation) {
                    return { range, newText: "", annotationId: annotation };
                }
                AnnotatedTextEdit3.del = del;
                function is(value) {
                    var candidate = value;
                    return TextEdit2.is(candidate) && (ChangeAnnotation2.is(candidate.annotationId) || ChangeAnnotationIdentifier2.is(candidate.annotationId));
                }
                AnnotatedTextEdit3.is = is;
            })(AnnotatedTextEdit2 = exports2.AnnotatedTextEdit || (exports2.AnnotatedTextEdit = {}));
            var TextDocumentEdit2;
            (function (TextDocumentEdit3) {
                function create(textDocument, edits) {
                    return { textDocument, edits };
                }
                TextDocumentEdit3.create = create;
                function is(value) {
                    var candidate = value;
                    return Is2.defined(candidate) && OptionalVersionedTextDocumentIdentifier2.is(candidate.textDocument) && Array.isArray(candidate.edits);
                }
                TextDocumentEdit3.is = is;
            })(TextDocumentEdit2 = exports2.TextDocumentEdit || (exports2.TextDocumentEdit = {}));
            var CreateFile2;
            (function (CreateFile3) {
                function create(uri, options, annotation) {
                    var result = {
                        kind: "create",
                        uri
                    };
                    if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
                        result.options = options;
                    }
                    if (annotation !== void 0) {
                        result.annotationId = annotation;
                    }
                    return result;
                }
                CreateFile3.create = create;
                function is(value) {
                    var candidate = value;
                    return candidate && candidate.kind === "create" && Is2.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is2.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is2.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier2.is(candidate.annotationId));
                }
                CreateFile3.is = is;
            })(CreateFile2 = exports2.CreateFile || (exports2.CreateFile = {}));
            var RenameFile2;
            (function (RenameFile3) {
                function create(oldUri, newUri, options, annotation) {
                    var result = {
                        kind: "rename",
                        oldUri,
                        newUri
                    };
                    if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
                        result.options = options;
                    }
                    if (annotation !== void 0) {
                        result.annotationId = annotation;
                    }
                    return result;
                }
                RenameFile3.create = create;
                function is(value) {
                    var candidate = value;
                    return candidate && candidate.kind === "rename" && Is2.string(candidate.oldUri) && Is2.string(candidate.newUri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is2.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is2.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier2.is(candidate.annotationId));
                }
                RenameFile3.is = is;
            })(RenameFile2 = exports2.RenameFile || (exports2.RenameFile = {}));
            var DeleteFile2;
            (function (DeleteFile3) {
                function create(uri, options, annotation) {
                    var result = {
                        kind: "delete",
                        uri
                    };
                    if (options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0)) {
                        result.options = options;
                    }
                    if (annotation !== void 0) {
                        result.annotationId = annotation;
                    }
                    return result;
                }
                DeleteFile3.create = create;
                function is(value) {
                    var candidate = value;
                    return candidate && candidate.kind === "delete" && Is2.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.recursive === void 0 || Is2.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is2.boolean(candidate.options.ignoreIfNotExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier2.is(candidate.annotationId));
                }
                DeleteFile3.is = is;
            })(DeleteFile2 = exports2.DeleteFile || (exports2.DeleteFile = {}));
            var WorkspaceEdit2;
            (function (WorkspaceEdit3) {
                function is(value) {
                    var candidate = value;
                    return candidate && (candidate.changes !== void 0 || candidate.documentChanges !== void 0) && (candidate.documentChanges === void 0 || candidate.documentChanges.every(function (change) {
                        if (Is2.string(change.kind)) {
                            return CreateFile2.is(change) || RenameFile2.is(change) || DeleteFile2.is(change);
                        }
                        else {
                            return TextDocumentEdit2.is(change);
                        }
                    }));
                }
                WorkspaceEdit3.is = is;
            })(WorkspaceEdit2 = exports2.WorkspaceEdit || (exports2.WorkspaceEdit = {}));
            var TextEditChangeImpl2 = (
            /** @class */
            function () {
                function TextEditChangeImpl3(edits, changeAnnotations) {
                    this.edits = edits;
                    this.changeAnnotations = changeAnnotations;
                }
                TextEditChangeImpl3.prototype.insert = function (position, newText, annotation) {
                    var edit;
                    var id;
                    if (annotation === void 0) {
                        edit = TextEdit2.insert(position, newText);
                    }
                    else if (ChangeAnnotationIdentifier2.is(annotation)) {
                        id = annotation;
                        edit = AnnotatedTextEdit2.insert(position, newText, annotation);
                    }
                    else {
                        this.assertChangeAnnotations(this.changeAnnotations);
                        id = this.changeAnnotations.manage(annotation);
                        edit = AnnotatedTextEdit2.insert(position, newText, id);
                    }
                    this.edits.push(edit);
                    if (id !== void 0) {
                        return id;
                    }
                };
                TextEditChangeImpl3.prototype.replace = function (range, newText, annotation) {
                    var edit;
                    var id;
                    if (annotation === void 0) {
                        edit = TextEdit2.replace(range, newText);
                    }
                    else if (ChangeAnnotationIdentifier2.is(annotation)) {
                        id = annotation;
                        edit = AnnotatedTextEdit2.replace(range, newText, annotation);
                    }
                    else {
                        this.assertChangeAnnotations(this.changeAnnotations);
                        id = this.changeAnnotations.manage(annotation);
                        edit = AnnotatedTextEdit2.replace(range, newText, id);
                    }
                    this.edits.push(edit);
                    if (id !== void 0) {
                        return id;
                    }
                };
                TextEditChangeImpl3.prototype.delete = function (range, annotation) {
                    var edit;
                    var id;
                    if (annotation === void 0) {
                        edit = TextEdit2.del(range);
                    }
                    else if (ChangeAnnotationIdentifier2.is(annotation)) {
                        id = annotation;
                        edit = AnnotatedTextEdit2.del(range, annotation);
                    }
                    else {
                        this.assertChangeAnnotations(this.changeAnnotations);
                        id = this.changeAnnotations.manage(annotation);
                        edit = AnnotatedTextEdit2.del(range, id);
                    }
                    this.edits.push(edit);
                    if (id !== void 0) {
                        return id;
                    }
                };
                TextEditChangeImpl3.prototype.add = function (edit) {
                    this.edits.push(edit);
                };
                TextEditChangeImpl3.prototype.all = function () {
                    return this.edits;
                };
                TextEditChangeImpl3.prototype.clear = function () {
                    this.edits.splice(0, this.edits.length);
                };
                TextEditChangeImpl3.prototype.assertChangeAnnotations = function (value) {
                    if (value === void 0) {
                        throw new Error("Text edit change is not configured to manage change annotations.");
                    }
                };
                return TextEditChangeImpl3;
            }());
            var ChangeAnnotations2 = (
            /** @class */
            function () {
                function ChangeAnnotations3(annotations) {
                    this._annotations = annotations === void 0 ? /* @__PURE__ */ Object.create(null) : annotations;
                    this._counter = 0;
                    this._size = 0;
                }
                ChangeAnnotations3.prototype.all = function () {
                    return this._annotations;
                };
                Object.defineProperty(ChangeAnnotations3.prototype, "size", {
                    get: function () {
                        return this._size;
                    },
                    enumerable: false,
                    configurable: true
                });
                ChangeAnnotations3.prototype.manage = function (idOrAnnotation, annotation) {
                    var id;
                    if (ChangeAnnotationIdentifier2.is(idOrAnnotation)) {
                        id = idOrAnnotation;
                    }
                    else {
                        id = this.nextId();
                        annotation = idOrAnnotation;
                    }
                    if (this._annotations[id] !== void 0) {
                        throw new Error("Id " + id + " is already in use.");
                    }
                    if (annotation === void 0) {
                        throw new Error("No annotation provided for id " + id);
                    }
                    this._annotations[id] = annotation;
                    this._size++;
                    return id;
                };
                ChangeAnnotations3.prototype.nextId = function () {
                    this._counter++;
                    return this._counter.toString();
                };
                return ChangeAnnotations3;
            }());
            var WorkspaceChange2 = (
            /** @class */
            function () {
                function WorkspaceChange3(workspaceEdit) {
                    var _this = this;
                    this._textEditChanges = /* @__PURE__ */ Object.create(null);
                    if (workspaceEdit !== void 0) {
                        this._workspaceEdit = workspaceEdit;
                        if (workspaceEdit.documentChanges) {
                            this._changeAnnotations = new ChangeAnnotations2(workspaceEdit.changeAnnotations);
                            workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                            workspaceEdit.documentChanges.forEach(function (change) {
                                if (TextDocumentEdit2.is(change)) {
                                    var textEditChange = new TextEditChangeImpl2(change.edits, _this._changeAnnotations);
                                    _this._textEditChanges[change.textDocument.uri] = textEditChange;
                                }
                            });
                        }
                        else if (workspaceEdit.changes) {
                            Object.keys(workspaceEdit.changes).forEach(function (key) {
                                var textEditChange = new TextEditChangeImpl2(workspaceEdit.changes[key]);
                                _this._textEditChanges[key] = textEditChange;
                            });
                        }
                    }
                    else {
                        this._workspaceEdit = {};
                    }
                }
                Object.defineProperty(WorkspaceChange3.prototype, "edit", {
                    /**
                     * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal
                     * use to be returned from a workspace edit operation like rename.
                     */
                    get: function () {
                        this.initDocumentChanges();
                        if (this._changeAnnotations !== void 0) {
                            if (this._changeAnnotations.size === 0) {
                                this._workspaceEdit.changeAnnotations = void 0;
                            }
                            else {
                                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                            }
                        }
                        return this._workspaceEdit;
                    },
                    enumerable: false,
                    configurable: true
                });
                WorkspaceChange3.prototype.getTextEditChange = function (key) {
                    if (OptionalVersionedTextDocumentIdentifier2.is(key)) {
                        this.initDocumentChanges();
                        if (this._workspaceEdit.documentChanges === void 0) {
                            throw new Error("Workspace edit is not configured for document changes.");
                        }
                        var textDocument = { uri: key.uri, version: key.version };
                        var result = this._textEditChanges[textDocument.uri];
                        if (!result) {
                            var edits = [];
                            var textDocumentEdit = {
                                textDocument,
                                edits
                            };
                            this._workspaceEdit.documentChanges.push(textDocumentEdit);
                            result = new TextEditChangeImpl2(edits, this._changeAnnotations);
                            this._textEditChanges[textDocument.uri] = result;
                        }
                        return result;
                    }
                    else {
                        this.initChanges();
                        if (this._workspaceEdit.changes === void 0) {
                            throw new Error("Workspace edit is not configured for normal text edit changes.");
                        }
                        var result = this._textEditChanges[key];
                        if (!result) {
                            var edits = [];
                            this._workspaceEdit.changes[key] = edits;
                            result = new TextEditChangeImpl2(edits);
                            this._textEditChanges[key] = result;
                        }
                        return result;
                    }
                };
                WorkspaceChange3.prototype.initDocumentChanges = function () {
                    if (this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0) {
                        this._changeAnnotations = new ChangeAnnotations2();
                        this._workspaceEdit.documentChanges = [];
                        this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                    }
                };
                WorkspaceChange3.prototype.initChanges = function () {
                    if (this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0) {
                        this._workspaceEdit.changes = /* @__PURE__ */ Object.create(null);
                    }
                };
                WorkspaceChange3.prototype.createFile = function (uri, optionsOrAnnotation, options) {
                    this.initDocumentChanges();
                    if (this._workspaceEdit.documentChanges === void 0) {
                        throw new Error("Workspace edit is not configured for document changes.");
                    }
                    var annotation;
                    if (ChangeAnnotation2.is(optionsOrAnnotation) || ChangeAnnotationIdentifier2.is(optionsOrAnnotation)) {
                        annotation = optionsOrAnnotation;
                    }
                    else {
                        options = optionsOrAnnotation;
                    }
                    var operation;
                    var id;
                    if (annotation === void 0) {
                        operation = CreateFile2.create(uri, options);
                    }
                    else {
                        id = ChangeAnnotationIdentifier2.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                        operation = CreateFile2.create(uri, options, id);
                    }
                    this._workspaceEdit.documentChanges.push(operation);
                    if (id !== void 0) {
                        return id;
                    }
                };
                WorkspaceChange3.prototype.renameFile = function (oldUri, newUri, optionsOrAnnotation, options) {
                    this.initDocumentChanges();
                    if (this._workspaceEdit.documentChanges === void 0) {
                        throw new Error("Workspace edit is not configured for document changes.");
                    }
                    var annotation;
                    if (ChangeAnnotation2.is(optionsOrAnnotation) || ChangeAnnotationIdentifier2.is(optionsOrAnnotation)) {
                        annotation = optionsOrAnnotation;
                    }
                    else {
                        options = optionsOrAnnotation;
                    }
                    var operation;
                    var id;
                    if (annotation === void 0) {
                        operation = RenameFile2.create(oldUri, newUri, options);
                    }
                    else {
                        id = ChangeAnnotationIdentifier2.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                        operation = RenameFile2.create(oldUri, newUri, options, id);
                    }
                    this._workspaceEdit.documentChanges.push(operation);
                    if (id !== void 0) {
                        return id;
                    }
                };
                WorkspaceChange3.prototype.deleteFile = function (uri, optionsOrAnnotation, options) {
                    this.initDocumentChanges();
                    if (this._workspaceEdit.documentChanges === void 0) {
                        throw new Error("Workspace edit is not configured for document changes.");
                    }
                    var annotation;
                    if (ChangeAnnotation2.is(optionsOrAnnotation) || ChangeAnnotationIdentifier2.is(optionsOrAnnotation)) {
                        annotation = optionsOrAnnotation;
                    }
                    else {
                        options = optionsOrAnnotation;
                    }
                    var operation;
                    var id;
                    if (annotation === void 0) {
                        operation = DeleteFile2.create(uri, options);
                    }
                    else {
                        id = ChangeAnnotationIdentifier2.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                        operation = DeleteFile2.create(uri, options, id);
                    }
                    this._workspaceEdit.documentChanges.push(operation);
                    if (id !== void 0) {
                        return id;
                    }
                };
                return WorkspaceChange3;
            }());
            exports2.WorkspaceChange = WorkspaceChange2;
            var TextDocumentIdentifier2;
            (function (TextDocumentIdentifier3) {
                function create(uri) {
                    return { uri };
                }
                TextDocumentIdentifier3.create = create;
                function is(value) {
                    var candidate = value;
                    return Is2.defined(candidate) && Is2.string(candidate.uri);
                }
                TextDocumentIdentifier3.is = is;
            })(TextDocumentIdentifier2 = exports2.TextDocumentIdentifier || (exports2.TextDocumentIdentifier = {}));
            var VersionedTextDocumentIdentifier2;
            (function (VersionedTextDocumentIdentifier3) {
                function create(uri, version) {
                    return { uri, version };
                }
                VersionedTextDocumentIdentifier3.create = create;
                function is(value) {
                    var candidate = value;
                    return Is2.defined(candidate) && Is2.string(candidate.uri) && Is2.integer(candidate.version);
                }
                VersionedTextDocumentIdentifier3.is = is;
            })(VersionedTextDocumentIdentifier2 = exports2.VersionedTextDocumentIdentifier || (exports2.VersionedTextDocumentIdentifier = {}));
            var OptionalVersionedTextDocumentIdentifier2;
            (function (OptionalVersionedTextDocumentIdentifier3) {
                function create(uri, version) {
                    return { uri, version };
                }
                OptionalVersionedTextDocumentIdentifier3.create = create;
                function is(value) {
                    var candidate = value;
                    return Is2.defined(candidate) && Is2.string(candidate.uri) && (candidate.version === null || Is2.integer(candidate.version));
                }
                OptionalVersionedTextDocumentIdentifier3.is = is;
            })(OptionalVersionedTextDocumentIdentifier2 = exports2.OptionalVersionedTextDocumentIdentifier || (exports2.OptionalVersionedTextDocumentIdentifier = {}));
            var TextDocumentItem2;
            (function (TextDocumentItem3) {
                function create(uri, languageId, version, text) {
                    return { uri, languageId, version, text };
                }
                TextDocumentItem3.create = create;
                function is(value) {
                    var candidate = value;
                    return Is2.defined(candidate) && Is2.string(candidate.uri) && Is2.string(candidate.languageId) && Is2.integer(candidate.version) && Is2.string(candidate.text);
                }
                TextDocumentItem3.is = is;
            })(TextDocumentItem2 = exports2.TextDocumentItem || (exports2.TextDocumentItem = {}));
            var MarkupKind2;
            (function (MarkupKind3) {
                MarkupKind3.PlainText = "plaintext";
                MarkupKind3.Markdown = "markdown";
            })(MarkupKind2 = exports2.MarkupKind || (exports2.MarkupKind = {}));
            (function (MarkupKind3) {
                function is(value) {
                    var candidate = value;
                    return candidate === MarkupKind3.PlainText || candidate === MarkupKind3.Markdown;
                }
                MarkupKind3.is = is;
            })(MarkupKind2 = exports2.MarkupKind || (exports2.MarkupKind = {}));
            var MarkupContent2;
            (function (MarkupContent3) {
                function is(value) {
                    var candidate = value;
                    return Is2.objectLiteral(value) && MarkupKind2.is(candidate.kind) && Is2.string(candidate.value);
                }
                MarkupContent3.is = is;
            })(MarkupContent2 = exports2.MarkupContent || (exports2.MarkupContent = {}));
            var CompletionItemKind2;
            (function (CompletionItemKind3) {
                CompletionItemKind3.Text = 1;
                CompletionItemKind3.Method = 2;
                CompletionItemKind3.Function = 3;
                CompletionItemKind3.Constructor = 4;
                CompletionItemKind3.Field = 5;
                CompletionItemKind3.Variable = 6;
                CompletionItemKind3.Class = 7;
                CompletionItemKind3.Interface = 8;
                CompletionItemKind3.Module = 9;
                CompletionItemKind3.Property = 10;
                CompletionItemKind3.Unit = 11;
                CompletionItemKind3.Value = 12;
                CompletionItemKind3.Enum = 13;
                CompletionItemKind3.Keyword = 14;
                CompletionItemKind3.Snippet = 15;
                CompletionItemKind3.Color = 16;
                CompletionItemKind3.File = 17;
                CompletionItemKind3.Reference = 18;
                CompletionItemKind3.Folder = 19;
                CompletionItemKind3.EnumMember = 20;
                CompletionItemKind3.Constant = 21;
                CompletionItemKind3.Struct = 22;
                CompletionItemKind3.Event = 23;
                CompletionItemKind3.Operator = 24;
                CompletionItemKind3.TypeParameter = 25;
            })(CompletionItemKind2 = exports2.CompletionItemKind || (exports2.CompletionItemKind = {}));
            var InsertTextFormat2;
            (function (InsertTextFormat3) {
                InsertTextFormat3.PlainText = 1;
                InsertTextFormat3.Snippet = 2;
            })(InsertTextFormat2 = exports2.InsertTextFormat || (exports2.InsertTextFormat = {}));
            var CompletionItemTag2;
            (function (CompletionItemTag3) {
                CompletionItemTag3.Deprecated = 1;
            })(CompletionItemTag2 = exports2.CompletionItemTag || (exports2.CompletionItemTag = {}));
            var InsertReplaceEdit2;
            (function (InsertReplaceEdit3) {
                function create(newText, insert, replace) {
                    return { newText, insert, replace };
                }
                InsertReplaceEdit3.create = create;
                function is(value) {
                    var candidate = value;
                    return candidate && Is2.string(candidate.newText) && Range2.is(candidate.insert) && Range2.is(candidate.replace);
                }
                InsertReplaceEdit3.is = is;
            })(InsertReplaceEdit2 = exports2.InsertReplaceEdit || (exports2.InsertReplaceEdit = {}));
            var InsertTextMode2;
            (function (InsertTextMode3) {
                InsertTextMode3.asIs = 1;
                InsertTextMode3.adjustIndentation = 2;
            })(InsertTextMode2 = exports2.InsertTextMode || (exports2.InsertTextMode = {}));
            var CompletionItem2;
            (function (CompletionItem3) {
                function create(label) {
                    return { label };
                }
                CompletionItem3.create = create;
            })(CompletionItem2 = exports2.CompletionItem || (exports2.CompletionItem = {}));
            var CompletionList2;
            (function (CompletionList3) {
                function create(items, isIncomplete) {
                    return { items: items ? items : [], isIncomplete: !!isIncomplete };
                }
                CompletionList3.create = create;
            })(CompletionList2 = exports2.CompletionList || (exports2.CompletionList = {}));
            var MarkedString2;
            (function (MarkedString3) {
                function fromPlainText(plainText) {
                    return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
                }
                MarkedString3.fromPlainText = fromPlainText;
                function is(value) {
                    var candidate = value;
                    return Is2.string(candidate) || Is2.objectLiteral(candidate) && Is2.string(candidate.language) && Is2.string(candidate.value);
                }
                MarkedString3.is = is;
            })(MarkedString2 = exports2.MarkedString || (exports2.MarkedString = {}));
            var Hover2;
            (function (Hover3) {
                function is(value) {
                    var candidate = value;
                    return !!candidate && Is2.objectLiteral(candidate) && (MarkupContent2.is(candidate.contents) || MarkedString2.is(candidate.contents) || Is2.typedArray(candidate.contents, MarkedString2.is)) && (value.range === void 0 || Range2.is(value.range));
                }
                Hover3.is = is;
            })(Hover2 = exports2.Hover || (exports2.Hover = {}));
            var ParameterInformation2;
            (function (ParameterInformation3) {
                function create(label, documentation) {
                    return documentation ? { label, documentation } : { label };
                }
                ParameterInformation3.create = create;
            })(ParameterInformation2 = exports2.ParameterInformation || (exports2.ParameterInformation = {}));
            var SignatureInformation2;
            (function (SignatureInformation3) {
                function create(label, documentation) {
                    var parameters = [];
                    for (var _i = 2; _i < arguments.length; _i++) {
                        parameters[_i - 2] = arguments[_i];
                    }
                    var result = { label };
                    if (Is2.defined(documentation)) {
                        result.documentation = documentation;
                    }
                    if (Is2.defined(parameters)) {
                        result.parameters = parameters;
                    }
                    else {
                        result.parameters = [];
                    }
                    return result;
                }
                SignatureInformation3.create = create;
            })(SignatureInformation2 = exports2.SignatureInformation || (exports2.SignatureInformation = {}));
            var DocumentHighlightKind2;
            (function (DocumentHighlightKind3) {
                DocumentHighlightKind3.Text = 1;
                DocumentHighlightKind3.Read = 2;
                DocumentHighlightKind3.Write = 3;
            })(DocumentHighlightKind2 = exports2.DocumentHighlightKind || (exports2.DocumentHighlightKind = {}));
            var DocumentHighlight2;
            (function (DocumentHighlight3) {
                function create(range, kind) {
                    var result = { range };
                    if (Is2.number(kind)) {
                        result.kind = kind;
                    }
                    return result;
                }
                DocumentHighlight3.create = create;
            })(DocumentHighlight2 = exports2.DocumentHighlight || (exports2.DocumentHighlight = {}));
            var SymbolKind2;
            (function (SymbolKind3) {
                SymbolKind3.File = 1;
                SymbolKind3.Module = 2;
                SymbolKind3.Namespace = 3;
                SymbolKind3.Package = 4;
                SymbolKind3.Class = 5;
                SymbolKind3.Method = 6;
                SymbolKind3.Property = 7;
                SymbolKind3.Field = 8;
                SymbolKind3.Constructor = 9;
                SymbolKind3.Enum = 10;
                SymbolKind3.Interface = 11;
                SymbolKind3.Function = 12;
                SymbolKind3.Variable = 13;
                SymbolKind3.Constant = 14;
                SymbolKind3.String = 15;
                SymbolKind3.Number = 16;
                SymbolKind3.Boolean = 17;
                SymbolKind3.Array = 18;
                SymbolKind3.Object = 19;
                SymbolKind3.Key = 20;
                SymbolKind3.Null = 21;
                SymbolKind3.EnumMember = 22;
                SymbolKind3.Struct = 23;
                SymbolKind3.Event = 24;
                SymbolKind3.Operator = 25;
                SymbolKind3.TypeParameter = 26;
            })(SymbolKind2 = exports2.SymbolKind || (exports2.SymbolKind = {}));
            var SymbolTag2;
            (function (SymbolTag3) {
                SymbolTag3.Deprecated = 1;
            })(SymbolTag2 = exports2.SymbolTag || (exports2.SymbolTag = {}));
            var SymbolInformation2;
            (function (SymbolInformation3) {
                function create(name, kind, range, uri, containerName) {
                    var result = {
                        name,
                        kind,
                        location: { uri, range }
                    };
                    if (containerName) {
                        result.containerName = containerName;
                    }
                    return result;
                }
                SymbolInformation3.create = create;
            })(SymbolInformation2 = exports2.SymbolInformation || (exports2.SymbolInformation = {}));
            var DocumentSymbol2;
            (function (DocumentSymbol3) {
                function create(name, detail, kind, range, selectionRange, children) {
                    var result = {
                        name,
                        detail,
                        kind,
                        range,
                        selectionRange
                    };
                    if (children !== void 0) {
                        result.children = children;
                    }
                    return result;
                }
                DocumentSymbol3.create = create;
                function is(value) {
                    var candidate = value;
                    return candidate && Is2.string(candidate.name) && Is2.number(candidate.kind) && Range2.is(candidate.range) && Range2.is(candidate.selectionRange) && (candidate.detail === void 0 || Is2.string(candidate.detail)) && (candidate.deprecated === void 0 || Is2.boolean(candidate.deprecated)) && (candidate.children === void 0 || Array.isArray(candidate.children)) && (candidate.tags === void 0 || Array.isArray(candidate.tags));
                }
                DocumentSymbol3.is = is;
            })(DocumentSymbol2 = exports2.DocumentSymbol || (exports2.DocumentSymbol = {}));
            var CodeActionKind2;
            (function (CodeActionKind3) {
                CodeActionKind3.Empty = "";
                CodeActionKind3.QuickFix = "quickfix";
                CodeActionKind3.Refactor = "refactor";
                CodeActionKind3.RefactorExtract = "refactor.extract";
                CodeActionKind3.RefactorInline = "refactor.inline";
                CodeActionKind3.RefactorRewrite = "refactor.rewrite";
                CodeActionKind3.Source = "source";
                CodeActionKind3.SourceOrganizeImports = "source.organizeImports";
                CodeActionKind3.SourceFixAll = "source.fixAll";
            })(CodeActionKind2 = exports2.CodeActionKind || (exports2.CodeActionKind = {}));
            var CodeActionContext2;
            (function (CodeActionContext3) {
                function create(diagnostics, only) {
                    var result = { diagnostics };
                    if (only !== void 0 && only !== null) {
                        result.only = only;
                    }
                    return result;
                }
                CodeActionContext3.create = create;
                function is(value) {
                    var candidate = value;
                    return Is2.defined(candidate) && Is2.typedArray(candidate.diagnostics, Diagnostic2.is) && (candidate.only === void 0 || Is2.typedArray(candidate.only, Is2.string));
                }
                CodeActionContext3.is = is;
            })(CodeActionContext2 = exports2.CodeActionContext || (exports2.CodeActionContext = {}));
            var CodeAction2;
            (function (CodeAction3) {
                function create(title, kindOrCommandOrEdit, kind) {
                    var result = { title };
                    var checkKind = true;
                    if (typeof kindOrCommandOrEdit === "string") {
                        checkKind = false;
                        result.kind = kindOrCommandOrEdit;
                    }
                    else if (Command2.is(kindOrCommandOrEdit)) {
                        result.command = kindOrCommandOrEdit;
                    }
                    else {
                        result.edit = kindOrCommandOrEdit;
                    }
                    if (checkKind && kind !== void 0) {
                        result.kind = kind;
                    }
                    return result;
                }
                CodeAction3.create = create;
                function is(value) {
                    var candidate = value;
                    return candidate && Is2.string(candidate.title) && (candidate.diagnostics === void 0 || Is2.typedArray(candidate.diagnostics, Diagnostic2.is)) && (candidate.kind === void 0 || Is2.string(candidate.kind)) && (candidate.edit !== void 0 || candidate.command !== void 0) && (candidate.command === void 0 || Command2.is(candidate.command)) && (candidate.isPreferred === void 0 || Is2.boolean(candidate.isPreferred)) && (candidate.edit === void 0 || WorkspaceEdit2.is(candidate.edit));
                }
                CodeAction3.is = is;
            })(CodeAction2 = exports2.CodeAction || (exports2.CodeAction = {}));
            var CodeLens2;
            (function (CodeLens3) {
                function create(range, data) {
                    var result = { range };
                    if (Is2.defined(data)) {
                        result.data = data;
                    }
                    return result;
                }
                CodeLens3.create = create;
                function is(value) {
                    var candidate = value;
                    return Is2.defined(candidate) && Range2.is(candidate.range) && (Is2.undefined(candidate.command) || Command2.is(candidate.command));
                }
                CodeLens3.is = is;
            })(CodeLens2 = exports2.CodeLens || (exports2.CodeLens = {}));
            var FormattingOptions2;
            (function (FormattingOptions3) {
                function create(tabSize, insertSpaces) {
                    return { tabSize, insertSpaces };
                }
                FormattingOptions3.create = create;
                function is(value) {
                    var candidate = value;
                    return Is2.defined(candidate) && Is2.uinteger(candidate.tabSize) && Is2.boolean(candidate.insertSpaces);
                }
                FormattingOptions3.is = is;
            })(FormattingOptions2 = exports2.FormattingOptions || (exports2.FormattingOptions = {}));
            var DocumentLink2;
            (function (DocumentLink3) {
                function create(range, target, data) {
                    return { range, target, data };
                }
                DocumentLink3.create = create;
                function is(value) {
                    var candidate = value;
                    return Is2.defined(candidate) && Range2.is(candidate.range) && (Is2.undefined(candidate.target) || Is2.string(candidate.target));
                }
                DocumentLink3.is = is;
            })(DocumentLink2 = exports2.DocumentLink || (exports2.DocumentLink = {}));
            var SelectionRange2;
            (function (SelectionRange3) {
                function create(range, parent) {
                    return { range, parent };
                }
                SelectionRange3.create = create;
                function is(value) {
                    var candidate = value;
                    return candidate !== void 0 && Range2.is(candidate.range) && (candidate.parent === void 0 || SelectionRange3.is(candidate.parent));
                }
                SelectionRange3.is = is;
            })(SelectionRange2 = exports2.SelectionRange || (exports2.SelectionRange = {}));
            exports2.EOL = ["\n", "\r\n", "\r"];
            var TextDocument4;
            (function (TextDocument5) {
                function create(uri, languageId, version, content) {
                    return new FullTextDocument2(uri, languageId, version, content);
                }
                TextDocument5.create = create;
                function is(value) {
                    var candidate = value;
                    return Is2.defined(candidate) && Is2.string(candidate.uri) && (Is2.undefined(candidate.languageId) || Is2.string(candidate.languageId)) && Is2.uinteger(candidate.lineCount) && Is2.func(candidate.getText) && Is2.func(candidate.positionAt) && Is2.func(candidate.offsetAt) ? true : false;
                }
                TextDocument5.is = is;
                function applyEdits(document, edits) {
                    var text = document.getText();
                    var sortedEdits = mergeSort(edits, function (a2, b) {
                        var diff = a2.range.start.line - b.range.start.line;
                        if (diff === 0) {
                            return a2.range.start.character - b.range.start.character;
                        }
                        return diff;
                    });
                    var lastModifiedOffset = text.length;
                    for (var i = sortedEdits.length - 1; i >= 0; i--) {
                        var e = sortedEdits[i];
                        var startOffset = document.offsetAt(e.range.start);
                        var endOffset = document.offsetAt(e.range.end);
                        if (endOffset <= lastModifiedOffset) {
                            text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
                        }
                        else {
                            throw new Error("Overlapping edit");
                        }
                        lastModifiedOffset = startOffset;
                    }
                    return text;
                }
                TextDocument5.applyEdits = applyEdits;
                function mergeSort(data, compare) {
                    if (data.length <= 1) {
                        return data;
                    }
                    var p = data.length / 2 | 0;
                    var left = data.slice(0, p);
                    var right = data.slice(p);
                    mergeSort(left, compare);
                    mergeSort(right, compare);
                    var leftIdx = 0;
                    var rightIdx = 0;
                    var i = 0;
                    while (leftIdx < left.length && rightIdx < right.length) {
                        var ret = compare(left[leftIdx], right[rightIdx]);
                        if (ret <= 0) {
                            data[i++] = left[leftIdx++];
                        }
                        else {
                            data[i++] = right[rightIdx++];
                        }
                    }
                    while (leftIdx < left.length) {
                        data[i++] = left[leftIdx++];
                    }
                    while (rightIdx < right.length) {
                        data[i++] = right[rightIdx++];
                    }
                    return data;
                }
            })(TextDocument4 = exports2.TextDocument || (exports2.TextDocument = {}));
            var FullTextDocument2 = (
            /** @class */
            function () {
                function FullTextDocument3(uri, languageId, version, content) {
                    this._uri = uri;
                    this._languageId = languageId;
                    this._version = version;
                    this._content = content;
                    this._lineOffsets = void 0;
                }
                Object.defineProperty(FullTextDocument3.prototype, "uri", {
                    get: function () {
                        return this._uri;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(FullTextDocument3.prototype, "languageId", {
                    get: function () {
                        return this._languageId;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(FullTextDocument3.prototype, "version", {
                    get: function () {
                        return this._version;
                    },
                    enumerable: false,
                    configurable: true
                });
                FullTextDocument3.prototype.getText = function (range) {
                    if (range) {
                        var start = this.offsetAt(range.start);
                        var end = this.offsetAt(range.end);
                        return this._content.substring(start, end);
                    }
                    return this._content;
                };
                FullTextDocument3.prototype.update = function (event, version) {
                    this._content = event.text;
                    this._version = version;
                    this._lineOffsets = void 0;
                };
                FullTextDocument3.prototype.getLineOffsets = function () {
                    if (this._lineOffsets === void 0) {
                        var lineOffsets = [];
                        var text = this._content;
                        var isLineStart = true;
                        for (var i = 0; i < text.length; i++) {
                            if (isLineStart) {
                                lineOffsets.push(i);
                                isLineStart = false;
                            }
                            var ch = text.charAt(i);
                            isLineStart = ch === "\r" || ch === "\n";
                            if (ch === "\r" && i + 1 < text.length && text.charAt(i + 1) === "\n") {
                                i++;
                            }
                        }
                        if (isLineStart && text.length > 0) {
                            lineOffsets.push(text.length);
                        }
                        this._lineOffsets = lineOffsets;
                    }
                    return this._lineOffsets;
                };
                FullTextDocument3.prototype.positionAt = function (offset) {
                    offset = Math.max(Math.min(offset, this._content.length), 0);
                    var lineOffsets = this.getLineOffsets();
                    var low = 0, high = lineOffsets.length;
                    if (high === 0) {
                        return Position2.create(0, offset);
                    }
                    while (low < high) {
                        var mid = Math.floor((low + high) / 2);
                        if (lineOffsets[mid] > offset) {
                            high = mid;
                        }
                        else {
                            low = mid + 1;
                        }
                    }
                    var line = low - 1;
                    return Position2.create(line, offset - lineOffsets[line]);
                };
                FullTextDocument3.prototype.offsetAt = function (position) {
                    var lineOffsets = this.getLineOffsets();
                    if (position.line >= lineOffsets.length) {
                        return this._content.length;
                    }
                    else if (position.line < 0) {
                        return 0;
                    }
                    var lineOffset = lineOffsets[position.line];
                    var nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
                    return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
                };
                Object.defineProperty(FullTextDocument3.prototype, "lineCount", {
                    get: function () {
                        return this.getLineOffsets().length;
                    },
                    enumerable: false,
                    configurable: true
                });
                return FullTextDocument3;
            }());
            var Is2;
            (function (Is3) {
                var toString = Object.prototype.toString;
                function defined(value) {
                    return typeof value !== "undefined";
                }
                Is3.defined = defined;
                function undefined2(value) {
                    return typeof value === "undefined";
                }
                Is3.undefined = undefined2;
                function boolean(value) {
                    return value === true || value === false;
                }
                Is3.boolean = boolean;
                function string2(value) {
                    return toString.call(value) === "[object String]";
                }
                Is3.string = string2;
                function number(value) {
                    return toString.call(value) === "[object Number]";
                }
                Is3.number = number;
                function numberRange(value, min, max) {
                    return toString.call(value) === "[object Number]" && min <= value && value <= max;
                }
                Is3.numberRange = numberRange;
                function integer3(value) {
                    return toString.call(value) === "[object Number]" && -2147483648 <= value && value <= 2147483647;
                }
                Is3.integer = integer3;
                function uinteger3(value) {
                    return toString.call(value) === "[object Number]" && 0 <= value && value <= 2147483647;
                }
                Is3.uinteger = uinteger3;
                function func(value) {
                    return toString.call(value) === "[object Function]";
                }
                Is3.func = func;
                function objectLiteral(value) {
                    return value !== null && typeof value === "object";
                }
                Is3.objectLiteral = objectLiteral;
                function typedArray(value, check) {
                    return Array.isArray(value) && value.every(check);
                }
                Is3.typedArray = typedArray;
            })(Is2 || (Is2 = {}));
        });
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/messages.js
var require_messages2 = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/messages.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.ProtocolNotificationType = exports.ProtocolNotificationType0 = exports.ProtocolRequestType = exports.ProtocolRequestType0 = exports.RegistrationType = void 0;
        var vscode_jsonrpc_1 = require_main();
        var RegistrationType = class {
            constructor(method) {
                this.method = method;
            }
        };
        exports.RegistrationType = RegistrationType;
        var ProtocolRequestType0 = class extends vscode_jsonrpc_1.RequestType0 {
            constructor(method) {
                super(method);
            }
        };
        exports.ProtocolRequestType0 = ProtocolRequestType0;
        var ProtocolRequestType = class extends vscode_jsonrpc_1.RequestType {
            constructor(method) {
                super(method, vscode_jsonrpc_1.ParameterStructures.byName);
            }
        };
        exports.ProtocolRequestType = ProtocolRequestType;
        var ProtocolNotificationType0 = class extends vscode_jsonrpc_1.NotificationType0 {
            constructor(method) {
                super(method);
            }
        };
        exports.ProtocolNotificationType0 = ProtocolNotificationType0;
        var ProtocolNotificationType = class extends vscode_jsonrpc_1.NotificationType {
            constructor(method) {
                super(method, vscode_jsonrpc_1.ParameterStructures.byName);
            }
        };
        exports.ProtocolNotificationType = ProtocolNotificationType;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/utils/is.js
var require_is2 = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/utils/is.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.objectLiteral = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
        function boolean(value) {
            return value === true || value === false;
        }
        exports.boolean = boolean;
        function string2(value) {
            return typeof value === "string" || value instanceof String;
        }
        exports.string = string2;
        function number(value) {
            return typeof value === "number" || value instanceof Number;
        }
        exports.number = number;
        function error(value) {
            return value instanceof Error;
        }
        exports.error = error;
        function func(value) {
            return typeof value === "function";
        }
        exports.func = func;
        function array(value) {
            return Array.isArray(value);
        }
        exports.array = array;
        function stringArray(value) {
            return array(value) && value.every((elem) => string2(elem));
        }
        exports.stringArray = stringArray;
        function typedArray(value, check) {
            return Array.isArray(value) && value.every(check);
        }
        exports.typedArray = typedArray;
        function objectLiteral(value) {
            return value !== null && typeof value === "object";
        }
        exports.objectLiteral = objectLiteral;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js
var require_protocol_implementation = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.ImplementationRequest = void 0;
        var messages_1 = require_messages2();
        var ImplementationRequest;
        (function (ImplementationRequest2) {
            ImplementationRequest2.method = "textDocument/implementation";
            ImplementationRequest2.type = new messages_1.ProtocolRequestType(ImplementationRequest2.method);
        })(ImplementationRequest = exports.ImplementationRequest || (exports.ImplementationRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js
var require_protocol_typeDefinition = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.TypeDefinitionRequest = void 0;
        var messages_1 = require_messages2();
        var TypeDefinitionRequest;
        (function (TypeDefinitionRequest2) {
            TypeDefinitionRequest2.method = "textDocument/typeDefinition";
            TypeDefinitionRequest2.type = new messages_1.ProtocolRequestType(TypeDefinitionRequest2.method);
        })(TypeDefinitionRequest = exports.TypeDefinitionRequest || (exports.TypeDefinitionRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolders.js
var require_protocol_workspaceFolders = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolders.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = void 0;
        var messages_1 = require_messages2();
        var WorkspaceFoldersRequest;
        (function (WorkspaceFoldersRequest2) {
            WorkspaceFoldersRequest2.type = new messages_1.ProtocolRequestType0("workspace/workspaceFolders");
        })(WorkspaceFoldersRequest = exports.WorkspaceFoldersRequest || (exports.WorkspaceFoldersRequest = {}));
        var DidChangeWorkspaceFoldersNotification;
        (function (DidChangeWorkspaceFoldersNotification2) {
            DidChangeWorkspaceFoldersNotification2.type = new messages_1.ProtocolNotificationType("workspace/didChangeWorkspaceFolders");
        })(DidChangeWorkspaceFoldersNotification = exports.DidChangeWorkspaceFoldersNotification || (exports.DidChangeWorkspaceFoldersNotification = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js
var require_protocol_configuration = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.ConfigurationRequest = void 0;
        var messages_1 = require_messages2();
        var ConfigurationRequest;
        (function (ConfigurationRequest2) {
            ConfigurationRequest2.type = new messages_1.ProtocolRequestType("workspace/configuration");
        })(ConfigurationRequest = exports.ConfigurationRequest || (exports.ConfigurationRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js
var require_protocol_colorProvider = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.ColorPresentationRequest = exports.DocumentColorRequest = void 0;
        var messages_1 = require_messages2();
        var DocumentColorRequest;
        (function (DocumentColorRequest2) {
            DocumentColorRequest2.method = "textDocument/documentColor";
            DocumentColorRequest2.type = new messages_1.ProtocolRequestType(DocumentColorRequest2.method);
        })(DocumentColorRequest = exports.DocumentColorRequest || (exports.DocumentColorRequest = {}));
        var ColorPresentationRequest;
        (function (ColorPresentationRequest2) {
            ColorPresentationRequest2.type = new messages_1.ProtocolRequestType("textDocument/colorPresentation");
        })(ColorPresentationRequest = exports.ColorPresentationRequest || (exports.ColorPresentationRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js
var require_protocol_foldingRange = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.FoldingRangeRequest = exports.FoldingRangeKind = void 0;
        var messages_1 = require_messages2();
        var FoldingRangeKind2;
        (function (FoldingRangeKind3) {
            FoldingRangeKind3["Comment"] = "comment";
            FoldingRangeKind3["Imports"] = "imports";
            FoldingRangeKind3["Region"] = "region";
        })(FoldingRangeKind2 = exports.FoldingRangeKind || (exports.FoldingRangeKind = {}));
        var FoldingRangeRequest;
        (function (FoldingRangeRequest2) {
            FoldingRangeRequest2.method = "textDocument/foldingRange";
            FoldingRangeRequest2.type = new messages_1.ProtocolRequestType(FoldingRangeRequest2.method);
        })(FoldingRangeRequest = exports.FoldingRangeRequest || (exports.FoldingRangeRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js
var require_protocol_declaration = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.DeclarationRequest = void 0;
        var messages_1 = require_messages2();
        var DeclarationRequest;
        (function (DeclarationRequest2) {
            DeclarationRequest2.method = "textDocument/declaration";
            DeclarationRequest2.type = new messages_1.ProtocolRequestType(DeclarationRequest2.method);
        })(DeclarationRequest = exports.DeclarationRequest || (exports.DeclarationRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js
var require_protocol_selectionRange = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.SelectionRangeRequest = void 0;
        var messages_1 = require_messages2();
        var SelectionRangeRequest;
        (function (SelectionRangeRequest2) {
            SelectionRangeRequest2.method = "textDocument/selectionRange";
            SelectionRangeRequest2.type = new messages_1.ProtocolRequestType(SelectionRangeRequest2.method);
        })(SelectionRangeRequest = exports.SelectionRangeRequest || (exports.SelectionRangeRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js
var require_protocol_progress = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = void 0;
        var vscode_jsonrpc_1 = require_main();
        var messages_1 = require_messages2();
        var WorkDoneProgress;
        (function (WorkDoneProgress2) {
            WorkDoneProgress2.type = new vscode_jsonrpc_1.ProgressType();
            function is(value) {
                return value === WorkDoneProgress2.type;
            }
            WorkDoneProgress2.is = is;
        })(WorkDoneProgress = exports.WorkDoneProgress || (exports.WorkDoneProgress = {}));
        var WorkDoneProgressCreateRequest;
        (function (WorkDoneProgressCreateRequest2) {
            WorkDoneProgressCreateRequest2.type = new messages_1.ProtocolRequestType("window/workDoneProgress/create");
        })(WorkDoneProgressCreateRequest = exports.WorkDoneProgressCreateRequest || (exports.WorkDoneProgressCreateRequest = {}));
        var WorkDoneProgressCancelNotification;
        (function (WorkDoneProgressCancelNotification2) {
            WorkDoneProgressCancelNotification2.type = new messages_1.ProtocolNotificationType("window/workDoneProgress/cancel");
        })(WorkDoneProgressCancelNotification = exports.WorkDoneProgressCancelNotification || (exports.WorkDoneProgressCancelNotification = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js
var require_protocol_callHierarchy = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.CallHierarchyPrepareRequest = void 0;
        var messages_1 = require_messages2();
        var CallHierarchyPrepareRequest;
        (function (CallHierarchyPrepareRequest2) {
            CallHierarchyPrepareRequest2.method = "textDocument/prepareCallHierarchy";
            CallHierarchyPrepareRequest2.type = new messages_1.ProtocolRequestType(CallHierarchyPrepareRequest2.method);
        })(CallHierarchyPrepareRequest = exports.CallHierarchyPrepareRequest || (exports.CallHierarchyPrepareRequest = {}));
        var CallHierarchyIncomingCallsRequest;
        (function (CallHierarchyIncomingCallsRequest2) {
            CallHierarchyIncomingCallsRequest2.method = "callHierarchy/incomingCalls";
            CallHierarchyIncomingCallsRequest2.type = new messages_1.ProtocolRequestType(CallHierarchyIncomingCallsRequest2.method);
        })(CallHierarchyIncomingCallsRequest = exports.CallHierarchyIncomingCallsRequest || (exports.CallHierarchyIncomingCallsRequest = {}));
        var CallHierarchyOutgoingCallsRequest;
        (function (CallHierarchyOutgoingCallsRequest2) {
            CallHierarchyOutgoingCallsRequest2.method = "callHierarchy/outgoingCalls";
            CallHierarchyOutgoingCallsRequest2.type = new messages_1.ProtocolRequestType(CallHierarchyOutgoingCallsRequest2.method);
        })(CallHierarchyOutgoingCallsRequest = exports.CallHierarchyOutgoingCallsRequest || (exports.CallHierarchyOutgoingCallsRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js
var require_protocol_semanticTokens = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.SemanticTokensRegistrationType = exports.TokenFormat = exports.SemanticTokens = exports.SemanticTokenModifiers = exports.SemanticTokenTypes = void 0;
        var messages_1 = require_messages2();
        var SemanticTokenTypes2;
        (function (SemanticTokenTypes3) {
            SemanticTokenTypes3["namespace"] = "namespace";
            SemanticTokenTypes3["type"] = "type";
            SemanticTokenTypes3["class"] = "class";
            SemanticTokenTypes3["enum"] = "enum";
            SemanticTokenTypes3["interface"] = "interface";
            SemanticTokenTypes3["struct"] = "struct";
            SemanticTokenTypes3["typeParameter"] = "typeParameter";
            SemanticTokenTypes3["parameter"] = "parameter";
            SemanticTokenTypes3["variable"] = "variable";
            SemanticTokenTypes3["property"] = "property";
            SemanticTokenTypes3["enumMember"] = "enumMember";
            SemanticTokenTypes3["event"] = "event";
            SemanticTokenTypes3["function"] = "function";
            SemanticTokenTypes3["method"] = "method";
            SemanticTokenTypes3["macro"] = "macro";
            SemanticTokenTypes3["keyword"] = "keyword";
            SemanticTokenTypes3["modifier"] = "modifier";
            SemanticTokenTypes3["comment"] = "comment";
            SemanticTokenTypes3["string"] = "string";
            SemanticTokenTypes3["number"] = "number";
            SemanticTokenTypes3["regexp"] = "regexp";
            SemanticTokenTypes3["operator"] = "operator";
        })(SemanticTokenTypes2 = exports.SemanticTokenTypes || (exports.SemanticTokenTypes = {}));
        var SemanticTokenModifiers2;
        (function (SemanticTokenModifiers3) {
            SemanticTokenModifiers3["declaration"] = "declaration";
            SemanticTokenModifiers3["definition"] = "definition";
            SemanticTokenModifiers3["readonly"] = "readonly";
            SemanticTokenModifiers3["static"] = "static";
            SemanticTokenModifiers3["deprecated"] = "deprecated";
            SemanticTokenModifiers3["abstract"] = "abstract";
            SemanticTokenModifiers3["async"] = "async";
            SemanticTokenModifiers3["modification"] = "modification";
            SemanticTokenModifiers3["documentation"] = "documentation";
            SemanticTokenModifiers3["defaultLibrary"] = "defaultLibrary";
        })(SemanticTokenModifiers2 = exports.SemanticTokenModifiers || (exports.SemanticTokenModifiers = {}));
        var SemanticTokens2;
        (function (SemanticTokens3) {
            function is(value) {
                const candidate = value;
                return candidate !== void 0 && (candidate.resultId === void 0 || typeof candidate.resultId === "string") && Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === "number");
            }
            SemanticTokens3.is = is;
        })(SemanticTokens2 = exports.SemanticTokens || (exports.SemanticTokens = {}));
        var TokenFormat;
        (function (TokenFormat2) {
            TokenFormat2.Relative = "relative";
        })(TokenFormat = exports.TokenFormat || (exports.TokenFormat = {}));
        var SemanticTokensRegistrationType;
        (function (SemanticTokensRegistrationType2) {
            SemanticTokensRegistrationType2.method = "textDocument/semanticTokens";
            SemanticTokensRegistrationType2.type = new messages_1.RegistrationType(SemanticTokensRegistrationType2.method);
        })(SemanticTokensRegistrationType = exports.SemanticTokensRegistrationType || (exports.SemanticTokensRegistrationType = {}));
        var SemanticTokensRequest;
        (function (SemanticTokensRequest2) {
            SemanticTokensRequest2.method = "textDocument/semanticTokens/full";
            SemanticTokensRequest2.type = new messages_1.ProtocolRequestType(SemanticTokensRequest2.method);
        })(SemanticTokensRequest = exports.SemanticTokensRequest || (exports.SemanticTokensRequest = {}));
        var SemanticTokensDeltaRequest;
        (function (SemanticTokensDeltaRequest2) {
            SemanticTokensDeltaRequest2.method = "textDocument/semanticTokens/full/delta";
            SemanticTokensDeltaRequest2.type = new messages_1.ProtocolRequestType(SemanticTokensDeltaRequest2.method);
        })(SemanticTokensDeltaRequest = exports.SemanticTokensDeltaRequest || (exports.SemanticTokensDeltaRequest = {}));
        var SemanticTokensRangeRequest;
        (function (SemanticTokensRangeRequest2) {
            SemanticTokensRangeRequest2.method = "textDocument/semanticTokens/range";
            SemanticTokensRangeRequest2.type = new messages_1.ProtocolRequestType(SemanticTokensRangeRequest2.method);
        })(SemanticTokensRangeRequest = exports.SemanticTokensRangeRequest || (exports.SemanticTokensRangeRequest = {}));
        var SemanticTokensRefreshRequest;
        (function (SemanticTokensRefreshRequest2) {
            SemanticTokensRefreshRequest2.method = `workspace/semanticTokens/refresh`;
            SemanticTokensRefreshRequest2.type = new messages_1.ProtocolRequestType0(SemanticTokensRefreshRequest2.method);
        })(SemanticTokensRefreshRequest = exports.SemanticTokensRefreshRequest || (exports.SemanticTokensRefreshRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js
var require_protocol_showDocument = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.ShowDocumentRequest = void 0;
        var messages_1 = require_messages2();
        var ShowDocumentRequest;
        (function (ShowDocumentRequest2) {
            ShowDocumentRequest2.method = "window/showDocument";
            ShowDocumentRequest2.type = new messages_1.ProtocolRequestType(ShowDocumentRequest2.method);
        })(ShowDocumentRequest = exports.ShowDocumentRequest || (exports.ShowDocumentRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js
var require_protocol_linkedEditingRange = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.LinkedEditingRangeRequest = void 0;
        var messages_1 = require_messages2();
        var LinkedEditingRangeRequest;
        (function (LinkedEditingRangeRequest2) {
            LinkedEditingRangeRequest2.method = "textDocument/linkedEditingRange";
            LinkedEditingRangeRequest2.type = new messages_1.ProtocolRequestType(LinkedEditingRangeRequest2.method);
        })(LinkedEditingRangeRequest = exports.LinkedEditingRangeRequest || (exports.LinkedEditingRangeRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js
var require_protocol_fileOperations = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.DidRenameFilesNotification = exports.WillRenameFilesRequest = exports.DidCreateFilesNotification = exports.WillCreateFilesRequest = exports.FileOperationPatternKind = void 0;
        var messages_1 = require_messages2();
        var FileOperationPatternKind;
        (function (FileOperationPatternKind2) {
            FileOperationPatternKind2.file = "file";
            FileOperationPatternKind2.folder = "folder";
        })(FileOperationPatternKind = exports.FileOperationPatternKind || (exports.FileOperationPatternKind = {}));
        var WillCreateFilesRequest;
        (function (WillCreateFilesRequest2) {
            WillCreateFilesRequest2.method = "workspace/willCreateFiles";
            WillCreateFilesRequest2.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest2.method);
        })(WillCreateFilesRequest = exports.WillCreateFilesRequest || (exports.WillCreateFilesRequest = {}));
        var DidCreateFilesNotification;
        (function (DidCreateFilesNotification2) {
            DidCreateFilesNotification2.method = "workspace/didCreateFiles";
            DidCreateFilesNotification2.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification2.method);
        })(DidCreateFilesNotification = exports.DidCreateFilesNotification || (exports.DidCreateFilesNotification = {}));
        var WillRenameFilesRequest;
        (function (WillRenameFilesRequest2) {
            WillRenameFilesRequest2.method = "workspace/willRenameFiles";
            WillRenameFilesRequest2.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest2.method);
        })(WillRenameFilesRequest = exports.WillRenameFilesRequest || (exports.WillRenameFilesRequest = {}));
        var DidRenameFilesNotification;
        (function (DidRenameFilesNotification2) {
            DidRenameFilesNotification2.method = "workspace/didRenameFiles";
            DidRenameFilesNotification2.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification2.method);
        })(DidRenameFilesNotification = exports.DidRenameFilesNotification || (exports.DidRenameFilesNotification = {}));
        var DidDeleteFilesNotification;
        (function (DidDeleteFilesNotification2) {
            DidDeleteFilesNotification2.method = "workspace/didDeleteFiles";
            DidDeleteFilesNotification2.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification2.method);
        })(DidDeleteFilesNotification = exports.DidDeleteFilesNotification || (exports.DidDeleteFilesNotification = {}));
        var WillDeleteFilesRequest;
        (function (WillDeleteFilesRequest2) {
            WillDeleteFilesRequest2.method = "workspace/willDeleteFiles";
            WillDeleteFilesRequest2.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest2.method);
        })(WillDeleteFilesRequest = exports.WillDeleteFilesRequest || (exports.WillDeleteFilesRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js
var require_protocol_moniker = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = void 0;
        var messages_1 = require_messages2();
        var UniquenessLevel;
        (function (UniquenessLevel2) {
            UniquenessLevel2["document"] = "document";
            UniquenessLevel2["project"] = "project";
            UniquenessLevel2["group"] = "group";
            UniquenessLevel2["scheme"] = "scheme";
            UniquenessLevel2["global"] = "global";
        })(UniquenessLevel = exports.UniquenessLevel || (exports.UniquenessLevel = {}));
        var MonikerKind;
        (function (MonikerKind2) {
            MonikerKind2["import"] = "import";
            MonikerKind2["export"] = "export";
            MonikerKind2["local"] = "local";
        })(MonikerKind = exports.MonikerKind || (exports.MonikerKind = {}));
        var MonikerRequest;
        (function (MonikerRequest2) {
            MonikerRequest2.method = "textDocument/moniker";
            MonikerRequest2.type = new messages_1.ProtocolRequestType(MonikerRequest2.method);
        })(MonikerRequest = exports.MonikerRequest || (exports.MonikerRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.js
var require_protocol = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.DocumentLinkRequest = exports.CodeLensRefreshRequest = exports.CodeLensResolveRequest = exports.CodeLensRequest = exports.WorkspaceSymbolRequest = exports.CodeActionResolveRequest = exports.CodeActionRequest = exports.DocumentSymbolRequest = exports.DocumentHighlightRequest = exports.ReferencesRequest = exports.DefinitionRequest = exports.SignatureHelpRequest = exports.SignatureHelpTriggerKind = exports.HoverRequest = exports.CompletionResolveRequest = exports.CompletionRequest = exports.CompletionTriggerKind = exports.PublishDiagnosticsNotification = exports.WatchKind = exports.FileChangeType = exports.DidChangeWatchedFilesNotification = exports.WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentNotification = exports.TextDocumentSaveReason = exports.DidSaveTextDocumentNotification = exports.DidCloseTextDocumentNotification = exports.DidChangeTextDocumentNotification = exports.TextDocumentContentChangeEvent = exports.DidOpenTextDocumentNotification = exports.TextDocumentSyncKind = exports.TelemetryEventNotification = exports.LogMessageNotification = exports.ShowMessageRequest = exports.ShowMessageNotification = exports.MessageType = exports.DidChangeConfigurationNotification = exports.ExitNotification = exports.ShutdownRequest = exports.InitializedNotification = exports.InitializeError = exports.InitializeRequest = exports.WorkDoneProgressOptions = exports.TextDocumentRegistrationOptions = exports.StaticRegistrationOptions = exports.FailureHandlingKind = exports.ResourceOperationKind = exports.UnregistrationRequest = exports.RegistrationRequest = exports.DocumentSelector = exports.DocumentFilter = void 0;
        exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.WillRenameFilesRequest = exports.DidRenameFilesNotification = exports.WillCreateFilesRequest = exports.DidCreateFilesNotification = exports.FileOperationPatternKind = exports.LinkedEditingRangeRequest = exports.ShowDocumentRequest = exports.SemanticTokensRegistrationType = exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.TokenFormat = exports.SemanticTokens = exports.SemanticTokenModifiers = exports.SemanticTokenTypes = exports.CallHierarchyPrepareRequest = exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = exports.SelectionRangeRequest = exports.DeclarationRequest = exports.FoldingRangeRequest = exports.ColorPresentationRequest = exports.DocumentColorRequest = exports.ConfigurationRequest = exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = exports.TypeDefinitionRequest = exports.ImplementationRequest = exports.ApplyWorkspaceEditRequest = exports.ExecuteCommandRequest = exports.PrepareRenameRequest = exports.RenameRequest = exports.PrepareSupportDefaultBehavior = exports.DocumentOnTypeFormattingRequest = exports.DocumentRangeFormattingRequest = exports.DocumentFormattingRequest = exports.DocumentLinkResolveRequest = void 0;
        var Is2 = require_is2();
        var messages_1 = require_messages2();
        var protocol_implementation_1 = require_protocol_implementation();
        Object.defineProperty(exports, "ImplementationRequest", { enumerable: true, get: function () {
                return protocol_implementation_1.ImplementationRequest;
            } });
        var protocol_typeDefinition_1 = require_protocol_typeDefinition();
        Object.defineProperty(exports, "TypeDefinitionRequest", { enumerable: true, get: function () {
                return protocol_typeDefinition_1.TypeDefinitionRequest;
            } });
        var protocol_workspaceFolders_1 = require_protocol_workspaceFolders();
        Object.defineProperty(exports, "WorkspaceFoldersRequest", { enumerable: true, get: function () {
                return protocol_workspaceFolders_1.WorkspaceFoldersRequest;
            } });
        Object.defineProperty(exports, "DidChangeWorkspaceFoldersNotification", { enumerable: true, get: function () {
                return protocol_workspaceFolders_1.DidChangeWorkspaceFoldersNotification;
            } });
        var protocol_configuration_1 = require_protocol_configuration();
        Object.defineProperty(exports, "ConfigurationRequest", { enumerable: true, get: function () {
                return protocol_configuration_1.ConfigurationRequest;
            } });
        var protocol_colorProvider_1 = require_protocol_colorProvider();
        Object.defineProperty(exports, "DocumentColorRequest", { enumerable: true, get: function () {
                return protocol_colorProvider_1.DocumentColorRequest;
            } });
        Object.defineProperty(exports, "ColorPresentationRequest", { enumerable: true, get: function () {
                return protocol_colorProvider_1.ColorPresentationRequest;
            } });
        var protocol_foldingRange_1 = require_protocol_foldingRange();
        Object.defineProperty(exports, "FoldingRangeRequest", { enumerable: true, get: function () {
                return protocol_foldingRange_1.FoldingRangeRequest;
            } });
        var protocol_declaration_1 = require_protocol_declaration();
        Object.defineProperty(exports, "DeclarationRequest", { enumerable: true, get: function () {
                return protocol_declaration_1.DeclarationRequest;
            } });
        var protocol_selectionRange_1 = require_protocol_selectionRange();
        Object.defineProperty(exports, "SelectionRangeRequest", { enumerable: true, get: function () {
                return protocol_selectionRange_1.SelectionRangeRequest;
            } });
        var protocol_progress_1 = require_protocol_progress();
        Object.defineProperty(exports, "WorkDoneProgress", { enumerable: true, get: function () {
                return protocol_progress_1.WorkDoneProgress;
            } });
        Object.defineProperty(exports, "WorkDoneProgressCreateRequest", { enumerable: true, get: function () {
                return protocol_progress_1.WorkDoneProgressCreateRequest;
            } });
        Object.defineProperty(exports, "WorkDoneProgressCancelNotification", { enumerable: true, get: function () {
                return protocol_progress_1.WorkDoneProgressCancelNotification;
            } });
        var protocol_callHierarchy_1 = require_protocol_callHierarchy();
        Object.defineProperty(exports, "CallHierarchyIncomingCallsRequest", { enumerable: true, get: function () {
                return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest;
            } });
        Object.defineProperty(exports, "CallHierarchyOutgoingCallsRequest", { enumerable: true, get: function () {
                return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest;
            } });
        Object.defineProperty(exports, "CallHierarchyPrepareRequest", { enumerable: true, get: function () {
                return protocol_callHierarchy_1.CallHierarchyPrepareRequest;
            } });
        var protocol_semanticTokens_1 = require_protocol_semanticTokens();
        Object.defineProperty(exports, "SemanticTokenTypes", { enumerable: true, get: function () {
                return protocol_semanticTokens_1.SemanticTokenTypes;
            } });
        Object.defineProperty(exports, "SemanticTokenModifiers", { enumerable: true, get: function () {
                return protocol_semanticTokens_1.SemanticTokenModifiers;
            } });
        Object.defineProperty(exports, "SemanticTokens", { enumerable: true, get: function () {
                return protocol_semanticTokens_1.SemanticTokens;
            } });
        Object.defineProperty(exports, "TokenFormat", { enumerable: true, get: function () {
                return protocol_semanticTokens_1.TokenFormat;
            } });
        Object.defineProperty(exports, "SemanticTokensRequest", { enumerable: true, get: function () {
                return protocol_semanticTokens_1.SemanticTokensRequest;
            } });
        Object.defineProperty(exports, "SemanticTokensDeltaRequest", { enumerable: true, get: function () {
                return protocol_semanticTokens_1.SemanticTokensDeltaRequest;
            } });
        Object.defineProperty(exports, "SemanticTokensRangeRequest", { enumerable: true, get: function () {
                return protocol_semanticTokens_1.SemanticTokensRangeRequest;
            } });
        Object.defineProperty(exports, "SemanticTokensRefreshRequest", { enumerable: true, get: function () {
                return protocol_semanticTokens_1.SemanticTokensRefreshRequest;
            } });
        Object.defineProperty(exports, "SemanticTokensRegistrationType", { enumerable: true, get: function () {
                return protocol_semanticTokens_1.SemanticTokensRegistrationType;
            } });
        var protocol_showDocument_1 = require_protocol_showDocument();
        Object.defineProperty(exports, "ShowDocumentRequest", { enumerable: true, get: function () {
                return protocol_showDocument_1.ShowDocumentRequest;
            } });
        var protocol_linkedEditingRange_1 = require_protocol_linkedEditingRange();
        Object.defineProperty(exports, "LinkedEditingRangeRequest", { enumerable: true, get: function () {
                return protocol_linkedEditingRange_1.LinkedEditingRangeRequest;
            } });
        var protocol_fileOperations_1 = require_protocol_fileOperations();
        Object.defineProperty(exports, "FileOperationPatternKind", { enumerable: true, get: function () {
                return protocol_fileOperations_1.FileOperationPatternKind;
            } });
        Object.defineProperty(exports, "DidCreateFilesNotification", { enumerable: true, get: function () {
                return protocol_fileOperations_1.DidCreateFilesNotification;
            } });
        Object.defineProperty(exports, "WillCreateFilesRequest", { enumerable: true, get: function () {
                return protocol_fileOperations_1.WillCreateFilesRequest;
            } });
        Object.defineProperty(exports, "DidRenameFilesNotification", { enumerable: true, get: function () {
                return protocol_fileOperations_1.DidRenameFilesNotification;
            } });
        Object.defineProperty(exports, "WillRenameFilesRequest", { enumerable: true, get: function () {
                return protocol_fileOperations_1.WillRenameFilesRequest;
            } });
        Object.defineProperty(exports, "DidDeleteFilesNotification", { enumerable: true, get: function () {
                return protocol_fileOperations_1.DidDeleteFilesNotification;
            } });
        Object.defineProperty(exports, "WillDeleteFilesRequest", { enumerable: true, get: function () {
                return protocol_fileOperations_1.WillDeleteFilesRequest;
            } });
        var protocol_moniker_1 = require_protocol_moniker();
        Object.defineProperty(exports, "UniquenessLevel", { enumerable: true, get: function () {
                return protocol_moniker_1.UniquenessLevel;
            } });
        Object.defineProperty(exports, "MonikerKind", { enumerable: true, get: function () {
                return protocol_moniker_1.MonikerKind;
            } });
        Object.defineProperty(exports, "MonikerRequest", { enumerable: true, get: function () {
                return protocol_moniker_1.MonikerRequest;
            } });
        var DocumentFilter;
        (function (DocumentFilter2) {
            function is(value) {
                const candidate = value;
                return Is2.string(candidate.language) || Is2.string(candidate.scheme) || Is2.string(candidate.pattern);
            }
            DocumentFilter2.is = is;
        })(DocumentFilter = exports.DocumentFilter || (exports.DocumentFilter = {}));
        var DocumentSelector;
        (function (DocumentSelector2) {
            function is(value) {
                if (!Array.isArray(value)) {
                    return false;
                }
                for (let elem of value) {
                    if (!Is2.string(elem) && !DocumentFilter.is(elem)) {
                        return false;
                    }
                }
                return true;
            }
            DocumentSelector2.is = is;
        })(DocumentSelector = exports.DocumentSelector || (exports.DocumentSelector = {}));
        var RegistrationRequest;
        (function (RegistrationRequest2) {
            RegistrationRequest2.type = new messages_1.ProtocolRequestType("client/registerCapability");
        })(RegistrationRequest = exports.RegistrationRequest || (exports.RegistrationRequest = {}));
        var UnregistrationRequest;
        (function (UnregistrationRequest2) {
            UnregistrationRequest2.type = new messages_1.ProtocolRequestType("client/unregisterCapability");
        })(UnregistrationRequest = exports.UnregistrationRequest || (exports.UnregistrationRequest = {}));
        var ResourceOperationKind;
        (function (ResourceOperationKind2) {
            ResourceOperationKind2.Create = "create";
            ResourceOperationKind2.Rename = "rename";
            ResourceOperationKind2.Delete = "delete";
        })(ResourceOperationKind = exports.ResourceOperationKind || (exports.ResourceOperationKind = {}));
        var FailureHandlingKind;
        (function (FailureHandlingKind2) {
            FailureHandlingKind2.Abort = "abort";
            FailureHandlingKind2.Transactional = "transactional";
            FailureHandlingKind2.TextOnlyTransactional = "textOnlyTransactional";
            FailureHandlingKind2.Undo = "undo";
        })(FailureHandlingKind = exports.FailureHandlingKind || (exports.FailureHandlingKind = {}));
        var StaticRegistrationOptions;
        (function (StaticRegistrationOptions2) {
            function hasId(value) {
                const candidate = value;
                return candidate && Is2.string(candidate.id) && candidate.id.length > 0;
            }
            StaticRegistrationOptions2.hasId = hasId;
        })(StaticRegistrationOptions = exports.StaticRegistrationOptions || (exports.StaticRegistrationOptions = {}));
        var TextDocumentRegistrationOptions;
        (function (TextDocumentRegistrationOptions2) {
            function is(value) {
                const candidate = value;
                return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));
            }
            TextDocumentRegistrationOptions2.is = is;
        })(TextDocumentRegistrationOptions = exports.TextDocumentRegistrationOptions || (exports.TextDocumentRegistrationOptions = {}));
        var WorkDoneProgressOptions;
        (function (WorkDoneProgressOptions2) {
            function is(value) {
                const candidate = value;
                return Is2.objectLiteral(candidate) && (candidate.workDoneProgress === void 0 || Is2.boolean(candidate.workDoneProgress));
            }
            WorkDoneProgressOptions2.is = is;
            function hasWorkDoneProgress(value) {
                const candidate = value;
                return candidate && Is2.boolean(candidate.workDoneProgress);
            }
            WorkDoneProgressOptions2.hasWorkDoneProgress = hasWorkDoneProgress;
        })(WorkDoneProgressOptions = exports.WorkDoneProgressOptions || (exports.WorkDoneProgressOptions = {}));
        var InitializeRequest;
        (function (InitializeRequest2) {
            InitializeRequest2.type = new messages_1.ProtocolRequestType("initialize");
        })(InitializeRequest = exports.InitializeRequest || (exports.InitializeRequest = {}));
        var InitializeError;
        (function (InitializeError2) {
            InitializeError2.unknownProtocolVersion = 1;
        })(InitializeError = exports.InitializeError || (exports.InitializeError = {}));
        var InitializedNotification;
        (function (InitializedNotification2) {
            InitializedNotification2.type = new messages_1.ProtocolNotificationType("initialized");
        })(InitializedNotification = exports.InitializedNotification || (exports.InitializedNotification = {}));
        var ShutdownRequest;
        (function (ShutdownRequest2) {
            ShutdownRequest2.type = new messages_1.ProtocolRequestType0("shutdown");
        })(ShutdownRequest = exports.ShutdownRequest || (exports.ShutdownRequest = {}));
        var ExitNotification;
        (function (ExitNotification2) {
            ExitNotification2.type = new messages_1.ProtocolNotificationType0("exit");
        })(ExitNotification = exports.ExitNotification || (exports.ExitNotification = {}));
        var DidChangeConfigurationNotification;
        (function (DidChangeConfigurationNotification2) {
            DidChangeConfigurationNotification2.type = new messages_1.ProtocolNotificationType("workspace/didChangeConfiguration");
        })(DidChangeConfigurationNotification = exports.DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = {}));
        var MessageType;
        (function (MessageType2) {
            MessageType2.Error = 1;
            MessageType2.Warning = 2;
            MessageType2.Info = 3;
            MessageType2.Log = 4;
        })(MessageType = exports.MessageType || (exports.MessageType = {}));
        var ShowMessageNotification;
        (function (ShowMessageNotification2) {
            ShowMessageNotification2.type = new messages_1.ProtocolNotificationType("window/showMessage");
        })(ShowMessageNotification = exports.ShowMessageNotification || (exports.ShowMessageNotification = {}));
        var ShowMessageRequest;
        (function (ShowMessageRequest2) {
            ShowMessageRequest2.type = new messages_1.ProtocolRequestType("window/showMessageRequest");
        })(ShowMessageRequest = exports.ShowMessageRequest || (exports.ShowMessageRequest = {}));
        var LogMessageNotification;
        (function (LogMessageNotification2) {
            LogMessageNotification2.type = new messages_1.ProtocolNotificationType("window/logMessage");
        })(LogMessageNotification = exports.LogMessageNotification || (exports.LogMessageNotification = {}));
        var TelemetryEventNotification;
        (function (TelemetryEventNotification2) {
            TelemetryEventNotification2.type = new messages_1.ProtocolNotificationType("telemetry/event");
        })(TelemetryEventNotification = exports.TelemetryEventNotification || (exports.TelemetryEventNotification = {}));
        var TextDocumentSyncKind;
        (function (TextDocumentSyncKind2) {
            TextDocumentSyncKind2.None = 0;
            TextDocumentSyncKind2.Full = 1;
            TextDocumentSyncKind2.Incremental = 2;
        })(TextDocumentSyncKind = exports.TextDocumentSyncKind || (exports.TextDocumentSyncKind = {}));
        var DidOpenTextDocumentNotification;
        (function (DidOpenTextDocumentNotification2) {
            DidOpenTextDocumentNotification2.method = "textDocument/didOpen";
            DidOpenTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification2.method);
        })(DidOpenTextDocumentNotification = exports.DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = {}));
        var TextDocumentContentChangeEvent;
        (function (TextDocumentContentChangeEvent2) {
            function isIncremental(event) {
                let candidate = event;
                return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range !== void 0 && (candidate.rangeLength === void 0 || typeof candidate.rangeLength === "number");
            }
            TextDocumentContentChangeEvent2.isIncremental = isIncremental;
            function isFull(event) {
                let candidate = event;
                return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range === void 0 && candidate.rangeLength === void 0;
            }
            TextDocumentContentChangeEvent2.isFull = isFull;
        })(TextDocumentContentChangeEvent = exports.TextDocumentContentChangeEvent || (exports.TextDocumentContentChangeEvent = {}));
        var DidChangeTextDocumentNotification;
        (function (DidChangeTextDocumentNotification2) {
            DidChangeTextDocumentNotification2.method = "textDocument/didChange";
            DidChangeTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification2.method);
        })(DidChangeTextDocumentNotification = exports.DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = {}));
        var DidCloseTextDocumentNotification;
        (function (DidCloseTextDocumentNotification2) {
            DidCloseTextDocumentNotification2.method = "textDocument/didClose";
            DidCloseTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification2.method);
        })(DidCloseTextDocumentNotification = exports.DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = {}));
        var DidSaveTextDocumentNotification;
        (function (DidSaveTextDocumentNotification2) {
            DidSaveTextDocumentNotification2.method = "textDocument/didSave";
            DidSaveTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification2.method);
        })(DidSaveTextDocumentNotification = exports.DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = {}));
        var TextDocumentSaveReason;
        (function (TextDocumentSaveReason2) {
            TextDocumentSaveReason2.Manual = 1;
            TextDocumentSaveReason2.AfterDelay = 2;
            TextDocumentSaveReason2.FocusOut = 3;
        })(TextDocumentSaveReason = exports.TextDocumentSaveReason || (exports.TextDocumentSaveReason = {}));
        var WillSaveTextDocumentNotification;
        (function (WillSaveTextDocumentNotification2) {
            WillSaveTextDocumentNotification2.method = "textDocument/willSave";
            WillSaveTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification2.method);
        })(WillSaveTextDocumentNotification = exports.WillSaveTextDocumentNotification || (exports.WillSaveTextDocumentNotification = {}));
        var WillSaveTextDocumentWaitUntilRequest;
        (function (WillSaveTextDocumentWaitUntilRequest2) {
            WillSaveTextDocumentWaitUntilRequest2.method = "textDocument/willSaveWaitUntil";
            WillSaveTextDocumentWaitUntilRequest2.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest2.method);
        })(WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentWaitUntilRequest || (exports.WillSaveTextDocumentWaitUntilRequest = {}));
        var DidChangeWatchedFilesNotification;
        (function (DidChangeWatchedFilesNotification2) {
            DidChangeWatchedFilesNotification2.type = new messages_1.ProtocolNotificationType("workspace/didChangeWatchedFiles");
        })(DidChangeWatchedFilesNotification = exports.DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = {}));
        var FileChangeType;
        (function (FileChangeType2) {
            FileChangeType2.Created = 1;
            FileChangeType2.Changed = 2;
            FileChangeType2.Deleted = 3;
        })(FileChangeType = exports.FileChangeType || (exports.FileChangeType = {}));
        var WatchKind;
        (function (WatchKind2) {
            WatchKind2.Create = 1;
            WatchKind2.Change = 2;
            WatchKind2.Delete = 4;
        })(WatchKind = exports.WatchKind || (exports.WatchKind = {}));
        var PublishDiagnosticsNotification;
        (function (PublishDiagnosticsNotification2) {
            PublishDiagnosticsNotification2.type = new messages_1.ProtocolNotificationType("textDocument/publishDiagnostics");
        })(PublishDiagnosticsNotification = exports.PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = {}));
        var CompletionTriggerKind;
        (function (CompletionTriggerKind2) {
            CompletionTriggerKind2.Invoked = 1;
            CompletionTriggerKind2.TriggerCharacter = 2;
            CompletionTriggerKind2.TriggerForIncompleteCompletions = 3;
        })(CompletionTriggerKind = exports.CompletionTriggerKind || (exports.CompletionTriggerKind = {}));
        var CompletionRequest;
        (function (CompletionRequest2) {
            CompletionRequest2.method = "textDocument/completion";
            CompletionRequest2.type = new messages_1.ProtocolRequestType(CompletionRequest2.method);
        })(CompletionRequest = exports.CompletionRequest || (exports.CompletionRequest = {}));
        var CompletionResolveRequest;
        (function (CompletionResolveRequest2) {
            CompletionResolveRequest2.method = "completionItem/resolve";
            CompletionResolveRequest2.type = new messages_1.ProtocolRequestType(CompletionResolveRequest2.method);
        })(CompletionResolveRequest = exports.CompletionResolveRequest || (exports.CompletionResolveRequest = {}));
        var HoverRequest;
        (function (HoverRequest2) {
            HoverRequest2.method = "textDocument/hover";
            HoverRequest2.type = new messages_1.ProtocolRequestType(HoverRequest2.method);
        })(HoverRequest = exports.HoverRequest || (exports.HoverRequest = {}));
        var SignatureHelpTriggerKind;
        (function (SignatureHelpTriggerKind2) {
            SignatureHelpTriggerKind2.Invoked = 1;
            SignatureHelpTriggerKind2.TriggerCharacter = 2;
            SignatureHelpTriggerKind2.ContentChange = 3;
        })(SignatureHelpTriggerKind = exports.SignatureHelpTriggerKind || (exports.SignatureHelpTriggerKind = {}));
        var SignatureHelpRequest;
        (function (SignatureHelpRequest2) {
            SignatureHelpRequest2.method = "textDocument/signatureHelp";
            SignatureHelpRequest2.type = new messages_1.ProtocolRequestType(SignatureHelpRequest2.method);
        })(SignatureHelpRequest = exports.SignatureHelpRequest || (exports.SignatureHelpRequest = {}));
        var DefinitionRequest;
        (function (DefinitionRequest2) {
            DefinitionRequest2.method = "textDocument/definition";
            DefinitionRequest2.type = new messages_1.ProtocolRequestType(DefinitionRequest2.method);
        })(DefinitionRequest = exports.DefinitionRequest || (exports.DefinitionRequest = {}));
        var ReferencesRequest;
        (function (ReferencesRequest2) {
            ReferencesRequest2.method = "textDocument/references";
            ReferencesRequest2.type = new messages_1.ProtocolRequestType(ReferencesRequest2.method);
        })(ReferencesRequest = exports.ReferencesRequest || (exports.ReferencesRequest = {}));
        var DocumentHighlightRequest;
        (function (DocumentHighlightRequest2) {
            DocumentHighlightRequest2.method = "textDocument/documentHighlight";
            DocumentHighlightRequest2.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest2.method);
        })(DocumentHighlightRequest = exports.DocumentHighlightRequest || (exports.DocumentHighlightRequest = {}));
        var DocumentSymbolRequest;
        (function (DocumentSymbolRequest2) {
            DocumentSymbolRequest2.method = "textDocument/documentSymbol";
            DocumentSymbolRequest2.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest2.method);
        })(DocumentSymbolRequest = exports.DocumentSymbolRequest || (exports.DocumentSymbolRequest = {}));
        var CodeActionRequest;
        (function (CodeActionRequest2) {
            CodeActionRequest2.method = "textDocument/codeAction";
            CodeActionRequest2.type = new messages_1.ProtocolRequestType(CodeActionRequest2.method);
        })(CodeActionRequest = exports.CodeActionRequest || (exports.CodeActionRequest = {}));
        var CodeActionResolveRequest;
        (function (CodeActionResolveRequest2) {
            CodeActionResolveRequest2.method = "codeAction/resolve";
            CodeActionResolveRequest2.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest2.method);
        })(CodeActionResolveRequest = exports.CodeActionResolveRequest || (exports.CodeActionResolveRequest = {}));
        var WorkspaceSymbolRequest;
        (function (WorkspaceSymbolRequest2) {
            WorkspaceSymbolRequest2.method = "workspace/symbol";
            WorkspaceSymbolRequest2.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest2.method);
        })(WorkspaceSymbolRequest = exports.WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = {}));
        var CodeLensRequest;
        (function (CodeLensRequest2) {
            CodeLensRequest2.method = "textDocument/codeLens";
            CodeLensRequest2.type = new messages_1.ProtocolRequestType(CodeLensRequest2.method);
        })(CodeLensRequest = exports.CodeLensRequest || (exports.CodeLensRequest = {}));
        var CodeLensResolveRequest;
        (function (CodeLensResolveRequest2) {
            CodeLensResolveRequest2.method = "codeLens/resolve";
            CodeLensResolveRequest2.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest2.method);
        })(CodeLensResolveRequest = exports.CodeLensResolveRequest || (exports.CodeLensResolveRequest = {}));
        var CodeLensRefreshRequest;
        (function (CodeLensRefreshRequest2) {
            CodeLensRefreshRequest2.method = `workspace/codeLens/refresh`;
            CodeLensRefreshRequest2.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest2.method);
        })(CodeLensRefreshRequest = exports.CodeLensRefreshRequest || (exports.CodeLensRefreshRequest = {}));
        var DocumentLinkRequest;
        (function (DocumentLinkRequest2) {
            DocumentLinkRequest2.method = "textDocument/documentLink";
            DocumentLinkRequest2.type = new messages_1.ProtocolRequestType(DocumentLinkRequest2.method);
        })(DocumentLinkRequest = exports.DocumentLinkRequest || (exports.DocumentLinkRequest = {}));
        var DocumentLinkResolveRequest;
        (function (DocumentLinkResolveRequest2) {
            DocumentLinkResolveRequest2.method = "documentLink/resolve";
            DocumentLinkResolveRequest2.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest2.method);
        })(DocumentLinkResolveRequest = exports.DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = {}));
        var DocumentFormattingRequest;
        (function (DocumentFormattingRequest2) {
            DocumentFormattingRequest2.method = "textDocument/formatting";
            DocumentFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest2.method);
        })(DocumentFormattingRequest = exports.DocumentFormattingRequest || (exports.DocumentFormattingRequest = {}));
        var DocumentRangeFormattingRequest;
        (function (DocumentRangeFormattingRequest2) {
            DocumentRangeFormattingRequest2.method = "textDocument/rangeFormatting";
            DocumentRangeFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest2.method);
        })(DocumentRangeFormattingRequest = exports.DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = {}));
        var DocumentOnTypeFormattingRequest;
        (function (DocumentOnTypeFormattingRequest2) {
            DocumentOnTypeFormattingRequest2.method = "textDocument/onTypeFormatting";
            DocumentOnTypeFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest2.method);
        })(DocumentOnTypeFormattingRequest = exports.DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = {}));
        var PrepareSupportDefaultBehavior;
        (function (PrepareSupportDefaultBehavior2) {
            PrepareSupportDefaultBehavior2.Identifier = 1;
        })(PrepareSupportDefaultBehavior = exports.PrepareSupportDefaultBehavior || (exports.PrepareSupportDefaultBehavior = {}));
        var RenameRequest;
        (function (RenameRequest2) {
            RenameRequest2.method = "textDocument/rename";
            RenameRequest2.type = new messages_1.ProtocolRequestType(RenameRequest2.method);
        })(RenameRequest = exports.RenameRequest || (exports.RenameRequest = {}));
        var PrepareRenameRequest;
        (function (PrepareRenameRequest2) {
            PrepareRenameRequest2.method = "textDocument/prepareRename";
            PrepareRenameRequest2.type = new messages_1.ProtocolRequestType(PrepareRenameRequest2.method);
        })(PrepareRenameRequest = exports.PrepareRenameRequest || (exports.PrepareRenameRequest = {}));
        var ExecuteCommandRequest;
        (function (ExecuteCommandRequest2) {
            ExecuteCommandRequest2.type = new messages_1.ProtocolRequestType("workspace/executeCommand");
        })(ExecuteCommandRequest = exports.ExecuteCommandRequest || (exports.ExecuteCommandRequest = {}));
        var ApplyWorkspaceEditRequest;
        (function (ApplyWorkspaceEditRequest2) {
            ApplyWorkspaceEditRequest2.type = new messages_1.ProtocolRequestType("workspace/applyEdit");
        })(ApplyWorkspaceEditRequest = exports.ApplyWorkspaceEditRequest || (exports.ApplyWorkspaceEditRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/connection.js
var require_connection2 = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/connection.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.createProtocolConnection = void 0;
        var vscode_jsonrpc_1 = require_main();
        function createProtocolConnection(input, output, logger, options) {
            if (vscode_jsonrpc_1.ConnectionStrategy.is(options)) {
                options = { connectionStrategy: options };
            }
            return vscode_jsonrpc_1.createMessageConnection(input, output, logger, options);
        }
        exports.createProtocolConnection = createProtocolConnection;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/api.js
var require_api2 = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/api.js"(exports) {
        "use strict";
        var __createBinding = exports && exports.__createBinding || (Object.create ? function (o, m, k, k2) {
            if (k2 === void 0)
                k2 = k;
            Object.defineProperty(o, k2, { enumerable: true, get: function () {
                    return m[k];
                } });
        } : function (o, m, k, k2) {
            if (k2 === void 0)
                k2 = k;
            o[k2] = m[k];
        });
        var __exportStar = exports && exports.__exportStar || function (m, exports2) {
            for (var p in m)
                if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
                    __createBinding(exports2, m, p);
        };
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.LSPErrorCodes = exports.createProtocolConnection = void 0;
        __exportStar(require_main(), exports);
        __exportStar(require_main2(), exports);
        __exportStar(require_messages2(), exports);
        __exportStar(require_protocol(), exports);
        var connection_1 = require_connection2();
        Object.defineProperty(exports, "createProtocolConnection", { enumerable: true, get: function () {
                return connection_1.createProtocolConnection;
            } });
        var LSPErrorCodes;
        (function (LSPErrorCodes2) {
            LSPErrorCodes2.lspReservedErrorRangeStart = -32899;
            LSPErrorCodes2.ContentModified = -32801;
            LSPErrorCodes2.RequestCancelled = -32800;
            LSPErrorCodes2.lspReservedErrorRangeEnd = -32800;
        })(LSPErrorCodes = exports.LSPErrorCodes || (exports.LSPErrorCodes = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/browser/main.js
var require_main3 = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/browser/main.js"(exports) {
        "use strict";
        var __createBinding = exports && exports.__createBinding || (Object.create ? function (o, m, k, k2) {
            if (k2 === void 0)
                k2 = k;
            Object.defineProperty(o, k2, { enumerable: true, get: function () {
                    return m[k];
                } });
        } : function (o, m, k, k2) {
            if (k2 === void 0)
                k2 = k;
            o[k2] = m[k];
        });
        var __exportStar = exports && exports.__exportStar || function (m, exports2) {
            for (var p in m)
                if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
                    __createBinding(exports2, m, p);
        };
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.createProtocolConnection = void 0;
        var browser_1 = require_browser();
        __exportStar(require_browser(), exports);
        __exportStar(require_api2(), exports);
        function createProtocolConnection(reader, writer, logger, options) {
            return browser_1.createMessageConnection(reader, writer, logger, options);
        }
        exports.createProtocolConnection = createProtocolConnection;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/semanticTokens.js
var require_semanticTokens = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/semanticTokens.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.SemanticTokensBuilder = exports.SemanticTokensFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var SemanticTokensFeature = (Base) => {
            return class extends Base {
                get semanticTokens() {
                    return {
                        on: (handler) => {
                            const type = vscode_languageserver_protocol_1.SemanticTokensRequest.type;
                            this.connection.onRequest(type, (params, cancel) => {
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        },
                        onDelta: (handler) => {
                            const type = vscode_languageserver_protocol_1.SemanticTokensDeltaRequest.type;
                            this.connection.onRequest(type, (params, cancel) => {
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        },
                        onRange: (handler) => {
                            const type = vscode_languageserver_protocol_1.SemanticTokensRangeRequest.type;
                            this.connection.onRequest(type, (params, cancel) => {
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        }
                    };
                }
            };
        };
        exports.SemanticTokensFeature = SemanticTokensFeature;
        var SemanticTokensBuilder = class {
            constructor() {
                this._prevData = void 0;
                this.initialize();
            }
            initialize() {
                this._id = Date.now();
                this._prevLine = 0;
                this._prevChar = 0;
                this._data = [];
                this._dataLen = 0;
            }
            push(line, char, length, tokenType2, tokenModifiers) {
                let pushLine = line;
                let pushChar = char;
                if (this._dataLen > 0) {
                    pushLine -= this._prevLine;
                    if (pushLine === 0) {
                        pushChar -= this._prevChar;
                    }
                }
                this._data[this._dataLen++] = pushLine;
                this._data[this._dataLen++] = pushChar;
                this._data[this._dataLen++] = length;
                this._data[this._dataLen++] = tokenType2;
                this._data[this._dataLen++] = tokenModifiers;
                this._prevLine = line;
                this._prevChar = char;
            }
            get id() {
                return this._id.toString();
            }
            previousResult(id) {
                if (this.id === id) {
                    this._prevData = this._data;
                }
                this.initialize();
            }
            build() {
                this._prevData = void 0;
                return {
                    resultId: this.id,
                    data: this._data
                };
            }
            canBuildEdits() {
                return this._prevData !== void 0;
            }
            buildEdits() {
                if (this._prevData !== void 0) {
                    const prevDataLength = this._prevData.length;
                    const dataLength = this._data.length;
                    let startIndex = 0;
                    while (startIndex < dataLength && startIndex < prevDataLength && this._prevData[startIndex] === this._data[startIndex]) {
                        startIndex++;
                    }
                    if (startIndex < dataLength && startIndex < prevDataLength) {
                        let endIndex = 0;
                        while (endIndex < dataLength && endIndex < prevDataLength && this._prevData[prevDataLength - 1 - endIndex] === this._data[dataLength - 1 - endIndex]) {
                            endIndex++;
                        }
                        const newData = this._data.slice(startIndex, dataLength - endIndex);
                        const result = {
                            resultId: this.id,
                            edits: [
                                { start: startIndex, deleteCount: prevDataLength - endIndex - startIndex, data: newData }
                            ]
                        };
                        return result;
                    }
                    else if (startIndex < dataLength) {
                        return { resultId: this.id, edits: [
                                { start: startIndex, deleteCount: 0, data: this._data.slice(startIndex) }
                            ] };
                    }
                    else if (startIndex < prevDataLength) {
                        return { resultId: this.id, edits: [
                                { start: startIndex, deleteCount: prevDataLength - startIndex }
                            ] };
                    }
                    else {
                        return { resultId: this.id, edits: [] };
                    }
                }
                else {
                    return this.build();
                }
            }
        };
        exports.SemanticTokensBuilder = SemanticTokensBuilder;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/utils/is.js
var require_is3 = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/utils/is.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.thenable = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
        function boolean(value) {
            return value === true || value === false;
        }
        exports.boolean = boolean;
        function string2(value) {
            return typeof value === "string" || value instanceof String;
        }
        exports.string = string2;
        function number(value) {
            return typeof value === "number" || value instanceof Number;
        }
        exports.number = number;
        function error(value) {
            return value instanceof Error;
        }
        exports.error = error;
        function func(value) {
            return typeof value === "function";
        }
        exports.func = func;
        function array(value) {
            return Array.isArray(value);
        }
        exports.array = array;
        function stringArray(value) {
            return array(value) && value.every((elem) => string2(elem));
        }
        exports.stringArray = stringArray;
        function typedArray(value, check) {
            return Array.isArray(value) && value.every(check);
        }
        exports.typedArray = typedArray;
        function thenable(value) {
            return value && func(value.then);
        }
        exports.thenable = thenable;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/utils/uuid.js
var require_uuid = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/utils/uuid.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.generateUuid = exports.parse = exports.isUUID = exports.v4 = exports.empty = void 0;
        var ValueUUID = class {
            constructor(_value) {
                this._value = _value;
            }
            asHex() {
                return this._value;
            }
            equals(other) {
                return this.asHex() === other.asHex();
            }
        };
        var V4UUID = class extends ValueUUID {
            constructor() {
                super([
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    "-",
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    "-",
                    "4",
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    "-",
                    V4UUID._oneOf(V4UUID._timeHighBits),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    "-",
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex()
                ].join(""));
            }
            static _oneOf(array) {
                return array[Math.floor(array.length * Math.random())];
            }
            static _randomHex() {
                return V4UUID._oneOf(V4UUID._chars);
            }
        };
        V4UUID._chars = ["0", "1", "2", "3", "4", "5", "6", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
        V4UUID._timeHighBits = ["8", "9", "a", "b"];
        exports.empty = new ValueUUID("00000000-0000-0000-0000-000000000000");
        function v4() {
            return new V4UUID();
        }
        exports.v4 = v4;
        var _UUIDPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
        function isUUID(value) {
            return _UUIDPattern.test(value);
        }
        exports.isUUID = isUUID;
        function parse6(value) {
            if (!isUUID(value)) {
                throw new Error("invalid uuid");
            }
            return new ValueUUID(value);
        }
        exports.parse = parse6;
        function generateUuid() {
            return v4().asHex();
        }
        exports.generateUuid = generateUuid;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/progress.js
var require_progress = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/progress.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.attachPartialResult = exports.ProgressFeature = exports.attachWorkDone = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var uuid_1 = require_uuid();
        var WorkDoneProgressReporterImpl = class {
            constructor(_connection, _token) {
                this._connection = _connection;
                this._token = _token;
                WorkDoneProgressReporterImpl.Instances.set(this._token, this);
            }
            begin(title, percentage, message, cancellable) {
                let param = {
                    kind: "begin",
                    title,
                    percentage,
                    message,
                    cancellable
                };
                this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);
            }
            report(arg0, arg1) {
                let param = {
                    kind: "report"
                };
                if (typeof arg0 === "number") {
                    param.percentage = arg0;
                    if (arg1 !== void 0) {
                        param.message = arg1;
                    }
                }
                else {
                    param.message = arg0;
                }
                this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);
            }
            done() {
                WorkDoneProgressReporterImpl.Instances.delete(this._token);
                this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, { kind: "end" });
            }
        };
        WorkDoneProgressReporterImpl.Instances = /* @__PURE__ */ new Map();
        var WorkDoneProgressServerReporterImpl = class extends WorkDoneProgressReporterImpl {
            constructor(connection, token) {
                super(connection, token);
                this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
            }
            get token() {
                return this._source.token;
            }
            done() {
                this._source.dispose();
                super.done();
            }
            cancel() {
                this._source.cancel();
            }
        };
        var NullProgressReporter = class {
            constructor() {
            }
            begin() {
            }
            report() {
            }
            done() {
            }
        };
        var NullProgressServerReporter = class extends NullProgressReporter {
            constructor() {
                super();
                this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
            }
            get token() {
                return this._source.token;
            }
            done() {
                this._source.dispose();
            }
            cancel() {
                this._source.cancel();
            }
        };
        function attachWorkDone(connection, params) {
            if (params === void 0 || params.workDoneToken === void 0) {
                return new NullProgressReporter();
            }
            const token = params.workDoneToken;
            delete params.workDoneToken;
            return new WorkDoneProgressReporterImpl(connection, token);
        }
        exports.attachWorkDone = attachWorkDone;
        var ProgressFeature = (Base) => {
            return class extends Base {
                constructor() {
                    super();
                    this._progressSupported = false;
                }
                initialize(capabilities) {
                    var _a;
                    if (((_a = capabilities === null || capabilities === void 0 ? void 0 : capabilities.window) === null || _a === void 0 ? void 0 : _a.workDoneProgress) === true) {
                        this._progressSupported = true;
                        this.connection.onNotification(vscode_languageserver_protocol_1.WorkDoneProgressCancelNotification.type, (params) => {
                            let progress = WorkDoneProgressReporterImpl.Instances.get(params.token);
                            if (progress instanceof WorkDoneProgressServerReporterImpl || progress instanceof NullProgressServerReporter) {
                                progress.cancel();
                            }
                        });
                    }
                }
                attachWorkDoneProgress(token) {
                    if (token === void 0) {
                        return new NullProgressReporter();
                    }
                    else {
                        return new WorkDoneProgressReporterImpl(this.connection, token);
                    }
                }
                createWorkDoneProgress() {
                    if (this._progressSupported) {
                        const token = uuid_1.generateUuid();
                        return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkDoneProgressCreateRequest.type, { token }).then(() => {
                            const result = new WorkDoneProgressServerReporterImpl(this.connection, token);
                            return result;
                        });
                    }
                    else {
                        return Promise.resolve(new NullProgressServerReporter());
                    }
                }
            };
        };
        exports.ProgressFeature = ProgressFeature;
        var ResultProgress;
        (function (ResultProgress2) {
            ResultProgress2.type = new vscode_languageserver_protocol_1.ProgressType();
        })(ResultProgress || (ResultProgress = {}));
        var ResultProgressReporterImpl = class {
            constructor(_connection, _token) {
                this._connection = _connection;
                this._token = _token;
            }
            report(data) {
                this._connection.sendProgress(ResultProgress.type, this._token, data);
            }
        };
        function attachPartialResult(connection, params) {
            if (params === void 0 || params.partialResultToken === void 0) {
                return void 0;
            }
            const token = params.partialResultToken;
            delete params.partialResultToken;
            return new ResultProgressReporterImpl(connection, token);
        }
        exports.attachPartialResult = attachPartialResult;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/configuration.js
var require_configuration = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/configuration.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.ConfigurationFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var Is2 = require_is3();
        var ConfigurationFeature = (Base) => {
            return class extends Base {
                getConfiguration(arg) {
                    if (!arg) {
                        return this._getConfiguration({});
                    }
                    else if (Is2.string(arg)) {
                        return this._getConfiguration({ section: arg });
                    }
                    else {
                        return this._getConfiguration(arg);
                    }
                }
                _getConfiguration(arg) {
                    let params = {
                        items: Array.isArray(arg) ? arg : [arg]
                    };
                    return this.connection.sendRequest(vscode_languageserver_protocol_1.ConfigurationRequest.type, params).then((result) => {
                        return Array.isArray(arg) ? result : result[0];
                    });
                }
            };
        };
        exports.ConfigurationFeature = ConfigurationFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/workspaceFolders.js
var require_workspaceFolders = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/workspaceFolders.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.WorkspaceFoldersFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var WorkspaceFoldersFeature = (Base) => {
            return class extends Base {
                initialize(capabilities) {
                    let workspaceCapabilities = capabilities.workspace;
                    if (workspaceCapabilities && workspaceCapabilities.workspaceFolders) {
                        this._onDidChangeWorkspaceFolders = new vscode_languageserver_protocol_1.Emitter();
                        this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type, (params) => {
                            this._onDidChangeWorkspaceFolders.fire(params.event);
                        });
                    }
                }
                getWorkspaceFolders() {
                    return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkspaceFoldersRequest.type);
                }
                get onDidChangeWorkspaceFolders() {
                    if (!this._onDidChangeWorkspaceFolders) {
                        throw new Error("Client doesn't support sending workspace folder change events.");
                    }
                    if (!this._unregistration) {
                        this._unregistration = this.connection.client.register(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type);
                    }
                    return this._onDidChangeWorkspaceFolders.event;
                }
            };
        };
        exports.WorkspaceFoldersFeature = WorkspaceFoldersFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/callHierarchy.js
var require_callHierarchy = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/callHierarchy.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.CallHierarchyFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var CallHierarchyFeature = (Base) => {
            return class extends Base {
                get callHierarchy() {
                    return {
                        onPrepare: (handler) => {
                            this.connection.onRequest(vscode_languageserver_protocol_1.CallHierarchyPrepareRequest.type, (params, cancel) => {
                                return handler(params, cancel, this.attachWorkDoneProgress(params), void 0);
                            });
                        },
                        onIncomingCalls: (handler) => {
                            const type = vscode_languageserver_protocol_1.CallHierarchyIncomingCallsRequest.type;
                            this.connection.onRequest(type, (params, cancel) => {
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        },
                        onOutgoingCalls: (handler) => {
                            const type = vscode_languageserver_protocol_1.CallHierarchyOutgoingCallsRequest.type;
                            this.connection.onRequest(type, (params, cancel) => {
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        }
                    };
                }
            };
        };
        exports.CallHierarchyFeature = CallHierarchyFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/showDocument.js
var require_showDocument = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/showDocument.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.ShowDocumentFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var ShowDocumentFeature = (Base) => {
            return class extends Base {
                showDocument(params) {
                    return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowDocumentRequest.type, params);
                }
            };
        };
        exports.ShowDocumentFeature = ShowDocumentFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/fileOperations.js
var require_fileOperations = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/fileOperations.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.FileOperationsFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var FileOperationsFeature = (Base) => {
            return class extends Base {
                onDidCreateFiles(handler) {
                    this.connection.onNotification(vscode_languageserver_protocol_1.DidCreateFilesNotification.type, (params) => {
                        handler(params);
                    });
                }
                onDidRenameFiles(handler) {
                    this.connection.onNotification(vscode_languageserver_protocol_1.DidRenameFilesNotification.type, (params) => {
                        handler(params);
                    });
                }
                onDidDeleteFiles(handler) {
                    this.connection.onNotification(vscode_languageserver_protocol_1.DidDeleteFilesNotification.type, (params) => {
                        handler(params);
                    });
                }
                onWillCreateFiles(handler) {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.WillCreateFilesRequest.type, (params, cancel) => {
                        return handler(params, cancel);
                    });
                }
                onWillRenameFiles(handler) {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.WillRenameFilesRequest.type, (params, cancel) => {
                        return handler(params, cancel);
                    });
                }
                onWillDeleteFiles(handler) {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.WillDeleteFilesRequest.type, (params, cancel) => {
                        return handler(params, cancel);
                    });
                }
            };
        };
        exports.FileOperationsFeature = FileOperationsFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/linkedEditingRange.js
var require_linkedEditingRange = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/linkedEditingRange.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.LinkedEditingRangeFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var LinkedEditingRangeFeature = (Base) => {
            return class extends Base {
                onLinkedEditingRange(handler) {
                    this.connection.onRequest(vscode_languageserver_protocol_1.LinkedEditingRangeRequest.type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), void 0);
                    });
                }
            };
        };
        exports.LinkedEditingRangeFeature = LinkedEditingRangeFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/moniker.js
var require_moniker = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/moniker.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.MonikerFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var MonikerFeature = (Base) => {
            return class extends Base {
                get moniker() {
                    return {
                        on: (handler) => {
                            const type = vscode_languageserver_protocol_1.MonikerRequest.type;
                            this.connection.onRequest(type, (params, cancel) => {
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        }
                    };
                }
            };
        };
        exports.MonikerFeature = MonikerFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/server.js
var require_server = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/server.js"(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.createConnection = exports.combineFeatures = exports.combineLanguagesFeatures = exports.combineWorkspaceFeatures = exports.combineWindowFeatures = exports.combineClientFeatures = exports.combineTracerFeatures = exports.combineTelemetryFeatures = exports.combineConsoleFeatures = exports._LanguagesImpl = exports.BulkUnregistration = exports.BulkRegistration = exports.ErrorMessageTracker = exports.TextDocuments = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var Is2 = require_is3();
        var UUID = require_uuid();
        var progress_1 = require_progress();
        var configuration_1 = require_configuration();
        var workspaceFolders_1 = require_workspaceFolders();
        var callHierarchy_1 = require_callHierarchy();
        var semanticTokens_1 = require_semanticTokens();
        var showDocument_1 = require_showDocument();
        var fileOperations_1 = require_fileOperations();
        var linkedEditingRange_1 = require_linkedEditingRange();
        var moniker_1 = require_moniker();
        function null2Undefined(value) {
            if (value === null) {
                return void 0;
            }
            return value;
        }
        var TextDocuments2 = class {
            /**
             * Create a new text document manager.
             */
            constructor(configuration) {
                this._documents = /* @__PURE__ */ Object.create(null);
                this._configuration = configuration;
                this._onDidChangeContent = new vscode_languageserver_protocol_1.Emitter();
                this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();
                this._onDidClose = new vscode_languageserver_protocol_1.Emitter();
                this._onDidSave = new vscode_languageserver_protocol_1.Emitter();
                this._onWillSave = new vscode_languageserver_protocol_1.Emitter();
            }
            /**
             * An event that fires when a text document managed by this manager
             * has been opened or the content changes.
             */
            get onDidChangeContent() {
                return this._onDidChangeContent.event;
            }
            /**
             * An event that fires when a text document managed by this manager
             * has been opened.
             */
            get onDidOpen() {
                return this._onDidOpen.event;
            }
            /**
             * An event that fires when a text document managed by this manager
             * will be saved.
             */
            get onWillSave() {
                return this._onWillSave.event;
            }
            /**
             * Sets a handler that will be called if a participant wants to provide
             * edits during a text document save.
             */
            onWillSaveWaitUntil(handler) {
                this._willSaveWaitUntil = handler;
            }
            /**
             * An event that fires when a text document managed by this manager
             * has been saved.
             */
            get onDidSave() {
                return this._onDidSave.event;
            }
            /**
             * An event that fires when a text document managed by this manager
             * has been closed.
             */
            get onDidClose() {
                return this._onDidClose.event;
            }
            /**
             * Returns the document for the given URI. Returns undefined if
             * the document is not managed by this instance.
             *
             * @param uri The text document's URI to retrieve.
             * @return the text document or `undefined`.
             */
            get(uri) {
                return this._documents[uri];
            }
            /**
             * Returns all text documents managed by this instance.
             *
             * @return all text documents.
             */
            all() {
                return Object.keys(this._documents).map((key) => this._documents[key]);
            }
            /**
             * Returns the URIs of all text documents managed by this instance.
             *
             * @return the URI's of all text documents.
             */
            keys() {
                return Object.keys(this._documents);
            }
            /**
             * Listens for `low level` notification on the given connection to
             * update the text documents managed by this instance.
             *
             * Please note that the connection only provides handlers not an event model. Therefore
             * listening on a connection will overwrite the following handlers on a connection:
             * `onDidOpenTextDocument`, `onDidChangeTextDocument`, `onDidCloseTextDocument`,
             * `onWillSaveTextDocument`, `onWillSaveTextDocumentWaitUntil` and `onDidSaveTextDocument`.
             *
             * Use the corresponding events on the TextDocuments instance instead.
             *
             * @param connection The connection to listen on.
             */
            listen(connection) {
                connection.__textDocumentSync = vscode_languageserver_protocol_1.TextDocumentSyncKind.Full;
                connection.onDidOpenTextDocument((event) => {
                    let td = event.textDocument;
                    let document = this._configuration.create(td.uri, td.languageId, td.version, td.text);
                    this._documents[td.uri] = document;
                    let toFire = Object.freeze({ document });
                    this._onDidOpen.fire(toFire);
                    this._onDidChangeContent.fire(toFire);
                });
                connection.onDidChangeTextDocument((event) => {
                    let td = event.textDocument;
                    let changes = event.contentChanges;
                    if (changes.length === 0) {
                        return;
                    }
                    let document = this._documents[td.uri];
                    const { version } = td;
                    if (version === null || version === void 0) {
                        throw new Error(`Received document change event for ${td.uri} without valid version identifier`);
                    }
                    document = this._configuration.update(document, changes, version);
                    this._documents[td.uri] = document;
                    this._onDidChangeContent.fire(Object.freeze({ document }));
                });
                connection.onDidCloseTextDocument((event) => {
                    let document = this._documents[event.textDocument.uri];
                    if (document) {
                        delete this._documents[event.textDocument.uri];
                        this._onDidClose.fire(Object.freeze({ document }));
                    }
                });
                connection.onWillSaveTextDocument((event) => {
                    let document = this._documents[event.textDocument.uri];
                    if (document) {
                        this._onWillSave.fire(Object.freeze({ document, reason: event.reason }));
                    }
                });
                connection.onWillSaveTextDocumentWaitUntil((event, token) => {
                    let document = this._documents[event.textDocument.uri];
                    if (document && this._willSaveWaitUntil) {
                        return this._willSaveWaitUntil(Object.freeze({ document, reason: event.reason }), token);
                    }
                    else {
                        return [];
                    }
                });
                connection.onDidSaveTextDocument((event) => {
                    let document = this._documents[event.textDocument.uri];
                    if (document) {
                        this._onDidSave.fire(Object.freeze({ document }));
                    }
                });
            }
        };
        exports.TextDocuments = TextDocuments2;
        var ErrorMessageTracker = class {
            constructor() {
                this._messages = /* @__PURE__ */ Object.create(null);
            }
            /**
             * Add a message to the tracker.
             *
             * @param message The message to add.
             */
            add(message) {
                let count = this._messages[message];
                if (!count) {
                    count = 0;
                }
                count++;
                this._messages[message] = count;
            }
            /**
             * Send all tracked messages to the connection's window.
             *
             * @param connection The connection established between client and server.
             */
            sendErrors(connection) {
                Object.keys(this._messages).forEach((message) => {
                    connection.window.showErrorMessage(message);
                });
            }
        };
        exports.ErrorMessageTracker = ErrorMessageTracker;
        var RemoteConsoleImpl = class {
            constructor() {
            }
            rawAttach(connection) {
                this._rawConnection = connection;
            }
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            fillServerCapabilities(_capabilities) {
            }
            initialize(_capabilities) {
            }
            error(message) {
                this.send(vscode_languageserver_protocol_1.MessageType.Error, message);
            }
            warn(message) {
                this.send(vscode_languageserver_protocol_1.MessageType.Warning, message);
            }
            info(message) {
                this.send(vscode_languageserver_protocol_1.MessageType.Info, message);
            }
            log(message) {
                this.send(vscode_languageserver_protocol_1.MessageType.Log, message);
            }
            send(type, message) {
                if (this._rawConnection) {
                    this._rawConnection.sendNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, { type, message });
                }
            }
        };
        var _RemoteWindowImpl = class {
            constructor() {
            }
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            initialize(_capabilities) {
            }
            fillServerCapabilities(_capabilities) {
            }
            showErrorMessage(message, ...actions) {
                let params = { type: vscode_languageserver_protocol_1.MessageType.Error, message, actions };
                return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
            }
            showWarningMessage(message, ...actions) {
                let params = { type: vscode_languageserver_protocol_1.MessageType.Warning, message, actions };
                return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
            }
            showInformationMessage(message, ...actions) {
                let params = { type: vscode_languageserver_protocol_1.MessageType.Info, message, actions };
                return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
            }
        };
        var RemoteWindowImpl = showDocument_1.ShowDocumentFeature(progress_1.ProgressFeature(_RemoteWindowImpl));
        var BulkRegistration;
        (function (BulkRegistration2) {
            function create() {
                return new BulkRegistrationImpl();
            }
            BulkRegistration2.create = create;
        })(BulkRegistration = exports.BulkRegistration || (exports.BulkRegistration = {}));
        var BulkRegistrationImpl = class {
            constructor() {
                this._registrations = [];
                this._registered = /* @__PURE__ */ new Set();
            }
            add(type, registerOptions) {
                const method = Is2.string(type) ? type : type.method;
                if (this._registered.has(method)) {
                    throw new Error(`${method} is already added to this registration`);
                }
                const id = UUID.generateUuid();
                this._registrations.push({
                    id,
                    method,
                    registerOptions: registerOptions || {}
                });
                this._registered.add(method);
            }
            asRegistrationParams() {
                return {
                    registrations: this._registrations
                };
            }
        };
        var BulkUnregistration;
        (function (BulkUnregistration2) {
            function create() {
                return new BulkUnregistrationImpl(void 0, []);
            }
            BulkUnregistration2.create = create;
        })(BulkUnregistration = exports.BulkUnregistration || (exports.BulkUnregistration = {}));
        var BulkUnregistrationImpl = class {
            constructor(_connection, unregistrations) {
                this._connection = _connection;
                this._unregistrations = /* @__PURE__ */ new Map();
                unregistrations.forEach((unregistration) => {
                    this._unregistrations.set(unregistration.method, unregistration);
                });
            }
            get isAttached() {
                return !!this._connection;
            }
            attach(connection) {
                this._connection = connection;
            }
            add(unregistration) {
                this._unregistrations.set(unregistration.method, unregistration);
            }
            dispose() {
                let unregistrations = [];
                for (let unregistration of this._unregistrations.values()) {
                    unregistrations.push(unregistration);
                }
                let params = {
                    unregisterations: unregistrations
                };
                this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(void 0, (_error) => {
                    this._connection.console.info(`Bulk unregistration failed.`);
                });
            }
            disposeSingle(arg) {
                const method = Is2.string(arg) ? arg : arg.method;
                const unregistration = this._unregistrations.get(method);
                if (!unregistration) {
                    return false;
                }
                let params = {
                    unregisterations: [unregistration]
                };
                this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(() => {
                    this._unregistrations.delete(method);
                }, (_error) => {
                    this._connection.console.info(`Un-registering request handler for ${unregistration.id} failed.`);
                });
                return true;
            }
        };
        var RemoteClientImpl = class {
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            initialize(_capabilities) {
            }
            fillServerCapabilities(_capabilities) {
            }
            register(typeOrRegistrations, registerOptionsOrType, registerOptions) {
                if (typeOrRegistrations instanceof BulkRegistrationImpl) {
                    return this.registerMany(typeOrRegistrations);
                }
                else if (typeOrRegistrations instanceof BulkUnregistrationImpl) {
                    return this.registerSingle1(typeOrRegistrations, registerOptionsOrType, registerOptions);
                }
                else {
                    return this.registerSingle2(typeOrRegistrations, registerOptionsOrType);
                }
            }
            registerSingle1(unregistration, type, registerOptions) {
                const method = Is2.string(type) ? type : type.method;
                const id = UUID.generateUuid();
                let params = {
                    registrations: [{ id, method, registerOptions: registerOptions || {} }]
                };
                if (!unregistration.isAttached) {
                    unregistration.attach(this.connection);
                }
                return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result) => {
                    unregistration.add({ id, method });
                    return unregistration;
                }, (_error) => {
                    this.connection.console.info(`Registering request handler for ${method} failed.`);
                    return Promise.reject(_error);
                });
            }
            registerSingle2(type, registerOptions) {
                const method = Is2.string(type) ? type : type.method;
                const id = UUID.generateUuid();
                let params = {
                    registrations: [{ id, method, registerOptions: registerOptions || {} }]
                };
                return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result) => {
                    return vscode_languageserver_protocol_1.Disposable.create(() => {
                        this.unregisterSingle(id, method);
                    });
                }, (_error) => {
                    this.connection.console.info(`Registering request handler for ${method} failed.`);
                    return Promise.reject(_error);
                });
            }
            unregisterSingle(id, method) {
                let params = {
                    unregisterations: [{ id, method }]
                };
                return this.connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(void 0, (_error) => {
                    this.connection.console.info(`Un-registering request handler for ${id} failed.`);
                });
            }
            registerMany(registrations) {
                let params = registrations.asRegistrationParams();
                return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(() => {
                    return new BulkUnregistrationImpl(this._connection, params.registrations.map((registration) => {
                        return { id: registration.id, method: registration.method };
                    }));
                }, (_error) => {
                    this.connection.console.info(`Bulk registration failed.`);
                    return Promise.reject(_error);
                });
            }
        };
        var _RemoteWorkspaceImpl = class {
            constructor() {
            }
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            initialize(_capabilities) {
            }
            fillServerCapabilities(_capabilities) {
            }
            applyEdit(paramOrEdit) {
                function isApplyWorkspaceEditParams(value) {
                    return value && !!value.edit;
                }
                let params = isApplyWorkspaceEditParams(paramOrEdit) ? paramOrEdit : { edit: paramOrEdit };
                return this.connection.sendRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, params);
            }
        };
        var RemoteWorkspaceImpl = fileOperations_1.FileOperationsFeature(workspaceFolders_1.WorkspaceFoldersFeature(configuration_1.ConfigurationFeature(_RemoteWorkspaceImpl)));
        var TracerImpl = class {
            constructor() {
                this._trace = vscode_languageserver_protocol_1.Trace.Off;
            }
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            initialize(_capabilities) {
            }
            fillServerCapabilities(_capabilities) {
            }
            set trace(value) {
                this._trace = value;
            }
            log(message, verbose) {
                if (this._trace === vscode_languageserver_protocol_1.Trace.Off) {
                    return;
                }
                this.connection.sendNotification(vscode_languageserver_protocol_1.LogTraceNotification.type, {
                    message,
                    verbose: this._trace === vscode_languageserver_protocol_1.Trace.Verbose ? verbose : void 0
                });
            }
        };
        var TelemetryImpl = class {
            constructor() {
            }
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            initialize(_capabilities) {
            }
            fillServerCapabilities(_capabilities) {
            }
            logEvent(data) {
                this.connection.sendNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, data);
            }
        };
        var _LanguagesImpl = class {
            constructor() {
            }
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            initialize(_capabilities) {
            }
            fillServerCapabilities(_capabilities) {
            }
            attachWorkDoneProgress(params) {
                return progress_1.attachWorkDone(this.connection, params);
            }
            attachPartialResultProgress(_type, params) {
                return progress_1.attachPartialResult(this.connection, params);
            }
        };
        exports._LanguagesImpl = _LanguagesImpl;
        var LanguagesImpl = moniker_1.MonikerFeature(linkedEditingRange_1.LinkedEditingRangeFeature(semanticTokens_1.SemanticTokensFeature(callHierarchy_1.CallHierarchyFeature(_LanguagesImpl))));
        function combineConsoleFeatures(one, two) {
            return function (Base) {
                return two(one(Base));
            };
        }
        exports.combineConsoleFeatures = combineConsoleFeatures;
        function combineTelemetryFeatures(one, two) {
            return function (Base) {
                return two(one(Base));
            };
        }
        exports.combineTelemetryFeatures = combineTelemetryFeatures;
        function combineTracerFeatures(one, two) {
            return function (Base) {
                return two(one(Base));
            };
        }
        exports.combineTracerFeatures = combineTracerFeatures;
        function combineClientFeatures(one, two) {
            return function (Base) {
                return two(one(Base));
            };
        }
        exports.combineClientFeatures = combineClientFeatures;
        function combineWindowFeatures(one, two) {
            return function (Base) {
                return two(one(Base));
            };
        }
        exports.combineWindowFeatures = combineWindowFeatures;
        function combineWorkspaceFeatures(one, two) {
            return function (Base) {
                return two(one(Base));
            };
        }
        exports.combineWorkspaceFeatures = combineWorkspaceFeatures;
        function combineLanguagesFeatures(one, two) {
            return function (Base) {
                return two(one(Base));
            };
        }
        exports.combineLanguagesFeatures = combineLanguagesFeatures;
        function combineFeatures(one, two) {
            function combine(one2, two2, func) {
                if (one2 && two2) {
                    return func(one2, two2);
                }
                else if (one2) {
                    return one2;
                }
                else {
                    return two2;
                }
            }
            let result = {
                __brand: "features",
                console: combine(one.console, two.console, combineConsoleFeatures),
                tracer: combine(one.tracer, two.tracer, combineTracerFeatures),
                telemetry: combine(one.telemetry, two.telemetry, combineTelemetryFeatures),
                client: combine(one.client, two.client, combineClientFeatures),
                window: combine(one.window, two.window, combineWindowFeatures),
                workspace: combine(one.workspace, two.workspace, combineWorkspaceFeatures)
            };
            return result;
        }
        exports.combineFeatures = combineFeatures;
        function createConnection(connectionFactory, watchDog, factories) {
            const logger = factories && factories.console ? new (factories.console(RemoteConsoleImpl))() : new RemoteConsoleImpl();
            const connection = connectionFactory(logger);
            logger.rawAttach(connection);
            const tracer = factories && factories.tracer ? new (factories.tracer(TracerImpl))() : new TracerImpl();
            const telemetry = factories && factories.telemetry ? new (factories.telemetry(TelemetryImpl))() : new TelemetryImpl();
            const client = factories && factories.client ? new (factories.client(RemoteClientImpl))() : new RemoteClientImpl();
            const remoteWindow = factories && factories.window ? new (factories.window(RemoteWindowImpl))() : new RemoteWindowImpl();
            const workspace = factories && factories.workspace ? new (factories.workspace(RemoteWorkspaceImpl))() : new RemoteWorkspaceImpl();
            const languages = factories && factories.languages ? new (factories.languages(LanguagesImpl))() : new LanguagesImpl();
            const allRemotes = [logger, tracer, telemetry, client, remoteWindow, workspace, languages];
            function asPromise(value) {
                if (value instanceof Promise) {
                    return value;
                }
                else if (Is2.thenable(value)) {
                    return new Promise((resolve2, reject) => {
                        value.then((resolved) => resolve2(resolved), (error) => reject(error));
                    });
                }
                else {
                    return Promise.resolve(value);
                }
            }
            let shutdownHandler = void 0;
            let initializeHandler = void 0;
            let exitHandler = void 0;
            let protocolConnection = {
                listen: () => connection.listen(),
                sendRequest: (type, ...params) => connection.sendRequest(Is2.string(type) ? type : type.method, ...params),
                onRequest: (type, handler) => connection.onRequest(type, handler),
                sendNotification: (type, param) => {
                    const method = Is2.string(type) ? type : type.method;
                    if (arguments.length === 1) {
                        connection.sendNotification(method);
                    }
                    else {
                        connection.sendNotification(method, param);
                    }
                },
                onNotification: (type, handler) => connection.onNotification(type, handler),
                onProgress: connection.onProgress,
                sendProgress: connection.sendProgress,
                onInitialize: (handler) => initializeHandler = handler,
                onInitialized: (handler) => connection.onNotification(vscode_languageserver_protocol_1.InitializedNotification.type, handler),
                onShutdown: (handler) => shutdownHandler = handler,
                onExit: (handler) => exitHandler = handler,
                get console() {
                    return logger;
                },
                get telemetry() {
                    return telemetry;
                },
                get tracer() {
                    return tracer;
                },
                get client() {
                    return client;
                },
                get window() {
                    return remoteWindow;
                },
                get workspace() {
                    return workspace;
                },
                get languages() {
                    return languages;
                },
                onDidChangeConfiguration: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, handler),
                onDidChangeWatchedFiles: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, handler),
                __textDocumentSync: void 0,
                onDidOpenTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, handler),
                onDidChangeTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, handler),
                onDidCloseTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, handler),
                onWillSaveTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type, handler),
                onWillSaveTextDocumentWaitUntil: (handler) => connection.onRequest(vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type, handler),
                onDidSaveTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, handler),
                sendDiagnostics: (params) => connection.sendNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, params),
                onHover: (handler) => connection.onRequest(vscode_languageserver_protocol_1.HoverRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), void 0);
                }),
                onCompletion: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CompletionRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                }),
                onCompletionResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, handler),
                onSignatureHelp: (handler) => connection.onRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), void 0);
                }),
                onDeclaration: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DeclarationRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                }),
                onDefinition: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                }),
                onTypeDefinition: (handler) => connection.onRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                }),
                onImplementation: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ImplementationRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                }),
                onReferences: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ReferencesRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                }),
                onDocumentHighlight: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentHighlightRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                }),
                onDocumentSymbol: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                }),
                onWorkspaceSymbol: (handler) => connection.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                }),
                onCodeAction: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                }),
                onCodeActionResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, (params, cancel) => {
                    return handler(params, cancel);
                }),
                onCodeLens: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeLensRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                }),
                onCodeLensResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeLensResolveRequest.type, (params, cancel) => {
                    return handler(params, cancel);
                }),
                onDocumentFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), void 0);
                }),
                onDocumentRangeFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), void 0);
                }),
                onDocumentOnTypeFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, (params, cancel) => {
                    return handler(params, cancel);
                }),
                onRenameRequest: (handler) => connection.onRequest(vscode_languageserver_protocol_1.RenameRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), void 0);
                }),
                onPrepareRename: (handler) => connection.onRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, (params, cancel) => {
                    return handler(params, cancel);
                }),
                onDocumentLinks: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                }),
                onDocumentLinkResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, (params, cancel) => {
                    return handler(params, cancel);
                }),
                onDocumentColor: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                }),
                onColorPresentation: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                }),
                onFoldingRanges: (handler) => connection.onRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                }),
                onSelectionRanges: (handler) => connection.onRequest(vscode_languageserver_protocol_1.SelectionRangeRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                }),
                onExecuteCommand: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ExecuteCommandRequest.type, (params, cancel) => {
                    return handler(params, cancel, progress_1.attachWorkDone(connection, params), void 0);
                }),
                dispose: () => connection.dispose()
            };
            for (let remote of allRemotes) {
                remote.attach(protocolConnection);
            }
            connection.onRequest(vscode_languageserver_protocol_1.InitializeRequest.type, (params) => {
                watchDog.initialize(params);
                if (Is2.string(params.trace)) {
                    tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.trace);
                }
                for (let remote of allRemotes) {
                    remote.initialize(params.capabilities);
                }
                if (initializeHandler) {
                    let result = initializeHandler(params, new vscode_languageserver_protocol_1.CancellationTokenSource().token, progress_1.attachWorkDone(connection, params), void 0);
                    return asPromise(result).then((value) => {
                        if (value instanceof vscode_languageserver_protocol_1.ResponseError) {
                            return value;
                        }
                        let result2 = value;
                        if (!result2) {
                            result2 = { capabilities: {} };
                        }
                        let capabilities = result2.capabilities;
                        if (!capabilities) {
                            capabilities = {};
                            result2.capabilities = capabilities;
                        }
                        if (capabilities.textDocumentSync === void 0 || capabilities.textDocumentSync === null) {
                            capabilities.textDocumentSync = Is2.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
                        }
                        else if (!Is2.number(capabilities.textDocumentSync) && !Is2.number(capabilities.textDocumentSync.change)) {
                            capabilities.textDocumentSync.change = Is2.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
                        }
                        for (let remote of allRemotes) {
                            remote.fillServerCapabilities(capabilities);
                        }
                        return result2;
                    });
                }
                else {
                    let result = { capabilities: { textDocumentSync: vscode_languageserver_protocol_1.TextDocumentSyncKind.None } };
                    for (let remote of allRemotes) {
                        remote.fillServerCapabilities(result.capabilities);
                    }
                    return result;
                }
            });
            connection.onRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, () => {
                watchDog.shutdownReceived = true;
                if (shutdownHandler) {
                    return shutdownHandler(new vscode_languageserver_protocol_1.CancellationTokenSource().token);
                }
                else {
                    return void 0;
                }
            });
            connection.onNotification(vscode_languageserver_protocol_1.ExitNotification.type, () => {
                try {
                    if (exitHandler) {
                        exitHandler();
                    }
                }
                finally {
                    if (watchDog.shutdownReceived) {
                        watchDog.exit(0);
                    }
                    else {
                        watchDog.exit(1);
                    }
                }
            });
            connection.onNotification(vscode_languageserver_protocol_1.SetTraceNotification.type, (params) => {
                tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.value);
            });
            return protocolConnection;
        }
        exports.createConnection = createConnection;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/api.js
var require_api3 = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/api.js"(exports) {
        "use strict";
        var __createBinding = exports && exports.__createBinding || (Object.create ? function (o, m, k, k2) {
            if (k2 === void 0)
                k2 = k;
            Object.defineProperty(o, k2, { enumerable: true, get: function () {
                    return m[k];
                } });
        } : function (o, m, k, k2) {
            if (k2 === void 0)
                k2 = k;
            o[k2] = m[k];
        });
        var __exportStar = exports && exports.__exportStar || function (m, exports2) {
            for (var p in m)
                if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
                    __createBinding(exports2, m, p);
        };
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.ProposedFeatures = exports.SemanticTokensBuilder = void 0;
        var semanticTokens_1 = require_semanticTokens();
        Object.defineProperty(exports, "SemanticTokensBuilder", { enumerable: true, get: function () {
                return semanticTokens_1.SemanticTokensBuilder;
            } });
        __exportStar(require_main3(), exports);
        __exportStar(require_server(), exports);
        var ProposedFeatures;
        (function (ProposedFeatures2) {
            ProposedFeatures2.all = {
                __brand: "features"
            };
        })(ProposedFeatures = exports.ProposedFeatures || (exports.ProposedFeatures = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/browser.js
var require_browser2 = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/browser.js"(exports, module) {
        "use strict";
        module.exports = require_main3();
    }
});
// ../../node_modules/vscode-languageserver/lib/browser/main.js
var require_main4 = __commonJS({
    "../../node_modules/vscode-languageserver/lib/browser/main.js"(exports) {
        "use strict";
        var __createBinding = exports && exports.__createBinding || (Object.create ? function (o, m, k, k2) {
            if (k2 === void 0)
                k2 = k;
            Object.defineProperty(o, k2, { enumerable: true, get: function () {
                    return m[k];
                } });
        } : function (o, m, k, k2) {
            if (k2 === void 0)
                k2 = k;
            o[k2] = m[k];
        });
        var __exportStar = exports && exports.__exportStar || function (m, exports2) {
            for (var p in m)
                if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
                    __createBinding(exports2, m, p);
        };
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.createConnection = void 0;
        var api_1 = require_api3();
        __exportStar(require_browser2(), exports);
        __exportStar(require_api3(), exports);
        var _shutdownReceived = false;
        var watchDog = {
            initialize: (_params) => {
            },
            get shutdownReceived() {
                return _shutdownReceived;
            },
            set shutdownReceived(value) {
                _shutdownReceived = value;
            },
            exit: (_code) => {
            }
        };
        function createConnection(arg1, arg2, arg3, arg4) {
            let factories;
            let reader;
            let writer;
            let options;
            if (arg1 !== void 0 && arg1.__brand === "features") {
                factories = arg1;
                arg1 = arg2;
                arg2 = arg3;
                arg3 = arg4;
            }
            if (api_1.ConnectionStrategy.is(arg1) || api_1.ConnectionOptions.is(arg1)) {
                options = arg1;
            }
            else {
                reader = arg1;
                writer = arg2;
                options = arg3;
            }
            const connectionFactory = (logger) => {
                return api_1.createProtocolConnection(reader, writer, logger, options);
            };
            return api_1.createConnection(connectionFactory, watchDog, factories);
        }
        exports.createConnection = createConnection;
    }
});
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonSchemaService.js

// ../../node_modules/vscode-uri/lib/esm/index.js
var LIB;
(() => {
    "use strict";
    var t = { 470: (t2) => {
            function e2(t3) {
                if ("string" != typeof t3)
                    throw new TypeError("Path must be a string. Received " + JSON.stringify(t3));
            }
            function r2(t3, e3) {
                for (var r3, n3 = "", o = 0, i = -1, a2 = 0, h = 0; h <= t3.length; ++h) {
                    if (h < t3.length)
                        r3 = t3.charCodeAt(h);
                    else {
                        if (47 === r3)
                            break;
                        r3 = 47;
                    }
                    if (47 === r3) {
                        if (i === h - 1 || 1 === a2)
                            ;
                        else if (i !== h - 1 && 2 === a2) {
                            if (n3.length < 2 || 2 !== o || 46 !== n3.charCodeAt(n3.length - 1) || 46 !== n3.charCodeAt(n3.length - 2)) {
                                if (n3.length > 2) {
                                    var s = n3.lastIndexOf("/");
                                    if (s !== n3.length - 1) {
                                        -1 === s ? (n3 = "", o = 0) : o = (n3 = n3.slice(0, s)).length - 1 - n3.lastIndexOf("/"), i = h, a2 = 0;
                                        continue;
                                    }
                                }
                                else if (2 === n3.length || 1 === n3.length) {
                                    n3 = "", o = 0, i = h, a2 = 0;
                                    continue;
                                }
                            }
                            e3 && (n3.length > 0 ? n3 += "/.." : n3 = "..", o = 2);
                        }
                        else
                            n3.length > 0 ? n3 += "/" + t3.slice(i + 1, h) : n3 = t3.slice(i + 1, h), o = h - i - 1;
                        i = h, a2 = 0;
                    }
                    else
                        46 === r3 && -1 !== a2 ? ++a2 : a2 = -1;
                }
                return n3;
            }
            var n2 = { resolve: function () {
                    for (var t3, n3 = "", o = false, i = arguments.length - 1; i >= -1 && !o; i--) {
                        var a2;
                        i >= 0 ? a2 = arguments[i] : (void 0 === t3 && (t3 = process.cwd()), a2 = t3), e2(a2), 0 !== a2.length && (n3 = a2 + "/" + n3, o = 47 === a2.charCodeAt(0));
                    }
                    return n3 = r2(n3, !o), o ? n3.length > 0 ? "/" + n3 : "/" : n3.length > 0 ? n3 : ".";
                }, normalize: function (t3) {
                    if (e2(t3), 0 === t3.length)
                        return ".";
                    var n3 = 47 === t3.charCodeAt(0), o = 47 === t3.charCodeAt(t3.length - 1);
                    return 0 !== (t3 = r2(t3, !n3)).length || n3 || (t3 = "."), t3.length > 0 && o && (t3 += "/"), n3 ? "/" + t3 : t3;
                }, isAbsolute: function (t3) {
                    return e2(t3), t3.length > 0 && 47 === t3.charCodeAt(0);
                }, join: function () {
                    if (0 === arguments.length)
                        return ".";
                    for (var t3, r3 = 0; r3 < arguments.length; ++r3) {
                        var o = arguments[r3];
                        e2(o), o.length > 0 && (void 0 === t3 ? t3 = o : t3 += "/" + o);
                    }
                    return void 0 === t3 ? "." : n2.normalize(t3);
                }, relative: function (t3, r3) {
                    if (e2(t3), e2(r3), t3 === r3)
                        return "";
                    if ((t3 = n2.resolve(t3)) === (r3 = n2.resolve(r3)))
                        return "";
                    for (var o = 1; o < t3.length && 47 === t3.charCodeAt(o); ++o)
                        ;
                    for (var i = t3.length, a2 = i - o, h = 1; h < r3.length && 47 === r3.charCodeAt(h); ++h)
                        ;
                    for (var s = r3.length - h, c = a2 < s ? a2 : s, f2 = -1, u = 0; u <= c; ++u) {
                        if (u === c) {
                            if (s > c) {
                                if (47 === r3.charCodeAt(h + u))
                                    return r3.slice(h + u + 1);
                                if (0 === u)
                                    return r3.slice(h + u);
                            }
                            else
                                a2 > c && (47 === t3.charCodeAt(o + u) ? f2 = u : 0 === u && (f2 = 0));
                            break;
                        }
                        var l = t3.charCodeAt(o + u);
                        if (l !== r3.charCodeAt(h + u))
                            break;
                        47 === l && (f2 = u);
                    }
                    var p = "";
                    for (u = o + f2 + 1; u <= i; ++u)
                        u !== i && 47 !== t3.charCodeAt(u) || (0 === p.length ? p += ".." : p += "/..");
                    return p.length > 0 ? p + r3.slice(h + f2) : (h += f2, 47 === r3.charCodeAt(h) && ++h, r3.slice(h));
                }, _makeLong: function (t3) {
                    return t3;
                }, dirname: function (t3) {
                    if (e2(t3), 0 === t3.length)
                        return ".";
                    for (var r3 = t3.charCodeAt(0), n3 = 47 === r3, o = -1, i = true, a2 = t3.length - 1; a2 >= 1; --a2)
                        if (47 === (r3 = t3.charCodeAt(a2))) {
                            if (!i) {
                                o = a2;
                                break;
                            }
                        }
                        else
                            i = false;
                    return -1 === o ? n3 ? "/" : "." : n3 && 1 === o ? "//" : t3.slice(0, o);
                }, basename: function (t3, r3) {
                    if (void 0 !== r3 && "string" != typeof r3)
                        throw new TypeError('"ext" argument must be a string');
                    e2(t3);
                    var n3, o = 0, i = -1, a2 = true;
                    if (void 0 !== r3 && r3.length > 0 && r3.length <= t3.length) {
                        if (r3.length === t3.length && r3 === t3)
                            return "";
                        var h = r3.length - 1, s = -1;
                        for (n3 = t3.length - 1; n3 >= 0; --n3) {
                            var c = t3.charCodeAt(n3);
                            if (47 === c) {
                                if (!a2) {
                                    o = n3 + 1;
                                    break;
                                }
                            }
                            else
                                -1 === s && (a2 = false, s = n3 + 1), h >= 0 && (c === r3.charCodeAt(h) ? -1 == --h && (i = n3) : (h = -1, i = s));
                        }
                        return o === i ? i = s : -1 === i && (i = t3.length), t3.slice(o, i);
                    }
                    for (n3 = t3.length - 1; n3 >= 0; --n3)
                        if (47 === t3.charCodeAt(n3)) {
                            if (!a2) {
                                o = n3 + 1;
                                break;
                            }
                        }
                        else
                            -1 === i && (a2 = false, i = n3 + 1);
                    return -1 === i ? "" : t3.slice(o, i);
                }, extname: function (t3) {
                    e2(t3);
                    for (var r3 = -1, n3 = 0, o = -1, i = true, a2 = 0, h = t3.length - 1; h >= 0; --h) {
                        var s = t3.charCodeAt(h);
                        if (47 !== s)
                            -1 === o && (i = false, o = h + 1), 46 === s ? -1 === r3 ? r3 = h : 1 !== a2 && (a2 = 1) : -1 !== r3 && (a2 = -1);
                        else if (!i) {
                            n3 = h + 1;
                            break;
                        }
                    }
                    return -1 === r3 || -1 === o || 0 === a2 || 1 === a2 && r3 === o - 1 && r3 === n3 + 1 ? "" : t3.slice(r3, o);
                }, format: function (t3) {
                    if (null === t3 || "object" != typeof t3)
                        throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof t3);
                    return function (t4, e3) {
                        var r3 = e3.dir || e3.root, n3 = e3.base || (e3.name || "") + (e3.ext || "");
                        return r3 ? r3 === e3.root ? r3 + n3 : r3 + "/" + n3 : n3;
                    }(0, t3);
                }, parse: function (t3) {
                    e2(t3);
                    var r3 = { root: "", dir: "", base: "", ext: "", name: "" };
                    if (0 === t3.length)
                        return r3;
                    var n3, o = t3.charCodeAt(0), i = 47 === o;
                    i ? (r3.root = "/", n3 = 1) : n3 = 0;
                    for (var a2 = -1, h = 0, s = -1, c = true, f2 = t3.length - 1, u = 0; f2 >= n3; --f2)
                        if (47 !== (o = t3.charCodeAt(f2)))
                            -1 === s && (c = false, s = f2 + 1), 46 === o ? -1 === a2 ? a2 = f2 : 1 !== u && (u = 1) : -1 !== a2 && (u = -1);
                        else if (!c) {
                            h = f2 + 1;
                            break;
                        }
                    return -1 === a2 || -1 === s || 0 === u || 1 === u && a2 === s - 1 && a2 === h + 1 ? -1 !== s && (r3.base = r3.name = 0 === h && i ? t3.slice(1, s) : t3.slice(h, s)) : (0 === h && i ? (r3.name = t3.slice(1, a2), r3.base = t3.slice(1, s)) : (r3.name = t3.slice(h, a2), r3.base = t3.slice(h, s)), r3.ext = t3.slice(a2, s)), h > 0 ? r3.dir = t3.slice(0, h - 1) : i && (r3.dir = "/"), r3;
                }, sep: "/", delimiter: ":", win32: null, posix: null };
            n2.posix = n2, t2.exports = n2;
        } }, e = {};
    function r(n2) {
        var o = e[n2];
        if (void 0 !== o)
            return o.exports;
        var i = e[n2] = { exports: {} };
        return t[n2](i, i.exports, r), i.exports;
    }
    r.d = (t2, e2) => {
        for (var n2 in e2)
            r.o(e2, n2) && !r.o(t2, n2) && Object.defineProperty(t2, n2, { enumerable: true, get: e2[n2] });
    }, r.o = (t2, e2) => Object.prototype.hasOwnProperty.call(t2, e2), r.r = (t2) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
    };
    var n = {};
    (() => {
        var t2;
        if (r.r(n), r.d(n, { URI: () => g, Utils: () => O }), "object" == typeof process)
            t2 = "win32" === process.platform;
        else if ("object" == typeof navigator) {
            var e2 = navigator.userAgent;
            t2 = e2.indexOf("Windows") >= 0;
        }
        var o, i, a2 = (o = function (t3, e3) {
            return o = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (t4, e4) {
                t4.__proto__ = e4;
            } || function (t4, e4) {
                for (var r2 in e4)
                    Object.prototype.hasOwnProperty.call(e4, r2) && (t4[r2] = e4[r2]);
            }, o(t3, e3);
        }, function (t3, e3) {
            if ("function" != typeof e3 && null !== e3)
                throw new TypeError("Class extends value " + String(e3) + " is not a constructor or null");
            function r2() {
                this.constructor = t3;
            }
            o(t3, e3), t3.prototype = null === e3 ? Object.create(e3) : (r2.prototype = e3.prototype, new r2());
        }), h = /^\w[\w\d+.-]*$/, s = /^\//, c = /^\/\//;
        function f2(t3, e3) {
            if (!t3.scheme && e3)
                throw new Error('[UriError]: Scheme is missing: {scheme: "", authority: "'.concat(t3.authority, '", path: "').concat(t3.path, '", query: "').concat(t3.query, '", fragment: "').concat(t3.fragment, '"}'));
            if (t3.scheme && !h.test(t3.scheme))
                throw new Error("[UriError]: Scheme contains illegal characters.");
            if (t3.path) {
                if (t3.authority) {
                    if (!s.test(t3.path))
                        throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character');
                }
                else if (c.test(t3.path))
                    throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")');
            }
        }
        var u = "", l = "/", p = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/, g = function () {
            function e3(t3, e4, r2, n2, o2, i2) {
                void 0 === i2 && (i2 = false), "object" == typeof t3 ? (this.scheme = t3.scheme || u, this.authority = t3.authority || u, this.path = t3.path || u, this.query = t3.query || u, this.fragment = t3.fragment || u) : (this.scheme = function (t4, e5) {
                    return t4 || e5 ? t4 : "file";
                }(t3, i2), this.authority = e4 || u, this.path = function (t4, e5) {
                    switch (t4) {
                        case "https":
                        case "http":
                        case "file":
                            e5 ? e5[0] !== l && (e5 = l + e5) : e5 = l;
                    }
                    return e5;
                }(this.scheme, r2 || u), this.query = n2 || u, this.fragment = o2 || u, f2(this, i2));
            }
            return e3.isUri = function (t3) {
                return t3 instanceof e3 || !!t3 && "string" == typeof t3.authority && "string" == typeof t3.fragment && "string" == typeof t3.path && "string" == typeof t3.query && "string" == typeof t3.scheme && "string" == typeof t3.fsPath && "function" == typeof t3.with && "function" == typeof t3.toString;
            }, Object.defineProperty(e3.prototype, "fsPath", { get: function () {
                    return C(this, false);
                }, enumerable: false, configurable: true }), e3.prototype.with = function (t3) {
                if (!t3)
                    return this;
                var e4 = t3.scheme, r2 = t3.authority, n2 = t3.path, o2 = t3.query, i2 = t3.fragment;
                return void 0 === e4 ? e4 = this.scheme : null === e4 && (e4 = u), void 0 === r2 ? r2 = this.authority : null === r2 && (r2 = u), void 0 === n2 ? n2 = this.path : null === n2 && (n2 = u), void 0 === o2 ? o2 = this.query : null === o2 && (o2 = u), void 0 === i2 ? i2 = this.fragment : null === i2 && (i2 = u), e4 === this.scheme && r2 === this.authority && n2 === this.path && o2 === this.query && i2 === this.fragment ? this : new v(e4, r2, n2, o2, i2);
            }, e3.parse = function (t3, e4) {
                void 0 === e4 && (e4 = false);
                var r2 = p.exec(t3);
                return r2 ? new v(r2[2] || u, _(r2[4] || u), _(r2[5] || u), _(r2[7] || u), _(r2[9] || u), e4) : new v(u, u, u, u, u);
            }, e3.file = function (e4) {
                var r2 = u;
                if (t2 && (e4 = e4.replace(/\\/g, l)), e4[0] === l && e4[1] === l) {
                    var n2 = e4.indexOf(l, 2);
                    -1 === n2 ? (r2 = e4.substring(2), e4 = l) : (r2 = e4.substring(2, n2), e4 = e4.substring(n2) || l);
                }
                return new v("file", r2, e4, u, u);
            }, e3.from = function (t3) {
                var e4 = new v(t3.scheme, t3.authority, t3.path, t3.query, t3.fragment);
                return f2(e4, true), e4;
            }, e3.prototype.toString = function (t3) {
                return void 0 === t3 && (t3 = false), A2(this, t3);
            }, e3.prototype.toJSON = function () {
                return this;
            }, e3.revive = function (t3) {
                if (t3) {
                    if (t3 instanceof e3)
                        return t3;
                    var r2 = new v(t3);
                    return r2._formatted = t3.external, r2._fsPath = t3._sep === d ? t3.fsPath : null, r2;
                }
                return t3;
            }, e3;
        }(), d = t2 ? 1 : void 0, v = function (t3) {
            function e3() {
                var e4 = null !== t3 && t3.apply(this, arguments) || this;
                return e4._formatted = null, e4._fsPath = null, e4;
            }
            return a2(e3, t3), Object.defineProperty(e3.prototype, "fsPath", { get: function () {
                    return this._fsPath || (this._fsPath = C(this, false)), this._fsPath;
                }, enumerable: false, configurable: true }), e3.prototype.toString = function (t4) {
                return void 0 === t4 && (t4 = false), t4 ? A2(this, true) : (this._formatted || (this._formatted = A2(this, false)), this._formatted);
            }, e3.prototype.toJSON = function () {
                var t4 = { $mid: 1 };
                return this._fsPath && (t4.fsPath = this._fsPath, t4._sep = d), this._formatted && (t4.external = this._formatted), this.path && (t4.path = this.path), this.scheme && (t4.scheme = this.scheme), this.authority && (t4.authority = this.authority), this.query && (t4.query = this.query), this.fragment && (t4.fragment = this.fragment), t4;
            }, e3;
        }(g), y = ((i = {})[58] = "%3A", i[47] = "%2F", i[63] = "%3F", i[35] = "%23", i[91] = "%5B", i[93] = "%5D", i[64] = "%40", i[33] = "%21", i[36] = "%24", i[38] = "%26", i[39] = "%27", i[40] = "%28", i[41] = "%29", i[42] = "%2A", i[43] = "%2B", i[44] = "%2C", i[59] = "%3B", i[61] = "%3D", i[32] = "%20", i);
        function m(t3, e3, r2) {
            for (var n2 = void 0, o2 = -1, i2 = 0; i2 < t3.length; i2++) {
                var a3 = t3.charCodeAt(i2);
                if (a3 >= 97 && a3 <= 122 || a3 >= 65 && a3 <= 90 || a3 >= 48 && a3 <= 57 || 45 === a3 || 46 === a3 || 95 === a3 || 126 === a3 || e3 && 47 === a3 || r2 && 91 === a3 || r2 && 93 === a3 || r2 && 58 === a3)
                    -1 !== o2 && (n2 += encodeURIComponent(t3.substring(o2, i2)), o2 = -1), void 0 !== n2 && (n2 += t3.charAt(i2));
                else {
                    void 0 === n2 && (n2 = t3.substr(0, i2));
                    var h2 = y[a3];
                    void 0 !== h2 ? (-1 !== o2 && (n2 += encodeURIComponent(t3.substring(o2, i2)), o2 = -1), n2 += h2) : -1 === o2 && (o2 = i2);
                }
            }
            return -1 !== o2 && (n2 += encodeURIComponent(t3.substring(o2))), void 0 !== n2 ? n2 : t3;
        }
        function b(t3) {
            for (var e3 = void 0, r2 = 0; r2 < t3.length; r2++) {
                var n2 = t3.charCodeAt(r2);
                35 === n2 || 63 === n2 ? (void 0 === e3 && (e3 = t3.substr(0, r2)), e3 += y[n2]) : void 0 !== e3 && (e3 += t3[r2]);
            }
            return void 0 !== e3 ? e3 : t3;
        }
        function C(e3, r2) {
            var n2;
            return n2 = e3.authority && e3.path.length > 1 && "file" === e3.scheme ? "//".concat(e3.authority).concat(e3.path) : 47 === e3.path.charCodeAt(0) && (e3.path.charCodeAt(1) >= 65 && e3.path.charCodeAt(1) <= 90 || e3.path.charCodeAt(1) >= 97 && e3.path.charCodeAt(1) <= 122) && 58 === e3.path.charCodeAt(2) ? r2 ? e3.path.substr(1) : e3.path[1].toLowerCase() + e3.path.substr(2) : e3.path, t2 && (n2 = n2.replace(/\//g, "\\")), n2;
        }
        function A2(t3, e3) {
            var r2 = e3 ? b : m, n2 = "", o2 = t3.scheme, i2 = t3.authority, a3 = t3.path, h2 = t3.query, s2 = t3.fragment;
            if (o2 && (n2 += o2, n2 += ":"), (i2 || "file" === o2) && (n2 += l, n2 += l), i2) {
                var c2 = i2.indexOf("@");
                if (-1 !== c2) {
                    var f3 = i2.substr(0, c2);
                    i2 = i2.substr(c2 + 1), -1 === (c2 = f3.lastIndexOf(":")) ? n2 += r2(f3, false, false) : (n2 += r2(f3.substr(0, c2), false, false), n2 += ":", n2 += r2(f3.substr(c2 + 1), false, true)), n2 += "@";
                }
                -1 === (c2 = (i2 = i2.toLowerCase()).lastIndexOf(":")) ? n2 += r2(i2, false, true) : (n2 += r2(i2.substr(0, c2), false, true), n2 += i2.substr(c2));
            }
            if (a3) {
                if (a3.length >= 3 && 47 === a3.charCodeAt(0) && 58 === a3.charCodeAt(2))
                    (u2 = a3.charCodeAt(1)) >= 65 && u2 <= 90 && (a3 = "/".concat(String.fromCharCode(u2 + 32), ":").concat(a3.substr(3)));
                else if (a3.length >= 2 && 58 === a3.charCodeAt(1)) {
                    var u2;
                    (u2 = a3.charCodeAt(0)) >= 65 && u2 <= 90 && (a3 = "".concat(String.fromCharCode(u2 + 32), ":").concat(a3.substr(2)));
                }
                n2 += r2(a3, true, false);
            }
            return h2 && (n2 += "?", n2 += r2(h2, false, false)), s2 && (n2 += "#", n2 += e3 ? s2 : m(s2, false, false)), n2;
        }
        function w(t3) {
            try {
                return decodeURIComponent(t3);
            }
            catch (e3) {
                return t3.length > 3 ? t3.substr(0, 3) + w(t3.substr(3)) : t3;
            }
        }
        var x = /(%[0-9A-Za-z][0-9A-Za-z])+/g;
        function _(t3) {
            return t3.match(x) ? t3.replace(x, function (t4) {
                return w(t4);
            }) : t3;
        }
        var O, P = r(470), j = function (t3, e3, r2) {
            if (r2 || 2 === arguments.length)
                for (var n2, o2 = 0, i2 = e3.length; o2 < i2; o2++)
                    !n2 && o2 in e3 || (n2 || (n2 = Array.prototype.slice.call(e3, 0, o2)), n2[o2] = e3[o2]);
            return t3.concat(n2 || Array.prototype.slice.call(e3));
        }, I = P.posix || P, U = "/";
        !function (t3) {
            t3.joinPath = function (t4) {
                for (var e3 = [], r2 = 1; r2 < arguments.length; r2++)
                    e3[r2 - 1] = arguments[r2];
                return t4.with({ path: I.join.apply(I, j([t4.path], e3, false)) });
            }, t3.resolvePath = function (t4) {
                for (var e3 = [], r2 = 1; r2 < arguments.length; r2++)
                    e3[r2 - 1] = arguments[r2];
                var n2 = t4.path, o2 = false;
                n2[0] !== U && (n2 = U + n2, o2 = true);
                var i2 = I.resolve.apply(I, j([n2], e3, false));
                return o2 && i2[0] === U && !t4.authority && (i2 = i2.substring(1)), t4.with({ path: i2 });
            }, t3.dirname = function (t4) {
                if (0 === t4.path.length || t4.path === U)
                    return t4;
                var e3 = I.dirname(t4.path);
                return 1 === e3.length && 46 === e3.charCodeAt(0) && (e3 = ""), t4.with({ path: e3 });
            }, t3.basename = function (t4) {
                return I.basename(t4.path);
            }, t3.extname = function (t4) {
                return I.extname(t4.path);
            };
        }(O || (O = {}));
    })(), LIB = n;
})();
var { URI, Utils } = LIB;
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/utils/strings.js
function startsWith(haystack, needle) {
    if (haystack.length < needle.length) {
        return false;
    }
    for (var i = 0; i < needle.length; i++) {
        if (haystack[i] !== needle[i]) {
            return false;
        }
    }
    return true;
}
function endsWith(haystack, needle) {
    var diff = haystack.length - needle.length;
    if (diff > 0) {
        return haystack.lastIndexOf(needle) === diff;
    }
    else if (diff === 0) {
        return haystack === needle;
    }
    else {
        return false;
    }
}
function extendedRegExp(pattern) {
    if (startsWith(pattern, "(?i)")) {
        return new RegExp(pattern.substring(4), "i");
    }
    else {
        return new RegExp(pattern);
    }
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/parser/jsonParser.js

// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/utils/objects.js
function equals(one, other) {
    if (one === other) {
        return true;
    }
    if (one === null || one === void 0 || other === null || other === void 0) {
        return false;
    }
    if (typeof one !== typeof other) {
        return false;
    }
    if (typeof one !== "object") {
        return false;
    }
    if (Array.isArray(one) !== Array.isArray(other)) {
        return false;
    }
    var i, key;
    if (Array.isArray(one)) {
        if (one.length !== other.length) {
            return false;
        }
        for (i = 0; i < one.length; i++) {
            if (!equals(one[i], other[i])) {
                return false;
            }
        }
    }
    else {
        var oneKeys = [];
        for (key in one) {
            oneKeys.push(key);
        }
        oneKeys.sort();
        var otherKeys = [];
        for (key in other) {
            otherKeys.push(key);
        }
        otherKeys.sort();
        if (!equals(oneKeys, otherKeys)) {
            return false;
        }
        for (i = 0; i < oneKeys.length; i++) {
            if (!equals(one[oneKeys[i]], other[oneKeys[i]])) {
                return false;
            }
        }
    }
    return true;
}
function isNumber(val) {
    return typeof val === "number";
}
function isDefined(val) {
    return typeof val !== "undefined";
}
function isBoolean(val) {
    return typeof val === "boolean";
}
function isString(val) {
    return typeof val === "string";
}
// ../../node_modules/vscode-languageserver-types/lib/esm/main.js
var DocumentUri;
(function (DocumentUri2) {
    function is(value) {
        return typeof value === "string";
    }
    DocumentUri2.is = is;
})(DocumentUri || (DocumentUri = {}));
var URI2;
(function (URI3) {
    function is(value) {
        return typeof value === "string";
    }
    URI3.is = is;
})(URI2 || (URI2 = {}));
var integer;
(function (integer2) {
    integer2.MIN_VALUE = -2147483648;
    integer2.MAX_VALUE = 2147483647;
    function is(value) {
        return typeof value === "number" && integer2.MIN_VALUE <= value && value <= integer2.MAX_VALUE;
    }
    integer2.is = is;
})(integer || (integer = {}));
var uinteger;
(function (uinteger2) {
    uinteger2.MIN_VALUE = 0;
    uinteger2.MAX_VALUE = 2147483647;
    function is(value) {
        return typeof value === "number" && uinteger2.MIN_VALUE <= value && value <= uinteger2.MAX_VALUE;
    }
    uinteger2.is = is;
})(uinteger || (uinteger = {}));
var Position;
(function (Position2) {
    function create(line, character) {
        if (line === Number.MAX_VALUE) {
            line = uinteger.MAX_VALUE;
        }
        if (character === Number.MAX_VALUE) {
            character = uinteger.MAX_VALUE;
        }
        return { line, character };
    }
    Position2.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
    }
    Position2.is = is;
})(Position || (Position = {}));
var Range;
(function (Range2) {
    function create(one, two, three, four) {
        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
            return { start: Position.create(one, two), end: Position.create(three, four) };
        }
        else if (Position.is(one) && Position.is(two)) {
            return { start: one, end: two };
        }
        else {
            throw new Error("Range#create called with invalid arguments[".concat(one, ", ").concat(two, ", ").concat(three, ", ").concat(four, "]"));
        }
    }
    Range2.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
    }
    Range2.is = is;
})(Range || (Range = {}));
var Location;
(function (Location2) {
    function create(uri, range) {
        return { uri, range };
    }
    Location2.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
    }
    Location2.is = is;
})(Location || (Location = {}));
var LocationLink;
(function (LocationLink2) {
    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
        return { targetUri, targetRange, targetSelectionRange, originSelectionRange };
    }
    LocationLink2.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri) && Range.is(candidate.targetSelectionRange) && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
    }
    LocationLink2.is = is;
})(LocationLink || (LocationLink = {}));
var Color;
(function (Color2) {
    function create(red, green, blue, alpha) {
        return {
            red,
            green,
            blue,
            alpha
        };
    }
    Color2.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1) && Is.numberRange(candidate.green, 0, 1) && Is.numberRange(candidate.blue, 0, 1) && Is.numberRange(candidate.alpha, 0, 1);
    }
    Color2.is = is;
})(Color || (Color = {}));
var ColorInformation;
(function (ColorInformation2) {
    function create(range, color) {
        return {
            range,
            color
        };
    }
    ColorInformation2.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);
    }
    ColorInformation2.is = is;
})(ColorInformation || (ColorInformation = {}));
var ColorPresentation;
(function (ColorPresentation2) {
    function create(label, textEdit, additionalTextEdits) {
        return {
            label,
            textEdit,
            additionalTextEdits
        };
    }
    ColorPresentation2.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate)) && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
    }
    ColorPresentation2.is = is;
})(ColorPresentation || (ColorPresentation = {}));
var FoldingRangeKind;
(function (FoldingRangeKind2) {
    FoldingRangeKind2.Comment = "comment";
    FoldingRangeKind2.Imports = "imports";
    FoldingRangeKind2.Region = "region";
})(FoldingRangeKind || (FoldingRangeKind = {}));
var FoldingRange;
(function (FoldingRange2) {
    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {
        var result = {
            startLine,
            endLine
        };
        if (Is.defined(startCharacter)) {
            result.startCharacter = startCharacter;
        }
        if (Is.defined(endCharacter)) {
            result.endCharacter = endCharacter;
        }
        if (Is.defined(kind)) {
            result.kind = kind;
        }
        if (Is.defined(collapsedText)) {
            result.collapsedText = collapsedText;
        }
        return result;
    }
    FoldingRange2.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine) && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter)) && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter)) && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
    }
    FoldingRange2.is = is;
})(FoldingRange || (FoldingRange = {}));
var DiagnosticRelatedInformation;
(function (DiagnosticRelatedInformation2) {
    function create(location, message) {
        return {
            location,
            message
        };
    }
    DiagnosticRelatedInformation2.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
    }
    DiagnosticRelatedInformation2.is = is;
})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));
var DiagnosticSeverity;
(function (DiagnosticSeverity2) {
    DiagnosticSeverity2.Error = 1;
    DiagnosticSeverity2.Warning = 2;
    DiagnosticSeverity2.Information = 3;
    DiagnosticSeverity2.Hint = 4;
})(DiagnosticSeverity || (DiagnosticSeverity = {}));
var DiagnosticTag;
(function (DiagnosticTag2) {
    DiagnosticTag2.Unnecessary = 1;
    DiagnosticTag2.Deprecated = 2;
})(DiagnosticTag || (DiagnosticTag = {}));
var CodeDescription;
(function (CodeDescription2) {
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.href);
    }
    CodeDescription2.is = is;
})(CodeDescription || (CodeDescription = {}));
var Diagnostic;
(function (Diagnostic2) {
    function create(range, message, severity, code, source, relatedInformation) {
        var result = { range, message };
        if (Is.defined(severity)) {
            result.severity = severity;
        }
        if (Is.defined(code)) {
            result.code = code;
        }
        if (Is.defined(source)) {
            result.source = source;
        }
        if (Is.defined(relatedInformation)) {
            result.relatedInformation = relatedInformation;
        }
        return result;
    }
    Diagnostic2.create = create;
    function is(value) {
        var _a;
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && Is.string(candidate.message) && (Is.number(candidate.severity) || Is.undefined(candidate.severity)) && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code)) && (Is.undefined(candidate.codeDescription) || Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)) && (Is.string(candidate.source) || Is.undefined(candidate.source)) && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
    }
    Diagnostic2.is = is;
})(Diagnostic || (Diagnostic = {}));
var Command;
(function (Command2) {
    function create(title, command) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var result = { title, command };
        if (Is.defined(args) && args.length > 0) {
            result.arguments = args;
        }
        return result;
    }
    Command2.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
    }
    Command2.is = is;
})(Command || (Command = {}));
var TextEdit;
(function (TextEdit2) {
    function replace(range, newText) {
        return { range, newText };
    }
    TextEdit2.replace = replace;
    function insert(position, newText) {
        return { range: { start: position, end: position }, newText };
    }
    TextEdit2.insert = insert;
    function del(range) {
        return { range, newText: "" };
    }
    TextEdit2.del = del;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.newText) && Range.is(candidate.range);
    }
    TextEdit2.is = is;
})(TextEdit || (TextEdit = {}));
var ChangeAnnotation;
(function (ChangeAnnotation2) {
    function create(label, needsConfirmation, description) {
        var result = { label };
        if (needsConfirmation !== void 0) {
            result.needsConfirmation = needsConfirmation;
        }
        if (description !== void 0) {
            result.description = description;
        }
        return result;
    }
    ChangeAnnotation2.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === void 0) && (Is.string(candidate.description) || candidate.description === void 0);
    }
    ChangeAnnotation2.is = is;
})(ChangeAnnotation || (ChangeAnnotation = {}));
var ChangeAnnotationIdentifier;
(function (ChangeAnnotationIdentifier2) {
    function is(value) {
        var candidate = value;
        return Is.string(candidate);
    }
    ChangeAnnotationIdentifier2.is = is;
})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));
var AnnotatedTextEdit;
(function (AnnotatedTextEdit2) {
    function replace(range, newText, annotation) {
        return { range, newText, annotationId: annotation };
    }
    AnnotatedTextEdit2.replace = replace;
    function insert(position, newText, annotation) {
        return { range: { start: position, end: position }, newText, annotationId: annotation };
    }
    AnnotatedTextEdit2.insert = insert;
    function del(range, annotation) {
        return { range, newText: "", annotationId: annotation };
    }
    AnnotatedTextEdit2.del = del;
    function is(value) {
        var candidate = value;
        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    AnnotatedTextEdit2.is = is;
})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));
var TextDocumentEdit;
(function (TextDocumentEdit2) {
    function create(textDocument, edits) {
        return { textDocument, edits };
    }
    TextDocumentEdit2.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument) && Array.isArray(candidate.edits);
    }
    TextDocumentEdit2.is = is;
})(TextDocumentEdit || (TextDocumentEdit = {}));
var CreateFile;
(function (CreateFile2) {
    function create(uri, options, annotation) {
        var result = {
            kind: "create",
            uri
        };
        if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
            result.options = options;
        }
        if (annotation !== void 0) {
            result.annotationId = annotation;
        }
        return result;
    }
    CreateFile2.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === "create" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    CreateFile2.is = is;
})(CreateFile || (CreateFile = {}));
var RenameFile;
(function (RenameFile2) {
    function create(oldUri, newUri, options, annotation) {
        var result = {
            kind: "rename",
            oldUri,
            newUri
        };
        if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
            result.options = options;
        }
        if (annotation !== void 0) {
            result.annotationId = annotation;
        }
        return result;
    }
    RenameFile2.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === "rename" && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    RenameFile2.is = is;
})(RenameFile || (RenameFile = {}));
var DeleteFile;
(function (DeleteFile2) {
    function create(uri, options, annotation) {
        var result = {
            kind: "delete",
            uri
        };
        if (options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0)) {
            result.options = options;
        }
        if (annotation !== void 0) {
            result.annotationId = annotation;
        }
        return result;
    }
    DeleteFile2.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === "delete" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.recursive === void 0 || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is.boolean(candidate.options.ignoreIfNotExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    DeleteFile2.is = is;
})(DeleteFile || (DeleteFile = {}));
var WorkspaceEdit;
(function (WorkspaceEdit2) {
    function is(value) {
        var candidate = value;
        return candidate && (candidate.changes !== void 0 || candidate.documentChanges !== void 0) && (candidate.documentChanges === void 0 || candidate.documentChanges.every(function (change) {
            if (Is.string(change.kind)) {
                return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
            }
            else {
                return TextDocumentEdit.is(change);
            }
        }));
    }
    WorkspaceEdit2.is = is;
})(WorkspaceEdit || (WorkspaceEdit = {}));
var TextEditChangeImpl = (
/** @class */
function () {
    function TextEditChangeImpl2(edits, changeAnnotations) {
        this.edits = edits;
        this.changeAnnotations = changeAnnotations;
    }
    TextEditChangeImpl2.prototype.insert = function (position, newText, annotation) {
        var edit;
        var id;
        if (annotation === void 0) {
            edit = TextEdit.insert(position, newText);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.insert(position, newText, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.insert(position, newText, id);
        }
        this.edits.push(edit);
        if (id !== void 0) {
            return id;
        }
    };
    TextEditChangeImpl2.prototype.replace = function (range, newText, annotation) {
        var edit;
        var id;
        if (annotation === void 0) {
            edit = TextEdit.replace(range, newText);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.replace(range, newText, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.replace(range, newText, id);
        }
        this.edits.push(edit);
        if (id !== void 0) {
            return id;
        }
    };
    TextEditChangeImpl2.prototype.delete = function (range, annotation) {
        var edit;
        var id;
        if (annotation === void 0) {
            edit = TextEdit.del(range);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.del(range, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.del(range, id);
        }
        this.edits.push(edit);
        if (id !== void 0) {
            return id;
        }
    };
    TextEditChangeImpl2.prototype.add = function (edit) {
        this.edits.push(edit);
    };
    TextEditChangeImpl2.prototype.all = function () {
        return this.edits;
    };
    TextEditChangeImpl2.prototype.clear = function () {
        this.edits.splice(0, this.edits.length);
    };
    TextEditChangeImpl2.prototype.assertChangeAnnotations = function (value) {
        if (value === void 0) {
            throw new Error("Text edit change is not configured to manage change annotations.");
        }
    };
    return TextEditChangeImpl2;
}());
var ChangeAnnotations = (
/** @class */
function () {
    function ChangeAnnotations2(annotations) {
        this._annotations = annotations === void 0 ? /* @__PURE__ */ Object.create(null) : annotations;
        this._counter = 0;
        this._size = 0;
    }
    ChangeAnnotations2.prototype.all = function () {
        return this._annotations;
    };
    Object.defineProperty(ChangeAnnotations2.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: false,
        configurable: true
    });
    ChangeAnnotations2.prototype.manage = function (idOrAnnotation, annotation) {
        var id;
        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {
            id = idOrAnnotation;
        }
        else {
            id = this.nextId();
            annotation = idOrAnnotation;
        }
        if (this._annotations[id] !== void 0) {
            throw new Error("Id ".concat(id, " is already in use."));
        }
        if (annotation === void 0) {
            throw new Error("No annotation provided for id ".concat(id));
        }
        this._annotations[id] = annotation;
        this._size++;
        return id;
    };
    ChangeAnnotations2.prototype.nextId = function () {
        this._counter++;
        return this._counter.toString();
    };
    return ChangeAnnotations2;
}());
var WorkspaceChange = (
/** @class */
function () {
    function WorkspaceChange2(workspaceEdit) {
        var _this = this;
        this._textEditChanges = /* @__PURE__ */ Object.create(null);
        if (workspaceEdit !== void 0) {
            this._workspaceEdit = workspaceEdit;
            if (workspaceEdit.documentChanges) {
                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);
                workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                workspaceEdit.documentChanges.forEach(function (change) {
                    if (TextDocumentEdit.is(change)) {
                        var textEditChange = new TextEditChangeImpl(change.edits, _this._changeAnnotations);
                        _this._textEditChanges[change.textDocument.uri] = textEditChange;
                    }
                });
            }
            else if (workspaceEdit.changes) {
                Object.keys(workspaceEdit.changes).forEach(function (key) {
                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
                    _this._textEditChanges[key] = textEditChange;
                });
            }
        }
        else {
            this._workspaceEdit = {};
        }
    }
    Object.defineProperty(WorkspaceChange2.prototype, "edit", {
        /**
         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal
         * use to be returned from a workspace edit operation like rename.
         */
        get: function () {
            this.initDocumentChanges();
            if (this._changeAnnotations !== void 0) {
                if (this._changeAnnotations.size === 0) {
                    this._workspaceEdit.changeAnnotations = void 0;
                }
                else {
                    this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                }
            }
            return this._workspaceEdit;
        },
        enumerable: false,
        configurable: true
    });
    WorkspaceChange2.prototype.getTextEditChange = function (key) {
        if (OptionalVersionedTextDocumentIdentifier.is(key)) {
            this.initDocumentChanges();
            if (this._workspaceEdit.documentChanges === void 0) {
                throw new Error("Workspace edit is not configured for document changes.");
            }
            var textDocument = { uri: key.uri, version: key.version };
            var result = this._textEditChanges[textDocument.uri];
            if (!result) {
                var edits = [];
                var textDocumentEdit = {
                    textDocument,
                    edits
                };
                this._workspaceEdit.documentChanges.push(textDocumentEdit);
                result = new TextEditChangeImpl(edits, this._changeAnnotations);
                this._textEditChanges[textDocument.uri] = result;
            }
            return result;
        }
        else {
            this.initChanges();
            if (this._workspaceEdit.changes === void 0) {
                throw new Error("Workspace edit is not configured for normal text edit changes.");
            }
            var result = this._textEditChanges[key];
            if (!result) {
                var edits = [];
                this._workspaceEdit.changes[key] = edits;
                result = new TextEditChangeImpl(edits);
                this._textEditChanges[key] = result;
            }
            return result;
        }
    };
    WorkspaceChange2.prototype.initDocumentChanges = function () {
        if (this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0) {
            this._changeAnnotations = new ChangeAnnotations();
            this._workspaceEdit.documentChanges = [];
            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
        }
    };
    WorkspaceChange2.prototype.initChanges = function () {
        if (this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0) {
            this._workspaceEdit.changes = /* @__PURE__ */ Object.create(null);
        }
    };
    WorkspaceChange2.prototype.createFile = function (uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === void 0) {
            throw new Error("Workspace edit is not configured for document changes.");
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === void 0) {
            operation = CreateFile.create(uri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = CreateFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== void 0) {
            return id;
        }
    };
    WorkspaceChange2.prototype.renameFile = function (oldUri, newUri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === void 0) {
            throw new Error("Workspace edit is not configured for document changes.");
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === void 0) {
            operation = RenameFile.create(oldUri, newUri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = RenameFile.create(oldUri, newUri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== void 0) {
            return id;
        }
    };
    WorkspaceChange2.prototype.deleteFile = function (uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === void 0) {
            throw new Error("Workspace edit is not configured for document changes.");
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === void 0) {
            operation = DeleteFile.create(uri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = DeleteFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== void 0) {
            return id;
        }
    };
    return WorkspaceChange2;
}());
var TextDocumentIdentifier;
(function (TextDocumentIdentifier2) {
    function create(uri) {
        return { uri };
    }
    TextDocumentIdentifier2.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri);
    }
    TextDocumentIdentifier2.is = is;
})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));
var VersionedTextDocumentIdentifier;
(function (VersionedTextDocumentIdentifier2) {
    function create(uri, version) {
        return { uri, version };
    }
    VersionedTextDocumentIdentifier2.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
    }
    VersionedTextDocumentIdentifier2.is = is;
})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));
var OptionalVersionedTextDocumentIdentifier;
(function (OptionalVersionedTextDocumentIdentifier2) {
    function create(uri, version) {
        return { uri, version };
    }
    OptionalVersionedTextDocumentIdentifier2.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
    }
    OptionalVersionedTextDocumentIdentifier2.is = is;
})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));
var TextDocumentItem;
(function (TextDocumentItem2) {
    function create(uri, languageId, version, text) {
        return { uri, languageId, version, text };
    }
    TextDocumentItem2.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
    }
    TextDocumentItem2.is = is;
})(TextDocumentItem || (TextDocumentItem = {}));
var MarkupKind;
(function (MarkupKind2) {
    MarkupKind2.PlainText = "plaintext";
    MarkupKind2.Markdown = "markdown";
    function is(value) {
        var candidate = value;
        return candidate === MarkupKind2.PlainText || candidate === MarkupKind2.Markdown;
    }
    MarkupKind2.is = is;
})(MarkupKind || (MarkupKind = {}));
var MarkupContent;
(function (MarkupContent2) {
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
    }
    MarkupContent2.is = is;
})(MarkupContent || (MarkupContent = {}));
var CompletionItemKind;
(function (CompletionItemKind2) {
    CompletionItemKind2.Text = 1;
    CompletionItemKind2.Method = 2;
    CompletionItemKind2.Function = 3;
    CompletionItemKind2.Constructor = 4;
    CompletionItemKind2.Field = 5;
    CompletionItemKind2.Variable = 6;
    CompletionItemKind2.Class = 7;
    CompletionItemKind2.Interface = 8;
    CompletionItemKind2.Module = 9;
    CompletionItemKind2.Property = 10;
    CompletionItemKind2.Unit = 11;
    CompletionItemKind2.Value = 12;
    CompletionItemKind2.Enum = 13;
    CompletionItemKind2.Keyword = 14;
    CompletionItemKind2.Snippet = 15;
    CompletionItemKind2.Color = 16;
    CompletionItemKind2.File = 17;
    CompletionItemKind2.Reference = 18;
    CompletionItemKind2.Folder = 19;
    CompletionItemKind2.EnumMember = 20;
    CompletionItemKind2.Constant = 21;
    CompletionItemKind2.Struct = 22;
    CompletionItemKind2.Event = 23;
    CompletionItemKind2.Operator = 24;
    CompletionItemKind2.TypeParameter = 25;
})(CompletionItemKind || (CompletionItemKind = {}));
var InsertTextFormat;
(function (InsertTextFormat2) {
    InsertTextFormat2.PlainText = 1;
    InsertTextFormat2.Snippet = 2;
})(InsertTextFormat || (InsertTextFormat = {}));
var CompletionItemTag;
(function (CompletionItemTag2) {
    CompletionItemTag2.Deprecated = 1;
})(CompletionItemTag || (CompletionItemTag = {}));
var InsertReplaceEdit;
(function (InsertReplaceEdit2) {
    function create(newText, insert, replace) {
        return { newText, insert, replace };
    }
    InsertReplaceEdit2.create = create;
    function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);
    }
    InsertReplaceEdit2.is = is;
})(InsertReplaceEdit || (InsertReplaceEdit = {}));
var InsertTextMode;
(function (InsertTextMode2) {
    InsertTextMode2.asIs = 1;
    InsertTextMode2.adjustIndentation = 2;
})(InsertTextMode || (InsertTextMode = {}));
var CompletionItemLabelDetails;
(function (CompletionItemLabelDetails2) {
    function is(value) {
        var candidate = value;
        return candidate && (Is.string(candidate.detail) || candidate.detail === void 0) && (Is.string(candidate.description) || candidate.description === void 0);
    }
    CompletionItemLabelDetails2.is = is;
})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));
var CompletionItem;
(function (CompletionItem2) {
    function create(label) {
        return { label };
    }
    CompletionItem2.create = create;
})(CompletionItem || (CompletionItem = {}));
var CompletionList;
(function (CompletionList2) {
    function create(items, isIncomplete) {
        return { items: items ? items : [], isIncomplete: !!isIncomplete };
    }
    CompletionList2.create = create;
})(CompletionList || (CompletionList = {}));
var MarkedString;
(function (MarkedString2) {
    function fromPlainText(plainText) {
        return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
    }
    MarkedString2.fromPlainText = fromPlainText;
    function is(value) {
        var candidate = value;
        return Is.string(candidate) || Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value);
    }
    MarkedString2.is = is;
})(MarkedString || (MarkedString = {}));
var Hover;
(function (Hover2) {
    function is(value) {
        var candidate = value;
        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) || MarkedString.is(candidate.contents) || Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range.is(value.range));
    }
    Hover2.is = is;
})(Hover || (Hover = {}));
var ParameterInformation;
(function (ParameterInformation2) {
    function create(label, documentation) {
        return documentation ? { label, documentation } : { label };
    }
    ParameterInformation2.create = create;
})(ParameterInformation || (ParameterInformation = {}));
var SignatureInformation;
(function (SignatureInformation2) {
    function create(label, documentation) {
        var parameters = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            parameters[_i - 2] = arguments[_i];
        }
        var result = { label };
        if (Is.defined(documentation)) {
            result.documentation = documentation;
        }
        if (Is.defined(parameters)) {
            result.parameters = parameters;
        }
        else {
            result.parameters = [];
        }
        return result;
    }
    SignatureInformation2.create = create;
})(SignatureInformation || (SignatureInformation = {}));
var DocumentHighlightKind;
(function (DocumentHighlightKind2) {
    DocumentHighlightKind2.Text = 1;
    DocumentHighlightKind2.Read = 2;
    DocumentHighlightKind2.Write = 3;
})(DocumentHighlightKind || (DocumentHighlightKind = {}));
var DocumentHighlight;
(function (DocumentHighlight2) {
    function create(range, kind) {
        var result = { range };
        if (Is.number(kind)) {
            result.kind = kind;
        }
        return result;
    }
    DocumentHighlight2.create = create;
})(DocumentHighlight || (DocumentHighlight = {}));
var SymbolKind;
(function (SymbolKind2) {
    SymbolKind2.File = 1;
    SymbolKind2.Module = 2;
    SymbolKind2.Namespace = 3;
    SymbolKind2.Package = 4;
    SymbolKind2.Class = 5;
    SymbolKind2.Method = 6;
    SymbolKind2.Property = 7;
    SymbolKind2.Field = 8;
    SymbolKind2.Constructor = 9;
    SymbolKind2.Enum = 10;
    SymbolKind2.Interface = 11;
    SymbolKind2.Function = 12;
    SymbolKind2.Variable = 13;
    SymbolKind2.Constant = 14;
    SymbolKind2.String = 15;
    SymbolKind2.Number = 16;
    SymbolKind2.Boolean = 17;
    SymbolKind2.Array = 18;
    SymbolKind2.Object = 19;
    SymbolKind2.Key = 20;
    SymbolKind2.Null = 21;
    SymbolKind2.EnumMember = 22;
    SymbolKind2.Struct = 23;
    SymbolKind2.Event = 24;
    SymbolKind2.Operator = 25;
    SymbolKind2.TypeParameter = 26;
})(SymbolKind || (SymbolKind = {}));
var SymbolTag;
(function (SymbolTag2) {
    SymbolTag2.Deprecated = 1;
})(SymbolTag || (SymbolTag = {}));
var SymbolInformation;
(function (SymbolInformation2) {
    function create(name, kind, range, uri, containerName) {
        var result = {
            name,
            kind,
            location: { uri, range }
        };
        if (containerName) {
            result.containerName = containerName;
        }
        return result;
    }
    SymbolInformation2.create = create;
})(SymbolInformation || (SymbolInformation = {}));
var WorkspaceSymbol;
(function (WorkspaceSymbol2) {
    function create(name, kind, uri, range) {
        return range !== void 0 ? { name, kind, location: { uri, range } } : { name, kind, location: { uri } };
    }
    WorkspaceSymbol2.create = create;
})(WorkspaceSymbol || (WorkspaceSymbol = {}));
var DocumentSymbol;
(function (DocumentSymbol2) {
    function create(name, detail, kind, range, selectionRange, children) {
        var result = {
            name,
            detail,
            kind,
            range,
            selectionRange
        };
        if (children !== void 0) {
            result.children = children;
        }
        return result;
    }
    DocumentSymbol2.create = create;
    function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.name) && Is.number(candidate.kind) && Range.is(candidate.range) && Range.is(candidate.selectionRange) && (candidate.detail === void 0 || Is.string(candidate.detail)) && (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) && (candidate.children === void 0 || Array.isArray(candidate.children)) && (candidate.tags === void 0 || Array.isArray(candidate.tags));
    }
    DocumentSymbol2.is = is;
})(DocumentSymbol || (DocumentSymbol = {}));
var CodeActionKind;
(function (CodeActionKind2) {
    CodeActionKind2.Empty = "";
    CodeActionKind2.QuickFix = "quickfix";
    CodeActionKind2.Refactor = "refactor";
    CodeActionKind2.RefactorExtract = "refactor.extract";
    CodeActionKind2.RefactorInline = "refactor.inline";
    CodeActionKind2.RefactorRewrite = "refactor.rewrite";
    CodeActionKind2.Source = "source";
    CodeActionKind2.SourceOrganizeImports = "source.organizeImports";
    CodeActionKind2.SourceFixAll = "source.fixAll";
})(CodeActionKind || (CodeActionKind = {}));
var CodeActionTriggerKind;
(function (CodeActionTriggerKind2) {
    CodeActionTriggerKind2.Invoked = 1;
    CodeActionTriggerKind2.Automatic = 2;
})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));
var CodeActionContext;
(function (CodeActionContext2) {
    function create(diagnostics, only, triggerKind) {
        var result = { diagnostics };
        if (only !== void 0 && only !== null) {
            result.only = only;
        }
        if (triggerKind !== void 0 && triggerKind !== null) {
            result.triggerKind = triggerKind;
        }
        return result;
    }
    CodeActionContext2.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string)) && (candidate.triggerKind === void 0 || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
    }
    CodeActionContext2.is = is;
})(CodeActionContext || (CodeActionContext = {}));
var CodeAction;
(function (CodeAction2) {
    function create(title, kindOrCommandOrEdit, kind) {
        var result = { title };
        var checkKind = true;
        if (typeof kindOrCommandOrEdit === "string") {
            checkKind = false;
            result.kind = kindOrCommandOrEdit;
        }
        else if (Command.is(kindOrCommandOrEdit)) {
            result.command = kindOrCommandOrEdit;
        }
        else {
            result.edit = kindOrCommandOrEdit;
        }
        if (checkKind && kind !== void 0) {
            result.kind = kind;
        }
        return result;
    }
    CodeAction2.create = create;
    function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.title) && (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) && (candidate.kind === void 0 || Is.string(candidate.kind)) && (candidate.edit !== void 0 || candidate.command !== void 0) && (candidate.command === void 0 || Command.is(candidate.command)) && (candidate.isPreferred === void 0 || Is.boolean(candidate.isPreferred)) && (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));
    }
    CodeAction2.is = is;
})(CodeAction || (CodeAction = {}));
var CodeLens;
(function (CodeLens2) {
    function create(range, data) {
        var result = { range };
        if (Is.defined(data)) {
            result.data = data;
        }
        return result;
    }
    CodeLens2.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
    }
    CodeLens2.is = is;
})(CodeLens || (CodeLens = {}));
var FormattingOptions;
(function (FormattingOptions2) {
    function create(tabSize, insertSpaces) {
        return { tabSize, insertSpaces };
    }
    FormattingOptions2.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
    }
    FormattingOptions2.is = is;
})(FormattingOptions || (FormattingOptions = {}));
var DocumentLink;
(function (DocumentLink2) {
    function create(range, target, data) {
        return { range, target, data };
    }
    DocumentLink2.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
    }
    DocumentLink2.is = is;
})(DocumentLink || (DocumentLink = {}));
var SelectionRange;
(function (SelectionRange2) {
    function create(range, parent) {
        return { range, parent };
    }
    SelectionRange2.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === void 0 || SelectionRange2.is(candidate.parent));
    }
    SelectionRange2.is = is;
})(SelectionRange || (SelectionRange = {}));
var SemanticTokenTypes;
(function (SemanticTokenTypes2) {
    SemanticTokenTypes2["namespace"] = "namespace";
    SemanticTokenTypes2["type"] = "type";
    SemanticTokenTypes2["class"] = "class";
    SemanticTokenTypes2["enum"] = "enum";
    SemanticTokenTypes2["interface"] = "interface";
    SemanticTokenTypes2["struct"] = "struct";
    SemanticTokenTypes2["typeParameter"] = "typeParameter";
    SemanticTokenTypes2["parameter"] = "parameter";
    SemanticTokenTypes2["variable"] = "variable";
    SemanticTokenTypes2["property"] = "property";
    SemanticTokenTypes2["enumMember"] = "enumMember";
    SemanticTokenTypes2["event"] = "event";
    SemanticTokenTypes2["function"] = "function";
    SemanticTokenTypes2["method"] = "method";
    SemanticTokenTypes2["macro"] = "macro";
    SemanticTokenTypes2["keyword"] = "keyword";
    SemanticTokenTypes2["modifier"] = "modifier";
    SemanticTokenTypes2["comment"] = "comment";
    SemanticTokenTypes2["string"] = "string";
    SemanticTokenTypes2["number"] = "number";
    SemanticTokenTypes2["regexp"] = "regexp";
    SemanticTokenTypes2["operator"] = "operator";
    SemanticTokenTypes2["decorator"] = "decorator";
})(SemanticTokenTypes || (SemanticTokenTypes = {}));
var SemanticTokenModifiers;
(function (SemanticTokenModifiers2) {
    SemanticTokenModifiers2["declaration"] = "declaration";
    SemanticTokenModifiers2["definition"] = "definition";
    SemanticTokenModifiers2["readonly"] = "readonly";
    SemanticTokenModifiers2["static"] = "static";
    SemanticTokenModifiers2["deprecated"] = "deprecated";
    SemanticTokenModifiers2["abstract"] = "abstract";
    SemanticTokenModifiers2["async"] = "async";
    SemanticTokenModifiers2["modification"] = "modification";
    SemanticTokenModifiers2["documentation"] = "documentation";
    SemanticTokenModifiers2["defaultLibrary"] = "defaultLibrary";
})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));
var SemanticTokens;
(function (SemanticTokens2) {
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && (candidate.resultId === void 0 || typeof candidate.resultId === "string") && Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === "number");
    }
    SemanticTokens2.is = is;
})(SemanticTokens || (SemanticTokens = {}));
var InlineValueText;
(function (InlineValueText2) {
    function create(range, text) {
        return { range, text };
    }
    InlineValueText2.create = create;
    function is(value) {
        var candidate = value;
        return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);
    }
    InlineValueText2.is = is;
})(InlineValueText || (InlineValueText = {}));
var InlineValueVariableLookup;
(function (InlineValueVariableLookup2) {
    function create(range, variableName, caseSensitiveLookup) {
        return { range, variableName, caseSensitiveLookup };
    }
    InlineValueVariableLookup2.create = create;
    function is(value) {
        var candidate = value;
        return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup) && (Is.string(candidate.variableName) || candidate.variableName === void 0);
    }
    InlineValueVariableLookup2.is = is;
})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));
var InlineValueEvaluatableExpression;
(function (InlineValueEvaluatableExpression2) {
    function create(range, expression) {
        return { range, expression };
    }
    InlineValueEvaluatableExpression2.create = create;
    function is(value) {
        var candidate = value;
        return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && (Is.string(candidate.expression) || candidate.expression === void 0);
    }
    InlineValueEvaluatableExpression2.is = is;
})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));
var InlineValueContext;
(function (InlineValueContext2) {
    function create(frameId, stoppedLocation) {
        return { frameId, stoppedLocation };
    }
    InlineValueContext2.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(value.stoppedLocation);
    }
    InlineValueContext2.is = is;
})(InlineValueContext || (InlineValueContext = {}));
var InlayHintKind;
(function (InlayHintKind2) {
    InlayHintKind2.Type = 1;
    InlayHintKind2.Parameter = 2;
    function is(value) {
        return value === 1 || value === 2;
    }
    InlayHintKind2.is = is;
})(InlayHintKind || (InlayHintKind = {}));
var InlayHintLabelPart;
(function (InlayHintLabelPart2) {
    function create(value) {
        return { value };
    }
    InlayHintLabelPart2.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip)) && (candidate.location === void 0 || Location.is(candidate.location)) && (candidate.command === void 0 || Command.is(candidate.command));
    }
    InlayHintLabelPart2.is = is;
})(InlayHintLabelPart || (InlayHintLabelPart = {}));
var InlayHint;
(function (InlayHint2) {
    function create(position, label, kind) {
        var result = { position, label };
        if (kind !== void 0) {
            result.kind = kind;
        }
        return result;
    }
    InlayHint2.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.position) && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is)) && (candidate.kind === void 0 || InlayHintKind.is(candidate.kind)) && candidate.textEdits === void 0 || Is.typedArray(candidate.textEdits, TextEdit.is) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip)) && (candidate.paddingLeft === void 0 || Is.boolean(candidate.paddingLeft)) && (candidate.paddingRight === void 0 || Is.boolean(candidate.paddingRight));
    }
    InlayHint2.is = is;
})(InlayHint || (InlayHint = {}));
var WorkspaceFolder;
(function (WorkspaceFolder2) {
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && URI2.is(candidate.uri) && Is.string(candidate.name);
    }
    WorkspaceFolder2.is = is;
})(WorkspaceFolder || (WorkspaceFolder = {}));
var TextDocument;
(function (TextDocument4) {
    function create(uri, languageId, version, content) {
        return new FullTextDocument(uri, languageId, version, content);
    }
    TextDocument4.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount) && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
    }
    TextDocument4.is = is;
    function applyEdits(document, edits) {
        var text = document.getText();
        var sortedEdits = mergeSort(edits, function (a2, b) {
            var diff = a2.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a2.range.start.character - b.range.start.character;
            }
            return diff;
        });
        var lastModifiedOffset = text.length;
        for (var i = sortedEdits.length - 1; i >= 0; i--) {
            var e = sortedEdits[i];
            var startOffset = document.offsetAt(e.range.start);
            var endOffset = document.offsetAt(e.range.end);
            if (endOffset <= lastModifiedOffset) {
                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
            }
            else {
                throw new Error("Overlapping edit");
            }
            lastModifiedOffset = startOffset;
        }
        return text;
    }
    TextDocument4.applyEdits = applyEdits;
    function mergeSort(data, compare) {
        if (data.length <= 1) {
            return data;
        }
        var p = data.length / 2 | 0;
        var left = data.slice(0, p);
        var right = data.slice(p);
        mergeSort(left, compare);
        mergeSort(right, compare);
        var leftIdx = 0;
        var rightIdx = 0;
        var i = 0;
        while (leftIdx < left.length && rightIdx < right.length) {
            var ret = compare(left[leftIdx], right[rightIdx]);
            if (ret <= 0) {
                data[i++] = left[leftIdx++];
            }
            else {
                data[i++] = right[rightIdx++];
            }
        }
        while (leftIdx < left.length) {
            data[i++] = left[leftIdx++];
        }
        while (rightIdx < right.length) {
            data[i++] = right[rightIdx++];
        }
        return data;
    }
})(TextDocument || (TextDocument = {}));
var FullTextDocument = (
/** @class */
function () {
    function FullTextDocument2(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = void 0;
    }
    Object.defineProperty(FullTextDocument2.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument2.prototype, "languageId", {
        get: function () {
            return this._languageId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument2.prototype, "version", {
        get: function () {
            return this._version;
        },
        enumerable: false,
        configurable: true
    });
    FullTextDocument2.prototype.getText = function (range) {
        if (range) {
            var start = this.offsetAt(range.start);
            var end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    };
    FullTextDocument2.prototype.update = function (event, version) {
        this._content = event.text;
        this._version = version;
        this._lineOffsets = void 0;
    };
    FullTextDocument2.prototype.getLineOffsets = function () {
        if (this._lineOffsets === void 0) {
            var lineOffsets = [];
            var text = this._content;
            var isLineStart = true;
            for (var i = 0; i < text.length; i++) {
                if (isLineStart) {
                    lineOffsets.push(i);
                    isLineStart = false;
                }
                var ch = text.charAt(i);
                isLineStart = ch === "\r" || ch === "\n";
                if (ch === "\r" && i + 1 < text.length && text.charAt(i + 1) === "\n") {
                    i++;
                }
            }
            if (isLineStart && text.length > 0) {
                lineOffsets.push(text.length);
            }
            this._lineOffsets = lineOffsets;
        }
        return this._lineOffsets;
    };
    FullTextDocument2.prototype.positionAt = function (offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        var lineOffsets = this.getLineOffsets();
        var low = 0, high = lineOffsets.length;
        if (high === 0) {
            return Position.create(0, offset);
        }
        while (low < high) {
            var mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }
        var line = low - 1;
        return Position.create(line, offset - lineOffsets[line]);
    };
    FullTextDocument2.prototype.offsetAt = function (position) {
        var lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        }
        else if (position.line < 0) {
            return 0;
        }
        var lineOffset = lineOffsets[position.line];
        var nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    };
    Object.defineProperty(FullTextDocument2.prototype, "lineCount", {
        get: function () {
            return this.getLineOffsets().length;
        },
        enumerable: false,
        configurable: true
    });
    return FullTextDocument2;
}());
var Is;
(function (Is2) {
    var toString = Object.prototype.toString;
    function defined(value) {
        return typeof value !== "undefined";
    }
    Is2.defined = defined;
    function undefined2(value) {
        return typeof value === "undefined";
    }
    Is2.undefined = undefined2;
    function boolean(value) {
        return value === true || value === false;
    }
    Is2.boolean = boolean;
    function string2(value) {
        return toString.call(value) === "[object String]";
    }
    Is2.string = string2;
    function number(value) {
        return toString.call(value) === "[object Number]";
    }
    Is2.number = number;
    function numberRange(value, min, max) {
        return toString.call(value) === "[object Number]" && min <= value && value <= max;
    }
    Is2.numberRange = numberRange;
    function integer2(value) {
        return toString.call(value) === "[object Number]" && -2147483648 <= value && value <= 2147483647;
    }
    Is2.integer = integer2;
    function uinteger2(value) {
        return toString.call(value) === "[object Number]" && 0 <= value && value <= 2147483647;
    }
    Is2.uinteger = uinteger2;
    function func(value) {
        return toString.call(value) === "[object Function]";
    }
    Is2.func = func;
    function objectLiteral(value) {
        return value !== null && typeof value === "object";
    }
    Is2.objectLiteral = objectLiteral;
    function typedArray(value, check) {
        return Array.isArray(value) && value.every(check);
    }
    Is2.typedArray = typedArray;
})(Is || (Is = {}));
var ErrorCode;
(function (ErrorCode2) {
    ErrorCode2[ErrorCode2["Undefined"] = 0] = "Undefined";
    ErrorCode2[ErrorCode2["EnumValueMismatch"] = 1] = "EnumValueMismatch";
    ErrorCode2[ErrorCode2["Deprecated"] = 2] = "Deprecated";
    ErrorCode2[ErrorCode2["UnexpectedEndOfComment"] = 257] = "UnexpectedEndOfComment";
    ErrorCode2[ErrorCode2["UnexpectedEndOfString"] = 258] = "UnexpectedEndOfString";
    ErrorCode2[ErrorCode2["UnexpectedEndOfNumber"] = 259] = "UnexpectedEndOfNumber";
    ErrorCode2[ErrorCode2["InvalidUnicode"] = 260] = "InvalidUnicode";
    ErrorCode2[ErrorCode2["InvalidEscapeCharacter"] = 261] = "InvalidEscapeCharacter";
    ErrorCode2[ErrorCode2["InvalidCharacter"] = 262] = "InvalidCharacter";
    ErrorCode2[ErrorCode2["PropertyExpected"] = 513] = "PropertyExpected";
    ErrorCode2[ErrorCode2["CommaExpected"] = 514] = "CommaExpected";
    ErrorCode2[ErrorCode2["ColonExpected"] = 515] = "ColonExpected";
    ErrorCode2[ErrorCode2["ValueExpected"] = 516] = "ValueExpected";
    ErrorCode2[ErrorCode2["CommaOrCloseBacketExpected"] = 517] = "CommaOrCloseBacketExpected";
    ErrorCode2[ErrorCode2["CommaOrCloseBraceExpected"] = 518] = "CommaOrCloseBraceExpected";
    ErrorCode2[ErrorCode2["TrailingComma"] = 519] = "TrailingComma";
    ErrorCode2[ErrorCode2["DuplicateKey"] = 520] = "DuplicateKey";
    ErrorCode2[ErrorCode2["CommentNotPermitted"] = 521] = "CommentNotPermitted";
    ErrorCode2[ErrorCode2["SchemaResolveError"] = 768] = "SchemaResolveError";
})(ErrorCode || (ErrorCode = {}));
var ClientCapabilities;
(function (ClientCapabilities2) {
    ClientCapabilities2.LATEST = {
        textDocument: {
            completion: {
                completionItem: {
                    documentationFormat: [MarkupKind.Markdown, MarkupKind.PlainText],
                    commitCharactersSupport: true
                }
            }
        }
    };
})(ClientCapabilities || (ClientCapabilities = {}));
// src/fillers/vscode-nls.ts
function format(message, args) {
    return args.length === 0 ? message : message.replace(/{(\d+)}/g, (match, rest) => {
        const [index] = rest;
        return typeof args[index] === "undefined" ? match : args[index];
    });
}
function localize(key, message, ...args) {
    return format(message, args);
}
function loadMessageBundle() {
    return localize;
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/parser/jsonParser.js
var __extends = function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d2, b2) {
            d2.__proto__ = b2;
        } || function (d2, b2) {
            for (var p in b2)
                if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
        };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var localize2 = loadMessageBundle();
var formats = {
    "color-hex": { errorMessage: localize2("colorHexFormatWarning", "Invalid color format. Use #RGB, #RGBA, #RRGGBB or #RRGGBBAA."), pattern: /^#([0-9A-Fa-f]{3,4}|([0-9A-Fa-f]{2}){3,4})$/ },
    "date-time": { errorMessage: localize2("dateTimeFormatWarning", "String is not a RFC3339 date-time."), pattern: /^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i },
    "date": { errorMessage: localize2("dateFormatWarning", "String is not a RFC3339 date."), pattern: /^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/i },
    "time": { errorMessage: localize2("timeFormatWarning", "String is not a RFC3339 time."), pattern: /^([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i },
    "email": { errorMessage: localize2("emailFormatWarning", "String is not an e-mail address."), pattern: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/ }
};
var ASTNodeImpl = (
/** @class */
function () {
    function ASTNodeImpl3(parent, offset, length) {
        if (length === void 0) {
            length = 0;
        }
        this.offset = offset;
        this.length = length;
        this.parent = parent;
    }
    Object.defineProperty(ASTNodeImpl3.prototype, "children", {
        get: function () {
            return [];
        },
        enumerable: false,
        configurable: true
    });
    ASTNodeImpl3.prototype.toString = function () {
        return "type: " + this.type + " (" + this.offset + "/" + this.length + ")" + (this.parent ? " parent: {" + this.parent.toString() + "}" : "");
    };
    return ASTNodeImpl3;
}());
var NullASTNodeImpl = (
/** @class */
function (_super) {
    __extends(NullASTNodeImpl3, _super);
    function NullASTNodeImpl3(parent, offset) {
        var _this = _super.call(this, parent, offset) || this;
        _this.type = "null";
        _this.value = null;
        return _this;
    }
    return NullASTNodeImpl3;
}(ASTNodeImpl));
var BooleanASTNodeImpl = (
/** @class */
function (_super) {
    __extends(BooleanASTNodeImpl3, _super);
    function BooleanASTNodeImpl3(parent, boolValue, offset) {
        var _this = _super.call(this, parent, offset) || this;
        _this.type = "boolean";
        _this.value = boolValue;
        return _this;
    }
    return BooleanASTNodeImpl3;
}(ASTNodeImpl));
var ArrayASTNodeImpl = (
/** @class */
function (_super) {
    __extends(ArrayASTNodeImpl3, _super);
    function ArrayASTNodeImpl3(parent, offset) {
        var _this = _super.call(this, parent, offset) || this;
        _this.type = "array";
        _this.items = [];
        return _this;
    }
    Object.defineProperty(ArrayASTNodeImpl3.prototype, "children", {
        get: function () {
            return this.items;
        },
        enumerable: false,
        configurable: true
    });
    return ArrayASTNodeImpl3;
}(ASTNodeImpl));
var NumberASTNodeImpl = (
/** @class */
function (_super) {
    __extends(NumberASTNodeImpl3, _super);
    function NumberASTNodeImpl3(parent, offset) {
        var _this = _super.call(this, parent, offset) || this;
        _this.type = "number";
        _this.isInteger = true;
        _this.value = Number.NaN;
        return _this;
    }
    return NumberASTNodeImpl3;
}(ASTNodeImpl));
var StringASTNodeImpl = (
/** @class */
function (_super) {
    __extends(StringASTNodeImpl3, _super);
    function StringASTNodeImpl3(parent, offset, length) {
        var _this = _super.call(this, parent, offset, length) || this;
        _this.type = "string";
        _this.value = "";
        return _this;
    }
    return StringASTNodeImpl3;
}(ASTNodeImpl));
var PropertyASTNodeImpl = (
/** @class */
function (_super) {
    __extends(PropertyASTNodeImpl3, _super);
    function PropertyASTNodeImpl3(parent, offset, keyNode) {
        var _this = _super.call(this, parent, offset) || this;
        _this.type = "property";
        _this.colonOffset = -1;
        _this.keyNode = keyNode;
        return _this;
    }
    Object.defineProperty(PropertyASTNodeImpl3.prototype, "children", {
        get: function () {
            return this.valueNode ? [this.keyNode, this.valueNode] : [this.keyNode];
        },
        enumerable: false,
        configurable: true
    });
    return PropertyASTNodeImpl3;
}(ASTNodeImpl));
var ObjectASTNodeImpl = (
/** @class */
function (_super) {
    __extends(ObjectASTNodeImpl3, _super);
    function ObjectASTNodeImpl3(parent, offset) {
        var _this = _super.call(this, parent, offset) || this;
        _this.type = "object";
        _this.properties = [];
        return _this;
    }
    Object.defineProperty(ObjectASTNodeImpl3.prototype, "children", {
        get: function () {
            return this.properties;
        },
        enumerable: false,
        configurable: true
    });
    return ObjectASTNodeImpl3;
}(ASTNodeImpl));
function asSchema(schema4) {
    if (isBoolean(schema4)) {
        return schema4 ? {} : { "not": {} };
    }
    return schema4;
}
var EnumMatch;
(function (EnumMatch3) {
    EnumMatch3[EnumMatch3["Key"] = 0] = "Key";
    EnumMatch3[EnumMatch3["Enum"] = 1] = "Enum";
})(EnumMatch || (EnumMatch = {}));
var SchemaCollector = (
/** @class */
function () {
    function SchemaCollector3(focusOffset, exclude) {
        if (focusOffset === void 0) {
            focusOffset = -1;
        }
        this.focusOffset = focusOffset;
        this.exclude = exclude;
        this.schemas = [];
    }
    SchemaCollector3.prototype.add = function (schema4) {
        this.schemas.push(schema4);
    };
    SchemaCollector3.prototype.merge = function (other) {
        Array.prototype.push.apply(this.schemas, other.schemas);
    };
    SchemaCollector3.prototype.include = function (node) {
        return (this.focusOffset === -1 || contains(node, this.focusOffset)) && node !== this.exclude;
    };
    SchemaCollector3.prototype.newSub = function () {
        return new SchemaCollector3(-1, this.exclude);
    };
    return SchemaCollector3;
}());
var NoOpSchemaCollector = (
/** @class */
function () {
    function NoOpSchemaCollector3() {
    }
    Object.defineProperty(NoOpSchemaCollector3.prototype, "schemas", {
        get: function () {
            return [];
        },
        enumerable: false,
        configurable: true
    });
    NoOpSchemaCollector3.prototype.add = function (schema4) {
    };
    NoOpSchemaCollector3.prototype.merge = function (other) {
    };
    NoOpSchemaCollector3.prototype.include = function (node) {
        return true;
    };
    NoOpSchemaCollector3.prototype.newSub = function () {
        return this;
    };
    NoOpSchemaCollector3.instance = new NoOpSchemaCollector3();
    return NoOpSchemaCollector3;
}());
var ValidationResult = (
/** @class */
function () {
    function ValidationResult3() {
        this.problems = [];
        this.propertiesMatches = 0;
        this.propertiesValueMatches = 0;
        this.primaryValueMatches = 0;
        this.enumValueMatch = false;
        this.enumValues = void 0;
    }
    ValidationResult3.prototype.hasProblems = function () {
        return !!this.problems.length;
    };
    ValidationResult3.prototype.mergeAll = function (validationResults) {
        for (var _i = 0, validationResults_1 = validationResults; _i < validationResults_1.length; _i++) {
            var validationResult = validationResults_1[_i];
            this.merge(validationResult);
        }
    };
    ValidationResult3.prototype.merge = function (validationResult) {
        this.problems = this.problems.concat(validationResult.problems);
    };
    ValidationResult3.prototype.mergeEnumValues = function (validationResult) {
        if (!this.enumValueMatch && !validationResult.enumValueMatch && this.enumValues && validationResult.enumValues) {
            this.enumValues = this.enumValues.concat(validationResult.enumValues);
            for (var _i = 0, _a = this.problems; _i < _a.length; _i++) {
                var error = _a[_i];
                if (error.code === ErrorCode.EnumValueMismatch) {
                    error.message = localize2("enumWarning", "Value is not accepted. Valid values: {0}.", this.enumValues.map(function (v) {
                        return JSON.stringify(v);
                    }).join(", "));
                }
            }
        }
    };
    ValidationResult3.prototype.mergePropertyMatch = function (propertyValidationResult) {
        this.merge(propertyValidationResult);
        this.propertiesMatches++;
        if (propertyValidationResult.enumValueMatch || !propertyValidationResult.hasProblems() && propertyValidationResult.propertiesMatches) {
            this.propertiesValueMatches++;
        }
        if (propertyValidationResult.enumValueMatch && propertyValidationResult.enumValues && propertyValidationResult.enumValues.length === 1) {
            this.primaryValueMatches++;
        }
    };
    ValidationResult3.prototype.compare = function (other) {
        var hasProblems = this.hasProblems();
        if (hasProblems !== other.hasProblems()) {
            return hasProblems ? -1 : 1;
        }
        if (this.enumValueMatch !== other.enumValueMatch) {
            return other.enumValueMatch ? -1 : 1;
        }
        if (this.primaryValueMatches !== other.primaryValueMatches) {
            return this.primaryValueMatches - other.primaryValueMatches;
        }
        if (this.propertiesValueMatches !== other.propertiesValueMatches) {
            return this.propertiesValueMatches - other.propertiesValueMatches;
        }
        return this.propertiesMatches - other.propertiesMatches;
    };
    return ValidationResult3;
}());
function getNodeValue2(node) {
    return main/* getNodeValue */.zA(node);
}
function getNodePath2(node) {
    return main/* getNodePath */.F6(node);
}
function contains(node, offset, includeRightBound) {
    if (includeRightBound === void 0) {
        includeRightBound = false;
    }
    return offset >= node.offset && offset < node.offset + node.length || includeRightBound && offset === node.offset + node.length;
}
var JSONDocument = (
/** @class */
function () {
    function JSONDocument3(root, syntaxErrors, comments) {
        if (syntaxErrors === void 0) {
            syntaxErrors = [];
        }
        if (comments === void 0) {
            comments = [];
        }
        this.root = root;
        this.syntaxErrors = syntaxErrors;
        this.comments = comments;
    }
    JSONDocument3.prototype.getNodeFromOffset = function (offset, includeRightBound) {
        if (includeRightBound === void 0) {
            includeRightBound = false;
        }
        if (this.root) {
            return main/* findNodeAtOffset */.Hk(this.root, offset, includeRightBound);
        }
        return void 0;
    };
    JSONDocument3.prototype.visit = function (visitor) {
        if (this.root) {
            var doVisit_1 = function (node) {
                var ctn = visitor(node);
                var children = node.children;
                if (Array.isArray(children)) {
                    for (var i = 0; i < children.length && ctn; i++) {
                        ctn = doVisit_1(children[i]);
                    }
                }
                return ctn;
            };
            doVisit_1(this.root);
        }
    };
    JSONDocument3.prototype.validate = function (textDocument, schema4, severity) {
        if (severity === void 0) {
            severity = DiagnosticSeverity.Warning;
        }
        if (this.root && schema4) {
            var validationResult = new ValidationResult();
            validate(this.root, schema4, validationResult, NoOpSchemaCollector.instance);
            return validationResult.problems.map(function (p) {
                var _a;
                var range = Range.create(textDocument.positionAt(p.location.offset), textDocument.positionAt(p.location.offset + p.location.length));
                return Diagnostic.create(range, p.message, (_a = p.severity) !== null && _a !== void 0 ? _a : severity, p.code);
            });
        }
        return void 0;
    };
    JSONDocument3.prototype.getMatchingSchemas = function (schema4, focusOffset, exclude) {
        if (focusOffset === void 0) {
            focusOffset = -1;
        }
        var matchingSchemas = new SchemaCollector(focusOffset, exclude);
        if (this.root && schema4) {
            validate(this.root, schema4, new ValidationResult(), matchingSchemas);
        }
        return matchingSchemas.schemas;
    };
    return JSONDocument3;
}());
function validate(n, schema4, validationResult, matchingSchemas) {
    if (!n || !matchingSchemas.include(n)) {
        return;
    }
    var node = n;
    switch (node.type) {
        case "object":
            _validateObjectNode(node, schema4, validationResult, matchingSchemas);
            break;
        case "array":
            _validateArrayNode(node, schema4, validationResult, matchingSchemas);
            break;
        case "string":
            _validateStringNode(node, schema4, validationResult, matchingSchemas);
            break;
        case "number":
            _validateNumberNode(node, schema4, validationResult, matchingSchemas);
            break;
        case "property":
            return validate(node.valueNode, schema4, validationResult, matchingSchemas);
    }
    _validateNode();
    matchingSchemas.add({ node, schema: schema4 });
    function _validateNode() {
        function matchesType(type) {
            return node.type === type || type === "integer" && node.type === "number" && node.isInteger;
        }
        if (Array.isArray(schema4.type)) {
            if (!schema4.type.some(matchesType)) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    message: schema4.errorMessage || localize2("typeArrayMismatchWarning", "Incorrect type. Expected one of {0}.", schema4.type.join(", "))
                });
            }
        }
        else if (schema4.type) {
            if (!matchesType(schema4.type)) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    message: schema4.errorMessage || localize2("typeMismatchWarning", 'Incorrect type. Expected "{0}".', schema4.type)
                });
            }
        }
        if (Array.isArray(schema4.allOf)) {
            for (var _i = 0, _a = schema4.allOf; _i < _a.length; _i++) {
                var subSchemaRef = _a[_i];
                validate(node, asSchema(subSchemaRef), validationResult, matchingSchemas);
            }
        }
        var notSchema = asSchema(schema4.not);
        if (notSchema) {
            var subValidationResult = new ValidationResult();
            var subMatchingSchemas = matchingSchemas.newSub();
            validate(node, notSchema, subValidationResult, subMatchingSchemas);
            if (!subValidationResult.hasProblems()) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    message: localize2("notSchemaWarning", "Matches a schema that is not allowed.")
                });
            }
            for (var _b = 0, _c = subMatchingSchemas.schemas; _b < _c.length; _b++) {
                var ms = _c[_b];
                ms.inverted = !ms.inverted;
                matchingSchemas.add(ms);
            }
        }
        var testAlternatives = function (alternatives, maxOneMatch) {
            var matches = [];
            var bestMatch = void 0;
            for (var _i2 = 0, alternatives_1 = alternatives; _i2 < alternatives_1.length; _i2++) {
                var subSchemaRef2 = alternatives_1[_i2];
                var subSchema = asSchema(subSchemaRef2);
                var subValidationResult2 = new ValidationResult();
                var subMatchingSchemas2 = matchingSchemas.newSub();
                validate(node, subSchema, subValidationResult2, subMatchingSchemas2);
                if (!subValidationResult2.hasProblems()) {
                    matches.push(subSchema);
                }
                if (!bestMatch) {
                    bestMatch = { schema: subSchema, validationResult: subValidationResult2, matchingSchemas: subMatchingSchemas2 };
                }
                else {
                    if (!maxOneMatch && !subValidationResult2.hasProblems() && !bestMatch.validationResult.hasProblems()) {
                        bestMatch.matchingSchemas.merge(subMatchingSchemas2);
                        bestMatch.validationResult.propertiesMatches += subValidationResult2.propertiesMatches;
                        bestMatch.validationResult.propertiesValueMatches += subValidationResult2.propertiesValueMatches;
                    }
                    else {
                        var compareResult = subValidationResult2.compare(bestMatch.validationResult);
                        if (compareResult > 0) {
                            bestMatch = { schema: subSchema, validationResult: subValidationResult2, matchingSchemas: subMatchingSchemas2 };
                        }
                        else if (compareResult === 0) {
                            bestMatch.matchingSchemas.merge(subMatchingSchemas2);
                            bestMatch.validationResult.mergeEnumValues(subValidationResult2);
                        }
                    }
                }
            }
            if (matches.length > 1 && maxOneMatch) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: 1 },
                    message: localize2("oneOfWarning", "Matches multiple schemas when only one must validate.")
                });
            }
            if (bestMatch) {
                validationResult.merge(bestMatch.validationResult);
                validationResult.propertiesMatches += bestMatch.validationResult.propertiesMatches;
                validationResult.propertiesValueMatches += bestMatch.validationResult.propertiesValueMatches;
                matchingSchemas.merge(bestMatch.matchingSchemas);
            }
            return matches.length;
        };
        if (Array.isArray(schema4.anyOf)) {
            testAlternatives(schema4.anyOf, false);
        }
        if (Array.isArray(schema4.oneOf)) {
            testAlternatives(schema4.oneOf, true);
        }
        var testBranch = function (schema5) {
            var subValidationResult2 = new ValidationResult();
            var subMatchingSchemas2 = matchingSchemas.newSub();
            validate(node, asSchema(schema5), subValidationResult2, subMatchingSchemas2);
            validationResult.merge(subValidationResult2);
            validationResult.propertiesMatches += subValidationResult2.propertiesMatches;
            validationResult.propertiesValueMatches += subValidationResult2.propertiesValueMatches;
            matchingSchemas.merge(subMatchingSchemas2);
        };
        var testCondition = function (ifSchema2, thenSchema, elseSchema) {
            var subSchema = asSchema(ifSchema2);
            var subValidationResult2 = new ValidationResult();
            var subMatchingSchemas2 = matchingSchemas.newSub();
            validate(node, subSchema, subValidationResult2, subMatchingSchemas2);
            matchingSchemas.merge(subMatchingSchemas2);
            if (!subValidationResult2.hasProblems()) {
                if (thenSchema) {
                    testBranch(thenSchema);
                }
            }
            else if (elseSchema) {
                testBranch(elseSchema);
            }
        };
        var ifSchema = asSchema(schema4.if);
        if (ifSchema) {
            testCondition(ifSchema, asSchema(schema4.then), asSchema(schema4.else));
        }
        if (Array.isArray(schema4.enum)) {
            var val = getNodeValue2(node);
            var enumValueMatch = false;
            for (var _d = 0, _e = schema4.enum; _d < _e.length; _d++) {
                var e = _e[_d];
                if (equals(val, e)) {
                    enumValueMatch = true;
                    break;
                }
            }
            validationResult.enumValues = schema4.enum;
            validationResult.enumValueMatch = enumValueMatch;
            if (!enumValueMatch) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    code: ErrorCode.EnumValueMismatch,
                    message: schema4.errorMessage || localize2("enumWarning", "Value is not accepted. Valid values: {0}.", schema4.enum.map(function (v) {
                        return JSON.stringify(v);
                    }).join(", "))
                });
            }
        }
        if (isDefined(schema4.const)) {
            var val = getNodeValue2(node);
            if (!equals(val, schema4.const)) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    code: ErrorCode.EnumValueMismatch,
                    message: schema4.errorMessage || localize2("constWarning", "Value must be {0}.", JSON.stringify(schema4.const))
                });
                validationResult.enumValueMatch = false;
            }
            else {
                validationResult.enumValueMatch = true;
            }
            validationResult.enumValues = [schema4.const];
        }
        if (schema4.deprecationMessage && node.parent) {
            validationResult.problems.push({
                location: { offset: node.parent.offset, length: node.parent.length },
                severity: DiagnosticSeverity.Warning,
                message: schema4.deprecationMessage,
                code: ErrorCode.Deprecated
            });
        }
    }
    function _validateNumberNode(node2, schema5, validationResult2, matchingSchemas2) {
        var val = node2.value;
        function normalizeFloats(float3) {
            var _a;
            var parts = /^(-?\d+)(?:\.(\d+))?(?:e([-+]\d+))?$/.exec(float3.toString());
            return parts && {
                value: Number(parts[1] + (parts[2] || "")),
                multiplier: (((_a = parts[2]) === null || _a === void 0 ? void 0 : _a.length) || 0) - (parseInt(parts[3]) || 0)
            };
        }
        ;
        if (isNumber(schema5.multipleOf)) {
            var remainder = -1;
            if (Number.isInteger(schema5.multipleOf)) {
                remainder = val % schema5.multipleOf;
            }
            else {
                var normMultipleOf = normalizeFloats(schema5.multipleOf);
                var normValue = normalizeFloats(val);
                if (normMultipleOf && normValue) {
                    var multiplier = Math.pow(10, Math.abs(normValue.multiplier - normMultipleOf.multiplier));
                    if (normValue.multiplier < normMultipleOf.multiplier) {
                        normValue.value *= multiplier;
                    }
                    else {
                        normMultipleOf.value *= multiplier;
                    }
                    remainder = normValue.value % normMultipleOf.value;
                }
            }
            if (remainder !== 0) {
                validationResult2.problems.push({
                    location: { offset: node2.offset, length: node2.length },
                    message: localize2("multipleOfWarning", "Value is not divisible by {0}.", schema5.multipleOf)
                });
            }
        }
        function getExclusiveLimit(limit, exclusive) {
            if (isNumber(exclusive)) {
                return exclusive;
            }
            if (isBoolean(exclusive) && exclusive) {
                return limit;
            }
            return void 0;
        }
        function getLimit(limit, exclusive) {
            if (!isBoolean(exclusive) || !exclusive) {
                return limit;
            }
            return void 0;
        }
        var exclusiveMinimum = getExclusiveLimit(schema5.minimum, schema5.exclusiveMinimum);
        if (isNumber(exclusiveMinimum) && val <= exclusiveMinimum) {
            validationResult2.problems.push({
                location: { offset: node2.offset, length: node2.length },
                message: localize2("exclusiveMinimumWarning", "Value is below the exclusive minimum of {0}.", exclusiveMinimum)
            });
        }
        var exclusiveMaximum = getExclusiveLimit(schema5.maximum, schema5.exclusiveMaximum);
        if (isNumber(exclusiveMaximum) && val >= exclusiveMaximum) {
            validationResult2.problems.push({
                location: { offset: node2.offset, length: node2.length },
                message: localize2("exclusiveMaximumWarning", "Value is above the exclusive maximum of {0}.", exclusiveMaximum)
            });
        }
        var minimum = getLimit(schema5.minimum, schema5.exclusiveMinimum);
        if (isNumber(minimum) && val < minimum) {
            validationResult2.problems.push({
                location: { offset: node2.offset, length: node2.length },
                message: localize2("minimumWarning", "Value is below the minimum of {0}.", minimum)
            });
        }
        var maximum = getLimit(schema5.maximum, schema5.exclusiveMaximum);
        if (isNumber(maximum) && val > maximum) {
            validationResult2.problems.push({
                location: { offset: node2.offset, length: node2.length },
                message: localize2("maximumWarning", "Value is above the maximum of {0}.", maximum)
            });
        }
    }
    function _validateStringNode(node2, schema5, validationResult2, matchingSchemas2) {
        if (isNumber(schema5.minLength) && node2.value.length < schema5.minLength) {
            validationResult2.problems.push({
                location: { offset: node2.offset, length: node2.length },
                message: localize2("minLengthWarning", "String is shorter than the minimum length of {0}.", schema5.minLength)
            });
        }
        if (isNumber(schema5.maxLength) && node2.value.length > schema5.maxLength) {
            validationResult2.problems.push({
                location: { offset: node2.offset, length: node2.length },
                message: localize2("maxLengthWarning", "String is longer than the maximum length of {0}.", schema5.maxLength)
            });
        }
        if (isString(schema5.pattern)) {
            var regex = extendedRegExp(schema5.pattern);
            if (!regex.test(node2.value)) {
                validationResult2.problems.push({
                    location: { offset: node2.offset, length: node2.length },
                    message: schema5.patternErrorMessage || schema5.errorMessage || localize2("patternWarning", 'String does not match the pattern of "{0}".', schema5.pattern)
                });
            }
        }
        if (schema5.format) {
            switch (schema5.format) {
                case "uri":
                case "uri-reference":
                    {
                        var errorMessage = void 0;
                        if (!node2.value) {
                            errorMessage = localize2("uriEmpty", "URI expected.");
                        }
                        else {
                            var match = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/.exec(node2.value);
                            if (!match) {
                                errorMessage = localize2("uriMissing", "URI is expected.");
                            }
                            else if (!match[2] && schema5.format === "uri") {
                                errorMessage = localize2("uriSchemeMissing", "URI with a scheme is expected.");
                            }
                        }
                        if (errorMessage) {
                            validationResult2.problems.push({
                                location: { offset: node2.offset, length: node2.length },
                                message: schema5.patternErrorMessage || schema5.errorMessage || localize2("uriFormatWarning", "String is not a URI: {0}", errorMessage)
                            });
                        }
                    }
                    break;
                case "color-hex":
                case "date-time":
                case "date":
                case "time":
                case "email":
                    var format3 = formats[schema5.format];
                    if (!node2.value || !format3.pattern.exec(node2.value)) {
                        validationResult2.problems.push({
                            location: { offset: node2.offset, length: node2.length },
                            message: schema5.patternErrorMessage || schema5.errorMessage || format3.errorMessage
                        });
                    }
                default:
            }
        }
    }
    function _validateArrayNode(node2, schema5, validationResult2, matchingSchemas2) {
        if (Array.isArray(schema5.items)) {
            var subSchemas = schema5.items;
            for (var index = 0; index < subSchemas.length; index++) {
                var subSchemaRef = subSchemas[index];
                var subSchema = asSchema(subSchemaRef);
                var itemValidationResult = new ValidationResult();
                var item = node2.items[index];
                if (item) {
                    validate(item, subSchema, itemValidationResult, matchingSchemas2);
                    validationResult2.mergePropertyMatch(itemValidationResult);
                }
                else if (node2.items.length >= subSchemas.length) {
                    validationResult2.propertiesValueMatches++;
                }
            }
            if (node2.items.length > subSchemas.length) {
                if (typeof schema5.additionalItems === "object") {
                    for (var i = subSchemas.length; i < node2.items.length; i++) {
                        var itemValidationResult = new ValidationResult();
                        validate(node2.items[i], schema5.additionalItems, itemValidationResult, matchingSchemas2);
                        validationResult2.mergePropertyMatch(itemValidationResult);
                    }
                }
                else if (schema5.additionalItems === false) {
                    validationResult2.problems.push({
                        location: { offset: node2.offset, length: node2.length },
                        message: localize2("additionalItemsWarning", "Array has too many items according to schema. Expected {0} or fewer.", subSchemas.length)
                    });
                }
            }
        }
        else {
            var itemSchema = asSchema(schema5.items);
            if (itemSchema) {
                for (var _i = 0, _a = node2.items; _i < _a.length; _i++) {
                    var item = _a[_i];
                    var itemValidationResult = new ValidationResult();
                    validate(item, itemSchema, itemValidationResult, matchingSchemas2);
                    validationResult2.mergePropertyMatch(itemValidationResult);
                }
            }
        }
        var containsSchema = asSchema(schema5.contains);
        if (containsSchema) {
            var doesContain = node2.items.some(function (item2) {
                var itemValidationResult2 = new ValidationResult();
                validate(item2, containsSchema, itemValidationResult2, NoOpSchemaCollector.instance);
                return !itemValidationResult2.hasProblems();
            });
            if (!doesContain) {
                validationResult2.problems.push({
                    location: { offset: node2.offset, length: node2.length },
                    message: schema5.errorMessage || localize2("requiredItemMissingWarning", "Array does not contain required item.")
                });
            }
        }
        if (isNumber(schema5.minItems) && node2.items.length < schema5.minItems) {
            validationResult2.problems.push({
                location: { offset: node2.offset, length: node2.length },
                message: localize2("minItemsWarning", "Array has too few items. Expected {0} or more.", schema5.minItems)
            });
        }
        if (isNumber(schema5.maxItems) && node2.items.length > schema5.maxItems) {
            validationResult2.problems.push({
                location: { offset: node2.offset, length: node2.length },
                message: localize2("maxItemsWarning", "Array has too many items. Expected {0} or fewer.", schema5.maxItems)
            });
        }
        if (schema5.uniqueItems === true) {
            var values_1 = getNodeValue2(node2);
            var duplicates = values_1.some(function (value, index2) {
                return index2 !== values_1.lastIndexOf(value);
            });
            if (duplicates) {
                validationResult2.problems.push({
                    location: { offset: node2.offset, length: node2.length },
                    message: localize2("uniqueItemsWarning", "Array has duplicate items.")
                });
            }
        }
    }
    function _validateObjectNode(node2, schema5, validationResult2, matchingSchemas2) {
        var seenKeys = /* @__PURE__ */ Object.create(null);
        var unprocessedProperties = [];
        for (var _i = 0, _a = node2.properties; _i < _a.length; _i++) {
            var propertyNode = _a[_i];
            var key = propertyNode.keyNode.value;
            seenKeys[key] = propertyNode.valueNode;
            unprocessedProperties.push(key);
        }
        if (Array.isArray(schema5.required)) {
            for (var _b = 0, _c = schema5.required; _b < _c.length; _b++) {
                var propertyName = _c[_b];
                if (!seenKeys[propertyName]) {
                    var keyNode = node2.parent && node2.parent.type === "property" && node2.parent.keyNode;
                    var location = keyNode ? { offset: keyNode.offset, length: keyNode.length } : { offset: node2.offset, length: 1 };
                    validationResult2.problems.push({
                        location,
                        message: localize2("MissingRequiredPropWarning", 'Missing property "{0}".', propertyName)
                    });
                }
            }
        }
        var propertyProcessed = function (prop2) {
            var index = unprocessedProperties.indexOf(prop2);
            while (index >= 0) {
                unprocessedProperties.splice(index, 1);
                index = unprocessedProperties.indexOf(prop2);
            }
        };
        if (schema5.properties) {
            for (var _d = 0, _e = Object.keys(schema5.properties); _d < _e.length; _d++) {
                var propertyName = _e[_d];
                propertyProcessed(propertyName);
                var propertySchema = schema5.properties[propertyName];
                var child = seenKeys[propertyName];
                if (child) {
                    if (isBoolean(propertySchema)) {
                        if (!propertySchema) {
                            var propertyNode = child.parent;
                            validationResult2.problems.push({
                                location: { offset: propertyNode.keyNode.offset, length: propertyNode.keyNode.length },
                                message: schema5.errorMessage || localize2("DisallowedExtraPropWarning", "Property {0} is not allowed.", propertyName)
                            });
                        }
                        else {
                            validationResult2.propertiesMatches++;
                            validationResult2.propertiesValueMatches++;
                        }
                    }
                    else {
                        var propertyValidationResult = new ValidationResult();
                        validate(child, propertySchema, propertyValidationResult, matchingSchemas2);
                        validationResult2.mergePropertyMatch(propertyValidationResult);
                    }
                }
            }
        }
        if (schema5.patternProperties) {
            for (var _f = 0, _g = Object.keys(schema5.patternProperties); _f < _g.length; _f++) {
                var propertyPattern = _g[_f];
                var regex = extendedRegExp(propertyPattern);
                for (var _h = 0, _j = unprocessedProperties.slice(0); _h < _j.length; _h++) {
                    var propertyName = _j[_h];
                    if (regex.test(propertyName)) {
                        propertyProcessed(propertyName);
                        var child = seenKeys[propertyName];
                        if (child) {
                            var propertySchema = schema5.patternProperties[propertyPattern];
                            if (isBoolean(propertySchema)) {
                                if (!propertySchema) {
                                    var propertyNode = child.parent;
                                    validationResult2.problems.push({
                                        location: { offset: propertyNode.keyNode.offset, length: propertyNode.keyNode.length },
                                        message: schema5.errorMessage || localize2("DisallowedExtraPropWarning", "Property {0} is not allowed.", propertyName)
                                    });
                                }
                                else {
                                    validationResult2.propertiesMatches++;
                                    validationResult2.propertiesValueMatches++;
                                }
                            }
                            else {
                                var propertyValidationResult = new ValidationResult();
                                validate(child, propertySchema, propertyValidationResult, matchingSchemas2);
                                validationResult2.mergePropertyMatch(propertyValidationResult);
                            }
                        }
                    }
                }
            }
        }
        if (typeof schema5.additionalProperties === "object") {
            for (var _k = 0, unprocessedProperties_1 = unprocessedProperties; _k < unprocessedProperties_1.length; _k++) {
                var propertyName = unprocessedProperties_1[_k];
                var child = seenKeys[propertyName];
                if (child) {
                    var propertyValidationResult = new ValidationResult();
                    validate(child, schema5.additionalProperties, propertyValidationResult, matchingSchemas2);
                    validationResult2.mergePropertyMatch(propertyValidationResult);
                }
            }
        }
        else if (schema5.additionalProperties === false) {
            if (unprocessedProperties.length > 0) {
                for (var _l = 0, unprocessedProperties_2 = unprocessedProperties; _l < unprocessedProperties_2.length; _l++) {
                    var propertyName = unprocessedProperties_2[_l];
                    var child = seenKeys[propertyName];
                    if (child) {
                        var propertyNode = child.parent;
                        validationResult2.problems.push({
                            location: { offset: propertyNode.keyNode.offset, length: propertyNode.keyNode.length },
                            message: schema5.errorMessage || localize2("DisallowedExtraPropWarning", "Property {0} is not allowed.", propertyName)
                        });
                    }
                }
            }
        }
        if (isNumber(schema5.maxProperties)) {
            if (node2.properties.length > schema5.maxProperties) {
                validationResult2.problems.push({
                    location: { offset: node2.offset, length: node2.length },
                    message: localize2("MaxPropWarning", "Object has more properties than limit of {0}.", schema5.maxProperties)
                });
            }
        }
        if (isNumber(schema5.minProperties)) {
            if (node2.properties.length < schema5.minProperties) {
                validationResult2.problems.push({
                    location: { offset: node2.offset, length: node2.length },
                    message: localize2("MinPropWarning", "Object has fewer properties than the required number of {0}", schema5.minProperties)
                });
            }
        }
        if (schema5.dependencies) {
            for (var _m = 0, _o = Object.keys(schema5.dependencies); _m < _o.length; _m++) {
                var key = _o[_m];
                var prop = seenKeys[key];
                if (prop) {
                    var propertyDep = schema5.dependencies[key];
                    if (Array.isArray(propertyDep)) {
                        for (var _p = 0, propertyDep_1 = propertyDep; _p < propertyDep_1.length; _p++) {
                            var requiredProp = propertyDep_1[_p];
                            if (!seenKeys[requiredProp]) {
                                validationResult2.problems.push({
                                    location: { offset: node2.offset, length: node2.length },
                                    message: localize2("RequiredDependentPropWarning", "Object is missing property {0} required by property {1}.", requiredProp, key)
                                });
                            }
                            else {
                                validationResult2.propertiesValueMatches++;
                            }
                        }
                    }
                    else {
                        var propertySchema = asSchema(propertyDep);
                        if (propertySchema) {
                            var propertyValidationResult = new ValidationResult();
                            validate(node2, propertySchema, propertyValidationResult, matchingSchemas2);
                            validationResult2.mergePropertyMatch(propertyValidationResult);
                        }
                    }
                }
            }
        }
        var propertyNames = asSchema(schema5.propertyNames);
        if (propertyNames) {
            for (var _q = 0, _r = node2.properties; _q < _r.length; _q++) {
                var f2 = _r[_q];
                var key = f2.keyNode;
                if (key) {
                    validate(key, propertyNames, validationResult2, NoOpSchemaCollector.instance);
                }
            }
        }
    }
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/utils/glob.js
function createRegex(glob, opts) {
    if (typeof glob !== "string") {
        throw new TypeError("Expected a string");
    }
    var str = String(glob);
    var reStr = "";
    var extended = opts ? !!opts.extended : false;
    var globstar = opts ? !!opts.globstar : false;
    var inGroup = false;
    var flags = opts && typeof opts.flags === "string" ? opts.flags : "";
    var c;
    for (var i = 0, len = str.length; i < len; i++) {
        c = str[i];
        switch (c) {
            case "/":
            case "$":
            case "^":
            case "+":
            case ".":
            case "(":
            case ")":
            case "=":
            case "!":
            case "|":
                reStr += "\\" + c;
                break;
            case "?":
                if (extended) {
                    reStr += ".";
                    break;
                }
            case "[":
            case "]":
                if (extended) {
                    reStr += c;
                    break;
                }
            case "{":
                if (extended) {
                    inGroup = true;
                    reStr += "(";
                    break;
                }
            case "}":
                if (extended) {
                    inGroup = false;
                    reStr += ")";
                    break;
                }
            case ",":
                if (inGroup) {
                    reStr += "|";
                    break;
                }
                reStr += "\\" + c;
                break;
            case "*":
                var prevChar = str[i - 1];
                var starCount = 1;
                while (str[i + 1] === "*") {
                    starCount++;
                    i++;
                }
                var nextChar = str[i + 1];
                if (!globstar) {
                    reStr += ".*";
                }
                else {
                    var isGlobstar = starCount > 1 && (prevChar === "/" || prevChar === void 0 || prevChar === "{" || prevChar === ",") && (nextChar === "/" || nextChar === void 0 || nextChar === "," || nextChar === "}");
                    if (isGlobstar) {
                        if (nextChar === "/") {
                            i++;
                        }
                        else if (prevChar === "/" && reStr.endsWith("\\/")) {
                            reStr = reStr.substr(0, reStr.length - 2);
                        }
                        reStr += "((?:[^/]*(?:/|$))*)";
                    }
                    else {
                        reStr += "([^/]*)";
                    }
                }
                break;
            default:
                reStr += c;
        }
    }
    if (!flags || !~flags.indexOf("g")) {
        reStr = "^" + reStr + "$";
    }
    return new RegExp(reStr, flags);
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonSchemaService.js
var localize3 = loadMessageBundle();
var BANG = "!";
var PATH_SEP = "/";
var FilePatternAssociation = (
/** @class */
function () {
    function FilePatternAssociation3(pattern, uris) {
        this.globWrappers = [];
        try {
            for (var _i = 0, pattern_1 = pattern; _i < pattern_1.length; _i++) {
                var patternString = pattern_1[_i];
                var include = patternString[0] !== BANG;
                if (!include) {
                    patternString = patternString.substring(1);
                }
                if (patternString.length > 0) {
                    if (patternString[0] === PATH_SEP) {
                        patternString = patternString.substring(1);
                    }
                    this.globWrappers.push({
                        regexp: createRegex("**/" + patternString, { extended: true, globstar: true }),
                        include
                    });
                }
            }
            ;
            this.uris = uris;
        }
        catch (e) {
            this.globWrappers.length = 0;
            this.uris = [];
        }
    }
    FilePatternAssociation3.prototype.matchesPattern = function (fileName) {
        var match = false;
        for (var _i = 0, _a = this.globWrappers; _i < _a.length; _i++) {
            var _b = _a[_i], regexp = _b.regexp, include = _b.include;
            if (regexp.test(fileName)) {
                match = include;
            }
        }
        return match;
    };
    FilePatternAssociation3.prototype.getURIs = function () {
        return this.uris;
    };
    return FilePatternAssociation3;
}());
var SchemaHandle = (
/** @class */
function () {
    function SchemaHandle2(service, url, unresolvedSchemaContent) {
        this.service = service;
        this.url = url;
        this.dependencies = {};
        if (unresolvedSchemaContent) {
            this.unresolvedSchema = this.service.promise.resolve(new UnresolvedSchema(unresolvedSchemaContent));
        }
    }
    SchemaHandle2.prototype.getUnresolvedSchema = function () {
        if (!this.unresolvedSchema) {
            this.unresolvedSchema = this.service.loadSchema(this.url);
        }
        return this.unresolvedSchema;
    };
    SchemaHandle2.prototype.getResolvedSchema = function () {
        var _this = this;
        if (!this.resolvedSchema) {
            this.resolvedSchema = this.getUnresolvedSchema().then(function (unresolved) {
                return _this.service.resolveSchemaContent(unresolved, _this.url, _this.dependencies);
            });
        }
        return this.resolvedSchema;
    };
    SchemaHandle2.prototype.clearSchema = function () {
        this.resolvedSchema = void 0;
        this.unresolvedSchema = void 0;
        this.dependencies = {};
    };
    return SchemaHandle2;
}());
var UnresolvedSchema = (
/** @class */
function () {
    function UnresolvedSchema2(schema4, errors) {
        if (errors === void 0) {
            errors = [];
        }
        this.schema = schema4;
        this.errors = errors;
    }
    return UnresolvedSchema2;
}());
var ResolvedSchema = (
/** @class */
function () {
    function ResolvedSchema2(schema4, errors) {
        if (errors === void 0) {
            errors = [];
        }
        this.schema = schema4;
        this.errors = errors;
    }
    ResolvedSchema2.prototype.getSection = function (path5) {
        var schemaRef = this.getSectionRecursive(path5, this.schema);
        if (schemaRef) {
            return asSchema(schemaRef);
        }
        return void 0;
    };
    ResolvedSchema2.prototype.getSectionRecursive = function (path5, schema4) {
        if (!schema4 || typeof schema4 === "boolean" || path5.length === 0) {
            return schema4;
        }
        var next = path5.shift();
        if (schema4.properties && typeof schema4.properties[next]) {
            return this.getSectionRecursive(path5, schema4.properties[next]);
        }
        else if (schema4.patternProperties) {
            for (var _i = 0, _a = Object.keys(schema4.patternProperties); _i < _a.length; _i++) {
                var pattern = _a[_i];
                var regex = extendedRegExp(pattern);
                if (regex.test(next)) {
                    return this.getSectionRecursive(path5, schema4.patternProperties[pattern]);
                }
            }
        }
        else if (typeof schema4.additionalProperties === "object") {
            return this.getSectionRecursive(path5, schema4.additionalProperties);
        }
        else if (next.match("[0-9]+")) {
            if (Array.isArray(schema4.items)) {
                var index = parseInt(next, 10);
                if (!isNaN(index) && schema4.items[index]) {
                    return this.getSectionRecursive(path5, schema4.items[index]);
                }
            }
            else if (schema4.items) {
                return this.getSectionRecursive(path5, schema4.items);
            }
        }
        return void 0;
    };
    return ResolvedSchema2;
}());
var JSONSchemaService = (
/** @class */
function () {
    function JSONSchemaService2(requestService, contextService, promiseConstructor) {
        this.contextService = contextService;
        this.requestService = requestService;
        this.promiseConstructor = promiseConstructor || Promise;
        this.callOnDispose = [];
        this.contributionSchemas = {};
        this.contributionAssociations = [];
        this.schemasById = {};
        this.filePatternAssociations = [];
        this.registeredSchemasIds = {};
    }
    JSONSchemaService2.prototype.getRegisteredSchemaIds = function (filter) {
        return Object.keys(this.registeredSchemasIds).filter(function (id) {
            var scheme = URI.parse(id).scheme;
            return scheme !== "schemaservice" && (!filter || filter(scheme));
        });
    };
    Object.defineProperty(JSONSchemaService2.prototype, "promise", {
        get: function () {
            return this.promiseConstructor;
        },
        enumerable: false,
        configurable: true
    });
    JSONSchemaService2.prototype.dispose = function () {
        while (this.callOnDispose.length > 0) {
            this.callOnDispose.pop()();
        }
    };
    JSONSchemaService2.prototype.onResourceChange = function (uri) {
        var _this = this;
        this.cachedSchemaForResource = void 0;
        var hasChanges = false;
        uri = normalizeId(uri);
        var toWalk = [uri];
        var all = Object.keys(this.schemasById).map(function (key) {
            return _this.schemasById[key];
        });
        while (toWalk.length) {
            var curr = toWalk.pop();
            for (var i = 0; i < all.length; i++) {
                var handle = all[i];
                if (handle && (handle.url === curr || handle.dependencies[curr])) {
                    if (handle.url !== curr) {
                        toWalk.push(handle.url);
                    }
                    handle.clearSchema();
                    all[i] = void 0;
                    hasChanges = true;
                }
            }
        }
        return hasChanges;
    };
    JSONSchemaService2.prototype.setSchemaContributions = function (schemaContributions2) {
        if (schemaContributions2.schemas) {
            var schemas2 = schemaContributions2.schemas;
            for (var id in schemas2) {
                var normalizedId = normalizeId(id);
                this.contributionSchemas[normalizedId] = this.addSchemaHandle(normalizedId, schemas2[id]);
            }
        }
        if (Array.isArray(schemaContributions2.schemaAssociations)) {
            var schemaAssociations = schemaContributions2.schemaAssociations;
            for (var _i = 0, schemaAssociations_1 = schemaAssociations; _i < schemaAssociations_1.length; _i++) {
                var schemaAssociation = schemaAssociations_1[_i];
                var uris = schemaAssociation.uris.map(normalizeId);
                var association = this.addFilePatternAssociation(schemaAssociation.pattern, uris);
                this.contributionAssociations.push(association);
            }
        }
    };
    JSONSchemaService2.prototype.addSchemaHandle = function (id, unresolvedSchemaContent) {
        var schemaHandle = new SchemaHandle(this, id, unresolvedSchemaContent);
        this.schemasById[id] = schemaHandle;
        return schemaHandle;
    };
    JSONSchemaService2.prototype.getOrAddSchemaHandle = function (id, unresolvedSchemaContent) {
        return this.schemasById[id] || this.addSchemaHandle(id, unresolvedSchemaContent);
    };
    JSONSchemaService2.prototype.addFilePatternAssociation = function (pattern, uris) {
        var fpa = new FilePatternAssociation(pattern, uris);
        this.filePatternAssociations.push(fpa);
        return fpa;
    };
    JSONSchemaService2.prototype.registerExternalSchema = function (uri, filePatterns, unresolvedSchemaContent) {
        var id = normalizeId(uri);
        this.registeredSchemasIds[id] = true;
        this.cachedSchemaForResource = void 0;
        if (filePatterns) {
            this.addFilePatternAssociation(filePatterns, [uri]);
        }
        return unresolvedSchemaContent ? this.addSchemaHandle(id, unresolvedSchemaContent) : this.getOrAddSchemaHandle(id);
    };
    JSONSchemaService2.prototype.clearExternalSchemas = function () {
        this.schemasById = {};
        this.filePatternAssociations = [];
        this.registeredSchemasIds = {};
        this.cachedSchemaForResource = void 0;
        for (var id in this.contributionSchemas) {
            this.schemasById[id] = this.contributionSchemas[id];
            this.registeredSchemasIds[id] = true;
        }
        for (var _i = 0, _a = this.contributionAssociations; _i < _a.length; _i++) {
            var contributionAssociation = _a[_i];
            this.filePatternAssociations.push(contributionAssociation);
        }
    };
    JSONSchemaService2.prototype.getResolvedSchema = function (schemaId) {
        var id = normalizeId(schemaId);
        var schemaHandle = this.schemasById[id];
        if (schemaHandle) {
            return schemaHandle.getResolvedSchema();
        }
        return this.promise.resolve(void 0);
    };
    JSONSchemaService2.prototype.loadSchema = function (url) {
        if (!this.requestService) {
            var errorMessage = localize3("json.schema.norequestservice", "Unable to load schema from '{0}'. No schema request service available", toDisplayString(url));
            return this.promise.resolve(new UnresolvedSchema({}, [errorMessage]));
        }
        return this.requestService(url).then(function (content) {
            if (!content) {
                var errorMessage2 = localize3("json.schema.nocontent", "Unable to load schema from '{0}': No content.", toDisplayString(url));
                return new UnresolvedSchema({}, [errorMessage2]);
            }
            var schemaContent = {};
            var jsonErrors = [];
            schemaContent = main/* parse */.Qc(content, jsonErrors);
            var errors = jsonErrors.length ? [localize3("json.schema.invalidFormat", "Unable to parse content from '{0}': Parse error at offset {1}.", toDisplayString(url), jsonErrors[0].offset)] : [];
            return new UnresolvedSchema(schemaContent, errors);
        }, function (error) {
            var errorMessage2 = error.toString();
            var errorSplit = error.toString().split("Error: ");
            if (errorSplit.length > 1) {
                errorMessage2 = errorSplit[1];
            }
            if (endsWith(errorMessage2, ".")) {
                errorMessage2 = errorMessage2.substr(0, errorMessage2.length - 1);
            }
            return new UnresolvedSchema({}, [localize3("json.schema.nocontent", "Unable to load schema from '{0}': {1}.", toDisplayString(url), errorMessage2)]);
        });
    };
    JSONSchemaService2.prototype.resolveSchemaContent = function (schemaToResolve, schemaURL, dependencies) {
        var _this = this;
        var resolveErrors = schemaToResolve.errors.slice(0);
        var schema4 = schemaToResolve.schema;
        if (schema4.$schema) {
            var id = normalizeId(schema4.$schema);
            if (id === "http://json-schema.org/draft-03/schema") {
                return this.promise.resolve(new ResolvedSchema({}, [localize3("json.schema.draft03.notsupported", "Draft-03 schemas are not supported.")]));
            }
            else if (id === "https://json-schema.org/draft/2019-09/schema") {
                resolveErrors.push(localize3("json.schema.draft201909.notsupported", "Draft 2019-09 schemas are not yet fully supported."));
            }
        }
        var contextService = this.contextService;
        var findSection = function (schema5, path5) {
            if (!path5) {
                return schema5;
            }
            var current = schema5;
            if (path5[0] === "/") {
                path5 = path5.substr(1);
            }
            path5.split("/").some(function (part) {
                part = part.replace(/~1/g, "/").replace(/~0/g, "~");
                current = current[part];
                return !current;
            });
            return current;
        };
        var merge = function (target, sourceRoot, sourceURI, refSegment) {
            var path5 = refSegment ? decodeURIComponent(refSegment) : void 0;
            var section = findSection(sourceRoot, path5);
            if (section) {
                for (var key in section) {
                    if (section.hasOwnProperty(key) && !target.hasOwnProperty(key)) {
                        target[key] = section[key];
                    }
                }
            }
            else {
                resolveErrors.push(localize3("json.schema.invalidref", "$ref '{0}' in '{1}' can not be resolved.", path5, sourceURI));
            }
        };
        var resolveExternalLink = function (node, uri, refSegment, parentSchemaURL, parentSchemaDependencies) {
            if (contextService && !/^[A-Za-z][A-Za-z0-9+\-.+]*:\/\/.*/.test(uri)) {
                uri = contextService.resolveRelativePath(uri, parentSchemaURL);
            }
            uri = normalizeId(uri);
            var referencedHandle = _this.getOrAddSchemaHandle(uri);
            return referencedHandle.getUnresolvedSchema().then(function (unresolvedSchema) {
                parentSchemaDependencies[uri] = true;
                if (unresolvedSchema.errors.length) {
                    var loc = refSegment ? uri + "#" + refSegment : uri;
                    resolveErrors.push(localize3("json.schema.problemloadingref", "Problems loading reference '{0}': {1}", loc, unresolvedSchema.errors[0]));
                }
                merge(node, unresolvedSchema.schema, uri, refSegment);
                return resolveRefs(node, unresolvedSchema.schema, uri, referencedHandle.dependencies);
            });
        };
        var resolveRefs = function (node, parentSchema, parentSchemaURL, parentSchemaDependencies) {
            if (!node || typeof node !== "object") {
                return Promise.resolve(null);
            }
            var toWalk = [node];
            var seen = [];
            var openPromises = [];
            var collectEntries = function () {
                var entries = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    entries[_i] = arguments[_i];
                }
                for (var _a = 0, entries_1 = entries; _a < entries_1.length; _a++) {
                    var entry = entries_1[_a];
                    if (typeof entry === "object") {
                        toWalk.push(entry);
                    }
                }
            };
            var collectMapEntries = function () {
                var maps = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    maps[_i] = arguments[_i];
                }
                for (var _a = 0, maps_1 = maps; _a < maps_1.length; _a++) {
                    var map2 = maps_1[_a];
                    if (typeof map2 === "object") {
                        for (var k in map2) {
                            var key = k;
                            var entry = map2[key];
                            if (typeof entry === "object") {
                                toWalk.push(entry);
                            }
                        }
                    }
                }
            };
            var collectArrayEntries = function () {
                var arrays = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    arrays[_i] = arguments[_i];
                }
                for (var _a = 0, arrays_1 = arrays; _a < arrays_1.length; _a++) {
                    var array = arrays_1[_a];
                    if (Array.isArray(array)) {
                        for (var _b = 0, array_1 = array; _b < array_1.length; _b++) {
                            var entry = array_1[_b];
                            if (typeof entry === "object") {
                                toWalk.push(entry);
                            }
                        }
                    }
                }
            };
            var handleRef = function (next2) {
                var seenRefs = [];
                while (next2.$ref) {
                    var ref = next2.$ref;
                    var segments = ref.split("#", 2);
                    delete next2.$ref;
                    if (segments[0].length > 0) {
                        openPromises.push(resolveExternalLink(next2, segments[0], segments[1], parentSchemaURL, parentSchemaDependencies));
                        return;
                    }
                    else {
                        if (seenRefs.indexOf(ref) === -1) {
                            merge(next2, parentSchema, parentSchemaURL, segments[1]);
                            seenRefs.push(ref);
                        }
                    }
                }
                collectEntries(next2.items, next2.additionalItems, next2.additionalProperties, next2.not, next2.contains, next2.propertyNames, next2.if, next2.then, next2.else);
                collectMapEntries(next2.definitions, next2.properties, next2.patternProperties, next2.dependencies);
                collectArrayEntries(next2.anyOf, next2.allOf, next2.oneOf, next2.items);
            };
            while (toWalk.length) {
                var next = toWalk.pop();
                if (seen.indexOf(next) >= 0) {
                    continue;
                }
                seen.push(next);
                handleRef(next);
            }
            return _this.promise.all(openPromises);
        };
        return resolveRefs(schema4, schema4, schemaURL, dependencies).then(function (_) {
            return new ResolvedSchema(schema4, resolveErrors);
        });
    };
    JSONSchemaService2.prototype.getSchemaForResource = function (resource, document) {
        if (document && document.root && document.root.type === "object") {
            var schemaProperties = document.root.properties.filter(function (p) {
                return p.keyNode.value === "$schema" && p.valueNode && p.valueNode.type === "string";
            });
            if (schemaProperties.length > 0) {
                var valueNode = schemaProperties[0].valueNode;
                if (valueNode && valueNode.type === "string") {
                    var schemeId = getNodeValue2(valueNode);
                    if (schemeId && startsWith(schemeId, ".") && this.contextService) {
                        schemeId = this.contextService.resolveRelativePath(schemeId, resource);
                    }
                    if (schemeId) {
                        var id = normalizeId(schemeId);
                        return this.getOrAddSchemaHandle(id).getResolvedSchema();
                    }
                }
            }
        }
        if (this.cachedSchemaForResource && this.cachedSchemaForResource.resource === resource) {
            return this.cachedSchemaForResource.resolvedSchema;
        }
        var seen = /* @__PURE__ */ Object.create(null);
        var schemas2 = [];
        var normalizedResource = normalizeResourceForMatching(resource);
        for (var _i = 0, _a = this.filePatternAssociations; _i < _a.length; _i++) {
            var entry = _a[_i];
            if (entry.matchesPattern(normalizedResource)) {
                for (var _b = 0, _c = entry.getURIs(); _b < _c.length; _b++) {
                    var schemaId = _c[_b];
                    if (!seen[schemaId]) {
                        schemas2.push(schemaId);
                        seen[schemaId] = true;
                    }
                }
            }
        }
        var resolvedSchema = schemas2.length > 0 ? this.createCombinedSchema(resource, schemas2).getResolvedSchema() : this.promise.resolve(void 0);
        this.cachedSchemaForResource = { resource, resolvedSchema };
        return resolvedSchema;
    };
    JSONSchemaService2.prototype.createCombinedSchema = function (resource, schemaIds) {
        if (schemaIds.length === 1) {
            return this.getOrAddSchemaHandle(schemaIds[0]);
        }
        else {
            var combinedSchemaId = "schemaservice://combinedSchema/" + encodeURIComponent(resource);
            var combinedSchema = {
                allOf: schemaIds.map(function (schemaId) {
                    return { $ref: schemaId };
                })
            };
            return this.addSchemaHandle(combinedSchemaId, combinedSchema);
        }
    };
    JSONSchemaService2.prototype.getMatchingSchemas = function (document, jsonDocument, schema4) {
        if (schema4) {
            var id = schema4.id || "schemaservice://untitled/matchingSchemas/" + idCounter++;
            return this.resolveSchemaContent(new UnresolvedSchema(schema4), id, {}).then(function (resolvedSchema) {
                return jsonDocument.getMatchingSchemas(resolvedSchema.schema).filter(function (s) {
                    return !s.inverted;
                });
            });
        }
        return this.getSchemaForResource(document.uri, jsonDocument).then(function (schema5) {
            if (schema5) {
                return jsonDocument.getMatchingSchemas(schema5.schema).filter(function (s) {
                    return !s.inverted;
                });
            }
            return [];
        });
    };
    return JSONSchemaService2;
}());
var idCounter = 0;
function normalizeId(id) {
    try {
        return URI.parse(id).toString();
    }
    catch (e) {
        return id;
    }
}
function normalizeResourceForMatching(resource) {
    try {
        return URI.parse(resource).with({ fragment: null, query: null }).toString();
    }
    catch (e) {
        return resource;
    }
}
function toDisplayString(url) {
    try {
        var uri = URI.parse(url);
        if (uri.scheme === "file") {
            return uri.fsPath;
        }
    }
    catch (e) {
    }
    return url;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/strings.js
function convertSimple2RegExpPattern(pattern) {
    return pattern.replace(/[-\\{}+?|^$.,[\]()#\s]/g, "\\$&").replace(/[*]/g, ".*");
}
function getIndentation(lineContent, position) {
    if (lineContent.length < position) {
        return 0;
    }
    for (let i = 0; i < position; i++) {
        const char = lineContent.charCodeAt(i);
        if (char !== 32 && char !== 9) {
            return i;
        }
    }
    return position;
}
function safeCreateUnicodeRegExp(pattern) {
    try {
        return new RegExp(pattern, "u");
    }
    catch (ignore) {
        return new RegExp(pattern);
    }
}
function getFirstNonWhitespaceCharacterAfterOffset(str, offset) {
    offset++;
    for (let i = offset; i < str.length; i++) {
        const char = str.charAt(i);
        if (char === " " || char === "	") {
            offset++;
        }
        else {
            return offset;
        }
    }
    return offset;
}
// ../../node_modules/yaml/browser/dist/nodes/Node.js
var ALIAS = Symbol.for("yaml.alias");
var DOC = Symbol.for("yaml.document");
var MAP = Symbol.for("yaml.map");
var PAIR = Symbol.for("yaml.pair");
var SCALAR = Symbol.for("yaml.scalar");
var SEQ = Symbol.for("yaml.seq");
var NODE_TYPE = Symbol.for("yaml.node.type");
var isAlias = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === ALIAS;
var isDocument = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === DOC;
var isMap = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === MAP;
var isPair = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === PAIR;
var isScalar = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === SCALAR;
var isSeq = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === SEQ;
function isCollection(node) {
    if (node && typeof node === "object")
        switch (node[NODE_TYPE]) {
            case MAP:
            case SEQ:
                return true;
        }
    return false;
}
function isNode(node) {
    if (node && typeof node === "object")
        switch (node[NODE_TYPE]) {
            case ALIAS:
            case MAP:
            case SCALAR:
            case SEQ:
                return true;
        }
    return false;
}
var hasAnchor = (node) => (isScalar(node) || isCollection(node)) && !!node.anchor;
var NodeBase = class {
    constructor(type) {
        Object.defineProperty(this, NODE_TYPE, { value: type });
    }
    /** Create a copy of this node.  */
    clone() {
        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
        if (this.range)
            copy.range = this.range.slice();
        return copy;
    }
};
// ../../node_modules/yaml/browser/dist/visit.js
var BREAK = Symbol("break visit");
var SKIP = Symbol("skip children");
var REMOVE = Symbol("remove node");
function visit(node, visitor) {
    const visitor_ = initVisitor(visitor);
    if (isDocument(node)) {
        const cd = visit_(null, node.contents, visitor_, Object.freeze([node]));
        if (cd === REMOVE)
            node.contents = null;
    }
    else
        visit_(null, node, visitor_, Object.freeze([]));
}
visit.BREAK = BREAK;
visit.SKIP = SKIP;
visit.REMOVE = REMOVE;
function visit_(key, node, visitor, path5) {
    const ctrl = callVisitor(key, node, visitor, path5);
    if (isNode(ctrl) || isPair(ctrl)) {
        replaceNode(key, path5, ctrl);
        return visit_(key, ctrl, visitor, path5);
    }
    if (typeof ctrl !== "symbol") {
        if (isCollection(node)) {
            path5 = Object.freeze(path5.concat(node));
            for (let i = 0; i < node.items.length; ++i) {
                const ci = visit_(i, node.items[i], visitor, path5);
                if (typeof ci === "number")
                    i = ci - 1;
                else if (ci === BREAK)
                    return BREAK;
                else if (ci === REMOVE) {
                    node.items.splice(i, 1);
                    i -= 1;
                }
            }
        }
        else if (isPair(node)) {
            path5 = Object.freeze(path5.concat(node));
            const ck = visit_("key", node.key, visitor, path5);
            if (ck === BREAK)
                return BREAK;
            else if (ck === REMOVE)
                node.key = null;
            const cv = visit_("value", node.value, visitor, path5);
            if (cv === BREAK)
                return BREAK;
            else if (cv === REMOVE)
                node.value = null;
        }
    }
    return ctrl;
}
async function visitAsync(node, visitor) {
    const visitor_ = initVisitor(visitor);
    if (isDocument(node)) {
        const cd = await visitAsync_(null, node.contents, visitor_, Object.freeze([node]));
        if (cd === REMOVE)
            node.contents = null;
    }
    else
        await visitAsync_(null, node, visitor_, Object.freeze([]));
}
visitAsync.BREAK = BREAK;
visitAsync.SKIP = SKIP;
visitAsync.REMOVE = REMOVE;
async function visitAsync_(key, node, visitor, path5) {
    const ctrl = await callVisitor(key, node, visitor, path5);
    if (isNode(ctrl) || isPair(ctrl)) {
        replaceNode(key, path5, ctrl);
        return visitAsync_(key, ctrl, visitor, path5);
    }
    if (typeof ctrl !== "symbol") {
        if (isCollection(node)) {
            path5 = Object.freeze(path5.concat(node));
            for (let i = 0; i < node.items.length; ++i) {
                const ci = await visitAsync_(i, node.items[i], visitor, path5);
                if (typeof ci === "number")
                    i = ci - 1;
                else if (ci === BREAK)
                    return BREAK;
                else if (ci === REMOVE) {
                    node.items.splice(i, 1);
                    i -= 1;
                }
            }
        }
        else if (isPair(node)) {
            path5 = Object.freeze(path5.concat(node));
            const ck = await visitAsync_("key", node.key, visitor, path5);
            if (ck === BREAK)
                return BREAK;
            else if (ck === REMOVE)
                node.key = null;
            const cv = await visitAsync_("value", node.value, visitor, path5);
            if (cv === BREAK)
                return BREAK;
            else if (cv === REMOVE)
                node.value = null;
        }
    }
    return ctrl;
}
function initVisitor(visitor) {
    if (typeof visitor === "object" && (visitor.Collection || visitor.Node || visitor.Value)) {
        return Object.assign({
            Alias: visitor.Node,
            Map: visitor.Node,
            Scalar: visitor.Node,
            Seq: visitor.Node
        }, visitor.Value && {
            Map: visitor.Value,
            Scalar: visitor.Value,
            Seq: visitor.Value
        }, visitor.Collection && {
            Map: visitor.Collection,
            Seq: visitor.Collection
        }, visitor);
    }
    return visitor;
}
function callVisitor(key, node, visitor, path5) {
    var _a, _b, _c, _d, _e;
    if (typeof visitor === "function")
        return visitor(key, node, path5);
    if (isMap(node))
        return (_a = visitor.Map) === null || _a === void 0 ? void 0 : _a.call(visitor, key, node, path5);
    if (isSeq(node))
        return (_b = visitor.Seq) === null || _b === void 0 ? void 0 : _b.call(visitor, key, node, path5);
    if (isPair(node))
        return (_c = visitor.Pair) === null || _c === void 0 ? void 0 : _c.call(visitor, key, node, path5);
    if (isScalar(node))
        return (_d = visitor.Scalar) === null || _d === void 0 ? void 0 : _d.call(visitor, key, node, path5);
    if (isAlias(node))
        return (_e = visitor.Alias) === null || _e === void 0 ? void 0 : _e.call(visitor, key, node, path5);
    return void 0;
}
function replaceNode(key, path5, node) {
    const parent = path5[path5.length - 1];
    if (isCollection(parent)) {
        parent.items[key] = node;
    }
    else if (isPair(parent)) {
        if (key === "key")
            parent.key = node;
        else
            parent.value = node;
    }
    else if (isDocument(parent)) {
        parent.contents = node;
    }
    else {
        const pt = isAlias(parent) ? "alias" : "scalar";
        throw new Error(`Cannot replace node with ${pt} parent`);
    }
}
// ../../node_modules/yaml/browser/dist/doc/directives.js
var escapeChars = {
    "!": "%21",
    ",": "%2C",
    "[": "%5B",
    "]": "%5D",
    "{": "%7B",
    "}": "%7D"
};
var escapeTagName = (tn) => tn.replace(/[!,[\]{}]/g, (ch) => escapeChars[ch]);
var Directives = class {
    constructor(yaml, tags) {
        this.docStart = null;
        this.docEnd = false;
        this.yaml = Object.assign({}, Directives.defaultYaml, yaml);
        this.tags = Object.assign({}, Directives.defaultTags, tags);
    }
    clone() {
        const copy = new Directives(this.yaml, this.tags);
        copy.docStart = this.docStart;
        return copy;
    }
    /**
     * During parsing, get a Directives instance for the current document and
     * update the stream state according to the current version's spec.
     */
    atDocument() {
        const res = new Directives(this.yaml, this.tags);
        switch (this.yaml.version) {
            case "1.1":
                this.atNextDocument = true;
                break;
            case "1.2":
                this.atNextDocument = false;
                this.yaml = {
                    explicit: Directives.defaultYaml.explicit,
                    version: "1.2"
                };
                this.tags = Object.assign({}, Directives.defaultTags);
                break;
        }
        return res;
    }
    /**
     * @param onError - May be called even if the action was successful
     * @returns `true` on success
     */
    add(line, onError) {
        if (this.atNextDocument) {
            this.yaml = { explicit: Directives.defaultYaml.explicit, version: "1.1" };
            this.tags = Object.assign({}, Directives.defaultTags);
            this.atNextDocument = false;
        }
        const parts = line.trim().split(/[ \t]+/);
        const name = parts.shift();
        switch (name) {
            case "%TAG": {
                if (parts.length !== 2) {
                    onError(0, "%TAG directive should contain exactly two parts");
                    if (parts.length < 2)
                        return false;
                }
                const [handle, prefix] = parts;
                this.tags[handle] = prefix;
                return true;
            }
            case "%YAML": {
                this.yaml.explicit = true;
                if (parts.length !== 1) {
                    onError(0, "%YAML directive should contain exactly one part");
                    return false;
                }
                const [version] = parts;
                if (version === "1.1" || version === "1.2") {
                    this.yaml.version = version;
                    return true;
                }
                else {
                    const isValid = /^\d+\.\d+$/.test(version);
                    onError(6, `Unsupported YAML version ${version}`, isValid);
                    return false;
                }
            }
            default:
                onError(0, `Unknown directive ${name}`, true);
                return false;
        }
    }
    /**
     * Resolves a tag, matching handles to those defined in %TAG directives.
     *
     * @returns Resolved tag, which may also be the non-specific tag `'!'` or a
     *   `'!local'` tag, or `null` if unresolvable.
     */
    tagName(source, onError) {
        if (source === "!")
            return "!";
        if (source[0] !== "!") {
            onError(`Not a valid tag: ${source}`);
            return null;
        }
        if (source[1] === "<") {
            const verbatim = source.slice(2, -1);
            if (verbatim === "!" || verbatim === "!!") {
                onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);
                return null;
            }
            if (source[source.length - 1] !== ">")
                onError("Verbatim tags must end with a >");
            return verbatim;
        }
        const [, handle, suffix] = source.match(/^(.*!)([^!]*)$/);
        if (!suffix)
            onError(`The ${source} tag has no suffix`);
        const prefix = this.tags[handle];
        if (prefix)
            return prefix + decodeURIComponent(suffix);
        if (handle === "!")
            return source;
        onError(`Could not resolve tag: ${source}`);
        return null;
    }
    /**
     * Given a fully resolved tag, returns its printable string form,
     * taking into account current tag prefixes and defaults.
     */
    tagString(tag) {
        for (const [handle, prefix] of Object.entries(this.tags)) {
            if (tag.startsWith(prefix))
                return handle + escapeTagName(tag.substring(prefix.length));
        }
        return tag[0] === "!" ? tag : `!<${tag}>`;
    }
    toString(doc) {
        const lines = this.yaml.explicit ? [`%YAML ${this.yaml.version || "1.2"}`] : [];
        const tagEntries = Object.entries(this.tags);
        let tagNames;
        if (doc && tagEntries.length > 0 && isNode(doc.contents)) {
            const tags = {};
            visit(doc.contents, (_key, node) => {
                if (isNode(node) && node.tag)
                    tags[node.tag] = true;
            });
            tagNames = Object.keys(tags);
        }
        else
            tagNames = [];
        for (const [handle, prefix] of tagEntries) {
            if (handle === "!!" && prefix === "tag:yaml.org,2002:")
                continue;
            if (!doc || tagNames.some((tn) => tn.startsWith(prefix)))
                lines.push(`%TAG ${handle} ${prefix}`);
        }
        return lines.join("\n");
    }
};
Directives.defaultYaml = { explicit: false, version: "1.2" };
Directives.defaultTags = { "!!": "tag:yaml.org,2002:" };
// ../../node_modules/yaml/browser/dist/doc/anchors.js
function anchorIsValid(anchor) {
    if (/[\x00-\x19\s,[\]{}]/.test(anchor)) {
        const sa = JSON.stringify(anchor);
        const msg = `Anchor must not contain whitespace or control characters: ${sa}`;
        throw new Error(msg);
    }
    return true;
}
function anchorNames(root) {
    const anchors = /* @__PURE__ */ new Set();
    visit(root, {
        Value(_key, node) {
            if (node.anchor)
                anchors.add(node.anchor);
        }
    });
    return anchors;
}
function findNewAnchor(prefix, exclude) {
    for (let i = 1; true; ++i) {
        const name = `${prefix}${i}`;
        if (!exclude.has(name))
            return name;
    }
}
function createNodeAnchors(doc, prefix) {
    const aliasObjects = [];
    const sourceObjects = /* @__PURE__ */ new Map();
    let prevAnchors = null;
    return {
        onAnchor(source) {
            aliasObjects.push(source);
            if (!prevAnchors)
                prevAnchors = anchorNames(doc);
            const anchor = findNewAnchor(prefix, prevAnchors);
            prevAnchors.add(anchor);
            return anchor;
        },
        /**
         * With circular references, the source node is only resolved after all
         * of its child nodes are. This is why anchors are set only after all of
         * the nodes have been created.
         */
        setAnchors() {
            for (const source of aliasObjects) {
                const ref = sourceObjects.get(source);
                if (typeof ref === "object" && ref.anchor && (isScalar(ref.node) || isCollection(ref.node))) {
                    ref.node.anchor = ref.anchor;
                }
                else {
                    const error = new Error("Failed to resolve repeated object (this should not happen)");
                    error.source = source;
                    throw error;
                }
            }
        },
        sourceObjects
    };
}
// ../../node_modules/yaml/browser/dist/nodes/Alias.js
var Alias = class extends NodeBase {
    constructor(source) {
        super(ALIAS);
        this.source = source;
        Object.defineProperty(this, "tag", {
            set() {
                throw new Error("Alias nodes cannot have tags");
            }
        });
    }
    /**
     * Resolve the value of this alias within `doc`, finding the last
     * instance of the `source` anchor before this node.
     */
    resolve(doc) {
        let found = void 0;
        visit(doc, {
            Node: (_key, node) => {
                if (node === this)
                    return visit.BREAK;
                if (node.anchor === this.source)
                    found = node;
            }
        });
        return found;
    }
    toJSON(_arg, ctx) {
        if (!ctx)
            return { source: this.source };
        const { anchors, doc, maxAliasCount } = ctx;
        const source = this.resolve(doc);
        if (!source) {
            const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
            throw new ReferenceError(msg);
        }
        const data = anchors.get(source);
        if (!data || data.res === void 0) {
            const msg = "This should not happen: Alias anchor was not resolved?";
            throw new ReferenceError(msg);
        }
        if (maxAliasCount >= 0) {
            data.count += 1;
            if (data.aliasCount === 0)
                data.aliasCount = getAliasCount(doc, source, anchors);
            if (data.count * data.aliasCount > maxAliasCount) {
                const msg = "Excessive alias count indicates a resource exhaustion attack";
                throw new ReferenceError(msg);
            }
        }
        return data.res;
    }
    toString(ctx, _onComment, _onChompKeep) {
        const src = `*${this.source}`;
        if (ctx) {
            anchorIsValid(this.source);
            if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {
                const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
                throw new Error(msg);
            }
            if (ctx.implicitKey)
                return `${src} `;
        }
        return src;
    }
};
function getAliasCount(doc, node, anchors) {
    if (isAlias(node)) {
        const source = node.resolve(doc);
        const anchor = anchors && source && anchors.get(source);
        return anchor ? anchor.count * anchor.aliasCount : 0;
    }
    else if (isCollection(node)) {
        let count = 0;
        for (const item of node.items) {
            const c = getAliasCount(doc, item, anchors);
            if (c > count)
                count = c;
        }
        return count;
    }
    else if (isPair(node)) {
        const kc = getAliasCount(doc, node.key, anchors);
        const vc = getAliasCount(doc, node.value, anchors);
        return Math.max(kc, vc);
    }
    return 1;
}
// ../../node_modules/yaml/browser/dist/nodes/toJS.js
function toJS(value, arg, ctx) {
    if (Array.isArray(value))
        return value.map((v, i) => toJS(v, String(i), ctx));
    if (value && typeof value.toJSON === "function") {
        if (!ctx || !hasAnchor(value))
            return value.toJSON(arg, ctx);
        const data = { aliasCount: 0, count: 1, res: void 0 };
        ctx.anchors.set(value, data);
        ctx.onCreate = (res2) => {
            data.res = res2;
            delete ctx.onCreate;
        };
        const res = value.toJSON(arg, ctx);
        if (ctx.onCreate)
            ctx.onCreate(res);
        return res;
    }
    if (typeof value === "bigint" && !(ctx && ctx.keep))
        return Number(value);
    return value;
}
// ../../node_modules/yaml/browser/dist/nodes/Scalar.js
var isScalarValue = (value) => !value || typeof value !== "function" && typeof value !== "object";
var Scalar = class extends NodeBase {
    constructor(value) {
        super(SCALAR);
        this.value = value;
    }
    toJSON(arg, ctx) {
        return ctx && ctx.keep ? this.value : toJS(this.value, arg, ctx);
    }
    toString() {
        return String(this.value);
    }
};
Scalar.BLOCK_FOLDED = "BLOCK_FOLDED";
Scalar.BLOCK_LITERAL = "BLOCK_LITERAL";
Scalar.PLAIN = "PLAIN";
Scalar.QUOTE_DOUBLE = "QUOTE_DOUBLE";
Scalar.QUOTE_SINGLE = "QUOTE_SINGLE";
// ../../node_modules/yaml/browser/dist/doc/createNode.js
var defaultTagPrefix = "tag:yaml.org,2002:";
function findTagObject(value, tagName, tags) {
    if (tagName) {
        const match = tags.filter((t) => t.tag === tagName);
        const tagObj = match.find((t) => !t.format) || match[0];
        if (!tagObj)
            throw new Error(`Tag ${tagName} not found`);
        return tagObj;
    }
    return tags.find((t) => t.identify && t.identify(value) && !t.format);
}
function createNode(value, tagName, ctx) {
    var _a, _b;
    if (isDocument(value))
        value = value.contents;
    if (isNode(value))
        return value;
    if (isPair(value)) {
        const map2 = (_b = (_a = ctx.schema[MAP]).createNode) === null || _b === void 0 ? void 0 : _b.call(_a, ctx.schema, null, ctx);
        map2.items.push(value);
        return map2;
    }
    if (value instanceof String || value instanceof Number || value instanceof Boolean || typeof BigInt === "function" && value instanceof BigInt) {
        value = value.valueOf();
    }
    const { aliasDuplicateObjects, onAnchor, onTagObj, schema: schema4, sourceObjects } = ctx;
    let ref = void 0;
    if (aliasDuplicateObjects && value && typeof value === "object") {
        ref = sourceObjects.get(value);
        if (ref) {
            if (!ref.anchor)
                ref.anchor = onAnchor(value);
            return new Alias(ref.anchor);
        }
        else {
            ref = { anchor: null, node: null };
            sourceObjects.set(value, ref);
        }
    }
    if (tagName && tagName.startsWith("!!"))
        tagName = defaultTagPrefix + tagName.slice(2);
    let tagObj = findTagObject(value, tagName, schema4.tags);
    if (!tagObj) {
        if (value && typeof value.toJSON === "function")
            value = value.toJSON();
        if (!value || typeof value !== "object") {
            const node2 = new Scalar(value);
            if (ref)
                ref.node = node2;
            return node2;
        }
        tagObj = value instanceof Map ? schema4[MAP] : Symbol.iterator in Object(value) ? schema4[SEQ] : schema4[MAP];
    }
    if (onTagObj) {
        onTagObj(tagObj);
        delete ctx.onTagObj;
    }
    const node = (tagObj === null || tagObj === void 0 ? void 0 : tagObj.createNode) ? tagObj.createNode(ctx.schema, value, ctx) : new Scalar(value);
    if (tagName)
        node.tag = tagName;
    if (ref)
        ref.node = node;
    return node;
}
// ../../node_modules/yaml/browser/dist/nodes/Collection.js
function collectionFromPath(schema4, path5, value) {
    let v = value;
    for (let i = path5.length - 1; i >= 0; --i) {
        const k = path5[i];
        if (typeof k === "number" && Number.isInteger(k) && k >= 0) {
            const a2 = [];
            a2[k] = v;
            v = a2;
        }
        else {
            v = /* @__PURE__ */ new Map([[k, v]]);
        }
    }
    return createNode(v, void 0, {
        aliasDuplicateObjects: false,
        keepUndefined: false,
        onAnchor: () => {
            throw new Error("This should not happen, please report a bug.");
        },
        schema: schema4,
        sourceObjects: /* @__PURE__ */ new Map()
    });
}
var isEmptyPath = (path5) => path5 == null || typeof path5 === "object" && !!path5[Symbol.iterator]().next().done;
var Collection = class extends NodeBase {
    constructor(type, schema4) {
        super(type);
        Object.defineProperty(this, "schema", {
            value: schema4,
            configurable: true,
            enumerable: false,
            writable: true
        });
    }
    /**
     * Create a copy of this collection.
     *
     * @param schema - If defined, overwrites the original's schema
     */
    clone(schema4) {
        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
        if (schema4)
            copy.schema = schema4;
        copy.items = copy.items.map((it) => isNode(it) || isPair(it) ? it.clone(schema4) : it);
        if (this.range)
            copy.range = this.range.slice();
        return copy;
    }
    /**
     * Adds a value to the collection. For `!!map` and `!!omap` the value must
     * be a Pair instance or a `{ key, value }` object, which may not have a key
     * that already exists in the map.
     */
    addIn(path5, value) {
        if (isEmptyPath(path5))
            this.add(value);
        else {
            const [key, ...rest] = path5;
            const node = this.get(key, true);
            if (isCollection(node))
                node.addIn(rest, value);
            else if (node === void 0 && this.schema)
                this.set(key, collectionFromPath(this.schema, rest, value));
            else
                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
        }
    }
    /**
     * Removes a value from the collection.
     * @returns `true` if the item was found and removed.
     */
    deleteIn(path5) {
        const [key, ...rest] = path5;
        if (rest.length === 0)
            return this.delete(key);
        const node = this.get(key, true);
        if (isCollection(node))
            return node.deleteIn(rest);
        else
            throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
    }
    /**
     * Returns item at `key`, or `undefined` if not found. By default unwraps
     * scalar values from their surrounding node; to disable set `keepScalar` to
     * `true` (collections are always returned intact).
     */
    getIn(path5, keepScalar) {
        const [key, ...rest] = path5;
        const node = this.get(key, true);
        if (rest.length === 0)
            return !keepScalar && isScalar(node) ? node.value : node;
        else
            return isCollection(node) ? node.getIn(rest, keepScalar) : void 0;
    }
    hasAllNullValues(allowScalar) {
        return this.items.every((node) => {
            if (!isPair(node))
                return false;
            const n = node.value;
            return n == null || allowScalar && isScalar(n) && n.value == null && !n.commentBefore && !n.comment && !n.tag;
        });
    }
    /**
     * Checks if the collection includes a value with the key `key`.
     */
    hasIn(path5) {
        const [key, ...rest] = path5;
        if (rest.length === 0)
            return this.has(key);
        const node = this.get(key, true);
        return isCollection(node) ? node.hasIn(rest) : false;
    }
    /**
     * Sets a value in this collection. For `!!set`, `value` needs to be a
     * boolean to add/remove the item from the set.
     */
    setIn(path5, value) {
        const [key, ...rest] = path5;
        if (rest.length === 0) {
            this.set(key, value);
        }
        else {
            const node = this.get(key, true);
            if (isCollection(node))
                node.setIn(rest, value);
            else if (node === void 0 && this.schema)
                this.set(key, collectionFromPath(this.schema, rest, value));
            else
                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
        }
    }
};
Collection.maxFlowStringSingleLineLength = 60;
// ../../node_modules/yaml/browser/dist/stringify/stringifyComment.js
var stringifyComment = (str) => str.replace(/^(?!$)(?: $)?/gm, "#");
function indentComment(comment, indent) {
    if (/^\n+$/.test(comment))
        return comment.substring(1);
    return indent ? comment.replace(/^(?! *$)/gm, indent) : comment;
}
var lineComment = (str, indent, comment) => comment.includes("\n") ? "\n" + indentComment(comment, indent) : (str.endsWith(" ") ? "" : " ") + comment;
// ../../node_modules/yaml/browser/dist/stringify/foldFlowLines.js
var FOLD_FLOW = "flow";
var FOLD_BLOCK = "block";
var FOLD_QUOTED = "quoted";
function foldFlowLines(text, indent, mode = "flow", { indentAtStart, lineWidth = 80, minContentWidth = 20, onFold, onOverflow } = {}) {
    if (!lineWidth || lineWidth < 0)
        return text;
    const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);
    if (text.length <= endStep)
        return text;
    const folds = [];
    const escapedFolds = {};
    let end = lineWidth - indent.length;
    if (typeof indentAtStart === "number") {
        if (indentAtStart > lineWidth - Math.max(2, minContentWidth))
            folds.push(0);
        else
            end = lineWidth - indentAtStart;
    }
    let split = void 0;
    let prev = void 0;
    let overflow = false;
    let i = -1;
    let escStart = -1;
    let escEnd = -1;
    if (mode === FOLD_BLOCK) {
        i = consumeMoreIndentedLines(text, i);
        if (i !== -1)
            end = i + endStep;
    }
    for (let ch; ch = text[i += 1];) {
        if (mode === FOLD_QUOTED && ch === "\\") {
            escStart = i;
            switch (text[i + 1]) {
                case "x":
                    i += 3;
                    break;
                case "u":
                    i += 5;
                    break;
                case "U":
                    i += 9;
                    break;
                default:
                    i += 1;
            }
            escEnd = i;
        }
        if (ch === "\n") {
            if (mode === FOLD_BLOCK)
                i = consumeMoreIndentedLines(text, i);
            end = i + endStep;
            split = void 0;
        }
        else {
            if (ch === " " && prev && prev !== " " && prev !== "\n" && prev !== "	") {
                const next = text[i + 1];
                if (next && next !== " " && next !== "\n" && next !== "	")
                    split = i;
            }
            if (i >= end) {
                if (split) {
                    folds.push(split);
                    end = split + endStep;
                    split = void 0;
                }
                else if (mode === FOLD_QUOTED) {
                    while (prev === " " || prev === "	") {
                        prev = ch;
                        ch = text[i += 1];
                        overflow = true;
                    }
                    const j = i > escEnd + 1 ? i - 2 : escStart - 1;
                    if (escapedFolds[j])
                        return text;
                    folds.push(j);
                    escapedFolds[j] = true;
                    end = j + endStep;
                    split = void 0;
                }
                else {
                    overflow = true;
                }
            }
        }
        prev = ch;
    }
    if (overflow && onOverflow)
        onOverflow();
    if (folds.length === 0)
        return text;
    if (onFold)
        onFold();
    let res = text.slice(0, folds[0]);
    for (let i2 = 0; i2 < folds.length; ++i2) {
        const fold = folds[i2];
        const end2 = folds[i2 + 1] || text.length;
        if (fold === 0)
            res = `
${indent}${text.slice(0, end2)}`;
        else {
            if (mode === FOLD_QUOTED && escapedFolds[fold])
                res += `${text[fold]}\\`;
            res += `
${indent}${text.slice(fold + 1, end2)}`;
        }
    }
    return res;
}
function consumeMoreIndentedLines(text, i) {
    let ch = text[i + 1];
    while (ch === " " || ch === "	") {
        do {
            ch = text[i += 1];
        } while (ch && ch !== "\n");
        ch = text[i + 1];
    }
    return i;
}
// ../../node_modules/yaml/browser/dist/stringify/stringifyString.js
var getFoldOptions = (ctx) => ({
    indentAtStart: ctx.indentAtStart,
    lineWidth: ctx.options.lineWidth,
    minContentWidth: ctx.options.minContentWidth
});
var containsDocumentMarker = (str) => /^(%|---|\.\.\.)/m.test(str);
function lineLengthOverLimit(str, lineWidth, indentLength) {
    if (!lineWidth || lineWidth < 0)
        return false;
    const limit = lineWidth - indentLength;
    const strLen = str.length;
    if (strLen <= limit)
        return false;
    for (let i = 0, start = 0; i < strLen; ++i) {
        if (str[i] === "\n") {
            if (i - start > limit)
                return true;
            start = i + 1;
            if (strLen - start <= limit)
                return false;
        }
    }
    return true;
}
function doubleQuotedString(value, ctx) {
    const json = JSON.stringify(value);
    if (ctx.options.doubleQuotedAsJSON)
        return json;
    const { implicitKey } = ctx;
    const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;
    const indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "");
    let str = "";
    let start = 0;
    for (let i = 0, ch = json[i]; ch; ch = json[++i]) {
        if (ch === " " && json[i + 1] === "\\" && json[i + 2] === "n") {
            str += json.slice(start, i) + "\\ ";
            i += 1;
            start = i;
            ch = "\\";
        }
        if (ch === "\\")
            switch (json[i + 1]) {
                case "u":
                    {
                        str += json.slice(start, i);
                        const code = json.substr(i + 2, 4);
                        switch (code) {
                            case "0000":
                                str += "\\0";
                                break;
                            case "0007":
                                str += "\\a";
                                break;
                            case "000b":
                                str += "\\v";
                                break;
                            case "001b":
                                str += "\\e";
                                break;
                            case "0085":
                                str += "\\N";
                                break;
                            case "00a0":
                                str += "\\_";
                                break;
                            case "2028":
                                str += "\\L";
                                break;
                            case "2029":
                                str += "\\P";
                                break;
                            default:
                                if (code.substr(0, 2) === "00")
                                    str += "\\x" + code.substr(2);
                                else
                                    str += json.substr(i, 6);
                        }
                        i += 5;
                        start = i + 1;
                    }
                    break;
                case "n":
                    if (implicitKey || json[i + 2] === '"' || json.length < minMultiLineLength) {
                        i += 1;
                    }
                    else {
                        str += json.slice(start, i) + "\n\n";
                        while (json[i + 2] === "\\" && json[i + 3] === "n" && json[i + 4] !== '"') {
                            str += "\n";
                            i += 2;
                        }
                        str += indent;
                        if (json[i + 2] === " ")
                            str += "\\";
                        i += 1;
                        start = i + 1;
                    }
                    break;
                default:
                    i += 1;
            }
    }
    str = start ? str + json.slice(start) : json;
    return implicitKey ? str : foldFlowLines(str, indent, FOLD_QUOTED, getFoldOptions(ctx));
}
function singleQuotedString(value, ctx) {
    if (ctx.options.singleQuote === false || ctx.implicitKey && value.includes("\n") || /[ \t]\n|\n[ \t]/.test(value))
        return doubleQuotedString(value, ctx);
    const indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "");
    const res = "'" + value.replace(/'/g, "''").replace(/\n+/g, `$&
${indent}`) + "'";
    return ctx.implicitKey ? res : foldFlowLines(res, indent, FOLD_FLOW, getFoldOptions(ctx));
}
function quotedString(value, ctx) {
    const { singleQuote } = ctx.options;
    let qs;
    if (singleQuote === false)
        qs = doubleQuotedString;
    else {
        const hasDouble = value.includes('"');
        const hasSingle = value.includes("'");
        if (hasDouble && !hasSingle)
            qs = singleQuotedString;
        else if (hasSingle && !hasDouble)
            qs = doubleQuotedString;
        else
            qs = singleQuote ? singleQuotedString : doubleQuotedString;
    }
    return qs(value, ctx);
}
function blockString({ comment, type, value }, ctx, onComment, onChompKeep) {
    const { blockQuote, commentString, lineWidth } = ctx.options;
    if (!blockQuote || /\n[\t ]+$/.test(value) || /^\s*$/.test(value)) {
        return quotedString(value, ctx);
    }
    const indent = ctx.indent || (ctx.forceBlockIndent || containsDocumentMarker(value) ? "  " : "");
    const literal = blockQuote === "literal" ? true : blockQuote === "folded" || type === Scalar.BLOCK_FOLDED ? false : type === Scalar.BLOCK_LITERAL ? true : !lineLengthOverLimit(value, lineWidth, indent.length);
    if (!value)
        return literal ? "|\n" : ">\n";
    let chomp;
    let endStart;
    for (endStart = value.length; endStart > 0; --endStart) {
        const ch = value[endStart - 1];
        if (ch !== "\n" && ch !== "	" && ch !== " ")
            break;
    }
    let end = value.substring(endStart);
    const endNlPos = end.indexOf("\n");
    if (endNlPos === -1) {
        chomp = "-";
    }
    else if (value === end || endNlPos !== end.length - 1) {
        chomp = "+";
        if (onChompKeep)
            onChompKeep();
    }
    else {
        chomp = "";
    }
    if (end) {
        value = value.slice(0, -end.length);
        if (end[end.length - 1] === "\n")
            end = end.slice(0, -1);
        end = end.replace(/\n+(?!\n|$)/g, `$&${indent}`);
    }
    let startWithSpace = false;
    let startEnd;
    let startNlPos = -1;
    for (startEnd = 0; startEnd < value.length; ++startEnd) {
        const ch = value[startEnd];
        if (ch === " ")
            startWithSpace = true;
        else if (ch === "\n")
            startNlPos = startEnd;
        else
            break;
    }
    let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);
    if (start) {
        value = value.substring(start.length);
        start = start.replace(/\n+/g, `$&${indent}`);
    }
    const indentSize = indent ? "2" : "1";
    let header = (literal ? "|" : ">") + (startWithSpace ? indentSize : "") + chomp;
    if (comment) {
        header += " " + commentString(comment.replace(/ ?[\r\n]+/g, " "));
        if (onComment)
            onComment();
    }
    if (literal) {
        value = value.replace(/\n+/g, `$&${indent}`);
        return `${header}
${indent}${start}${value}${end}`;
    }
    value = value.replace(/\n+/g, "\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, "$1$2").replace(/\n+/g, `$&${indent}`);
    const body = foldFlowLines(`${start}${value}${end}`, indent, FOLD_BLOCK, getFoldOptions(ctx));
    return `${header}
${indent}${body}`;
}
function plainString(item, ctx, onComment, onChompKeep) {
    const { type, value } = item;
    const { actualString, implicitKey, indent, inFlow } = ctx;
    if (implicitKey && /[\n[\]{},]/.test(value) || inFlow && /[[\]{},]/.test(value)) {
        return quotedString(value, ctx);
    }
    if (!value || /^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(value)) {
        return implicitKey || inFlow || value.indexOf("\n") === -1 ? quotedString(value, ctx) : blockString(item, ctx, onComment, onChompKeep);
    }
    if (!implicitKey && !inFlow && type !== Scalar.PLAIN && value.indexOf("\n") !== -1) {
        return blockString(item, ctx, onComment, onChompKeep);
    }
    if (indent === "" && containsDocumentMarker(value)) {
        ctx.forceBlockIndent = true;
        return blockString(item, ctx, onComment, onChompKeep);
    }
    const str = value.replace(/\n+/g, `$&
${indent}`);
    if (actualString) {
        const test = (tag) => {
            var _a;
            return tag.default && tag.tag !== "tag:yaml.org,2002:str" && ((_a = tag.test) === null || _a === void 0 ? void 0 : _a.test(str));
        };
        const { compat, tags } = ctx.doc.schema;
        if (tags.some(test) || (compat === null || compat === void 0 ? void 0 : compat.some(test)))
            return quotedString(value, ctx);
    }
    return implicitKey ? str : foldFlowLines(str, indent, FOLD_FLOW, getFoldOptions(ctx));
}
function stringifyString(item, ctx, onComment, onChompKeep) {
    const { implicitKey, inFlow } = ctx;
    const ss = typeof item.value === "string" ? item : Object.assign({}, item, { value: String(item.value) });
    let { type } = item;
    if (type !== Scalar.QUOTE_DOUBLE) {
        if (/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(ss.value))
            type = Scalar.QUOTE_DOUBLE;
    }
    const _stringify = (_type) => {
        switch (_type) {
            case Scalar.BLOCK_FOLDED:
            case Scalar.BLOCK_LITERAL:
                return implicitKey || inFlow ? quotedString(ss.value, ctx) : blockString(ss, ctx, onComment, onChompKeep);
            case Scalar.QUOTE_DOUBLE:
                return doubleQuotedString(ss.value, ctx);
            case Scalar.QUOTE_SINGLE:
                return singleQuotedString(ss.value, ctx);
            case Scalar.PLAIN:
                return plainString(ss, ctx, onComment, onChompKeep);
            default:
                return null;
        }
    };
    let res = _stringify(type);
    if (res === null) {
        const { defaultKeyType, defaultStringType } = ctx.options;
        const t = implicitKey && defaultKeyType || defaultStringType;
        res = _stringify(t);
        if (res === null)
            throw new Error(`Unsupported default string type ${t}`);
    }
    return res;
}
// ../../node_modules/yaml/browser/dist/stringify/stringify.js
function createStringifyContext(doc, options) {
    const opt = Object.assign({
        blockQuote: true,
        commentString: stringifyComment,
        defaultKeyType: null,
        defaultStringType: "PLAIN",
        directives: null,
        doubleQuotedAsJSON: false,
        doubleQuotedMinMultiLineLength: 40,
        falseStr: "false",
        indentSeq: true,
        lineWidth: 80,
        minContentWidth: 20,
        nullStr: "null",
        simpleKeys: false,
        singleQuote: null,
        trueStr: "true",
        verifyAliasOrder: true
    }, doc.schema.toStringOptions, options);
    let inFlow;
    switch (opt.collectionStyle) {
        case "block":
            inFlow = false;
            break;
        case "flow":
            inFlow = true;
            break;
        default:
            inFlow = null;
    }
    return {
        anchors: /* @__PURE__ */ new Set(),
        doc,
        indent: "",
        indentStep: typeof opt.indent === "number" ? " ".repeat(opt.indent) : "  ",
        inFlow,
        options: opt
    };
}
function getTagObject(tags, item) {
    if (item.tag) {
        const match = tags.filter((t) => t.tag === item.tag);
        if (match.length > 0)
            return match.find((t) => t.format === item.format) || match[0];
    }
    let tagObj = void 0;
    let obj;
    if (isScalar(item)) {
        obj = item.value;
        const match = tags.filter((t) => t.identify && t.identify(obj));
        tagObj = match.find((t) => t.format === item.format) || match.find((t) => !t.format);
    }
    else {
        obj = item;
        tagObj = tags.find((t) => t.nodeClass && obj instanceof t.nodeClass);
    }
    if (!tagObj) {
        const name = obj && obj.constructor ? obj.constructor.name : typeof obj;
        throw new Error(`Tag not resolved for ${name} value`);
    }
    return tagObj;
}
function stringifyProps(node, tagObj, { anchors, doc }) {
    if (!doc.directives)
        return "";
    const props = [];
    const anchor = (isScalar(node) || isCollection(node)) && node.anchor;
    if (anchor && anchorIsValid(anchor)) {
        anchors.add(anchor);
        props.push(`&${anchor}`);
    }
    const tag = node.tag || (tagObj.default ? null : tagObj.tag);
    if (tag)
        props.push(doc.directives.tagString(tag));
    return props.join(" ");
}
function stringify(item, ctx, onComment, onChompKeep) {
    var _a;
    if (isPair(item))
        return item.toString(ctx, onComment, onChompKeep);
    if (isAlias(item)) {
        if (ctx.doc.directives)
            return item.toString(ctx);
        if ((_a = ctx.resolvedAliases) === null || _a === void 0 ? void 0 : _a.has(item)) {
            throw new TypeError(`Cannot stringify circular structure without alias nodes`);
        }
        else {
            if (ctx.resolvedAliases)
                ctx.resolvedAliases.add(item);
            else
                ctx.resolvedAliases = /* @__PURE__ */ new Set([item]);
            item = item.resolve(ctx.doc);
        }
    }
    let tagObj = void 0;
    const node = isNode(item) ? item : ctx.doc.createNode(item, { onTagObj: (o) => tagObj = o });
    if (!tagObj)
        tagObj = getTagObject(ctx.doc.schema.tags, node);
    const props = stringifyProps(node, tagObj, ctx);
    if (props.length > 0)
        ctx.indentAtStart = (ctx.indentAtStart || 0) + props.length + 1;
    const str = typeof tagObj.stringify === "function" ? tagObj.stringify(node, ctx, onComment, onChompKeep) : isScalar(node) ? stringifyString(node, ctx, onComment, onChompKeep) : node.toString(ctx, onComment, onChompKeep);
    if (!props)
        return str;
    return isScalar(node) || str[0] === "{" || str[0] === "[" ? `${props} ${str}` : `${props}
${ctx.indent}${str}`;
}
// ../../node_modules/yaml/browser/dist/stringify/stringifyPair.js
function stringifyPair({ key, value }, ctx, onComment, onChompKeep) {
    const { allNullValues, doc, indent, indentStep, options: { commentString, indentSeq, simpleKeys } } = ctx;
    let keyComment = isNode(key) && key.comment || null;
    if (simpleKeys) {
        if (keyComment) {
            throw new Error("With simple keys, key nodes cannot have comments");
        }
        if (isCollection(key)) {
            const msg = "With simple keys, collection cannot be used as a key value";
            throw new Error(msg);
        }
    }
    let explicitKey = !simpleKeys && (!key || keyComment && value == null && !ctx.inFlow || isCollection(key) || (isScalar(key) ? key.type === Scalar.BLOCK_FOLDED || key.type === Scalar.BLOCK_LITERAL : typeof key === "object"));
    ctx = Object.assign({}, ctx, {
        allNullValues: false,
        implicitKey: !explicitKey && (simpleKeys || !allNullValues),
        indent: indent + indentStep
    });
    let keyCommentDone = false;
    let chompKeep = false;
    let str = stringify(key, ctx, () => keyCommentDone = true, () => chompKeep = true);
    if (!explicitKey && !ctx.inFlow && str.length > 1024) {
        if (simpleKeys)
            throw new Error("With simple keys, single line scalar must not span more than 1024 characters");
        explicitKey = true;
    }
    if (ctx.inFlow) {
        if (allNullValues || value == null) {
            if (keyCommentDone && onComment)
                onComment();
            return str === "" ? "?" : explicitKey ? `? ${str}` : str;
        }
    }
    else if (allNullValues && !simpleKeys || value == null && explicitKey) {
        str = `? ${str}`;
        if (keyComment && !keyCommentDone) {
            str += lineComment(str, ctx.indent, commentString(keyComment));
        }
        else if (chompKeep && onChompKeep)
            onChompKeep();
        return str;
    }
    if (keyCommentDone)
        keyComment = null;
    if (explicitKey) {
        if (keyComment)
            str += lineComment(str, ctx.indent, commentString(keyComment));
        str = `? ${str}
${indent}:`;
    }
    else {
        str = `${str}:`;
        if (keyComment)
            str += lineComment(str, ctx.indent, commentString(keyComment));
    }
    let vcb = "";
    let valueComment = null;
    if (isNode(value)) {
        if (value.spaceBefore)
            vcb = "\n";
        if (value.commentBefore) {
            const cs = commentString(value.commentBefore);
            vcb += `
${indentComment(cs, ctx.indent)}`;
        }
        valueComment = value.comment;
    }
    else if (value && typeof value === "object") {
        value = doc.createNode(value);
    }
    ctx.implicitKey = false;
    if (!explicitKey && !keyComment && isScalar(value))
        ctx.indentAtStart = str.length + 1;
    chompKeep = false;
    if (!indentSeq && indentStep.length >= 2 && !ctx.inFlow && !explicitKey && isSeq(value) && !value.flow && !value.tag && !value.anchor) {
        ctx.indent = ctx.indent.substr(2);
    }
    let valueCommentDone = false;
    const valueStr = stringify(value, ctx, () => valueCommentDone = true, () => chompKeep = true);
    let ws = " ";
    if (vcb || keyComment) {
        ws = valueStr === "" && !ctx.inFlow ? vcb : `${vcb}
${ctx.indent}`;
    }
    else if (!explicitKey && isCollection(value)) {
        const flow = valueStr[0] === "[" || valueStr[0] === "{";
        if (!flow || valueStr.includes("\n"))
            ws = `
${ctx.indent}`;
    }
    else if (valueStr === "" || valueStr[0] === "\n")
        ws = "";
    str += ws + valueStr;
    if (ctx.inFlow) {
        if (valueCommentDone && onComment)
            onComment();
    }
    else if (valueComment && !valueCommentDone) {
        str += lineComment(str, ctx.indent, commentString(valueComment));
    }
    else if (chompKeep && onChompKeep) {
        onChompKeep();
    }
    return str;
}
// ../../node_modules/yaml/browser/dist/log.js
function warn(logLevel, warning) {
    if (logLevel === "debug" || logLevel === "warn") {
        if (typeof process !== "undefined" && process.emitWarning)
            process.emitWarning(warning);
        else
            console.warn(warning);
    }
}
// ../../node_modules/yaml/browser/dist/nodes/addPairToJSMap.js
var MERGE_KEY = "<<";
function addPairToJSMap(ctx, map2, { key, value }) {
    if (ctx && ctx.doc.schema.merge && isMergeKey(key)) {
        value = isAlias(value) ? value.resolve(ctx.doc) : value;
        if (isSeq(value))
            for (const it of value.items)
                mergeToJSMap(ctx, map2, it);
        else if (Array.isArray(value))
            for (const it of value)
                mergeToJSMap(ctx, map2, it);
        else
            mergeToJSMap(ctx, map2, value);
    }
    else {
        const jsKey = toJS(key, "", ctx);
        if (map2 instanceof Map) {
            map2.set(jsKey, toJS(value, jsKey, ctx));
        }
        else if (map2 instanceof Set) {
            map2.add(jsKey);
        }
        else {
            const stringKey = stringifyKey(key, jsKey, ctx);
            const jsValue = toJS(value, stringKey, ctx);
            if (stringKey in map2)
                Object.defineProperty(map2, stringKey, {
                    value: jsValue,
                    writable: true,
                    enumerable: true,
                    configurable: true
                });
            else
                map2[stringKey] = jsValue;
        }
    }
    return map2;
}
var isMergeKey = (key) => key === MERGE_KEY || isScalar(key) && key.value === MERGE_KEY && (!key.type || key.type === Scalar.PLAIN);
function mergeToJSMap(ctx, map2, value) {
    const source = ctx && isAlias(value) ? value.resolve(ctx.doc) : value;
    if (!isMap(source))
        throw new Error("Merge sources must be maps or map aliases");
    const srcMap = source.toJSON(null, ctx, Map);
    for (const [key, value2] of srcMap) {
        if (map2 instanceof Map) {
            if (!map2.has(key))
                map2.set(key, value2);
        }
        else if (map2 instanceof Set) {
            map2.add(key);
        }
        else if (!Object.prototype.hasOwnProperty.call(map2, key)) {
            Object.defineProperty(map2, key, {
                value: value2,
                writable: true,
                enumerable: true,
                configurable: true
            });
        }
    }
    return map2;
}
function stringifyKey(key, jsKey, ctx) {
    if (jsKey === null)
        return "";
    if (typeof jsKey !== "object")
        return String(jsKey);
    if (isNode(key) && ctx && ctx.doc) {
        const strCtx = createStringifyContext(ctx.doc, {});
        strCtx.anchors = /* @__PURE__ */ new Set();
        for (const node of ctx.anchors.keys())
            strCtx.anchors.add(node.anchor);
        strCtx.inFlow = true;
        strCtx.inStringifyKey = true;
        const strKey = key.toString(strCtx);
        if (!ctx.mapKeyWarned) {
            let jsonStr = JSON.stringify(strKey);
            if (jsonStr.length > 40)
                jsonStr = jsonStr.substring(0, 36) + '..."';
            warn(ctx.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${jsonStr}. Set mapAsMap: true to use object keys.`);
            ctx.mapKeyWarned = true;
        }
        return strKey;
    }
    return JSON.stringify(jsKey);
}
// ../../node_modules/yaml/browser/dist/nodes/Pair.js
function createPair(key, value, ctx) {
    const k = createNode(key, void 0, ctx);
    const v = createNode(value, void 0, ctx);
    return new Pair(k, v);
}
var Pair = class {
    constructor(key, value = null) {
        Object.defineProperty(this, NODE_TYPE, { value: PAIR });
        this.key = key;
        this.value = value;
    }
    clone(schema4) {
        let { key, value } = this;
        if (isNode(key))
            key = key.clone(schema4);
        if (isNode(value))
            value = value.clone(schema4);
        return new Pair(key, value);
    }
    toJSON(_, ctx) {
        const pair = ctx && ctx.mapAsMap ? /* @__PURE__ */ new Map() : {};
        return addPairToJSMap(ctx, pair, this);
    }
    toString(ctx, onComment, onChompKeep) {
        return ctx && ctx.doc ? stringifyPair(this, ctx, onComment, onChompKeep) : JSON.stringify(this);
    }
};
// ../../node_modules/yaml/browser/dist/stringify/stringifyCollection.js
function stringifyCollection(collection, ctx, options) {
    var _a;
    const flow = (_a = ctx.inFlow) !== null && _a !== void 0 ? _a : collection.flow;
    const stringify4 = flow ? stringifyFlowCollection : stringifyBlockCollection;
    return stringify4(collection, ctx, options);
}
function stringifyBlockCollection({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {
    const { indent, options: { commentString } } = ctx;
    const itemCtx = Object.assign({}, ctx, { indent: itemIndent, type: null });
    let chompKeep = false;
    const lines = [];
    for (let i = 0; i < items.length; ++i) {
        const item = items[i];
        let comment2 = null;
        if (isNode(item)) {
            if (!chompKeep && item.spaceBefore)
                lines.push("");
            addCommentBefore(ctx, lines, item.commentBefore, chompKeep);
            if (item.comment)
                comment2 = item.comment;
        }
        else if (isPair(item)) {
            const ik = isNode(item.key) ? item.key : null;
            if (ik) {
                if (!chompKeep && ik.spaceBefore)
                    lines.push("");
                addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);
            }
        }
        chompKeep = false;
        let str2 = stringify(item, itemCtx, () => comment2 = null, () => chompKeep = true);
        if (comment2)
            str2 += lineComment(str2, itemIndent, commentString(comment2));
        if (chompKeep && comment2)
            chompKeep = false;
        lines.push(blockItemPrefix + str2);
    }
    let str;
    if (lines.length === 0) {
        str = flowChars.start + flowChars.end;
    }
    else {
        str = lines[0];
        for (let i = 1; i < lines.length; ++i) {
            const line = lines[i];
            str += line ? `
${indent}${line}` : "\n";
        }
    }
    if (comment) {
        str += "\n" + indentComment(commentString(comment), indent);
        if (onComment)
            onComment();
    }
    else if (chompKeep && onChompKeep)
        onChompKeep();
    return str;
}
function stringifyFlowCollection({ comment, items }, ctx, { flowChars, itemIndent, onComment }) {
    const { indent, indentStep, options: { commentString } } = ctx;
    itemIndent += indentStep;
    const itemCtx = Object.assign({}, ctx, {
        indent: itemIndent,
        inFlow: true,
        type: null
    });
    let reqNewline = false;
    let linesAtValue = 0;
    const lines = [];
    for (let i = 0; i < items.length; ++i) {
        const item = items[i];
        let comment2 = null;
        if (isNode(item)) {
            if (item.spaceBefore)
                lines.push("");
            addCommentBefore(ctx, lines, item.commentBefore, false);
            if (item.comment)
                comment2 = item.comment;
        }
        else if (isPair(item)) {
            const ik = isNode(item.key) ? item.key : null;
            if (ik) {
                if (ik.spaceBefore)
                    lines.push("");
                addCommentBefore(ctx, lines, ik.commentBefore, false);
                if (ik.comment)
                    reqNewline = true;
            }
            const iv = isNode(item.value) ? item.value : null;
            if (iv) {
                if (iv.comment)
                    comment2 = iv.comment;
                if (iv.commentBefore)
                    reqNewline = true;
            }
            else if (item.value == null && ik && ik.comment) {
                comment2 = ik.comment;
            }
        }
        if (comment2)
            reqNewline = true;
        let str2 = stringify(item, itemCtx, () => comment2 = null);
        if (i < items.length - 1)
            str2 += ",";
        if (comment2)
            str2 += lineComment(str2, itemIndent, commentString(comment2));
        if (!reqNewline && (lines.length > linesAtValue || str2.includes("\n")))
            reqNewline = true;
        lines.push(str2);
        linesAtValue = lines.length;
    }
    let str;
    const { start, end } = flowChars;
    if (lines.length === 0) {
        str = start + end;
    }
    else {
        if (!reqNewline) {
            const len = lines.reduce((sum, line) => sum + line.length + 2, 2);
            reqNewline = len > Collection.maxFlowStringSingleLineLength;
        }
        if (reqNewline) {
            str = start;
            for (const line of lines)
                str += line ? `
${indentStep}${indent}${line}` : "\n";
            str += `
${indent}${end}`;
        }
        else {
            str = `${start} ${lines.join(" ")} ${end}`;
        }
    }
    if (comment) {
        str += lineComment(str, commentString(comment), indent);
        if (onComment)
            onComment();
    }
    return str;
}
function addCommentBefore({ indent, options: { commentString } }, lines, comment, chompKeep) {
    if (comment && chompKeep)
        comment = comment.replace(/^\n+/, "");
    if (comment) {
        const ic = indentComment(commentString(comment), indent);
        lines.push(ic.trimStart());
    }
}
// ../../node_modules/yaml/browser/dist/nodes/YAMLMap.js
function findPair(items, key) {
    const k = isScalar(key) ? key.value : key;
    for (const it of items) {
        if (isPair(it)) {
            if (it.key === key || it.key === k)
                return it;
            if (isScalar(it.key) && it.key.value === k)
                return it;
        }
    }
    return void 0;
}
var YAMLMap = class extends Collection {
    constructor(schema4) {
        super(MAP, schema4);
        this.items = [];
    }
    static get tagName() {
        return "tag:yaml.org,2002:map";
    }
    /**
     * Adds a value to the collection.
     *
     * @param overwrite - If not set `true`, using a key that is already in the
     *   collection will throw. Otherwise, overwrites the previous value.
     */
    add(pair, overwrite) {
        let _pair;
        if (isPair(pair))
            _pair = pair;
        else if (!pair || typeof pair !== "object" || !("key" in pair)) {
            _pair = new Pair(pair, pair.value);
        }
        else
            _pair = new Pair(pair.key, pair.value);
        const prev = findPair(this.items, _pair.key);
        const sortEntries = this.schema && this.schema.sortMapEntries;
        if (prev) {
            if (!overwrite)
                throw new Error(`Key ${_pair.key} already set`);
            if (isScalar(prev.value) && isScalarValue(_pair.value))
                prev.value.value = _pair.value;
            else
                prev.value = _pair.value;
        }
        else if (sortEntries) {
            const i = this.items.findIndex((item) => sortEntries(_pair, item) < 0);
            if (i === -1)
                this.items.push(_pair);
            else
                this.items.splice(i, 0, _pair);
        }
        else {
            this.items.push(_pair);
        }
    }
    delete(key) {
        const it = findPair(this.items, key);
        if (!it)
            return false;
        const del = this.items.splice(this.items.indexOf(it), 1);
        return del.length > 0;
    }
    get(key, keepScalar) {
        const it = findPair(this.items, key);
        const node = it && it.value;
        return !keepScalar && isScalar(node) ? node.value : node;
    }
    has(key) {
        return !!findPair(this.items, key);
    }
    set(key, value) {
        this.add(new Pair(key, value), true);
    }
    /**
     * @param ctx - Conversion context, originally set in Document#toJS()
     * @param {Class} Type - If set, forces the returned collection type
     * @returns Instance of Type, Map, or Object
     */
    toJSON(_, ctx, Type) {
        const map2 = Type ? new Type() : ctx && ctx.mapAsMap ? /* @__PURE__ */ new Map() : {};
        if (ctx && ctx.onCreate)
            ctx.onCreate(map2);
        for (const item of this.items)
            addPairToJSMap(ctx, map2, item);
        return map2;
    }
    toString(ctx, onComment, onChompKeep) {
        if (!ctx)
            return JSON.stringify(this);
        for (const item of this.items) {
            if (!isPair(item))
                throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);
        }
        if (!ctx.allNullValues && this.hasAllNullValues(false))
            ctx = Object.assign({}, ctx, { allNullValues: true });
        return stringifyCollection(this, ctx, {
            blockItemPrefix: "",
            flowChars: { start: "{", end: "}" },
            itemIndent: ctx.indent || "",
            onChompKeep,
            onComment
        });
    }
};
// ../../node_modules/yaml/browser/dist/schema/common/map.js
function createMap(schema4, obj, ctx) {
    const { keepUndefined, replacer } = ctx;
    const map2 = new YAMLMap(schema4);
    const add = (key, value) => {
        if (typeof replacer === "function")
            value = replacer.call(obj, key, value);
        else if (Array.isArray(replacer) && !replacer.includes(key))
            return;
        if (value !== void 0 || keepUndefined)
            map2.items.push(createPair(key, value, ctx));
    };
    if (obj instanceof Map) {
        for (const [key, value] of obj)
            add(key, value);
    }
    else if (obj && typeof obj === "object") {
        for (const key of Object.keys(obj))
            add(key, obj[key]);
    }
    if (typeof schema4.sortMapEntries === "function") {
        map2.items.sort(schema4.sortMapEntries);
    }
    return map2;
}
var map = {
    collection: "map",
    createNode: createMap,
    default: true,
    nodeClass: YAMLMap,
    tag: "tag:yaml.org,2002:map",
    resolve(map2, onError) {
        if (!isMap(map2))
            onError("Expected a mapping for this tag");
        return map2;
    }
};
// ../../node_modules/yaml/browser/dist/nodes/YAMLSeq.js
var YAMLSeq = class extends Collection {
    constructor(schema4) {
        super(SEQ, schema4);
        this.items = [];
    }
    static get tagName() {
        return "tag:yaml.org,2002:seq";
    }
    add(value) {
        this.items.push(value);
    }
    /**
     * Removes a value from the collection.
     *
     * `key` must contain a representation of an integer for this to succeed.
     * It may be wrapped in a `Scalar`.
     *
     * @returns `true` if the item was found and removed.
     */
    delete(key) {
        const idx = asItemIndex(key);
        if (typeof idx !== "number")
            return false;
        const del = this.items.splice(idx, 1);
        return del.length > 0;
    }
    /**
     * Returns item at `key`, or `undefined` if not found. By default unwraps
     * scalar values from their surrounding node; to disable set `keepScalar` to
     * `true` (collections are always returned intact).
     *
     * `key` must contain a representation of an integer for this to succeed.
     * It may be wrapped in a `Scalar`.
     */
    get(key, keepScalar) {
        const idx = asItemIndex(key);
        if (typeof idx !== "number")
            return void 0;
        const it = this.items[idx];
        return !keepScalar && isScalar(it) ? it.value : it;
    }
    /**
     * Checks if the collection includes a value with the key `key`.
     *
     * `key` must contain a representation of an integer for this to succeed.
     * It may be wrapped in a `Scalar`.
     */
    has(key) {
        const idx = asItemIndex(key);
        return typeof idx === "number" && idx < this.items.length;
    }
    /**
     * Sets a value in this collection. For `!!set`, `value` needs to be a
     * boolean to add/remove the item from the set.
     *
     * If `key` does not contain a representation of an integer, this will throw.
     * It may be wrapped in a `Scalar`.
     */
    set(key, value) {
        const idx = asItemIndex(key);
        if (typeof idx !== "number")
            throw new Error(`Expected a valid index, not ${key}.`);
        const prev = this.items[idx];
        if (isScalar(prev) && isScalarValue(value))
            prev.value = value;
        else
            this.items[idx] = value;
    }
    toJSON(_, ctx) {
        const seq2 = [];
        if (ctx && ctx.onCreate)
            ctx.onCreate(seq2);
        let i = 0;
        for (const item of this.items)
            seq2.push(toJS(item, String(i++), ctx));
        return seq2;
    }
    toString(ctx, onComment, onChompKeep) {
        if (!ctx)
            return JSON.stringify(this);
        return stringifyCollection(this, ctx, {
            blockItemPrefix: "- ",
            flowChars: { start: "[", end: "]" },
            itemIndent: (ctx.indent || "") + "  ",
            onChompKeep,
            onComment
        });
    }
};
function asItemIndex(key) {
    let idx = isScalar(key) ? key.value : key;
    if (idx && typeof idx === "string")
        idx = Number(idx);
    return typeof idx === "number" && Number.isInteger(idx) && idx >= 0 ? idx : null;
}
// ../../node_modules/yaml/browser/dist/schema/common/seq.js
function createSeq(schema4, obj, ctx) {
    const { replacer } = ctx;
    const seq2 = new YAMLSeq(schema4);
    if (obj && Symbol.iterator in Object(obj)) {
        let i = 0;
        for (let it of obj) {
            if (typeof replacer === "function") {
                const key = obj instanceof Set ? it : String(i++);
                it = replacer.call(obj, key, it);
            }
            seq2.items.push(createNode(it, void 0, ctx));
        }
    }
    return seq2;
}
var seq = {
    collection: "seq",
    createNode: createSeq,
    default: true,
    nodeClass: YAMLSeq,
    tag: "tag:yaml.org,2002:seq",
    resolve(seq2, onError) {
        if (!isSeq(seq2))
            onError("Expected a sequence for this tag");
        return seq2;
    }
};
// ../../node_modules/yaml/browser/dist/schema/common/string.js
var string = {
    identify: (value) => typeof value === "string",
    default: true,
    tag: "tag:yaml.org,2002:str",
    resolve: (str) => str,
    stringify(item, ctx, onComment, onChompKeep) {
        ctx = Object.assign({ actualString: true }, ctx);
        return stringifyString(item, ctx, onComment, onChompKeep);
    }
};
// ../../node_modules/yaml/browser/dist/schema/common/null.js
var nullTag = {
    identify: (value) => value == null,
    createNode: () => new Scalar(null),
    default: true,
    tag: "tag:yaml.org,2002:null",
    test: /^(?:~|[Nn]ull|NULL)?$/,
    resolve: () => new Scalar(null),
    stringify: ({ source }, ctx) => typeof source === "string" && nullTag.test.test(source) ? source : ctx.options.nullStr
};
// ../../node_modules/yaml/browser/dist/schema/core/bool.js
var boolTag = {
    identify: (value) => typeof value === "boolean",
    default: true,
    tag: "tag:yaml.org,2002:bool",
    test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,
    resolve: (str) => new Scalar(str[0] === "t" || str[0] === "T"),
    stringify({ source, value }, ctx) {
        if (source && boolTag.test.test(source)) {
            const sv = source[0] === "t" || source[0] === "T";
            if (value === sv)
                return source;
        }
        return value ? ctx.options.trueStr : ctx.options.falseStr;
    }
};
// ../../node_modules/yaml/browser/dist/stringify/stringifyNumber.js
function stringifyNumber({ format: format3, minFractionDigits, tag, value }) {
    if (typeof value === "bigint")
        return String(value);
    const num = typeof value === "number" ? value : Number(value);
    if (!isFinite(num))
        return isNaN(num) ? ".nan" : num < 0 ? "-.inf" : ".inf";
    let n = JSON.stringify(value);
    if (!format3 && minFractionDigits && (!tag || tag === "tag:yaml.org,2002:float") && /^\d/.test(n)) {
        let i = n.indexOf(".");
        if (i < 0) {
            i = n.length;
            n += ".";
        }
        let d = minFractionDigits - (n.length - i - 1);
        while (d-- > 0)
            n += "0";
    }
    return n;
}
// ../../node_modules/yaml/browser/dist/schema/core/float.js
var floatNaN = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^(?:[-+]?\.(?:inf|Inf|INF|nan|NaN|NAN))$/,
    resolve: (str) => str.slice(-3).toLowerCase() === "nan" ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
    stringify: stringifyNumber
};
var floatExp = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    format: "EXP",
    test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
    resolve: (str) => parseFloat(str),
    stringify(node) {
        const num = Number(node.value);
        return isFinite(num) ? num.toExponential() : stringifyNumber(node);
    }
};
var dist_float = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,
    resolve(str) {
        const node = new Scalar(parseFloat(str));
        const dot = str.indexOf(".");
        if (dot !== -1 && str[str.length - 1] === "0")
            node.minFractionDigits = str.length - dot - 1;
        return node;
    },
    stringify: stringifyNumber
};
// ../../node_modules/yaml/browser/dist/schema/core/int.js
var intIdentify = (value) => typeof value === "bigint" || Number.isInteger(value);
var intResolve = (str, offset, radix, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix);
function intStringify(node, radix, prefix) {
    const { value } = node;
    if (intIdentify(value) && value >= 0)
        return prefix + value.toString(radix);
    return stringifyNumber(node);
}
var intOct = {
    identify: (value) => intIdentify(value) && value >= 0,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "OCT",
    test: /^0o[0-7]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 2, 8, opt),
    stringify: (node) => intStringify(node, 8, "0o")
};
var dist_int = {
    identify: intIdentify,
    default: true,
    tag: "tag:yaml.org,2002:int",
    test: /^[-+]?[0-9]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),
    stringify: stringifyNumber
};
var intHex = {
    identify: (value) => intIdentify(value) && value >= 0,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "HEX",
    test: /^0x[0-9a-fA-F]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),
    stringify: (node) => intStringify(node, 16, "0x")
};
// ../../node_modules/yaml/browser/dist/schema/core/schema.js
var schema = [
    map,
    seq,
    string,
    nullTag,
    boolTag,
    intOct,
    dist_int,
    intHex,
    floatNaN,
    floatExp,
    dist_float
];
// ../../node_modules/yaml/browser/dist/schema/json/schema.js
function intIdentify2(value) {
    return typeof value === "bigint" || Number.isInteger(value);
}
var stringifyJSON = ({ value }) => JSON.stringify(value);
var jsonScalars = [
    {
        identify: (value) => typeof value === "string",
        default: true,
        tag: "tag:yaml.org,2002:str",
        resolve: (str) => str,
        stringify: stringifyJSON
    },
    {
        identify: (value) => value == null,
        createNode: () => new Scalar(null),
        default: true,
        tag: "tag:yaml.org,2002:null",
        test: /^null$/,
        resolve: () => null,
        stringify: stringifyJSON
    },
    {
        identify: (value) => typeof value === "boolean",
        default: true,
        tag: "tag:yaml.org,2002:bool",
        test: /^true|false$/,
        resolve: (str) => str === "true",
        stringify: stringifyJSON
    },
    {
        identify: intIdentify2,
        default: true,
        tag: "tag:yaml.org,2002:int",
        test: /^-?(?:0|[1-9][0-9]*)$/,
        resolve: (str, _onError, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),
        stringify: ({ value }) => intIdentify2(value) ? value.toString() : JSON.stringify(value)
    },
    {
        identify: (value) => typeof value === "number",
        default: true,
        tag: "tag:yaml.org,2002:float",
        test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
        resolve: (str) => parseFloat(str),
        stringify: stringifyJSON
    }
];
var jsonError = {
    default: true,
    tag: "",
    test: /^/,
    resolve(str, onError) {
        onError(`Unresolved plain scalar ${JSON.stringify(str)}`);
        return str;
    }
};
var schema2 = [map, seq].concat(jsonScalars, jsonError);
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/binary.js
var binary = {
    identify: (value) => value instanceof Uint8Array,
    default: false,
    tag: "tag:yaml.org,2002:binary",
    /**
     * Returns a Buffer in node and an Uint8Array in browsers
     *
     * To use the resulting buffer as an image, you'll want to do something like:
     *
     *   const blob = new Blob([buffer], { type: 'image/jpeg' })
     *   document.querySelector('#photo').src = URL.createObjectURL(blob)
     */
    resolve(src, onError) {
        if (typeof Buffer === "function") {
            return Buffer.from(src, "base64");
        }
        else if (typeof atob === "function") {
            const str = atob(src.replace(/[\n\r]/g, ""));
            const buffer = new Uint8Array(str.length);
            for (let i = 0; i < str.length; ++i)
                buffer[i] = str.charCodeAt(i);
            return buffer;
        }
        else {
            onError("This environment does not support reading binary tags; either Buffer or atob is required");
            return src;
        }
    },
    stringify({ comment, type, value }, ctx, onComment, onChompKeep) {
        const buf = value;
        let str;
        if (typeof Buffer === "function") {
            str = buf instanceof Buffer ? buf.toString("base64") : Buffer.from(buf.buffer).toString("base64");
        }
        else if (typeof btoa === "function") {
            let s = "";
            for (let i = 0; i < buf.length; ++i)
                s += String.fromCharCode(buf[i]);
            str = btoa(s);
        }
        else {
            throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");
        }
        if (!type)
            type = Scalar.BLOCK_LITERAL;
        if (type !== Scalar.QUOTE_DOUBLE) {
            const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);
            const n = Math.ceil(str.length / lineWidth);
            const lines = new Array(n);
            for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {
                lines[i] = str.substr(o, lineWidth);
            }
            str = lines.join(type === Scalar.BLOCK_LITERAL ? "\n" : " ");
        }
        return stringifyString({ comment, type, value: str }, ctx, onComment, onChompKeep);
    }
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/pairs.js
function resolvePairs(seq2, onError) {
    if (isSeq(seq2)) {
        for (let i = 0; i < seq2.items.length; ++i) {
            let item = seq2.items[i];
            if (isPair(item))
                continue;
            else if (isMap(item)) {
                if (item.items.length > 1)
                    onError("Each pair must have its own sequence indicator");
                const pair = item.items[0] || new Pair(new Scalar(null));
                if (item.commentBefore)
                    pair.key.commentBefore = pair.key.commentBefore ? `${item.commentBefore}
${pair.key.commentBefore}` : item.commentBefore;
                if (item.comment) {
                    const cn = pair.value || pair.key;
                    cn.comment = cn.comment ? `${item.comment}
${cn.comment}` : item.comment;
                }
                item = pair;
            }
            seq2.items[i] = isPair(item) ? item : new Pair(item);
        }
    }
    else
        onError("Expected a sequence for this tag");
    return seq2;
}
function createPairs(schema4, iterable, ctx) {
    const { replacer } = ctx;
    const pairs2 = new YAMLSeq(schema4);
    pairs2.tag = "tag:yaml.org,2002:pairs";
    let i = 0;
    if (iterable && Symbol.iterator in Object(iterable))
        for (let it of iterable) {
            if (typeof replacer === "function")
                it = replacer.call(iterable, String(i++), it);
            let key, value;
            if (Array.isArray(it)) {
                if (it.length === 2) {
                    key = it[0];
                    value = it[1];
                }
                else
                    throw new TypeError(`Expected [key, value] tuple: ${it}`);
            }
            else if (it && it instanceof Object) {
                const keys = Object.keys(it);
                if (keys.length === 1) {
                    key = keys[0];
                    value = it[key];
                }
                else
                    throw new TypeError(`Expected { key: value } tuple: ${it}`);
            }
            else {
                key = it;
            }
            pairs2.items.push(createPair(key, value, ctx));
        }
    return pairs2;
}
var pairs = {
    collection: "seq",
    default: false,
    tag: "tag:yaml.org,2002:pairs",
    resolve: resolvePairs,
    createNode: createPairs
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/omap.js
var YAMLOMap = class extends YAMLSeq {
    constructor() {
        super();
        this.add = YAMLMap.prototype.add.bind(this);
        this.delete = YAMLMap.prototype.delete.bind(this);
        this.get = YAMLMap.prototype.get.bind(this);
        this.has = YAMLMap.prototype.has.bind(this);
        this.set = YAMLMap.prototype.set.bind(this);
        this.tag = YAMLOMap.tag;
    }
    /**
     * If `ctx` is given, the return type is actually `Map<unknown, unknown>`,
     * but TypeScript won't allow widening the signature of a child method.
     */
    toJSON(_, ctx) {
        if (!ctx)
            return super.toJSON(_);
        const map2 = /* @__PURE__ */ new Map();
        if (ctx && ctx.onCreate)
            ctx.onCreate(map2);
        for (const pair of this.items) {
            let key, value;
            if (isPair(pair)) {
                key = toJS(pair.key, "", ctx);
                value = toJS(pair.value, key, ctx);
            }
            else {
                key = toJS(pair, "", ctx);
            }
            if (map2.has(key))
                throw new Error("Ordered maps must not include duplicate keys");
            map2.set(key, value);
        }
        return map2;
    }
};
YAMLOMap.tag = "tag:yaml.org,2002:omap";
var omap = {
    collection: "seq",
    identify: (value) => value instanceof Map,
    nodeClass: YAMLOMap,
    default: false,
    tag: "tag:yaml.org,2002:omap",
    resolve(seq2, onError) {
        const pairs2 = resolvePairs(seq2, onError);
        const seenKeys = [];
        for (const { key } of pairs2.items) {
            if (isScalar(key)) {
                if (seenKeys.includes(key.value)) {
                    onError(`Ordered maps must not include duplicate keys: ${key.value}`);
                }
                else {
                    seenKeys.push(key.value);
                }
            }
        }
        return Object.assign(new YAMLOMap(), pairs2);
    },
    createNode(schema4, iterable, ctx) {
        const pairs2 = createPairs(schema4, iterable, ctx);
        const omap2 = new YAMLOMap();
        omap2.items = pairs2.items;
        return omap2;
    }
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/bool.js
function boolStringify({ value, source }, ctx) {
    const boolObj = value ? trueTag : falseTag;
    if (source && boolObj.test.test(source))
        return source;
    return value ? ctx.options.trueStr : ctx.options.falseStr;
}
var trueTag = {
    identify: (value) => value === true,
    default: true,
    tag: "tag:yaml.org,2002:bool",
    test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,
    resolve: () => new Scalar(true),
    stringify: boolStringify
};
var falseTag = {
    identify: (value) => value === false,
    default: true,
    tag: "tag:yaml.org,2002:bool",
    test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,
    resolve: () => new Scalar(false),
    stringify: boolStringify
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/float.js
var floatNaN2 = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^[-+]?\.(?:inf|Inf|INF|nan|NaN|NAN)$/,
    resolve: (str) => str.slice(-3).toLowerCase() === "nan" ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
    stringify: stringifyNumber
};
var floatExp2 = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    format: "EXP",
    test: /^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,
    resolve: (str) => parseFloat(str.replace(/_/g, "")),
    stringify(node) {
        const num = Number(node.value);
        return isFinite(num) ? num.toExponential() : stringifyNumber(node);
    }
};
var float2 = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,
    resolve(str) {
        const node = new Scalar(parseFloat(str.replace(/_/g, "")));
        const dot = str.indexOf(".");
        if (dot !== -1) {
            const f2 = str.substring(dot + 1).replace(/_/g, "");
            if (f2[f2.length - 1] === "0")
                node.minFractionDigits = f2.length;
        }
        return node;
    },
    stringify: stringifyNumber
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/int.js
var intIdentify3 = (value) => typeof value === "bigint" || Number.isInteger(value);
function intResolve2(str, offset, radix, { intAsBigInt }) {
    const sign = str[0];
    if (sign === "-" || sign === "+")
        offset += 1;
    str = str.substring(offset).replace(/_/g, "");
    if (intAsBigInt) {
        switch (radix) {
            case 2:
                str = `0b${str}`;
                break;
            case 8:
                str = `0o${str}`;
                break;
            case 16:
                str = `0x${str}`;
                break;
        }
        const n2 = BigInt(str);
        return sign === "-" ? BigInt(-1) * n2 : n2;
    }
    const n = parseInt(str, radix);
    return sign === "-" ? -1 * n : n;
}
function intStringify2(node, radix, prefix) {
    const { value } = node;
    if (intIdentify3(value)) {
        const str = value.toString(radix);
        return value < 0 ? "-" + prefix + str.substr(1) : prefix + str;
    }
    return stringifyNumber(node);
}
var intBin = {
    identify: intIdentify3,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "BIN",
    test: /^[-+]?0b[0-1_]+$/,
    resolve: (str, _onError, opt) => intResolve2(str, 2, 2, opt),
    stringify: (node) => intStringify2(node, 2, "0b")
};
var intOct2 = {
    identify: intIdentify3,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "OCT",
    test: /^[-+]?0[0-7_]+$/,
    resolve: (str, _onError, opt) => intResolve2(str, 1, 8, opt),
    stringify: (node) => intStringify2(node, 8, "0")
};
var int2 = {
    identify: intIdentify3,
    default: true,
    tag: "tag:yaml.org,2002:int",
    test: /^[-+]?[0-9][0-9_]*$/,
    resolve: (str, _onError, opt) => intResolve2(str, 0, 10, opt),
    stringify: stringifyNumber
};
var intHex2 = {
    identify: intIdentify3,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "HEX",
    test: /^[-+]?0x[0-9a-fA-F_]+$/,
    resolve: (str, _onError, opt) => intResolve2(str, 2, 16, opt),
    stringify: (node) => intStringify2(node, 16, "0x")
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/set.js
var YAMLSet = class extends YAMLMap {
    constructor(schema4) {
        super(schema4);
        this.tag = YAMLSet.tag;
    }
    add(key) {
        let pair;
        if (isPair(key))
            pair = key;
        else if (typeof key === "object" && "key" in key && "value" in key && key.value === null)
            pair = new Pair(key.key, null);
        else
            pair = new Pair(key, null);
        const prev = findPair(this.items, pair.key);
        if (!prev)
            this.items.push(pair);
    }
    get(key, keepPair) {
        const pair = findPair(this.items, key);
        return !keepPair && isPair(pair) ? isScalar(pair.key) ? pair.key.value : pair.key : pair;
    }
    set(key, value) {
        if (typeof value !== "boolean")
            throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);
        const prev = findPair(this.items, key);
        if (prev && !value) {
            this.items.splice(this.items.indexOf(prev), 1);
        }
        else if (!prev && value) {
            this.items.push(new Pair(key));
        }
    }
    toJSON(_, ctx) {
        return super.toJSON(_, ctx, Set);
    }
    toString(ctx, onComment, onChompKeep) {
        if (!ctx)
            return JSON.stringify(this);
        if (this.hasAllNullValues(true))
            return super.toString(Object.assign({}, ctx, { allNullValues: true }), onComment, onChompKeep);
        else
            throw new Error("Set items must all have null values");
    }
};
YAMLSet.tag = "tag:yaml.org,2002:set";
var set = {
    collection: "map",
    identify: (value) => value instanceof Set,
    nodeClass: YAMLSet,
    default: false,
    tag: "tag:yaml.org,2002:set",
    resolve(map2, onError) {
        if (isMap(map2)) {
            if (map2.hasAllNullValues(true))
                return Object.assign(new YAMLSet(), map2);
            else
                onError("Set items must all have null values");
        }
        else
            onError("Expected a mapping for this tag");
        return map2;
    },
    createNode(schema4, iterable, ctx) {
        const { replacer } = ctx;
        const set2 = new YAMLSet(schema4);
        if (iterable && Symbol.iterator in Object(iterable))
            for (let value of iterable) {
                if (typeof replacer === "function")
                    value = replacer.call(iterable, value, value);
                set2.items.push(createPair(value, null, ctx));
            }
        return set2;
    }
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/timestamp.js
function parseSexagesimal(str, asBigInt) {
    const sign = str[0];
    const parts = sign === "-" || sign === "+" ? str.substring(1) : str;
    const num = (n) => asBigInt ? BigInt(n) : Number(n);
    const res = parts.replace(/_/g, "").split(":").reduce((res2, p) => res2 * num(60) + num(p), num(0));
    return sign === "-" ? num(-1) * res : res;
}
function stringifySexagesimal(node) {
    let { value } = node;
    let num = (n) => n;
    if (typeof value === "bigint")
        num = (n) => BigInt(n);
    else if (isNaN(value) || !isFinite(value))
        return stringifyNumber(node);
    let sign = "";
    if (value < 0) {
        sign = "-";
        value *= num(-1);
    }
    const _60 = num(60);
    const parts = [value % _60];
    if (value < 60) {
        parts.unshift(0);
    }
    else {
        value = (value - parts[0]) / _60;
        parts.unshift(value % _60);
        if (value >= 60) {
            value = (value - parts[0]) / _60;
            parts.unshift(value);
        }
    }
    return sign + parts.map((n) => n < 10 ? "0" + String(n) : String(n)).join(":").replace(/000000\d*$/, "");
}
var intTime = {
    identify: (value) => typeof value === "bigint" || Number.isInteger(value),
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "TIME",
    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,
    resolve: (str, _onError, { intAsBigInt }) => parseSexagesimal(str, intAsBigInt),
    stringify: stringifySexagesimal
};
var floatTime = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    format: "TIME",
    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,
    resolve: (str) => parseSexagesimal(str, false),
    stringify: stringifySexagesimal
};
var timestamp = {
    identify: (value) => value instanceof Date,
    default: true,
    tag: "tag:yaml.org,2002:timestamp",
    // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part
    // may be omitted altogether, resulting in a date format. In such a case, the time part is
    // assumed to be 00:00:00Z (start of day, UTC).
    test: RegExp("^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?$"),
    resolve(str) {
        const match = str.match(timestamp.test);
        if (!match)
            throw new Error("!!timestamp expects a date, starting with yyyy-mm-dd");
        const [, year, month, day, hour, minute, second] = match.map(Number);
        const millisec = match[7] ? Number((match[7] + "00").substr(1, 3)) : 0;
        let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);
        const tz = match[8];
        if (tz && tz !== "Z") {
            let d = parseSexagesimal(tz, false);
            if (Math.abs(d) < 30)
                d *= 60;
            date -= 6e4 * d;
        }
        return new Date(date);
    },
    stringify: ({ value }) => value.toISOString().replace(/((T00:00)?:00)?\.000Z$/, "")
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/schema.js
var schema3 = [
    map,
    seq,
    string,
    nullTag,
    trueTag,
    falseTag,
    intBin,
    intOct2,
    int2,
    intHex2,
    floatNaN2,
    floatExp2,
    float2,
    binary,
    omap,
    pairs,
    set,
    intTime,
    floatTime,
    timestamp
];
// ../../node_modules/yaml/browser/dist/schema/tags.js
var schemas = /* @__PURE__ */ new Map([
    ["core", schema],
    ["failsafe", [map, seq, string]],
    ["json", schema2],
    ["yaml11", schema3],
    ["yaml-1.1", schema3]
]);
var tagsByName = {
    binary,
    bool: boolTag,
    float: dist_float,
    floatExp,
    floatNaN,
    floatTime,
    int: dist_int,
    intHex,
    intOct,
    intTime,
    map,
    null: nullTag,
    omap,
    pairs,
    seq,
    set,
    timestamp
};
var coreKnownTags = {
    "tag:yaml.org,2002:binary": binary,
    "tag:yaml.org,2002:omap": omap,
    "tag:yaml.org,2002:pairs": pairs,
    "tag:yaml.org,2002:set": set,
    "tag:yaml.org,2002:timestamp": timestamp
};
function getTags(customTags, schemaName) {
    let tags = schemas.get(schemaName);
    if (!tags) {
        if (Array.isArray(customTags))
            tags = [];
        else {
            const keys = Array.from(schemas.keys()).filter((key) => key !== "yaml11").map((key) => JSON.stringify(key)).join(", ");
            throw new Error(`Unknown schema "${schemaName}"; use one of ${keys} or define customTags array`);
        }
    }
    if (Array.isArray(customTags)) {
        for (const tag of customTags)
            tags = tags.concat(tag);
    }
    else if (typeof customTags === "function") {
        tags = customTags(tags.slice());
    }
    return tags.map((tag) => {
        if (typeof tag !== "string")
            return tag;
        const tagObj = tagsByName[tag];
        if (tagObj)
            return tagObj;
        const keys = Object.keys(tagsByName).map((key) => JSON.stringify(key)).join(", ");
        throw new Error(`Unknown custom tag "${tag}"; use one of ${keys}`);
    });
}
// ../../node_modules/yaml/browser/dist/schema/Schema.js
var sortMapEntriesByKey = (a2, b) => a2.key < b.key ? -1 : a2.key > b.key ? 1 : 0;
var Schema = class {
    constructor({ compat, customTags, merge, resolveKnownTags, schema: schema4, sortMapEntries, toStringDefaults }) {
        this.compat = Array.isArray(compat) ? getTags(compat, "compat") : compat ? getTags(null, compat) : null;
        this.merge = !!merge;
        this.name = typeof schema4 === "string" && schema4 || "core";
        this.knownTags = resolveKnownTags ? coreKnownTags : {};
        this.tags = getTags(customTags, this.name);
        this.toStringOptions = toStringDefaults || null;
        Object.defineProperty(this, MAP, { value: map });
        Object.defineProperty(this, SCALAR, { value: string });
        Object.defineProperty(this, SEQ, { value: seq });
        this.sortMapEntries = sortMapEntries === true ? sortMapEntriesByKey : sortMapEntries || null;
    }
    clone() {
        const copy = Object.create(Schema.prototype, Object.getOwnPropertyDescriptors(this));
        copy.tags = this.tags.slice();
        return copy;
    }
};
// ../../node_modules/yaml/browser/dist/stringify/stringifyDocument.js
function stringifyDocument(doc, options) {
    var _a;
    const lines = [];
    let hasDirectives = options.directives === true;
    if (options.directives !== false && doc.directives) {
        const dir = doc.directives.toString(doc);
        if (dir) {
            lines.push(dir);
            hasDirectives = true;
        }
        else if (doc.directives.docStart)
            hasDirectives = true;
    }
    if (hasDirectives)
        lines.push("---");
    const ctx = createStringifyContext(doc, options);
    const { commentString } = ctx.options;
    if (doc.commentBefore) {
        if (lines.length !== 1)
            lines.unshift("");
        const cs = commentString(doc.commentBefore);
        lines.unshift(indentComment(cs, ""));
    }
    let chompKeep = false;
    let contentComment = null;
    if (doc.contents) {
        if (isNode(doc.contents)) {
            if (doc.contents.spaceBefore && hasDirectives)
                lines.push("");
            if (doc.contents.commentBefore) {
                const cs = commentString(doc.contents.commentBefore);
                lines.push(indentComment(cs, ""));
            }
            ctx.forceBlockIndent = !!doc.comment;
            contentComment = doc.contents.comment;
        }
        const onChompKeep = contentComment ? void 0 : () => chompKeep = true;
        let body = stringify(doc.contents, ctx, () => contentComment = null, onChompKeep);
        if (contentComment)
            body += lineComment(body, "", commentString(contentComment));
        if ((body[0] === "|" || body[0] === ">") && lines[lines.length - 1] === "---") {
            lines[lines.length - 1] = `--- ${body}`;
        }
        else
            lines.push(body);
    }
    else {
        lines.push(stringify(doc.contents, ctx));
    }
    if ((_a = doc.directives) === null || _a === void 0 ? void 0 : _a.docEnd) {
        if (doc.comment) {
            const cs = commentString(doc.comment);
            if (cs.includes("\n")) {
                lines.push("...");
                lines.push(indentComment(cs, ""));
            }
            else {
                lines.push(`... ${cs}`);
            }
        }
        else {
            lines.push("...");
        }
    }
    else {
        let dc = doc.comment;
        if (dc && chompKeep)
            dc = dc.replace(/^\n+/, "");
        if (dc) {
            if ((!chompKeep || contentComment) && lines[lines.length - 1] !== "")
                lines.push("");
            lines.push(indentComment(commentString(dc), ""));
        }
    }
    return lines.join("\n") + "\n";
}
// ../../node_modules/yaml/browser/dist/doc/applyReviver.js
function applyReviver(reviver, obj, key, val) {
    if (val && typeof val === "object") {
        if (Array.isArray(val)) {
            for (let i = 0, len = val.length; i < len; ++i) {
                const v0 = val[i];
                const v1 = applyReviver(reviver, val, String(i), v0);
                if (v1 === void 0)
                    delete val[i];
                else if (v1 !== v0)
                    val[i] = v1;
            }
        }
        else if (val instanceof Map) {
            for (const k of Array.from(val.keys())) {
                const v0 = val.get(k);
                const v1 = applyReviver(reviver, val, k, v0);
                if (v1 === void 0)
                    val.delete(k);
                else if (v1 !== v0)
                    val.set(k, v1);
            }
        }
        else if (val instanceof Set) {
            for (const v0 of Array.from(val)) {
                const v1 = applyReviver(reviver, val, v0, v0);
                if (v1 === void 0)
                    val.delete(v0);
                else if (v1 !== v0) {
                    val.delete(v0);
                    val.add(v1);
                }
            }
        }
        else {
            for (const [k, v0] of Object.entries(val)) {
                const v1 = applyReviver(reviver, val, k, v0);
                if (v1 === void 0)
                    delete val[k];
                else if (v1 !== v0)
                    val[k] = v1;
            }
        }
    }
    return reviver.call(obj, key, val);
}
// ../../node_modules/yaml/browser/dist/doc/Document.js
var Document = class {
    constructor(value, replacer, options) {
        this.commentBefore = null;
        this.comment = null;
        this.errors = [];
        this.warnings = [];
        Object.defineProperty(this, NODE_TYPE, { value: DOC });
        let _replacer = null;
        if (typeof replacer === "function" || Array.isArray(replacer)) {
            _replacer = replacer;
        }
        else if (options === void 0 && replacer) {
            options = replacer;
            replacer = void 0;
        }
        const opt = Object.assign({
            intAsBigInt: false,
            keepSourceTokens: false,
            logLevel: "warn",
            prettyErrors: true,
            strict: true,
            uniqueKeys: true,
            version: "1.2"
        }, options);
        this.options = opt;
        let { version } = opt;
        if (options === null || options === void 0 ? void 0 : options.directives) {
            this.directives = options.directives.atDocument();
            if (this.directives.yaml.explicit)
                version = this.directives.yaml.version;
        }
        else
            this.directives = new Directives({ version });
        this.setSchema(version, options);
        if (value === void 0)
            this.contents = null;
        else {
            this.contents = this.createNode(value, _replacer, options);
        }
    }
    /**
     * Create a deep copy of this Document and its contents.
     *
     * Custom Node values that inherit from `Object` still refer to their original instances.
     */
    clone() {
        const copy = Object.create(Document.prototype, {
            [NODE_TYPE]: { value: DOC }
        });
        copy.commentBefore = this.commentBefore;
        copy.comment = this.comment;
        copy.errors = this.errors.slice();
        copy.warnings = this.warnings.slice();
        copy.options = Object.assign({}, this.options);
        if (this.directives)
            copy.directives = this.directives.clone();
        copy.schema = this.schema.clone();
        copy.contents = isNode(this.contents) ? this.contents.clone(copy.schema) : this.contents;
        if (this.range)
            copy.range = this.range.slice();
        return copy;
    }
    /** Adds a value to the document. */
    add(value) {
        if (assertCollection(this.contents))
            this.contents.add(value);
    }
    /** Adds a value to the document. */
    addIn(path5, value) {
        if (assertCollection(this.contents))
            this.contents.addIn(path5, value);
    }
    /**
     * Create a new `Alias` node, ensuring that the target `node` has the required anchor.
     *
     * If `node` already has an anchor, `name` is ignored.
     * Otherwise, the `node.anchor` value will be set to `name`,
     * or if an anchor with that name is already present in the document,
     * `name` will be used as a prefix for a new unique anchor.
     * If `name` is undefined, the generated anchor will use 'a' as a prefix.
     */
    createAlias(node, name) {
        if (!node.anchor) {
            const prev = anchorNames(this);
            node.anchor = !name || prev.has(name) ? findNewAnchor(name || "a", prev) : name;
        }
        return new Alias(node.anchor);
    }
    createNode(value, replacer, options) {
        let _replacer = void 0;
        if (typeof replacer === "function") {
            value = replacer.call({ "": value }, "", value);
            _replacer = replacer;
        }
        else if (Array.isArray(replacer)) {
            const keyToStr = (v) => typeof v === "number" || v instanceof String || v instanceof Number;
            const asStr = replacer.filter(keyToStr).map(String);
            if (asStr.length > 0)
                replacer = replacer.concat(asStr);
            _replacer = replacer;
        }
        else if (options === void 0 && replacer) {
            options = replacer;
            replacer = void 0;
        }
        const { aliasDuplicateObjects, anchorPrefix, flow, keepUndefined, onTagObj, tag } = options || {};
        const { onAnchor, setAnchors, sourceObjects } = createNodeAnchors(this, anchorPrefix || "a");
        const ctx = {
            aliasDuplicateObjects: aliasDuplicateObjects !== null && aliasDuplicateObjects !== void 0 ? aliasDuplicateObjects : true,
            keepUndefined: keepUndefined !== null && keepUndefined !== void 0 ? keepUndefined : false,
            onAnchor,
            onTagObj,
            replacer: _replacer,
            schema: this.schema,
            sourceObjects
        };
        const node = createNode(value, tag, ctx);
        if (flow && isCollection(node))
            node.flow = true;
        setAnchors();
        return node;
    }
    /**
     * Convert a key and a value into a `Pair` using the current schema,
     * recursively wrapping all values as `Scalar` or `Collection` nodes.
     */
    createPair(key, value, options = {}) {
        const k = this.createNode(key, null, options);
        const v = this.createNode(value, null, options);
        return new Pair(k, v);
    }
    /**
     * Removes a value from the document.
     * @returns `true` if the item was found and removed.
     */
    delete(key) {
        return assertCollection(this.contents) ? this.contents.delete(key) : false;
    }
    /**
     * Removes a value from the document.
     * @returns `true` if the item was found and removed.
     */
    deleteIn(path5) {
        if (isEmptyPath(path5)) {
            if (this.contents == null)
                return false;
            this.contents = null;
            return true;
        }
        return assertCollection(this.contents) ? this.contents.deleteIn(path5) : false;
    }
    /**
     * Returns item at `key`, or `undefined` if not found. By default unwraps
     * scalar values from their surrounding node; to disable set `keepScalar` to
     * `true` (collections are always returned intact).
     */
    get(key, keepScalar) {
        return isCollection(this.contents) ? this.contents.get(key, keepScalar) : void 0;
    }
    /**
     * Returns item at `path`, or `undefined` if not found. By default unwraps
     * scalar values from their surrounding node; to disable set `keepScalar` to
     * `true` (collections are always returned intact).
     */
    getIn(path5, keepScalar) {
        if (isEmptyPath(path5))
            return !keepScalar && isScalar(this.contents) ? this.contents.value : this.contents;
        return isCollection(this.contents) ? this.contents.getIn(path5, keepScalar) : void 0;
    }
    /**
     * Checks if the document includes a value with the key `key`.
     */
    has(key) {
        return isCollection(this.contents) ? this.contents.has(key) : false;
    }
    /**
     * Checks if the document includes a value at `path`.
     */
    hasIn(path5) {
        if (isEmptyPath(path5))
            return this.contents !== void 0;
        return isCollection(this.contents) ? this.contents.hasIn(path5) : false;
    }
    /**
     * Sets a value in this document. For `!!set`, `value` needs to be a
     * boolean to add/remove the item from the set.
     */
    set(key, value) {
        if (this.contents == null) {
            this.contents = collectionFromPath(this.schema, [key], value);
        }
        else if (assertCollection(this.contents)) {
            this.contents.set(key, value);
        }
    }
    /**
     * Sets a value in this document. For `!!set`, `value` needs to be a
     * boolean to add/remove the item from the set.
     */
    setIn(path5, value) {
        if (isEmptyPath(path5))
            this.contents = value;
        else if (this.contents == null) {
            this.contents = collectionFromPath(this.schema, Array.from(path5), value);
        }
        else if (assertCollection(this.contents)) {
            this.contents.setIn(path5, value);
        }
    }
    /**
     * Change the YAML version and schema used by the document.
     * A `null` version disables support for directives, explicit tags, anchors, and aliases.
     * It also requires the `schema` option to be given as a `Schema` instance value.
     *
     * Overrides all previously set schema options.
     */
    setSchema(version, options = {}) {
        if (typeof version === "number")
            version = String(version);
        let opt;
        switch (version) {
            case "1.1":
                if (this.directives)
                    this.directives.yaml.version = "1.1";
                else
                    this.directives = new Directives({ version: "1.1" });
                opt = { merge: true, resolveKnownTags: false, schema: "yaml-1.1" };
                break;
            case "1.2":
                if (this.directives)
                    this.directives.yaml.version = "1.2";
                else
                    this.directives = new Directives({ version: "1.2" });
                opt = { merge: false, resolveKnownTags: true, schema: "core" };
                break;
            case null:
                if (this.directives)
                    delete this.directives;
                opt = null;
                break;
            default: {
                const sv = JSON.stringify(version);
                throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${sv}`);
            }
        }
        if (options.schema instanceof Object)
            this.schema = options.schema;
        else if (opt)
            this.schema = new Schema(Object.assign(opt, options));
        else
            throw new Error(`With a null YAML version, the { schema: Schema } option is required`);
    }
    // json & jsonArg are only used from toJSON()
    toJS({ json, jsonArg, mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {
        const ctx = {
            anchors: /* @__PURE__ */ new Map(),
            doc: this,
            keep: !json,
            mapAsMap: mapAsMap === true,
            mapKeyWarned: false,
            maxAliasCount: typeof maxAliasCount === "number" ? maxAliasCount : 100,
            stringify
        };
        const res = toJS(this.contents, jsonArg || "", ctx);
        if (typeof onAnchor === "function")
            for (const { count, res: res2 } of ctx.anchors.values())
                onAnchor(res2, count);
        return typeof reviver === "function" ? applyReviver(reviver, { "": res }, "", res) : res;
    }
    /**
     * A JSON representation of the document `contents`.
     *
     * @param jsonArg Used by `JSON.stringify` to indicate the array index or
     *   property name.
     */
    toJSON(jsonArg, onAnchor) {
        return this.toJS({ json: true, jsonArg, mapAsMap: false, onAnchor });
    }
    /** A YAML representation of the document. */
    toString(options = {}) {
        if (this.errors.length > 0)
            throw new Error("Document with errors cannot be stringified");
        if ("indent" in options && (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {
            const s = JSON.stringify(options.indent);
            throw new Error(`"indent" option must be a positive integer, not ${s}`);
        }
        return stringifyDocument(this, options);
    }
};
function assertCollection(contents) {
    if (isCollection(contents))
        return true;
    throw new Error("Expected a YAML collection as document contents");
}
// ../../node_modules/yaml/browser/dist/errors.js
var YAMLError = class extends Error {
    constructor(name, pos, code, message) {
        super();
        this.name = name;
        this.code = code;
        this.message = message;
        this.pos = pos;
    }
};
var YAMLParseError = class extends YAMLError {
    constructor(pos, code, message) {
        super("YAMLParseError", pos, code, message);
    }
};
var YAMLWarning = class extends YAMLError {
    constructor(pos, code, message) {
        super("YAMLWarning", pos, code, message);
    }
};
var prettifyError = (src, lc) => (error) => {
    if (error.pos[0] === -1)
        return;
    error.linePos = error.pos.map((pos) => lc.linePos(pos));
    const { line, col } = error.linePos[0];
    error.message += ` at line ${line}, column ${col}`;
    let ci = col - 1;
    let lineStr = src.substring(lc.lineStarts[line - 1], lc.lineStarts[line]).replace(/[\n\r]+$/, "");
    if (ci >= 60 && lineStr.length > 80) {
        const trimStart = Math.min(ci - 39, lineStr.length - 79);
        lineStr = "\u2026" + lineStr.substring(trimStart);
        ci -= trimStart - 1;
    }
    if (lineStr.length > 80)
        lineStr = lineStr.substring(0, 79) + "\u2026";
    if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {
        let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);
        if (prev.length > 80)
            prev = prev.substring(0, 79) + "\u2026\n";
        lineStr = prev + lineStr;
    }
    if (/[^ ]/.test(lineStr)) {
        let count = 1;
        const end = error.linePos[1];
        if (end && end.line === line && end.col > col) {
            count = Math.min(end.col - col, 80 - ci);
        }
        const pointer = " ".repeat(ci) + "^".repeat(count);
        error.message += `:

${lineStr}
${pointer}
`;
    }
};
// ../../node_modules/yaml/browser/dist/compose/resolve-props.js
function resolveProps(tokens, { flow, indicator, next, offset, onError, startOnNewline }) {
    let spaceBefore = false;
    let atNewline = startOnNewline;
    let hasSpace = startOnNewline;
    let comment = "";
    let commentSep = "";
    let hasNewline = false;
    let reqSpace = false;
    let anchor = null;
    let tag = null;
    let comma = null;
    let found = null;
    let start = null;
    for (const token of tokens) {
        if (reqSpace) {
            if (token.type !== "space" && token.type !== "newline" && token.type !== "comma")
                onError(token.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space");
            reqSpace = false;
        }
        switch (token.type) {
            case "space":
                if (!flow && atNewline && indicator !== "doc-start" && token.source[0] === "	")
                    onError(token, "TAB_AS_INDENT", "Tabs are not allowed as indentation");
                hasSpace = true;
                break;
            case "comment": {
                if (!hasSpace)
                    onError(token, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
                const cb = token.source.substring(1) || " ";
                if (!comment)
                    comment = cb;
                else
                    comment += commentSep + cb;
                commentSep = "";
                atNewline = false;
                break;
            }
            case "newline":
                if (atNewline) {
                    if (comment)
                        comment += token.source;
                    else
                        spaceBefore = true;
                }
                else
                    commentSep += token.source;
                atNewline = true;
                hasNewline = true;
                hasSpace = true;
                break;
            case "anchor":
                if (anchor)
                    onError(token, "MULTIPLE_ANCHORS", "A node can have at most one anchor");
                if (token.source.endsWith(":"))
                    onError(token.offset + token.source.length - 1, "BAD_ALIAS", "Anchor ending in : is ambiguous", true);
                anchor = token;
                if (start === null)
                    start = token.offset;
                atNewline = false;
                hasSpace = false;
                reqSpace = true;
                break;
            case "tag": {
                if (tag)
                    onError(token, "MULTIPLE_TAGS", "A node can have at most one tag");
                tag = token;
                if (start === null)
                    start = token.offset;
                atNewline = false;
                hasSpace = false;
                reqSpace = true;
                break;
            }
            case indicator:
                if (anchor || tag)
                    onError(token, "BAD_PROP_ORDER", `Anchors and tags must be after the ${token.source} indicator`);
                if (found)
                    onError(token, "UNEXPECTED_TOKEN", `Unexpected ${token.source} in ${flow || "collection"}`);
                found = token;
                atNewline = false;
                hasSpace = false;
                break;
            case "comma":
                if (flow) {
                    if (comma)
                        onError(token, "UNEXPECTED_TOKEN", `Unexpected , in ${flow}`);
                    comma = token;
                    atNewline = false;
                    hasSpace = false;
                    break;
                }
            default:
                onError(token, "UNEXPECTED_TOKEN", `Unexpected ${token.type} token`);
                atNewline = false;
                hasSpace = false;
        }
    }
    const last = tokens[tokens.length - 1];
    const end = last ? last.offset + last.source.length : offset;
    if (reqSpace && next && next.type !== "space" && next.type !== "newline" && next.type !== "comma" && (next.type !== "scalar" || next.source !== ""))
        onError(next.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space");
    return {
        comma,
        found,
        spaceBefore,
        comment,
        hasNewline,
        anchor,
        tag,
        end,
        start: start !== null && start !== void 0 ? start : end
    };
}
// ../../node_modules/yaml/browser/dist/compose/util-contains-newline.js
function containsNewline(key) {
    if (!key)
        return null;
    switch (key.type) {
        case "alias":
        case "scalar":
        case "double-quoted-scalar":
        case "single-quoted-scalar":
            if (key.source.includes("\n"))
                return true;
            if (key.end) {
                for (const st of key.end)
                    if (st.type === "newline")
                        return true;
            }
            return false;
        case "flow-collection":
            for (const it of key.items) {
                for (const st of it.start)
                    if (st.type === "newline")
                        return true;
                if (it.sep) {
                    for (const st of it.sep)
                        if (st.type === "newline")
                            return true;
                }
                if (containsNewline(it.key) || containsNewline(it.value))
                    return true;
            }
            return false;
        default:
            return true;
    }
}
// ../../node_modules/yaml/browser/dist/compose/util-flow-indent-check.js
function flowIndentCheck(indent, fc, onError) {
    if ((fc === null || fc === void 0 ? void 0 : fc.type) === "flow-collection") {
        const end = fc.end[0];
        if (end.indent === indent && (end.source === "]" || end.source === "}") && containsNewline(fc)) {
            const msg = "Flow end indicator should be more indented than parent";
            onError(end, "BAD_INDENT", msg, true);
        }
    }
}
// ../../node_modules/yaml/browser/dist/compose/util-map-includes.js
function mapIncludes(ctx, items, search) {
    const { uniqueKeys } = ctx.options;
    if (uniqueKeys === false)
        return false;
    const isEqual = typeof uniqueKeys === "function" ? uniqueKeys : (a2, b) => a2 === b || isScalar(a2) && isScalar(b) && a2.value === b.value && !(a2.value === "<<" && ctx.schema.merge);
    return items.some((pair) => isEqual(pair.key, search));
}
// ../../node_modules/yaml/browser/dist/compose/resolve-block-map.js
var startColMsg = "All mapping items must start at the same column";
function resolveBlockMap({ composeNode: composeNode2, composeEmptyNode: composeEmptyNode2 }, ctx, bm, onError) {
    var _a;
    const map2 = new YAMLMap(ctx.schema);
    if (ctx.atRoot)
        ctx.atRoot = false;
    let offset = bm.offset;
    for (const collItem of bm.items) {
        const { start, key, sep, value } = collItem;
        const keyProps = resolveProps(start, {
            indicator: "explicit-key-ind",
            next: key || (sep === null || sep === void 0 ? void 0 : sep[0]),
            offset,
            onError,
            startOnNewline: true
        });
        const implicitKey = !keyProps.found;
        if (implicitKey) {
            if (key) {
                if (key.type === "block-seq")
                    onError(offset, "BLOCK_AS_IMPLICIT_KEY", "A block sequence may not be used as an implicit map key");
                else if ("indent" in key && key.indent !== bm.indent)
                    onError(offset, "BAD_INDENT", startColMsg);
            }
            if (!keyProps.anchor && !keyProps.tag && !sep) {
                if (keyProps.comment) {
                    if (map2.comment)
                        map2.comment += "\n" + keyProps.comment;
                    else
                        map2.comment = keyProps.comment;
                }
                continue;
            }
        }
        else if (((_a = keyProps.found) === null || _a === void 0 ? void 0 : _a.indent) !== bm.indent)
            onError(offset, "BAD_INDENT", startColMsg);
        if (implicitKey && containsNewline(key))
            onError(key, 
            // checked by containsNewline()
            "MULTILINE_IMPLICIT_KEY", "Implicit keys need to be on a single line");
        const keyStart = keyProps.end;
        const keyNode = key ? composeNode2(ctx, key, keyProps, onError) : composeEmptyNode2(ctx, keyStart, start, null, keyProps, onError);
        if (ctx.schema.compat)
            flowIndentCheck(bm.indent, key, onError);
        if (mapIncludes(ctx, map2.items, keyNode))
            onError(keyStart, "DUPLICATE_KEY", "Map keys must be unique");
        const valueProps = resolveProps(sep || [], {
            indicator: "map-value-ind",
            next: value,
            offset: keyNode.range[2],
            onError,
            startOnNewline: !key || key.type === "block-scalar"
        });
        offset = valueProps.end;
        if (valueProps.found) {
            if (implicitKey) {
                if ((value === null || value === void 0 ? void 0 : value.type) === "block-map" && !valueProps.hasNewline)
                    onError(offset, "BLOCK_AS_IMPLICIT_KEY", "Nested mappings are not allowed in compact mappings");
                if (ctx.options.strict && keyProps.start < valueProps.found.offset - 1024)
                    onError(keyNode.range, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit block mapping key");
            }
            const valueNode = value ? composeNode2(ctx, value, valueProps, onError) : composeEmptyNode2(ctx, offset, sep, null, valueProps, onError);
            if (ctx.schema.compat)
                flowIndentCheck(bm.indent, value, onError);
            offset = valueNode.range[2];
            const pair = new Pair(keyNode, valueNode);
            if (ctx.options.keepSourceTokens)
                pair.srcToken = collItem;
            map2.items.push(pair);
        }
        else {
            if (implicitKey)
                onError(keyNode.range, "MISSING_CHAR", "Implicit map keys need to be followed by map values");
            if (valueProps.comment) {
                if (keyNode.comment)
                    keyNode.comment += "\n" + valueProps.comment;
                else
                    keyNode.comment = valueProps.comment;
            }
            const pair = new Pair(keyNode);
            if (ctx.options.keepSourceTokens)
                pair.srcToken = collItem;
            map2.items.push(pair);
        }
    }
    map2.range = [bm.offset, offset, offset];
    return map2;
}
// ../../node_modules/yaml/browser/dist/compose/resolve-block-seq.js
function resolveBlockSeq({ composeNode: composeNode2, composeEmptyNode: composeEmptyNode2 }, ctx, bs, onError) {
    const seq2 = new YAMLSeq(ctx.schema);
    if (ctx.atRoot)
        ctx.atRoot = false;
    let offset = bs.offset;
    for (const { start, value } of bs.items) {
        const props = resolveProps(start, {
            indicator: "seq-item-ind",
            next: value,
            offset,
            onError,
            startOnNewline: true
        });
        offset = props.end;
        if (!props.found) {
            if (props.anchor || props.tag || value) {
                if (value && value.type === "block-seq")
                    onError(offset, "BAD_INDENT", "All sequence items must start at the same column");
                else
                    onError(offset, "MISSING_CHAR", "Sequence item without - indicator");
            }
            else {
                if (props.comment)
                    seq2.comment = props.comment;
                continue;
            }
        }
        const node = value ? composeNode2(ctx, value, props, onError) : composeEmptyNode2(ctx, offset, start, null, props, onError);
        if (ctx.schema.compat)
            flowIndentCheck(bs.indent, value, onError);
        offset = node.range[2];
        seq2.items.push(node);
    }
    seq2.range = [bs.offset, offset, offset];
    return seq2;
}
// ../../node_modules/yaml/browser/dist/compose/resolve-end.js
function resolveEnd(end, offset, reqSpace, onError) {
    let comment = "";
    if (end) {
        let hasSpace = false;
        let sep = "";
        for (const token of end) {
            const { source, type } = token;
            switch (type) {
                case "space":
                    hasSpace = true;
                    break;
                case "comment": {
                    if (reqSpace && !hasSpace)
                        onError(token, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
                    const cb = source.substring(1) || " ";
                    if (!comment)
                        comment = cb;
                    else
                        comment += sep + cb;
                    sep = "";
                    break;
                }
                case "newline":
                    if (comment)
                        sep += source;
                    hasSpace = true;
                    break;
                default:
                    onError(token, "UNEXPECTED_TOKEN", `Unexpected ${type} at node end`);
            }
            offset += source.length;
        }
    }
    return { comment, offset };
}
// ../../node_modules/yaml/browser/dist/compose/resolve-flow-collection.js
var blockMsg = "Block collections are not allowed within flow collections";
var isBlock = (token) => token && (token.type === "block-map" || token.type === "block-seq");
function resolveFlowCollection({ composeNode: composeNode2, composeEmptyNode: composeEmptyNode2 }, ctx, fc, onError) {
    const isMap2 = fc.start.source === "{";
    const fcName = isMap2 ? "flow map" : "flow sequence";
    const coll = isMap2 ? new YAMLMap(ctx.schema) : new YAMLSeq(ctx.schema);
    coll.flow = true;
    const atRoot = ctx.atRoot;
    if (atRoot)
        ctx.atRoot = false;
    let offset = fc.offset + fc.start.source.length;
    for (let i = 0; i < fc.items.length; ++i) {
        const collItem = fc.items[i];
        const { start, key, sep, value } = collItem;
        const props = resolveProps(start, {
            flow: fcName,
            indicator: "explicit-key-ind",
            next: key || (sep === null || sep === void 0 ? void 0 : sep[0]),
            offset,
            onError,
            startOnNewline: false
        });
        if (!props.found) {
            if (!props.anchor && !props.tag && !sep && !value) {
                if (i === 0 && props.comma)
                    onError(props.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${fcName}`);
                else if (i < fc.items.length - 1)
                    onError(props.start, "UNEXPECTED_TOKEN", `Unexpected empty item in ${fcName}`);
                if (props.comment) {
                    if (coll.comment)
                        coll.comment += "\n" + props.comment;
                    else
                        coll.comment = props.comment;
                }
                offset = props.end;
                continue;
            }
            if (!isMap2 && ctx.options.strict && containsNewline(key))
                onError(key, 
                // checked by containsNewline()
                "MULTILINE_IMPLICIT_KEY", "Implicit keys of flow sequence pairs need to be on a single line");
        }
        if (i === 0) {
            if (props.comma)
                onError(props.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${fcName}`);
        }
        else {
            if (!props.comma)
                onError(props.start, "MISSING_CHAR", `Missing , between ${fcName} items`);
            if (props.comment) {
                let prevItemComment = "";
                loop: for (const st of start) {
                    switch (st.type) {
                        case "comma":
                        case "space":
                            break;
                        case "comment":
                            prevItemComment = st.source.substring(1);
                            break loop;
                        default:
                            break loop;
                    }
                }
                if (prevItemComment) {
                    let prev = coll.items[coll.items.length - 1];
                    if (isPair(prev))
                        prev = prev.value || prev.key;
                    if (prev.comment)
                        prev.comment += "\n" + prevItemComment;
                    else
                        prev.comment = prevItemComment;
                    props.comment = props.comment.substring(prevItemComment.length + 1);
                }
            }
        }
        if (!isMap2 && !sep && !props.found) {
            const valueNode = value ? composeNode2(ctx, value, props, onError) : composeEmptyNode2(ctx, props.end, sep, null, props, onError);
            coll.items.push(valueNode);
            offset = valueNode.range[2];
            if (isBlock(value))
                onError(valueNode.range, "BLOCK_IN_FLOW", blockMsg);
        }
        else {
            const keyStart = props.end;
            const keyNode = key ? composeNode2(ctx, key, props, onError) : composeEmptyNode2(ctx, keyStart, start, null, props, onError);
            if (isBlock(key))
                onError(keyNode.range, "BLOCK_IN_FLOW", blockMsg);
            const valueProps = resolveProps(sep || [], {
                flow: fcName,
                indicator: "map-value-ind",
                next: value,
                offset: keyNode.range[2],
                onError,
                startOnNewline: false
            });
            if (valueProps.found) {
                if (!isMap2 && !props.found && ctx.options.strict) {
                    if (sep)
                        for (const st of sep) {
                            if (st === valueProps.found)
                                break;
                            if (st.type === "newline") {
                                onError(st, "MULTILINE_IMPLICIT_KEY", "Implicit keys of flow sequence pairs need to be on a single line");
                                break;
                            }
                        }
                    if (props.start < valueProps.found.offset - 1024)
                        onError(valueProps.found, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit flow sequence key");
                }
            }
            else if (value) {
                if ("source" in value && value.source && value.source[0] === ":")
                    onError(value, "MISSING_CHAR", `Missing space after : in ${fcName}`);
                else
                    onError(valueProps.start, "MISSING_CHAR", `Missing , or : between ${fcName} items`);
            }
            const valueNode = value ? composeNode2(ctx, value, valueProps, onError) : valueProps.found ? composeEmptyNode2(ctx, valueProps.end, sep, null, valueProps, onError) : null;
            if (valueNode) {
                if (isBlock(value))
                    onError(valueNode.range, "BLOCK_IN_FLOW", blockMsg);
            }
            else if (valueProps.comment) {
                if (keyNode.comment)
                    keyNode.comment += "\n" + valueProps.comment;
                else
                    keyNode.comment = valueProps.comment;
            }
            const pair = new Pair(keyNode, valueNode);
            if (ctx.options.keepSourceTokens)
                pair.srcToken = collItem;
            if (isMap2) {
                const map2 = coll;
                if (mapIncludes(ctx, map2.items, keyNode))
                    onError(keyStart, "DUPLICATE_KEY", "Map keys must be unique");
                map2.items.push(pair);
            }
            else {
                const map2 = new YAMLMap(ctx.schema);
                map2.flow = true;
                map2.items.push(pair);
                coll.items.push(map2);
            }
            offset = valueNode ? valueNode.range[2] : valueProps.end;
        }
    }
    const expectedEnd = isMap2 ? "}" : "]";
    const [ce, ...ee] = fc.end;
    let cePos = offset;
    if (ce && ce.source === expectedEnd)
        cePos = ce.offset + ce.source.length;
    else {
        const name = fcName[0].toUpperCase() + fcName.substring(1);
        const msg = atRoot ? `${name} must end with a ${expectedEnd}` : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;
        onError(offset, atRoot ? "MISSING_CHAR" : "BAD_INDENT", msg);
        if (ce && ce.source.length !== 1)
            ee.unshift(ce);
    }
    if (ee.length > 0) {
        const end = resolveEnd(ee, cePos, ctx.options.strict, onError);
        if (end.comment) {
            if (coll.comment)
                coll.comment += "\n" + end.comment;
            else
                coll.comment = end.comment;
        }
        coll.range = [fc.offset, cePos, end.offset];
    }
    else {
        coll.range = [fc.offset, cePos, cePos];
    }
    return coll;
}
// ../../node_modules/yaml/browser/dist/compose/compose-collection.js
function composeCollection(CN2, ctx, token, tagToken, onError) {
    let coll;
    switch (token.type) {
        case "block-map": {
            coll = resolveBlockMap(CN2, ctx, token, onError);
            break;
        }
        case "block-seq": {
            coll = resolveBlockSeq(CN2, ctx, token, onError);
            break;
        }
        case "flow-collection": {
            coll = resolveFlowCollection(CN2, ctx, token, onError);
            break;
        }
    }
    if (!tagToken)
        return coll;
    const tagName = ctx.directives.tagName(tagToken.source, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg));
    if (!tagName)
        return coll;
    const Coll = coll.constructor;
    if (tagName === "!" || tagName === Coll.tagName) {
        coll.tag = Coll.tagName;
        return coll;
    }
    const expType = isMap(coll) ? "map" : "seq";
    let tag = ctx.schema.tags.find((t) => t.collection === expType && t.tag === tagName);
    if (!tag) {
        const kt = ctx.schema.knownTags[tagName];
        if (kt && kt.collection === expType) {
            ctx.schema.tags.push(Object.assign({}, kt, { default: false }));
            tag = kt;
        }
        else {
            onError(tagToken, "TAG_RESOLVE_FAILED", `Unresolved tag: ${tagName}`, true);
            coll.tag = tagName;
            return coll;
        }
    }
    const res = tag.resolve(coll, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg), ctx.options);
    const node = isNode(res) ? res : new Scalar(res);
    node.range = coll.range;
    node.tag = tagName;
    if (tag === null || tag === void 0 ? void 0 : tag.format)
        node.format = tag.format;
    return node;
}
// ../../node_modules/yaml/browser/dist/compose/resolve-block-scalar.js
function resolveBlockScalar(scalar, strict, onError) {
    const start = scalar.offset;
    const header = parseBlockScalarHeader(scalar, strict, onError);
    if (!header)
        return { value: "", type: null, comment: "", range: [start, start, start] };
    const type = header.mode === ">" ? Scalar.BLOCK_FOLDED : Scalar.BLOCK_LITERAL;
    const lines = scalar.source ? splitLines(scalar.source) : [];
    let chompStart = lines.length;
    for (let i = lines.length - 1; i >= 0; --i) {
        const content = lines[i][1];
        if (content === "" || content === "\r")
            chompStart = i;
        else
            break;
    }
    if (chompStart === 0) {
        const value2 = header.chomp === "+" && lines.length > 0 ? "\n".repeat(Math.max(1, lines.length - 1)) : "";
        let end2 = start + header.length;
        if (scalar.source)
            end2 += scalar.source.length;
        return { value: value2, type, comment: header.comment, range: [start, end2, end2] };
    }
    let trimIndent = scalar.indent + header.indent;
    let offset = scalar.offset + header.length;
    let contentStart = 0;
    for (let i = 0; i < chompStart; ++i) {
        const [indent, content] = lines[i];
        if (content === "" || content === "\r") {
            if (header.indent === 0 && indent.length > trimIndent)
                trimIndent = indent.length;
        }
        else {
            if (indent.length < trimIndent) {
                const message = "Block scalars with more-indented leading empty lines must use an explicit indentation indicator";
                onError(offset + indent.length, "MISSING_CHAR", message);
            }
            if (header.indent === 0)
                trimIndent = indent.length;
            contentStart = i;
            break;
        }
        offset += indent.length + content.length + 1;
    }
    for (let i = lines.length - 1; i >= chompStart; --i) {
        if (lines[i][0].length > trimIndent)
            chompStart = i + 1;
    }
    let value = "";
    let sep = "";
    let prevMoreIndented = false;
    for (let i = 0; i < contentStart; ++i)
        value += lines[i][0].slice(trimIndent) + "\n";
    for (let i = contentStart; i < chompStart; ++i) {
        let [indent, content] = lines[i];
        offset += indent.length + content.length + 1;
        const crlf = content[content.length - 1] === "\r";
        if (crlf)
            content = content.slice(0, -1);
        if (content && indent.length < trimIndent) {
            const src = header.indent ? "explicit indentation indicator" : "first line";
            const message = `Block scalar lines must not be less indented than their ${src}`;
            onError(offset - content.length - (crlf ? 2 : 1), "BAD_INDENT", message);
            indent = "";
        }
        if (type === Scalar.BLOCK_LITERAL) {
            value += sep + indent.slice(trimIndent) + content;
            sep = "\n";
        }
        else if (indent.length > trimIndent || content[0] === "	") {
            if (sep === " ")
                sep = "\n";
            else if (!prevMoreIndented && sep === "\n")
                sep = "\n\n";
            value += sep + indent.slice(trimIndent) + content;
            sep = "\n";
            prevMoreIndented = true;
        }
        else if (content === "") {
            if (sep === "\n")
                value += "\n";
            else
                sep = "\n";
        }
        else {
            value += sep + content;
            sep = " ";
            prevMoreIndented = false;
        }
    }
    switch (header.chomp) {
        case "-":
            break;
        case "+":
            for (let i = chompStart; i < lines.length; ++i)
                value += "\n" + lines[i][0].slice(trimIndent);
            if (value[value.length - 1] !== "\n")
                value += "\n";
            break;
        default:
            value += "\n";
    }
    const end = start + header.length + scalar.source.length;
    return { value, type, comment: header.comment, range: [start, end, end] };
}
function parseBlockScalarHeader({ offset, props }, strict, onError) {
    if (props[0].type !== "block-scalar-header") {
        onError(props[0], "IMPOSSIBLE", "Block scalar header not found");
        return null;
    }
    const { source } = props[0];
    const mode = source[0];
    let indent = 0;
    let chomp = "";
    let error = -1;
    for (let i = 1; i < source.length; ++i) {
        const ch = source[i];
        if (!chomp && (ch === "-" || ch === "+"))
            chomp = ch;
        else {
            const n = Number(ch);
            if (!indent && n)
                indent = n;
            else if (error === -1)
                error = offset + i;
        }
    }
    if (error !== -1)
        onError(error, "UNEXPECTED_TOKEN", `Block scalar header includes extra characters: ${source}`);
    let hasSpace = false;
    let comment = "";
    let length = source.length;
    for (let i = 1; i < props.length; ++i) {
        const token = props[i];
        switch (token.type) {
            case "space":
                hasSpace = true;
            case "newline":
                length += token.source.length;
                break;
            case "comment":
                if (strict && !hasSpace) {
                    const message = "Comments must be separated from other tokens by white space characters";
                    onError(token, "MISSING_CHAR", message);
                }
                length += token.source.length;
                comment = token.source.substring(1);
                break;
            case "error":
                onError(token, "UNEXPECTED_TOKEN", token.message);
                length += token.source.length;
                break;
            default: {
                const message = `Unexpected token in block scalar header: ${token.type}`;
                onError(token, "UNEXPECTED_TOKEN", message);
                const ts = token.source;
                if (ts && typeof ts === "string")
                    length += ts.length;
            }
        }
    }
    return { mode, indent, chomp, comment, length };
}
function splitLines(source) {
    const split = source.split(/\n( *)/);
    const first = split[0];
    const m = first.match(/^( *)/);
    const line0 = m && m[1] ? [m[1], first.slice(m[1].length)] : ["", first];
    const lines = [line0];
    for (let i = 1; i < split.length; i += 2)
        lines.push([split[i], split[i + 1]]);
    return lines;
}
// ../../node_modules/yaml/browser/dist/compose/resolve-flow-scalar.js
function resolveFlowScalar(scalar, strict, onError) {
    const { offset, type, source, end } = scalar;
    let _type;
    let value;
    const _onError = (rel, code, msg) => onError(offset + rel, code, msg);
    switch (type) {
        case "scalar":
            _type = Scalar.PLAIN;
            value = plainValue(source, _onError);
            break;
        case "single-quoted-scalar":
            _type = Scalar.QUOTE_SINGLE;
            value = singleQuotedValue(source, _onError);
            break;
        case "double-quoted-scalar":
            _type = Scalar.QUOTE_DOUBLE;
            value = doubleQuotedValue(source, _onError);
            break;
        default:
            onError(scalar, "UNEXPECTED_TOKEN", `Expected a flow scalar value, but found: ${type}`);
            return {
                value: "",
                type: null,
                comment: "",
                range: [offset, offset + source.length, offset + source.length]
            };
    }
    const valueEnd = offset + source.length;
    const re = resolveEnd(end, valueEnd, strict, onError);
    return {
        value,
        type: _type,
        comment: re.comment,
        range: [offset, valueEnd, re.offset]
    };
}
function plainValue(source, onError) {
    let badChar = "";
    switch (source[0]) {
        case "	":
            badChar = "a tab character";
            break;
        case ",":
            badChar = "flow indicator character ,";
            break;
        case "%":
            badChar = "directive indicator character %";
            break;
        case "|":
        case ">": {
            badChar = `block scalar indicator ${source[0]}`;
            break;
        }
        case "@":
        case "`": {
            badChar = `reserved character ${source[0]}`;
            break;
        }
    }
    if (badChar)
        onError(0, "BAD_SCALAR_START", `Plain value cannot start with ${badChar}`);
    return foldLines(source);
}
function singleQuotedValue(source, onError) {
    if (source[source.length - 1] !== "'" || source.length === 1)
        onError(source.length, "MISSING_CHAR", "Missing closing 'quote");
    return foldLines(source.slice(1, -1)).replace(/''/g, "'");
}
function foldLines(source) {
    let first, line;
    try {
        first = new RegExp("(.*?)(?<![ 	])[ 	]*\r?\n", "sy");
        line = new RegExp("[ 	]*(.*?)(?:(?<![ 	])[ 	]*)?\r?\n", "sy");
    }
    catch (_) {
        first = /(.*?)[ \t]*\r?\n/sy;
        line = /[ \t]*(.*?)[ \t]*\r?\n/sy;
    }
    let match = first.exec(source);
    if (!match)
        return source;
    let res = match[1];
    let sep = " ";
    let pos = first.lastIndex;
    line.lastIndex = pos;
    while (match = line.exec(source)) {
        if (match[1] === "") {
            if (sep === "\n")
                res += sep;
            else
                sep = "\n";
        }
        else {
            res += sep + match[1];
            sep = " ";
        }
        pos = line.lastIndex;
    }
    const last = /[ \t]*(.*)/sy;
    last.lastIndex = pos;
    match = last.exec(source);
    return res + sep + (match && match[1] || "");
}
function doubleQuotedValue(source, onError) {
    let res = "";
    for (let i = 1; i < source.length - 1; ++i) {
        const ch = source[i];
        if (ch === "\r" && source[i + 1] === "\n")
            continue;
        if (ch === "\n") {
            const { fold, offset } = foldNewline(source, i);
            res += fold;
            i = offset;
        }
        else if (ch === "\\") {
            let next = source[++i];
            const cc = escapeCodes[next];
            if (cc)
                res += cc;
            else if (next === "\n") {
                next = source[i + 1];
                while (next === " " || next === "	")
                    next = source[++i + 1];
            }
            else if (next === "\r" && source[i + 1] === "\n") {
                next = source[++i + 1];
                while (next === " " || next === "	")
                    next = source[++i + 1];
            }
            else if (next === "x" || next === "u" || next === "U") {
                const length = { x: 2, u: 4, U: 8 }[next];
                res += parseCharCode(source, i + 1, length, onError);
                i += length;
            }
            else {
                const raw = source.substr(i - 1, 2);
                onError(i - 1, "BAD_DQ_ESCAPE", `Invalid escape sequence ${raw}`);
                res += raw;
            }
        }
        else if (ch === " " || ch === "	") {
            const wsStart = i;
            let next = source[i + 1];
            while (next === " " || next === "	")
                next = source[++i + 1];
            if (next !== "\n" && !(next === "\r" && source[i + 2] === "\n"))
                res += i > wsStart ? source.slice(wsStart, i + 1) : ch;
        }
        else {
            res += ch;
        }
    }
    if (source[source.length - 1] !== '"' || source.length === 1)
        onError(source.length, "MISSING_CHAR", 'Missing closing "quote');
    return res;
}
function foldNewline(source, offset) {
    let fold = "";
    let ch = source[offset + 1];
    while (ch === " " || ch === "	" || ch === "\n" || ch === "\r") {
        if (ch === "\r" && source[offset + 2] !== "\n")
            break;
        if (ch === "\n")
            fold += "\n";
        offset += 1;
        ch = source[offset + 1];
    }
    if (!fold)
        fold = " ";
    return { fold, offset };
}
var escapeCodes = {
    "0": "\0",
    a: "\x07",
    b: "\b",
    e: "\x1B",
    f: "\f",
    n: "\n",
    r: "\r",
    t: "	",
    v: "\v",
    N: "\x85",
    _: "\xA0",
    L: "\u2028",
    P: "\u2029",
    " ": " ",
    '"': '"',
    "/": "/",
    "\\": "\\",
    "	": "	"
};
function parseCharCode(source, offset, length, onError) {
    const cc = source.substr(offset, length);
    const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);
    const code = ok ? parseInt(cc, 16) : NaN;
    if (isNaN(code)) {
        const raw = source.substr(offset - 2, length + 2);
        onError(offset - 2, "BAD_DQ_ESCAPE", `Invalid escape sequence ${raw}`);
        return raw;
    }
    return String.fromCodePoint(code);
}
// ../../node_modules/yaml/browser/dist/compose/compose-scalar.js
function composeScalar(ctx, token, tagToken, onError) {
    const { value, type, comment, range } = token.type === "block-scalar" ? resolveBlockScalar(token, ctx.options.strict, onError) : resolveFlowScalar(token, ctx.options.strict, onError);
    const tagName = tagToken ? ctx.directives.tagName(tagToken.source, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg)) : null;
    const tag = tagToken && tagName ? findScalarTagByName(ctx.schema, value, tagName, tagToken, onError) : token.type === "scalar" ? findScalarTagByTest(ctx, value, token, onError) : ctx.schema[SCALAR];
    let scalar;
    try {
        const res = tag.resolve(value, (msg) => onError(tagToken || token, "TAG_RESOLVE_FAILED", msg), ctx.options);
        scalar = isScalar(res) ? res : new Scalar(res);
    }
    catch (error) {
        const msg = error instanceof Error ? error.message : String(error);
        onError(tagToken || token, "TAG_RESOLVE_FAILED", msg);
        scalar = new Scalar(value);
    }
    scalar.range = range;
    scalar.source = value;
    if (type)
        scalar.type = type;
    if (tagName)
        scalar.tag = tagName;
    if (tag.format)
        scalar.format = tag.format;
    if (comment)
        scalar.comment = comment;
    return scalar;
}
function findScalarTagByName(schema4, value, tagName, tagToken, onError) {
    var _a;
    if (tagName === "!")
        return schema4[SCALAR];
    const matchWithTest = [];
    for (const tag of schema4.tags) {
        if (!tag.collection && tag.tag === tagName) {
            if (tag.default && tag.test)
                matchWithTest.push(tag);
            else
                return tag;
        }
    }
    for (const tag of matchWithTest)
        if ((_a = tag.test) === null || _a === void 0 ? void 0 : _a.test(value))
            return tag;
    const kt = schema4.knownTags[tagName];
    if (kt && !kt.collection) {
        schema4.tags.push(Object.assign({}, kt, { default: false, test: void 0 }));
        return kt;
    }
    onError(tagToken, "TAG_RESOLVE_FAILED", `Unresolved tag: ${tagName}`, tagName !== "tag:yaml.org,2002:str");
    return schema4[SCALAR];
}
function findScalarTagByTest({ directives, schema: schema4 }, value, token, onError) {
    const tag = schema4.tags.find((tag2) => {
        var _a;
        return tag2.default && ((_a = tag2.test) === null || _a === void 0 ? void 0 : _a.test(value));
    }) || schema4[SCALAR];
    if (schema4.compat) {
        const compat = schema4.compat.find((tag2) => {
            var _a;
            return tag2.default && ((_a = tag2.test) === null || _a === void 0 ? void 0 : _a.test(value));
        }) || schema4[SCALAR];
        if (tag.tag !== compat.tag) {
            const ts = directives.tagString(tag.tag);
            const cs = directives.tagString(compat.tag);
            const msg = `Value may be parsed as either ${ts} or ${cs}`;
            onError(token, "TAG_RESOLVE_FAILED", msg, true);
        }
    }
    return tag;
}
// ../../node_modules/yaml/browser/dist/compose/util-empty-scalar-position.js
function emptyScalarPosition(offset, before, pos) {
    if (before) {
        if (pos === null)
            pos = before.length;
        for (let i = pos - 1; i >= 0; --i) {
            let st = before[i];
            switch (st.type) {
                case "space":
                case "comment":
                case "newline":
                    offset -= st.source.length;
                    continue;
            }
            st = before[++i];
            while ((st === null || st === void 0 ? void 0 : st.type) === "space") {
                offset += st.source.length;
                st = before[++i];
            }
            break;
        }
    }
    return offset;
}
// ../../node_modules/yaml/browser/dist/compose/compose-node.js
var CN = { composeNode, composeEmptyNode };
function composeNode(ctx, token, props, onError) {
    const { spaceBefore, comment, anchor, tag } = props;
    let node;
    let isSrcToken = true;
    switch (token.type) {
        case "alias":
            node = composeAlias(ctx, token, onError);
            if (anchor || tag)
                onError(token, "ALIAS_PROPS", "An alias node must not specify any properties");
            break;
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar":
        case "block-scalar":
            node = composeScalar(ctx, token, tag, onError);
            if (anchor)
                node.anchor = anchor.source.substring(1);
            break;
        case "block-map":
        case "block-seq":
        case "flow-collection":
            node = composeCollection(CN, ctx, token, tag, onError);
            if (anchor)
                node.anchor = anchor.source.substring(1);
            break;
        default: {
            const message = token.type === "error" ? token.message : `Unsupported token (type: ${token.type})`;
            onError(token, "UNEXPECTED_TOKEN", message);
            node = composeEmptyNode(ctx, token.offset, void 0, null, props, onError);
            isSrcToken = false;
        }
    }
    if (anchor && node.anchor === "")
        onError(anchor, "BAD_ALIAS", "Anchor cannot be an empty string");
    if (spaceBefore)
        node.spaceBefore = true;
    if (comment) {
        if (token.type === "scalar" && token.source === "")
            node.comment = comment;
        else
            node.commentBefore = comment;
    }
    if (ctx.options.keepSourceTokens && isSrcToken)
        node.srcToken = token;
    return node;
}
function composeEmptyNode(ctx, offset, before, pos, { spaceBefore, comment, anchor, tag }, onError) {
    const token = {
        type: "scalar",
        offset: emptyScalarPosition(offset, before, pos),
        indent: -1,
        source: ""
    };
    const node = composeScalar(ctx, token, tag, onError);
    if (anchor) {
        node.anchor = anchor.source.substring(1);
        if (node.anchor === "")
            onError(anchor, "BAD_ALIAS", "Anchor cannot be an empty string");
    }
    if (spaceBefore)
        node.spaceBefore = true;
    if (comment)
        node.comment = comment;
    return node;
}
function composeAlias({ options }, { offset, source, end }, onError) {
    const alias = new Alias(source.substring(1));
    if (alias.source === "")
        onError(offset, "BAD_ALIAS", "Alias cannot be an empty string");
    if (alias.source.endsWith(":"))
        onError(offset + source.length - 1, "BAD_ALIAS", "Alias ending in : is ambiguous", true);
    const valueEnd = offset + source.length;
    const re = resolveEnd(end, valueEnd, options.strict, onError);
    alias.range = [offset, valueEnd, re.offset];
    if (re.comment)
        alias.comment = re.comment;
    return alias;
}
// ../../node_modules/yaml/browser/dist/compose/compose-doc.js
function composeDoc(options, directives, { offset, start, value, end }, onError) {
    const opts = Object.assign({ directives }, options);
    const doc = new Document(void 0, opts);
    const ctx = {
        atRoot: true,
        directives: doc.directives,
        options: doc.options,
        schema: doc.schema
    };
    const props = resolveProps(start, {
        indicator: "doc-start",
        next: value || (end === null || end === void 0 ? void 0 : end[0]),
        offset,
        onError,
        startOnNewline: true
    });
    if (props.found) {
        doc.directives.docStart = true;
        if (value && (value.type === "block-map" || value.type === "block-seq") && !props.hasNewline)
            onError(props.end, "MISSING_CHAR", "Block collection cannot start on same line with directives-end marker");
    }
    doc.contents = value ? composeNode(ctx, value, props, onError) : composeEmptyNode(ctx, props.end, start, null, props, onError);
    const contentEnd = doc.contents.range[2];
    const re = resolveEnd(end, contentEnd, false, onError);
    if (re.comment)
        doc.comment = re.comment;
    doc.range = [offset, contentEnd, re.offset];
    return doc;
}
// ../../node_modules/yaml/browser/dist/compose/composer.js
function getErrorPos(src) {
    if (typeof src === "number")
        return [src, src + 1];
    if (Array.isArray(src))
        return src.length === 2 ? src : [src[0], src[1]];
    const { offset, source } = src;
    return [offset, offset + (typeof source === "string" ? source.length : 1)];
}
function parsePrelude(prelude) {
    var _a;
    let comment = "";
    let atComment = false;
    let afterEmptyLine = false;
    for (let i = 0; i < prelude.length; ++i) {
        const source = prelude[i];
        switch (source[0]) {
            case "#":
                comment += (comment === "" ? "" : afterEmptyLine ? "\n\n" : "\n") + (source.substring(1) || " ");
                atComment = true;
                afterEmptyLine = false;
                break;
            case "%":
                if (((_a = prelude[i + 1]) === null || _a === void 0 ? void 0 : _a[0]) !== "#")
                    i += 1;
                atComment = false;
                break;
            default:
                if (!atComment)
                    afterEmptyLine = true;
                atComment = false;
        }
    }
    return { comment, afterEmptyLine };
}
var Composer = class {
    constructor(options = {}) {
        this.doc = null;
        this.atDirectives = false;
        this.prelude = [];
        this.errors = [];
        this.warnings = [];
        this.onError = (source, code, message, warning) => {
            const pos = getErrorPos(source);
            if (warning)
                this.warnings.push(new YAMLWarning(pos, code, message));
            else
                this.errors.push(new YAMLParseError(pos, code, message));
        };
        this.directives = new Directives({ version: options.version || "1.2" });
        this.options = options;
    }
    decorate(doc, afterDoc) {
        const { comment, afterEmptyLine } = parsePrelude(this.prelude);
        if (comment) {
            const dc = doc.contents;
            if (afterDoc) {
                doc.comment = doc.comment ? `${doc.comment}
${comment}` : comment;
            }
            else if (afterEmptyLine || doc.directives.docStart || !dc) {
                doc.commentBefore = comment;
            }
            else if (isCollection(dc) && !dc.flow && dc.items.length > 0) {
                let it = dc.items[0];
                if (isPair(it))
                    it = it.key;
                const cb = it.commentBefore;
                it.commentBefore = cb ? `${comment}
${cb}` : comment;
            }
            else {
                const cb = dc.commentBefore;
                dc.commentBefore = cb ? `${comment}
${cb}` : comment;
            }
        }
        if (afterDoc) {
            Array.prototype.push.apply(doc.errors, this.errors);
            Array.prototype.push.apply(doc.warnings, this.warnings);
        }
        else {
            doc.errors = this.errors;
            doc.warnings = this.warnings;
        }
        this.prelude = [];
        this.errors = [];
        this.warnings = [];
    }
    /**
     * Current stream status information.
     *
     * Mostly useful at the end of input for an empty stream.
     */
    streamInfo() {
        return {
            comment: parsePrelude(this.prelude).comment,
            directives: this.directives,
            errors: this.errors,
            warnings: this.warnings
        };
    }
    /**
     * Compose tokens into documents.
     *
     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
     */
    *compose(tokens, forceDoc = false, endOffset = -1) {
        for (const token of tokens)
            yield* this.next(token);
        yield* this.end(forceDoc, endOffset);
    }
    /** Advance the composer by one CST token. */
    *next(token) {
        switch (token.type) {
            case "directive":
                this.directives.add(token.source, (offset, message, warning) => {
                    const pos = getErrorPos(token);
                    pos[0] += offset;
                    this.onError(pos, "BAD_DIRECTIVE", message, warning);
                });
                this.prelude.push(token.source);
                this.atDirectives = true;
                break;
            case "document": {
                const doc = composeDoc(this.options, this.directives, token, this.onError);
                if (this.atDirectives && !doc.directives.docStart)
                    this.onError(token, "MISSING_CHAR", "Missing directives-end/doc-start indicator line");
                this.decorate(doc, false);
                if (this.doc)
                    yield this.doc;
                this.doc = doc;
                this.atDirectives = false;
                break;
            }
            case "byte-order-mark":
            case "space":
                break;
            case "comment":
            case "newline":
                this.prelude.push(token.source);
                break;
            case "error": {
                const msg = token.source ? `${token.message}: ${JSON.stringify(token.source)}` : token.message;
                const error = new YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", msg);
                if (this.atDirectives || !this.doc)
                    this.errors.push(error);
                else
                    this.doc.errors.push(error);
                break;
            }
            case "doc-end": {
                if (!this.doc) {
                    const msg = "Unexpected doc-end without preceding document";
                    this.errors.push(new YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", msg));
                    break;
                }
                this.doc.directives.docEnd = true;
                const end = resolveEnd(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);
                this.decorate(this.doc, true);
                if (end.comment) {
                    const dc = this.doc.comment;
                    this.doc.comment = dc ? `${dc}
${end.comment}` : end.comment;
                }
                this.doc.range[2] = end.offset;
                break;
            }
            default:
                this.errors.push(new YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", `Unsupported token ${token.type}`));
        }
    }
    /**
     * Call at end of input to yield any remaining document.
     *
     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
     */
    *end(forceDoc = false, endOffset = -1) {
        if (this.doc) {
            this.decorate(this.doc, true);
            yield this.doc;
            this.doc = null;
        }
        else if (forceDoc) {
            const opts = Object.assign({ directives: this.directives }, this.options);
            const doc = new Document(void 0, opts);
            if (this.atDirectives)
                this.onError(endOffset, "MISSING_CHAR", "Missing directives-end indicator line");
            doc.range = [0, endOffset, endOffset];
            this.decorate(doc, false);
            yield doc;
        }
    }
};
// ../../node_modules/yaml/browser/dist/parse/cst.js
var cst_exports = {};
__export(cst_exports, {
    BOM: () => BOM,
    DOCUMENT: () => DOCUMENT,
    FLOW_END: () => FLOW_END,
    SCALAR: () => SCALAR2,
    createScalarToken: () => createScalarToken,
    isCollection: () => isCollection2,
    isScalar: () => isScalar2,
    prettyToken: () => prettyToken,
    resolveAsScalar: () => resolveAsScalar,
    setScalarValue: () => setScalarValue,
    stringify: () => stringify2,
    tokenType: () => tokenType,
    visit: () => visit2
});
// ../../node_modules/yaml/browser/dist/parse/cst-scalar.js
function resolveAsScalar(token, strict = true, onError) {
    if (token) {
        const _onError = (pos, code, message) => {
            const offset = typeof pos === "number" ? pos : Array.isArray(pos) ? pos[0] : pos.offset;
            if (onError)
                onError(offset, code, message);
            else
                throw new YAMLParseError([offset, offset + 1], code, message);
        };
        switch (token.type) {
            case "scalar":
            case "single-quoted-scalar":
            case "double-quoted-scalar":
                return resolveFlowScalar(token, strict, _onError);
            case "block-scalar":
                return resolveBlockScalar(token, strict, _onError);
        }
    }
    return null;
}
function createScalarToken(value, context) {
    var _a;
    const { implicitKey = false, indent, inFlow = false, offset = -1, type = "PLAIN" } = context;
    const source = stringifyString({ type, value }, {
        implicitKey,
        indent: indent > 0 ? " ".repeat(indent) : "",
        inFlow,
        options: { blockQuote: true, lineWidth: -1 }
    });
    const end = (_a = context.end) !== null && _a !== void 0 ? _a : [
        { type: "newline", offset: -1, indent, source: "\n" }
    ];
    switch (source[0]) {
        case "|":
        case ">": {
            const he = source.indexOf("\n");
            const head = source.substring(0, he);
            const body = source.substring(he + 1) + "\n";
            const props = [
                { type: "block-scalar-header", offset, indent, source: head }
            ];
            if (!addEndtoBlockProps(props, end))
                props.push({ type: "newline", offset: -1, indent, source: "\n" });
            return { type: "block-scalar", offset, indent, props, source: body };
        }
        case '"':
            return { type: "double-quoted-scalar", offset, indent, source, end };
        case "'":
            return { type: "single-quoted-scalar", offset, indent, source, end };
        default:
            return { type: "scalar", offset, indent, source, end };
    }
}
function setScalarValue(token, value, context = {}) {
    let { afterKey = false, implicitKey = false, inFlow = false, type } = context;
    let indent = "indent" in token ? token.indent : null;
    if (afterKey && typeof indent === "number")
        indent += 2;
    if (!type)
        switch (token.type) {
            case "single-quoted-scalar":
                type = "QUOTE_SINGLE";
                break;
            case "double-quoted-scalar":
                type = "QUOTE_DOUBLE";
                break;
            case "block-scalar": {
                const header = token.props[0];
                if (header.type !== "block-scalar-header")
                    throw new Error("Invalid block scalar header");
                type = header.source[0] === ">" ? "BLOCK_FOLDED" : "BLOCK_LITERAL";
                break;
            }
            default:
                type = "PLAIN";
        }
    const source = stringifyString({ type, value }, {
        implicitKey: implicitKey || indent === null,
        indent: indent !== null && indent > 0 ? " ".repeat(indent) : "",
        inFlow,
        options: { blockQuote: true, lineWidth: -1 }
    });
    switch (source[0]) {
        case "|":
        case ">":
            setBlockScalarValue(token, source);
            break;
        case '"':
            setFlowScalarValue(token, source, "double-quoted-scalar");
            break;
        case "'":
            setFlowScalarValue(token, source, "single-quoted-scalar");
            break;
        default:
            setFlowScalarValue(token, source, "scalar");
    }
}
function setBlockScalarValue(token, source) {
    const he = source.indexOf("\n");
    const head = source.substring(0, he);
    const body = source.substring(he + 1) + "\n";
    if (token.type === "block-scalar") {
        const header = token.props[0];
        if (header.type !== "block-scalar-header")
            throw new Error("Invalid block scalar header");
        header.source = head;
        token.source = body;
    }
    else {
        const { offset } = token;
        const indent = "indent" in token ? token.indent : -1;
        const props = [
            { type: "block-scalar-header", offset, indent, source: head }
        ];
        if (!addEndtoBlockProps(props, "end" in token ? token.end : void 0))
            props.push({ type: "newline", offset: -1, indent, source: "\n" });
        for (const key of Object.keys(token))
            if (key !== "type" && key !== "offset")
                delete token[key];
        Object.assign(token, { type: "block-scalar", indent, props, source: body });
    }
}
function addEndtoBlockProps(props, end) {
    if (end)
        for (const st of end)
            switch (st.type) {
                case "space":
                case "comment":
                    props.push(st);
                    break;
                case "newline":
                    props.push(st);
                    return true;
            }
    return false;
}
function setFlowScalarValue(token, source, type) {
    switch (token.type) {
        case "scalar":
        case "double-quoted-scalar":
        case "single-quoted-scalar":
            token.type = type;
            token.source = source;
            break;
        case "block-scalar": {
            const end = token.props.slice(1);
            let oa = source.length;
            if (token.props[0].type === "block-scalar-header")
                oa -= token.props[0].source.length;
            for (const tok of end)
                tok.offset += oa;
            delete token.props;
            Object.assign(token, { type, source, end });
            break;
        }
        case "block-map":
        case "block-seq": {
            const offset = token.offset + source.length;
            const nl = { type: "newline", offset, indent: token.indent, source: "\n" };
            delete token.items;
            Object.assign(token, { type, source, end: [nl] });
            break;
        }
        default: {
            const indent = "indent" in token ? token.indent : -1;
            const end = "end" in token && Array.isArray(token.end) ? token.end.filter((st) => st.type === "space" || st.type === "comment" || st.type === "newline") : [];
            for (const key of Object.keys(token))
                if (key !== "type" && key !== "offset")
                    delete token[key];
            Object.assign(token, { type, indent, source, end });
        }
    }
}
// ../../node_modules/yaml/browser/dist/parse/cst-stringify.js
var stringify2 = (cst) => "type" in cst ? stringifyToken(cst) : stringifyItem(cst);
function stringifyToken(token) {
    switch (token.type) {
        case "block-scalar": {
            let res = "";
            for (const tok of token.props)
                res += stringifyToken(tok);
            return res + token.source;
        }
        case "block-map":
        case "block-seq": {
            let res = "";
            for (const item of token.items)
                res += stringifyItem(item);
            return res;
        }
        case "flow-collection": {
            let res = token.start.source;
            for (const item of token.items)
                res += stringifyItem(item);
            for (const st of token.end)
                res += st.source;
            return res;
        }
        case "document": {
            let res = stringifyItem(token);
            if (token.end)
                for (const st of token.end)
                    res += st.source;
            return res;
        }
        default: {
            let res = token.source;
            if ("end" in token && token.end)
                for (const st of token.end)
                    res += st.source;
            return res;
        }
    }
}
function stringifyItem({ start, key, sep, value }) {
    let res = "";
    for (const st of start)
        res += st.source;
    if (key)
        res += stringifyToken(key);
    if (sep)
        for (const st of sep)
            res += st.source;
    if (value)
        res += stringifyToken(value);
    return res;
}
// ../../node_modules/yaml/browser/dist/parse/cst-visit.js
var BREAK2 = Symbol("break visit");
var SKIP2 = Symbol("skip children");
var REMOVE2 = Symbol("remove item");
function visit2(cst, visitor) {
    if ("type" in cst && cst.type === "document")
        cst = { start: cst.start, value: cst.value };
    _visit(Object.freeze([]), cst, visitor);
}
visit2.BREAK = BREAK2;
visit2.SKIP = SKIP2;
visit2.REMOVE = REMOVE2;
visit2.itemAtPath = (cst, path5) => {
    let item = cst;
    for (const [field, index] of path5) {
        const tok = item && item[field];
        if (tok && "items" in tok) {
            item = tok.items[index];
        }
        else
            return void 0;
    }
    return item;
};
visit2.parentCollection = (cst, path5) => {
    const parent = visit2.itemAtPath(cst, path5.slice(0, -1));
    const field = path5[path5.length - 1][0];
    const coll = parent && parent[field];
    if (coll && "items" in coll)
        return coll;
    throw new Error("Parent collection not found");
};
function _visit(path5, item, visitor) {
    let ctrl = visitor(item, path5);
    if (typeof ctrl === "symbol")
        return ctrl;
    for (const field of ["key", "value"]) {
        const token = item[field];
        if (token && "items" in token) {
            for (let i = 0; i < token.items.length; ++i) {
                const ci = _visit(Object.freeze(path5.concat([[field, i]])), token.items[i], visitor);
                if (typeof ci === "number")
                    i = ci - 1;
                else if (ci === BREAK2)
                    return BREAK2;
                else if (ci === REMOVE2) {
                    token.items.splice(i, 1);
                    i -= 1;
                }
            }
            if (typeof ctrl === "function" && field === "key")
                ctrl = ctrl(item, path5);
        }
    }
    return typeof ctrl === "function" ? ctrl(item, path5) : ctrl;
}
// ../../node_modules/yaml/browser/dist/parse/cst.js
var BOM = "\uFEFF";
var DOCUMENT = "";
var FLOW_END = "";
var SCALAR2 = "";
var isCollection2 = (token) => !!token && "items" in token;
var isScalar2 = (token) => !!token && (token.type === "scalar" || token.type === "single-quoted-scalar" || token.type === "double-quoted-scalar" || token.type === "block-scalar");
function prettyToken(token) {
    switch (token) {
        case BOM:
            return "<BOM>";
        case DOCUMENT:
            return "<DOC>";
        case FLOW_END:
            return "<FLOW_END>";
        case SCALAR2:
            return "<SCALAR>";
        default:
            return JSON.stringify(token);
    }
}
function tokenType(source) {
    switch (source) {
        case BOM:
            return "byte-order-mark";
        case DOCUMENT:
            return "doc-mode";
        case FLOW_END:
            return "flow-error-end";
        case SCALAR2:
            return "scalar";
        case "---":
            return "doc-start";
        case "...":
            return "doc-end";
        case "":
        case "\n":
        case "\r\n":
            return "newline";
        case "-":
            return "seq-item-ind";
        case "?":
            return "explicit-key-ind";
        case ":":
            return "map-value-ind";
        case "{":
            return "flow-map-start";
        case "}":
            return "flow-map-end";
        case "[":
            return "flow-seq-start";
        case "]":
            return "flow-seq-end";
        case ",":
            return "comma";
    }
    switch (source[0]) {
        case " ":
        case "	":
            return "space";
        case "#":
            return "comment";
        case "%":
            return "directive-line";
        case "*":
            return "alias";
        case "&":
            return "anchor";
        case "!":
            return "tag";
        case "'":
            return "single-quoted-scalar";
        case '"':
            return "double-quoted-scalar";
        case "|":
        case ">":
            return "block-scalar-header";
    }
    return null;
}
// ../../node_modules/yaml/browser/dist/parse/lexer.js
function isEmpty(ch) {
    switch (ch) {
        case void 0:
        case " ":
        case "\n":
        case "\r":
        case "	":
            return true;
        default:
            return false;
    }
}
var hexDigits = "0123456789ABCDEFabcdef".split("");
var tagChars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()".split("");
var invalidFlowScalarChars = ",[]{}".split("");
var invalidAnchorChars = " ,[]{}\n\r	".split("");
var isNotAnchorChar = (ch) => !ch || invalidAnchorChars.includes(ch);
var Lexer = class {
    constructor() {
        this.atEnd = false;
        this.blockScalarIndent = -1;
        this.blockScalarKeep = false;
        this.buffer = "";
        this.flowKey = false;
        this.flowLevel = 0;
        this.indentNext = 0;
        this.indentValue = 0;
        this.lineEndPos = null;
        this.next = null;
        this.pos = 0;
    }
    /**
     * Generate YAML tokens from the `source` string. If `incomplete`,
     * a part of the last line may be left as a buffer for the next call.
     *
     * @returns A generator of lexical tokens
     */
    *lex(source, incomplete = false) {
        if (source) {
            this.buffer = this.buffer ? this.buffer + source : source;
            this.lineEndPos = null;
        }
        this.atEnd = !incomplete;
        let next = this.next || "stream";
        while (next && (incomplete || this.hasChars(1)))
            next = yield* this.parseNext(next);
    }
    atLineEnd() {
        let i = this.pos;
        let ch = this.buffer[i];
        while (ch === " " || ch === "	")
            ch = this.buffer[++i];
        if (!ch || ch === "#" || ch === "\n")
            return true;
        if (ch === "\r")
            return this.buffer[i + 1] === "\n";
        return false;
    }
    charAt(n) {
        return this.buffer[this.pos + n];
    }
    continueScalar(offset) {
        let ch = this.buffer[offset];
        if (this.indentNext > 0) {
            let indent = 0;
            while (ch === " ")
                ch = this.buffer[++indent + offset];
            if (ch === "\r") {
                const next = this.buffer[indent + offset + 1];
                if (next === "\n" || !next && !this.atEnd)
                    return offset + indent + 1;
            }
            return ch === "\n" || indent >= this.indentNext || !ch && !this.atEnd ? offset + indent : -1;
        }
        if (ch === "-" || ch === ".") {
            const dt = this.buffer.substr(offset, 3);
            if ((dt === "---" || dt === "...") && isEmpty(this.buffer[offset + 3]))
                return -1;
        }
        return offset;
    }
    getLine() {
        let end = this.lineEndPos;
        if (typeof end !== "number" || end !== -1 && end < this.pos) {
            end = this.buffer.indexOf("\n", this.pos);
            this.lineEndPos = end;
        }
        if (end === -1)
            return this.atEnd ? this.buffer.substring(this.pos) : null;
        if (this.buffer[end - 1] === "\r")
            end -= 1;
        return this.buffer.substring(this.pos, end);
    }
    hasChars(n) {
        return this.pos + n <= this.buffer.length;
    }
    setNext(state) {
        this.buffer = this.buffer.substring(this.pos);
        this.pos = 0;
        this.lineEndPos = null;
        this.next = state;
        return null;
    }
    peek(n) {
        return this.buffer.substr(this.pos, n);
    }
    *parseNext(next) {
        switch (next) {
            case "stream":
                return yield* this.parseStream();
            case "line-start":
                return yield* this.parseLineStart();
            case "block-start":
                return yield* this.parseBlockStart();
            case "doc":
                return yield* this.parseDocument();
            case "flow":
                return yield* this.parseFlowCollection();
            case "quoted-scalar":
                return yield* this.parseQuotedScalar();
            case "block-scalar":
                return yield* this.parseBlockScalar();
            case "plain-scalar":
                return yield* this.parsePlainScalar();
        }
    }
    *parseStream() {
        let line = this.getLine();
        if (line === null)
            return this.setNext("stream");
        if (line[0] === BOM) {
            yield* this.pushCount(1);
            line = line.substring(1);
        }
        if (line[0] === "%") {
            let dirEnd = line.length;
            const cs = line.indexOf("#");
            if (cs !== -1) {
                const ch = line[cs - 1];
                if (ch === " " || ch === "	")
                    dirEnd = cs - 1;
            }
            while (true) {
                const ch = line[dirEnd - 1];
                if (ch === " " || ch === "	")
                    dirEnd -= 1;
                else
                    break;
            }
            const n = (yield* this.pushCount(dirEnd)) + (yield* this.pushSpaces(true));
            yield* this.pushCount(line.length - n);
            this.pushNewline();
            return "stream";
        }
        if (this.atLineEnd()) {
            const sp = yield* this.pushSpaces(true);
            yield* this.pushCount(line.length - sp);
            yield* this.pushNewline();
            return "stream";
        }
        yield DOCUMENT;
        return yield* this.parseLineStart();
    }
    *parseLineStart() {
        const ch = this.charAt(0);
        if (!ch && !this.atEnd)
            return this.setNext("line-start");
        if (ch === "-" || ch === ".") {
            if (!this.atEnd && !this.hasChars(4))
                return this.setNext("line-start");
            const s = this.peek(3);
            if (s === "---" && isEmpty(this.charAt(3))) {
                yield* this.pushCount(3);
                this.indentValue = 0;
                this.indentNext = 0;
                return "doc";
            }
            else if (s === "..." && isEmpty(this.charAt(3))) {
                yield* this.pushCount(3);
                return "stream";
            }
        }
        this.indentValue = yield* this.pushSpaces(false);
        if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1)))
            this.indentNext = this.indentValue;
        return yield* this.parseBlockStart();
    }
    *parseBlockStart() {
        const [ch0, ch1] = this.peek(2);
        if (!ch1 && !this.atEnd)
            return this.setNext("block-start");
        if ((ch0 === "-" || ch0 === "?" || ch0 === ":") && isEmpty(ch1)) {
            const n = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));
            this.indentNext = this.indentValue + 1;
            this.indentValue += n;
            return yield* this.parseBlockStart();
        }
        return "doc";
    }
    *parseDocument() {
        yield* this.pushSpaces(true);
        const line = this.getLine();
        if (line === null)
            return this.setNext("doc");
        let n = yield* this.pushIndicators();
        switch (line[n]) {
            case "#":
                yield* this.pushCount(line.length - n);
            case void 0:
                yield* this.pushNewline();
                return yield* this.parseLineStart();
            case "{":
            case "[":
                yield* this.pushCount(1);
                this.flowKey = false;
                this.flowLevel = 1;
                return "flow";
            case "}":
            case "]":
                yield* this.pushCount(1);
                return "doc";
            case "*":
                yield* this.pushUntil(isNotAnchorChar);
                return "doc";
            case '"':
            case "'":
                return yield* this.parseQuotedScalar();
            case "|":
            case ">":
                n += yield* this.parseBlockScalarHeader();
                n += yield* this.pushSpaces(true);
                yield* this.pushCount(line.length - n);
                yield* this.pushNewline();
                return yield* this.parseBlockScalar();
            default:
                return yield* this.parsePlainScalar();
        }
    }
    *parseFlowCollection() {
        let nl, sp;
        let indent = -1;
        do {
            nl = yield* this.pushNewline();
            if (nl > 0) {
                sp = yield* this.pushSpaces(false);
                this.indentValue = indent = sp;
            }
            else {
                sp = 0;
            }
            sp += yield* this.pushSpaces(true);
        } while (nl + sp > 0);
        const line = this.getLine();
        if (line === null)
            return this.setNext("flow");
        if (indent !== -1 && indent < this.indentNext && line[0] !== "#" || indent === 0 && (line.startsWith("---") || line.startsWith("...")) && isEmpty(line[3])) {
            const atFlowEndMarker = indent === this.indentNext - 1 && this.flowLevel === 1 && (line[0] === "]" || line[0] === "}");
            if (!atFlowEndMarker) {
                this.flowLevel = 0;
                yield FLOW_END;
                return yield* this.parseLineStart();
            }
        }
        let n = 0;
        while (line[n] === ",") {
            n += yield* this.pushCount(1);
            n += yield* this.pushSpaces(true);
            this.flowKey = false;
        }
        n += yield* this.pushIndicators();
        switch (line[n]) {
            case void 0:
                return "flow";
            case "#":
                yield* this.pushCount(line.length - n);
                return "flow";
            case "{":
            case "[":
                yield* this.pushCount(1);
                this.flowKey = false;
                this.flowLevel += 1;
                return "flow";
            case "}":
            case "]":
                yield* this.pushCount(1);
                this.flowKey = true;
                this.flowLevel -= 1;
                return this.flowLevel ? "flow" : "doc";
            case "*":
                yield* this.pushUntil(isNotAnchorChar);
                return "flow";
            case '"':
            case "'":
                this.flowKey = true;
                return yield* this.parseQuotedScalar();
            case ":": {
                const next = this.charAt(1);
                if (this.flowKey || isEmpty(next) || next === ",") {
                    this.flowKey = false;
                    yield* this.pushCount(1);
                    yield* this.pushSpaces(true);
                    return "flow";
                }
            }
            default:
                this.flowKey = false;
                return yield* this.parsePlainScalar();
        }
    }
    *parseQuotedScalar() {
        const quote = this.charAt(0);
        let end = this.buffer.indexOf(quote, this.pos + 1);
        if (quote === "'") {
            while (end !== -1 && this.buffer[end + 1] === "'")
                end = this.buffer.indexOf("'", end + 2);
        }
        else {
            while (end !== -1) {
                let n = 0;
                while (this.buffer[end - 1 - n] === "\\")
                    n += 1;
                if (n % 2 === 0)
                    break;
                end = this.buffer.indexOf('"', end + 1);
            }
        }
        const qb = this.buffer.substring(0, end);
        let nl = qb.indexOf("\n", this.pos);
        if (nl !== -1) {
            while (nl !== -1) {
                const cs = this.continueScalar(nl + 1);
                if (cs === -1)
                    break;
                nl = qb.indexOf("\n", cs);
            }
            if (nl !== -1) {
                end = nl - (qb[nl - 1] === "\r" ? 2 : 1);
            }
        }
        if (end === -1) {
            if (!this.atEnd)
                return this.setNext("quoted-scalar");
            end = this.buffer.length;
        }
        yield* this.pushToIndex(end + 1, false);
        return this.flowLevel ? "flow" : "doc";
    }
    *parseBlockScalarHeader() {
        this.blockScalarIndent = -1;
        this.blockScalarKeep = false;
        let i = this.pos;
        while (true) {
            const ch = this.buffer[++i];
            if (ch === "+")
                this.blockScalarKeep = true;
            else if (ch > "0" && ch <= "9")
                this.blockScalarIndent = Number(ch) - 1;
            else if (ch !== "-")
                break;
        }
        return yield* this.pushUntil((ch) => isEmpty(ch) || ch === "#");
    }
    *parseBlockScalar() {
        let nl = this.pos - 1;
        let indent = 0;
        let ch;
        loop: for (let i = this.pos; ch = this.buffer[i]; ++i) {
            switch (ch) {
                case " ":
                    indent += 1;
                    break;
                case "\n":
                    nl = i;
                    indent = 0;
                    break;
                case "\r": {
                    const next = this.buffer[i + 1];
                    if (!next && !this.atEnd)
                        return this.setNext("block-scalar");
                    if (next === "\n")
                        break;
                }
                default:
                    break loop;
            }
        }
        if (!ch && !this.atEnd)
            return this.setNext("block-scalar");
        if (indent >= this.indentNext) {
            if (this.blockScalarIndent === -1)
                this.indentNext = indent;
            else
                this.indentNext += this.blockScalarIndent;
            do {
                const cs = this.continueScalar(nl + 1);
                if (cs === -1)
                    break;
                nl = this.buffer.indexOf("\n", cs);
            } while (nl !== -1);
            if (nl === -1) {
                if (!this.atEnd)
                    return this.setNext("block-scalar");
                nl = this.buffer.length;
            }
        }
        if (!this.blockScalarKeep) {
            do {
                let i = nl - 1;
                let ch2 = this.buffer[i];
                if (ch2 === "\r")
                    ch2 = this.buffer[--i];
                const lastChar = i;
                while (ch2 === " " || ch2 === "	")
                    ch2 = this.buffer[--i];
                if (ch2 === "\n" && i >= this.pos && i + 1 + indent > lastChar)
                    nl = i;
                else
                    break;
            } while (true);
        }
        yield SCALAR2;
        yield* this.pushToIndex(nl + 1, true);
        return yield* this.parseLineStart();
    }
    *parsePlainScalar() {
        const inFlow = this.flowLevel > 0;
        let end = this.pos - 1;
        let i = this.pos - 1;
        let ch;
        while (ch = this.buffer[++i]) {
            if (ch === ":") {
                const next = this.buffer[i + 1];
                if (isEmpty(next) || inFlow && next === ",")
                    break;
                end = i;
            }
            else if (isEmpty(ch)) {
                let next = this.buffer[i + 1];
                if (ch === "\r") {
                    if (next === "\n") {
                        i += 1;
                        ch = "\n";
                        next = this.buffer[i + 1];
                    }
                    else
                        end = i;
                }
                if (next === "#" || inFlow && invalidFlowScalarChars.includes(next))
                    break;
                if (ch === "\n") {
                    const cs = this.continueScalar(i + 1);
                    if (cs === -1)
                        break;
                    i = Math.max(i, cs - 2);
                }
            }
            else {
                if (inFlow && invalidFlowScalarChars.includes(ch))
                    break;
                end = i;
            }
        }
        if (!ch && !this.atEnd)
            return this.setNext("plain-scalar");
        yield SCALAR2;
        yield* this.pushToIndex(end + 1, true);
        return inFlow ? "flow" : "doc";
    }
    *pushCount(n) {
        if (n > 0) {
            yield this.buffer.substr(this.pos, n);
            this.pos += n;
            return n;
        }
        return 0;
    }
    *pushToIndex(i, allowEmpty) {
        const s = this.buffer.slice(this.pos, i);
        if (s) {
            yield s;
            this.pos += s.length;
            return s.length;
        }
        else if (allowEmpty)
            yield "";
        return 0;
    }
    *pushIndicators() {
        switch (this.charAt(0)) {
            case "!":
                return (yield* this.pushTag()) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
            case "&":
                return (yield* this.pushUntil(isNotAnchorChar)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
            case "-":
            case "?":
            case ":": {
                const inFlow = this.flowLevel > 0;
                const ch1 = this.charAt(1);
                if (isEmpty(ch1) || inFlow && invalidFlowScalarChars.includes(ch1)) {
                    if (!inFlow)
                        this.indentNext = this.indentValue + 1;
                    else if (this.flowKey)
                        this.flowKey = false;
                    return (yield* this.pushCount(1)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
                }
            }
        }
        return 0;
    }
    *pushTag() {
        if (this.charAt(1) === "<") {
            let i = this.pos + 2;
            let ch = this.buffer[i];
            while (!isEmpty(ch) && ch !== ">")
                ch = this.buffer[++i];
            return yield* this.pushToIndex(ch === ">" ? i + 1 : i, false);
        }
        else {
            let i = this.pos + 1;
            let ch = this.buffer[i];
            while (ch) {
                if (tagChars.includes(ch))
                    ch = this.buffer[++i];
                else if (ch === "%" && hexDigits.includes(this.buffer[i + 1]) && hexDigits.includes(this.buffer[i + 2])) {
                    ch = this.buffer[i += 3];
                }
                else
                    break;
            }
            return yield* this.pushToIndex(i, false);
        }
    }
    *pushNewline() {
        const ch = this.buffer[this.pos];
        if (ch === "\n")
            return yield* this.pushCount(1);
        else if (ch === "\r" && this.charAt(1) === "\n")
            return yield* this.pushCount(2);
        else
            return 0;
    }
    *pushSpaces(allowTabs) {
        let i = this.pos - 1;
        let ch;
        do {
            ch = this.buffer[++i];
        } while (ch === " " || allowTabs && ch === "	");
        const n = i - this.pos;
        if (n > 0) {
            yield this.buffer.substr(this.pos, n);
            this.pos = i;
        }
        return n;
    }
    *pushUntil(test) {
        let i = this.pos;
        let ch = this.buffer[i];
        while (!test(ch))
            ch = this.buffer[++i];
        return yield* this.pushToIndex(i, false);
    }
};
// ../../node_modules/yaml/browser/dist/parse/line-counter.js
var LineCounter = class {
    constructor() {
        this.lineStarts = [];
        this.addNewLine = (offset) => this.lineStarts.push(offset);
        this.linePos = (offset) => {
            let low = 0;
            let high = this.lineStarts.length;
            while (low < high) {
                const mid = low + high >> 1;
                if (this.lineStarts[mid] < offset)
                    low = mid + 1;
                else
                    high = mid;
            }
            if (this.lineStarts[low] === offset)
                return { line: low + 1, col: 1 };
            if (low === 0)
                return { line: 0, col: offset };
            const start = this.lineStarts[low - 1];
            return { line: low, col: offset - start + 1 };
        };
    }
};
// ../../node_modules/yaml/browser/dist/parse/parser.js
function includesToken(list, type) {
    for (let i = 0; i < list.length; ++i)
        if (list[i].type === type)
            return true;
    return false;
}
function includesNonEmpty(list) {
    for (let i = 0; i < list.length; ++i) {
        switch (list[i].type) {
            case "space":
            case "comment":
            case "newline":
                break;
            default:
                return true;
        }
    }
    return false;
}
function isFlowToken(token) {
    switch (token === null || token === void 0 ? void 0 : token.type) {
        case "alias":
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar":
        case "flow-collection":
            return true;
        default:
            return false;
    }
}
function getPrevProps(parent) {
    switch (parent.type) {
        case "document":
            return parent.start;
        case "block-map": {
            const it = parent.items[parent.items.length - 1];
            return it.sep || it.start;
        }
        case "block-seq":
            return parent.items[parent.items.length - 1].start;
        default:
            return [];
    }
}
function getFirstKeyStartProps(prev) {
    var _a;
    if (prev.length === 0)
        return [];
    let i = prev.length;
    loop: while (--i >= 0) {
        switch (prev[i].type) {
            case "doc-start":
            case "explicit-key-ind":
            case "map-value-ind":
            case "seq-item-ind":
            case "newline":
                break loop;
        }
    }
    while (((_a = prev[++i]) === null || _a === void 0 ? void 0 : _a.type) === "space") {
    }
    return prev.splice(i, prev.length);
}
function fixFlowSeqItems(fc) {
    if (fc.start.type === "flow-seq-start") {
        for (const it of fc.items) {
            if (it.sep && !it.value && !includesToken(it.start, "explicit-key-ind") && !includesToken(it.sep, "map-value-ind")) {
                if (it.key)
                    it.value = it.key;
                delete it.key;
                if (isFlowToken(it.value)) {
                    if (it.value.end)
                        Array.prototype.push.apply(it.value.end, it.sep);
                    else
                        it.value.end = it.sep;
                }
                else
                    Array.prototype.push.apply(it.start, it.sep);
                delete it.sep;
            }
        }
    }
}
var Parser = class {
    /**
     * @param onNewLine - If defined, called separately with the start position of
     *   each new line (in `parse()`, including the start of input).
     */
    constructor(onNewLine) {
        this.atNewLine = true;
        this.atScalar = false;
        this.indent = 0;
        this.offset = 0;
        this.onKeyLine = false;
        this.stack = [];
        this.source = "";
        this.type = "";
        this.lexer = new Lexer();
        this.onNewLine = onNewLine;
    }
    /**
     * Parse `source` as a YAML stream.
     * If `incomplete`, a part of the last line may be left as a buffer for the next call.
     *
     * Errors are not thrown, but yielded as `{ type: 'error', message }` tokens.
     *
     * @returns A generator of tokens representing each directive, document, and other structure.
     */
    *parse(source, incomplete = false) {
        if (this.onNewLine && this.offset === 0)
            this.onNewLine(0);
        for (const lexeme of this.lexer.lex(source, incomplete))
            yield* this.next(lexeme);
        if (!incomplete)
            yield* this.end();
    }
    /**
     * Advance the parser by the `source` of one lexical token.
     */
    *next(source) {
        this.source = source;
        if (this.atScalar) {
            this.atScalar = false;
            yield* this.step();
            this.offset += source.length;
            return;
        }
        const type = tokenType(source);
        if (!type) {
            const message = `Not a YAML token: ${source}`;
            yield* this.pop({ type: "error", offset: this.offset, message, source });
            this.offset += source.length;
        }
        else if (type === "scalar") {
            this.atNewLine = false;
            this.atScalar = true;
            this.type = "scalar";
        }
        else {
            this.type = type;
            yield* this.step();
            switch (type) {
                case "newline":
                    this.atNewLine = true;
                    this.indent = 0;
                    if (this.onNewLine)
                        this.onNewLine(this.offset + source.length);
                    break;
                case "space":
                    if (this.atNewLine && source[0] === " ")
                        this.indent += source.length;
                    break;
                case "explicit-key-ind":
                case "map-value-ind":
                case "seq-item-ind":
                    if (this.atNewLine)
                        this.indent += source.length;
                    break;
                case "doc-mode":
                case "flow-error-end":
                    return;
                default:
                    this.atNewLine = false;
            }
            this.offset += source.length;
        }
    }
    /** Call at end of input to push out any remaining constructions */
    *end() {
        while (this.stack.length > 0)
            yield* this.pop();
    }
    get sourceToken() {
        const st = {
            type: this.type,
            offset: this.offset,
            indent: this.indent,
            source: this.source
        };
        return st;
    }
    *step() {
        const top = this.peek(1);
        if (this.type === "doc-end" && (!top || top.type !== "doc-end")) {
            while (this.stack.length > 0)
                yield* this.pop();
            this.stack.push({
                type: "doc-end",
                offset: this.offset,
                source: this.source
            });
            return;
        }
        if (!top)
            return yield* this.stream();
        switch (top.type) {
            case "document":
                return yield* this.document(top);
            case "alias":
            case "scalar":
            case "single-quoted-scalar":
            case "double-quoted-scalar":
                return yield* this.scalar(top);
            case "block-scalar":
                return yield* this.blockScalar(top);
            case "block-map":
                return yield* this.blockMap(top);
            case "block-seq":
                return yield* this.blockSequence(top);
            case "flow-collection":
                return yield* this.flowCollection(top);
            case "doc-end":
                return yield* this.documentEnd(top);
        }
        yield* this.pop();
    }
    peek(n) {
        return this.stack[this.stack.length - n];
    }
    *pop(error) {
        const token = error || this.stack.pop();
        if (!token) {
            const message = "Tried to pop an empty stack";
            yield { type: "error", offset: this.offset, source: "", message };
        }
        else if (this.stack.length === 0) {
            yield token;
        }
        else {
            const top = this.peek(1);
            if (token.type === "block-scalar") {
                token.indent = "indent" in top ? top.indent : 0;
            }
            else if (token.type === "flow-collection" && top.type === "document") {
                token.indent = 0;
            }
            if (token.type === "flow-collection")
                fixFlowSeqItems(token);
            switch (top.type) {
                case "document":
                    top.value = token;
                    break;
                case "block-scalar":
                    top.props.push(token);
                    break;
                case "block-map": {
                    const it = top.items[top.items.length - 1];
                    if (it.value) {
                        top.items.push({ start: [], key: token, sep: [] });
                        this.onKeyLine = true;
                        return;
                    }
                    else if (it.sep) {
                        it.value = token;
                    }
                    else {
                        Object.assign(it, { key: token, sep: [] });
                        this.onKeyLine = !includesToken(it.start, "explicit-key-ind");
                        return;
                    }
                    break;
                }
                case "block-seq": {
                    const it = top.items[top.items.length - 1];
                    if (it.value)
                        top.items.push({ start: [], value: token });
                    else
                        it.value = token;
                    break;
                }
                case "flow-collection": {
                    const it = top.items[top.items.length - 1];
                    if (!it || it.value)
                        top.items.push({ start: [], key: token, sep: [] });
                    else if (it.sep)
                        it.value = token;
                    else
                        Object.assign(it, { key: token, sep: [] });
                    return;
                }
                default:
                    yield* this.pop();
                    yield* this.pop(token);
            }
            if ((top.type === "document" || top.type === "block-map" || top.type === "block-seq") && (token.type === "block-map" || token.type === "block-seq")) {
                const last = token.items[token.items.length - 1];
                if (last && !last.sep && !last.value && last.start.length > 0 && !includesNonEmpty(last.start) && (token.indent === 0 || last.start.every((st) => st.type !== "comment" || st.indent < token.indent))) {
                    if (top.type === "document")
                        top.end = last.start;
                    else
                        top.items.push({ start: last.start });
                    token.items.splice(-1, 1);
                }
            }
        }
    }
    *stream() {
        switch (this.type) {
            case "directive-line":
                yield { type: "directive", offset: this.offset, source: this.source };
                return;
            case "byte-order-mark":
            case "space":
            case "comment":
            case "newline":
                yield this.sourceToken;
                return;
            case "doc-mode":
            case "doc-start": {
                const doc = {
                    type: "document",
                    offset: this.offset,
                    start: []
                };
                if (this.type === "doc-start")
                    doc.start.push(this.sourceToken);
                this.stack.push(doc);
                return;
            }
        }
        yield {
            type: "error",
            offset: this.offset,
            message: `Unexpected ${this.type} token in YAML stream`,
            source: this.source
        };
    }
    *document(doc) {
        if (doc.value)
            return yield* this.lineEnd(doc);
        switch (this.type) {
            case "doc-start": {
                if (includesNonEmpty(doc.start)) {
                    yield* this.pop();
                    yield* this.step();
                }
                else
                    doc.start.push(this.sourceToken);
                return;
            }
            case "anchor":
            case "tag":
            case "space":
            case "comment":
            case "newline":
                doc.start.push(this.sourceToken);
                return;
        }
        const bv = this.startBlockValue(doc);
        if (bv)
            this.stack.push(bv);
        else {
            yield {
                type: "error",
                offset: this.offset,
                message: `Unexpected ${this.type} token in YAML document`,
                source: this.source
            };
        }
    }
    *scalar(scalar) {
        if (this.type === "map-value-ind") {
            const prev = getPrevProps(this.peek(2));
            const start = getFirstKeyStartProps(prev);
            let sep;
            if (scalar.end) {
                sep = scalar.end;
                sep.push(this.sourceToken);
                delete scalar.end;
            }
            else
                sep = [this.sourceToken];
            const map2 = {
                type: "block-map",
                offset: scalar.offset,
                indent: scalar.indent,
                items: [{ start, key: scalar, sep }]
            };
            this.onKeyLine = true;
            this.stack[this.stack.length - 1] = map2;
        }
        else
            yield* this.lineEnd(scalar);
    }
    *blockScalar(scalar) {
        switch (this.type) {
            case "space":
            case "comment":
            case "newline":
                scalar.props.push(this.sourceToken);
                return;
            case "scalar":
                scalar.source = this.source;
                this.atNewLine = true;
                this.indent = 0;
                if (this.onNewLine) {
                    let nl = this.source.indexOf("\n") + 1;
                    while (nl !== 0) {
                        this.onNewLine(this.offset + nl);
                        nl = this.source.indexOf("\n", nl) + 1;
                    }
                }
                yield* this.pop();
                break;
            default:
                yield* this.pop();
                yield* this.step();
        }
    }
    *blockMap(map2) {
        var _a;
        const it = map2.items[map2.items.length - 1];
        switch (this.type) {
            case "newline":
                this.onKeyLine = false;
                if (it.value) {
                    const end = "end" in it.value ? it.value.end : void 0;
                    const last = Array.isArray(end) ? end[end.length - 1] : void 0;
                    if ((last === null || last === void 0 ? void 0 : last.type) === "comment")
                        end === null || end === void 0 ? void 0 : end.push(this.sourceToken);
                    else
                        map2.items.push({ start: [this.sourceToken] });
                }
                else if (it.sep)
                    it.sep.push(this.sourceToken);
                else
                    it.start.push(this.sourceToken);
                return;
            case "space":
            case "comment":
                if (it.value)
                    map2.items.push({ start: [this.sourceToken] });
                else if (it.sep)
                    it.sep.push(this.sourceToken);
                else {
                    if (this.atIndentedComment(it.start, map2.indent)) {
                        const prev = map2.items[map2.items.length - 2];
                        const end = (_a = prev === null || prev === void 0 ? void 0 : prev.value) === null || _a === void 0 ? void 0 : _a.end;
                        if (Array.isArray(end)) {
                            Array.prototype.push.apply(end, it.start);
                            end.push(this.sourceToken);
                            map2.items.pop();
                            return;
                        }
                    }
                    it.start.push(this.sourceToken);
                }
                return;
        }
        if (this.indent >= map2.indent) {
            const atNextItem = !this.onKeyLine && this.indent === map2.indent && (it.sep || includesNonEmpty(it.start));
            switch (this.type) {
                case "anchor":
                case "tag":
                    if (atNextItem || it.value) {
                        map2.items.push({ start: [this.sourceToken] });
                        this.onKeyLine = true;
                    }
                    else if (it.sep)
                        it.sep.push(this.sourceToken);
                    else
                        it.start.push(this.sourceToken);
                    return;
                case "explicit-key-ind":
                    if (!it.sep && !includesToken(it.start, "explicit-key-ind"))
                        it.start.push(this.sourceToken);
                    else if (atNextItem || it.value)
                        map2.items.push({ start: [this.sourceToken] });
                    else
                        this.stack.push({
                            type: "block-map",
                            offset: this.offset,
                            indent: this.indent,
                            items: [{ start: [this.sourceToken] }]
                        });
                    this.onKeyLine = true;
                    return;
                case "map-value-ind":
                    if (includesToken(it.start, "explicit-key-ind")) {
                        if (!it.sep) {
                            if (includesToken(it.start, "newline")) {
                                Object.assign(it, { key: null, sep: [this.sourceToken] });
                            }
                            else {
                                const start = getFirstKeyStartProps(it.start);
                                this.stack.push({
                                    type: "block-map",
                                    offset: this.offset,
                                    indent: this.indent,
                                    items: [{ start, key: null, sep: [this.sourceToken] }]
                                });
                            }
                        }
                        else if (it.value) {
                            map2.items.push({ start: [], key: null, sep: [this.sourceToken] });
                        }
                        else if (includesToken(it.sep, "map-value-ind")) {
                            this.stack.push({
                                type: "block-map",
                                offset: this.offset,
                                indent: this.indent,
                                items: [{ start: [], key: null, sep: [this.sourceToken] }]
                            });
                        }
                        else if (isFlowToken(it.key) && !includesToken(it.sep, "newline")) {
                            const start = getFirstKeyStartProps(it.start);
                            const key = it.key;
                            const sep = it.sep;
                            sep.push(this.sourceToken);
                            delete it.key, delete it.sep;
                            this.stack.push({
                                type: "block-map",
                                offset: this.offset,
                                indent: this.indent,
                                items: [{ start, key, sep }]
                            });
                        }
                        else {
                            it.sep.push(this.sourceToken);
                        }
                    }
                    else {
                        if (!it.sep) {
                            Object.assign(it, { key: null, sep: [this.sourceToken] });
                        }
                        else if (it.value || atNextItem) {
                            map2.items.push({ start: [], key: null, sep: [this.sourceToken] });
                        }
                        else if (includesToken(it.sep, "map-value-ind")) {
                            this.stack.push({
                                type: "block-map",
                                offset: this.offset,
                                indent: this.indent,
                                items: [{ start: [], key: null, sep: [this.sourceToken] }]
                            });
                        }
                        else {
                            it.sep.push(this.sourceToken);
                        }
                    }
                    this.onKeyLine = true;
                    return;
                case "alias":
                case "scalar":
                case "single-quoted-scalar":
                case "double-quoted-scalar": {
                    const fs = this.flowScalar(this.type);
                    if (atNextItem || it.value) {
                        map2.items.push({ start: [], key: fs, sep: [] });
                        this.onKeyLine = true;
                    }
                    else if (it.sep) {
                        this.stack.push(fs);
                    }
                    else {
                        Object.assign(it, { key: fs, sep: [] });
                        this.onKeyLine = true;
                    }
                    return;
                }
                default: {
                    const bv = this.startBlockValue(map2);
                    if (bv) {
                        if (atNextItem && bv.type !== "block-seq" && includesToken(it.start, "explicit-key-ind"))
                            map2.items.push({ start: [] });
                        this.stack.push(bv);
                        return;
                    }
                }
            }
        }
        yield* this.pop();
        yield* this.step();
    }
    *blockSequence(seq2) {
        var _a;
        const it = seq2.items[seq2.items.length - 1];
        switch (this.type) {
            case "newline":
                if (it.value) {
                    const end = "end" in it.value ? it.value.end : void 0;
                    const last = Array.isArray(end) ? end[end.length - 1] : void 0;
                    if ((last === null || last === void 0 ? void 0 : last.type) === "comment")
                        end === null || end === void 0 ? void 0 : end.push(this.sourceToken);
                    else
                        seq2.items.push({ start: [this.sourceToken] });
                }
                else
                    it.start.push(this.sourceToken);
                return;
            case "space":
            case "comment":
                if (it.value)
                    seq2.items.push({ start: [this.sourceToken] });
                else {
                    if (this.atIndentedComment(it.start, seq2.indent)) {
                        const prev = seq2.items[seq2.items.length - 2];
                        const end = (_a = prev === null || prev === void 0 ? void 0 : prev.value) === null || _a === void 0 ? void 0 : _a.end;
                        if (Array.isArray(end)) {
                            Array.prototype.push.apply(end, it.start);
                            end.push(this.sourceToken);
                            seq2.items.pop();
                            return;
                        }
                    }
                    it.start.push(this.sourceToken);
                }
                return;
            case "anchor":
            case "tag":
                if (it.value || this.indent <= seq2.indent)
                    break;
                it.start.push(this.sourceToken);
                return;
            case "seq-item-ind":
                if (this.indent !== seq2.indent)
                    break;
                if (it.value || includesToken(it.start, "seq-item-ind"))
                    seq2.items.push({ start: [this.sourceToken] });
                else
                    it.start.push(this.sourceToken);
                return;
        }
        if (this.indent > seq2.indent) {
            const bv = this.startBlockValue(seq2);
            if (bv) {
                this.stack.push(bv);
                return;
            }
        }
        yield* this.pop();
        yield* this.step();
    }
    *flowCollection(fc) {
        const it = fc.items[fc.items.length - 1];
        if (this.type === "flow-error-end") {
            let top;
            do {
                yield* this.pop();
                top = this.peek(1);
            } while (top && top.type === "flow-collection");
        }
        else if (fc.end.length === 0) {
            switch (this.type) {
                case "comma":
                case "explicit-key-ind":
                    if (!it || it.sep)
                        fc.items.push({ start: [this.sourceToken] });
                    else
                        it.start.push(this.sourceToken);
                    return;
                case "map-value-ind":
                    if (!it || it.value)
                        fc.items.push({ start: [], key: null, sep: [this.sourceToken] });
                    else if (it.sep)
                        it.sep.push(this.sourceToken);
                    else
                        Object.assign(it, { key: null, sep: [this.sourceToken] });
                    return;
                case "space":
                case "comment":
                case "newline":
                case "anchor":
                case "tag":
                    if (!it || it.value)
                        fc.items.push({ start: [this.sourceToken] });
                    else if (it.sep)
                        it.sep.push(this.sourceToken);
                    else
                        it.start.push(this.sourceToken);
                    return;
                case "alias":
                case "scalar":
                case "single-quoted-scalar":
                case "double-quoted-scalar": {
                    const fs = this.flowScalar(this.type);
                    if (!it || it.value)
                        fc.items.push({ start: [], key: fs, sep: [] });
                    else if (it.sep)
                        this.stack.push(fs);
                    else
                        Object.assign(it, { key: fs, sep: [] });
                    return;
                }
                case "flow-map-end":
                case "flow-seq-end":
                    fc.end.push(this.sourceToken);
                    return;
            }
            const bv = this.startBlockValue(fc);
            if (bv)
                this.stack.push(bv);
            else {
                yield* this.pop();
                yield* this.step();
            }
        }
        else {
            const parent = this.peek(2);
            if (parent.type === "block-map" && (this.type === "map-value-ind" && parent.indent === fc.indent || this.type === "newline" && !parent.items[parent.items.length - 1].sep)) {
                yield* this.pop();
                yield* this.step();
            }
            else if (this.type === "map-value-ind" && parent.type !== "flow-collection") {
                const prev = getPrevProps(parent);
                const start = getFirstKeyStartProps(prev);
                fixFlowSeqItems(fc);
                const sep = fc.end.splice(1, fc.end.length);
                sep.push(this.sourceToken);
                const map2 = {
                    type: "block-map",
                    offset: fc.offset,
                    indent: fc.indent,
                    items: [{ start, key: fc, sep }]
                };
                this.onKeyLine = true;
                this.stack[this.stack.length - 1] = map2;
            }
            else {
                yield* this.lineEnd(fc);
            }
        }
    }
    flowScalar(type) {
        if (this.onNewLine) {
            let nl = this.source.indexOf("\n") + 1;
            while (nl !== 0) {
                this.onNewLine(this.offset + nl);
                nl = this.source.indexOf("\n", nl) + 1;
            }
        }
        return {
            type,
            offset: this.offset,
            indent: this.indent,
            source: this.source
        };
    }
    startBlockValue(parent) {
        switch (this.type) {
            case "alias":
            case "scalar":
            case "single-quoted-scalar":
            case "double-quoted-scalar":
                return this.flowScalar(this.type);
            case "block-scalar-header":
                return {
                    type: "block-scalar",
                    offset: this.offset,
                    indent: this.indent,
                    props: [this.sourceToken],
                    source: ""
                };
            case "flow-map-start":
            case "flow-seq-start":
                return {
                    type: "flow-collection",
                    offset: this.offset,
                    indent: this.indent,
                    start: this.sourceToken,
                    items: [],
                    end: []
                };
            case "seq-item-ind":
                return {
                    type: "block-seq",
                    offset: this.offset,
                    indent: this.indent,
                    items: [{ start: [this.sourceToken] }]
                };
            case "explicit-key-ind": {
                this.onKeyLine = true;
                const prev = getPrevProps(parent);
                const start = getFirstKeyStartProps(prev);
                start.push(this.sourceToken);
                return {
                    type: "block-map",
                    offset: this.offset,
                    indent: this.indent,
                    items: [{ start }]
                };
            }
            case "map-value-ind": {
                this.onKeyLine = true;
                const prev = getPrevProps(parent);
                const start = getFirstKeyStartProps(prev);
                return {
                    type: "block-map",
                    offset: this.offset,
                    indent: this.indent,
                    items: [{ start, key: null, sep: [this.sourceToken] }]
                };
            }
        }
        return null;
    }
    atIndentedComment(start, indent) {
        if (this.type !== "comment")
            return false;
        if (this.indent <= indent)
            return false;
        return start.every((st) => st.type === "newline" || st.type === "space");
    }
    *documentEnd(docEnd) {
        if (this.type !== "doc-mode") {
            if (docEnd.end)
                docEnd.end.push(this.sourceToken);
            else
                docEnd.end = [this.sourceToken];
            if (this.type === "newline")
                yield* this.pop();
        }
    }
    *lineEnd(token) {
        switch (this.type) {
            case "comma":
            case "doc-start":
            case "doc-end":
            case "flow-seq-end":
            case "flow-map-end":
            case "map-value-ind":
                yield* this.pop();
                yield* this.step();
                break;
            case "newline":
                this.onKeyLine = false;
            case "space":
            case "comment":
            default:
                if (token.end)
                    token.end.push(this.sourceToken);
                else
                    token.end = [this.sourceToken];
                if (this.type === "newline")
                    yield* this.pop();
        }
    }
};
// ../../node_modules/yaml/browser/dist/public-api.js
function parseOptions(options) {
    const prettyErrors = options.prettyErrors !== false;
    const lineCounter = options.lineCounter || prettyErrors && new LineCounter() || null;
    return { lineCounter, prettyErrors };
}
function parseDocument(source, options = {}) {
    const { lineCounter, prettyErrors } = parseOptions(options);
    const parser2 = new Parser(lineCounter === null || lineCounter === void 0 ? void 0 : lineCounter.addNewLine);
    const composer = new Composer(options);
    let doc = null;
    for (const _doc of composer.compose(parser2.parse(source), true, source.length)) {
        if (!doc)
            doc = _doc;
        else if (doc.options.logLevel !== "silent") {
            doc.errors.push(new YAMLParseError(_doc.range.slice(0, 2), "MULTIPLE_DOCS", "Source contains multiple documents; please use YAML.parseAllDocuments()"));
            break;
        }
    }
    if (prettyErrors && lineCounter) {
        doc.errors.forEach(prettifyError(source, lineCounter));
        doc.warnings.forEach(prettifyError(source, lineCounter));
    }
    return doc;
}
function parse2(src, reviver, options) {
    let _reviver = void 0;
    if (typeof reviver === "function") {
        _reviver = reviver;
    }
    else if (options === void 0 && reviver && typeof reviver === "object") {
        options = reviver;
    }
    const doc = parseDocument(src, options);
    if (!doc)
        return null;
    doc.warnings.forEach((warning) => warn(doc.options.logLevel, warning));
    if (doc.errors.length > 0) {
        if (doc.options.logLevel !== "silent")
            throw doc.errors[0];
        else
            doc.errors = [];
    }
    return doc.toJS(Object.assign({ reviver: _reviver }, options));
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlSchemaService.js

// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/objects.js
function equals2(one, other) {
    if (one === other) {
        return true;
    }
    if (one === null || one === void 0 || other === null || other === void 0) {
        return false;
    }
    if (typeof one !== typeof other) {
        return false;
    }
    if (typeof one !== "object") {
        return false;
    }
    if (Array.isArray(one) !== Array.isArray(other)) {
        return false;
    }
    let i, key;
    if (Array.isArray(one)) {
        if (one.length !== other.length) {
            return false;
        }
        for (i = 0; i < one.length; i++) {
            if (!equals2(one[i], other[i])) {
                return false;
            }
        }
    }
    else {
        const oneKeys = [];
        for (key in one) {
            oneKeys.push(key);
        }
        oneKeys.sort();
        const otherKeys = [];
        for (key in other) {
            otherKeys.push(key);
        }
        otherKeys.sort();
        if (!equals2(oneKeys, otherKeys)) {
            return false;
        }
        for (i = 0; i < oneKeys.length; i++) {
            if (!equals2(one[oneKeys[i]], other[oneKeys[i]])) {
                return false;
            }
        }
    }
    return true;
}
function isNumber2(val) {
    return typeof val === "number";
}
function isDefined2(val) {
    return typeof val !== "undefined";
}
function isBoolean2(val) {
    return typeof val === "boolean";
}
function isString2(val) {
    return typeof val === "string";
}
function isIterable(val) {
    return Symbol.iterator in Object(val);
}
function convertErrorToTelemetryMsg(err) {
    var _a;
    if (!err)
        return "null";
    if (err instanceof Error) {
        return (_a = err.stack) != null ? _a : err.toString();
    }
    return err.toString();
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/schemaUtils.js

function getSchemaTypeName(schema4) {
    if (schema4.title) {
        return schema4.title;
    }
    if (schema4.$id) {
        return getSchemaRefTypeTitle(schema4.$id);
    }
    if (schema4.$ref || schema4._$ref) {
        return getSchemaRefTypeTitle(schema4.$ref || schema4._$ref);
    }
    return schema4.closestTitle || (Array.isArray(schema4.type) ? schema4.type.join(" | ") : schema4.type);
}
function getSchemaRefTypeTitle($ref) {
    const match = $ref.match(/^(?:.*\/)?(.*?)(?:\.schema\.json)?$/);
    let type = !!match && match[1];
    if (!type) {
        type = "typeNotFound";
        console.error(`$ref (${$ref}) not parsed properly`);
    }
    return type;
}
function getSchemaTitle(schema4, url) {
    const uri = URI.parse(url);
    let baseName = path_browserify.basename(uri.fsPath);
    if (!path_browserify.extname(uri.fsPath)) {
        baseName += ".json";
    }
    if (Object.getOwnPropertyDescriptor(schema4, "name")) {
        return Object.getOwnPropertyDescriptor(schema4, "name").value + ` (${baseName})`;
    }
    else if (schema4.title) {
        return schema4.description ? schema4.title + " - " + schema4.description + ` (${baseName})` : schema4.title + ` (${baseName})`;
    }
    return baseName;
}
function isPrimitiveType(schema4) {
    return schema4.type !== "object" && !isAnyOfAllOfOneOfType(schema4);
}
function isAnyOfAllOfOneOfType(schema4) {
    return !!(schema4.anyOf || schema4.allOf || schema4.oneOf);
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonCompletion.js

// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/utils/json.js
function stringifyObject(obj, indent, stringifyLiteral) {
    if (obj !== null && typeof obj === "object") {
        var newIndent = indent + "	";
        if (Array.isArray(obj)) {
            if (obj.length === 0) {
                return "[]";
            }
            var result = "[\n";
            for (var i = 0; i < obj.length; i++) {
                result += newIndent + stringifyObject(obj[i], newIndent, stringifyLiteral);
                if (i < obj.length - 1) {
                    result += ",";
                }
                result += "\n";
            }
            result += indent + "]";
            return result;
        }
        else {
            var keys = Object.keys(obj);
            if (keys.length === 0) {
                return "{}";
            }
            var result = "{\n";
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                result += newIndent + JSON.stringify(key) + ": " + stringifyObject(obj[key], newIndent, stringifyLiteral);
                if (i < keys.length - 1) {
                    result += ",";
                }
                result += "\n";
            }
            result += indent + "}";
            return result;
        }
    }
    return stringifyLiteral(obj);
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonCompletion.js
var localize4 = loadMessageBundle();
var valueCommitCharacters = [",", "}", "]"];
var propertyCommitCharacters = [":"];
var JSONCompletion = (
/** @class */
function () {
    function JSONCompletion2(schemaService, contributions, promiseConstructor, clientCapabilities) {
        if (contributions === void 0) {
            contributions = [];
        }
        if (promiseConstructor === void 0) {
            promiseConstructor = Promise;
        }
        if (clientCapabilities === void 0) {
            clientCapabilities = {};
        }
        this.schemaService = schemaService;
        this.contributions = contributions;
        this.promiseConstructor = promiseConstructor;
        this.clientCapabilities = clientCapabilities;
    }
    JSONCompletion2.prototype.doResolve = function (item) {
        for (var i = this.contributions.length - 1; i >= 0; i--) {
            var resolveCompletion = this.contributions[i].resolveCompletion;
            if (resolveCompletion) {
                var resolver = resolveCompletion(item);
                if (resolver) {
                    return resolver;
                }
            }
        }
        return this.promiseConstructor.resolve(item);
    };
    JSONCompletion2.prototype.doComplete = function (document, position, doc) {
        var _this = this;
        var result = {
            items: [],
            isIncomplete: false
        };
        var text = document.getText();
        var offset = document.offsetAt(position);
        var node = doc.getNodeFromOffset(offset, true);
        if (this.isInComment(document, node ? node.offset : 0, offset)) {
            return Promise.resolve(result);
        }
        if (node && offset === node.offset + node.length && offset > 0) {
            var ch = text[offset - 1];
            if (node.type === "object" && ch === "}" || node.type === "array" && ch === "]") {
                node = node.parent;
            }
        }
        var currentWord = this.getCurrentWord(document, offset);
        var overwriteRange;
        if (node && (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null")) {
            overwriteRange = Range.create(document.positionAt(node.offset), document.positionAt(node.offset + node.length));
        }
        else {
            var overwriteStart = offset - currentWord.length;
            if (overwriteStart > 0 && text[overwriteStart - 1] === '"') {
                overwriteStart--;
            }
            overwriteRange = Range.create(document.positionAt(overwriteStart), position);
        }
        var supportsCommitCharacters = false;
        var proposed = {};
        var collector = {
            add: function (suggestion) {
                var label = suggestion.label;
                var existing = proposed[label];
                if (!existing) {
                    label = label.replace(/[\n]/g, "\u21B5");
                    if (label.length > 60) {
                        var shortendedLabel = label.substr(0, 57).trim() + "...";
                        if (!proposed[shortendedLabel]) {
                            label = shortendedLabel;
                        }
                    }
                    if (overwriteRange && suggestion.insertText !== void 0) {
                        suggestion.textEdit = TextEdit.replace(overwriteRange, suggestion.insertText);
                    }
                    if (supportsCommitCharacters) {
                        suggestion.commitCharacters = suggestion.kind === CompletionItemKind.Property ? propertyCommitCharacters : valueCommitCharacters;
                    }
                    suggestion.label = label;
                    proposed[label] = suggestion;
                    result.items.push(suggestion);
                }
                else {
                    if (!existing.documentation) {
                        existing.documentation = suggestion.documentation;
                    }
                    if (!existing.detail) {
                        existing.detail = suggestion.detail;
                    }
                }
            },
            setAsIncomplete: function () {
                result.isIncomplete = true;
            },
            error: function (message) {
                console.error(message);
            },
            log: function (message) {
                console.log(message);
            },
            getNumberOfProposals: function () {
                return result.items.length;
            }
        };
        return this.schemaService.getSchemaForResource(document.uri, doc).then(function (schema4) {
            var collectionPromises = [];
            var addValue = true;
            var currentKey = "";
            var currentProperty = void 0;
            if (node) {
                if (node.type === "string") {
                    var parent = node.parent;
                    if (parent && parent.type === "property" && parent.keyNode === node) {
                        addValue = !parent.valueNode;
                        currentProperty = parent;
                        currentKey = text.substr(node.offset + 1, node.length - 2);
                        if (parent) {
                            node = parent.parent;
                        }
                    }
                }
            }
            if (node && node.type === "object") {
                if (node.offset === offset) {
                    return result;
                }
                var properties = node.properties;
                properties.forEach(function (p) {
                    if (!currentProperty || currentProperty !== p) {
                        proposed[p.keyNode.value] = CompletionItem.create("__");
                    }
                });
                var separatorAfter_1 = "";
                if (addValue) {
                    separatorAfter_1 = _this.evaluateSeparatorAfter(document, document.offsetAt(overwriteRange.end));
                }
                if (schema4) {
                    _this.getPropertyCompletions(schema4, doc, node, addValue, separatorAfter_1, collector);
                }
                else {
                    _this.getSchemaLessPropertyCompletions(doc, node, currentKey, collector);
                }
                var location_1 = getNodePath2(node);
                _this.contributions.forEach(function (contribution) {
                    var collectPromise = contribution.collectPropertyCompletions(document.uri, location_1, currentWord, addValue, separatorAfter_1 === "", collector);
                    if (collectPromise) {
                        collectionPromises.push(collectPromise);
                    }
                });
                if (!schema4 && currentWord.length > 0 && text.charAt(offset - currentWord.length - 1) !== '"') {
                    collector.add({
                        kind: CompletionItemKind.Property,
                        label: _this.getLabelForValue(currentWord),
                        insertText: _this.getInsertTextForProperty(currentWord, void 0, false, separatorAfter_1),
                        insertTextFormat: InsertTextFormat.Snippet,
                        documentation: ""
                    });
                    collector.setAsIncomplete();
                }
            }
            var types = {};
            if (schema4) {
                _this.getValueCompletions(schema4, doc, node, offset, document, collector, types);
            }
            else {
                _this.getSchemaLessValueCompletions(doc, node, offset, document, collector);
            }
            if (_this.contributions.length > 0) {
                _this.getContributedValueCompletions(doc, node, offset, document, collector, collectionPromises);
            }
            return _this.promiseConstructor.all(collectionPromises).then(function () {
                if (collector.getNumberOfProposals() === 0) {
                    var offsetForSeparator = offset;
                    if (node && (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null")) {
                        offsetForSeparator = node.offset + node.length;
                    }
                    var separatorAfter = _this.evaluateSeparatorAfter(document, offsetForSeparator);
                    _this.addFillerValueCompletions(types, separatorAfter, collector);
                }
                return result;
            });
        });
    };
    JSONCompletion2.prototype.getPropertyCompletions = function (schema4, doc, node, addValue, separatorAfter, collector) {
        var _this = this;
        var matchingSchemas = doc.getMatchingSchemas(schema4.schema, node.offset);
        matchingSchemas.forEach(function (s) {
            if (s.node === node && !s.inverted) {
                var schemaProperties_1 = s.schema.properties;
                if (schemaProperties_1) {
                    Object.keys(schemaProperties_1).forEach(function (key) {
                        var propertySchema = schemaProperties_1[key];
                        if (typeof propertySchema === "object" && !propertySchema.deprecationMessage && !propertySchema.doNotSuggest) {
                            var proposal = {
                                kind: CompletionItemKind.Property,
                                label: key,
                                insertText: _this.getInsertTextForProperty(key, propertySchema, addValue, separatorAfter),
                                insertTextFormat: InsertTextFormat.Snippet,
                                filterText: _this.getFilterTextForValue(key),
                                documentation: _this.fromMarkup(propertySchema.markdownDescription) || propertySchema.description || ""
                            };
                            if (propertySchema.suggestSortText !== void 0) {
                                proposal.sortText = propertySchema.suggestSortText;
                            }
                            if (proposal.insertText && endsWith(proposal.insertText, "$1" + separatorAfter)) {
                                proposal.command = {
                                    title: "Suggest",
                                    command: "editor.action.triggerSuggest"
                                };
                            }
                            collector.add(proposal);
                        }
                    });
                }
                var schemaPropertyNames_1 = s.schema.propertyNames;
                if (typeof schemaPropertyNames_1 === "object" && !schemaPropertyNames_1.deprecationMessage && !schemaPropertyNames_1.doNotSuggest) {
                    var propertyNameCompletionItem = function (name, enumDescription2) {
                        if (enumDescription2 === void 0) {
                            enumDescription2 = void 0;
                        }
                        var proposal = {
                            kind: CompletionItemKind.Property,
                            label: name,
                            insertText: _this.getInsertTextForProperty(name, void 0, addValue, separatorAfter),
                            insertTextFormat: InsertTextFormat.Snippet,
                            filterText: _this.getFilterTextForValue(name),
                            documentation: enumDescription2 || _this.fromMarkup(schemaPropertyNames_1.markdownDescription) || schemaPropertyNames_1.description || ""
                        };
                        if (schemaPropertyNames_1.suggestSortText !== void 0) {
                            proposal.sortText = schemaPropertyNames_1.suggestSortText;
                        }
                        if (proposal.insertText && endsWith(proposal.insertText, "$1" + separatorAfter)) {
                            proposal.command = {
                                title: "Suggest",
                                command: "editor.action.triggerSuggest"
                            };
                        }
                        collector.add(proposal);
                    };
                    if (schemaPropertyNames_1.enum) {
                        for (var i = 0; i < schemaPropertyNames_1.enum.length; i++) {
                            var enumDescription = void 0;
                            if (schemaPropertyNames_1.markdownEnumDescriptions && i < schemaPropertyNames_1.markdownEnumDescriptions.length) {
                                enumDescription = _this.fromMarkup(schemaPropertyNames_1.markdownEnumDescriptions[i]);
                            }
                            else if (schemaPropertyNames_1.enumDescriptions && i < schemaPropertyNames_1.enumDescriptions.length) {
                                enumDescription = schemaPropertyNames_1.enumDescriptions[i];
                            }
                            propertyNameCompletionItem(schemaPropertyNames_1.enum[i], enumDescription);
                        }
                    }
                    if (schemaPropertyNames_1.const) {
                        propertyNameCompletionItem(schemaPropertyNames_1.const);
                    }
                }
            }
        });
    };
    JSONCompletion2.prototype.getSchemaLessPropertyCompletions = function (doc, node, currentKey, collector) {
        var _this = this;
        var collectCompletionsForSimilarObject = function (obj) {
            obj.properties.forEach(function (p) {
                var key = p.keyNode.value;
                collector.add({
                    kind: CompletionItemKind.Property,
                    label: key,
                    insertText: _this.getInsertTextForValue(key, ""),
                    insertTextFormat: InsertTextFormat.Snippet,
                    filterText: _this.getFilterTextForValue(key),
                    documentation: ""
                });
            });
        };
        if (node.parent) {
            if (node.parent.type === "property") {
                var parentKey_1 = node.parent.keyNode.value;
                doc.visit(function (n) {
                    if (n.type === "property" && n !== node.parent && n.keyNode.value === parentKey_1 && n.valueNode && n.valueNode.type === "object") {
                        collectCompletionsForSimilarObject(n.valueNode);
                    }
                    return true;
                });
            }
            else if (node.parent.type === "array") {
                node.parent.items.forEach(function (n) {
                    if (n.type === "object" && n !== node) {
                        collectCompletionsForSimilarObject(n);
                    }
                });
            }
        }
        else if (node.type === "object") {
            collector.add({
                kind: CompletionItemKind.Property,
                label: "$schema",
                insertText: this.getInsertTextForProperty("$schema", void 0, true, ""),
                insertTextFormat: InsertTextFormat.Snippet,
                documentation: "",
                filterText: this.getFilterTextForValue("$schema")
            });
        }
    };
    JSONCompletion2.prototype.getSchemaLessValueCompletions = function (doc, node, offset, document, collector) {
        var _this = this;
        var offsetForSeparator = offset;
        if (node && (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null")) {
            offsetForSeparator = node.offset + node.length;
            node = node.parent;
        }
        if (!node) {
            collector.add({
                kind: this.getSuggestionKind("object"),
                label: "Empty object",
                insertText: this.getInsertTextForValue({}, ""),
                insertTextFormat: InsertTextFormat.Snippet,
                documentation: ""
            });
            collector.add({
                kind: this.getSuggestionKind("array"),
                label: "Empty array",
                insertText: this.getInsertTextForValue([], ""),
                insertTextFormat: InsertTextFormat.Snippet,
                documentation: ""
            });
            return;
        }
        var separatorAfter = this.evaluateSeparatorAfter(document, offsetForSeparator);
        var collectSuggestionsForValues = function (value) {
            if (value.parent && !contains(value.parent, offset, true)) {
                collector.add({
                    kind: _this.getSuggestionKind(value.type),
                    label: _this.getLabelTextForMatchingNode(value, document),
                    insertText: _this.getInsertTextForMatchingNode(value, document, separatorAfter),
                    insertTextFormat: InsertTextFormat.Snippet,
                    documentation: ""
                });
            }
            if (value.type === "boolean") {
                _this.addBooleanValueCompletion(!value.value, separatorAfter, collector);
            }
        };
        if (node.type === "property") {
            if (offset > (node.colonOffset || 0)) {
                var valueNode = node.valueNode;
                if (valueNode && (offset > valueNode.offset + valueNode.length || valueNode.type === "object" || valueNode.type === "array")) {
                    return;
                }
                var parentKey_2 = node.keyNode.value;
                doc.visit(function (n) {
                    if (n.type === "property" && n.keyNode.value === parentKey_2 && n.valueNode) {
                        collectSuggestionsForValues(n.valueNode);
                    }
                    return true;
                });
                if (parentKey_2 === "$schema" && node.parent && !node.parent.parent) {
                    this.addDollarSchemaCompletions(separatorAfter, collector);
                }
            }
        }
        if (node.type === "array") {
            if (node.parent && node.parent.type === "property") {
                var parentKey_3 = node.parent.keyNode.value;
                doc.visit(function (n) {
                    if (n.type === "property" && n.keyNode.value === parentKey_3 && n.valueNode && n.valueNode.type === "array") {
                        n.valueNode.items.forEach(collectSuggestionsForValues);
                    }
                    return true;
                });
            }
            else {
                node.items.forEach(collectSuggestionsForValues);
            }
        }
    };
    JSONCompletion2.prototype.getValueCompletions = function (schema4, doc, node, offset, document, collector, types) {
        var offsetForSeparator = offset;
        var parentKey = void 0;
        var valueNode = void 0;
        if (node && (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null")) {
            offsetForSeparator = node.offset + node.length;
            valueNode = node;
            node = node.parent;
        }
        if (!node) {
            this.addSchemaValueCompletions(schema4.schema, "", collector, types);
            return;
        }
        if (node.type === "property" && offset > (node.colonOffset || 0)) {
            var valueNode_1 = node.valueNode;
            if (valueNode_1 && offset > valueNode_1.offset + valueNode_1.length) {
                return;
            }
            parentKey = node.keyNode.value;
            node = node.parent;
        }
        if (node && (parentKey !== void 0 || node.type === "array")) {
            var separatorAfter = this.evaluateSeparatorAfter(document, offsetForSeparator);
            var matchingSchemas = doc.getMatchingSchemas(schema4.schema, node.offset, valueNode);
            for (var _i = 0, matchingSchemas_1 = matchingSchemas; _i < matchingSchemas_1.length; _i++) {
                var s = matchingSchemas_1[_i];
                if (s.node === node && !s.inverted && s.schema) {
                    if (node.type === "array" && s.schema.items) {
                        if (Array.isArray(s.schema.items)) {
                            var index = this.findItemAtOffset(node, document, offset);
                            if (index < s.schema.items.length) {
                                this.addSchemaValueCompletions(s.schema.items[index], separatorAfter, collector, types);
                            }
                        }
                        else {
                            this.addSchemaValueCompletions(s.schema.items, separatorAfter, collector, types);
                        }
                    }
                    if (parentKey !== void 0) {
                        var propertyMatched = false;
                        if (s.schema.properties) {
                            var propertySchema = s.schema.properties[parentKey];
                            if (propertySchema) {
                                propertyMatched = true;
                                this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types);
                            }
                        }
                        if (s.schema.patternProperties && !propertyMatched) {
                            for (var _a = 0, _b = Object.keys(s.schema.patternProperties); _a < _b.length; _a++) {
                                var pattern = _b[_a];
                                var regex = extendedRegExp(pattern);
                                if (regex.test(parentKey)) {
                                    propertyMatched = true;
                                    var propertySchema = s.schema.patternProperties[pattern];
                                    this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types);
                                }
                            }
                        }
                        if (s.schema.additionalProperties && !propertyMatched) {
                            var propertySchema = s.schema.additionalProperties;
                            this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types);
                        }
                    }
                }
            }
            if (parentKey === "$schema" && !node.parent) {
                this.addDollarSchemaCompletions(separatorAfter, collector);
            }
            if (types["boolean"]) {
                this.addBooleanValueCompletion(true, separatorAfter, collector);
                this.addBooleanValueCompletion(false, separatorAfter, collector);
            }
            if (types["null"]) {
                this.addNullValueCompletion(separatorAfter, collector);
            }
        }
    };
    JSONCompletion2.prototype.getContributedValueCompletions = function (doc, node, offset, document, collector, collectionPromises) {
        if (!node) {
            this.contributions.forEach(function (contribution) {
                var collectPromise = contribution.collectDefaultCompletions(document.uri, collector);
                if (collectPromise) {
                    collectionPromises.push(collectPromise);
                }
            });
        }
        else {
            if (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null") {
                node = node.parent;
            }
            if (node && node.type === "property" && offset > (node.colonOffset || 0)) {
                var parentKey_4 = node.keyNode.value;
                var valueNode = node.valueNode;
                if ((!valueNode || offset <= valueNode.offset + valueNode.length) && node.parent) {
                    var location_2 = getNodePath2(node.parent);
                    this.contributions.forEach(function (contribution) {
                        var collectPromise = contribution.collectValueCompletions(document.uri, location_2, parentKey_4, collector);
                        if (collectPromise) {
                            collectionPromises.push(collectPromise);
                        }
                    });
                }
            }
        }
    };
    JSONCompletion2.prototype.addSchemaValueCompletions = function (schema4, separatorAfter, collector, types) {
        var _this = this;
        if (typeof schema4 === "object") {
            this.addEnumValueCompletions(schema4, separatorAfter, collector);
            this.addDefaultValueCompletions(schema4, separatorAfter, collector);
            this.collectTypes(schema4, types);
            if (Array.isArray(schema4.allOf)) {
                schema4.allOf.forEach(function (s) {
                    return _this.addSchemaValueCompletions(s, separatorAfter, collector, types);
                });
            }
            if (Array.isArray(schema4.anyOf)) {
                schema4.anyOf.forEach(function (s) {
                    return _this.addSchemaValueCompletions(s, separatorAfter, collector, types);
                });
            }
            if (Array.isArray(schema4.oneOf)) {
                schema4.oneOf.forEach(function (s) {
                    return _this.addSchemaValueCompletions(s, separatorAfter, collector, types);
                });
            }
        }
    };
    JSONCompletion2.prototype.addDefaultValueCompletions = function (schema4, separatorAfter, collector, arrayDepth) {
        var _this = this;
        if (arrayDepth === void 0) {
            arrayDepth = 0;
        }
        var hasProposals = false;
        if (isDefined(schema4.default)) {
            var type = schema4.type;
            var value = schema4.default;
            for (var i = arrayDepth; i > 0; i--) {
                value = [value];
                type = "array";
            }
            collector.add({
                kind: this.getSuggestionKind(type),
                label: this.getLabelForValue(value),
                insertText: this.getInsertTextForValue(value, separatorAfter),
                insertTextFormat: InsertTextFormat.Snippet,
                detail: localize4("json.suggest.default", "Default value")
            });
            hasProposals = true;
        }
        if (Array.isArray(schema4.examples)) {
            schema4.examples.forEach(function (example) {
                var type2 = schema4.type;
                var value2 = example;
                for (var i2 = arrayDepth; i2 > 0; i2--) {
                    value2 = [value2];
                    type2 = "array";
                }
                collector.add({
                    kind: _this.getSuggestionKind(type2),
                    label: _this.getLabelForValue(value2),
                    insertText: _this.getInsertTextForValue(value2, separatorAfter),
                    insertTextFormat: InsertTextFormat.Snippet
                });
                hasProposals = true;
            });
        }
        if (Array.isArray(schema4.defaultSnippets)) {
            schema4.defaultSnippets.forEach(function (s) {
                var type2 = schema4.type;
                var value2 = s.body;
                var label = s.label;
                var insertText;
                var filterText;
                if (isDefined(value2)) {
                    var type_1 = schema4.type;
                    for (var i2 = arrayDepth; i2 > 0; i2--) {
                        value2 = [value2];
                        type_1 = "array";
                    }
                    insertText = _this.getInsertTextForSnippetValue(value2, separatorAfter);
                    filterText = _this.getFilterTextForSnippetValue(value2);
                    label = label || _this.getLabelForSnippetValue(value2);
                }
                else if (typeof s.bodyText === "string") {
                    var prefix = "", suffix = "", indent = "";
                    for (var i2 = arrayDepth; i2 > 0; i2--) {
                        prefix = prefix + indent + "[\n";
                        suffix = suffix + "\n" + indent + "]";
                        indent += "	";
                        type2 = "array";
                    }
                    insertText = prefix + indent + s.bodyText.split("\n").join("\n" + indent) + suffix + separatorAfter;
                    label = label || insertText, filterText = insertText.replace(/[\n]/g, "");
                }
                else {
                    return;
                }
                collector.add({
                    kind: _this.getSuggestionKind(type2),
                    label,
                    documentation: _this.fromMarkup(s.markdownDescription) || s.description,
                    insertText,
                    insertTextFormat: InsertTextFormat.Snippet,
                    filterText
                });
                hasProposals = true;
            });
        }
        if (!hasProposals && typeof schema4.items === "object" && !Array.isArray(schema4.items) && arrayDepth < 5) {
            this.addDefaultValueCompletions(schema4.items, separatorAfter, collector, arrayDepth + 1);
        }
    };
    JSONCompletion2.prototype.addEnumValueCompletions = function (schema4, separatorAfter, collector) {
        if (isDefined(schema4.const)) {
            collector.add({
                kind: this.getSuggestionKind(schema4.type),
                label: this.getLabelForValue(schema4.const),
                insertText: this.getInsertTextForValue(schema4.const, separatorAfter),
                insertTextFormat: InsertTextFormat.Snippet,
                documentation: this.fromMarkup(schema4.markdownDescription) || schema4.description
            });
        }
        if (Array.isArray(schema4.enum)) {
            for (var i = 0, length = schema4.enum.length; i < length; i++) {
                var enm = schema4.enum[i];
                var documentation = this.fromMarkup(schema4.markdownDescription) || schema4.description;
                if (schema4.markdownEnumDescriptions && i < schema4.markdownEnumDescriptions.length && this.doesSupportMarkdown()) {
                    documentation = this.fromMarkup(schema4.markdownEnumDescriptions[i]);
                }
                else if (schema4.enumDescriptions && i < schema4.enumDescriptions.length) {
                    documentation = schema4.enumDescriptions[i];
                }
                collector.add({
                    kind: this.getSuggestionKind(schema4.type),
                    label: this.getLabelForValue(enm),
                    insertText: this.getInsertTextForValue(enm, separatorAfter),
                    insertTextFormat: InsertTextFormat.Snippet,
                    documentation
                });
            }
        }
    };
    JSONCompletion2.prototype.collectTypes = function (schema4, types) {
        if (Array.isArray(schema4.enum) || isDefined(schema4.const)) {
            return;
        }
        var type = schema4.type;
        if (Array.isArray(type)) {
            type.forEach(function (t) {
                return types[t] = true;
            });
        }
        else if (type) {
            types[type] = true;
        }
    };
    JSONCompletion2.prototype.addFillerValueCompletions = function (types, separatorAfter, collector) {
        if (types["object"]) {
            collector.add({
                kind: this.getSuggestionKind("object"),
                label: "{}",
                insertText: this.getInsertTextForGuessedValue({}, separatorAfter),
                insertTextFormat: InsertTextFormat.Snippet,
                detail: localize4("defaults.object", "New object"),
                documentation: ""
            });
        }
        if (types["array"]) {
            collector.add({
                kind: this.getSuggestionKind("array"),
                label: "[]",
                insertText: this.getInsertTextForGuessedValue([], separatorAfter),
                insertTextFormat: InsertTextFormat.Snippet,
                detail: localize4("defaults.array", "New array"),
                documentation: ""
            });
        }
    };
    JSONCompletion2.prototype.addBooleanValueCompletion = function (value, separatorAfter, collector) {
        collector.add({
            kind: this.getSuggestionKind("boolean"),
            label: value ? "true" : "false",
            insertText: this.getInsertTextForValue(value, separatorAfter),
            insertTextFormat: InsertTextFormat.Snippet,
            documentation: ""
        });
    };
    JSONCompletion2.prototype.addNullValueCompletion = function (separatorAfter, collector) {
        collector.add({
            kind: this.getSuggestionKind("null"),
            label: "null",
            insertText: "null" + separatorAfter,
            insertTextFormat: InsertTextFormat.Snippet,
            documentation: ""
        });
    };
    JSONCompletion2.prototype.addDollarSchemaCompletions = function (separatorAfter, collector) {
        var _this = this;
        var schemaIds = this.schemaService.getRegisteredSchemaIds(function (schema4) {
            return schema4 === "http" || schema4 === "https";
        });
        schemaIds.forEach(function (schemaId) {
            return collector.add({
                kind: CompletionItemKind.Module,
                label: _this.getLabelForValue(schemaId),
                filterText: _this.getFilterTextForValue(schemaId),
                insertText: _this.getInsertTextForValue(schemaId, separatorAfter),
                insertTextFormat: InsertTextFormat.Snippet,
                documentation: ""
            });
        });
    };
    JSONCompletion2.prototype.getLabelForValue = function (value) {
        return JSON.stringify(value);
    };
    JSONCompletion2.prototype.getFilterTextForValue = function (value) {
        return JSON.stringify(value);
    };
    JSONCompletion2.prototype.getFilterTextForSnippetValue = function (value) {
        return JSON.stringify(value).replace(/\$\{\d+:([^}]+)\}|\$\d+/g, "$1");
    };
    JSONCompletion2.prototype.getLabelForSnippetValue = function (value) {
        var label = JSON.stringify(value);
        return label.replace(/\$\{\d+:([^}]+)\}|\$\d+/g, "$1");
    };
    JSONCompletion2.prototype.getInsertTextForPlainText = function (text) {
        return text.replace(/[\\\$\}]/g, "\\$&");
    };
    JSONCompletion2.prototype.getInsertTextForValue = function (value, separatorAfter) {
        var text = JSON.stringify(value, null, "	");
        if (text === "{}") {
            return "{$1}" + separatorAfter;
        }
        else if (text === "[]") {
            return "[$1]" + separatorAfter;
        }
        return this.getInsertTextForPlainText(text + separatorAfter);
    };
    JSONCompletion2.prototype.getInsertTextForSnippetValue = function (value, separatorAfter) {
        var replacer = function (value2) {
            if (typeof value2 === "string") {
                if (value2[0] === "^") {
                    return value2.substr(1);
                }
            }
            return JSON.stringify(value2);
        };
        return stringifyObject(value, "", replacer) + separatorAfter;
    };
    JSONCompletion2.prototype.getInsertTextForGuessedValue = function (value, separatorAfter) {
        switch (typeof value) {
            case "object":
                if (value === null) {
                    return "${1:null}" + separatorAfter;
                }
                return this.getInsertTextForValue(value, separatorAfter);
            case "string":
                var snippetValue = JSON.stringify(value);
                snippetValue = snippetValue.substr(1, snippetValue.length - 2);
                snippetValue = this.getInsertTextForPlainText(snippetValue);
                return '"${1:' + snippetValue + '}"' + separatorAfter;
            case "number":
            case "boolean":
                return "${1:" + JSON.stringify(value) + "}" + separatorAfter;
        }
        return this.getInsertTextForValue(value, separatorAfter);
    };
    JSONCompletion2.prototype.getSuggestionKind = function (type) {
        if (Array.isArray(type)) {
            var array = type;
            type = array.length > 0 ? array[0] : void 0;
        }
        if (!type) {
            return CompletionItemKind.Value;
        }
        switch (type) {
            case "string":
                return CompletionItemKind.Value;
            case "object":
                return CompletionItemKind.Module;
            case "property":
                return CompletionItemKind.Property;
            default:
                return CompletionItemKind.Value;
        }
    };
    JSONCompletion2.prototype.getLabelTextForMatchingNode = function (node, document) {
        switch (node.type) {
            case "array":
                return "[]";
            case "object":
                return "{}";
            default:
                var content = document.getText().substr(node.offset, node.length);
                return content;
        }
    };
    JSONCompletion2.prototype.getInsertTextForMatchingNode = function (node, document, separatorAfter) {
        switch (node.type) {
            case "array":
                return this.getInsertTextForValue([], separatorAfter);
            case "object":
                return this.getInsertTextForValue({}, separatorAfter);
            default:
                var content = document.getText().substr(node.offset, node.length) + separatorAfter;
                return this.getInsertTextForPlainText(content);
        }
    };
    JSONCompletion2.prototype.getInsertTextForProperty = function (key, propertySchema, addValue, separatorAfter) {
        var propertyText = this.getInsertTextForValue(key, "");
        if (!addValue) {
            return propertyText;
        }
        var resultText = propertyText + ": ";
        var value;
        var nValueProposals = 0;
        if (propertySchema) {
            if (Array.isArray(propertySchema.defaultSnippets)) {
                if (propertySchema.defaultSnippets.length === 1) {
                    var body = propertySchema.defaultSnippets[0].body;
                    if (isDefined(body)) {
                        value = this.getInsertTextForSnippetValue(body, "");
                    }
                }
                nValueProposals += propertySchema.defaultSnippets.length;
            }
            if (propertySchema.enum) {
                if (!value && propertySchema.enum.length === 1) {
                    value = this.getInsertTextForGuessedValue(propertySchema.enum[0], "");
                }
                nValueProposals += propertySchema.enum.length;
            }
            if (isDefined(propertySchema.default)) {
                if (!value) {
                    value = this.getInsertTextForGuessedValue(propertySchema.default, "");
                }
                nValueProposals++;
            }
            if (Array.isArray(propertySchema.examples) && propertySchema.examples.length) {
                if (!value) {
                    value = this.getInsertTextForGuessedValue(propertySchema.examples[0], "");
                }
                nValueProposals += propertySchema.examples.length;
            }
            if (nValueProposals === 0) {
                var type = Array.isArray(propertySchema.type) ? propertySchema.type[0] : propertySchema.type;
                if (!type) {
                    if (propertySchema.properties) {
                        type = "object";
                    }
                    else if (propertySchema.items) {
                        type = "array";
                    }
                }
                switch (type) {
                    case "boolean":
                        value = "$1";
                        break;
                    case "string":
                        value = '"$1"';
                        break;
                    case "object":
                        value = "{$1}";
                        break;
                    case "array":
                        value = "[$1]";
                        break;
                    case "number":
                    case "integer":
                        value = "${1:0}";
                        break;
                    case "null":
                        value = "${1:null}";
                        break;
                    default:
                        return propertyText;
                }
            }
        }
        if (!value || nValueProposals > 1) {
            value = "$1";
        }
        return resultText + value + separatorAfter;
    };
    JSONCompletion2.prototype.getCurrentWord = function (document, offset) {
        var i = offset - 1;
        var text = document.getText();
        while (i >= 0 && ' 	\n\r\v":{[,]}'.indexOf(text.charAt(i)) === -1) {
            i--;
        }
        return text.substring(i + 1, offset);
    };
    JSONCompletion2.prototype.evaluateSeparatorAfter = function (document, offset) {
        var scanner = main/* createScanner */.tU(document.getText(), true);
        scanner.setPosition(offset);
        var token = scanner.scan();
        switch (token) {
            case 5:
            case 2:
            case 4:
            case 17:
                return "";
            default:
                return ",";
        }
    };
    JSONCompletion2.prototype.findItemAtOffset = function (node, document, offset) {
        var scanner = main/* createScanner */.tU(document.getText(), true);
        var children = node.items;
        for (var i = children.length - 1; i >= 0; i--) {
            var child = children[i];
            if (offset > child.offset + child.length) {
                scanner.setPosition(child.offset + child.length);
                var token = scanner.scan();
                if (token === 5 && offset >= scanner.getTokenOffset() + scanner.getTokenLength()) {
                    return i + 1;
                }
                return i;
            }
            else if (offset >= child.offset) {
                return i;
            }
        }
        return 0;
    };
    JSONCompletion2.prototype.isInComment = function (document, start, offset) {
        var scanner = main/* createScanner */.tU(document.getText(), false);
        scanner.setPosition(start);
        var token = scanner.scan();
        while (token !== 17 && scanner.getTokenOffset() + scanner.getTokenLength() < offset) {
            token = scanner.scan();
        }
        return (token === 12 || token === 13) && scanner.getTokenOffset() <= offset;
    };
    JSONCompletion2.prototype.fromMarkup = function (markupString) {
        if (markupString && this.doesSupportMarkdown()) {
            return {
                kind: MarkupKind.Markdown,
                value: markupString
            };
        }
        return void 0;
    };
    JSONCompletion2.prototype.doesSupportMarkdown = function () {
        if (!isDefined(this.supportsMarkdown)) {
            var completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;
            this.supportsMarkdown = completion && completion.completionItem && Array.isArray(completion.completionItem.documentationFormat) && completion.completionItem.documentationFormat.indexOf(MarkupKind.Markdown) !== -1;
        }
        return this.supportsMarkdown;
    };
    JSONCompletion2.prototype.doesSupportsCommitCharacters = function () {
        if (!isDefined(this.supportsCommitCharacters)) {
            var completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;
            this.supportsCommitCharacters = completion && completion.completionItem && !!completion.completionItem.commitCharactersSupport;
        }
        return this.supportsCommitCharacters;
    };
    return JSONCompletion2;
}());
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonHover.js
var JSONHover = (
/** @class */
function () {
    function JSONHover2(schemaService, contributions, promiseConstructor) {
        if (contributions === void 0) {
            contributions = [];
        }
        this.schemaService = schemaService;
        this.contributions = contributions;
        this.promise = promiseConstructor || Promise;
    }
    JSONHover2.prototype.doHover = function (document, position, doc) {
        var offset = document.offsetAt(position);
        var node = doc.getNodeFromOffset(offset);
        if (!node || (node.type === "object" || node.type === "array") && offset > node.offset + 1 && offset < node.offset + node.length - 1) {
            return this.promise.resolve(null);
        }
        var hoverRangeNode = node;
        if (node.type === "string") {
            var parent = node.parent;
            if (parent && parent.type === "property" && parent.keyNode === node) {
                node = parent.valueNode;
                if (!node) {
                    return this.promise.resolve(null);
                }
            }
        }
        var hoverRange = Range.create(document.positionAt(hoverRangeNode.offset), document.positionAt(hoverRangeNode.offset + hoverRangeNode.length));
        var createHover = function (contents) {
            var result = {
                contents,
                range: hoverRange
            };
            return result;
        };
        var location = getNodePath2(node);
        for (var i = this.contributions.length - 1; i >= 0; i--) {
            var contribution = this.contributions[i];
            var promise = contribution.getInfoContribution(document.uri, location);
            if (promise) {
                return promise.then(function (htmlContent) {
                    return createHover(htmlContent);
                });
            }
        }
        return this.schemaService.getSchemaForResource(document.uri, doc).then(function (schema4) {
            if (schema4 && node) {
                var matchingSchemas = doc.getMatchingSchemas(schema4.schema, node.offset);
                var title_1 = void 0;
                var markdownDescription_1 = void 0;
                var markdownEnumValueDescription_1 = void 0, enumValue_1 = void 0;
                matchingSchemas.every(function (s) {
                    if (s.node === node && !s.inverted && s.schema) {
                        title_1 = title_1 || s.schema.title;
                        markdownDescription_1 = markdownDescription_1 || s.schema.markdownDescription || toMarkdown(s.schema.description);
                        if (s.schema.enum) {
                            var idx = s.schema.enum.indexOf(getNodeValue2(node));
                            if (s.schema.markdownEnumDescriptions) {
                                markdownEnumValueDescription_1 = s.schema.markdownEnumDescriptions[idx];
                            }
                            else if (s.schema.enumDescriptions) {
                                markdownEnumValueDescription_1 = toMarkdown(s.schema.enumDescriptions[idx]);
                            }
                            if (markdownEnumValueDescription_1) {
                                enumValue_1 = s.schema.enum[idx];
                                if (typeof enumValue_1 !== "string") {
                                    enumValue_1 = JSON.stringify(enumValue_1);
                                }
                            }
                        }
                    }
                    return true;
                });
                var result = "";
                if (title_1) {
                    result = toMarkdown(title_1);
                }
                if (markdownDescription_1) {
                    if (result.length > 0) {
                        result += "\n\n";
                    }
                    result += markdownDescription_1;
                }
                if (markdownEnumValueDescription_1) {
                    if (result.length > 0) {
                        result += "\n\n";
                    }
                    result += "`" + toMarkdownCodeBlock(enumValue_1) + "`: " + markdownEnumValueDescription_1;
                }
                return createHover([result]);
            }
            return null;
        });
    };
    return JSONHover2;
}());
function toMarkdown(plain) {
    if (plain) {
        var res = plain.replace(/([^\n\r])(\r?\n)([^\n\r])/gm, "$1\n\n$3");
        return res.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
    }
    return void 0;
}
function toMarkdownCodeBlock(content) {
    if (content.indexOf("`") !== -1) {
        return "`` " + content + " ``";
    }
    return content;
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonValidation.js
var localize5 = loadMessageBundle();
var JSONValidation = (
/** @class */
function () {
    function JSONValidation2(jsonSchemaService, promiseConstructor) {
        this.jsonSchemaService = jsonSchemaService;
        this.promise = promiseConstructor;
        this.validationEnabled = true;
    }
    JSONValidation2.prototype.configure = function (raw) {
        if (raw) {
            this.validationEnabled = raw.validate !== false;
            this.commentSeverity = raw.allowComments ? void 0 : DiagnosticSeverity.Error;
        }
    };
    JSONValidation2.prototype.doValidation = function (textDocument, jsonDocument, documentSettings, schema4) {
        var _this = this;
        if (!this.validationEnabled) {
            return this.promise.resolve([]);
        }
        var diagnostics = [];
        var added = {};
        var addProblem = function (problem) {
            var signature = problem.range.start.line + " " + problem.range.start.character + " " + problem.message;
            if (!added[signature]) {
                added[signature] = true;
                diagnostics.push(problem);
            }
        };
        var getDiagnostics = function (schema5) {
            var trailingCommaSeverity = (documentSettings === null || documentSettings === void 0 ? void 0 : documentSettings.trailingCommas) ? toDiagnosticSeverity(documentSettings.trailingCommas) : DiagnosticSeverity.Error;
            var commentSeverity = (documentSettings === null || documentSettings === void 0 ? void 0 : documentSettings.comments) ? toDiagnosticSeverity(documentSettings.comments) : _this.commentSeverity;
            var schemaValidation = (documentSettings === null || documentSettings === void 0 ? void 0 : documentSettings.schemaValidation) ? toDiagnosticSeverity(documentSettings.schemaValidation) : DiagnosticSeverity.Warning;
            var schemaRequest = (documentSettings === null || documentSettings === void 0 ? void 0 : documentSettings.schemaRequest) ? toDiagnosticSeverity(documentSettings.schemaRequest) : DiagnosticSeverity.Warning;
            if (schema5) {
                if (schema5.errors.length && jsonDocument.root && schemaRequest) {
                    var astRoot = jsonDocument.root;
                    var property = astRoot.type === "object" ? astRoot.properties[0] : void 0;
                    if (property && property.keyNode.value === "$schema") {
                        var node = property.valueNode || property;
                        var range = Range.create(textDocument.positionAt(node.offset), textDocument.positionAt(node.offset + node.length));
                        addProblem(Diagnostic.create(range, schema5.errors[0], schemaRequest, ErrorCode.SchemaResolveError));
                    }
                    else {
                        var range = Range.create(textDocument.positionAt(astRoot.offset), textDocument.positionAt(astRoot.offset + 1));
                        addProblem(Diagnostic.create(range, schema5.errors[0], schemaRequest, ErrorCode.SchemaResolveError));
                    }
                }
                else if (schemaValidation) {
                    var semanticErrors = jsonDocument.validate(textDocument, schema5.schema, schemaValidation);
                    if (semanticErrors) {
                        semanticErrors.forEach(addProblem);
                    }
                }
                if (schemaAllowsComments(schema5.schema)) {
                    commentSeverity = void 0;
                }
                if (schemaAllowsTrailingCommas(schema5.schema)) {
                    trailingCommaSeverity = void 0;
                }
            }
            for (var _i = 0, _a = jsonDocument.syntaxErrors; _i < _a.length; _i++) {
                var p = _a[_i];
                if (p.code === ErrorCode.TrailingComma) {
                    if (typeof trailingCommaSeverity !== "number") {
                        continue;
                    }
                    p.severity = trailingCommaSeverity;
                }
                addProblem(p);
            }
            if (typeof commentSeverity === "number") {
                var message_1 = localize5("InvalidCommentToken", "Comments are not permitted in JSON.");
                jsonDocument.comments.forEach(function (c) {
                    addProblem(Diagnostic.create(c, message_1, commentSeverity, ErrorCode.CommentNotPermitted));
                });
            }
            return diagnostics;
        };
        if (schema4) {
            var id = schema4.id || "schemaservice://untitled/" + idCounter2++;
            return this.jsonSchemaService.resolveSchemaContent(new UnresolvedSchema(schema4), id, {}).then(function (resolvedSchema) {
                return getDiagnostics(resolvedSchema);
            });
        }
        return this.jsonSchemaService.getSchemaForResource(textDocument.uri, jsonDocument).then(function (schema5) {
            return getDiagnostics(schema5);
        });
    };
    return JSONValidation2;
}());
var idCounter2 = 0;
function schemaAllowsComments(schemaRef) {
    if (schemaRef && typeof schemaRef === "object") {
        if (isBoolean(schemaRef.allowComments)) {
            return schemaRef.allowComments;
        }
        if (schemaRef.allOf) {
            for (var _i = 0, _a = schemaRef.allOf; _i < _a.length; _i++) {
                var schema4 = _a[_i];
                var allow = schemaAllowsComments(schema4);
                if (isBoolean(allow)) {
                    return allow;
                }
            }
        }
    }
    return void 0;
}
function schemaAllowsTrailingCommas(schemaRef) {
    if (schemaRef && typeof schemaRef === "object") {
        if (isBoolean(schemaRef.allowTrailingCommas)) {
            return schemaRef.allowTrailingCommas;
        }
        var deprSchemaRef = schemaRef;
        if (isBoolean(deprSchemaRef["allowsTrailingCommas"])) {
            return deprSchemaRef["allowsTrailingCommas"];
        }
        if (schemaRef.allOf) {
            for (var _i = 0, _a = schemaRef.allOf; _i < _a.length; _i++) {
                var schema4 = _a[_i];
                var allow = schemaAllowsTrailingCommas(schema4);
                if (isBoolean(allow)) {
                    return allow;
                }
            }
        }
    }
    return void 0;
}
function toDiagnosticSeverity(severityLevel) {
    switch (severityLevel) {
        case "error":
            return DiagnosticSeverity.Error;
        case "warning":
            return DiagnosticSeverity.Warning;
        case "ignore":
            return void 0;
    }
    return void 0;
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/utils/colors.js
var Digit0 = 48;
var Digit9 = 57;
var A = 65;
var a = 97;
var f = 102;
function hexDigit(charCode) {
    if (charCode < Digit0) {
        return 0;
    }
    if (charCode <= Digit9) {
        return charCode - Digit0;
    }
    if (charCode < a) {
        charCode += a - A;
    }
    if (charCode >= a && charCode <= f) {
        return charCode - a + 10;
    }
    return 0;
}
function colorFromHex(text) {
    if (text[0] !== "#") {
        return void 0;
    }
    switch (text.length) {
        case 4:
            return {
                red: hexDigit(text.charCodeAt(1)) * 17 / 255,
                green: hexDigit(text.charCodeAt(2)) * 17 / 255,
                blue: hexDigit(text.charCodeAt(3)) * 17 / 255,
                alpha: 1
            };
        case 5:
            return {
                red: hexDigit(text.charCodeAt(1)) * 17 / 255,
                green: hexDigit(text.charCodeAt(2)) * 17 / 255,
                blue: hexDigit(text.charCodeAt(3)) * 17 / 255,
                alpha: hexDigit(text.charCodeAt(4)) * 17 / 255
            };
        case 7:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 16 + hexDigit(text.charCodeAt(2))) / 255,
                green: (hexDigit(text.charCodeAt(3)) * 16 + hexDigit(text.charCodeAt(4))) / 255,
                blue: (hexDigit(text.charCodeAt(5)) * 16 + hexDigit(text.charCodeAt(6))) / 255,
                alpha: 1
            };
        case 9:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 16 + hexDigit(text.charCodeAt(2))) / 255,
                green: (hexDigit(text.charCodeAt(3)) * 16 + hexDigit(text.charCodeAt(4))) / 255,
                blue: (hexDigit(text.charCodeAt(5)) * 16 + hexDigit(text.charCodeAt(6))) / 255,
                alpha: (hexDigit(text.charCodeAt(7)) * 16 + hexDigit(text.charCodeAt(8))) / 255
            };
    }
    return void 0;
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonDocumentSymbols.js
var JSONDocumentSymbols = (
/** @class */
function () {
    function JSONDocumentSymbols2(schemaService) {
        this.schemaService = schemaService;
    }
    JSONDocumentSymbols2.prototype.findDocumentSymbols = function (document, doc, context) {
        var _this = this;
        if (context === void 0) {
            context = { resultLimit: Number.MAX_VALUE };
        }
        var root = doc.root;
        if (!root) {
            return [];
        }
        var limit = context.resultLimit || Number.MAX_VALUE;
        var resourceString = document.uri;
        if (resourceString === "vscode://defaultsettings/keybindings.json" || endsWith(resourceString.toLowerCase(), "/user/keybindings.json")) {
            if (root.type === "array") {
                var result_1 = [];
                for (var _i = 0, _a = root.items; _i < _a.length; _i++) {
                    var item = _a[_i];
                    if (item.type === "object") {
                        for (var _b = 0, _c = item.properties; _b < _c.length; _b++) {
                            var property = _c[_b];
                            if (property.keyNode.value === "key" && property.valueNode) {
                                var location = Location.create(document.uri, getRange(document, item));
                                result_1.push({ name: getNodeValue2(property.valueNode), kind: SymbolKind.Function, location });
                                limit--;
                                if (limit <= 0) {
                                    if (context && context.onResultLimitExceeded) {
                                        context.onResultLimitExceeded(resourceString);
                                    }
                                    return result_1;
                                }
                            }
                        }
                    }
                }
                return result_1;
            }
        }
        var toVisit = [
            { node: root, containerName: "" }
        ];
        var nextToVisit = 0;
        var limitExceeded = false;
        var result = [];
        var collectOutlineEntries = function (node, containerName) {
            if (node.type === "array") {
                node.items.forEach(function (node2) {
                    if (node2) {
                        toVisit.push({ node: node2, containerName });
                    }
                });
            }
            else if (node.type === "object") {
                node.properties.forEach(function (property2) {
                    var valueNode = property2.valueNode;
                    if (valueNode) {
                        if (limit > 0) {
                            limit--;
                            var location2 = Location.create(document.uri, getRange(document, property2));
                            var childContainerName = containerName ? containerName + "." + property2.keyNode.value : property2.keyNode.value;
                            result.push({ name: _this.getKeyLabel(property2), kind: _this.getSymbolKind(valueNode.type), location: location2, containerName });
                            toVisit.push({ node: valueNode, containerName: childContainerName });
                        }
                        else {
                            limitExceeded = true;
                        }
                    }
                });
            }
        };
        while (nextToVisit < toVisit.length) {
            var next = toVisit[nextToVisit++];
            collectOutlineEntries(next.node, next.containerName);
        }
        if (limitExceeded && context && context.onResultLimitExceeded) {
            context.onResultLimitExceeded(resourceString);
        }
        return result;
    };
    JSONDocumentSymbols2.prototype.findDocumentSymbols2 = function (document, doc, context) {
        var _this = this;
        if (context === void 0) {
            context = { resultLimit: Number.MAX_VALUE };
        }
        var root = doc.root;
        if (!root) {
            return [];
        }
        var limit = context.resultLimit || Number.MAX_VALUE;
        var resourceString = document.uri;
        if (resourceString === "vscode://defaultsettings/keybindings.json" || endsWith(resourceString.toLowerCase(), "/user/keybindings.json")) {
            if (root.type === "array") {
                var result_2 = [];
                for (var _i = 0, _a = root.items; _i < _a.length; _i++) {
                    var item = _a[_i];
                    if (item.type === "object") {
                        for (var _b = 0, _c = item.properties; _b < _c.length; _b++) {
                            var property = _c[_b];
                            if (property.keyNode.value === "key" && property.valueNode) {
                                var range = getRange(document, item);
                                var selectionRange = getRange(document, property.keyNode);
                                result_2.push({ name: getNodeValue2(property.valueNode), kind: SymbolKind.Function, range, selectionRange });
                                limit--;
                                if (limit <= 0) {
                                    if (context && context.onResultLimitExceeded) {
                                        context.onResultLimitExceeded(resourceString);
                                    }
                                    return result_2;
                                }
                            }
                        }
                    }
                }
                return result_2;
            }
        }
        var result = [];
        var toVisit = [
            { node: root, result }
        ];
        var nextToVisit = 0;
        var limitExceeded = false;
        var collectOutlineEntries = function (node, result2) {
            if (node.type === "array") {
                node.items.forEach(function (node2, index) {
                    if (node2) {
                        if (limit > 0) {
                            limit--;
                            var range2 = getRange(document, node2);
                            var selectionRange2 = range2;
                            var name = String(index);
                            var symbol = { name, kind: _this.getSymbolKind(node2.type), range: range2, selectionRange: selectionRange2, children: [] };
                            result2.push(symbol);
                            toVisit.push({ result: symbol.children, node: node2 });
                        }
                        else {
                            limitExceeded = true;
                        }
                    }
                });
            }
            else if (node.type === "object") {
                node.properties.forEach(function (property2) {
                    var valueNode = property2.valueNode;
                    if (valueNode) {
                        if (limit > 0) {
                            limit--;
                            var range2 = getRange(document, property2);
                            var selectionRange2 = getRange(document, property2.keyNode);
                            var children = [];
                            var symbol = { name: _this.getKeyLabel(property2), kind: _this.getSymbolKind(valueNode.type), range: range2, selectionRange: selectionRange2, children, detail: _this.getDetail(valueNode) };
                            result2.push(symbol);
                            toVisit.push({ result: children, node: valueNode });
                        }
                        else {
                            limitExceeded = true;
                        }
                    }
                });
            }
        };
        while (nextToVisit < toVisit.length) {
            var next = toVisit[nextToVisit++];
            collectOutlineEntries(next.node, next.result);
        }
        if (limitExceeded && context && context.onResultLimitExceeded) {
            context.onResultLimitExceeded(resourceString);
        }
        return result;
    };
    JSONDocumentSymbols2.prototype.getSymbolKind = function (nodeType) {
        switch (nodeType) {
            case "object":
                return SymbolKind.Module;
            case "string":
                return SymbolKind.String;
            case "number":
                return SymbolKind.Number;
            case "array":
                return SymbolKind.Array;
            case "boolean":
                return SymbolKind.Boolean;
            default:
                return SymbolKind.Variable;
        }
    };
    JSONDocumentSymbols2.prototype.getKeyLabel = function (property) {
        var name = property.keyNode.value;
        if (name) {
            name = name.replace(/[\n]/g, "\u21B5");
        }
        if (name && name.trim()) {
            return name;
        }
        return '"' + name + '"';
    };
    JSONDocumentSymbols2.prototype.getDetail = function (node) {
        if (!node) {
            return void 0;
        }
        if (node.type === "boolean" || node.type === "number" || node.type === "null" || node.type === "string") {
            return String(node.value);
        }
        else {
            if (node.type === "array") {
                return node.children.length ? void 0 : "[]";
            }
            else if (node.type === "object") {
                return node.children.length ? void 0 : "{}";
            }
        }
        return void 0;
    };
    JSONDocumentSymbols2.prototype.findDocumentColors = function (document, doc, context) {
        return this.schemaService.getSchemaForResource(document.uri, doc).then(function (schema4) {
            var result = [];
            if (schema4) {
                var limit = context && typeof context.resultLimit === "number" ? context.resultLimit : Number.MAX_VALUE;
                var matchingSchemas = doc.getMatchingSchemas(schema4.schema);
                var visitedNode = {};
                for (var _i = 0, matchingSchemas_1 = matchingSchemas; _i < matchingSchemas_1.length; _i++) {
                    var s = matchingSchemas_1[_i];
                    if (!s.inverted && s.schema && (s.schema.format === "color" || s.schema.format === "color-hex") && s.node && s.node.type === "string") {
                        var nodeId = String(s.node.offset);
                        if (!visitedNode[nodeId]) {
                            var color = colorFromHex(getNodeValue2(s.node));
                            if (color) {
                                var range = getRange(document, s.node);
                                result.push({ color, range });
                            }
                            visitedNode[nodeId] = true;
                            limit--;
                            if (limit <= 0) {
                                if (context && context.onResultLimitExceeded) {
                                    context.onResultLimitExceeded(document.uri);
                                }
                                return result;
                            }
                        }
                    }
                }
            }
            return result;
        });
    };
    JSONDocumentSymbols2.prototype.getColorPresentations = function (document, doc, color, range) {
        var result = [];
        var red256 = Math.round(color.red * 255), green256 = Math.round(color.green * 255), blue256 = Math.round(color.blue * 255);
        function toTwoDigitHex(n) {
            var r = n.toString(16);
            return r.length !== 2 ? "0" + r : r;
        }
        var label;
        if (color.alpha === 1) {
            label = "#" + toTwoDigitHex(red256) + toTwoDigitHex(green256) + toTwoDigitHex(blue256);
        }
        else {
            label = "#" + toTwoDigitHex(red256) + toTwoDigitHex(green256) + toTwoDigitHex(blue256) + toTwoDigitHex(Math.round(color.alpha * 255));
        }
        result.push({ label, textEdit: TextEdit.replace(range, JSON.stringify(label)) });
        return result;
    };
    return JSONDocumentSymbols2;
}());
function getRange(document, node) {
    return Range.create(document.positionAt(node.offset), document.positionAt(node.offset + node.length));
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/configuration.js
var localize6 = loadMessageBundle();
var schemaContributions = {
    schemaAssociations: [],
    schemas: {
        // refer to the latest schema
        "http://json-schema.org/schema#": {
            $ref: "http://json-schema.org/draft-07/schema#"
        },
        // bundle the schema-schema to include (localized) descriptions
        "http://json-schema.org/draft-04/schema#": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "definitions": {
                "schemaArray": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#"
                    }
                },
                "positiveInteger": {
                    "type": "integer",
                    "minimum": 0
                },
                "positiveIntegerDefault0": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveInteger"
                        },
                        {
                            "default": 0
                        }
                    ]
                },
                "simpleTypes": {
                    "type": "string",
                    "enum": [
                        "array",
                        "boolean",
                        "integer",
                        "null",
                        "number",
                        "object",
                        "string"
                    ]
                },
                "stringArray": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "uniqueItems": true
                }
            },
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uri"
                },
                "$schema": {
                    "type": "string",
                    "format": "uri"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "default": {},
                "multipleOf": {
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true
                },
                "maximum": {
                    "type": "number"
                },
                "exclusiveMaximum": {
                    "type": "boolean",
                    "default": false
                },
                "minimum": {
                    "type": "number"
                },
                "exclusiveMinimum": {
                    "type": "boolean",
                    "default": false
                },
                "maxLength": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveInteger"
                        }
                    ]
                },
                "minLength": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveIntegerDefault0"
                        }
                    ]
                },
                "pattern": {
                    "type": "string",
                    "format": "regex"
                },
                "additionalItems": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "$ref": "#"
                        }
                    ],
                    "default": {}
                },
                "items": {
                    "anyOf": [
                        {
                            "$ref": "#"
                        },
                        {
                            "$ref": "#/definitions/schemaArray"
                        }
                    ],
                    "default": {}
                },
                "maxItems": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveInteger"
                        }
                    ]
                },
                "minItems": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveIntegerDefault0"
                        }
                    ]
                },
                "uniqueItems": {
                    "type": "boolean",
                    "default": false
                },
                "maxProperties": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveInteger"
                        }
                    ]
                },
                "minProperties": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveIntegerDefault0"
                        }
                    ]
                },
                "required": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/stringArray"
                        }
                    ]
                },
                "additionalProperties": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "$ref": "#"
                        }
                    ],
                    "default": {}
                },
                "definitions": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#"
                    },
                    "default": {}
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#"
                    },
                    "default": {}
                },
                "patternProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#"
                    },
                    "default": {}
                },
                "dependencies": {
                    "type": "object",
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "$ref": "#"
                            },
                            {
                                "$ref": "#/definitions/stringArray"
                            }
                        ]
                    }
                },
                "enum": {
                    "type": "array",
                    "minItems": 1,
                    "uniqueItems": true
                },
                "type": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/simpleTypes"
                        },
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/simpleTypes"
                            },
                            "minItems": 1,
                            "uniqueItems": true
                        }
                    ]
                },
                "format": {
                    "anyOf": [
                        {
                            "type": "string",
                            "enum": [
                                "date-time",
                                "uri",
                                "email",
                                "hostname",
                                "ipv4",
                                "ipv6",
                                "regex"
                            ]
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "allOf": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemaArray"
                        }
                    ]
                },
                "anyOf": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemaArray"
                        }
                    ]
                },
                "oneOf": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemaArray"
                        }
                    ]
                },
                "not": {
                    "allOf": [
                        {
                            "$ref": "#"
                        }
                    ]
                }
            },
            "dependencies": {
                "exclusiveMaximum": [
                    "maximum"
                ],
                "exclusiveMinimum": [
                    "minimum"
                ]
            },
            "default": {}
        },
        "http://json-schema.org/draft-07/schema#": {
            "definitions": {
                "schemaArray": {
                    "type": "array",
                    "minItems": 1,
                    "items": { "$ref": "#" }
                },
                "nonNegativeInteger": {
                    "type": "integer",
                    "minimum": 0
                },
                "nonNegativeIntegerDefault0": {
                    "allOf": [
                        { "$ref": "#/definitions/nonNegativeInteger" },
                        { "default": 0 }
                    ]
                },
                "simpleTypes": {
                    "enum": [
                        "array",
                        "boolean",
                        "integer",
                        "null",
                        "number",
                        "object",
                        "string"
                    ]
                },
                "stringArray": {
                    "type": "array",
                    "items": { "type": "string" },
                    "uniqueItems": true,
                    "default": []
                }
            },
            "type": ["object", "boolean"],
            "properties": {
                "$id": {
                    "type": "string",
                    "format": "uri-reference"
                },
                "$schema": {
                    "type": "string",
                    "format": "uri"
                },
                "$ref": {
                    "type": "string",
                    "format": "uri-reference"
                },
                "$comment": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "default": true,
                "readOnly": {
                    "type": "boolean",
                    "default": false
                },
                "examples": {
                    "type": "array",
                    "items": true
                },
                "multipleOf": {
                    "type": "number",
                    "exclusiveMinimum": 0
                },
                "maximum": {
                    "type": "number"
                },
                "exclusiveMaximum": {
                    "type": "number"
                },
                "minimum": {
                    "type": "number"
                },
                "exclusiveMinimum": {
                    "type": "number"
                },
                "maxLength": { "$ref": "#/definitions/nonNegativeInteger" },
                "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
                "pattern": {
                    "type": "string",
                    "format": "regex"
                },
                "additionalItems": { "$ref": "#" },
                "items": {
                    "anyOf": [
                        { "$ref": "#" },
                        { "$ref": "#/definitions/schemaArray" }
                    ],
                    "default": true
                },
                "maxItems": { "$ref": "#/definitions/nonNegativeInteger" },
                "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
                "uniqueItems": {
                    "type": "boolean",
                    "default": false
                },
                "contains": { "$ref": "#" },
                "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" },
                "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
                "required": { "$ref": "#/definitions/stringArray" },
                "additionalProperties": { "$ref": "#" },
                "definitions": {
                    "type": "object",
                    "additionalProperties": { "$ref": "#" },
                    "default": {}
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": { "$ref": "#" },
                    "default": {}
                },
                "patternProperties": {
                    "type": "object",
                    "additionalProperties": { "$ref": "#" },
                    "propertyNames": { "format": "regex" },
                    "default": {}
                },
                "dependencies": {
                    "type": "object",
                    "additionalProperties": {
                        "anyOf": [
                            { "$ref": "#" },
                            { "$ref": "#/definitions/stringArray" }
                        ]
                    }
                },
                "propertyNames": { "$ref": "#" },
                "const": true,
                "enum": {
                    "type": "array",
                    "items": true,
                    "minItems": 1,
                    "uniqueItems": true
                },
                "type": {
                    "anyOf": [
                        { "$ref": "#/definitions/simpleTypes" },
                        {
                            "type": "array",
                            "items": { "$ref": "#/definitions/simpleTypes" },
                            "minItems": 1,
                            "uniqueItems": true
                        }
                    ]
                },
                "format": { "type": "string" },
                "contentMediaType": { "type": "string" },
                "contentEncoding": { "type": "string" },
                "if": { "$ref": "#" },
                "then": { "$ref": "#" },
                "else": { "$ref": "#" },
                "allOf": { "$ref": "#/definitions/schemaArray" },
                "anyOf": { "$ref": "#/definitions/schemaArray" },
                "oneOf": { "$ref": "#/definitions/schemaArray" },
                "not": { "$ref": "#" }
            },
            "default": true
        }
    }
};
var descriptions = {
    id: localize6("schema.json.id", "A unique identifier for the schema."),
    $schema: localize6("schema.json.$schema", "The schema to verify this document against."),
    title: localize6("schema.json.title", "A descriptive title of the element."),
    description: localize6("schema.json.description", "A long description of the element. Used in hover menus and suggestions."),
    default: localize6("schema.json.default", "A default value. Used by suggestions."),
    multipleOf: localize6("schema.json.multipleOf", "A number that should cleanly divide the current value (i.e. have no remainder)."),
    maximum: localize6("schema.json.maximum", "The maximum numerical value, inclusive by default."),
    exclusiveMaximum: localize6("schema.json.exclusiveMaximum", "Makes the maximum property exclusive."),
    minimum: localize6("schema.json.minimum", "The minimum numerical value, inclusive by default."),
    exclusiveMinimum: localize6("schema.json.exclusiveMininum", "Makes the minimum property exclusive."),
    maxLength: localize6("schema.json.maxLength", "The maximum length of a string."),
    minLength: localize6("schema.json.minLength", "The minimum length of a string."),
    pattern: localize6("schema.json.pattern", "A regular expression to match the string against. It is not implicitly anchored."),
    additionalItems: localize6("schema.json.additionalItems", "For arrays, only when items is set as an array. If it is a schema, then this schema validates items after the ones specified by the items array. If it is false, then additional items will cause validation to fail."),
    items: localize6("schema.json.items", "For arrays. Can either be a schema to validate every element against or an array of schemas to validate each item against in order (the first schema will validate the first element, the second schema will validate the second element, and so on."),
    maxItems: localize6("schema.json.maxItems", "The maximum number of items that can be inside an array. Inclusive."),
    minItems: localize6("schema.json.minItems", "The minimum number of items that can be inside an array. Inclusive."),
    uniqueItems: localize6("schema.json.uniqueItems", "If all of the items in the array must be unique. Defaults to false."),
    maxProperties: localize6("schema.json.maxProperties", "The maximum number of properties an object can have. Inclusive."),
    minProperties: localize6("schema.json.minProperties", "The minimum number of properties an object can have. Inclusive."),
    required: localize6("schema.json.required", "An array of strings that lists the names of all properties required on this object."),
    additionalProperties: localize6("schema.json.additionalProperties", "Either a schema or a boolean. If a schema, then used to validate all properties not matched by 'properties' or 'patternProperties'. If false, then any properties not matched by either will cause this schema to fail."),
    definitions: localize6("schema.json.definitions", "Not used for validation. Place subschemas here that you wish to reference inline with $ref."),
    properties: localize6("schema.json.properties", "A map of property names to schemas for each property."),
    patternProperties: localize6("schema.json.patternProperties", "A map of regular expressions on property names to schemas for matching properties."),
    dependencies: localize6("schema.json.dependencies", "A map of property names to either an array of property names or a schema. An array of property names means the property named in the key depends on the properties in the array being present in the object in order to be valid. If the value is a schema, then the schema is only applied to the object if the property in the key exists on the object."),
    enum: localize6("schema.json.enum", "The set of literal values that are valid."),
    type: localize6("schema.json.type", "Either a string of one of the basic schema types (number, integer, null, array, object, boolean, string) or an array of strings specifying a subset of those types."),
    format: localize6("schema.json.format", "Describes the format expected for the value."),
    allOf: localize6("schema.json.allOf", "An array of schemas, all of which must match."),
    anyOf: localize6("schema.json.anyOf", "An array of schemas, where at least one must match."),
    oneOf: localize6("schema.json.oneOf", "An array of schemas, exactly one of which must match."),
    not: localize6("schema.json.not", "A schema which must not match."),
    $id: localize6("schema.json.$id", "A unique identifier for the schema."),
    $ref: localize6("schema.json.$ref", "Reference a definition hosted on any location."),
    $comment: localize6("schema.json.$comment", "Comments from schema authors to readers or maintainers of the schema."),
    readOnly: localize6("schema.json.readOnly", "Indicates that the value of the instance is managed exclusively by the owning authority."),
    examples: localize6("schema.json.examples", "Sample JSON values associated with a particular schema, for the purpose of illustrating usage."),
    contains: localize6("schema.json.contains", 'An array instance is valid against "contains" if at least one of its elements is valid against the given schema.'),
    propertyNames: localize6("schema.json.propertyNames", "If the instance is an object, this keyword validates if every property name in the instance validates against the provided schema."),
    const: localize6("schema.json.const", "An instance validates successfully against this keyword if its value is equal to the value of the keyword."),
    contentMediaType: localize6("schema.json.contentMediaType", "Describes the media type of a string property."),
    contentEncoding: localize6("schema.json.contentEncoding", "Describes the content encoding of a string property."),
    if: localize6("schema.json.if", 'The validation outcome of the "if" subschema controls which of the "then" or "else" keywords are evaluated.'),
    then: localize6("schema.json.then", 'The "if" subschema is used for validation when the "if" subschema succeeds.'),
    else: localize6("schema.json.else", 'The "else" subschema is used for validation when the "if" subschema fails.')
};
for (schemaName in schemaContributions.schemas) {
    schema4 = schemaContributions.schemas[schemaName];
    for (property in schema4.properties) {
        propertyObject = schema4.properties[property];
        if (typeof propertyObject === "boolean") {
            propertyObject = schema4.properties[property] = {};
        }
        description = descriptions[property];
        if (description) {
            propertyObject["description"] = description;
        }
        else {
            console.log(property + ": localize('schema.json." + property + `', "")`);
        }
    }
}
var schema4;
var propertyObject;
var description;
var property;
var schemaName;
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonLinks.js
function findLinks(document, doc) {
    var links = [];
    doc.visit(function (node) {
        var _a;
        if (node.type === "property" && node.keyNode.value === "$ref" && ((_a = node.valueNode) === null || _a === void 0 ? void 0 : _a.type) === "string") {
            var path5 = node.valueNode.value;
            var targetNode = findTargetNode(doc, path5);
            if (targetNode) {
                var targetPos = document.positionAt(targetNode.offset);
                links.push({
                    target: document.uri + "#" + (targetPos.line + 1) + "," + (targetPos.character + 1),
                    range: createRange(document, node.valueNode)
                });
            }
        }
        return true;
    });
    return Promise.resolve(links);
}
function createRange(document, node) {
    return Range.create(document.positionAt(node.offset + 1), document.positionAt(node.offset + node.length - 1));
}
function findTargetNode(doc, path5) {
    var tokens = parseJSONPointer(path5);
    if (!tokens) {
        return null;
    }
    return findNode(tokens, doc.root);
}
function findNode(pointer, node) {
    if (!node) {
        return null;
    }
    if (pointer.length === 0) {
        return node;
    }
    var token = pointer.shift();
    if (node && node.type === "object") {
        var propertyNode = node.properties.find(function (propertyNode2) {
            return propertyNode2.keyNode.value === token;
        });
        if (!propertyNode) {
            return null;
        }
        return findNode(pointer, propertyNode.valueNode);
    }
    else if (node && node.type === "array") {
        if (token.match(/^(0|[1-9][0-9]*)$/)) {
            var index = Number.parseInt(token);
            var arrayItem = node.items[index];
            if (!arrayItem) {
                return null;
            }
            return findNode(pointer, arrayItem);
        }
    }
    return null;
}
function parseJSONPointer(path5) {
    if (path5 === "#") {
        return [];
    }
    if (path5[0] !== "#" || path5[1] !== "/") {
        return null;
    }
    return path5.substring(2).split(/\//).map(dist_unescape);
}
function dist_unescape(str) {
    return str.replace(/~1/g, "/").replace(/~0/g, "~");
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/arrUtils.js
function matchOffsetToDocument(offset, jsonDocuments) {
    for (const jsonDoc of jsonDocuments.documents) {
        if (jsonDoc.internalDocument && jsonDoc.internalDocument.range[0] <= offset && jsonDoc.internalDocument.range[2] >= offset) {
            return jsonDoc;
        }
    }
    if (jsonDocuments.documents.length === 1) {
        return jsonDocuments.documents[0];
    }
    return null;
}
function filterInvalidCustomTags(customTags) {
    const validCustomTags = ["mapping", "scalar", "sequence"];
    if (!customTags) {
        return [];
    }
    return customTags.filter((tag) => {
        if (typeof tag === "string") {
            const typeInfo = tag.split(" ");
            const type = typeInfo[1] && typeInfo[1].toLowerCase() || "scalar";
            if (type === "map") {
                return false;
            }
            return validCustomTags.indexOf(type) !== -1;
        }
        return false;
    });
}
function isArrayEqual(fst, snd) {
    if (!snd || !fst) {
        return false;
    }
    if (snd.length !== fst.length) {
        return false;
    }
    for (let index = fst.length - 1; index >= 0; index--) {
        if (fst[index] !== snd[index]) {
            return false;
        }
    }
    return true;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/parser/jsonParser07.js
var localize7 = loadMessageBundle();
var MSG_PROPERTY_NOT_ALLOWED = "Property {0} is not allowed.";
var formats2 = {
    "color-hex": {
        errorMessage: localize7("colorHexFormatWarning", "Invalid color format. Use #RGB, #RGBA, #RRGGBB or #RRGGBBAA."),
        pattern: /^#([0-9A-Fa-f]{3,4}|([0-9A-Fa-f]{2}){3,4})$/
    },
    "date-time": {
        errorMessage: localize7("dateTimeFormatWarning", "String is not a RFC3339 date-time."),
        pattern: /^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i
    },
    date: {
        errorMessage: localize7("dateFormatWarning", "String is not a RFC3339 date."),
        pattern: /^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/i
    },
    time: {
        errorMessage: localize7("timeFormatWarning", "String is not a RFC3339 time."),
        pattern: /^([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i
    },
    email: {
        errorMessage: localize7("emailFormatWarning", "String is not an e-mail address."),
        pattern: /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
    }
};
var YAML_SOURCE = "YAML";
var YAML_SCHEMA_PREFIX = "yaml-schema: ";
var ProblemType;
(function (ProblemType2) {
    ProblemType2["missingRequiredPropWarning"] = "missingRequiredPropWarning";
    ProblemType2["typeMismatchWarning"] = "typeMismatchWarning";
    ProblemType2["constWarning"] = "constWarning";
})(ProblemType || (ProblemType = {}));
var ProblemTypeMessages = {
    [ProblemType.missingRequiredPropWarning]: 'Missing property "{0}".',
    [ProblemType.typeMismatchWarning]: 'Incorrect type. Expected "{0}".',
    [ProblemType.constWarning]: "Value must be {0}."
};
var ASTNodeImpl2 = class {
    constructor(parent, internalNode, offset, length) {
        this.offset = offset;
        this.length = length;
        this.parent = parent;
        this.internalNode = internalNode;
    }
    getNodeFromOffsetEndInclusive(offset) {
        const collector = [];
        const findNode2 = (node) => {
            if (offset >= node.offset && offset <= node.offset + node.length) {
                const children = node.children;
                for (let i = 0; i < children.length && children[i].offset <= offset; i++) {
                    const item = findNode2(children[i]);
                    if (item) {
                        collector.push(item);
                    }
                }
                return node;
            }
            return null;
        };
        const foundNode = findNode2(this);
        let currMinDist = Number.MAX_VALUE;
        let currMinNode = null;
        for (const currNode of collector) {
            const minDist = currNode.length + currNode.offset - offset + (offset - currNode.offset);
            if (minDist < currMinDist) {
                currMinNode = currNode;
                currMinDist = minDist;
            }
        }
        return currMinNode || foundNode;
    }
    get children() {
        return [];
    }
    toString() {
        return "type: " + this.type + " (" + this.offset + "/" + this.length + ")" + (this.parent ? " parent: {" + this.parent.toString() + "}" : "");
    }
};
var NullASTNodeImpl2 = class extends ASTNodeImpl2 {
    constructor(parent, internalNode, offset, length) {
        super(parent, internalNode, offset, length);
        this.type = "null";
        this.value = null;
    }
};
var BooleanASTNodeImpl2 = class extends ASTNodeImpl2 {
    constructor(parent, internalNode, boolValue, offset, length) {
        super(parent, internalNode, offset, length);
        this.type = "boolean";
        this.value = boolValue;
    }
};
var ArrayASTNodeImpl2 = class extends ASTNodeImpl2 {
    constructor(parent, internalNode, offset, length) {
        super(parent, internalNode, offset, length);
        this.type = "array";
        this.items = [];
    }
    get children() {
        return this.items;
    }
};
var NumberASTNodeImpl2 = class extends ASTNodeImpl2 {
    constructor(parent, internalNode, offset, length) {
        super(parent, internalNode, offset, length);
        this.type = "number";
        this.isInteger = true;
        this.value = Number.NaN;
    }
};
var StringASTNodeImpl2 = class extends ASTNodeImpl2 {
    constructor(parent, internalNode, offset, length) {
        super(parent, internalNode, offset, length);
        this.type = "string";
        this.value = "";
    }
};
var PropertyASTNodeImpl2 = class extends ASTNodeImpl2 {
    constructor(parent, internalNode, offset, length) {
        super(parent, internalNode, offset, length);
        this.type = "property";
        this.colonOffset = -1;
    }
    get children() {
        return this.valueNode ? [this.keyNode, this.valueNode] : [this.keyNode];
    }
};
var ObjectASTNodeImpl2 = class extends ASTNodeImpl2 {
    constructor(parent, internalNode, offset, length) {
        super(parent, internalNode, offset, length);
        this.type = "object";
        this.properties = [];
    }
    get children() {
        return this.properties;
    }
};
function asSchema2(schema4) {
    if (schema4 === void 0) {
        return void 0;
    }
    if (isBoolean2(schema4)) {
        return schema4 ? {} : { not: {} };
    }
    if (typeof schema4 !== "object") {
        console.warn(`Wrong schema: ${JSON.stringify(schema4)}, it MUST be an Object or Boolean`);
        schema4 = {
            type: schema4
        };
    }
    return schema4;
}
var EnumMatch2;
(function (EnumMatch3) {
    EnumMatch3[EnumMatch3["Key"] = 0] = "Key";
    EnumMatch3[EnumMatch3["Enum"] = 1] = "Enum";
})(EnumMatch2 || (EnumMatch2 = {}));
var SchemaCollector2 = class {
    constructor(focusOffset = -1, exclude = null) {
        this.focusOffset = focusOffset;
        this.exclude = exclude;
        this.schemas = [];
    }
    add(schema4) {
        this.schemas.push(schema4);
    }
    merge(other) {
        this.schemas.push(...other.schemas);
    }
    include(node) {
        return (this.focusOffset === -1 || contains2(node, this.focusOffset)) && node !== this.exclude;
    }
    newSub() {
        return new SchemaCollector2(-1, this.exclude);
    }
};
var NoOpSchemaCollector2 = class {
    constructor() {
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    get schemas() {
        return [];
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    add(schema4) {
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    merge(other) {
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    include(node) {
        return true;
    }
    newSub() {
        return this;
    }
};
NoOpSchemaCollector2.instance = new NoOpSchemaCollector2();
var ValidationResult2 = class {
    constructor(isKubernetes) {
        this.problems = [];
        this.propertiesMatches = 0;
        this.propertiesValueMatches = 0;
        this.primaryValueMatches = 0;
        this.enumValueMatch = false;
        if (isKubernetes) {
            this.enumValues = [];
        }
        else {
            this.enumValues = null;
        }
    }
    hasProblems() {
        return !!this.problems.length;
    }
    mergeAll(validationResults) {
        for (const validationResult of validationResults) {
            this.merge(validationResult);
        }
    }
    merge(validationResult) {
        this.problems = this.problems.concat(validationResult.problems);
    }
    mergeEnumValues(validationResult) {
        if (!this.enumValueMatch && !validationResult.enumValueMatch && this.enumValues && validationResult.enumValues) {
            this.enumValues = this.enumValues.concat(validationResult.enumValues);
            for (const error of this.problems) {
                if (error.code === ErrorCode.EnumValueMismatch) {
                    error.message = localize7("enumWarning", "Value is not accepted. Valid values: {0}.", [...new Set(this.enumValues)].map((v) => {
                        return JSON.stringify(v);
                    }).join(", "));
                }
            }
        }
    }
    /**
     * Merge multiple warnings with same problemType together
     * @param subValidationResult another possible result
     */
    mergeWarningGeneric(subValidationResult, problemTypesToMerge) {
        var _a, _b;
        if ((_a = this.problems) == null ? void 0 : _a.length) {
            for (const problemType of problemTypesToMerge) {
                const bestResults = this.problems.filter((p) => p.problemType === problemType);
                for (const bestResult of bestResults) {
                    const mergingResult = (_b = subValidationResult.problems) == null ? void 0 : _b.find((p) => p.problemType === problemType && bestResult.location.offset === p.location.offset && (problemType !== ProblemType.missingRequiredPropWarning || isArrayEqual(p.problemArgs, bestResult.problemArgs)));
                    if (mergingResult) {
                        if (mergingResult.problemArgs.length) {
                            mergingResult.problemArgs.filter((p) => !bestResult.problemArgs.includes(p)).forEach((p) => bestResult.problemArgs.push(p));
                            bestResult.message = getWarningMessage(bestResult.problemType, bestResult.problemArgs);
                        }
                        this.mergeSources(mergingResult, bestResult);
                    }
                }
            }
        }
    }
    mergePropertyMatch(propertyValidationResult) {
        this.merge(propertyValidationResult);
        this.propertiesMatches++;
        if (propertyValidationResult.enumValueMatch || !propertyValidationResult.hasProblems() && propertyValidationResult.propertiesMatches) {
            this.propertiesValueMatches++;
        }
        if (propertyValidationResult.enumValueMatch && propertyValidationResult.enumValues) {
            this.primaryValueMatches++;
        }
    }
    mergeSources(mergingResult, bestResult) {
        const mergingSource = mergingResult.source.replace(YAML_SCHEMA_PREFIX, "");
        if (!bestResult.source.includes(mergingSource)) {
            bestResult.source = bestResult.source + " | " + mergingSource;
        }
        if (!bestResult.schemaUri.includes(mergingResult.schemaUri[0])) {
            bestResult.schemaUri = bestResult.schemaUri.concat(mergingResult.schemaUri);
        }
    }
    compareGeneric(other) {
        const hasProblems = this.hasProblems();
        if (hasProblems !== other.hasProblems()) {
            return hasProblems ? -1 : 1;
        }
        if (this.enumValueMatch !== other.enumValueMatch) {
            return other.enumValueMatch ? -1 : 1;
        }
        if (this.propertiesValueMatches !== other.propertiesValueMatches) {
            return this.propertiesValueMatches - other.propertiesValueMatches;
        }
        if (this.primaryValueMatches !== other.primaryValueMatches) {
            return this.primaryValueMatches - other.primaryValueMatches;
        }
        return this.propertiesMatches - other.propertiesMatches;
    }
    compareKubernetes(other) {
        const hasProblems = this.hasProblems();
        if (this.propertiesMatches !== other.propertiesMatches) {
            return this.propertiesMatches - other.propertiesMatches;
        }
        if (this.enumValueMatch !== other.enumValueMatch) {
            return other.enumValueMatch ? -1 : 1;
        }
        if (this.primaryValueMatches !== other.primaryValueMatches) {
            return this.primaryValueMatches - other.primaryValueMatches;
        }
        if (this.propertiesValueMatches !== other.propertiesValueMatches) {
            return this.propertiesValueMatches - other.propertiesValueMatches;
        }
        if (hasProblems !== other.hasProblems()) {
            return hasProblems ? -1 : 1;
        }
        return this.propertiesMatches - other.propertiesMatches;
    }
};
function getNodeValue3(node) {
    switch (node.type) {
        case "array":
            return node.children.map(getNodeValue3);
        case "object": {
            const obj = /* @__PURE__ */ Object.create(null);
            for (let _i = 0, _a = node.children; _i < _a.length; _i++) {
                const prop = _a[_i];
                const valueNode = prop.children[1];
                if (valueNode) {
                    obj[prop.children[0].value] = getNodeValue3(valueNode);
                }
            }
            return obj;
        }
        case "null":
        case "string":
        case "number":
        case "boolean":
            return node.value;
        default:
            return void 0;
    }
}
function contains2(node, offset, includeRightBound = false) {
    return offset >= node.offset && offset <= node.offset + node.length || includeRightBound && offset === node.offset + node.length;
}
function findNodeAtOffset2(node, offset, includeRightBound) {
    if (includeRightBound === void 0) {
        includeRightBound = false;
    }
    if (contains2(node, offset, includeRightBound)) {
        const children = node.children;
        if (Array.isArray(children)) {
            for (let i = 0; i < children.length && children[i].offset <= offset; i++) {
                const item = findNodeAtOffset2(children[i], offset, includeRightBound);
                if (item) {
                    return item;
                }
            }
        }
        return node;
    }
    return void 0;
}
var JSONDocument2 = class {
    constructor(root, syntaxErrors = [], comments = []) {
        this.root = root;
        this.syntaxErrors = syntaxErrors;
        this.comments = comments;
    }
    getNodeFromOffset(offset, includeRightBound = false) {
        if (this.root) {
            return findNodeAtOffset2(this.root, offset, includeRightBound);
        }
        return void 0;
    }
    getNodeFromOffsetEndInclusive(offset) {
        return this.root && this.root.getNodeFromOffsetEndInclusive(offset);
    }
    visit(visitor) {
        if (this.root) {
            const doVisit = (node) => {
                let ctn = visitor(node);
                const children = node.children;
                if (Array.isArray(children)) {
                    for (let i = 0; i < children.length && ctn; i++) {
                        ctn = doVisit(children[i]);
                    }
                }
                return ctn;
            };
            doVisit(this.root);
        }
    }
    validate(textDocument, schema4) {
        if (this.root && schema4) {
            const validationResult = new ValidationResult2(this.isKubernetes);
            validate2(this.root, schema4, schema4, validationResult, NoOpSchemaCollector2.instance, {
                isKubernetes: this.isKubernetes,
                disableAdditionalProperties: this.disableAdditionalProperties,
                uri: this.uri
            });
            return validationResult.problems.map((p) => {
                const range = Range.create(textDocument.positionAt(p.location.offset), textDocument.positionAt(p.location.offset + p.location.length));
                const diagnostic = Diagnostic.create(range, p.message, p.severity, p.code ? p.code : ErrorCode.Undefined, p.source);
                diagnostic.data = { schemaUri: p.schemaUri, ...p.data };
                return diagnostic;
            });
        }
        return null;
    }
    /**
     * This method returns the list of applicable schemas
     *
     * currently used @param didCallFromAutoComplete flag to differentiate the method call, when it is from auto complete
     * then user still types something and skip the validation for timebeing untill completed.
     * On https://github.com/redhat-developer/yaml-language-server/pull/719 the auto completes need to populate the list of enum string which matches to the enum
     * and on https://github.com/redhat-developer/vscode-yaml/issues/803 the validation should throw the error based on the enum string.
     *
     * @param schema schema
     * @param focusOffset  offsetValue
     * @param exclude excluded Node
     * @param didCallFromAutoComplete true if method called from AutoComplete
     * @returns array of applicable schemas
     */
    getMatchingSchemas(schema4, focusOffset = -1, exclude = null, didCallFromAutoComplete) {
        const matchingSchemas = new SchemaCollector2(focusOffset, exclude);
        if (this.root && schema4) {
            validate2(this.root, schema4, schema4, new ValidationResult2(this.isKubernetes), matchingSchemas, {
                isKubernetes: this.isKubernetes,
                disableAdditionalProperties: this.disableAdditionalProperties,
                uri: this.uri,
                callFromAutoComplete: didCallFromAutoComplete
            });
        }
        return matchingSchemas.schemas;
    }
};
function validate2(node, schema4, originalSchema, validationResult, matchingSchemas, options) {
    const { isKubernetes, callFromAutoComplete } = options;
    if (!node) {
        return;
    }
    if (typeof schema4 !== "object") {
        return;
    }
    if (!schema4.url) {
        schema4.url = originalSchema.url;
    }
    schema4.closestTitle = schema4.title || originalSchema.closestTitle;
    switch (node.type) {
        case "object":
            _validateObjectNode(node, schema4, validationResult, matchingSchemas);
            break;
        case "array":
            _validateArrayNode(node, schema4, validationResult, matchingSchemas);
            break;
        case "string":
            _validateStringNode(node, schema4, validationResult);
            break;
        case "number":
            _validateNumberNode(node, schema4, validationResult);
            break;
        case "property":
            return validate2(node.valueNode, schema4, schema4, validationResult, matchingSchemas, options);
    }
    _validateNode();
    matchingSchemas.add({ node, schema: schema4 });
    function _validateNode() {
        function matchesType(type) {
            return node.type === type || type === "integer" && node.type === "number" && node.isInteger;
        }
        if (Array.isArray(schema4.type)) {
            if (!schema4.type.some(matchesType)) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    severity: DiagnosticSeverity.Warning,
                    message: schema4.errorMessage || localize7("typeArrayMismatchWarning", "Incorrect type. Expected one of {0}.", schema4.type.join(", ")),
                    source: getSchemaSource(schema4, originalSchema),
                    schemaUri: getSchemaUri(schema4, originalSchema)
                });
            }
        }
        else if (schema4.type) {
            if (!matchesType(schema4.type)) {
                const schemaType = schema4.type === "object" ? getSchemaTypeName(schema4) : schema4.type;
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    severity: DiagnosticSeverity.Warning,
                    message: schema4.errorMessage || getWarningMessage(ProblemType.typeMismatchWarning, [schemaType]),
                    source: getSchemaSource(schema4, originalSchema),
                    schemaUri: getSchemaUri(schema4, originalSchema),
                    problemType: ProblemType.typeMismatchWarning,
                    problemArgs: [schemaType]
                });
            }
        }
        if (Array.isArray(schema4.allOf)) {
            for (const subSchemaRef of schema4.allOf) {
                validate2(node, asSchema2(subSchemaRef), schema4, validationResult, matchingSchemas, options);
            }
        }
        const notSchema = asSchema2(schema4.not);
        if (notSchema) {
            const subValidationResult = new ValidationResult2(isKubernetes);
            const subMatchingSchemas = matchingSchemas.newSub();
            validate2(node, notSchema, schema4, subValidationResult, subMatchingSchemas, options);
            if (!subValidationResult.hasProblems()) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    severity: DiagnosticSeverity.Warning,
                    message: localize7("notSchemaWarning", "Matches a schema that is not allowed."),
                    source: getSchemaSource(schema4, originalSchema),
                    schemaUri: getSchemaUri(schema4, originalSchema)
                });
            }
            for (const ms of subMatchingSchemas.schemas) {
                ms.inverted = !ms.inverted;
                matchingSchemas.add(ms);
            }
        }
        const testAlternatives = (alternatives, maxOneMatch) => {
            const matches = [];
            const subMatches = [];
            const noPropertyMatches = [];
            let bestMatch = null;
            for (const subSchemaRef of alternatives) {
                const subSchema = { ...asSchema2(subSchemaRef) };
                const subValidationResult = new ValidationResult2(isKubernetes);
                const subMatchingSchemas = matchingSchemas.newSub();
                validate2(node, subSchema, schema4, subValidationResult, subMatchingSchemas, options);
                if (!subValidationResult.hasProblems() || callFromAutoComplete) {
                    matches.push(subSchema);
                    subMatches.push(subSchema);
                    if (subValidationResult.propertiesMatches === 0) {
                        noPropertyMatches.push(subSchema);
                    }
                    if (subSchema.format) {
                        subMatches.pop();
                    }
                }
                if (!bestMatch) {
                    bestMatch = {
                        schema: subSchema,
                        validationResult: subValidationResult,
                        matchingSchemas: subMatchingSchemas
                    };
                }
                else if (isKubernetes) {
                    bestMatch = alternativeComparison(subValidationResult, bestMatch, subSchema, subMatchingSchemas);
                }
                else {
                    bestMatch = genericComparison(node, maxOneMatch, subValidationResult, bestMatch, subSchema, subMatchingSchemas);
                }
            }
            if (subMatches.length > 1 && (subMatches.length > 1 || noPropertyMatches.length === 0) && maxOneMatch) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: 1 },
                    severity: DiagnosticSeverity.Warning,
                    message: localize7("oneOfWarning", "Matches multiple schemas when only one must validate."),
                    source: getSchemaSource(schema4, originalSchema),
                    schemaUri: getSchemaUri(schema4, originalSchema)
                });
            }
            if (bestMatch !== null) {
                validationResult.merge(bestMatch.validationResult);
                validationResult.propertiesMatches += bestMatch.validationResult.propertiesMatches;
                validationResult.propertiesValueMatches += bestMatch.validationResult.propertiesValueMatches;
                matchingSchemas.merge(bestMatch.matchingSchemas);
            }
            return matches.length;
        };
        if (Array.isArray(schema4.anyOf)) {
            testAlternatives(schema4.anyOf, false);
        }
        if (Array.isArray(schema4.oneOf)) {
            testAlternatives(schema4.oneOf, true);
        }
        const testBranch = (schema5, originalSchema2) => {
            const subValidationResult = new ValidationResult2(isKubernetes);
            const subMatchingSchemas = matchingSchemas.newSub();
            validate2(node, asSchema2(schema5), originalSchema2, subValidationResult, subMatchingSchemas, options);
            validationResult.merge(subValidationResult);
            validationResult.propertiesMatches += subValidationResult.propertiesMatches;
            validationResult.propertiesValueMatches += subValidationResult.propertiesValueMatches;
            matchingSchemas.merge(subMatchingSchemas);
        };
        const testCondition = (ifSchema2, originalSchema2, thenSchema, elseSchema) => {
            const subSchema = asSchema2(ifSchema2);
            const subValidationResult = new ValidationResult2(isKubernetes);
            const subMatchingSchemas = matchingSchemas.newSub();
            validate2(node, subSchema, originalSchema2, subValidationResult, subMatchingSchemas, options);
            matchingSchemas.merge(subMatchingSchemas);
            const { filePatternAssociation } = subSchema;
            if (filePatternAssociation) {
                const association = new FilePatternAssociation2(filePatternAssociation);
                if (!association.matchesPattern(options.uri)) {
                    subValidationResult.problems.push({
                        location: { offset: node.offset, length: node.length },
                        severity: DiagnosticSeverity.Warning,
                        message: localize7("ifFilePatternAssociation", `filePatternAssociation '${filePatternAssociation}' does not match with doc uri '${options.uri}'.`),
                        source: getSchemaSource(schema4, originalSchema2),
                        schemaUri: getSchemaUri(schema4, originalSchema2)
                    });
                }
            }
            if (!subValidationResult.hasProblems()) {
                if (thenSchema) {
                    testBranch(thenSchema, originalSchema2);
                }
            }
            else if (elseSchema) {
                testBranch(elseSchema, originalSchema2);
            }
        };
        const ifSchema = asSchema2(schema4.if);
        if (ifSchema) {
            testCondition(ifSchema, schema4, asSchema2(schema4.then), asSchema2(schema4.else));
        }
        if (Array.isArray(schema4.enum)) {
            const val = getNodeValue3(node);
            let enumValueMatch = false;
            for (const e of schema4.enum) {
                if (equals2(val, e) || callFromAutoComplete && isString2(val) && isString2(e) && val && e.startsWith(val)) {
                    enumValueMatch = true;
                    break;
                }
            }
            validationResult.enumValues = schema4.enum;
            validationResult.enumValueMatch = enumValueMatch;
            if (!enumValueMatch) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    severity: DiagnosticSeverity.Warning,
                    code: ErrorCode.EnumValueMismatch,
                    message: schema4.errorMessage || localize7("enumWarning", "Value is not accepted. Valid values: {0}.", schema4.enum.map((v) => {
                        return JSON.stringify(v);
                    }).join(", ")),
                    source: getSchemaSource(schema4, originalSchema),
                    schemaUri: getSchemaUri(schema4, originalSchema)
                });
            }
        }
        if (isDefined2(schema4.const)) {
            const val = getNodeValue3(node);
            if (!equals2(val, schema4.const)) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    severity: DiagnosticSeverity.Warning,
                    code: ErrorCode.EnumValueMismatch,
                    problemType: ProblemType.constWarning,
                    message: schema4.errorMessage || getWarningMessage(ProblemType.constWarning, [JSON.stringify(schema4.const)]),
                    source: getSchemaSource(schema4, originalSchema),
                    schemaUri: getSchemaUri(schema4, originalSchema),
                    problemArgs: [JSON.stringify(schema4.const)]
                });
                validationResult.enumValueMatch = false;
            }
            else {
                validationResult.enumValueMatch = true;
            }
            validationResult.enumValues = [schema4.const];
        }
        if (schema4.deprecationMessage && node.parent) {
            validationResult.problems.push({
                location: { offset: node.parent.offset, length: node.parent.length },
                severity: DiagnosticSeverity.Warning,
                message: schema4.deprecationMessage,
                source: getSchemaSource(schema4, originalSchema),
                schemaUri: getSchemaUri(schema4, originalSchema)
            });
        }
    }
    function _validateNumberNode(node2, schema5, validationResult2) {
        const val = node2.value;
        if (isNumber2(schema5.multipleOf)) {
            if (val % schema5.multipleOf !== 0) {
                validationResult2.problems.push({
                    location: { offset: node2.offset, length: node2.length },
                    severity: DiagnosticSeverity.Warning,
                    message: localize7("multipleOfWarning", "Value is not divisible by {0}.", schema5.multipleOf),
                    source: getSchemaSource(schema5, originalSchema),
                    schemaUri: getSchemaUri(schema5, originalSchema)
                });
            }
        }
        function getExclusiveLimit(limit, exclusive) {
            if (isNumber2(exclusive)) {
                return exclusive;
            }
            if (isBoolean2(exclusive) && exclusive) {
                return limit;
            }
            return void 0;
        }
        function getLimit(limit, exclusive) {
            if (!isBoolean2(exclusive) || !exclusive) {
                return limit;
            }
            return void 0;
        }
        const exclusiveMinimum = getExclusiveLimit(schema5.minimum, schema5.exclusiveMinimum);
        if (isNumber2(exclusiveMinimum) && val <= exclusiveMinimum) {
            validationResult2.problems.push({
                location: { offset: node2.offset, length: node2.length },
                severity: DiagnosticSeverity.Warning,
                message: localize7("exclusiveMinimumWarning", "Value is below the exclusive minimum of {0}.", exclusiveMinimum),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        const exclusiveMaximum = getExclusiveLimit(schema5.maximum, schema5.exclusiveMaximum);
        if (isNumber2(exclusiveMaximum) && val >= exclusiveMaximum) {
            validationResult2.problems.push({
                location: { offset: node2.offset, length: node2.length },
                severity: DiagnosticSeverity.Warning,
                message: localize7("exclusiveMaximumWarning", "Value is above the exclusive maximum of {0}.", exclusiveMaximum),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        const minimum = getLimit(schema5.minimum, schema5.exclusiveMinimum);
        if (isNumber2(minimum) && val < minimum) {
            validationResult2.problems.push({
                location: { offset: node2.offset, length: node2.length },
                severity: DiagnosticSeverity.Warning,
                message: localize7("minimumWarning", "Value is below the minimum of {0}.", minimum),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        const maximum = getLimit(schema5.maximum, schema5.exclusiveMaximum);
        if (isNumber2(maximum) && val > maximum) {
            validationResult2.problems.push({
                location: { offset: node2.offset, length: node2.length },
                severity: DiagnosticSeverity.Warning,
                message: localize7("maximumWarning", "Value is above the maximum of {0}.", maximum),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
    }
    function _validateStringNode(node2, schema5, validationResult2) {
        if (isNumber2(schema5.minLength) && node2.value.length < schema5.minLength) {
            validationResult2.problems.push({
                location: { offset: node2.offset, length: node2.length },
                severity: DiagnosticSeverity.Warning,
                message: localize7("minLengthWarning", "String is shorter than the minimum length of {0}.", schema5.minLength),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        if (isNumber2(schema5.maxLength) && node2.value.length > schema5.maxLength) {
            validationResult2.problems.push({
                location: { offset: node2.offset, length: node2.length },
                severity: DiagnosticSeverity.Warning,
                message: localize7("maxLengthWarning", "String is longer than the maximum length of {0}.", schema5.maxLength),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        if (isString2(schema5.pattern)) {
            const regex = safeCreateUnicodeRegExp(schema5.pattern);
            if (!regex.test(node2.value)) {
                validationResult2.problems.push({
                    location: { offset: node2.offset, length: node2.length },
                    severity: DiagnosticSeverity.Warning,
                    message: schema5.patternErrorMessage || schema5.errorMessage || localize7("patternWarning", 'String does not match the pattern of "{0}".', schema5.pattern),
                    source: getSchemaSource(schema5, originalSchema),
                    schemaUri: getSchemaUri(schema5, originalSchema)
                });
            }
        }
        if (schema5.format) {
            switch (schema5.format) {
                case "uri":
                case "uri-reference":
                    {
                        let errorMessage;
                        if (!node2.value) {
                            errorMessage = localize7("uriEmpty", "URI expected.");
                        }
                        else {
                            try {
                                const uri = URI.parse(node2.value);
                                if (!uri.scheme && schema5.format === "uri") {
                                    errorMessage = localize7("uriSchemeMissing", "URI with a scheme is expected.");
                                }
                            }
                            catch (e) {
                                errorMessage = e.message;
                            }
                        }
                        if (errorMessage) {
                            validationResult2.problems.push({
                                location: { offset: node2.offset, length: node2.length },
                                severity: DiagnosticSeverity.Warning,
                                message: schema5.patternErrorMessage || schema5.errorMessage || localize7("uriFormatWarning", "String is not a URI: {0}", errorMessage),
                                source: getSchemaSource(schema5, originalSchema),
                                schemaUri: getSchemaUri(schema5, originalSchema)
                            });
                        }
                    }
                    break;
                case "color-hex":
                case "date-time":
                case "date":
                case "time":
                case "email":
                    {
                        const format3 = formats2[schema5.format];
                        if (!node2.value || !format3.pattern.exec(node2.value)) {
                            validationResult2.problems.push({
                                location: { offset: node2.offset, length: node2.length },
                                severity: DiagnosticSeverity.Warning,
                                message: schema5.patternErrorMessage || schema5.errorMessage || format3.errorMessage,
                                source: getSchemaSource(schema5, originalSchema),
                                schemaUri: getSchemaUri(schema5, originalSchema)
                            });
                        }
                    }
                    break;
                default:
            }
        }
    }
    function _validateArrayNode(node2, schema5, validationResult2, matchingSchemas2) {
        if (Array.isArray(schema5.items)) {
            const subSchemas = schema5.items;
            for (let index = 0; index < subSchemas.length; index++) {
                const subSchemaRef = subSchemas[index];
                const subSchema = asSchema2(subSchemaRef);
                const itemValidationResult = new ValidationResult2(isKubernetes);
                const item = node2.items[index];
                if (item) {
                    validate2(item, subSchema, schema5, itemValidationResult, matchingSchemas2, options);
                    validationResult2.mergePropertyMatch(itemValidationResult);
                    validationResult2.mergeEnumValues(itemValidationResult);
                }
                else if (node2.items.length >= subSchemas.length) {
                    validationResult2.propertiesValueMatches++;
                }
            }
            if (node2.items.length > subSchemas.length) {
                if (typeof schema5.additionalItems === "object") {
                    for (let i = subSchemas.length; i < node2.items.length; i++) {
                        const itemValidationResult = new ValidationResult2(isKubernetes);
                        validate2(node2.items[i], schema5.additionalItems, schema5, itemValidationResult, matchingSchemas2, options);
                        validationResult2.mergePropertyMatch(itemValidationResult);
                        validationResult2.mergeEnumValues(itemValidationResult);
                    }
                }
                else if (schema5.additionalItems === false) {
                    validationResult2.problems.push({
                        location: { offset: node2.offset, length: node2.length },
                        severity: DiagnosticSeverity.Warning,
                        message: localize7("additionalItemsWarning", "Array has too many items according to schema. Expected {0} or fewer.", subSchemas.length),
                        source: getSchemaSource(schema5, originalSchema),
                        schemaUri: getSchemaUri(schema5, originalSchema)
                    });
                }
            }
        }
        else {
            const itemSchema = asSchema2(schema5.items);
            if (itemSchema) {
                const itemValidationResult = new ValidationResult2(isKubernetes);
                node2.items.forEach((item) => {
                    if (itemSchema.oneOf && itemSchema.oneOf.length === 1) {
                        const subSchemaRef = itemSchema.oneOf[0];
                        const subSchema = { ...asSchema2(subSchemaRef) };
                        subSchema.title = schema5.title;
                        subSchema.closestTitle = schema5.closestTitle;
                        validate2(item, subSchema, schema5, itemValidationResult, matchingSchemas2, options);
                        validationResult2.mergePropertyMatch(itemValidationResult);
                        validationResult2.mergeEnumValues(itemValidationResult);
                    }
                    else {
                        validate2(item, itemSchema, schema5, itemValidationResult, matchingSchemas2, options);
                        validationResult2.mergePropertyMatch(itemValidationResult);
                        validationResult2.mergeEnumValues(itemValidationResult);
                    }
                });
            }
        }
        const containsSchema = asSchema2(schema5.contains);
        if (containsSchema) {
            const doesContain = node2.items.some((item) => {
                const itemValidationResult = new ValidationResult2(isKubernetes);
                validate2(item, containsSchema, schema5, itemValidationResult, NoOpSchemaCollector2.instance, options);
                return !itemValidationResult.hasProblems();
            });
            if (!doesContain) {
                validationResult2.problems.push({
                    location: { offset: node2.offset, length: node2.length },
                    severity: DiagnosticSeverity.Warning,
                    message: schema5.errorMessage || localize7("requiredItemMissingWarning", "Array does not contain required item."),
                    source: getSchemaSource(schema5, originalSchema),
                    schemaUri: getSchemaUri(schema5, originalSchema)
                });
            }
        }
        if (isNumber2(schema5.minItems) && node2.items.length < schema5.minItems) {
            validationResult2.problems.push({
                location: { offset: node2.offset, length: node2.length },
                severity: DiagnosticSeverity.Warning,
                message: localize7("minItemsWarning", "Array has too few items. Expected {0} or more.", schema5.minItems),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        if (isNumber2(schema5.maxItems) && node2.items.length > schema5.maxItems) {
            validationResult2.problems.push({
                location: { offset: node2.offset, length: node2.length },
                severity: DiagnosticSeverity.Warning,
                message: localize7("maxItemsWarning", "Array has too many items. Expected {0} or fewer.", schema5.maxItems),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        if (schema5.uniqueItems === true) {
            const values = getNodeValue3(node2);
            const duplicates = values.some((value, index) => {
                return index !== values.lastIndexOf(value);
            });
            if (duplicates) {
                validationResult2.problems.push({
                    location: { offset: node2.offset, length: node2.length },
                    severity: DiagnosticSeverity.Warning,
                    message: localize7("uniqueItemsWarning", "Array has duplicate items."),
                    source: getSchemaSource(schema5, originalSchema),
                    schemaUri: getSchemaUri(schema5, originalSchema)
                });
            }
        }
    }
    function _validateObjectNode(node2, schema5, validationResult2, matchingSchemas2) {
        var _a;
        const seenKeys = /* @__PURE__ */ Object.create(null);
        const unprocessedProperties = [];
        const unprocessedNodes = [...node2.properties];
        while (unprocessedNodes.length > 0) {
            const propertyNode = unprocessedNodes.pop();
            const key = propertyNode.keyNode.value;
            if (key === "<<" && propertyNode.valueNode) {
                switch (propertyNode.valueNode.type) {
                    case "object": {
                        unprocessedNodes.push(...propertyNode.valueNode["properties"]);
                        break;
                    }
                    case "array": {
                        propertyNode.valueNode["items"].forEach((sequenceNode) => {
                            if (sequenceNode && isIterable(sequenceNode["properties"])) {
                                unprocessedNodes.push(...sequenceNode["properties"]);
                            }
                        });
                        break;
                    }
                    default: {
                        break;
                    }
                }
            }
            else {
                seenKeys[key] = propertyNode.valueNode;
                unprocessedProperties.push(key);
            }
        }
        if (Array.isArray(schema5.required)) {
            for (const propertyName of schema5.required) {
                if (seenKeys[propertyName] === void 0) {
                    const keyNode = node2.parent && node2.parent.type === "property" && node2.parent.keyNode;
                    const location = keyNode ? { offset: keyNode.offset, length: keyNode.length } : { offset: node2.offset, length: 1 };
                    validationResult2.problems.push({
                        location,
                        severity: DiagnosticSeverity.Warning,
                        message: getWarningMessage(ProblemType.missingRequiredPropWarning, [propertyName]),
                        source: getSchemaSource(schema5, originalSchema),
                        schemaUri: getSchemaUri(schema5, originalSchema),
                        problemArgs: [propertyName],
                        problemType: ProblemType.missingRequiredPropWarning
                    });
                }
            }
        }
        const propertyProcessed = (prop) => {
            let index = unprocessedProperties.indexOf(prop);
            while (index >= 0) {
                unprocessedProperties.splice(index, 1);
                index = unprocessedProperties.indexOf(prop);
            }
        };
        if (schema5.properties) {
            for (const propertyName of Object.keys(schema5.properties)) {
                propertyProcessed(propertyName);
                const propertySchema = schema5.properties[propertyName];
                const child = seenKeys[propertyName];
                if (child) {
                    if (isBoolean2(propertySchema)) {
                        if (!propertySchema) {
                            const propertyNode = child.parent;
                            validationResult2.problems.push({
                                location: {
                                    offset: propertyNode.keyNode.offset,
                                    length: propertyNode.keyNode.length
                                },
                                severity: DiagnosticSeverity.Warning,
                                message: schema5.errorMessage || localize7("DisallowedExtraPropWarning", MSG_PROPERTY_NOT_ALLOWED, propertyName),
                                source: getSchemaSource(schema5, originalSchema),
                                schemaUri: getSchemaUri(schema5, originalSchema)
                            });
                        }
                        else {
                            validationResult2.propertiesMatches++;
                            validationResult2.propertiesValueMatches++;
                        }
                    }
                    else {
                        propertySchema.url = (_a = schema5.url) != null ? _a : originalSchema.url;
                        const propertyValidationResult = new ValidationResult2(isKubernetes);
                        validate2(child, propertySchema, schema5, propertyValidationResult, matchingSchemas2, options);
                        validationResult2.mergePropertyMatch(propertyValidationResult);
                        validationResult2.mergeEnumValues(propertyValidationResult);
                    }
                }
            }
        }
        if (schema5.patternProperties) {
            for (const propertyPattern of Object.keys(schema5.patternProperties)) {
                const regex = safeCreateUnicodeRegExp(propertyPattern);
                for (const propertyName of unprocessedProperties.slice(0)) {
                    if (regex.test(propertyName)) {
                        propertyProcessed(propertyName);
                        const child = seenKeys[propertyName];
                        if (child) {
                            const propertySchema = schema5.patternProperties[propertyPattern];
                            if (isBoolean2(propertySchema)) {
                                if (!propertySchema) {
                                    const propertyNode = child.parent;
                                    validationResult2.problems.push({
                                        location: {
                                            offset: propertyNode.keyNode.offset,
                                            length: propertyNode.keyNode.length
                                        },
                                        severity: DiagnosticSeverity.Warning,
                                        message: schema5.errorMessage || localize7("DisallowedExtraPropWarning", MSG_PROPERTY_NOT_ALLOWED, propertyName),
                                        source: getSchemaSource(schema5, originalSchema),
                                        schemaUri: getSchemaUri(schema5, originalSchema)
                                    });
                                }
                                else {
                                    validationResult2.propertiesMatches++;
                                    validationResult2.propertiesValueMatches++;
                                }
                            }
                            else {
                                const propertyValidationResult = new ValidationResult2(isKubernetes);
                                validate2(child, propertySchema, schema5, propertyValidationResult, matchingSchemas2, options);
                                validationResult2.mergePropertyMatch(propertyValidationResult);
                                validationResult2.mergeEnumValues(propertyValidationResult);
                            }
                        }
                    }
                }
            }
        }
        if (typeof schema5.additionalProperties === "object") {
            for (const propertyName of unprocessedProperties) {
                const child = seenKeys[propertyName];
                if (child) {
                    const propertyValidationResult = new ValidationResult2(isKubernetes);
                    validate2(child, schema5.additionalProperties, schema5, propertyValidationResult, matchingSchemas2, options);
                    validationResult2.mergePropertyMatch(propertyValidationResult);
                    validationResult2.mergeEnumValues(propertyValidationResult);
                }
            }
        }
        else if (schema5.additionalProperties === false || schema5.type === "object" && schema5.additionalProperties === void 0 && options.disableAdditionalProperties === true) {
            if (unprocessedProperties.length > 0) {
                const possibleProperties = schema5.properties && Object.keys(schema5.properties).filter((prop) => !seenKeys[prop]);
                for (const propertyName of unprocessedProperties) {
                    const child = seenKeys[propertyName];
                    if (child) {
                        let propertyNode = null;
                        if (child.type !== "property") {
                            propertyNode = child.parent;
                            if (propertyNode.type === "object") {
                                propertyNode = propertyNode.properties[0];
                            }
                        }
                        else {
                            propertyNode = child;
                        }
                        const problem = {
                            location: {
                                offset: propertyNode.keyNode.offset,
                                length: propertyNode.keyNode.length
                            },
                            severity: DiagnosticSeverity.Warning,
                            message: schema5.errorMessage || localize7("DisallowedExtraPropWarning", MSG_PROPERTY_NOT_ALLOWED, propertyName),
                            source: getSchemaSource(schema5, originalSchema),
                            schemaUri: getSchemaUri(schema5, originalSchema)
                        };
                        if (possibleProperties == null ? void 0 : possibleProperties.length) {
                            problem.data = { properties: possibleProperties };
                        }
                        validationResult2.problems.push(problem);
                    }
                }
            }
        }
        if (isNumber2(schema5.maxProperties)) {
            if (node2.properties.length > schema5.maxProperties) {
                validationResult2.problems.push({
                    location: { offset: node2.offset, length: node2.length },
                    severity: DiagnosticSeverity.Warning,
                    message: localize7("MaxPropWarning", "Object has more properties than limit of {0}.", schema5.maxProperties),
                    source: getSchemaSource(schema5, originalSchema),
                    schemaUri: getSchemaUri(schema5, originalSchema)
                });
            }
        }
        if (isNumber2(schema5.minProperties)) {
            if (node2.properties.length < schema5.minProperties) {
                validationResult2.problems.push({
                    location: { offset: node2.offset, length: node2.length },
                    severity: DiagnosticSeverity.Warning,
                    message: localize7("MinPropWarning", "Object has fewer properties than the required number of {0}", schema5.minProperties),
                    source: getSchemaSource(schema5, originalSchema),
                    schemaUri: getSchemaUri(schema5, originalSchema)
                });
            }
        }
        if (schema5.dependencies) {
            for (const key of Object.keys(schema5.dependencies)) {
                const prop = seenKeys[key];
                if (prop) {
                    const propertyDep = schema5.dependencies[key];
                    if (Array.isArray(propertyDep)) {
                        for (const requiredProp of propertyDep) {
                            if (!seenKeys[requiredProp]) {
                                validationResult2.problems.push({
                                    location: { offset: node2.offset, length: node2.length },
                                    severity: DiagnosticSeverity.Warning,
                                    message: localize7("RequiredDependentPropWarning", "Object is missing property {0} required by property {1}.", requiredProp, key),
                                    source: getSchemaSource(schema5, originalSchema),
                                    schemaUri: getSchemaUri(schema5, originalSchema)
                                });
                            }
                            else {
                                validationResult2.propertiesValueMatches++;
                            }
                        }
                    }
                    else {
                        const propertySchema = asSchema2(propertyDep);
                        if (propertySchema) {
                            const propertyValidationResult = new ValidationResult2(isKubernetes);
                            validate2(node2, propertySchema, schema5, propertyValidationResult, matchingSchemas2, options);
                            validationResult2.mergePropertyMatch(propertyValidationResult);
                            validationResult2.mergeEnumValues(propertyValidationResult);
                        }
                    }
                }
            }
        }
        const propertyNames = asSchema2(schema5.propertyNames);
        if (propertyNames) {
            for (const f2 of node2.properties) {
                const key = f2.keyNode;
                if (key) {
                    validate2(key, propertyNames, schema5, validationResult2, NoOpSchemaCollector2.instance, options);
                }
            }
        }
    }
    function alternativeComparison(subValidationResult, bestMatch, subSchema, subMatchingSchemas) {
        const compareResult = subValidationResult.compareKubernetes(bestMatch.validationResult);
        if (compareResult > 0) {
            bestMatch = {
                schema: subSchema,
                validationResult: subValidationResult,
                matchingSchemas: subMatchingSchemas
            };
        }
        else if (compareResult === 0) {
            bestMatch.matchingSchemas.merge(subMatchingSchemas);
            bestMatch.validationResult.mergeEnumValues(subValidationResult);
        }
        return bestMatch;
    }
    function genericComparison(node2, maxOneMatch, subValidationResult, bestMatch, subSchema, subMatchingSchemas) {
        if (!maxOneMatch && !subValidationResult.hasProblems() && (!bestMatch.validationResult.hasProblems() || callFromAutoComplete)) {
            bestMatch.matchingSchemas.merge(subMatchingSchemas);
            bestMatch.validationResult.propertiesMatches += subValidationResult.propertiesMatches;
            bestMatch.validationResult.propertiesValueMatches += subValidationResult.propertiesValueMatches;
        }
        else {
            const compareResult = subValidationResult.compareGeneric(bestMatch.validationResult);
            if (compareResult > 0 || compareResult === 0 && maxOneMatch && bestMatch.schema.type === "object" && node2.type !== "null" && node2.type !== bestMatch.schema.type) {
                bestMatch = {
                    schema: subSchema,
                    validationResult: subValidationResult,
                    matchingSchemas: subMatchingSchemas
                };
            }
            else if (compareResult === 0) {
                bestMatch.matchingSchemas.merge(subMatchingSchemas);
                bestMatch.validationResult.mergeEnumValues(subValidationResult);
                bestMatch.validationResult.mergeWarningGeneric(subValidationResult, [
                    ProblemType.missingRequiredPropWarning,
                    ProblemType.typeMismatchWarning,
                    ProblemType.constWarning
                ]);
            }
        }
        return bestMatch;
    }
}
function getSchemaSource(schema4, originalSchema) {
    var _a;
    if (schema4) {
        let label;
        if (schema4.title) {
            label = schema4.title;
        }
        else if (schema4.closestTitle) {
            label = schema4.closestTitle;
        }
        else if (originalSchema.closestTitle) {
            label = originalSchema.closestTitle;
        }
        else {
            const uriString = (_a = schema4.url) != null ? _a : originalSchema.url;
            if (uriString) {
                const url = URI.parse(uriString);
                if (url.scheme === "file") {
                    label = url.fsPath;
                }
                label = url.toString();
            }
        }
        if (label) {
            return `${YAML_SCHEMA_PREFIX}${label}`;
        }
    }
    return YAML_SOURCE;
}
function getSchemaUri(schema4, originalSchema) {
    var _a;
    const uriString = (_a = schema4.url) != null ? _a : originalSchema.url;
    return uriString ? [uriString] : [];
}
function getWarningMessage(problemType, args) {
    return localize7(problemType, ProblemTypeMessages[problemType], args.join(" | "));
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/parser/ast-converter.js
var maxRefCount = 1e3;
var refDepth = 0;
function convertAST(parent, node, doc, lineCounter) {
    if (!parent) {
        refDepth = 0;
    }
    if (!node) {
        return null;
    }
    if (isMap(node)) {
        return convertMap(node, parent, doc, lineCounter);
    }
    if (isPair(node)) {
        return convertPair(node, parent, doc, lineCounter);
    }
    if (isSeq(node)) {
        return convertSeq(node, parent, doc, lineCounter);
    }
    if (isScalar(node)) {
        return convertScalar(node, parent);
    }
    if (isAlias(node)) {
        if (refDepth > maxRefCount) {
            return;
        }
        return convertAlias(node, parent, doc, lineCounter);
    }
}
function convertMap(node, parent, doc, lineCounter) {
    let range;
    if (node.flow && !node.range) {
        range = collectFlowMapRange(node);
    }
    else {
        range = node.range;
    }
    const result = new ObjectASTNodeImpl2(parent, node, ...toFixedOffsetLength(range, lineCounter));
    for (const it of node.items) {
        if (isPair(it)) {
            result.properties.push(convertAST(result, it, doc, lineCounter));
        }
    }
    return result;
}
function convertPair(node, parent, doc, lineCounter) {
    const keyNode = node.key;
    const valueNode = node.value;
    const rangeStart = keyNode.range[0];
    let rangeEnd = keyNode.range[1];
    let nodeEnd = keyNode.range[2];
    if (valueNode) {
        rangeEnd = valueNode.range[1];
        nodeEnd = valueNode.range[2];
    }
    const result = new PropertyASTNodeImpl2(parent, node, ...toFixedOffsetLength([rangeStart, rangeEnd, nodeEnd], lineCounter));
    if (isAlias(keyNode)) {
        const keyAlias = new StringASTNodeImpl2(parent, keyNode, ...toOffsetLength(keyNode.range));
        keyAlias.value = keyNode.source;
        result.keyNode = keyAlias;
    }
    else {
        result.keyNode = convertAST(result, keyNode, doc, lineCounter);
    }
    result.valueNode = convertAST(result, valueNode, doc, lineCounter);
    return result;
}
function convertSeq(node, parent, doc, lineCounter) {
    const result = new ArrayASTNodeImpl2(parent, node, ...toOffsetLength(node.range));
    for (const it of node.items) {
        if (isNode(it)) {
            const convertedNode = convertAST(result, it, doc, lineCounter);
            if (convertedNode) {
                result.children.push(convertedNode);
            }
        }
    }
    return result;
}
function convertScalar(node, parent) {
    if (node.value === null) {
        return new NullASTNodeImpl2(parent, node, ...toOffsetLength(node.range));
    }
    switch (typeof node.value) {
        case "string": {
            const result = new StringASTNodeImpl2(parent, node, ...toOffsetLength(node.range));
            result.value = node.value;
            return result;
        }
        case "boolean":
            return new BooleanASTNodeImpl2(parent, node, node.value, ...toOffsetLength(node.range));
        case "number": {
            const result = new NumberASTNodeImpl2(parent, node, ...toOffsetLength(node.range));
            result.value = node.value;
            result.isInteger = Number.isInteger(result.value);
            return result;
        }
        default: {
            const result = new StringASTNodeImpl2(parent, node, ...toOffsetLength(node.range));
            result.value = node.source;
            return result;
        }
    }
}
function convertAlias(node, parent, doc, lineCounter) {
    refDepth++;
    const resolvedNode = node.resolve(doc);
    if (resolvedNode) {
        return convertAST(parent, resolvedNode, doc, lineCounter);
    }
    else {
        const resultNode = new StringASTNodeImpl2(parent, node, ...toOffsetLength(node.range));
        resultNode.value = node.source;
        return resultNode;
    }
}
function toOffsetLength(range) {
    return [range[0], range[1] - range[0]];
}
function toFixedOffsetLength(range, lineCounter) {
    const start = lineCounter.linePos(range[0]);
    const end = lineCounter.linePos(range[1]);
    const result = [range[0], range[1] - range[0]];
    if (start.line !== end.line && (lineCounter.lineStarts.length !== end.line || end.col === 1)) {
        result[1]--;
    }
    return result;
}
function collectFlowMapRange(node) {
    let start = Number.MAX_SAFE_INTEGER;
    let end = 0;
    for (const it of node.items) {
        if (isPair(it)) {
            if (isNode(it.key)) {
                if (it.key.range && it.key.range[0] <= start) {
                    start = it.key.range[0];
                }
            }
            if (isNode(it.value)) {
                if (it.value.range && it.value.range[2] >= end) {
                    end = it.value.range[2];
                }
            }
        }
    }
    return [start, end, end];
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/astUtils.js
function getParent(doc, nodeToFind) {
    let parentNode;
    visit(doc, (_, node, path5) => {
        if (node === nodeToFind) {
            parentNode = path5[path5.length - 1];
            return visit.BREAK;
        }
    });
    if (isDocument(parentNode)) {
        return void 0;
    }
    return parentNode;
}
function isMapContainsEmptyPair(map2) {
    if (map2.items.length > 1) {
        return false;
    }
    const pair = map2.items[0];
    return isScalar(pair.key) && isScalar(pair.value) && pair.key.value === "" && !pair.value.value;
}
function indexOf(seq2, item) {
    for (const [i, obj] of seq2.items.entries()) {
        if (item === obj) {
            return i;
        }
    }
    return void 0;
}
function isInComment(tokens, offset) {
    let inComment = false;
    for (const token of tokens) {
        if (token.type === "document") {
            _visit2([], token, (item) => {
                var _a;
                if (isCollectionItem(item) && ((_a = item.value) == null ? void 0 : _a.type) === "comment") {
                    if (token.offset <= offset && item.value.source.length + item.value.offset >= offset) {
                        inComment = true;
                        return visit.BREAK;
                    }
                }
                else if (item.type === "comment" && item.offset <= offset && item.offset + item.source.length >= offset) {
                    inComment = true;
                    return visit.BREAK;
                }
            });
        }
        else if (token.type === "comment") {
            if (token.offset <= offset && token.source.length + token.offset >= offset) {
                return true;
            }
        }
        if (inComment) {
            break;
        }
    }
    return inComment;
}
function isCollectionItem(token) {
    return token["start"] !== void 0;
}
function _visit2(path5, item, visitor) {
    let ctrl = visitor(item, path5);
    if (typeof ctrl === "symbol")
        return ctrl;
    for (const field of ["key", "value"]) {
        const token2 = item[field];
        if (token2 && "items" in token2) {
            for (let i = 0; i < token2.items.length; ++i) {
                const ci = _visit2(Object.freeze(path5.concat([[field, i]])), token2.items[i], visitor);
                if (typeof ci === "number")
                    i = ci - 1;
                else if (ci === visit.BREAK)
                    return visit.BREAK;
                else if (ci === visit.REMOVE) {
                    token2.items.splice(i, 1);
                    i -= 1;
                }
            }
            if (typeof ctrl === "function" && field === "key")
                ctrl = ctrl(item, path5);
        }
    }
    const token = item["sep"];
    if (token) {
        for (let i = 0; i < token.length; ++i) {
            const ci = _visit2(Object.freeze(path5), token[i], visitor);
            if (typeof ci === "number")
                i = ci - 1;
            else if (ci === visit.BREAK)
                return visit.BREAK;
            else if (ci === visit.REMOVE) {
                token.items.splice(i, 1);
                i -= 1;
            }
        }
    }
    return typeof ctrl === "function" ? ctrl(item, path5) : ctrl;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/parser/yaml-documents.js
var SingleYAMLDocument = class extends JSONDocument2 {
    constructor(lineCounter) {
        super(null, []);
        this.lineCounter = lineCounter;
    }
    /**
     * Create a deep copy of this document
     */
    clone() {
        const copy = new SingleYAMLDocument(this.lineCounter);
        copy.isKubernetes = this.isKubernetes;
        copy.disableAdditionalProperties = this.disableAdditionalProperties;
        copy.uri = this.uri;
        copy.currentDocIndex = this.currentDocIndex;
        copy._lineComments = this.lineComments.slice();
        copy.internalDocument = this._internalDocument.clone();
        return copy;
    }
    collectLineComments() {
        this._lineComments = [];
        if (this._internalDocument.commentBefore) {
            const comments = this._internalDocument.commentBefore.split("\n");
            comments.forEach((comment) => this._lineComments.push(`#${comment}`));
        }
        visit(this.internalDocument, (_key, node) => {
            if (node == null ? void 0 : node.commentBefore) {
                const comments = node == null ? void 0 : node.commentBefore.split("\n");
                comments.forEach((comment) => this._lineComments.push(`#${comment}`));
            }
            if (node == null ? void 0 : node.comment) {
                this._lineComments.push(`#${node.comment}`);
            }
        });
        if (this._internalDocument.comment) {
            this._lineComments.push(`#${this._internalDocument.comment}`);
        }
    }
    set internalDocument(document) {
        this._internalDocument = document;
        this.root = convertAST(null, this._internalDocument.contents, this._internalDocument, this.lineCounter);
    }
    get internalDocument() {
        return this._internalDocument;
    }
    get lineComments() {
        if (!this._lineComments) {
            this.collectLineComments();
        }
        return this._lineComments;
    }
    set lineComments(val) {
        this._lineComments = val;
    }
    get errors() {
        return this.internalDocument.errors.map(YAMLErrorToYamlDocDiagnostics);
    }
    get warnings() {
        return this.internalDocument.warnings.map(YAMLErrorToYamlDocDiagnostics);
    }
    getNodeFromPosition(positionOffset, textBuffer, configuredIndentation) {
        const position = textBuffer.getPosition(positionOffset);
        const lineContent = textBuffer.getLineContent(position.line);
        if (lineContent.trim().length === 0) {
            return [this.findClosestNode(positionOffset, textBuffer, configuredIndentation), true];
        }
        const textAfterPosition = lineContent.substring(position.character);
        const spacesAfterPositionMatch = textAfterPosition.match(/^([ ]+)\n?$/);
        const areOnlySpacesAfterPosition = !!spacesAfterPositionMatch;
        const countOfSpacesAfterPosition = spacesAfterPositionMatch == null ? void 0 : spacesAfterPositionMatch[1].length;
        let closestNode;
        visit(this.internalDocument, (key, node) => {
            if (!node) {
                return;
            }
            const range = node.range;
            if (!range) {
                return;
            }
            const isNullNodeOnTheLine = () => areOnlySpacesAfterPosition && positionOffset + countOfSpacesAfterPosition === range[2] && isScalar(node) && node.value === null;
            if (range[0] <= positionOffset && range[1] >= positionOffset || isNullNodeOnTheLine()) {
                closestNode = node;
            }
            else {
                return visit.SKIP;
            }
        });
        return [closestNode, false];
    }
    findClosestNode(offset, textBuffer, configuredIndentation) {
        let offsetDiff = this.internalDocument.range[2];
        let maxOffset = this.internalDocument.range[0];
        let closestNode;
        visit(this.internalDocument, (key, node) => {
            if (!node) {
                return;
            }
            const range = node.range;
            if (!range) {
                return;
            }
            const diff = range[1] - offset;
            if (maxOffset <= range[0] && diff <= 0 && Math.abs(diff) <= offsetDiff) {
                offsetDiff = Math.abs(diff);
                maxOffset = range[0];
                closestNode = node;
            }
        });
        const position = textBuffer.getPosition(offset);
        const lineContent = textBuffer.getLineContent(position.line);
        const indentation = getIndentation(lineContent, position.character);
        if (isScalar(closestNode) && closestNode.value === null) {
            return closestNode;
        }
        if (indentation === position.character) {
            closestNode = this.getProperParentByIndentation(indentation, closestNode, textBuffer, "", configuredIndentation);
        }
        return closestNode;
    }
    getProperParentByIndentation(indentation, node, textBuffer, currentLine, configuredIndentation, rootParent) {
        if (!node) {
            return this.internalDocument.contents;
        }
        configuredIndentation = !configuredIndentation ? 2 : configuredIndentation;
        if (isNode(node) && node.range) {
            const position = textBuffer.getPosition(node.range[0]);
            const lineContent = textBuffer.getLineContent(position.line);
            currentLine = currentLine === "" ? lineContent.trim() : currentLine;
            if (currentLine.startsWith("-") && indentation === configuredIndentation && currentLine === lineContent.trim()) {
                position.character += indentation;
            }
            if (position.character > indentation && position.character > 0) {
                const parent = this.getParent(node);
                if (parent) {
                    return this.getProperParentByIndentation(indentation, parent, textBuffer, currentLine, configuredIndentation, rootParent);
                }
            }
            else if (position.character < indentation) {
                const parent = this.getParent(node);
                if (isPair(parent) && isNode(parent.value)) {
                    return parent.value;
                }
                else if (isPair(rootParent) && isNode(rootParent.value)) {
                    return rootParent.value;
                }
            }
            else {
                return node;
            }
        }
        else if (isPair(node)) {
            rootParent = node;
            const parent = this.getParent(node);
            return this.getProperParentByIndentation(indentation, parent, textBuffer, currentLine, configuredIndentation, rootParent);
        }
        return node;
    }
    getParent(node) {
        return getParent(this.internalDocument, node);
    }
};
var YAMLDocument = class {
    constructor(documents, tokens) {
        this.documents = documents;
        this.tokens = tokens;
        this.errors = [];
        this.warnings = [];
    }
};
var YamlDocuments = class {
    constructor() {
        this.cache = /* @__PURE__ */ new Map();
    }
    /**
     * Get cached YAMLDocument
     * @param document TextDocument to parse
     * @param parserOptions YAML parserOptions
     * @param addRootObject if true and document is empty add empty object {} to force schema usage
     * @returns the YAMLDocument
     */
    getYamlDocument(document, parserOptions, addRootObject = false) {
        this.ensureCache(document, parserOptions != null ? parserOptions : defaultOptions, addRootObject);
        return this.cache.get(document.uri).document;
    }
    /**
     * For test purpose only!
     */
    clear() {
        this.cache.clear();
    }
    ensureCache(document, parserOptions, addRootObject) {
        const key = document.uri;
        if (!this.cache.has(key)) {
            this.cache.set(key, { version: -1, document: new YAMLDocument([], []), parserOptions: defaultOptions });
        }
        const cacheEntry = this.cache.get(key);
        if (cacheEntry.version !== document.version || parserOptions.customTags && !isArrayEqual(cacheEntry.parserOptions.customTags, parserOptions.customTags)) {
            let text = document.getText();
            if (addRootObject && !/\S/.test(text)) {
                text = `{${text}}`;
            }
            const doc = parse4(text, parserOptions, document);
            cacheEntry.document = doc;
            cacheEntry.version = document.version;
            cacheEntry.parserOptions = parserOptions;
        }
    }
};
var yamlDocumentsCache = new YamlDocuments();
function YAMLErrorToYamlDocDiagnostics(error) {
    return {
        message: error.message,
        location: {
            start: error.pos[0],
            end: error.pos[1],
            toLineEnd: true
        },
        severity: 1,
        code: ErrorCode.Undefined
    };
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/parser/custom-tag-provider.js
var CommonTagImpl = class {
    constructor(tag, type) {
        this.tag = tag;
        this.type = type;
    }
    get collection() {
        if (this.type === "mapping") {
            return "map";
        }
        if (this.type === "sequence") {
            return "seq";
        }
        return void 0;
    }
    resolve(value) {
        if (isMap(value) && this.type === "mapping") {
            return value;
        }
        if (isSeq(value) && this.type === "sequence") {
            return value;
        }
        if (typeof value === "string" && this.type === "scalar") {
            return value;
        }
    }
};
var IncludeTag = class {
    constructor() {
        this.tag = "!include";
        this.type = "scalar";
    }
    resolve(value, onError) {
        if (value && value.length > 0 && value.trim()) {
            return value;
        }
        onError("!include without value");
    }
};
function getCustomTags(customTags) {
    const tags = [];
    const filteredTags = filterInvalidCustomTags(customTags);
    for (const tag of filteredTags) {
        const typeInfo = tag.split(" ");
        const tagName = typeInfo[0];
        const tagType = typeInfo[1] && typeInfo[1].toLowerCase() || "scalar";
        tags.push(new CommonTagImpl(tagName, tagType));
    }
    tags.push(new IncludeTag());
    return tags;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/textBuffer.js
var TextBuffer = class {
    constructor(doc) {
        this.doc = doc;
    }
    getLineCount() {
        return this.doc.lineCount;
    }
    getLineLength(lineNumber) {
        const lineOffsets = this.doc.getLineOffsets();
        if (lineNumber >= lineOffsets.length) {
            return this.doc.getText().length;
        }
        else if (lineNumber < 0) {
            return 0;
        }
        const nextLineOffset = lineNumber + 1 < lineOffsets.length ? lineOffsets[lineNumber + 1] : this.doc.getText().length;
        return nextLineOffset - lineOffsets[lineNumber];
    }
    getLineContent(lineNumber) {
        const lineOffsets = this.doc.getLineOffsets();
        if (lineNumber >= lineOffsets.length) {
            return this.doc.getText();
        }
        else if (lineNumber < 0) {
            return "";
        }
        const nextLineOffset = lineNumber + 1 < lineOffsets.length ? lineOffsets[lineNumber + 1] : this.doc.getText().length;
        return this.doc.getText().substring(lineOffsets[lineNumber], nextLineOffset);
    }
    getLineCharCode(lineNumber, index) {
        return this.doc.getText(Range.create(lineNumber - 1, index, lineNumber - 1, index + 1)).charCodeAt(0);
    }
    getText(range) {
        return this.doc.getText(range);
    }
    getPosition(offest) {
        return this.doc.positionAt(offest);
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/parser/yamlParser07.js
var defaultOptions = {
    customTags: [],
    yamlVersion: "1.2"
};
function parse4(text, parserOptions = defaultOptions, document) {
    var _a;
    const options = {
        strict: false,
        customTags: getCustomTags(parserOptions.customTags),
        version: (_a = parserOptions.yamlVersion) != null ? _a : defaultOptions.yamlVersion,
        keepSourceTokens: true
    };
    const composer = new Composer(options);
    const lineCounter = new LineCounter();
    let isLastLineEmpty = false;
    if (document) {
        const textBuffer = new TextBuffer(document);
        const position = textBuffer.getPosition(text.length);
        const lineContent = textBuffer.getLineContent(position.line);
        isLastLineEmpty = lineContent.trim().length === 0;
    }
    const parser2 = isLastLineEmpty ? new Parser() : new Parser(lineCounter.addNewLine);
    const tokens = parser2.parse(text);
    const tokensArr = Array.from(tokens);
    const docs = composer.compose(tokensArr, true, text.length);
    const yamlDocs = Array.from(docs, (doc) => parsedDocToSingleYAMLDocument(doc, lineCounter));
    return new YAMLDocument(yamlDocs, tokensArr);
}
function parsedDocToSingleYAMLDocument(parsedDoc, lineCounter) {
    const syd = new SingleYAMLDocument(lineCounter);
    syd.internalDocument = parsedDoc;
    return syd;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/modelineUtil.js
function getSchemaFromModeline(doc) {
    if (doc instanceof SingleYAMLDocument) {
        const yamlLanguageServerModeline = doc.lineComments.find((lineComment2) => {
            return isModeline(lineComment2);
        });
        if (yamlLanguageServerModeline != void 0) {
            const schemaMatchs = yamlLanguageServerModeline.match(/\$schema=\S+/g);
            if (schemaMatchs !== null && schemaMatchs.length >= 1) {
                if (schemaMatchs.length >= 2) {
                    console.log("Several $schema attributes have been found on the yaml-language-server modeline. The first one will be picked.");
                }
                return schemaMatchs[0].substring("$schema=".length);
            }
        }
    }
    return void 0;
}
function isModeline(lineText) {
    const matchModeline = lineText.match(/^#\s+yaml-language-server\s*:/g);
    return matchModeline !== null && matchModeline.length === 1;
}
// src/fillers/ajv.ts
var AJVStub = class {
    compile() {
        return () => true;
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlSchemaService.js
var localize8 = loadMessageBundle();
var ajv = new AJVStub();
var jsonSchema07 = require_json_schema_draft_07();
var schema07Validator = ajv.compile(jsonSchema07);
var MODIFICATION_ACTIONS;
(function (MODIFICATION_ACTIONS2) {
    MODIFICATION_ACTIONS2[MODIFICATION_ACTIONS2["delete"] = 0] = "delete";
    MODIFICATION_ACTIONS2[MODIFICATION_ACTIONS2["add"] = 1] = "add";
    MODIFICATION_ACTIONS2[MODIFICATION_ACTIONS2["deleteAll"] = 2] = "deleteAll";
})(MODIFICATION_ACTIONS || (MODIFICATION_ACTIONS = {}));
var FilePatternAssociation2 = class {
    constructor(pattern) {
        try {
            this.patternRegExp = new RegExp(convertSimple2RegExpPattern(pattern) + "$");
        }
        catch (e) {
            this.patternRegExp = null;
        }
        this.schemas = [];
    }
    addSchema(id) {
        this.schemas.push(id);
    }
    matchesPattern(fileName) {
        return this.patternRegExp && this.patternRegExp.test(fileName);
    }
    getSchemas() {
        return this.schemas;
    }
};
var YAMLSchemaService = class extends JSONSchemaService {
    constructor(requestService, contextService, promiseConstructor) {
        super(requestService, contextService, promiseConstructor);
        this.schemaUriToNameAndDescription = /* @__PURE__ */ new Map();
        this.customSchemaProvider = void 0;
        this.requestService = requestService;
        this.schemaPriorityMapping = /* @__PURE__ */ new Map();
    }
    registerCustomSchemaProvider(customSchemaProvider) {
        this.customSchemaProvider = customSchemaProvider;
    }
    getAllSchemas() {
        const result = [];
        const schemaUris = /* @__PURE__ */ new Set();
        for (const filePattern of this.filePatternAssociations) {
            const schemaUri = filePattern.uris[0];
            if (schemaUris.has(schemaUri)) {
                continue;
            }
            schemaUris.add(schemaUri);
            const schemaHandle = {
                uri: schemaUri,
                fromStore: false,
                usedForCurrentFile: false
            };
            if (this.schemaUriToNameAndDescription.has(schemaUri)) {
                const { name, description, versions } = this.schemaUriToNameAndDescription.get(schemaUri);
                schemaHandle.name = name;
                schemaHandle.description = description;
                schemaHandle.fromStore = true;
                schemaHandle.versions = versions;
            }
            result.push(schemaHandle);
        }
        return result;
    }
    async resolveSchemaContent(schemaToResolve, schemaURL, dependencies) {
        const resolveErrors = schemaToResolve.errors.slice(0);
        let schema4 = schemaToResolve.schema;
        const contextService = this.contextService;
        if (!schema07Validator(schema4)) {
            const errs = [];
            for (const err of schema07Validator.errors) {
                errs.push(`${err.instancePath} : ${err.message}`);
            }
            resolveErrors.push(`Schema '${getSchemaTitle(schemaToResolve.schema, schemaURL)}' is not valid:
${errs.join("\n")}`);
        }
        const findSection = (schema5, path5) => {
            if (!path5) {
                return schema5;
            }
            let current = schema5;
            if (path5[0] === "/") {
                path5 = path5.substr(1);
            }
            path5.split("/").some((part) => {
                current = current[part];
                return !current;
            });
            return current;
        };
        const merge = (target, sourceRoot, sourceURI, path5) => {
            const section = findSection(sourceRoot, path5);
            if (section) {
                for (const key in section) {
                    if (Object.prototype.hasOwnProperty.call(section, key) && !Object.prototype.hasOwnProperty.call(target, key)) {
                        target[key] = section[key];
                    }
                }
            }
            else {
                resolveErrors.push(localize8("json.schema.invalidref", "$ref '{0}' in '{1}' can not be resolved.", path5, sourceURI));
            }
        };
        const resolveExternalLink = (node, uri, linkPath, parentSchemaURL, parentSchemaDependencies) => {
            if (contextService && !/^\w+:\/\/.*/.test(uri)) {
                uri = contextService.resolveRelativePath(uri, parentSchemaURL);
            }
            uri = this.normalizeId(uri);
            const referencedHandle = this.getOrAddSchemaHandle(uri);
            return referencedHandle.getUnresolvedSchema().then((unresolvedSchema) => {
                parentSchemaDependencies[uri] = true;
                if (unresolvedSchema.errors.length) {
                    const loc = linkPath ? uri + "#" + linkPath : uri;
                    resolveErrors.push(localize8("json.schema.problemloadingref", "Problems loading reference '{0}': {1}", loc, unresolvedSchema.errors[0]));
                }
                merge(node, unresolvedSchema.schema, uri, linkPath);
                node.url = uri;
                return resolveRefs(node, unresolvedSchema.schema, uri, referencedHandle.dependencies);
            });
        };
        const resolveRefs = async (node, parentSchema, parentSchemaURL, parentSchemaDependencies) => {
            if (!node || typeof node !== "object") {
                return null;
            }
            const toWalk = [node];
            const seen = [];
            const openPromises = [];
            const collectEntries = (...entries) => {
                for (const entry of entries) {
                    if (typeof entry === "object") {
                        toWalk.push(entry);
                    }
                }
            };
            const collectMapEntries = (...maps) => {
                for (const map2 of maps) {
                    if (typeof map2 === "object") {
                        for (const key in map2) {
                            const entry = map2[key];
                            if (typeof entry === "object") {
                                toWalk.push(entry);
                            }
                        }
                    }
                }
            };
            const collectArrayEntries = (...arrays) => {
                for (const array of arrays) {
                    if (Array.isArray(array)) {
                        for (const entry of array) {
                            if (typeof entry === "object") {
                                toWalk.push(entry);
                            }
                        }
                    }
                }
            };
            const handleRef = (next) => {
                const seenRefs = [];
                while (next.$ref) {
                    const ref = next.$ref;
                    const segments = ref.split("#", 2);
                    next._$ref = next.$ref;
                    delete next.$ref;
                    if (segments[0].length > 0) {
                        openPromises.push(resolveExternalLink(next, segments[0], segments[1], parentSchemaURL, parentSchemaDependencies));
                        return;
                    }
                    else {
                        if (seenRefs.indexOf(ref) === -1) {
                            merge(next, parentSchema, parentSchemaURL, segments[1]);
                            seenRefs.push(ref);
                        }
                    }
                }
                collectEntries(next.items, next.additionalItems, next.additionalProperties, next.not, next.contains, next.propertyNames, next.if, next.then, next.else);
                collectMapEntries(next.definitions, next.properties, next.patternProperties, next.dependencies);
                collectArrayEntries(next.anyOf, next.allOf, next.oneOf, next.items, next.schemaSequence);
            };
            if (parentSchemaURL.indexOf("#") > 0) {
                const segments = parentSchemaURL.split("#", 2);
                if (segments[0].length > 0 && segments[1].length > 0) {
                    const newSchema = {};
                    await resolveExternalLink(newSchema, segments[0], segments[1], parentSchemaURL, parentSchemaDependencies);
                    for (const key in schema4) {
                        if (key === "required") {
                            continue;
                        }
                        if (Object.prototype.hasOwnProperty.call(schema4, key) && !Object.prototype.hasOwnProperty.call(newSchema, key)) {
                            newSchema[key] = schema4[key];
                        }
                    }
                    schema4 = newSchema;
                }
            }
            while (toWalk.length) {
                const next = toWalk.pop();
                if (seen.indexOf(next) >= 0) {
                    continue;
                }
                seen.push(next);
                handleRef(next);
            }
            return Promise.all(openPromises);
        };
        await resolveRefs(schema4, schema4, schemaURL, dependencies);
        return new ResolvedSchema(schema4, resolveErrors);
    }
    getSchemaForResource(resource, doc) {
        const resolveModelineSchema = () => {
            let schemaFromModeline = getSchemaFromModeline(doc);
            if (schemaFromModeline !== void 0) {
                if (!schemaFromModeline.startsWith("file:") && !schemaFromModeline.startsWith("http")) {
                    let appendix = "";
                    if (schemaFromModeline.indexOf("#") > 0) {
                        const segments = schemaFromModeline.split("#", 2);
                        schemaFromModeline = segments[0];
                        appendix = segments[1];
                    }
                    if (!path_browserify.isAbsolute(schemaFromModeline)) {
                        const resUri = URI.parse(resource);
                        schemaFromModeline = URI.file(path_browserify.resolve(path_browserify.parse(resUri.fsPath).dir, schemaFromModeline)).toString();
                    }
                    else {
                        schemaFromModeline = URI.file(schemaFromModeline).toString();
                    }
                    if (appendix.length > 0) {
                        schemaFromModeline += "#" + appendix;
                    }
                }
                return schemaFromModeline;
            }
        };
        const resolveSchemaForResource = (schemas2) => {
            const schemaHandle = super.createCombinedSchema(resource, schemas2);
            return schemaHandle.getResolvedSchema().then((schema4) => {
                if (schema4.schema && typeof schema4.schema === "object") {
                    schema4.schema.url = schemaHandle.url;
                }
                if (schema4.schema && schema4.schema.schemaSequence && schema4.schema.schemaSequence[doc.currentDocIndex]) {
                    return new ResolvedSchema(schema4.schema.schemaSequence[doc.currentDocIndex]);
                }
                return schema4;
            });
        };
        const resolveSchema = () => {
            const seen = /* @__PURE__ */ Object.create(null);
            const schemas2 = [];
            for (const entry of this.filePatternAssociations) {
                if (entry.matchesPattern(resource)) {
                    for (const schemaId of entry.getURIs()) {
                        if (!seen[schemaId]) {
                            schemas2.push(schemaId);
                            seen[schemaId] = true;
                        }
                    }
                }
            }
            const normalizedResourceID = this.normalizeId(resource);
            if (this.schemasById[normalizedResourceID]) {
                schemas2.push(normalizedResourceID);
            }
            if (schemas2.length > 0) {
                const highestPrioSchemas = this.highestPrioritySchemas(schemas2);
                return resolveSchemaForResource(highestPrioSchemas);
            }
            return Promise.resolve(null);
        };
        const modelineSchema = resolveModelineSchema();
        if (modelineSchema) {
            return resolveSchemaForResource([modelineSchema]);
        }
        if (this.customSchemaProvider) {
            return this.customSchemaProvider(resource).then((schemaUri) => {
                if (Array.isArray(schemaUri)) {
                    if (schemaUri.length === 0) {
                        return resolveSchema();
                    }
                    return Promise.all(schemaUri.map((schemaUri2) => {
                        return this.resolveCustomSchema(schemaUri2, doc);
                    })).then((schemas2) => {
                        return {
                            errors: [],
                            schema: {
                                anyOf: schemas2.map((schemaObj) => {
                                    return schemaObj.schema;
                                })
                            }
                        };
                    }, () => {
                        return resolveSchema();
                    });
                }
                if (!schemaUri) {
                    return resolveSchema();
                }
                return this.resolveCustomSchema(schemaUri, doc);
            }).then((schema4) => {
                return schema4;
            }, () => {
                return resolveSchema();
            });
        }
        else {
            return resolveSchema();
        }
    }
    // Set the priority of a schema in the schema service
    addSchemaPriority(uri, priority) {
        let currSchemaArray = this.schemaPriorityMapping.get(uri);
        if (currSchemaArray) {
            currSchemaArray = currSchemaArray.add(priority);
            this.schemaPriorityMapping.set(uri, currSchemaArray);
        }
        else {
            this.schemaPriorityMapping.set(uri, ( /* @__PURE__ */new Set()).add(priority));
        }
    }
    /**
     * Search through all the schemas and find the ones with the highest priority
     */
    highestPrioritySchemas(schemas2) {
        let highestPrio = 0;
        const priorityMapping = /* @__PURE__ */ new Map();
        schemas2.forEach((schema4) => {
            const priority = this.schemaPriorityMapping.get(schema4) || [0];
            priority.forEach((prio) => {
                if (prio > highestPrio) {
                    highestPrio = prio;
                }
                let currPriorityArray = priorityMapping.get(prio);
                if (currPriorityArray) {
                    currPriorityArray = currPriorityArray.concat(schema4);
                    priorityMapping.set(prio, currPriorityArray);
                }
                else {
                    priorityMapping.set(prio, [schema4]);
                }
            });
        });
        return priorityMapping.get(highestPrio) || [];
    }
    async resolveCustomSchema(schemaUri, doc) {
        const unresolvedSchema = await this.loadSchema(schemaUri);
        const schema4 = await this.resolveSchemaContent(unresolvedSchema, schemaUri, []);
        if (schema4.schema) {
            schema4.schema.url = schemaUri;
        }
        if (schema4.schema && schema4.schema.schemaSequence && schema4.schema.schemaSequence[doc.currentDocIndex]) {
            return new ResolvedSchema(schema4.schema.schemaSequence[doc.currentDocIndex]);
        }
        return schema4;
    }
    /**
     * Save a schema with schema ID and schema content.
     * Overrides previous schemas set for that schema ID.
     */
    async saveSchema(schemaId, schemaContent) {
        const id = this.normalizeId(schemaId);
        this.getOrAddSchemaHandle(id, schemaContent);
        this.schemaPriorityMapping.set(id, ( /* @__PURE__ */new Set()).add(SchemaPriority.Settings));
        return Promise.resolve(void 0);
    }
    /**
     * Delete schemas on specific path
     */
    async deleteSchemas(deletions) {
        deletions.schemas.forEach((s) => {
            this.deleteSchema(s);
        });
        return Promise.resolve(void 0);
    }
    /**
     * Delete a schema with schema ID.
     */
    async deleteSchema(schemaId) {
        const id = this.normalizeId(schemaId);
        if (this.schemasById[id]) {
            delete this.schemasById[id];
        }
        this.schemaPriorityMapping.delete(id);
        return Promise.resolve(void 0);
    }
    /**
     * Add content to a specified schema at a specified path
     */
    async addContent(additions) {
        const schema4 = await this.getResolvedSchema(additions.schema);
        if (schema4) {
            const resolvedSchemaLocation = this.resolveJSONSchemaToSection(schema4.schema, additions.path);
            if (typeof resolvedSchemaLocation === "object") {
                resolvedSchemaLocation[additions.key] = additions.content;
            }
            await this.saveSchema(additions.schema, schema4.schema);
        }
    }
    /**
     * Delete content in a specified schema at a specified path
     */
    async deleteContent(deletions) {
        const schema4 = await this.getResolvedSchema(deletions.schema);
        if (schema4) {
            const resolvedSchemaLocation = this.resolveJSONSchemaToSection(schema4.schema, deletions.path);
            if (typeof resolvedSchemaLocation === "object") {
                delete resolvedSchemaLocation[deletions.key];
            }
            await this.saveSchema(deletions.schema, schema4.schema);
        }
    }
    /**
     * Take a JSON Schema and the path that you would like to get to
     * @returns the JSON Schema resolved at that specific path
     */
    resolveJSONSchemaToSection(schema4, paths) {
        const splitPathway = paths.split("/");
        let resolvedSchemaLocation = schema4;
        for (const path5 of splitPathway) {
            if (path5 === "") {
                continue;
            }
            this.resolveNext(resolvedSchemaLocation, path5);
            resolvedSchemaLocation = resolvedSchemaLocation[path5];
        }
        return resolvedSchemaLocation;
    }
    /**
     * Resolve the next Object if they have compatible types
     * @param object a location in the JSON Schema
     * @param token the next token that you want to search for
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    resolveNext(object, token) {
        if (Array.isArray(object) && isNaN(token)) {
            throw new Error("Expected a number after the array object");
        }
        else if (typeof object === "object" && typeof token !== "string") {
            throw new Error("Expected a string after the object");
        }
    }
    /**
     * Everything below here is needed because we're importing from vscode-json-languageservice umd and we need
     * to provide a wrapper around the javascript methods we are calling since they have no type
     */
    normalizeId(id) {
        try {
            return URI.parse(id).toString();
        }
        catch (e) {
            return id;
        }
    }
    /*
     * Everything below here is needed because we're importing from vscode-json-languageservice umd and we need
     * to provide a wrapper around the javascript methods we are calling since they have no type
     */
    getOrAddSchemaHandle(id, unresolvedSchemaContent) {
        return super.getOrAddSchemaHandle(id, unresolvedSchemaContent);
    }
    loadSchema(schemaUri) {
        const requestService = this.requestService;
        return super.loadSchema(schemaUri).then((unresolvedJsonSchema) => {
            if (unresolvedJsonSchema.errors && unresolvedJsonSchema.schema === void 0) {
                return requestService(schemaUri).then((content) => {
                    if (!content) {
                        const errorMessage = localize8("json.schema.nocontent", "Unable to load schema from '{0}': No content. {1}", toDisplayString2(schemaUri), unresolvedJsonSchema.errors);
                        return new UnresolvedSchema({}, [errorMessage]);
                    }
                    try {
                        const schemaContent = parse2(content);
                        return new UnresolvedSchema(schemaContent, []);
                    }
                    catch (yamlError) {
                        const errorMessage = localize8("json.schema.invalidFormat", "Unable to parse content from '{0}': {1}.", toDisplayString2(schemaUri), yamlError);
                        return new UnresolvedSchema({}, [errorMessage]);
                    }
                }, 
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                (error) => {
                    let errorMessage = error.toString();
                    const errorSplit = error.toString().split("Error: ");
                    if (errorSplit.length > 1) {
                        errorMessage = errorSplit[1];
                    }
                    return new UnresolvedSchema({}, [errorMessage]);
                });
            }
            unresolvedJsonSchema.uri = schemaUri;
            if (this.schemaUriToNameAndDescription.has(schemaUri)) {
                const { name, description, versions } = this.schemaUriToNameAndDescription.get(schemaUri);
                unresolvedJsonSchema.schema.title = name != null ? name : unresolvedJsonSchema.schema.title;
                unresolvedJsonSchema.schema.description = description != null ? description : unresolvedJsonSchema.schema.description;
                unresolvedJsonSchema.schema.versions = versions != null ? versions : unresolvedJsonSchema.schema.versions;
            }
            return unresolvedJsonSchema;
        });
    }
    registerExternalSchema(uri, filePatterns, unresolvedSchema, name, description, versions) {
        if (name || description) {
            this.schemaUriToNameAndDescription.set(uri, { name, description, versions });
        }
        return super.registerExternalSchema(uri, filePatterns, unresolvedSchema);
    }
    clearExternalSchemas() {
        super.clearExternalSchemas();
    }
    setSchemaContributions(schemaContributions2) {
        super.setSchemaContributions(schemaContributions2);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getRegisteredSchemaIds(filter) {
        return super.getRegisteredSchemaIds(filter);
    }
    getResolvedSchema(schemaId) {
        return super.getResolvedSchema(schemaId);
    }
    onResourceChange(uri) {
        return super.onResourceChange(uri);
    }
};
function toDisplayString2(url) {
    try {
        const uri = URI.parse(url);
        if (uri.scheme === "file") {
            return uri.fsPath;
        }
    }
    catch (e) {
    }
    return url;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/documentSymbols.js
var YAMLDocumentSymbols = class {
    constructor(schemaService, telemetry) {
        this.telemetry = telemetry;
        this.jsonDocumentSymbols = new JSONDocumentSymbols(schemaService);
        this.jsonDocumentSymbols.getKeyLabel = (property) => {
            const keyNode = property.keyNode.internalNode;
            let name = "";
            if (isMap(keyNode)) {
                name = "{}";
            }
            else if (isSeq(keyNode)) {
                name = "[]";
            }
            else {
                name = keyNode.source;
            }
            return name;
        };
    }
    findDocumentSymbols(document, context = { resultLimit: Number.MAX_VALUE }) {
        let results = [];
        try {
            const doc = yamlDocumentsCache.getYamlDocument(document);
            if (!doc || doc["documents"].length === 0) {
                return null;
            }
            for (const yamlDoc of doc["documents"]) {
                if (yamlDoc.root) {
                    results = results.concat(this.jsonDocumentSymbols.findDocumentSymbols(document, yamlDoc, context));
                }
            }
        }
        catch (err) {
            this.telemetry.sendError("yaml.documentSymbols.error", { error: convertErrorToTelemetryMsg(err) });
        }
        return results;
    }
    findHierarchicalDocumentSymbols(document, context = { resultLimit: Number.MAX_VALUE }) {
        let results = [];
        try {
            const doc = yamlDocumentsCache.getYamlDocument(document);
            if (!doc || doc["documents"].length === 0) {
                return null;
            }
            for (const yamlDoc of doc["documents"]) {
                if (yamlDoc.root) {
                    results = results.concat(this.jsonDocumentSymbols.findDocumentSymbols2(document, yamlDoc, context));
                }
            }
        }
        catch (err) {
            this.telemetry.sendError("yaml.hierarchicalDocumentSymbols.error", { error: convertErrorToTelemetryMsg(err) });
        }
        return results;
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/parser/isKubernetes.js
function setKubernetesParserOption(jsonDocuments, option) {
    for (const jsonDoc of jsonDocuments) {
        jsonDoc.isKubernetes = option;
    }
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlHover.js

var YAMLHover = class {
    constructor(schemaService, telemetry) {
        this.telemetry = telemetry;
        this.shouldHover = true;
        this.schemaService = schemaService;
    }
    configure(languageSettings) {
        if (languageSettings) {
            this.shouldHover = languageSettings.hover;
        }
    }
    doHover(document, position, isKubernetes = false) {
        try {
            if (!this.shouldHover || !document) {
                return Promise.resolve(void 0);
            }
            const doc = yamlDocumentsCache.getYamlDocument(document);
            const offset = document.offsetAt(position);
            const currentDoc = matchOffsetToDocument(offset, doc);
            if (currentDoc === null) {
                return Promise.resolve(void 0);
            }
            setKubernetesParserOption(doc.documents, isKubernetes);
            const currentDocIndex = doc.documents.indexOf(currentDoc);
            currentDoc.currentDocIndex = currentDocIndex;
            return this.getHover(document, position, currentDoc);
        }
        catch (error) {
            this.telemetry.sendError("yaml.hover.error", { error: convertErrorToTelemetryMsg(error) });
        }
    }
    // method copied from https://github.com/microsoft/vscode-json-languageservice/blob/2ea5ad3d2ffbbe40dea11cfe764a502becf113ce/src/services/jsonHover.ts#L23
    getHover(document, position, doc) {
        const offset = document.offsetAt(position);
        let node = doc.getNodeFromOffset(offset);
        if (!node || (node.type === "object" || node.type === "array") && offset > node.offset + 1 && offset < node.offset + node.length - 1) {
            return Promise.resolve(null);
        }
        const hoverRangeNode = node;
        if (node.type === "string") {
            const parent = node.parent;
            if (parent && parent.type === "property" && parent.keyNode === node) {
                node = parent.valueNode;
                if (!node) {
                    return Promise.resolve(null);
                }
            }
        }
        const hoverRange = Range.create(document.positionAt(hoverRangeNode.offset), document.positionAt(hoverRangeNode.offset + hoverRangeNode.length));
        const createHover = (contents) => {
            const markupContent = {
                kind: "markdown",
                value: contents
            };
            const result = {
                contents: markupContent,
                range: hoverRange
            };
            return result;
        };
        const removePipe = (value) => {
            return value.replace(/\|\|\s*$/, "");
        };
        return this.schemaService.getSchemaForResource(document.uri, doc).then((schema4) => {
            if (schema4 && node && !schema4.errors.length) {
                const matchingSchemas = doc.getMatchingSchemas(schema4.schema, node.offset);
                let title = void 0;
                let markdownDescription = void 0;
                let markdownEnumValueDescription = void 0;
                let enumValue = void 0;
                const markdownExamples = [];
                matchingSchemas.every((s) => {
                    if ((s.node === node || node.type === "property" && node.valueNode === s.node) && !s.inverted && s.schema) {
                        title = title || s.schema.title || s.schema.closestTitle;
                        markdownDescription = markdownDescription || s.schema.markdownDescription || toMarkdown2(s.schema.description);
                        if (s.schema.enum) {
                            const idx = s.schema.enum.indexOf(getNodeValue3(node));
                            if (s.schema.markdownEnumDescriptions) {
                                markdownEnumValueDescription = s.schema.markdownEnumDescriptions[idx];
                            }
                            else if (s.schema.enumDescriptions) {
                                markdownEnumValueDescription = toMarkdown2(s.schema.enumDescriptions[idx]);
                            }
                            if (markdownEnumValueDescription) {
                                enumValue = s.schema.enum[idx];
                                if (typeof enumValue !== "string") {
                                    enumValue = JSON.stringify(enumValue);
                                }
                            }
                        }
                        if (s.schema.anyOf && isAllSchemasMatched(node, matchingSchemas, s.schema)) {
                            title = "";
                            markdownDescription = "";
                            s.schema.anyOf.forEach((childSchema, index) => {
                                title += childSchema.title || s.schema.closestTitle || "";
                                markdownDescription += childSchema.markdownDescription || toMarkdown2(childSchema.description) || "";
                                if (index !== s.schema.anyOf.length - 1) {
                                    title += " || ";
                                    markdownDescription += " || ";
                                }
                            });
                            title = removePipe(title);
                            markdownDescription = removePipe(markdownDescription);
                        }
                        if (s.schema.examples) {
                            s.schema.examples.forEach((example) => {
                                markdownExamples.push(JSON.stringify(example));
                            });
                        }
                    }
                    return true;
                });
                let result = "";
                if (title) {
                    result = "#### " + toMarkdown2(title);
                }
                if (markdownDescription) {
                    if (result.length > 0) {
                        result += "\n\n";
                    }
                    result += markdownDescription;
                }
                if (markdownEnumValueDescription) {
                    if (result.length > 0) {
                        result += "\n\n";
                    }
                    result += `\`${toMarkdownCodeBlock2(enumValue)}\`: ${markdownEnumValueDescription}`;
                }
                if (markdownExamples.length !== 0) {
                    if (result.length > 0) {
                        result += "\n\n";
                    }
                    result += "Examples:";
                    markdownExamples.forEach((example) => {
                        result += `

\`\`\`${example}\`\`\``;
                    });
                }
                if (result.length > 0 && schema4.schema.url) {
                    result += `

Source: [${getSchemaName(schema4.schema)}](${schema4.schema.url})`;
                }
                return createHover(result);
            }
            return null;
        });
    }
};
function getSchemaName(schema4) {
    let result = "JSON Schema";
    const urlString = schema4.url;
    if (urlString) {
        const url = URI.parse(urlString);
        result = path_browserify.basename(url.fsPath);
    }
    else if (schema4.title) {
        result = schema4.title;
    }
    return result;
}
function toMarkdown2(plain) {
    if (plain) {
        const res = plain.replace(/([^\n\r])(\r?\n)([^\n\r])/gm, "$1\n\n$3");
        return res.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
    }
    return void 0;
}
function toMarkdownCodeBlock2(content) {
    if (content.indexOf("`") !== -1) {
        return "`` " + content + " ``";
    }
    return content;
}
function isAllSchemasMatched(node, matchingSchemas, schema4) {
    let count = 0;
    for (const matchSchema of matchingSchemas) {
        if (node === matchSchema.node && matchSchema.schema !== schema4) {
            schema4.anyOf.forEach((childSchema) => {
                if (matchSchema.schema.title === childSchema.title && matchSchema.schema.description === childSchema.description && matchSchema.schema.properties === childSchema.properties) {
                    count++;
                }
            });
        }
    }
    return count === schema4.anyOf.length;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/validation/unused-anchors.js
var UnusedAnchorsValidator = class {
    validate(document, yamlDoc) {
        const result = [];
        const anchors = /* @__PURE__ */ new Set();
        const usedAnchors = /* @__PURE__ */ new Set();
        const anchorParent = /* @__PURE__ */ new Map();
        visit(yamlDoc.internalDocument, (key, node, path5) => {
            if (!isNode(node)) {
                return;
            }
            if ((isCollection(node) || isScalar(node)) && node.anchor) {
                anchors.add(node);
                anchorParent.set(node, path5[path5.length - 1]);
            }
            if (isAlias(node)) {
                usedAnchors.add(node.resolve(yamlDoc.internalDocument));
            }
        });
        for (const anchor of anchors) {
            if (!usedAnchors.has(anchor)) {
                const aToken = this.getAnchorNode(anchorParent.get(anchor));
                if (aToken) {
                    const range = Range.create(document.positionAt(aToken.offset), document.positionAt(aToken.offset + aToken.source.length));
                    const warningDiagnostic = Diagnostic.create(range, `Unused anchor "${aToken.source}"`, DiagnosticSeverity.Hint, 0);
                    warningDiagnostic.tags = [DiagnosticTag.Unnecessary];
                    result.push(warningDiagnostic);
                }
            }
        }
        return result;
    }
    getAnchorNode(parentNode) {
        if (parentNode && parentNode.srcToken) {
            const token = parentNode.srcToken;
            if (isCollectionItem(token)) {
                return getAnchorFromCollectionItem(token);
            }
            else if (cst_exports.isCollection(token)) {
                for (const t of token.items) {
                    const anchor = getAnchorFromCollectionItem(t);
                    if (anchor) {
                        return anchor;
                    }
                }
            }
        }
        return void 0;
    }
};
function getAnchorFromCollectionItem(token) {
    for (const t of token.start) {
        if (t.type === "anchor") {
            return t;
        }
    }
    if (token.sep && Array.isArray(token.sep)) {
        for (const t of token.sep) {
            if (t.type === "anchor") {
                return t;
            }
        }
    }
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/validation/yaml-style.js
var YAMLStyleValidator = class {
    constructor(settings) {
        this.forbidMapping = settings.flowMapping === "forbid";
        this.forbidSequence = settings.flowSequence === "forbid";
    }
    validate(document, yamlDoc) {
        const result = [];
        visit(yamlDoc.internalDocument, (key, node) => {
            var _a, _b;
            if (this.forbidMapping && isMap(node) && ((_a = node.srcToken) == null ? void 0 : _a.type) === "flow-collection") {
                result.push(Diagnostic.create(this.getRangeOf(document, node.srcToken), "Flow style mapping is forbidden", DiagnosticSeverity.Error, "flowMap"));
            }
            if (this.forbidSequence && isSeq(node) && ((_b = node.srcToken) == null ? void 0 : _b.type) === "flow-collection") {
                result.push(Diagnostic.create(this.getRangeOf(document, node.srcToken), "Flow style sequence is forbidden", DiagnosticSeverity.Error, "flowSeq"));
            }
        });
        return result;
    }
    getRangeOf(document, node) {
        return Range.create(document.positionAt(node.start.offset), document.positionAt(node.end.pop().offset));
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlValidation.js
var yamlDiagToLSDiag = (yamlDiag, textDocument) => {
    const start = textDocument.positionAt(yamlDiag.location.start);
    const range = {
        start,
        end: yamlDiag.location.toLineEnd ? Position.create(start.line, new TextBuffer(textDocument).getLineLength(start.line)) : textDocument.positionAt(yamlDiag.location.end)
    };
    return Diagnostic.create(range, yamlDiag.message, yamlDiag.severity, yamlDiag.code, YAML_SOURCE);
};
var YAMLValidation = class {
    constructor(schemaService, telemetry) {
        this.telemetry = telemetry;
        this.validators = [];
        this.MATCHES_MULTIPLE = "Matches multiple schemas when only one must validate.";
        this.validationEnabled = true;
        this.jsonValidation = new JSONValidation(schemaService, Promise);
    }
    configure(settings) {
        this.validators = [];
        if (settings) {
            this.validationEnabled = settings.validate;
            this.customTags = settings.customTags;
            this.disableAdditionalProperties = settings.disableAdditionalProperties;
            this.yamlVersion = settings.yamlVersion;
            if (settings.flowMapping === "forbid" || settings.flowSequence === "forbid") {
                this.validators.push(new YAMLStyleValidator(settings));
            }
        }
        this.validators.push(new UnusedAnchorsValidator());
    }
    async doValidation(textDocument, isKubernetes = false) {
        if (!this.validationEnabled) {
            return Promise.resolve([]);
        }
        const validationResult = [];
        try {
            const yamlDocument = yamlDocumentsCache.getYamlDocument(textDocument, { customTags: this.customTags, yamlVersion: this.yamlVersion }, true);
            let index = 0;
            for (const currentYAMLDoc of yamlDocument.documents) {
                currentYAMLDoc.isKubernetes = isKubernetes;
                currentYAMLDoc.currentDocIndex = index;
                currentYAMLDoc.disableAdditionalProperties = this.disableAdditionalProperties;
                currentYAMLDoc.uri = textDocument.uri;
                const validation = await this.jsonValidation.doValidation(textDocument, currentYAMLDoc);
                const syd = currentYAMLDoc;
                if (syd.errors.length > 0) {
                    validationResult.push(...syd.errors);
                }
                if (syd.warnings.length > 0) {
                    validationResult.push(...syd.warnings);
                }
                validationResult.push(...validation);
                validationResult.push(...this.runAdditionalValidators(textDocument, currentYAMLDoc));
                index++;
            }
        }
        catch (err) {
            this.telemetry.sendError("yaml.validation.error", { error: convertErrorToTelemetryMsg(err) });
        }
        let previousErr;
        const foundSignatures = /* @__PURE__ */ new Set();
        const duplicateMessagesRemoved = [];
        for (let err of validationResult) {
            if (isKubernetes && err.message === this.MATCHES_MULTIPLE) {
                continue;
            }
            if (Object.prototype.hasOwnProperty.call(err, "location")) {
                err = yamlDiagToLSDiag(err, textDocument);
            }
            if (!err.source) {
                err.source = YAML_SOURCE;
            }
            if (previousErr && previousErr.message === err.message && previousErr.range.end.line === err.range.start.line && Math.abs(previousErr.range.end.character - err.range.end.character) >= 1) {
                previousErr.range.end = err.range.end;
                continue;
            }
            else {
                previousErr = err;
            }
            const errSig = err.range.start.line + " " + err.range.start.character + " " + err.message;
            if (!foundSignatures.has(errSig)) {
                duplicateMessagesRemoved.push(err);
                foundSignatures.add(errSig);
            }
        }
        return duplicateMessagesRemoved;
    }
    runAdditionalValidators(document, yarnDoc) {
        const result = [];
        for (const validator of this.validators) {
            result.push(...validator.validate(document, yarnDoc));
        }
        return result;
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlFormatter.js


var YAMLFormatter = class {
    constructor() {
        this.formatterEnabled = true;
    }
    configure(shouldFormat) {
        if (shouldFormat) {
            this.formatterEnabled = shouldFormat.format;
        }
    }
    format(document, options) {
        if (!this.formatterEnabled) {
            return [];
        }
        try {
            const text = document.getText();
            const prettierOptions = {
                parser: "yaml",
                plugins: [parser_yaml_namespaceObject],
                // --- FormattingOptions ---
                tabWidth: options.tabWidth || options.tabSize,
                // --- CustomFormatterOptions ---
                singleQuote: options.singleQuote,
                bracketSpacing: options.bracketSpacing,
                // 'preserve' is the default for Options.proseWrap. See also server.ts
                proseWrap: "always" === options.proseWrap ? "always" : "never" === options.proseWrap ? "never" : "preserve",
                printWidth: options.printWidth
            };
            const formatted = standalone.format(text, prettierOptions);
            return [TextEdit.replace(Range.create(Position.create(0, 0), document.positionAt(text.length)), formatted)];
        }
        catch (error) {
            return [];
        }
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlLinks.js
var YamlLinks = class {
    constructor(telemetry) {
        this.telemetry = telemetry;
    }
    findLinks(document) {
        try {
            const doc = yamlDocumentsCache.getYamlDocument(document);
            const linkPromises = [];
            for (const yamlDoc of doc.documents) {
                linkPromises.push(findLinks(document, yamlDoc));
            }
            return Promise.all(linkPromises).then((yamlLinkArray) => [].concat(...yamlLinkArray));
        }
        catch (err) {
            this.telemetry.sendError("yaml.documentLink.error", { error: convertErrorToTelemetryMsg(err) });
        }
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlFolding.js
function getFoldingRanges2(document, context) {
    if (!document) {
        return;
    }
    const result = [];
    const doc = yamlDocumentsCache.getYamlDocument(document);
    for (const ymlDoc of doc.documents) {
        if (doc.documents.length > 1) {
            result.push(createNormalizedFolding(document, ymlDoc.root));
        }
        ymlDoc.visit((node) => {
            var _a;
            if (node.type === "object" && ((_a = node.parent) == null ? void 0 : _a.type) === "array") {
                result.push(createNormalizedFolding(document, node));
            }
            if (node.type === "property" && node.valueNode) {
                switch (node.valueNode.type) {
                    case "array":
                    case "object":
                        result.push(createNormalizedFolding(document, node));
                        break;
                    case "string": {
                        const nodePosn = document.positionAt(node.offset);
                        const valuePosn = document.positionAt(node.valueNode.offset + node.valueNode.length);
                        if (nodePosn.line !== valuePosn.line) {
                            result.push(createNormalizedFolding(document, node));
                        }
                        break;
                    }
                    default:
                        return true;
                }
            }
            return true;
        });
    }
    const rangeLimit = context && context.rangeLimit;
    if (typeof rangeLimit !== "number" || result.length <= rangeLimit) {
        return result;
    }
    if (context && context.onRangeLimitExceeded) {
        context.onRangeLimitExceeded(document.uri);
    }
    return result.slice(0, context.rangeLimit);
}
function createNormalizedFolding(document, node) {
    const startPos = document.positionAt(node.offset);
    let endPos = document.positionAt(node.offset + node.length);
    const textFragment = document.getText(Range.create(startPos, endPos));
    const newLength = textFragment.length - textFragment.trimRight().length;
    if (newLength > 0) {
        endPos = document.positionAt(node.offset + node.length - newLength);
    }
    return FoldingRange.create(startPos.line, endPos.line, startPos.character, endPos.character);
}
// ../../node_modules/yaml-language-server/lib/esm/commands.js
var YamlCommands;
(function (YamlCommands2) {
    YamlCommands2["JUMP_TO_SCHEMA"] = "jumpToSchema";
})(YamlCommands || (YamlCommands = {}));
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlCodeActions.js

// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/flow-style-rewriter.js
var FlowStyleRewriter = class {
    constructor(indentation) {
        this.indentation = indentation;
    }
    write(node) {
        if (node.internalNode.srcToken["type"] !== "flow-collection") {
            return null;
        }
        const collection = node.internalNode.srcToken;
        const blockType = collection.start.type === "flow-map-start" ? "block-map" : "block-seq";
        const parentType = node.parent.type;
        const blockStyle = {
            type: blockType,
            offset: collection.offset,
            indent: collection.indent,
            items: []
        };
        for (const item of collection.items) {
            cst_exports.visit(item, ({ key, sep, value }) => {
                if (blockType === "block-map") {
                    const start = [{ type: "space", indent: 0, offset: key.offset, source: this.indentation }];
                    if (parentType === "property") {
                        start.unshift({ type: "newline", indent: 0, offset: key.offset, source: "\n" });
                    }
                    blockStyle.items.push({
                        start,
                        key,
                        sep,
                        value
                    });
                }
                else if (blockType === "block-seq") {
                    blockStyle.items.push({
                        start: [
                            { type: "newline", indent: 0, offset: value.offset, source: "\n" },
                            { type: "space", indent: 0, offset: value.offset, source: this.indentation },
                            { type: "seq-item-ind", indent: 0, offset: value.offset, source: "-" },
                            { type: "space", indent: 0, offset: value.offset, source: " " }
                        ],
                        value
                    });
                }
                if (value.type === "flow-collection") {
                    return visit.SKIP;
                }
            });
        }
        return cst_exports.stringify(blockStyle);
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlCodeActions.js
var YamlCodeActions = class {
    constructor(clientCapabilities) {
        this.clientCapabilities = clientCapabilities;
        this.indentation = "  ";
    }
    configure(settings) {
        this.indentation = settings.indentation;
    }
    getCodeAction(document, params) {
        if (!params.context.diagnostics) {
            return;
        }
        const result = [];
        result.push(...this.getConvertToBooleanActions(params.context.diagnostics, document));
        result.push(...this.getJumpToSchemaActions(params.context.diagnostics));
        result.push(...this.getTabToSpaceConverting(params.context.diagnostics, document));
        result.push(...this.getUnusedAnchorsDelete(params.context.diagnostics, document));
        result.push(...this.getConvertToBlockStyleActions(params.context.diagnostics, document));
        return result;
    }
    getJumpToSchemaActions(diagnostics) {
        var _a, _b, _c, _d, _e;
        const isOpenTextDocumentEnabled = (_d = (_c = (_b = (_a = this.clientCapabilities) == null ? void 0 : _a.window) == null ? void 0 : _b.showDocument) == null ? void 0 : _c.support) != null ? _d : false;
        if (!isOpenTextDocumentEnabled) {
            return [];
        }
        const schemaUriToDiagnostic = /* @__PURE__ */ new Map();
        for (const diagnostic of diagnostics) {
            const schemaUri = ((_e = diagnostic.data) == null ? void 0 : _e.schemaUri) || [];
            for (const schemaUriStr of schemaUri) {
                if (schemaUriStr) {
                    if (!schemaUriToDiagnostic.has(schemaUriStr)) {
                        schemaUriToDiagnostic.set(schemaUriStr, []);
                    }
                    schemaUriToDiagnostic.get(schemaUriStr).push(diagnostic);
                }
            }
        }
        const result = [];
        for (const schemaUri of schemaUriToDiagnostic.keys()) {
            const action = CodeAction.create(`Jump to schema location (${path_browserify.basename(schemaUri)})`, Command.create("JumpToSchema", YamlCommands.JUMP_TO_SCHEMA, schemaUri));
            action.diagnostics = schemaUriToDiagnostic.get(schemaUri);
            result.push(action);
        }
        return result;
    }
    getTabToSpaceConverting(diagnostics, document) {
        const result = [];
        const textBuff = new TextBuffer(document);
        const processedLine = [];
        for (const diag of diagnostics) {
            if (diag.message === "Using tabs can lead to unpredictable results") {
                if (processedLine.includes(diag.range.start.line)) {
                    continue;
                }
                const lineContent = textBuff.getLineContent(diag.range.start.line);
                let replacedTabs = 0;
                let newText = "";
                for (let i = diag.range.start.character; i <= diag.range.end.character; i++) {
                    const char = lineContent.charAt(i);
                    if (char !== "	") {
                        break;
                    }
                    replacedTabs++;
                    newText += this.indentation;
                }
                processedLine.push(diag.range.start.line);
                let resultRange = diag.range;
                if (replacedTabs !== diag.range.end.character - diag.range.start.character) {
                    resultRange = Range.create(diag.range.start, Position.create(diag.range.end.line, diag.range.start.character + replacedTabs));
                }
                result.push(CodeAction.create("Convert Tab to Spaces", createWorkspaceEdit(document.uri, [TextEdit.replace(resultRange, newText)]), CodeActionKind.QuickFix));
            }
        }
        if (result.length !== 0) {
            const replaceEdits = [];
            for (let i = 0; i <= textBuff.getLineCount(); i++) {
                const lineContent = textBuff.getLineContent(i);
                let replacedTabs = 0;
                let newText = "";
                for (let j = 0; j < lineContent.length; j++) {
                    const char = lineContent.charAt(j);
                    if (char !== " " && char !== "	") {
                        if (replacedTabs !== 0) {
                            replaceEdits.push(TextEdit.replace(Range.create(i, j - replacedTabs, i, j), newText));
                            replacedTabs = 0;
                            newText = "";
                        }
                        break;
                    }
                    if (char === " " && replacedTabs !== 0) {
                        replaceEdits.push(TextEdit.replace(Range.create(i, j - replacedTabs, i, j), newText));
                        replacedTabs = 0;
                        newText = "";
                        continue;
                    }
                    if (char === "	") {
                        newText += this.indentation;
                        replacedTabs++;
                    }
                }
                if (replacedTabs !== 0) {
                    replaceEdits.push(TextEdit.replace(Range.create(i, 0, i, textBuff.getLineLength(i)), newText));
                }
            }
            if (replaceEdits.length > 0) {
                result.push(CodeAction.create("Convert all Tabs to Spaces", createWorkspaceEdit(document.uri, replaceEdits), CodeActionKind.QuickFix));
            }
        }
        return result;
    }
    getUnusedAnchorsDelete(diagnostics, document) {
        const result = [];
        const buffer = new TextBuffer(document);
        for (const diag of diagnostics) {
            if (diag.message.startsWith("Unused anchor") && diag.source === YAML_SOURCE) {
                const range = Range.create(diag.range.start, diag.range.end);
                const actual = buffer.getText(range);
                const lineContent = buffer.getLineContent(range.end.line);
                const lastWhitespaceChar = getFirstNonWhitespaceCharacterAfterOffset(lineContent, range.end.character);
                range.end.character = lastWhitespaceChar;
                const action = CodeAction.create(`Delete unused anchor: ${actual}`, createWorkspaceEdit(document.uri, [TextEdit.del(range)]), CodeActionKind.QuickFix);
                action.diagnostics = [diag];
                result.push(action);
            }
        }
        return result;
    }
    getConvertToBooleanActions(diagnostics, document) {
        const results = [];
        for (const diagnostic of diagnostics) {
            if (diagnostic.message === 'Incorrect type. Expected "boolean".') {
                const value = document.getText(diagnostic.range).toLocaleLowerCase();
                if (value === '"true"' || value === '"false"' || value === "'true'" || value === "'false'") {
                    const newValue = value.includes("true") ? "true" : "false";
                    results.push(CodeAction.create("Convert to boolean", createWorkspaceEdit(document.uri, [TextEdit.replace(diagnostic.range, newValue)]), CodeActionKind.QuickFix));
                }
            }
        }
        return results;
    }
    getConvertToBlockStyleActions(diagnostics, document) {
        const results = [];
        for (const diagnostic of diagnostics) {
            if (diagnostic.code === "flowMap" || diagnostic.code === "flowSeq") {
                const yamlDocuments = yamlDocumentsCache.getYamlDocument(document);
                const startOffset = document.offsetAt(diagnostic.range.start);
                const yamlDoc = matchOffsetToDocument(startOffset, yamlDocuments);
                const node = yamlDoc.getNodeFromOffset(startOffset);
                if (isMap(node.internalNode) || isSeq(node.internalNode)) {
                    const blockTypeDescription = isMap(node.internalNode) ? "map" : "sequence";
                    const rewriter = new FlowStyleRewriter(this.indentation);
                    results.push(CodeAction.create(`Convert to block style ${blockTypeDescription}`, createWorkspaceEdit(document.uri, [TextEdit.replace(diagnostic.range, rewriter.write(node))]), CodeActionKind.QuickFix));
                }
            }
        }
        return results;
    }
};
function createWorkspaceEdit(uri, edits) {
    const changes = {};
    changes[uri] = edits;
    const edit = {
        changes
    };
    return edit;
}
// ../../node_modules/yaml-language-server/lib/esm/languageserver/commandExecutor.js
var CommandExecutor = class {
    constructor() {
        this.commands = /* @__PURE__ */ new Map();
    }
    executeCommand(params) {
        if (this.commands.has(params.command)) {
            const handler = this.commands.get(params.command);
            return handler(...params.arguments);
        }
        throw new Error(`Command '${params.command}' not found`);
    }
    registerCommand(commandId, handler) {
        this.commands.set(commandId, handler);
    }
};
var commandExecutor = new CommandExecutor();
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlOnTypeFormatting.js
function doDocumentOnTypeFormatting(document, params) {
    const { position } = params;
    const tb = new TextBuffer(document);
    if (params.ch === "\n") {
        const previousLine = tb.getLineContent(position.line - 1);
        if (previousLine.trimRight().endsWith(":")) {
            const currentLine = tb.getLineContent(position.line);
            const subLine = currentLine.substring(position.character, currentLine.length);
            const isInArray = previousLine.indexOf(" - ") !== -1;
            if (subLine.trimRight().length === 0) {
                const indentationFix = position.character - (previousLine.length - previousLine.trimLeft().length);
                if (indentationFix === params.options.tabSize && !isInArray) {
                    return;
                }
                const result = [];
                if (currentLine.length > 0) {
                    result.push(TextEdit.del(Range.create(position, Position.create(position.line, currentLine.length - 1))));
                }
                result.push(TextEdit.insert(position, " ".repeat(params.options.tabSize + (isInArray ? 2 - indentationFix : 0))));
                return result;
            }
            if (isInArray) {
                return [TextEdit.insert(position, " ".repeat(params.options.tabSize))];
            }
        }
        if (previousLine.trimRight().endsWith("|")) {
            return [TextEdit.insert(position, " ".repeat(params.options.tabSize))];
        }
        if (previousLine.includes(" - ") && !previousLine.includes(": ")) {
            return [TextEdit.insert(position, "- ")];
        }
        if (previousLine.includes(" - ") && previousLine.includes(": ")) {
            return [TextEdit.insert(position, "  ")];
        }
    }
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/schemaUrls.js
var JSON_SCHEMASTORE_URL = "https://www.schemastore.org/api/json/catalog.json";
function getSchemaUrls(schema4) {
    const result = /* @__PURE__ */ new Map();
    if (!schema4) {
        return result;
    }
    if (schema4.url) {
        if (schema4.url.startsWith("schemaservice://combinedSchema/")) {
            addSchemasForOf(schema4, result);
        }
        else {
            result.set(schema4.url, schema4);
        }
    }
    else {
        addSchemasForOf(schema4, result);
    }
    return result;
}
function addSchemasForOf(schema4, result) {
    if (schema4.allOf) {
        addInnerSchemaUrls(schema4.allOf, result);
    }
    if (schema4.anyOf) {
        addInnerSchemaUrls(schema4.anyOf, result);
    }
    if (schema4.oneOf) {
        addInnerSchemaUrls(schema4.oneOf, result);
    }
}
function addInnerSchemaUrls(schemas2, result) {
    for (const subSchema of schemas2) {
        if (!isBoolean2(subSchema) && subSchema.url && !result.has(subSchema.url)) {
            result.set(subSchema.url, subSchema);
        }
    }
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlCodeLens.js
var YamlCodeLens = class {
    constructor(schemaService, telemetry) {
        this.schemaService = schemaService;
        this.telemetry = telemetry;
    }
    async getCodeLens(document) {
        const result = [];
        try {
            const yamlDocument = yamlDocumentsCache.getYamlDocument(document);
            let schemaUrls = /* @__PURE__ */ new Map();
            for (const currentYAMLDoc of yamlDocument.documents) {
                const schema4 = await this.schemaService.getSchemaForResource(document.uri, currentYAMLDoc);
                if (schema4 == null ? void 0 : schema4.schema) {
                    schemaUrls = new Map([...getSchemaUrls(schema4 == null ? void 0 : schema4.schema), ...schemaUrls]);
                }
            }
            for (const urlToSchema of schemaUrls) {
                const lens = CodeLens.create(Range.create(0, 0, 0, 0));
                lens.command = {
                    title: getSchemaTitle(urlToSchema[1], urlToSchema[0]),
                    command: YamlCommands.JUMP_TO_SCHEMA,
                    arguments: [urlToSchema[0]]
                };
                result.push(lens);
            }
        }
        catch (err) {
            this.telemetry.sendError("yaml.codeLens.error", { error: convertErrorToTelemetryMsg(err) });
        }
        return result;
    }
    resolveCodeLens(param) {
        return param;
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlCommands.js
function registerCommands(commandExecutor2, connection) {
    commandExecutor2.registerCommand(YamlCommands.JUMP_TO_SCHEMA, async (uri) => {
        if (!uri) {
            return;
        }
        if (!uri.startsWith("file") && !/^[a-z]:[\\/]/i.test(uri)) {
            const origUri = URI.parse(uri);
            const customUri = URI.from({
                scheme: "json-schema",
                authority: origUri.authority,
                path: origUri.path.endsWith(".json") ? origUri.path : origUri.path + ".json",
                fragment: uri
            });
            uri = customUri.toString();
        }
        if (/^[a-z]:[\\/]/i.test(uri)) {
            const winUri = URI.file(uri);
            uri = winUri.toString();
        }
        const result = await connection.window.showDocument({ uri, external: false, takeFocus: true });
        if (!result) {
            connection.window.showErrorMessage(`Cannot open ${uri}`);
        }
    });
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/indentationGuesser.js
var SpacesDiffResult = class {
    constructor() {
        this.spacesDiff = 0;
        this.looksLikeAlignment = false;
    }
};
function spacesDiff(a2, aLength, b, bLength, result) {
    result.spacesDiff = 0;
    result.looksLikeAlignment = false;
    let i;
    for (i = 0; i < aLength && i < bLength; i++) {
        const aCharCode = a2.charCodeAt(i);
        const bCharCode = b.charCodeAt(i);
        if (aCharCode !== bCharCode) {
            break;
        }
    }
    let aSpacesCnt = 0, aTabsCount = 0;
    for (let j = i; j < aLength; j++) {
        const aCharCode = a2.charCodeAt(j);
        if (aCharCode === 32) {
            aSpacesCnt++;
        }
        else {
            aTabsCount++;
        }
    }
    let bSpacesCnt = 0, bTabsCount = 0;
    for (let j = i; j < bLength; j++) {
        const bCharCode = b.charCodeAt(j);
        if (bCharCode === 32) {
            bSpacesCnt++;
        }
        else {
            bTabsCount++;
        }
    }
    if (aSpacesCnt > 0 && aTabsCount > 0) {
        return;
    }
    if (bSpacesCnt > 0 && bTabsCount > 0) {
        return;
    }
    const tabsDiff = Math.abs(aTabsCount - bTabsCount);
    const spacesDiff2 = Math.abs(aSpacesCnt - bSpacesCnt);
    if (tabsDiff === 0) {
        result.spacesDiff = spacesDiff2;
        if (spacesDiff2 > 0 && 0 <= bSpacesCnt - 1 && bSpacesCnt - 1 < a2.length && bSpacesCnt < b.length) {
            if (b.charCodeAt(bSpacesCnt) !== 32 && a2.charCodeAt(bSpacesCnt - 1) === 32) {
                if (a2.charCodeAt(a2.length - 1) === 44) {
                    result.looksLikeAlignment = true;
                }
            }
        }
        return;
    }
    if (spacesDiff2 % tabsDiff === 0) {
        result.spacesDiff = spacesDiff2 / tabsDiff;
    }
}
function guessIndentation(source, defaultTabSize, defaultInsertSpaces) {
    const linesCount = Math.min(source.getLineCount(), 1e4);
    let linesIndentedWithTabsCount = 0;
    let linesIndentedWithSpacesCount = 0;
    let previousLineText = "";
    let previousLineIndentation = 0;
    const ALLOWED_TAB_SIZE_GUESSES = [2, 4, 6, 8, 3, 5, 7];
    const MAX_ALLOWED_TAB_SIZE_GUESS = 8;
    const spacesDiffCount = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    const tmp = new SpacesDiffResult();
    for (let lineNumber = 1; lineNumber <= linesCount; lineNumber++) {
        const currentLineLength = source.getLineLength(lineNumber);
        const currentLineText = source.getLineContent(lineNumber);
        const useCurrentLineText = currentLineLength <= 65536;
        let currentLineHasContent = false;
        let currentLineIndentation = 0;
        let currentLineSpacesCount = 0;
        let currentLineTabsCount = 0;
        for (let j = 0, lenJ = currentLineLength; j < lenJ; j++) {
            const charCode = useCurrentLineText ? currentLineText.charCodeAt(j) : source.getLineCharCode(lineNumber, j);
            if (charCode === 9) {
                currentLineTabsCount++;
            }
            else if (charCode === 32) {
                currentLineSpacesCount++;
            }
            else {
                currentLineHasContent = true;
                currentLineIndentation = j;
                break;
            }
        }
        if (!currentLineHasContent) {
            continue;
        }
        if (currentLineTabsCount > 0) {
            linesIndentedWithTabsCount++;
        }
        else if (currentLineSpacesCount > 1) {
            linesIndentedWithSpacesCount++;
        }
        spacesDiff(previousLineText, previousLineIndentation, currentLineText, currentLineIndentation, tmp);
        if (tmp.looksLikeAlignment) {
            if (!(defaultInsertSpaces && defaultTabSize === tmp.spacesDiff)) {
                continue;
            }
        }
        const currentSpacesDiff = tmp.spacesDiff;
        if (currentSpacesDiff <= MAX_ALLOWED_TAB_SIZE_GUESS) {
            spacesDiffCount[currentSpacesDiff]++;
        }
        previousLineText = currentLineText;
        previousLineIndentation = currentLineIndentation;
    }
    let insertSpaces = defaultInsertSpaces;
    if (linesIndentedWithTabsCount !== linesIndentedWithSpacesCount) {
        insertSpaces = linesIndentedWithTabsCount < linesIndentedWithSpacesCount;
    }
    let tabSize = defaultTabSize;
    if (insertSpaces) {
        let tabSizeScore = insertSpaces ? 0 : 0.1 * linesCount;
        ALLOWED_TAB_SIZE_GUESSES.forEach((possibleTabSize) => {
            const possibleTabSizeScore = spacesDiffCount[possibleTabSize];
            if (possibleTabSizeScore > tabSizeScore) {
                tabSizeScore = possibleTabSizeScore;
                tabSize = possibleTabSize;
            }
        });
        if (tabSize === 4 && spacesDiffCount[4] > 0 && spacesDiffCount[2] > 0 && spacesDiffCount[2] >= spacesDiffCount[4] / 2) {
            tabSize = 2;
        }
    }
    return {
        insertSpaces,
        tabSize
    };
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/json.js
function stringifyObject2(obj, indent, stringifyLiteral, settings, depth = 0, consecutiveArrays = 0) {
    if (obj !== null && typeof obj === "object") {
        const newIndent = depth === 0 && settings.shouldIndentWithTab || depth > 0 ? indent + settings.indentation : "";
        if (Array.isArray(obj)) {
            consecutiveArrays += 1;
            if (obj.length === 0) {
                return "";
            }
            let result = "";
            for (let i = 0; i < obj.length; i++) {
                let pseudoObj = obj[i];
                if (typeof obj[i] !== "object") {
                    result += "\n" + newIndent + "- " + stringifyLiteral(obj[i]);
                    continue;
                }
                if (!Array.isArray(obj[i])) {
                    pseudoObj = prependToObject(obj[i], consecutiveArrays);
                }
                result += stringifyObject2(pseudoObj, indent, stringifyLiteral, settings, depth += 1, consecutiveArrays);
            }
            return result;
        }
        else {
            const keys = Object.keys(obj);
            if (keys.length === 0) {
                return "";
            }
            let result = depth === 0 && settings.newLineFirst || depth > 0 ? "\n" : "";
            for (let i = 0; i < keys.length; i++) {
                const key = keys[i];
                const isObject = typeof obj[key] === "object";
                const colonDelimiter = isObject ? ":" : ": ";
                const parentArrayCompensation = isObject && /^\s|-/.test(key) ? settings.indentation : "";
                const objectIndent = newIndent + parentArrayCompensation;
                if (depth === 0 && i === 0 && !settings.indentFirstObject) {
                    const value = stringifyObject2(obj[key], objectIndent, stringifyLiteral, settings, depth += 1, 0);
                    result += indent + key + colonDelimiter + value;
                }
                else {
                    const value = stringifyObject2(obj[key], objectIndent, stringifyLiteral, settings, depth += 1, 0);
                    result += newIndent + key + colonDelimiter + value;
                }
                if (i < keys.length - 1) {
                    result += "\n";
                }
            }
            return result;
        }
    }
    return stringifyLiteral(obj);
}
function prependToObject(obj, consecutiveArrays) {
    const newObj = {};
    for (let i = 0; i < Object.keys(obj).length; i++) {
        const key = Object.keys(obj)[i];
        if (i === 0) {
            newObj["- ".repeat(consecutiveArrays) + key] = obj[key];
        }
        else {
            newObj["  ".repeat(consecutiveArrays) + key] = obj[key];
        }
    }
    return newObj;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlCompletion.js
var localize9 = loadMessageBundle();
var doubleQuotesEscapeRegExp = /[\\]+"/g;
var parentCompletionKind = CompletionItemKind.Class;
var YamlCompletion = class {
    constructor(schemaService, clientCapabilities = {}, yamlDocument, telemetry) {
        this.schemaService = schemaService;
        this.clientCapabilities = clientCapabilities;
        this.yamlDocument = yamlDocument;
        this.telemetry = telemetry;
        this.completionEnabled = true;
        this.arrayPrefixIndentation = "";
    }
    configure(languageSettings) {
        if (languageSettings) {
            this.completionEnabled = languageSettings.completion;
        }
        this.customTags = languageSettings.customTags;
        this.yamlVersion = languageSettings.yamlVersion;
        this.configuredIndentation = languageSettings.indentation;
        this.disableDefaultProperties = languageSettings.disableDefaultProperties;
        this.parentSkeletonSelectedFirst = languageSettings.parentSkeletonSelectedFirst;
    }
    async doComplete(document, position, isKubernetes = false, doComplete = true) {
        const result = CompletionList.create([], false);
        if (!this.completionEnabled) {
            return result;
        }
        const doc = this.yamlDocument.getYamlDocument(document, { customTags: this.customTags, yamlVersion: this.yamlVersion }, true);
        const textBuffer = new TextBuffer(document);
        if (!this.configuredIndentation) {
            const indent = guessIndentation(textBuffer, 2, true);
            this.indentation = indent.insertSpaces ? " ".repeat(indent.tabSize) : "	";
        }
        else {
            this.indentation = this.configuredIndentation;
        }
        setKubernetesParserOption(doc.documents, isKubernetes);
        for (const jsonDoc of doc.documents) {
            jsonDoc.uri = document.uri;
        }
        const offset = document.offsetAt(position);
        const text = document.getText();
        if (text.charAt(offset - 1) === ":") {
            return Promise.resolve(result);
        }
        let currentDoc = matchOffsetToDocument(offset, doc);
        if (currentDoc === null) {
            return Promise.resolve(result);
        }
        currentDoc = currentDoc.clone();
        let [node, foundByClosest] = currentDoc.getNodeFromPosition(offset, textBuffer, this.indentation.length);
        const currentWord = this.getCurrentWord(document, offset);
        let lineContent = textBuffer.getLineContent(position.line);
        const lineAfterPosition = lineContent.substring(position.character);
        const areOnlySpacesAfterPosition = /^[ ]+\n?$/.test(lineAfterPosition);
        this.arrayPrefixIndentation = "";
        let overwriteRange = null;
        if (areOnlySpacesAfterPosition) {
            overwriteRange = Range.create(position, Position.create(position.line, lineContent.length));
            const isOnlyWhitespace = lineContent.trim().length === 0;
            const isOnlyDash = lineContent.match(/^\s*(-)\s*$/);
            if (node && isScalar(node) && !isOnlyWhitespace && !isOnlyDash) {
                const matches = lineContent.match(/^([\s-]*)[^:]+[ \t]+\n?$/);
                if (matches == null ? void 0 : matches.length) {
                    overwriteRange = Range.create(Position.create(position.line, matches[1].length), Position.create(position.line, lineContent.length));
                }
            }
        }
        else if (node && isScalar(node) && node.value === "null") {
            const nodeStartPos = document.positionAt(node.range[0]);
            nodeStartPos.character += 1;
            const nodeEndPos = document.positionAt(node.range[2]);
            nodeEndPos.character += 1;
            overwriteRange = Range.create(nodeStartPos, nodeEndPos);
        }
        else if (node && isScalar(node) && node.value) {
            const start = document.positionAt(node.range[0]);
            if (offset > 0 && start.character > 0 && text.charAt(offset - 1) === "-") {
                start.character -= 1;
            }
            overwriteRange = Range.create(start, document.positionAt(node.range[1]));
        }
        else if (node && isScalar(node) && node.value === null && currentWord === "-") {
            overwriteRange = Range.create(position, position);
            this.arrayPrefixIndentation = " ";
        }
        else {
            let overwriteStart = document.offsetAt(position) - currentWord.length;
            if (overwriteStart > 0 && text[overwriteStart - 1] === '"') {
                overwriteStart--;
            }
            overwriteRange = Range.create(document.positionAt(overwriteStart), position);
        }
        const proposed = {};
        const existingProposeItem = "__";
        const collector = {
            add: (completionItem, oneOfSchema) => {
                const addSuggestionForParent = function (completionItem2) {
                    var _a;
                    const existsInYaml = ((_a = proposed[completionItem2.label]) == null ? void 0 : _a.label) === existingProposeItem;
                    if (existsInYaml) {
                        return;
                    }
                    const schema4 = completionItem2.parent.schema;
                    const schemaType = getSchemaTypeName(schema4);
                    const schemaDescription = schema4.markdownDescription || schema4.description;
                    let parentCompletion = result.items.find((item) => {
                        var _a2;
                        return ((_a2 = item.parent) == null ? void 0 : _a2.schema) === schema4 && item.kind === parentCompletionKind;
                    });
                    if (parentCompletion && parentCompletion.parent.insertTexts.includes(completionItem2.insertText)) {
                        return;
                    }
                    else if (!parentCompletion) {
                        parentCompletion = {
                            ...completionItem2,
                            label: schemaType,
                            documentation: schemaDescription,
                            sortText: "_" + schemaType,
                            kind: parentCompletionKind
                        };
                        parentCompletion.label = parentCompletion.label || completionItem2.label;
                        parentCompletion.parent.insertTexts = [completionItem2.insertText];
                        result.items.push(parentCompletion);
                    }
                    else {
                        parentCompletion.parent.insertTexts.push(completionItem2.insertText);
                    }
                };
                const isForParentCompletion = !!completionItem.parent;
                let label = completionItem.label;
                if (!label) {
                    console.warn(`Ignoring CompletionItem without label: ${JSON.stringify(completionItem)}`);
                    return;
                }
                if (!isString2(label)) {
                    label = String(label);
                }
                label = label.replace(/[\n]/g, "\u21B5");
                if (label.length > 60) {
                    const shortendedLabel = label.substr(0, 57).trim() + "...";
                    if (!proposed[shortendedLabel]) {
                        label = shortendedLabel;
                    }
                }
                if (completionItem.insertText.endsWith("$1") && !isForParentCompletion) {
                    completionItem.insertText = completionItem.insertText.substr(0, completionItem.insertText.length - 2);
                }
                if (overwriteRange && overwriteRange.start.line === overwriteRange.end.line) {
                    completionItem.textEdit = TextEdit.replace(overwriteRange, completionItem.insertText);
                }
                completionItem.label = label;
                if (isForParentCompletion) {
                    addSuggestionForParent(completionItem);
                    return;
                }
                if (this.arrayPrefixIndentation) {
                    this.updateCompletionText(completionItem, this.arrayPrefixIndentation + completionItem.insertText);
                }
                const existing = proposed[label];
                const isInsertTextDifferent = (existing == null ? void 0 : existing.label) !== existingProposeItem && (existing == null ? void 0 : existing.insertText) !== completionItem.insertText;
                if (!existing) {
                    proposed[label] = completionItem;
                    result.items.push(completionItem);
                }
                else if (isInsertTextDifferent) {
                    const mergedText = this.mergeSimpleInsertTexts(label, existing.insertText, completionItem.insertText, oneOfSchema);
                    if (mergedText) {
                        this.updateCompletionText(existing, mergedText);
                    }
                    else {
                        proposed[label] = completionItem;
                        result.items.push(completionItem);
                    }
                }
                if (existing && !existing.documentation && completionItem.documentation) {
                    existing.documentation = completionItem.documentation;
                }
            },
            error: (message) => {
                this.telemetry.sendError("yaml.completion.error", { error: convertErrorToTelemetryMsg(message) });
            },
            log: (message) => {
                console.log(message);
            },
            getNumberOfProposals: () => {
                return result.items.length;
            },
            result
        };
        if (this.customTags.length > 0) {
            this.getCustomTagValueCompletions(collector);
        }
        if (lineContent.endsWith("\n")) {
            lineContent = lineContent.substr(0, lineContent.length - 1);
        }
        try {
            const schema4 = await this.schemaService.getSchemaForResource(document.uri, currentDoc);
            if (!schema4 || schema4.errors.length) {
                if (position.line === 0 && position.character === 0 && !isModeline(lineContent)) {
                    const inlineSchemaCompletion = {
                        kind: CompletionItemKind.Text,
                        label: "Inline schema",
                        insertText: "# yaml-language-server: $schema=",
                        insertTextFormat: InsertTextFormat.PlainText
                    };
                    result.items.push(inlineSchemaCompletion);
                }
            }
            if (isModeline(lineContent) || isInComment(doc.tokens, offset)) {
                const schemaIndex = lineContent.indexOf("$schema=");
                if (schemaIndex !== -1 && schemaIndex + "$schema=".length <= position.character) {
                    this.schemaService.getAllSchemas().forEach((schema5) => {
                        var _a;
                        const schemaIdCompletion = {
                            kind: CompletionItemKind.Constant,
                            label: (_a = schema5.name) != null ? _a : schema5.uri,
                            detail: schema5.description,
                            insertText: schema5.uri,
                            insertTextFormat: InsertTextFormat.PlainText,
                            insertTextMode: InsertTextMode.asIs
                        };
                        result.items.push(schemaIdCompletion);
                    });
                }
                return result;
            }
            if (!schema4 || schema4.errors.length) {
                return result;
            }
            let currentProperty = null;
            if (!node) {
                if (!currentDoc.internalDocument.contents || isScalar(currentDoc.internalDocument.contents)) {
                    const map2 = currentDoc.internalDocument.createNode({});
                    map2.range = [offset, offset + 1, offset + 1];
                    currentDoc.internalDocument.contents = map2;
                    currentDoc.internalDocument = currentDoc.internalDocument;
                    node = map2;
                }
                else {
                    node = currentDoc.findClosestNode(offset, textBuffer);
                    foundByClosest = true;
                }
            }
            const originalNode = node;
            if (node) {
                if (lineContent.length === 0) {
                    node = currentDoc.internalDocument.contents;
                }
                else {
                    const parent = currentDoc.getParent(node);
                    if (parent) {
                        if (isScalar(node)) {
                            if (node.value) {
                                if (isPair(parent)) {
                                    if (parent.value === node) {
                                        if (lineContent.trim().length > 0 && lineContent.indexOf(":") < 0) {
                                            const map2 = this.createTempObjNode(currentWord, node, currentDoc);
                                            const parentParent = currentDoc.getParent(parent);
                                            if (isSeq(currentDoc.internalDocument.contents)) {
                                                const index = indexOf(currentDoc.internalDocument.contents, parent);
                                                if (typeof index === "number") {
                                                    currentDoc.internalDocument.set(index, map2);
                                                    currentDoc.internalDocument = currentDoc.internalDocument;
                                                }
                                            }
                                            else if (parentParent && (isMap(parentParent) || isSeq(parentParent))) {
                                                parentParent.set(parent.key, map2);
                                                currentDoc.internalDocument = currentDoc.internalDocument;
                                            }
                                            else {
                                                currentDoc.internalDocument.set(parent.key, map2);
                                                currentDoc.internalDocument = currentDoc.internalDocument;
                                            }
                                            currentProperty = map2.items[0];
                                            node = map2;
                                        }
                                        else if (lineContent.trim().length === 0) {
                                            const parentParent = currentDoc.getParent(parent);
                                            if (parentParent) {
                                                node = parentParent;
                                            }
                                        }
                                    }
                                    else if (parent.key === node) {
                                        const parentParent = currentDoc.getParent(parent);
                                        currentProperty = parent;
                                        if (parentParent) {
                                            node = parentParent;
                                        }
                                    }
                                }
                                else if (isSeq(parent)) {
                                    if (lineContent.trim().length > 0) {
                                        const map2 = this.createTempObjNode(currentWord, node, currentDoc);
                                        parent.delete(node);
                                        parent.add(map2);
                                        currentDoc.internalDocument = currentDoc.internalDocument;
                                        node = map2;
                                    }
                                    else {
                                        node = parent;
                                    }
                                }
                            }
                            else if (node.value === null) {
                                if (isPair(parent)) {
                                    if (parent.key === node) {
                                        node = parent;
                                    }
                                    else {
                                        if (isNode(parent.key) && parent.key.range) {
                                            const parentParent = currentDoc.getParent(parent);
                                            if (foundByClosest && parentParent && isMap(parentParent) && isMapContainsEmptyPair(parentParent)) {
                                                node = parentParent;
                                            }
                                            else {
                                                const parentPosition = document.positionAt(parent.key.range[0]);
                                                if (position.character > parentPosition.character && position.line !== parentPosition.line) {
                                                    const map2 = this.createTempObjNode(currentWord, node, currentDoc);
                                                    if (parentParent && (isMap(parentParent) || isSeq(parentParent))) {
                                                        parentParent.set(parent.key, map2);
                                                        currentDoc.internalDocument = currentDoc.internalDocument;
                                                    }
                                                    else {
                                                        currentDoc.internalDocument.set(parent.key, map2);
                                                        currentDoc.internalDocument = currentDoc.internalDocument;
                                                    }
                                                    currentProperty = map2.items[0];
                                                    node = map2;
                                                }
                                                else if (parentPosition.character === position.character) {
                                                    if (parentParent) {
                                                        node = parentParent;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (isSeq(parent)) {
                                    if (lineContent.charAt(position.character - 1) !== "-") {
                                        const map2 = this.createTempObjNode(currentWord, node, currentDoc);
                                        parent.delete(node);
                                        parent.add(map2);
                                        currentDoc.internalDocument = currentDoc.internalDocument;
                                        node = map2;
                                    }
                                    else if (lineContent.charAt(position.character - 1) === "-") {
                                        const map2 = this.createTempObjNode("", node, currentDoc);
                                        parent.delete(node);
                                        parent.add(map2);
                                        currentDoc.internalDocument = currentDoc.internalDocument;
                                        node = map2;
                                    }
                                    else {
                                        node = parent;
                                    }
                                }
                            }
                        }
                        else if (isMap(node)) {
                            if (!foundByClosest && lineContent.trim().length === 0 && isSeq(parent)) {
                                const nextLine = textBuffer.getLineContent(position.line + 1);
                                if (textBuffer.getLineCount() === position.line + 1 || nextLine.trim().length === 0) {
                                    node = parent;
                                }
                            }
                        }
                    }
                    else if (isScalar(node)) {
                        const map2 = this.createTempObjNode(currentWord, node, currentDoc);
                        currentDoc.internalDocument.contents = map2;
                        currentDoc.internalDocument = currentDoc.internalDocument;
                        currentProperty = map2.items[0];
                        node = map2;
                    }
                    else if (isMap(node)) {
                        for (const pair of node.items) {
                            if (isNode(pair.value) && pair.value.range && pair.value.range[0] === offset + 1) {
                                node = pair.value;
                            }
                        }
                    }
                    else if (isSeq(node)) {
                        if (lineContent.charAt(position.character - 1) !== "-") {
                            const map2 = this.createTempObjNode(currentWord, node, currentDoc);
                            map2.items = [];
                            currentDoc.internalDocument = currentDoc.internalDocument;
                            for (const pair of node.items) {
                                if (isMap(pair)) {
                                    pair.items.forEach((value) => {
                                        map2.items.push(value);
                                    });
                                }
                            }
                            node = map2;
                        }
                    }
                }
            }
            if (node && isMap(node)) {
                const properties = node.items;
                for (const p of properties) {
                    if (!currentProperty || currentProperty !== p) {
                        if (isScalar(p.key)) {
                            proposed[p.key.value + ""] = CompletionItem.create(existingProposeItem);
                        }
                    }
                }
                this.addPropertyCompletions(schema4, currentDoc, node, originalNode, "", collector, textBuffer, overwriteRange, doComplete);
                if (!schema4 && currentWord.length > 0 && text.charAt(offset - currentWord.length - 1) !== '"') {
                    collector.add({
                        kind: CompletionItemKind.Property,
                        label: currentWord,
                        insertText: this.getInsertTextForProperty(currentWord, null, ""),
                        insertTextFormat: InsertTextFormat.Snippet
                    });
                }
            }
            const types = {};
            this.getValueCompletions(schema4, currentDoc, node, offset, document, collector, types, doComplete);
        }
        catch (err) {
            this.telemetry.sendError("yaml.completion.error", { error: convertErrorToTelemetryMsg(err) });
        }
        this.finalizeParentCompletion(result);
        const uniqueItems = result.items.filter((arr, index, self) => index === self.findIndex((item) => item.label === arr.label && item.insertText === arr.insertText && item.kind === arr.kind));
        if ((uniqueItems == null ? void 0 : uniqueItems.length) > 0) {
            result.items = uniqueItems;
        }
        return result;
    }
    updateCompletionText(completionItem, text) {
        completionItem.insertText = text;
        if (completionItem.textEdit) {
            completionItem.textEdit.newText = text;
        }
    }
    mergeSimpleInsertTexts(label, existingText, addingText, oneOfSchema) {
        const containsNewLineAfterColon = (value) => {
            return value.includes("\n");
        };
        const startWithNewLine = (value) => {
            return value.startsWith("\n");
        };
        const isNullObject = (value) => {
            const index = value.indexOf("\n");
            return index > 0 && value.substring(index, value.length).trim().length === 0;
        };
        if (containsNewLineAfterColon(existingText) || containsNewLineAfterColon(addingText)) {
            if (oneOfSchema && isNullObject(existingText) && !isNullObject(addingText) && !startWithNewLine(addingText)) {
                return addingText;
            }
            return void 0;
        }
        const existingValues = this.getValuesFromInsertText(existingText);
        const addingValues = this.getValuesFromInsertText(addingText);
        const newValues = Array.prototype.concat(existingValues, addingValues);
        if (!newValues.length) {
            return void 0;
        }
        else if (newValues.length === 1) {
            return `${label}: \${1:${newValues[0]}}`;
        }
        else {
            return `${label}: \${1|${newValues.join(",")}|}`;
        }
    }
    getValuesFromInsertText(insertText) {
        const value = insertText.substring(insertText.indexOf(":") + 1).trim();
        if (!value) {
            return [];
        }
        const valueMath = value.match(/^\${1[|:]([^|]*)+\|?}$/);
        if (valueMath) {
            return valueMath[1].split(",");
        }
        return [value];
    }
    finalizeParentCompletion(result) {
        const reindexText = (insertTexts) => {
            let max$index = 0;
            return insertTexts.map((text) => {
                const match = text.match(/\$([0-9]+)|\${[0-9]+:/g);
                if (!match) {
                    return text;
                }
                const max$indexLocal = match.map((m) => +m.replace(/\${([0-9]+)[:|]/g, "$1").replace("$", "")).reduce((p, n) => n > p ? n : p, 0);
                const reindexedStr = text.replace(/\$([0-9]+)/g, (s, args) => "$" + (+args + max$index)).replace(/\${([0-9]+)[:|]/g, (s, args) => "${" + (+args + max$index) + ":");
                max$index += max$indexLocal;
                return reindexedStr;
            });
        };
        result.items.forEach((completionItem) => {
            if (isParentCompletionItem(completionItem)) {
                const indent = completionItem.parent.indent || "";
                const reindexedTexts = reindexText(completionItem.parent.insertTexts);
                let insertText = reindexedTexts.join(`
${indent}`);
                if (insertText.endsWith("$1")) {
                    insertText = insertText.substring(0, insertText.length - 2);
                }
                completionItem.insertText = this.arrayPrefixIndentation + insertText;
                if (completionItem.textEdit) {
                    completionItem.textEdit.newText = completionItem.insertText;
                }
                const mdText = insertText.replace(/\${[0-9]+[:|](.*)}/g, (s, arg) => arg).replace(/\$([0-9]+)/g, "");
                const originalDocumentation = completionItem.documentation ? [completionItem.documentation, "", "----", ""] : [];
                completionItem.documentation = {
                    kind: MarkupKind.Markdown,
                    value: [...originalDocumentation, "```yaml", indent + mdText, "```"].join("\n")
                };
                delete completionItem.parent;
            }
        });
    }
    createTempObjNode(currentWord, node, currentDoc) {
        const obj = {};
        obj[currentWord] = null;
        const map2 = currentDoc.internalDocument.createNode(obj);
        map2.range = node.range;
        map2.items[0].key.range = node.range;
        map2.items[0].value.range = node.range;
        return map2;
    }
    addPropertyCompletions(schema4, doc, node, originalNode, separatorAfter, collector, textBuffer, overwriteRange, doComplete) {
        var _a, _b, _c;
        const matchingSchemas = doc.getMatchingSchemas(schema4.schema, -1, null, doComplete);
        const existingKey = textBuffer.getText(overwriteRange);
        const lineContent = textBuffer.getLineContent(overwriteRange.start.line);
        const hasOnlyWhitespace = lineContent.trim().length === 0;
        const hasColon = lineContent.indexOf(":") !== -1;
        const isInArray = lineContent.trimLeft().indexOf("-") === 0;
        const nodeParent = doc.getParent(node);
        const matchOriginal = matchingSchemas.find((it) => it.node.internalNode === originalNode && it.schema.properties);
        const oneOfSchema = matchingSchemas.filter((schema5) => schema5.schema.oneOf).map((oneOfSchema2) => oneOfSchema2.schema.oneOf)[0];
        let didOneOfSchemaMatches = false;
        if ((oneOfSchema == null ? void 0 : oneOfSchema.length) < matchingSchemas.length) {
            oneOfSchema == null ? void 0 : oneOfSchema.forEach((property, index) => {
                var _a2, _b2;
                if (!((_a2 = matchingSchemas[index]) == null ? void 0 : _a2.schema.oneOf) && ((_b2 = matchingSchemas[index]) == null ? void 0 : _b2.schema.properties) === property.properties) {
                    didOneOfSchemaMatches = true;
                }
            });
        }
        for (const schema5 of matchingSchemas) {
            if ((schema5.node.internalNode === node && !matchOriginal || schema5.node.internalNode === originalNode && !hasColon || ((_a = schema5.node.parent) == null ? void 0 : _a.internalNode) === originalNode && !hasColon) && !schema5.inverted) {
                this.collectDefaultSnippets(schema5.schema, separatorAfter, collector, {
                    newLineFirst: false,
                    indentFirstObject: false,
                    shouldIndentWithTab: isInArray
                });
                const schemaProperties = schema5.schema.properties;
                if (schemaProperties) {
                    const maxProperties = schema5.schema.maxProperties;
                    if (maxProperties === void 0 || node.items === void 0 || node.items.length < maxProperties || node.items.length === maxProperties && !hasOnlyWhitespace) {
                        for (const key in schemaProperties) {
                            if (Object.prototype.hasOwnProperty.call(schemaProperties, key)) {
                                const propertySchema = schemaProperties[key];
                                if (typeof propertySchema === "object" && !propertySchema.deprecationMessage && !propertySchema["doNotSuggest"]) {
                                    let identCompensation = "";
                                    if (nodeParent && isSeq(nodeParent) && node.items.length <= 1 && !hasOnlyWhitespace) {
                                        const sourceText = textBuffer.getText();
                                        const indexOfSlash = sourceText.lastIndexOf("-", node.range[0] - 1);
                                        if (indexOfSlash >= 0) {
                                            const overwriteChars = overwriteRange.end.character - overwriteRange.start.character;
                                            identCompensation = " " + sourceText.slice(indexOfSlash + 1, node.range[1] - overwriteChars);
                                        }
                                    }
                                    identCompensation += this.arrayPrefixIndentation;
                                    let pair;
                                    if (propertySchema.type === "array" && (pair = node.items.find((it) => isScalar(it.key) && it.key.range && it.key.value === key && isScalar(it.value) && !it.value.value && textBuffer.getPosition(it.key.range[2]).line === overwriteRange.end.line - 1)) && pair) {
                                        if (Array.isArray(propertySchema.items)) {
                                            this.addSchemaValueCompletions(propertySchema.items[0], separatorAfter, collector, {}, "property");
                                        }
                                        else if (typeof propertySchema.items === "object" && propertySchema.items.type === "object") {
                                            this.addArrayItemValueCompletion(propertySchema.items, separatorAfter, collector);
                                        }
                                    }
                                    let insertText = key;
                                    if (!key.startsWith(existingKey) || !hasColon) {
                                        insertText = this.getInsertTextForProperty(key, propertySchema, separatorAfter, identCompensation + this.indentation);
                                    }
                                    const isNodeNull = isScalar(originalNode) && originalNode.value === null || isMap(originalNode) && originalNode.items.length === 0;
                                    const existsParentCompletion = ((_b = schema5.schema.required) == null ? void 0 : _b.length) > 0;
                                    if (!this.parentSkeletonSelectedFirst || !isNodeNull || !existsParentCompletion) {
                                        collector.add({
                                            kind: CompletionItemKind.Property,
                                            label: key,
                                            insertText,
                                            insertTextFormat: InsertTextFormat.Snippet,
                                            documentation: this.fromMarkup(propertySchema.markdownDescription) || propertySchema.description || ""
                                        }, didOneOfSchemaMatches);
                                    }
                                    if ((_c = schema5.schema.required) == null ? void 0 : _c.includes(key)) {
                                        collector.add({
                                            label: key,
                                            insertText: this.getInsertTextForProperty(key, propertySchema, separatorAfter, identCompensation + this.indentation),
                                            insertTextFormat: InsertTextFormat.Snippet,
                                            documentation: this.fromMarkup(propertySchema.markdownDescription) || propertySchema.description || "",
                                            parent: {
                                                schema: schema5.schema,
                                                indent: identCompensation
                                            }
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
                if (nodeParent && isSeq(nodeParent) && isPrimitiveType(schema5.schema)) {
                    this.addSchemaValueCompletions(schema5.schema, separatorAfter, collector, {}, "property", Array.isArray(nodeParent.items));
                }
                if (schema5.schema.propertyNames && schema5.schema.additionalProperties && schema5.schema.type === "object") {
                    const propertyNameSchema = asSchema2(schema5.schema.propertyNames);
                    const label = propertyNameSchema.title || "property";
                    collector.add({
                        kind: CompletionItemKind.Property,
                        label,
                        insertText: `\${1:${label}}: `,
                        insertTextFormat: InsertTextFormat.Snippet,
                        documentation: this.fromMarkup(propertyNameSchema.markdownDescription) || propertyNameSchema.description || ""
                    });
                }
            }
            if (nodeParent && schema5.node.internalNode === nodeParent && schema5.schema.defaultSnippets) {
                if (node.items.length === 1) {
                    this.collectDefaultSnippets(schema5.schema, separatorAfter, collector, {
                        newLineFirst: false,
                        indentFirstObject: false,
                        shouldIndentWithTab: true
                    }, 1);
                }
                else {
                    this.collectDefaultSnippets(schema5.schema, separatorAfter, collector, {
                        newLineFirst: false,
                        indentFirstObject: true,
                        shouldIndentWithTab: false
                    }, 1);
                }
            }
        }
    }
    getValueCompletions(schema4, doc, node, offset, document, collector, types, doComplete) {
        let parentKey = null;
        if (node && isScalar(node)) {
            node = doc.getParent(node);
        }
        if (!node) {
            this.addSchemaValueCompletions(schema4.schema, "", collector, types, "value");
            return;
        }
        if (isPair(node)) {
            const valueNode = node.value;
            if (valueNode && valueNode.range && offset > valueNode.range[0] + valueNode.range[2]) {
                return;
            }
            parentKey = isScalar(node.key) ? node.key.value + "" : null;
            node = doc.getParent(node);
        }
        if (node && (parentKey !== null || isSeq(node))) {
            const separatorAfter = "";
            const matchingSchemas = doc.getMatchingSchemas(schema4.schema, -1, null, doComplete);
            for (const s of matchingSchemas) {
                if (s.node.internalNode === node && !s.inverted && s.schema) {
                    if (s.schema.items) {
                        this.collectDefaultSnippets(s.schema, separatorAfter, collector, {
                            newLineFirst: false,
                            indentFirstObject: false,
                            shouldIndentWithTab: false
                        });
                        if (isSeq(node) && node.items) {
                            if (Array.isArray(s.schema.items)) {
                                const index = this.findItemAtOffset(node, document, offset);
                                if (index < s.schema.items.length) {
                                    this.addSchemaValueCompletions(s.schema.items[index], separatorAfter, collector, types, "value");
                                }
                            }
                            else if (typeof s.schema.items === "object" && (s.schema.items.type === "object" || isAnyOfAllOfOneOfType(s.schema.items))) {
                                this.addSchemaValueCompletions(s.schema.items, separatorAfter, collector, types, "value", true);
                            }
                            else {
                                this.addSchemaValueCompletions(s.schema.items, separatorAfter, collector, types, "value");
                            }
                        }
                    }
                    if (s.schema.properties) {
                        const propertySchema = s.schema.properties[parentKey];
                        if (propertySchema) {
                            this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types, "value");
                        }
                    }
                    else if (s.schema.additionalProperties) {
                        this.addSchemaValueCompletions(s.schema.additionalProperties, separatorAfter, collector, types, "value");
                    }
                }
            }
            if (types["boolean"]) {
                this.addBooleanValueCompletion(true, separatorAfter, collector);
                this.addBooleanValueCompletion(false, separatorAfter, collector);
            }
            if (types["null"]) {
                this.addNullValueCompletion(separatorAfter, collector);
            }
        }
    }
    addArrayItemValueCompletion(schema4, separatorAfter, collector, index) {
        const schemaType = getSchemaTypeName(schema4);
        const insertText = `- ${this.getInsertTextForObject(schema4, separatorAfter).insertText.trimLeft()}`;
        const schemaTypeTitle = schemaType ? " type `" + schemaType + "`" : "";
        const schemaDescription = schema4.description ? " (" + schema4.description + ")" : "";
        const documentation = this.getDocumentationWithMarkdownText(`Create an item of an array${schemaTypeTitle}${schemaDescription}`, insertText);
        collector.add({
            kind: this.getSuggestionKind(schema4.type),
            label: "- (array item) " + (schemaType || index),
            documentation,
            insertText,
            insertTextFormat: InsertTextFormat.Snippet
        });
    }
    getInsertTextForProperty(key, propertySchema, separatorAfter, indent = this.indentation) {
        const propertyText = this.getInsertTextForValue(key, "", "string");
        const resultText = propertyText + ":";
        let value;
        let nValueProposals = 0;
        if (propertySchema) {
            let type = Array.isArray(propertySchema.type) ? propertySchema.type[0] : propertySchema.type;
            if (!type) {
                if (propertySchema.properties) {
                    type = "object";
                }
                else if (propertySchema.items) {
                    type = "array";
                }
                else if (propertySchema.anyOf) {
                    type = "anyOf";
                }
            }
            if (Array.isArray(propertySchema.defaultSnippets)) {
                if (propertySchema.defaultSnippets.length === 1) {
                    const body = propertySchema.defaultSnippets[0].body;
                    if (isDefined2(body)) {
                        value = this.getInsertTextForSnippetValue(body, "", {
                            newLineFirst: true,
                            indentFirstObject: false,
                            shouldIndentWithTab: false
                        }, 1);
                        if (!value.startsWith(" ") && !value.startsWith("\n")) {
                            value = " " + value;
                        }
                    }
                }
                nValueProposals += propertySchema.defaultSnippets.length;
            }
            if (propertySchema.enum) {
                if (!value && propertySchema.enum.length === 1) {
                    value = " " + this.getInsertTextForGuessedValue(propertySchema.enum[0], "", type);
                }
                nValueProposals += propertySchema.enum.length;
            }
            if (propertySchema.const) {
                if (!value) {
                    value = this.getInsertTextForGuessedValue(propertySchema.const, "", type);
                    value = evaluateTab1Symbol(value);
                    value = " " + value;
                }
                nValueProposals++;
            }
            if (isDefined2(propertySchema.default)) {
                if (!value) {
                    value = " " + this.getInsertTextForGuessedValue(propertySchema.default, "", type);
                }
                nValueProposals++;
            }
            if (Array.isArray(propertySchema.examples) && propertySchema.examples.length) {
                if (!value) {
                    value = " " + this.getInsertTextForGuessedValue(propertySchema.examples[0], "", type);
                }
                nValueProposals += propertySchema.examples.length;
            }
            if (propertySchema.properties) {
                return `${resultText}
${this.getInsertTextForObject(propertySchema, separatorAfter, indent).insertText}`;
            }
            else if (propertySchema.items) {
                return `${resultText}
${indent}- ${this.getInsertTextForArray(propertySchema.items, separatorAfter, 1, indent).insertText}`;
            }
            if (nValueProposals === 0) {
                switch (type) {
                    case "boolean":
                        value = " $1";
                        break;
                    case "string":
                        value = " $1";
                        break;
                    case "object":
                        value = `
${indent}`;
                        break;
                    case "array":
                        value = `
${indent}- `;
                        break;
                    case "number":
                    case "integer":
                        value = " ${1:0}";
                        break;
                    case "null":
                        value = " ${1:null}";
                        break;
                    case "anyOf":
                        value = " $1";
                        break;
                    default:
                        return propertyText;
                }
            }
        }
        if (!value || nValueProposals > 1) {
            value = " $1";
        }
        return resultText + value + separatorAfter;
    }
    getInsertTextForObject(schema4, separatorAfter, indent = this.indentation, insertIndex = 1) {
        let insertText = "";
        if (!schema4.properties) {
            insertText = `${indent}$${insertIndex++}
`;
            return { insertText, insertIndex };
        }
        Object.keys(schema4.properties).forEach((key) => {
            const propertySchema = schema4.properties[key];
            let type = Array.isArray(propertySchema.type) ? propertySchema.type[0] : propertySchema.type;
            if (!type) {
                if (propertySchema.anyOf) {
                    type = "anyOf";
                }
                if (propertySchema.properties) {
                    type = "object";
                }
                if (propertySchema.items) {
                    type = "array";
                }
            }
            if (schema4.required && schema4.required.indexOf(key) > -1) {
                switch (type) {
                    case "boolean":
                    case "string":
                    case "number":
                    case "integer":
                    case "anyOf": {
                        let value = propertySchema.default || propertySchema.const;
                        if (value) {
                            if (type === "string") {
                                value = convertToStringValue(value);
                            }
                            insertText += `${indent}${key}: \${${insertIndex++}:${value}}
`;
                        }
                        else {
                            insertText += `${indent}${key}: $${insertIndex++}
`;
                        }
                        break;
                    }
                    case "array":
                        {
                            const arrayInsertResult = this.getInsertTextForArray(propertySchema.items, separatorAfter, insertIndex++, indent);
                            const arrayInsertLines = arrayInsertResult.insertText.split("\n");
                            let arrayTemplate = arrayInsertResult.insertText;
                            if (arrayInsertLines.length > 1) {
                                for (let index = 1; index < arrayInsertLines.length; index++) {
                                    const element = arrayInsertLines[index];
                                    arrayInsertLines[index] = `  ${element}`;
                                }
                                arrayTemplate = arrayInsertLines.join("\n");
                            }
                            insertIndex = arrayInsertResult.insertIndex;
                            insertText += `${indent}${key}:
${indent}${this.indentation}- ${arrayTemplate}
`;
                        }
                        break;
                    case "object":
                        {
                            const objectInsertResult = this.getInsertTextForObject(propertySchema, separatorAfter, `${indent}${this.indentation}`, insertIndex++);
                            insertIndex = objectInsertResult.insertIndex;
                            insertText += `${indent}${key}:
${objectInsertResult.insertText}
`;
                        }
                        break;
                }
            }
            else if (!this.disableDefaultProperties && propertySchema.default !== void 0) {
                switch (type) {
                    case "boolean":
                    case "number":
                    case "integer":
                        insertText += `${indent}${ //added quote if key is null
                        key === "null" ? this.getInsertTextForValue(key, "", "string") : key}: \${${insertIndex++}:${propertySchema.default}}
`;
                        break;
                    case "string":
                        insertText += `${indent}${key}: \${${insertIndex++}:${convertToStringValue(propertySchema.default)}}
`;
                        break;
                    case "array":
                    case "object":
                        break;
                }
            }
        });
        if (insertText.trim().length === 0) {
            insertText = `${indent}$${insertIndex++}
`;
        }
        insertText = insertText.trimRight() + separatorAfter;
        return { insertText, insertIndex };
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getInsertTextForArray(schema4, separatorAfter, insertIndex = 1, indent = this.indentation) {
        let insertText = "";
        if (!schema4) {
            insertText = `$${insertIndex++}`;
            return { insertText, insertIndex };
        }
        let type = Array.isArray(schema4.type) ? schema4.type[0] : schema4.type;
        if (!type) {
            if (schema4.properties) {
                type = "object";
            }
            if (schema4.items) {
                type = "array";
            }
        }
        switch (schema4.type) {
            case "boolean":
                insertText = `\${${insertIndex++}:false}`;
                break;
            case "number":
            case "integer":
                insertText = `\${${insertIndex++}:0}`;
                break;
            case "string":
                insertText = `\${${insertIndex++}:""}`;
                break;
            case "object":
                {
                    const objectInsertResult = this.getInsertTextForObject(schema4, separatorAfter, `${indent}  `, insertIndex++);
                    insertText = objectInsertResult.insertText.trimLeft();
                    insertIndex = objectInsertResult.insertIndex;
                }
                break;
        }
        return { insertText, insertIndex };
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getInsertTextForGuessedValue(value, separatorAfter, type) {
        switch (typeof value) {
            case "object":
                if (value === null) {
                    return "${1:null}" + separatorAfter;
                }
                return this.getInsertTextForValue(value, separatorAfter, type);
            case "string": {
                let snippetValue = JSON.stringify(value);
                snippetValue = snippetValue.substr(1, snippetValue.length - 2);
                snippetValue = this.getInsertTextForPlainText(snippetValue);
                if (type === "string") {
                    snippetValue = convertToStringValue(snippetValue);
                }
                return "${1:" + snippetValue + "}" + separatorAfter;
            }
            case "number":
            case "boolean":
                return "${1:" + value + "}" + separatorAfter;
        }
        return this.getInsertTextForValue(value, separatorAfter, type);
    }
    getInsertTextForPlainText(text) {
        return text.replace(/[\\$}]/g, "\\$&");
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getInsertTextForValue(value, separatorAfter, type) {
        if (value === null) {
            return "null";
        }
        switch (typeof value) {
            case "object": {
                const indent = this.indentation;
                return this.getInsertTemplateForValue(value, indent, { index: 1 }, separatorAfter);
            }
            case "number":
            case "boolean":
                return this.getInsertTextForPlainText(value + separatorAfter);
        }
        type = Array.isArray(type) ? type[0] : type;
        if (type === "string") {
            value = convertToStringValue(value);
        }
        return this.getInsertTextForPlainText(value + separatorAfter);
    }
    getInsertTemplateForValue(value, indent, navOrder, separatorAfter) {
        if (Array.isArray(value)) {
            let insertText = "\n";
            for (const arrValue of value) {
                insertText += `${indent}- \${${navOrder.index++}:${arrValue}}
`;
            }
            return insertText;
        }
        else if (typeof value === "object") {
            let insertText = "\n";
            for (const key in value) {
                if (Object.prototype.hasOwnProperty.call(value, key)) {
                    const element = value[key];
                    insertText += `${indent}\${${navOrder.index++}:${key}}:`;
                    let valueTemplate;
                    if (typeof element === "object") {
                        valueTemplate = `${this.getInsertTemplateForValue(element, indent + this.indentation, navOrder, separatorAfter)}`;
                    }
                    else {
                        valueTemplate = ` \${${navOrder.index++}:${this.getInsertTextForPlainText(element + separatorAfter)}}
`;
                    }
                    insertText += `${valueTemplate}`;
                }
            }
            return insertText;
        }
        return this.getInsertTextForPlainText(value + separatorAfter);
    }
    addSchemaValueCompletions(schema4, separatorAfter, collector, types, completionType, isArray) {
        if (typeof schema4 === "object") {
            this.addEnumValueCompletions(schema4, separatorAfter, collector, isArray);
            this.addDefaultValueCompletions(schema4, separatorAfter, collector);
            this.collectTypes(schema4, types);
            if (isArray && completionType === "value" && !isAnyOfAllOfOneOfType(schema4)) {
                this.addArrayItemValueCompletion(schema4, separatorAfter, collector);
            }
            if (Array.isArray(schema4.allOf)) {
                schema4.allOf.forEach((s) => {
                    return this.addSchemaValueCompletions(s, separatorAfter, collector, types, completionType, isArray);
                });
            }
            if (Array.isArray(schema4.anyOf)) {
                schema4.anyOf.forEach((s) => {
                    return this.addSchemaValueCompletions(s, separatorAfter, collector, types, completionType, isArray);
                });
            }
            if (Array.isArray(schema4.oneOf)) {
                schema4.oneOf.forEach((s) => {
                    return this.addSchemaValueCompletions(s, separatorAfter, collector, types, completionType, isArray);
                });
            }
        }
    }
    collectTypes(schema4, types) {
        if (Array.isArray(schema4.enum) || isDefined2(schema4.const)) {
            return;
        }
        const type = schema4.type;
        if (Array.isArray(type)) {
            type.forEach(function (t) {
                return types[t] = true;
            });
        }
        else if (type) {
            types[type] = true;
        }
    }
    addDefaultValueCompletions(schema4, separatorAfter, collector, arrayDepth = 0) {
        let hasProposals = false;
        if (isDefined2(schema4.default)) {
            let type = schema4.type;
            let value = schema4.default;
            for (let i = arrayDepth; i > 0; i--) {
                value = [value];
                type = "array";
            }
            let label;
            if (typeof value == "object") {
                label = "Default value";
            }
            else {
                label = value.toString().replace(doubleQuotesEscapeRegExp, '"');
            }
            collector.add({
                kind: this.getSuggestionKind(type),
                label,
                insertText: this.getInsertTextForValue(value, separatorAfter, type),
                insertTextFormat: InsertTextFormat.Snippet,
                detail: localize9("json.suggest.default", "Default value")
            });
            hasProposals = true;
        }
        if (Array.isArray(schema4.examples)) {
            schema4.examples.forEach((example) => {
                let type = schema4.type;
                let value = example;
                for (let i = arrayDepth; i > 0; i--) {
                    value = [value];
                    type = "array";
                }
                collector.add({
                    kind: this.getSuggestionKind(type),
                    label: this.getLabelForValue(value),
                    insertText: this.getInsertTextForValue(value, separatorAfter, type),
                    insertTextFormat: InsertTextFormat.Snippet
                });
                hasProposals = true;
            });
        }
        this.collectDefaultSnippets(schema4, separatorAfter, collector, {
            newLineFirst: true,
            indentFirstObject: true,
            shouldIndentWithTab: true
        });
        if (!hasProposals && typeof schema4.items === "object" && !Array.isArray(schema4.items)) {
            this.addDefaultValueCompletions(schema4.items, separatorAfter, collector, arrayDepth + 1);
        }
    }
    addEnumValueCompletions(schema4, separatorAfter, collector, isArray) {
        if (isDefined2(schema4.const) && !isArray) {
            collector.add({
                kind: this.getSuggestionKind(schema4.type),
                label: this.getLabelForValue(schema4.const),
                insertText: this.getInsertTextForValue(schema4.const, separatorAfter, schema4.type),
                insertTextFormat: InsertTextFormat.Snippet,
                documentation: this.fromMarkup(schema4.markdownDescription) || schema4.description
            });
        }
        if (Array.isArray(schema4.enum)) {
            for (let i = 0, length = schema4.enum.length; i < length; i++) {
                const enm = schema4.enum[i];
                let documentation = this.fromMarkup(schema4.markdownDescription) || schema4.description;
                if (schema4.markdownEnumDescriptions && i < schema4.markdownEnumDescriptions.length && this.doesSupportMarkdown()) {
                    documentation = this.fromMarkup(schema4.markdownEnumDescriptions[i]);
                }
                else if (schema4.enumDescriptions && i < schema4.enumDescriptions.length) {
                    documentation = schema4.enumDescriptions[i];
                }
                collector.add({
                    kind: this.getSuggestionKind(schema4.type),
                    label: this.getLabelForValue(enm),
                    insertText: this.getInsertTextForValue(enm, separatorAfter, schema4.type),
                    insertTextFormat: InsertTextFormat.Snippet,
                    documentation
                });
            }
        }
    }
    getLabelForValue(value) {
        if (value === null) {
            return "null";
        }
        if (Array.isArray(value)) {
            return JSON.stringify(value);
        }
        return "" + value;
    }
    collectDefaultSnippets(schema4, separatorAfter, collector, settings, arrayDepth = 0) {
        if (Array.isArray(schema4.defaultSnippets)) {
            for (const s of schema4.defaultSnippets) {
                let type = schema4.type;
                let value = s.body;
                let label = s.label;
                let insertText;
                let filterText;
                if (isDefined2(value)) {
                    const type2 = s.type || schema4.type;
                    if (arrayDepth === 0 && type2 === "array") {
                        const fixedObj = {};
                        Object.keys(value).forEach((val, index) => {
                            if (index === 0 && !val.startsWith("-")) {
                                fixedObj[`- ${val}`] = value[val];
                            }
                            else {
                                fixedObj[`  ${val}`] = value[val];
                            }
                        });
                        value = fixedObj;
                    }
                    insertText = this.getInsertTextForSnippetValue(value, separatorAfter, settings);
                    label = label || this.getLabelForSnippetValue(value);
                }
                else if (typeof s.bodyText === "string") {
                    let prefix = "", suffix = "", indent = "";
                    for (let i = arrayDepth; i > 0; i--) {
                        prefix = prefix + indent + "[\n";
                        suffix = suffix + "\n" + indent + "]";
                        indent += this.indentation;
                        type = "array";
                    }
                    insertText = prefix + indent + s.bodyText.split("\n").join("\n" + indent) + suffix + separatorAfter;
                    label = label || insertText;
                    filterText = insertText.replace(/[\n]/g, "");
                }
                collector.add({
                    kind: s.suggestionKind || this.getSuggestionKind(type),
                    label,
                    sortText: s.sortText || s.label,
                    documentation: this.fromMarkup(s.markdownDescription) || s.description,
                    insertText,
                    insertTextFormat: InsertTextFormat.Snippet,
                    filterText
                });
            }
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getInsertTextForSnippetValue(value, separatorAfter, settings, depth) {
        const replacer = (value2) => {
            if (typeof value2 === "string") {
                if (value2[0] === "^") {
                    return value2.substr(1);
                }
                if (value2 === "true" || value2 === "false") {
                    return `"${value2}"`;
                }
            }
            return value2;
        };
        return stringifyObject2(value, "", replacer, { ...settings, indentation: this.indentation }, depth) + separatorAfter;
    }
    addBooleanValueCompletion(value, separatorAfter, collector) {
        collector.add({
            kind: this.getSuggestionKind("boolean"),
            label: value ? "true" : "false",
            insertText: this.getInsertTextForValue(value, separatorAfter, "boolean"),
            insertTextFormat: InsertTextFormat.Snippet,
            documentation: ""
        });
    }
    addNullValueCompletion(separatorAfter, collector) {
        collector.add({
            kind: this.getSuggestionKind("null"),
            label: "null",
            insertText: "null" + separatorAfter,
            insertTextFormat: InsertTextFormat.Snippet,
            documentation: ""
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getLabelForSnippetValue(value) {
        const label = JSON.stringify(value);
        return label.replace(/\$\{\d+:([^}]+)\}|\$\d+/g, "$1");
    }
    getCustomTagValueCompletions(collector) {
        const validCustomTags = filterInvalidCustomTags(this.customTags);
        validCustomTags.forEach((validTag) => {
            const label = validTag.split(" ")[0];
            this.addCustomTagValueCompletion(collector, " ", label);
        });
    }
    addCustomTagValueCompletion(collector, separatorAfter, label) {
        collector.add({
            kind: this.getSuggestionKind("string"),
            label,
            insertText: label + separatorAfter,
            insertTextFormat: InsertTextFormat.Snippet,
            documentation: ""
        });
    }
    getDocumentationWithMarkdownText(documentation, insertText) {
        let res = documentation;
        if (this.doesSupportMarkdown()) {
            insertText = insertText.replace(/\${[0-9]+[:|](.*)}/g, (s, arg) => {
                return arg;
            }).replace(/\$([0-9]+)/g, "");
            res = this.fromMarkup(`${documentation}
 \`\`\`
${insertText}
\`\`\``);
        }
        return res;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getSuggestionKind(type) {
        if (Array.isArray(type)) {
            const array = type;
            type = array.length > 0 ? array[0] : null;
        }
        if (!type) {
            return CompletionItemKind.Value;
        }
        switch (type) {
            case "string":
                return CompletionItemKind.Value;
            case "object":
                return CompletionItemKind.Module;
            case "property":
                return CompletionItemKind.Property;
            default:
                return CompletionItemKind.Value;
        }
    }
    getCurrentWord(doc, offset) {
        let i = offset - 1;
        const text = doc.getText();
        while (i >= 0 && ' 	\n\r\v":{[,]}'.indexOf(text.charAt(i)) === -1) {
            i--;
        }
        return text.substring(i + 1, offset);
    }
    fromMarkup(markupString) {
        if (markupString && this.doesSupportMarkdown()) {
            return {
                kind: MarkupKind.Markdown,
                value: markupString
            };
        }
        return void 0;
    }
    doesSupportMarkdown() {
        if (this.supportsMarkdown === void 0) {
            const completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;
            this.supportsMarkdown = completion && completion.completionItem && Array.isArray(completion.completionItem.documentationFormat) && completion.completionItem.documentationFormat.indexOf(MarkupKind.Markdown) !== -1;
        }
        return this.supportsMarkdown;
    }
    findItemAtOffset(seqNode, doc, offset) {
        for (let i = seqNode.items.length - 1; i >= 0; i--) {
            const node = seqNode.items[i];
            if (isNode(node)) {
                if (node.range) {
                    if (offset > node.range[1]) {
                        return i;
                    }
                    else if (offset >= node.range[0]) {
                        return i;
                    }
                }
            }
        }
        return 0;
    }
};
var isNumberExp = /^\d+$/;
function convertToStringValue(param) {
    let value;
    if (typeof param === "string") {
        value = param;
    }
    else {
        value = "" + param;
    }
    if (value.length === 0) {
        return value;
    }
    if (value === "true" || value === "false" || value === "null" || isNumberExp.test(value)) {
        return `"${value}"`;
    }
    if (value.indexOf('"') !== -1) {
        value = value.replace(doubleQuotesEscapeRegExp, '"');
    }
    let doQuote = !isNaN(parseInt(value)) || value.charAt(0) === "@";
    if (!doQuote) {
        let idx = value.indexOf(":", 0);
        for (; idx > 0 && idx < value.length; idx = value.indexOf(":", idx + 1)) {
            if (idx === value.length - 1) {
                doQuote = true;
                break;
            }
            const nextChar = value.charAt(idx + 1);
            if (nextChar === "	" || nextChar === " ") {
                doQuote = true;
                break;
            }
        }
    }
    if (doQuote) {
        value = `"${value}"`;
    }
    return value;
}
function evaluateTab1Symbol(value) {
    return value.replace(/\$\{1:(.*)\}/, "$1");
}
function isParentCompletionItem(item) {
    return "parent" in item;
}
// src/fillers/schemaSelectionHandlers.ts
function JSONSchemaSelection() {
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlDefinition.js
var YamlDefinition = class {
    constructor(telemetry) {
        this.telemetry = telemetry;
    }
    getDefinition(document, params) {
        try {
            const yamlDocument = yamlDocumentsCache.getYamlDocument(document);
            const offset = document.offsetAt(params.position);
            const currentDoc = matchOffsetToDocument(offset, yamlDocument);
            if (currentDoc) {
                const [node] = currentDoc.getNodeFromPosition(offset, new TextBuffer(document));
                if (node && isAlias(node)) {
                    const defNode = node.resolve(currentDoc.internalDocument);
                    if (defNode && defNode.range) {
                        const targetRange = Range.create(document.positionAt(defNode.range[0]), document.positionAt(defNode.range[2]));
                        const selectionRange = Range.create(document.positionAt(defNode.range[0]), document.positionAt(defNode.range[1]));
                        return [LocationLink.create(document.uri, targetRange, selectionRange)];
                    }
                }
            }
        }
        catch (err) {
            this.telemetry.sendError("yaml.definition.error", { error: convertErrorToTelemetryMsg(err) });
        }
        return void 0;
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/yamlLanguageService.js
var SchemaPriority;
(function (SchemaPriority2) {
    SchemaPriority2[SchemaPriority2["SchemaStore"] = 1] = "SchemaStore";
    SchemaPriority2[SchemaPriority2["SchemaAssociation"] = 2] = "SchemaAssociation";
    SchemaPriority2[SchemaPriority2["Settings"] = 3] = "Settings";
})(SchemaPriority || (SchemaPriority = {}));
function getLanguageService(schemaRequestService, workspaceContext, connection, telemetry, yamlSettings, clientCapabilities) {
    const schemaService = new YAMLSchemaService(schemaRequestService, workspaceContext);
    const completer = new YamlCompletion(schemaService, clientCapabilities, yamlDocumentsCache, telemetry);
    const hover = new YAMLHover(schemaService, telemetry);
    const yamlDocumentSymbols = new YAMLDocumentSymbols(schemaService, telemetry);
    const yamlValidation = new YAMLValidation(schemaService, telemetry);
    const formatter = new YAMLFormatter();
    const yamlCodeActions = new YamlCodeActions(clientCapabilities);
    const yamlCodeLens = new YamlCodeLens(schemaService, telemetry);
    const yamlLinks = new YamlLinks(telemetry);
    const yamlDefinition = new YamlDefinition(telemetry);
    new JSONSchemaSelection(schemaService, yamlSettings, connection);
    registerCommands(commandExecutor, connection);
    return {
        configure: (settings) => {
            schemaService.clearExternalSchemas();
            if (settings.schemas) {
                schemaService.schemaPriorityMapping = /* @__PURE__ */ new Map();
                settings.schemas.forEach((settings2) => {
                    const currPriority = settings2.priority ? settings2.priority : 0;
                    schemaService.addSchemaPriority(settings2.uri, currPriority);
                    schemaService.registerExternalSchema(settings2.uri, settings2.fileMatch, settings2.schema, settings2.name, settings2.description, settings2.versions);
                });
            }
            yamlValidation.configure(settings);
            hover.configure(settings);
            completer.configure(settings);
            formatter.configure(settings);
            yamlCodeActions.configure(settings);
        },
        registerCustomSchemaProvider: (schemaProvider) => {
            schemaService.registerCustomSchemaProvider(schemaProvider);
        },
        findLinks: yamlLinks.findLinks.bind(yamlLinks),
        doComplete: completer.doComplete.bind(completer),
        doValidation: yamlValidation.doValidation.bind(yamlValidation),
        doHover: hover.doHover.bind(hover),
        findDocumentSymbols: yamlDocumentSymbols.findDocumentSymbols.bind(yamlDocumentSymbols),
        findDocumentSymbols2: yamlDocumentSymbols.findHierarchicalDocumentSymbols.bind(yamlDocumentSymbols),
        doDefinition: yamlDefinition.getDefinition.bind(yamlDefinition),
        resetSchema: (uri) => {
            return schemaService.onResourceChange(uri);
        },
        doFormat: formatter.format.bind(formatter),
        doDocumentOnTypeFormatting,
        addSchema: (schemaID, schema4) => {
            return schemaService.saveSchema(schemaID, schema4);
        },
        deleteSchema: (schemaID) => {
            return schemaService.deleteSchema(schemaID);
        },
        modifySchemaContent: (schemaAdditions) => {
            return schemaService.addContent(schemaAdditions);
        },
        deleteSchemaContent: (schemaDeletions) => {
            return schemaService.deleteContent(schemaDeletions);
        },
        deleteSchemasWhole: (schemaDeletions) => {
            return schemaService.deleteSchemas(schemaDeletions);
        },
        getFoldingRanges: getFoldingRanges2,
        getCodeAction: (document, params) => {
            return yamlCodeActions.getCodeAction(document, params);
        },
        getCodeLens: (document) => {
            return yamlCodeLens.getCodeLens(document);
        },
        resolveCodeLens: (param) => yamlCodeLens.resolveCodeLens(param)
    };
}
// ../../node_modules/yaml-language-server/lib/esm/yamlSettings.js
var import_vscode_languageserver = __toESM(require_main4());

var SettingsState = class {
    constructor() {
        this.yamlConfigurationSettings = void 0;
        this.schemaAssociations = void 0;
        this.formatterRegistration = null;
        this.specificValidatorPaths = [];
        this.schemaConfigurationSettings = [];
        this.yamlShouldValidate = true;
        this.yamlFormatterSettings = {
            singleQuote: false,
            bracketSpacing: true,
            proseWrap: "preserve",
            printWidth: 80,
            enable: true
        };
        this.yamlShouldHover = true;
        this.yamlShouldCompletion = true;
        this.schemaStoreSettings = [];
        this.customTags = [];
        this.schemaStoreEnabled = true;
        this.schemaStoreUrl = JSON_SCHEMASTORE_URL;
        this.indentation = void 0;
        this.disableAdditionalProperties = false;
        this.disableDefaultProperties = false;
        this.suggest = {
            parentSkeletonSelectedFirst: false
        };
        this.maxItemsComputed = 5e3;
        this.pendingValidationRequests = {};
        this.validationDelayMs = 200;
        this.documents = new import_vscode_languageserver.TextDocuments(TextDocument3);
        this.workspaceRoot = null;
        this.workspaceFolders = [];
        this.clientDynamicRegisterSupport = false;
        this.hierarchicalDocumentSymbolSupport = false;
        this.hasWorkspaceFolderCapability = false;
        this.hasConfigurationCapability = false;
        this.useVSCodeContentRequest = false;
        this.yamlVersion = "1.2";
        this.useSchemaSelectionRequests = false;
        this.hasWsChangeWatchedFileDynamicRegistration = false;
        this.fileExtensions = [".yml", ".yaml"];
    }
};



;// CONCATENATED MODULE: ./packages/ace-linters/services/yaml/yaml-service.ts


class YamlService extends base_service/* BaseService */.b {
    $service;
    schemas = {};
    constructor(mode) {
        super(mode);
        this.$service = getLanguageService((uri) => {
            uri = uri.replace("file:///", "");
            let jsonSchema = this.schemas[uri];
            if (jsonSchema)
                return Promise.resolve(jsonSchema);
            return Promise.reject(`Unable to load schema at ${uri}`);
        }, null, null, null, null);
    }
    $getYamlSchemaUri(sessionID) {
        return this.getOption(sessionID, "yamlSchemaUri");
    }
    addDocument(document) {
        super.addDocument(document);
        this.$configureService(document.uri);
    }
    $configureService(sessionID) {
        let schemas = this.getOption(sessionID, "yamlSchemas");
        schemas?.forEach((el) => {
            if (el.uri === this.$getYamlSchemaUri(sessionID)) {
                el.fileMatch ??= [];
                el.fileMatch.push(sessionID);
            }
            let schema = el.schema ?? this.schemas[el.uri];
            if (schema)
                this.schemas[el.uri] = schema;
            this.$service.resetSchema(el.uri);
            el.schema = undefined;
        });
        this.$service.configure({
            schemas: schemas,
            hover: true,
            validate: true,
            completion: true,
            format: true,
            customTags: false
        });
    }
    removeDocument(document) {
        super.removeDocument(document);
        let schemas = this.getOption(document.uri, "yamlSchemas");
        schemas?.forEach((el) => {
            if (el.uri === this.$getYamlSchemaUri(document.uri)) {
                el.fileMatch = el.fileMatch?.filter((pattern) => pattern != document.uri);
            }
        });
        this.$service.configure({
            schemas: schemas
        });
    }
    setOptions(sessionID, options, merge = false) {
        super.setOptions(sessionID, options, merge);
        this.$configureService(sessionID);
    }
    setGlobalOptions(options) {
        super.setGlobalOptions(options);
        this.$configureService("");
    }
    format(document, range, options) {
        let fullDocument = this.getDocument(document.uri);
        if (!fullDocument)
            return [];
        return this.$service.doFormat(fullDocument, {}); //TODO: options?
    }
    async doHover(document, position) {
        let fullDocument = this.getDocument(document.uri);
        if (!fullDocument)
            return null;
        return this.$service.doHover(fullDocument, position);
    }
    async doValidation(document) {
        let fullDocument = this.getDocument(document.uri);
        if (!fullDocument)
            return [];
        return this.$service.doValidation(fullDocument, false);
    }
    async doComplete(document, position) {
        let fullDocument = this.getDocument(document.uri);
        if (!fullDocument)
            return null;
        return this.$service.doComplete(fullDocument, position, false);
    }
    async doResolve(item) {
        return item;
    }
}


/***/ })

}]);
//# sourceMappingURL=bundle.549.js.map