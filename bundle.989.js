"use strict";
(self["webpackChunkace_linters_root"] = self["webpackChunkace_linters_root"] || []).push([[989],{

/***/ 10989:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var Rules = (__webpack_require__(18705)/* .AbapHighlightRules */ .c);
var FoldMode = (__webpack_require__(35090)/* .FoldMode */ .Z);
var Range = (__webpack_require__(59082)/* .Range */ .e);
var TextMode = (__webpack_require__(98030).Mode);
var oop = __webpack_require__(89359);

function Mode() {
    this.HighlightRules = Rules;
    this.foldingRules = new FoldMode();
}

oop.inherits(Mode, TextMode);

(function() {
    
    this.lineCommentStart = '"';
    
    this.getNextLineIndent = function(state, line, tab) {
        var indent = this.$getIndent(line);
        return indent;
    };    
    
    this.$id = "ace/mode/abap";
}).call(Mode.prototype);

exports.Mode = Mode;


/***/ }),

/***/ 18705:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/*
 * based on
 * " Vim ABAP syntax file
 * "    Language: SAP - ABAP/R4
 * "    Revision: 2.1
 * "  Maintainer: Marius Piedallu van Wyk <lailoken@gmail.com>
 * " Last Change: 2012 Oct 23
 */



var oop = __webpack_require__(89359);
var TextHighlightRules = (__webpack_require__(28053)/* .TextHighlightRules */ .K);

var AbapHighlightRules = function() {

    var keywordMapper = this.createKeywordMapper({
        "variable.language": "this",
        "keyword": 
            "ADD ALIAS ALIASES ASCENDING ASSERT ASSIGN ASSIGNING AT BACK" +
            " CALL CASE CATCH CHECK CLASS CLEAR CLOSE CNT COLLECT COMMIT COMMUNICATION COMPUTE CONCATENATE CONDENSE CONSTANTS CONTINUE CONTROLS CONVERT CREATE CURRENCY" +
            " DATA DEFINE DEFINITION DEFERRED DELETE DESCENDING DESCRIBE DETAIL DIVIDE DO" +
            " ELSE ELSEIF ENDAT ENDCASE ENDCLASS ENDDO ENDEXEC ENDFORM ENDFUNCTION ENDIF ENDIFEND ENDINTERFACE ENDLOOP ENDMETHOD ENDMODULE ENDON ENDPROVIDE ENDSELECT ENDTRY ENDWHILE EVENT EVENTS EXEC EXIT EXPORT EXPORTING EXTRACT" +
            " FETCH FIELDS FORM FORMAT FREE FROM FUNCTION" +
            " GENERATE GET" +
            " HIDE" +
            " IF IMPORT IMPORTING INDEX INFOTYPES INITIALIZATION INTERFACE INTERFACES INPUT INSERT IMPLEMENTATION" +
            " LEAVE LIKE LINE LOAD LOCAL LOOP" +
            " MESSAGE METHOD METHODS MODIFY MODULE MOVE MULTIPLY" +
            " ON OVERLAY OPTIONAL OTHERS" +
            " PACK PARAMETERS PERFORM POSITION PROGRAM PROVIDE PUT" +
            " RAISE RANGES READ RECEIVE RECEIVING REDEFINITION REFERENCE REFRESH REJECT REPLACE REPORT RESERVE RESTORE RETURN RETURNING ROLLBACK" +
            " SCAN SCROLL SEARCH SELECT SET SHIFT SKIP SORT SORTED SPLIT STANDARD STATICS STEP STOP SUBMIT SUBTRACT SUM SUMMARY SUPPRESS" +
            " TABLES TIMES TRANSFER TRANSLATE TRY TYPE TYPES" +
            " UNASSIGN ULINE UNPACK UPDATE" +
            " WHEN WHILE WINDOW WRITE" +
            " OCCURS STRUCTURE OBJECT PROPERTY" +
            " CASTING APPEND RAISING VALUE COLOR" +
            " CHANGING EXCEPTION EXCEPTIONS DEFAULT CHECKBOX COMMENT" +
            " ID NUMBER FOR TITLE OUTPUT" +
            " WITH EXIT USING" +
            " INTO WHERE GROUP BY HAVING ORDER BY SINGLE" +
            " APPENDING CORRESPONDING FIELDS OF TABLE" +
            " LEFT RIGHT OUTER INNER JOIN AS CLIENT SPECIFIED BYPASSING BUFFER UP TO ROWS CONNECTING" +
            " EQ NE LT LE GT GE NOT AND OR XOR IN LIKE BETWEEN",
        "constant.language": 
            "TRUE FALSE NULL SPACE",
        "support.type": 
            "c n i p f d t x string xstring decfloat16 decfloat34",
        "keyword.operator":
            "abs sign ceil floor trunc frac acos asin atan cos sin tan" +
            " abapOperator cosh sinh tanh exp log log10 sqrt" +
            " strlen xstrlen charlen numofchar dbmaxlen lines" 
    }, "text", true, " ");

    var compoundKeywords = "WITH\\W+(?:HEADER\\W+LINE|FRAME|KEY)|NO\\W+STANDARD\\W+PAGE\\W+HEADING|"+
        "EXIT\\W+FROM\\W+STEP\\W+LOOP|BEGIN\\W+OF\\W+(?:BLOCK|LINE)|BEGIN\\W+OF|"+
        "END\\W+OF\\W+(?:BLOCK|LINE)|END\\W+OF|NO\\W+INTERVALS|"+
        "RESPECTING\\W+BLANKS|SEPARATED\\W+BY|USING\\W+(?:EDIT\\W+MASK)|"+
        "WHERE\\W+(?:LINE)|RADIOBUTTON\\W+GROUP|REF\\W+TO|"+
        "(?:PUBLIC|PRIVATE|PROTECTED)(?:\\W+SECTION)?|DELETING\\W+(?:TRAILING|LEADING)"+
        "(?:ALL\\W+OCCURRENCES)|(?:FIRST|LAST)\\W+OCCURRENCE|INHERITING\\W+FROM|"+
        "LINE-COUNT|ADD-CORRESPONDING|AUTHORITY-CHECK|BREAK-POINT|CLASS-DATA|CLASS-METHODS|"+
        "CLASS-METHOD|DIVIDE-CORRESPONDING|EDITOR-CALL|END-OF-DEFINITION|END-OF-PAGE|END-OF-SELECTION|"+
        "FIELD-GROUPS|FIELD-SYMBOLS|FUNCTION-POOL|MOVE-CORRESPONDING|MULTIPLY-CORRESPONDING|NEW-LINE|"+
        "NEW-PAGE|NEW-SECTION|PRINT-CONTROL|RP-PROVIDE-FROM-LAST|SELECT-OPTIONS|SELECTION-SCREEN|"+
        "START-OF-SELECTION|SUBTRACT-CORRESPONDING|SYNTAX-CHECK|SYNTAX-TRACE|TOP-OF-PAGE|TYPE-POOL|"+
        "TYPE-POOLS|LINE-SIZE|LINE-COUNT|MESSAGE-ID|DISPLAY-MODE|READ(?:-ONLY)?|"+
        "IS\\W+(?:NOT\\W+)?(?:ASSIGNED|BOUND|INITIAL|SUPPLIED)";
     
    this.$rules = {
        "start" : [
            {token : "string", regex : "`", next  : "string"},
            {token : "string", regex : "'", next  : "qstring"},
            {token : "doc.comment", regex : /^\*.+/},
            {token : "comment",  regex : /".+$/},
            {token : "invalid", regex: "\\.{2,}"},
            {token : "keyword.operator", regex: /\W[\-+%=<>*]\W|\*\*|[~:,\.&$]|->*?|=>/},
            {token : "paren.lparen", regex : "[\\[({]"},
            {token : "paren.rparen", regex : "[\\])}]"},
            {token : "constant.numeric", regex: "[+-]?\\d+\\b"},
            {token : "variable.parameter", regex : /sy|pa?\d\d\d\d\|t\d\d\d\.|innnn/}, 
            {token : "keyword", regex : compoundKeywords}, 
            {token : "variable.parameter", regex : /\w+-\w[\-\w]*/},
            {token : keywordMapper, regex : "\\b\\w+\\b"},
            {caseInsensitive: true}
        ],
        "qstring" : [
            {token : "constant.language.escape",   regex : "''"},
            {token : "string", regex : "'",     next  : "start"},
            {defaultToken : "string"}
        ],
        "string" : [
            {token : "constant.language.escape",   regex : "``"},
            {token : "string", regex : "`",     next  : "start"},
            {defaultToken : "string"}
        ]
    };
};
oop.inherits(AbapHighlightRules, TextHighlightRules);

exports.c = AbapHighlightRules;


/***/ }),

/***/ 35090:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var oop = __webpack_require__(89359);
var BaseFoldMode = (__webpack_require__(15369).FoldMode);
var Range = (__webpack_require__(59082)/* .Range */ .e);

var FoldMode = exports.Z = function() {};
oop.inherits(FoldMode, BaseFoldMode);

(function() {

    this.getFoldWidgetRange = function(session, foldStyle, row) {
        var range = this.indentationBlock(session, row);
        if (range)
            return range;

        var re = /\S/;
        var line = session.getLine(row);
        var startLevel = line.search(re);
        if (startLevel == -1 || line[startLevel] != "#")
            return;

        var startColumn = line.length;
        var maxRow = session.getLength();
        var startRow = row;
        var endRow = row;

        while (++row < maxRow) {
            line = session.getLine(row);
            var level = line.search(re);

            if (level == -1)
                continue;

            if (line[level] != "#")
                break;

            endRow = row;
        }

        if (endRow > startRow) {
            var endColumn = session.getLine(endRow).length;
            return new Range(startRow, startColumn, endRow, endColumn);
        }
    };

    // must return "" if there's no fold, to enable caching
    this.getFoldWidget = function(session, foldStyle, row) {
        var line = session.getLine(row);
        var indent = line.search(/\S/);
        var next = session.getLine(row + 1);
        var prev = session.getLine(row - 1);
        var prevIndent = prev.search(/\S/);
        var nextIndent = next.search(/\S/);

        if (indent == -1) {
            session.foldWidgets[row - 1] = prevIndent!= -1 && prevIndent < nextIndent ? "start" : "";
            return "";
        }

        // documentation comments
        if (prevIndent == -1) {
            if (indent == nextIndent && line[indent] == "#" && next[indent] == "#") {
                session.foldWidgets[row - 1] = "";
                session.foldWidgets[row + 1] = "";
                return "start";
            }
        } else if (prevIndent == indent && line[indent] == "#" && prev[indent] == "#") {
            if (session.getLine(row - 2).search(/\S/) == -1) {
                session.foldWidgets[row - 1] = "start";
                session.foldWidgets[row + 1] = "";
                return "";
            }
        }

        if (prevIndent!= -1 && prevIndent < indent)
            session.foldWidgets[row - 1] = "start";
        else
            session.foldWidgets[row - 1] = "";

        if (indent < nextIndent)
            return "start";
        else
            return "";
    };

}).call(FoldMode.prototype);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLjk4OS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBYTs7QUFFYixZQUFZLHdEQUFvRDtBQUNoRSxlQUFlLDhDQUFvQztBQUNuRCxZQUFZLDJDQUF5QjtBQUNyQyxlQUFlLGlDQUFzQjtBQUNyQyxVQUFVLG1CQUFPLENBQUMsS0FBWTs7QUFFOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELFlBQVk7Ozs7Ozs7O0FDM0JaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWIsVUFBVSxtQkFBTyxDQUFDLEtBQVk7QUFDOUIseUJBQXlCLHdEQUFvRDs7QUFFN0U7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGdEQUFnRDtBQUM3RCxhQUFhLGlEQUFpRDtBQUM5RCxhQUFhLHVDQUF1QztBQUNwRCxhQUFhLG1DQUFtQztBQUNoRCxhQUFhLCtCQUErQixHQUFHLEVBQUU7QUFDakQsYUFBYSwyRUFBMkU7QUFDeEYsYUFBYSx1Q0FBdUMsR0FBRztBQUN2RCxhQUFhLHVDQUF1QyxHQUFHO0FBQ3ZELGFBQWEsa0RBQWtEO0FBQy9ELGFBQWEsd0VBQXdFO0FBQ3JGLGFBQWEsNENBQTRDO0FBQ3pELGFBQWEsc0RBQXNEO0FBQ25FLGFBQWEsNENBQTRDO0FBQ3pELGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYSxtREFBbUQ7QUFDaEUsYUFBYSxtREFBbUQ7QUFDaEUsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhLG1EQUFtRDtBQUNoRSxhQUFhLG1EQUFtRDtBQUNoRSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBMEI7Ozs7Ozs7O0FDckdiOztBQUViLFVBQVUsbUJBQU8sQ0FBQyxLQUFlO0FBQ2pDLG1CQUFtQixxQ0FBK0I7QUFDbEQsWUFBWSwyQ0FBNEI7O0FBRXhDLGVBQWUsU0FBZ0I7QUFDL0I7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hY2UtbGludGVycy1yb290Ly4vbm9kZV9tb2R1bGVzL2FjZS1jb2RlL3NyYy9tb2RlL2FiYXAuanMiLCJ3ZWJwYWNrOi8vYWNlLWxpbnRlcnMtcm9vdC8uL25vZGVfbW9kdWxlcy9hY2UtY29kZS9zcmMvbW9kZS9hYmFwX2hpZ2hsaWdodF9ydWxlcy5qcyIsIndlYnBhY2s6Ly9hY2UtbGludGVycy1yb290Ly4vbm9kZV9tb2R1bGVzL2FjZS1jb2RlL3NyYy9tb2RlL2ZvbGRpbmcvY29mZmVlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgUnVsZXMgPSByZXF1aXJlKFwiLi9hYmFwX2hpZ2hsaWdodF9ydWxlc1wiKS5BYmFwSGlnaGxpZ2h0UnVsZXM7XG52YXIgRm9sZE1vZGUgPSByZXF1aXJlKFwiLi9mb2xkaW5nL2NvZmZlZVwiKS5Gb2xkTW9kZTtcbnZhciBSYW5nZSA9IHJlcXVpcmUoXCIuLi9yYW5nZVwiKS5SYW5nZTtcbnZhciBUZXh0TW9kZSA9IHJlcXVpcmUoXCIuL3RleHRcIikuTW9kZTtcbnZhciBvb3AgPSByZXF1aXJlKFwiLi4vbGliL29vcFwiKTtcblxuZnVuY3Rpb24gTW9kZSgpIHtcbiAgICB0aGlzLkhpZ2hsaWdodFJ1bGVzID0gUnVsZXM7XG4gICAgdGhpcy5mb2xkaW5nUnVsZXMgPSBuZXcgRm9sZE1vZGUoKTtcbn1cblxub29wLmluaGVyaXRzKE1vZGUsIFRleHRNb2RlKTtcblxuKGZ1bmN0aW9uKCkge1xuICAgIFxuICAgIHRoaXMubGluZUNvbW1lbnRTdGFydCA9ICdcIic7XG4gICAgXG4gICAgdGhpcy5nZXROZXh0TGluZUluZGVudCA9IGZ1bmN0aW9uKHN0YXRlLCBsaW5lLCB0YWIpIHtcbiAgICAgICAgdmFyIGluZGVudCA9IHRoaXMuJGdldEluZGVudChsaW5lKTtcbiAgICAgICAgcmV0dXJuIGluZGVudDtcbiAgICB9OyAgICBcbiAgICBcbiAgICB0aGlzLiRpZCA9IFwiYWNlL21vZGUvYWJhcFwiO1xufSkuY2FsbChNb2RlLnByb3RvdHlwZSk7XG5cbmV4cG9ydHMuTW9kZSA9IE1vZGU7XG4iLCIvKlxuICogYmFzZWQgb25cbiAqIFwiIFZpbSBBQkFQIHN5bnRheCBmaWxlXG4gKiBcIiAgICBMYW5ndWFnZTogU0FQIC0gQUJBUC9SNFxuICogXCIgICAgUmV2aXNpb246IDIuMVxuICogXCIgIE1haW50YWluZXI6IE1hcml1cyBQaWVkYWxsdSB2YW4gV3lrIDxsYWlsb2tlbkBnbWFpbC5jb20+XG4gKiBcIiBMYXN0IENoYW5nZTogMjAxMiBPY3QgMjNcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIG9vcCA9IHJlcXVpcmUoXCIuLi9saWIvb29wXCIpO1xudmFyIFRleHRIaWdobGlnaHRSdWxlcyA9IHJlcXVpcmUoXCIuL3RleHRfaGlnaGxpZ2h0X3J1bGVzXCIpLlRleHRIaWdobGlnaHRSdWxlcztcblxudmFyIEFiYXBIaWdobGlnaHRSdWxlcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIGtleXdvcmRNYXBwZXIgPSB0aGlzLmNyZWF0ZUtleXdvcmRNYXBwZXIoe1xuICAgICAgICBcInZhcmlhYmxlLmxhbmd1YWdlXCI6IFwidGhpc1wiLFxuICAgICAgICBcImtleXdvcmRcIjogXG4gICAgICAgICAgICBcIkFERCBBTElBUyBBTElBU0VTIEFTQ0VORElORyBBU1NFUlQgQVNTSUdOIEFTU0lHTklORyBBVCBCQUNLXCIgK1xuICAgICAgICAgICAgXCIgQ0FMTCBDQVNFIENBVENIIENIRUNLIENMQVNTIENMRUFSIENMT1NFIENOVCBDT0xMRUNUIENPTU1JVCBDT01NVU5JQ0FUSU9OIENPTVBVVEUgQ09OQ0FURU5BVEUgQ09OREVOU0UgQ09OU1RBTlRTIENPTlRJTlVFIENPTlRST0xTIENPTlZFUlQgQ1JFQVRFIENVUlJFTkNZXCIgK1xuICAgICAgICAgICAgXCIgREFUQSBERUZJTkUgREVGSU5JVElPTiBERUZFUlJFRCBERUxFVEUgREVTQ0VORElORyBERVNDUklCRSBERVRBSUwgRElWSURFIERPXCIgK1xuICAgICAgICAgICAgXCIgRUxTRSBFTFNFSUYgRU5EQVQgRU5EQ0FTRSBFTkRDTEFTUyBFTkRETyBFTkRFWEVDIEVOREZPUk0gRU5ERlVOQ1RJT04gRU5ESUYgRU5ESUZFTkQgRU5ESU5URVJGQUNFIEVORExPT1AgRU5ETUVUSE9EIEVORE1PRFVMRSBFTkRPTiBFTkRQUk9WSURFIEVORFNFTEVDVCBFTkRUUlkgRU5EV0hJTEUgRVZFTlQgRVZFTlRTIEVYRUMgRVhJVCBFWFBPUlQgRVhQT1JUSU5HIEVYVFJBQ1RcIiArXG4gICAgICAgICAgICBcIiBGRVRDSCBGSUVMRFMgRk9STSBGT1JNQVQgRlJFRSBGUk9NIEZVTkNUSU9OXCIgK1xuICAgICAgICAgICAgXCIgR0VORVJBVEUgR0VUXCIgK1xuICAgICAgICAgICAgXCIgSElERVwiICtcbiAgICAgICAgICAgIFwiIElGIElNUE9SVCBJTVBPUlRJTkcgSU5ERVggSU5GT1RZUEVTIElOSVRJQUxJWkFUSU9OIElOVEVSRkFDRSBJTlRFUkZBQ0VTIElOUFVUIElOU0VSVCBJTVBMRU1FTlRBVElPTlwiICtcbiAgICAgICAgICAgIFwiIExFQVZFIExJS0UgTElORSBMT0FEIExPQ0FMIExPT1BcIiArXG4gICAgICAgICAgICBcIiBNRVNTQUdFIE1FVEhPRCBNRVRIT0RTIE1PRElGWSBNT0RVTEUgTU9WRSBNVUxUSVBMWVwiICtcbiAgICAgICAgICAgIFwiIE9OIE9WRVJMQVkgT1BUSU9OQUwgT1RIRVJTXCIgK1xuICAgICAgICAgICAgXCIgUEFDSyBQQVJBTUVURVJTIFBFUkZPUk0gUE9TSVRJT04gUFJPR1JBTSBQUk9WSURFIFBVVFwiICtcbiAgICAgICAgICAgIFwiIFJBSVNFIFJBTkdFUyBSRUFEIFJFQ0VJVkUgUkVDRUlWSU5HIFJFREVGSU5JVElPTiBSRUZFUkVOQ0UgUkVGUkVTSCBSRUpFQ1QgUkVQTEFDRSBSRVBPUlQgUkVTRVJWRSBSRVNUT1JFIFJFVFVSTiBSRVRVUk5JTkcgUk9MTEJBQ0tcIiArXG4gICAgICAgICAgICBcIiBTQ0FOIFNDUk9MTCBTRUFSQ0ggU0VMRUNUIFNFVCBTSElGVCBTS0lQIFNPUlQgU09SVEVEIFNQTElUIFNUQU5EQVJEIFNUQVRJQ1MgU1RFUCBTVE9QIFNVQk1JVCBTVUJUUkFDVCBTVU0gU1VNTUFSWSBTVVBQUkVTU1wiICtcbiAgICAgICAgICAgIFwiIFRBQkxFUyBUSU1FUyBUUkFOU0ZFUiBUUkFOU0xBVEUgVFJZIFRZUEUgVFlQRVNcIiArXG4gICAgICAgICAgICBcIiBVTkFTU0lHTiBVTElORSBVTlBBQ0sgVVBEQVRFXCIgK1xuICAgICAgICAgICAgXCIgV0hFTiBXSElMRSBXSU5ET1cgV1JJVEVcIiArXG4gICAgICAgICAgICBcIiBPQ0NVUlMgU1RSVUNUVVJFIE9CSkVDVCBQUk9QRVJUWVwiICtcbiAgICAgICAgICAgIFwiIENBU1RJTkcgQVBQRU5EIFJBSVNJTkcgVkFMVUUgQ09MT1JcIiArXG4gICAgICAgICAgICBcIiBDSEFOR0lORyBFWENFUFRJT04gRVhDRVBUSU9OUyBERUZBVUxUIENIRUNLQk9YIENPTU1FTlRcIiArXG4gICAgICAgICAgICBcIiBJRCBOVU1CRVIgRk9SIFRJVExFIE9VVFBVVFwiICtcbiAgICAgICAgICAgIFwiIFdJVEggRVhJVCBVU0lOR1wiICtcbiAgICAgICAgICAgIFwiIElOVE8gV0hFUkUgR1JPVVAgQlkgSEFWSU5HIE9SREVSIEJZIFNJTkdMRVwiICtcbiAgICAgICAgICAgIFwiIEFQUEVORElORyBDT1JSRVNQT05ESU5HIEZJRUxEUyBPRiBUQUJMRVwiICtcbiAgICAgICAgICAgIFwiIExFRlQgUklHSFQgT1VURVIgSU5ORVIgSk9JTiBBUyBDTElFTlQgU1BFQ0lGSUVEIEJZUEFTU0lORyBCVUZGRVIgVVAgVE8gUk9XUyBDT05ORUNUSU5HXCIgK1xuICAgICAgICAgICAgXCIgRVEgTkUgTFQgTEUgR1QgR0UgTk9UIEFORCBPUiBYT1IgSU4gTElLRSBCRVRXRUVOXCIsXG4gICAgICAgIFwiY29uc3RhbnQubGFuZ3VhZ2VcIjogXG4gICAgICAgICAgICBcIlRSVUUgRkFMU0UgTlVMTCBTUEFDRVwiLFxuICAgICAgICBcInN1cHBvcnQudHlwZVwiOiBcbiAgICAgICAgICAgIFwiYyBuIGkgcCBmIGQgdCB4IHN0cmluZyB4c3RyaW5nIGRlY2Zsb2F0MTYgZGVjZmxvYXQzNFwiLFxuICAgICAgICBcImtleXdvcmQub3BlcmF0b3JcIjpcbiAgICAgICAgICAgIFwiYWJzIHNpZ24gY2VpbCBmbG9vciB0cnVuYyBmcmFjIGFjb3MgYXNpbiBhdGFuIGNvcyBzaW4gdGFuXCIgK1xuICAgICAgICAgICAgXCIgYWJhcE9wZXJhdG9yIGNvc2ggc2luaCB0YW5oIGV4cCBsb2cgbG9nMTAgc3FydFwiICtcbiAgICAgICAgICAgIFwiIHN0cmxlbiB4c3RybGVuIGNoYXJsZW4gbnVtb2ZjaGFyIGRibWF4bGVuIGxpbmVzXCIgXG4gICAgfSwgXCJ0ZXh0XCIsIHRydWUsIFwiIFwiKTtcblxuICAgIHZhciBjb21wb3VuZEtleXdvcmRzID0gXCJXSVRIXFxcXFcrKD86SEVBREVSXFxcXFcrTElORXxGUkFNRXxLRVkpfE5PXFxcXFcrU1RBTkRBUkRcXFxcVytQQUdFXFxcXFcrSEVBRElOR3xcIitcbiAgICAgICAgXCJFWElUXFxcXFcrRlJPTVxcXFxXK1NURVBcXFxcVytMT09QfEJFR0lOXFxcXFcrT0ZcXFxcVysoPzpCTE9DS3xMSU5FKXxCRUdJTlxcXFxXK09GfFwiK1xuICAgICAgICBcIkVORFxcXFxXK09GXFxcXFcrKD86QkxPQ0t8TElORSl8RU5EXFxcXFcrT0Z8Tk9cXFxcVytJTlRFUlZBTFN8XCIrXG4gICAgICAgIFwiUkVTUEVDVElOR1xcXFxXK0JMQU5LU3xTRVBBUkFURURcXFxcVytCWXxVU0lOR1xcXFxXKyg/OkVESVRcXFxcVytNQVNLKXxcIitcbiAgICAgICAgXCJXSEVSRVxcXFxXKyg/OkxJTkUpfFJBRElPQlVUVE9OXFxcXFcrR1JPVVB8UkVGXFxcXFcrVE98XCIrXG4gICAgICAgIFwiKD86UFVCTElDfFBSSVZBVEV8UFJPVEVDVEVEKSg/OlxcXFxXK1NFQ1RJT04pP3xERUxFVElOR1xcXFxXKyg/OlRSQUlMSU5HfExFQURJTkcpXCIrXG4gICAgICAgIFwiKD86QUxMXFxcXFcrT0NDVVJSRU5DRVMpfCg/OkZJUlNUfExBU1QpXFxcXFcrT0NDVVJSRU5DRXxJTkhFUklUSU5HXFxcXFcrRlJPTXxcIitcbiAgICAgICAgXCJMSU5FLUNPVU5UfEFERC1DT1JSRVNQT05ESU5HfEFVVEhPUklUWS1DSEVDS3xCUkVBSy1QT0lOVHxDTEFTUy1EQVRBfENMQVNTLU1FVEhPRFN8XCIrXG4gICAgICAgIFwiQ0xBU1MtTUVUSE9EfERJVklERS1DT1JSRVNQT05ESU5HfEVESVRPUi1DQUxMfEVORC1PRi1ERUZJTklUSU9OfEVORC1PRi1QQUdFfEVORC1PRi1TRUxFQ1RJT058XCIrXG4gICAgICAgIFwiRklFTEQtR1JPVVBTfEZJRUxELVNZTUJPTFN8RlVOQ1RJT04tUE9PTHxNT1ZFLUNPUlJFU1BPTkRJTkd8TVVMVElQTFktQ09SUkVTUE9ORElOR3xORVctTElORXxcIitcbiAgICAgICAgXCJORVctUEFHRXxORVctU0VDVElPTnxQUklOVC1DT05UUk9MfFJQLVBST1ZJREUtRlJPTS1MQVNUfFNFTEVDVC1PUFRJT05TfFNFTEVDVElPTi1TQ1JFRU58XCIrXG4gICAgICAgIFwiU1RBUlQtT0YtU0VMRUNUSU9OfFNVQlRSQUNULUNPUlJFU1BPTkRJTkd8U1lOVEFYLUNIRUNLfFNZTlRBWC1UUkFDRXxUT1AtT0YtUEFHRXxUWVBFLVBPT0x8XCIrXG4gICAgICAgIFwiVFlQRS1QT09MU3xMSU5FLVNJWkV8TElORS1DT1VOVHxNRVNTQUdFLUlEfERJU1BMQVktTU9ERXxSRUFEKD86LU9OTFkpP3xcIitcbiAgICAgICAgXCJJU1xcXFxXKyg/Ok5PVFxcXFxXKyk/KD86QVNTSUdORUR8Qk9VTkR8SU5JVElBTHxTVVBQTElFRClcIjtcbiAgICAgXG4gICAgdGhpcy4kcnVsZXMgPSB7XG4gICAgICAgIFwic3RhcnRcIiA6IFtcbiAgICAgICAgICAgIHt0b2tlbiA6IFwic3RyaW5nXCIsIHJlZ2V4IDogXCJgXCIsIG5leHQgIDogXCJzdHJpbmdcIn0sXG4gICAgICAgICAgICB7dG9rZW4gOiBcInN0cmluZ1wiLCByZWdleCA6IFwiJ1wiLCBuZXh0ICA6IFwicXN0cmluZ1wifSxcbiAgICAgICAgICAgIHt0b2tlbiA6IFwiZG9jLmNvbW1lbnRcIiwgcmVnZXggOiAvXlxcKi4rL30sXG4gICAgICAgICAgICB7dG9rZW4gOiBcImNvbW1lbnRcIiwgIHJlZ2V4IDogL1wiLiskL30sXG4gICAgICAgICAgICB7dG9rZW4gOiBcImludmFsaWRcIiwgcmVnZXg6IFwiXFxcXC57Mix9XCJ9LFxuICAgICAgICAgICAge3Rva2VuIDogXCJrZXl3b3JkLm9wZXJhdG9yXCIsIHJlZ2V4OiAvXFxXW1xcLSslPTw+Kl1cXFd8XFwqXFwqfFt+OixcXC4mJF18LT4qP3w9Pi99LFxuICAgICAgICAgICAge3Rva2VuIDogXCJwYXJlbi5scGFyZW5cIiwgcmVnZXggOiBcIltcXFxcWyh7XVwifSxcbiAgICAgICAgICAgIHt0b2tlbiA6IFwicGFyZW4ucnBhcmVuXCIsIHJlZ2V4IDogXCJbXFxcXF0pfV1cIn0sXG4gICAgICAgICAgICB7dG9rZW4gOiBcImNvbnN0YW50Lm51bWVyaWNcIiwgcmVnZXg6IFwiWystXT9cXFxcZCtcXFxcYlwifSxcbiAgICAgICAgICAgIHt0b2tlbiA6IFwidmFyaWFibGUucGFyYW1ldGVyXCIsIHJlZ2V4IDogL3N5fHBhP1xcZFxcZFxcZFxcZFxcfHRcXGRcXGRcXGRcXC58aW5ubm4vfSwgXG4gICAgICAgICAgICB7dG9rZW4gOiBcImtleXdvcmRcIiwgcmVnZXggOiBjb21wb3VuZEtleXdvcmRzfSwgXG4gICAgICAgICAgICB7dG9rZW4gOiBcInZhcmlhYmxlLnBhcmFtZXRlclwiLCByZWdleCA6IC9cXHcrLVxcd1tcXC1cXHddKi99LFxuICAgICAgICAgICAge3Rva2VuIDoga2V5d29yZE1hcHBlciwgcmVnZXggOiBcIlxcXFxiXFxcXHcrXFxcXGJcIn0sXG4gICAgICAgICAgICB7Y2FzZUluc2Vuc2l0aXZlOiB0cnVlfVxuICAgICAgICBdLFxuICAgICAgICBcInFzdHJpbmdcIiA6IFtcbiAgICAgICAgICAgIHt0b2tlbiA6IFwiY29uc3RhbnQubGFuZ3VhZ2UuZXNjYXBlXCIsICAgcmVnZXggOiBcIicnXCJ9LFxuICAgICAgICAgICAge3Rva2VuIDogXCJzdHJpbmdcIiwgcmVnZXggOiBcIidcIiwgICAgIG5leHQgIDogXCJzdGFydFwifSxcbiAgICAgICAgICAgIHtkZWZhdWx0VG9rZW4gOiBcInN0cmluZ1wifVxuICAgICAgICBdLFxuICAgICAgICBcInN0cmluZ1wiIDogW1xuICAgICAgICAgICAge3Rva2VuIDogXCJjb25zdGFudC5sYW5ndWFnZS5lc2NhcGVcIiwgICByZWdleCA6IFwiYGBcIn0sXG4gICAgICAgICAgICB7dG9rZW4gOiBcInN0cmluZ1wiLCByZWdleCA6IFwiYFwiLCAgICAgbmV4dCAgOiBcInN0YXJ0XCJ9LFxuICAgICAgICAgICAge2RlZmF1bHRUb2tlbiA6IFwic3RyaW5nXCJ9XG4gICAgICAgIF1cbiAgICB9O1xufTtcbm9vcC5pbmhlcml0cyhBYmFwSGlnaGxpZ2h0UnVsZXMsIFRleHRIaWdobGlnaHRSdWxlcyk7XG5cbmV4cG9ydHMuQWJhcEhpZ2hsaWdodFJ1bGVzID0gQWJhcEhpZ2hsaWdodFJ1bGVzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBvb3AgPSByZXF1aXJlKFwiLi4vLi4vbGliL29vcFwiKTtcbnZhciBCYXNlRm9sZE1vZGUgPSByZXF1aXJlKFwiLi9mb2xkX21vZGVcIikuRm9sZE1vZGU7XG52YXIgUmFuZ2UgPSByZXF1aXJlKFwiLi4vLi4vcmFuZ2VcIikuUmFuZ2U7XG5cbnZhciBGb2xkTW9kZSA9IGV4cG9ydHMuRm9sZE1vZGUgPSBmdW5jdGlvbigpIHt9O1xub29wLmluaGVyaXRzKEZvbGRNb2RlLCBCYXNlRm9sZE1vZGUpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICB0aGlzLmdldEZvbGRXaWRnZXRSYW5nZSA9IGZ1bmN0aW9uKHNlc3Npb24sIGZvbGRTdHlsZSwgcm93KSB7XG4gICAgICAgIHZhciByYW5nZSA9IHRoaXMuaW5kZW50YXRpb25CbG9jayhzZXNzaW9uLCByb3cpO1xuICAgICAgICBpZiAocmFuZ2UpXG4gICAgICAgICAgICByZXR1cm4gcmFuZ2U7XG5cbiAgICAgICAgdmFyIHJlID0gL1xcUy87XG4gICAgICAgIHZhciBsaW5lID0gc2Vzc2lvbi5nZXRMaW5lKHJvdyk7XG4gICAgICAgIHZhciBzdGFydExldmVsID0gbGluZS5zZWFyY2gocmUpO1xuICAgICAgICBpZiAoc3RhcnRMZXZlbCA9PSAtMSB8fCBsaW5lW3N0YXJ0TGV2ZWxdICE9IFwiI1wiKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHZhciBzdGFydENvbHVtbiA9IGxpbmUubGVuZ3RoO1xuICAgICAgICB2YXIgbWF4Um93ID0gc2Vzc2lvbi5nZXRMZW5ndGgoKTtcbiAgICAgICAgdmFyIHN0YXJ0Um93ID0gcm93O1xuICAgICAgICB2YXIgZW5kUm93ID0gcm93O1xuXG4gICAgICAgIHdoaWxlICgrK3JvdyA8IG1heFJvdykge1xuICAgICAgICAgICAgbGluZSA9IHNlc3Npb24uZ2V0TGluZShyb3cpO1xuICAgICAgICAgICAgdmFyIGxldmVsID0gbGluZS5zZWFyY2gocmUpO1xuXG4gICAgICAgICAgICBpZiAobGV2ZWwgPT0gLTEpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIGlmIChsaW5lW2xldmVsXSAhPSBcIiNcIilcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZW5kUm93ID0gcm93O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVuZFJvdyA+IHN0YXJ0Um93KSB7XG4gICAgICAgICAgICB2YXIgZW5kQ29sdW1uID0gc2Vzc2lvbi5nZXRMaW5lKGVuZFJvdykubGVuZ3RoO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShzdGFydFJvdywgc3RhcnRDb2x1bW4sIGVuZFJvdywgZW5kQ29sdW1uKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBtdXN0IHJldHVybiBcIlwiIGlmIHRoZXJlJ3Mgbm8gZm9sZCwgdG8gZW5hYmxlIGNhY2hpbmdcbiAgICB0aGlzLmdldEZvbGRXaWRnZXQgPSBmdW5jdGlvbihzZXNzaW9uLCBmb2xkU3R5bGUsIHJvdykge1xuICAgICAgICB2YXIgbGluZSA9IHNlc3Npb24uZ2V0TGluZShyb3cpO1xuICAgICAgICB2YXIgaW5kZW50ID0gbGluZS5zZWFyY2goL1xcUy8pO1xuICAgICAgICB2YXIgbmV4dCA9IHNlc3Npb24uZ2V0TGluZShyb3cgKyAxKTtcbiAgICAgICAgdmFyIHByZXYgPSBzZXNzaW9uLmdldExpbmUocm93IC0gMSk7XG4gICAgICAgIHZhciBwcmV2SW5kZW50ID0gcHJldi5zZWFyY2goL1xcUy8pO1xuICAgICAgICB2YXIgbmV4dEluZGVudCA9IG5leHQuc2VhcmNoKC9cXFMvKTtcblxuICAgICAgICBpZiAoaW5kZW50ID09IC0xKSB7XG4gICAgICAgICAgICBzZXNzaW9uLmZvbGRXaWRnZXRzW3JvdyAtIDFdID0gcHJldkluZGVudCE9IC0xICYmIHByZXZJbmRlbnQgPCBuZXh0SW5kZW50ID8gXCJzdGFydFwiIDogXCJcIjtcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZG9jdW1lbnRhdGlvbiBjb21tZW50c1xuICAgICAgICBpZiAocHJldkluZGVudCA9PSAtMSkge1xuICAgICAgICAgICAgaWYgKGluZGVudCA9PSBuZXh0SW5kZW50ICYmIGxpbmVbaW5kZW50XSA9PSBcIiNcIiAmJiBuZXh0W2luZGVudF0gPT0gXCIjXCIpIHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLmZvbGRXaWRnZXRzW3JvdyAtIDFdID0gXCJcIjtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLmZvbGRXaWRnZXRzW3JvdyArIDFdID0gXCJcIjtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJzdGFydFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHByZXZJbmRlbnQgPT0gaW5kZW50ICYmIGxpbmVbaW5kZW50XSA9PSBcIiNcIiAmJiBwcmV2W2luZGVudF0gPT0gXCIjXCIpIHtcbiAgICAgICAgICAgIGlmIChzZXNzaW9uLmdldExpbmUocm93IC0gMikuc2VhcmNoKC9cXFMvKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgIHNlc3Npb24uZm9sZFdpZGdldHNbcm93IC0gMV0gPSBcInN0YXJ0XCI7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5mb2xkV2lkZ2V0c1tyb3cgKyAxXSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJldkluZGVudCE9IC0xICYmIHByZXZJbmRlbnQgPCBpbmRlbnQpXG4gICAgICAgICAgICBzZXNzaW9uLmZvbGRXaWRnZXRzW3JvdyAtIDFdID0gXCJzdGFydFwiO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBzZXNzaW9uLmZvbGRXaWRnZXRzW3JvdyAtIDFdID0gXCJcIjtcblxuICAgICAgICBpZiAoaW5kZW50IDwgbmV4dEluZGVudClcbiAgICAgICAgICAgIHJldHVybiBcInN0YXJ0XCI7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgIH07XG5cbn0pLmNhbGwoRm9sZE1vZGUucHJvdG90eXBlKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==