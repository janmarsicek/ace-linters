{"version":3,"file":"bundle.658.js","mappings":"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","sources":["webpack://ace-linters-root/./packages/ace-linters/services/base-service.ts","webpack://ace-linters-root/./packages/ace-linters/services/lua/lua-service.ts"],"sourcesContent":["import {FormattingOptions} from \"vscode-languageserver-types\";\nimport {Ace} from \"ace-code\";\nimport {AceLinters} from \"./language-service\";\n\nexport abstract class BaseService<OptionsType extends AceLinters.ServiceOptions = AceLinters.ServiceOptions> implements AceLinters.LanguageService {\n    abstract $service;\n    mode: string;\n    documents: {[sessionID: string]: Ace.Document} = {};\n    options: {[sessionID: string]: OptionsType} = {};\n    globalOptions: OptionsType = {} as OptionsType;\n\n    protected constructor(mode: string) {\n        this.mode = mode;\n    }\n\n    $getDocument(sessionID: string) {\n        return null;\n    }\n\n    addDocument(sessionID: string, document: Ace.Document, options?: OptionsType) {\n        this.documents[sessionID] = document;\n        if (options)\n            this.setOptions(sessionID, options);\n    }\n\n    getDocument(sessionID: string): Ace.Document {\n        return this.documents[sessionID];\n    }\n\n    removeDocument(sessionID: string) {\n        delete this.documents[sessionID];\n        if (this.options[sessionID]) {\n            delete this.options[sessionID];\n        }\n    }\n\n    getDocumentValue(sessionID: string): string {\n        return this.getDocument(sessionID).getValue();\n    }\n\n    private $setVersion(doc: Ace.Document) { //TODO: this is workaround for ts service\n        if (!doc[\"version\"]) {\n            doc[\"version\"] = 1;\n        } else {\n            doc[\"version\"]++;\n        }\n    }\n\n    setValue(sessionID: string, value: string) {\n        let document = this.getDocument(sessionID);\n        this.$setVersion(document);\n        document.setValue(value);\n    }\n\n    setGlobalOptions(options: OptionsType) {\n        this.globalOptions = options ?? {} as OptionsType;\n    }\n\n    setOptions(sessionID: string, options: OptionsType) {\n        this.options[sessionID] = options;\n    }\n\n    getOption<T extends keyof OptionsType>(sessionID: string, optionName: T): OptionsType[T] {\n        if (this.options[sessionID] && this.options[sessionID][optionName]) {\n            return this.options[sessionID][optionName];\n        } else {\n            return this.globalOptions[optionName];\n        }\n    }\n\n    applyDeltas(sessionID: string, deltas: Ace.Delta[]) {\n        let data = deltas;\n        let document = this.getDocument(sessionID);\n        this.$setVersion(document);\n        if (data[0].start) {\n            document.applyDeltas(data);\n        } else {\n            for (let i = 0; i < data.length; i += 2) {\n                let d, err;\n                if (Array.isArray(data[i + 1])) {\n                    d = {action: \"insert\", start: data[i], lines: data[i + 1]};\n                } else {\n                    d = {action: \"remove\", start: data[i], end: data[i + 1]};\n                }\n\n                let linesLength = document[\"$lines\"].length;\n                if ((d.action == \"insert\" ? d.start : d.end).row >= linesLength) {\n                    err = new Error(\"Invalid delta\");\n                    err.data = {\n                        linesLength: linesLength,\n                        start: d.start,\n                        end: d.end\n                    };\n                    throw err;\n                }\n\n                document.applyDelta(d, true);\n            }\n        }\n    }\n\n    format(sessionID: string, range: Ace.Range, format: FormattingOptions): AceLinters.TextEdit[] {\n        return [];\n    }\n\n    async doHover(sessionID: string, position: Ace.Point) {\n        return null;\n    }\n\n    async doValidation(sessionID: string): Promise<Ace.Annotation[]> {\n        return [];\n    }\n\n    async doComplete(sessionID: string, position: Ace.Point): Promise<Ace.Completion[]> {\n        return;\n    }\n\n    async resolveCompletion(sessionID: string, completion: Ace.Completion): Promise<Ace.Completion> {\n        return;\n    }\n}","import {BaseService} from \"../base-service\";\nimport * as lua from \"luaparse\";\n\nexport class LuaService extends BaseService {\n    $service;\n\n    constructor(mode: string) {\n        super(mode);\n        this.$service = lua;\n    }\n\n    $getDocument(sessionID: string) {\n        let documentValue = this.getDocumentValue(sessionID);\n        return documentValue;\n    }\n\n    async doValidation(sessionID: string) {\n        let document = this.$getDocument(sessionID);\n        if (!document) {\n            return [];\n        }\n        let errors = [];\n        try {\n            this.$service.parse(document);\n        } catch (e) {\n            if (e instanceof this.$service.SyntaxError) {\n                errors.push({\n                    row: e.line - 1,\n                    column: e.column,\n                    text: e.message,\n                    type: \"error\"\n                });\n            }\n        }\n        return errors;\n    }\n\n}"],"names":[],"sourceRoot":""}