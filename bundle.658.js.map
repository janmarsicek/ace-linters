{"version":3,"file":"bundle.658.js","mappings":"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","sources":["webpack://ace-linters-root/./packages/ace-linters/services/base-service.ts","webpack://ace-linters-root/./packages/ace-linters/services/lua/lua-service.ts"],"sourcesContent":["import * as lsp from \"vscode-languageserver-protocol\";\nimport {AceLinters} from \"../types\";\nimport {mergeObjects} from \"../utils\";\nimport {TextDocument} from \"vscode-languageserver-textdocument\";\nimport {TextDocumentItem} from \"vscode-languageserver-protocol\";\n\nexport abstract class BaseService<OptionsType extends AceLinters.ServiceOptions = AceLinters.ServiceOptions> implements AceLinters.LanguageService {\n    abstract $service;\n    mode: string;\n    documents: { [sessionID: string]: TextDocument } = {};\n    options: { [sessionID: string]: OptionsType } = {};\n    globalOptions: OptionsType = {} as OptionsType;\n\n    protected constructor(mode: string) {\n        this.mode = mode;\n    }\n\n    addDocument(document: TextDocumentItem) {\n        this.documents[document.uri] = TextDocument.create(document.uri, document.languageId, document.version, (document as TextDocumentItem).text)\n        //TODO:\n        /*if (options)\n            this.setOptions(sessionID, options);*/\n    }\n\n    getDocument(uri: string): TextDocument {\n        return this.documents[uri];\n    }\n\n    removeDocument(document: TextDocument) {\n        delete this.documents[document.uri];\n        if (this.options[document.uri]) {\n            delete this.options[document.uri];\n        }\n    }\n\n    getDocumentValue(uri: string): string {\n        return this.getDocument(uri).getText();\n    }\n\n    setValue(identifier: lsp.VersionedTextDocumentIdentifier, value: string) {\n        let document = this.getDocument(identifier.uri);\n        if (document) {\n            document = TextDocument.create(document.uri, document.languageId, document.version, value);\n            this.documents[document.uri] = document;\n        }\n    }\n\n    setGlobalOptions(options: OptionsType) {\n        this.globalOptions = options ?? {} as OptionsType;\n    }\n\n    setOptions(sessionID: string, options: OptionsType, merge = false) {\n        this.options[sessionID] = merge ? mergeObjects(options, this.options[sessionID]) : options;\n    }\n\n    getOption<T extends keyof OptionsType>(sessionID: string, optionName: T): OptionsType[T] {\n        if (this.options[sessionID] && this.options[sessionID][optionName]) {\n            return this.options[sessionID][optionName];\n        } else {\n            return this.globalOptions[optionName];\n        }\n    }\n\n    applyDeltas(identifier: lsp.VersionedTextDocumentIdentifier, deltas: lsp.TextDocumentContentChangeEvent[]) {\n        let document = this.getDocument(identifier.uri);\n        if (document) {\n            TextDocument.update(document, deltas, identifier.version);\n        }\n    }\n\n    doComplete(document, position: lsp.Position): Promise<lsp.CompletionItem[] | lsp.CompletionList | null> {\n        return Promise.resolve(undefined);\n    }\n\n    doHover(document, position: lsp.Position): Promise<lsp.Hover | null> {\n        return Promise.resolve(undefined);\n    }\n\n    doResolve(item: lsp.CompletionItem): Promise<lsp.CompletionItem> {\n        return Promise.resolve(undefined);\n    }\n\n    doValidation(document): Promise<lsp.Diagnostic[]> {\n        return Promise.resolve([]);\n    }\n\n    format(document, range: lsp.Range, options: lsp.FormattingOptions): lsp.TextEdit[] | null {\n        return undefined;\n    }\n\n}\n","import {BaseService} from \"../base-service\";\nimport * as lua from \"luaparse\";\nimport {AceLinters} from \"../../types\";\nimport * as lsp from \"vscode-languageserver-protocol\";\n\nexport class LuaService extends BaseService implements AceLinters.LanguageService {\n    $service;\n\n    constructor(mode: string) {\n        super(mode);\n        this.$service = lua;\n    }\n\n    async doValidation(document: lsp.TextDocumentIdentifier): Promise<lsp.Diagnostic[]> {\n        let value = this.getDocumentValue(document.uri);\n        if (!value) {\n            return [];\n        }\n        let errors = [];\n        try {\n            this.$service.parse(value);\n        } catch (e) {\n            if (e instanceof this.$service.SyntaxError) {\n                errors.push({\n                    range: {\n                        start: {\n                            line: e.line - 1,\n                            character: e.column\n                        },\n                        end: {\n                            line: e.line - 1,\n                            character: e.column\n                        }\n                    },\n                    message: e.message,\n                    severity: 1\n                });\n            }\n        }\n        return errors;\n    }\n\n}\n"],"names":[],"sourceRoot":""}