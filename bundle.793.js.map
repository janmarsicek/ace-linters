{"version":3,"file":"bundle.793.js","mappings":"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","sources":["webpack://ace-linters-root/./packages/ace-linters/services/base-service.ts","webpack://ace-linters-root/./packages/ace-linters/services/css/css-service.ts"],"sourcesContent":["import * as lsp from \"vscode-languageserver-protocol\";\nimport {AceLinters} from \"../types\";\nimport {mergeObjects} from \"../utils\";\nimport {TextDocument} from \"vscode-languageserver-textdocument\";\nimport {TextDocumentItem} from \"vscode-languageserver-protocol\";\n\nexport abstract class BaseService<OptionsType extends AceLinters.ServiceOptions = AceLinters.ServiceOptions> implements AceLinters.LanguageService {\n    abstract $service;\n    mode: string;\n    documents: { [sessionID: string]: TextDocument } = {};\n    options: { [sessionID: string]: OptionsType } = {};\n    globalOptions: OptionsType = {} as OptionsType;\n\n    protected constructor(mode: string) {\n        this.mode = mode;\n    }\n\n    addDocument(document: TextDocumentItem) {\n        this.documents[document.uri] = TextDocument.create(document.uri, document.languageId, document.version, (document as TextDocumentItem).text)\n        //TODO:\n        /*if (options)\n            this.setOptions(sessionID, options);*/\n    }\n\n    getDocument(uri: string): TextDocument {\n        return this.documents[uri];\n    }\n\n    removeDocument(document: TextDocument) {\n        delete this.documents[document.uri];\n        if (this.options[document.uri]) {\n            delete this.options[document.uri];\n        }\n    }\n\n    getDocumentValue(uri: string): string {\n        return this.getDocument(uri).getText();\n    }\n\n    setValue(identifier: lsp.VersionedTextDocumentIdentifier, value: string) {\n        let document = this.getDocument(identifier.uri);\n        if (document) {\n            document = TextDocument.create(document.uri, document.languageId, document.version, value);\n            this.documents[document.uri] = document;\n        }\n    }\n\n    setGlobalOptions(options: OptionsType) {\n        this.globalOptions = options ?? {} as OptionsType;\n    }\n\n    setOptions(sessionID: string, options: OptionsType, merge = false) {\n        this.options[sessionID] = merge ? mergeObjects(options, this.options[sessionID]) : options;\n    }\n\n    getOption<T extends keyof OptionsType>(sessionID: string, optionName: T): OptionsType[T] {\n        if (this.options[sessionID] && this.options[sessionID][optionName]) {\n            return this.options[sessionID][optionName];\n        } else {\n            return this.globalOptions[optionName];\n        }\n    }\n\n    applyDeltas(identifier: lsp.VersionedTextDocumentIdentifier, deltas: lsp.TextDocumentContentChangeEvent[]) {\n        let document = this.getDocument(identifier.uri);\n        if (document) {\n            TextDocument.update(document, deltas, identifier.version);\n        }\n    }\n\n    doComplete(document, position: lsp.Position): Promise<lsp.CompletionItem[] | lsp.CompletionList | null> {\n        return Promise.resolve(undefined);\n    }\n\n    doHover(document, position: lsp.Position): Promise<lsp.Hover | null> {\n        return Promise.resolve(undefined);\n    }\n\n    doResolve(item: lsp.CompletionItem): Promise<lsp.CompletionItem> {\n        return Promise.resolve(undefined);\n    }\n\n    doValidation(document): Promise<lsp.Diagnostic[]> {\n        return Promise.resolve([]);\n    }\n\n    format(document, range: lsp.Range, options: lsp.FormattingOptions): lsp.TextEdit[] | null {\n        return undefined;\n    }\n\n}\n","import {LanguageService as VSLanguageService} from \"vscode-css-languageservice\";\nimport {CSSFormatConfiguration} from \"vscode-css-languageservice/lib/umd/cssLanguageTypes\";\nimport {BaseService} from \"../base-service\";\nimport {AceLinters} from \"../../types\";\nimport * as lsp from \"vscode-languageserver-protocol\";\n\nimport * as cssService from 'vscode-css-languageservice';\n\nexport class CssService extends BaseService implements AceLinters.LanguageService {\n    $service: VSLanguageService;\n    $languageId: string;\n\n    constructor(mode: string) {\n        super(mode);\n        this.$initLanguageService();\n        this.$service.configure();\n    }\n\n    private $initLanguageService() {\n        switch (this.mode) {\n            case \"less\":\n                this.$languageId = \"less\";\n                this.$service = cssService.getLESSLanguageService();\n                break;\n            case \"scss\":\n                this.$languageId = \"scss\";\n                this.$service = cssService.getSCSSLanguageService();\n                break;\n            case \"css\":\n            default:\n                this.$languageId = \"css\";\n                this.$service = cssService.getCSSLanguageService();\n                break;\n        }\n    }\n\n    format(document: lsp.TextDocumentIdentifier, range: lsp.Range, options: CSSFormatConfiguration): lsp.TextEdit[] | null {\n        let fullDocument = this.getDocument(document.uri);\n        if (!fullDocument) {\n            return [];\n        }\n        let textEdits = this.$service.format(fullDocument, range, options);\n        return textEdits;\n    }\n\n    async doHover(document: lsp.TextDocumentIdentifier, position: lsp.Position): Promise<lsp.Hover | null> {\n        let fullDocument = this.getDocument(document.uri);\n        if (!fullDocument) {\n            return null;\n        }\n        let cssDocument = this.$service.parseStylesheet(fullDocument);\n        let hover = this.$service.doHover(fullDocument, position, cssDocument);\n        return Promise.resolve(hover);\n    }\n\n    async doValidation(document: lsp.TextDocumentIdentifier): Promise<lsp.Diagnostic[]> {\n        let fullDocument = this.getDocument(document.uri);\n        if (!fullDocument) {\n            return [];\n        }\n        let cssDocument = this.$service.parseStylesheet(fullDocument);\n\n        let diagnostics = this.$service.doValidation(fullDocument, cssDocument);\n        return Promise.resolve(diagnostics);\n    }\n\n    async doComplete(document: lsp.TextDocumentIdentifier, position: lsp.Position): Promise<lsp.CompletionItem[] | lsp.CompletionList | null> {\n        let fullDocument = this.getDocument(document.uri);\n        if (!fullDocument) {\n            return null;\n        }\n        let cssDocument = this.$service.parseStylesheet(fullDocument);\n\n        let completions = this.$service.doComplete(fullDocument, position, cssDocument);\n        return Promise.resolve(completions);\n    }\n\n    async doResolve(item: lsp.CompletionItem): Promise<lsp.CompletionItem> {\n        return Promise.resolve(item);\n    }\n}\n"],"names":[],"sourceRoot":""}