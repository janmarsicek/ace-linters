(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 1696:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(4406);
/* provided dependency */ var console = __webpack_require__(3716);
// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = __webpack_require__(7515),
    _require$codes = _require.codes,
    ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE,
    ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;

var AssertionError = __webpack_require__(4082);

var _require2 = __webpack_require__(3335),
    inspect = _require2.inspect;

var _require$types = (__webpack_require__(3335).types),
    isPromise = _require$types.isPromise,
    isRegExp = _require$types.isRegExp;

var objectAssign = Object.assign ? Object.assign : (__webpack_require__(4956).assign);
var objectIs = Object.is ? Object.is : __webpack_require__(4679);
var errorCache = new Map();
var isDeepEqual;
var isDeepStrictEqual;
var parseExpressionAt;
var findNodeAround;
var decoder;

function lazyLoadComparison() {
  var comparison = __webpack_require__(6796);

  isDeepEqual = comparison.isDeepEqual;
  isDeepStrictEqual = comparison.isDeepStrictEqual;
} // Escape control characters but not \n and \t to keep the line breaks and
// indentation intact.
// eslint-disable-next-line no-control-regex


var escapeSequencesRegExp = /[\x00-\x08\x0b\x0c\x0e-\x1f]/g;
var meta = (/* unused pure expression or super */ null && (["\\u0000", "\\u0001", "\\u0002", "\\u0003", "\\u0004", "\\u0005", "\\u0006", "\\u0007", '\\b', '', '', "\\u000b", '\\f', '', "\\u000e", "\\u000f", "\\u0010", "\\u0011", "\\u0012", "\\u0013", "\\u0014", "\\u0015", "\\u0016", "\\u0017", "\\u0018", "\\u0019", "\\u001a", "\\u001b", "\\u001c", "\\u001d", "\\u001e", "\\u001f"]));

var escapeFn = function escapeFn(str) {
  return meta[str.charCodeAt(0)];
};

var warned = false; // The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;
var NO_EXCEPTION_SENTINEL = {}; // All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided. All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function innerFail(obj) {
  if (obj.message instanceof Error) throw obj.message;
  throw new AssertionError(obj);
}

function fail(actual, expected, message, operator, stackStartFn) {
  var argsLen = arguments.length;
  var internalMessage;

  if (argsLen === 0) {
    internalMessage = 'Failed';
  } else if (argsLen === 1) {
    message = actual;
    actual = undefined;
  } else {
    if (warned === false) {
      warned = true;
      var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
      warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');
    }

    if (argsLen === 2) operator = '!=';
  }

  if (message instanceof Error) throw message;
  var errArgs = {
    actual: actual,
    expected: expected,
    operator: operator === undefined ? 'fail' : operator,
    stackStartFn: stackStartFn || fail
  };

  if (message !== undefined) {
    errArgs.message = message;
  }

  var err = new AssertionError(errArgs);

  if (internalMessage) {
    err.message = internalMessage;
    err.generatedMessage = true;
  }

  throw err;
}

assert.fail = fail; // The AssertionError is defined in internal/error.

assert.AssertionError = AssertionError;

function innerOk(fn, argLen, value, message) {
  if (!value) {
    var generatedMessage = false;

    if (argLen === 0) {
      generatedMessage = true;
      message = 'No value argument passed to `assert.ok()`';
    } else if (message instanceof Error) {
      throw message;
    }

    var err = new AssertionError({
      actual: value,
      expected: true,
      message: message,
      operator: '==',
      stackStartFn: fn
    });
    err.generatedMessage = generatedMessage;
    throw err;
  }
} // Pure assertion tests whether a value is truthy, as determined
// by !!value.


function ok() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  innerOk.apply(void 0, [ok, args.length].concat(args));
}

assert.ok = ok; // The equality assertion tests shallow, coercive equality with ==.

/* eslint-disable no-restricted-properties */

assert.equal = function equal(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  } // eslint-disable-next-line eqeqeq


  if (actual != expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '==',
      stackStartFn: equal
    });
  }
}; // The non-equality assertion tests for whether two objects are not
// equal with !=.


assert.notEqual = function notEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  } // eslint-disable-next-line eqeqeq


  if (actual == expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '!=',
      stackStartFn: notEqual
    });
  }
}; // The equivalence assertion tests a deep equality relation.


assert.deepEqual = function deepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (!isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepEqual',
      stackStartFn: deepEqual
    });
  }
}; // The non-equivalence assertion tests for any deep inequality.


assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepEqual',
      stackStartFn: notDeepEqual
    });
  }
};
/* eslint-enable */


assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (!isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepStrictEqual',
      stackStartFn: deepStrictEqual
    });
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;

function notDeepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepStrictEqual',
      stackStartFn: notDeepStrictEqual
    });
  }
}

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (!objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'strictEqual',
      stackStartFn: strictEqual
    });
  }
};

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notStrictEqual',
      stackStartFn: notStrictEqual
    });
  }
};

var Comparison = function Comparison(obj, keys, actual) {
  var _this = this;

  _classCallCheck(this, Comparison);

  keys.forEach(function (key) {
    if (key in obj) {
      if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && obj[key].test(actual[key])) {
        _this[key] = actual[key];
      } else {
        _this[key] = obj[key];
      }
    }
  });
};

function compareExceptionKey(actual, expected, key, message, keys, fn) {
  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
    if (!message) {
      // Create placeholder objects to create a nice output.
      var a = new Comparison(actual, keys);
      var b = new Comparison(expected, keys, actual);
      var err = new AssertionError({
        actual: a,
        expected: b,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.actual = actual;
      err.expected = expected;
      err.operator = fn.name;
      throw err;
    }

    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: fn.name,
      stackStartFn: fn
    });
  }
}

function expectedException(actual, expected, msg, fn) {
  if (typeof expected !== 'function') {
    if (isRegExp(expected)) return expected.test(actual); // assert.doesNotThrow does not accept objects.

    if (arguments.length === 2) {
      throw new ERR_INVALID_ARG_TYPE('expected', ['Function', 'RegExp'], expected);
    } // Handle primitives properly.


    if (_typeof(actual) !== 'object' || actual === null) {
      var err = new AssertionError({
        actual: actual,
        expected: expected,
        message: msg,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.operator = fn.name;
      throw err;
    }

    var keys = Object.keys(expected); // Special handle errors to make sure the name and the message are compared
    // as well.

    if (expected instanceof Error) {
      keys.push('name', 'message');
    } else if (keys.length === 0) {
      throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
    }

    if (isDeepEqual === undefined) lazyLoadComparison();
    keys.forEach(function (key) {
      if (typeof actual[key] === 'string' && isRegExp(expected[key]) && expected[key].test(actual[key])) {
        return;
      }

      compareExceptionKey(actual, expected, key, msg, keys, fn);
    });
    return true;
  } // Guard instanceof against arrow functions as they don't have a prototype.


  if (expected.prototype !== undefined && actual instanceof expected) {
    return true;
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function getActual(fn) {
  if (typeof fn !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
  }

  try {
    fn();
  } catch (e) {
    return e;
  }

  return NO_EXCEPTION_SENTINEL;
}

function checkIsPromise(obj) {
  // Accept native ES6 promises and promises that are implemented in a similar
  // way. Do not accept thenables that use a function as `obj` and that have no
  // `catch` handler.
  // TODO: thenables are checked up until they have the correct methods,
  // but according to documentation, the `then` method should receive
  // the `fulfill` and `reject` arguments as well or it may be never resolved.
  return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';
}

function waitForActual(promiseFn) {
  return Promise.resolve().then(function () {
    var resultPromise;

    if (typeof promiseFn === 'function') {
      // Return a rejected promise if `promiseFn` throws synchronously.
      resultPromise = promiseFn(); // Fail in case no promise is returned.

      if (!checkIsPromise(resultPromise)) {
        throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
      }
    } else if (checkIsPromise(promiseFn)) {
      resultPromise = promiseFn;
    } else {
      throw new ERR_INVALID_ARG_TYPE('promiseFn', ['Function', 'Promise'], promiseFn);
    }

    return Promise.resolve().then(function () {
      return resultPromise;
    }).then(function () {
      return NO_EXCEPTION_SENTINEL;
    }).catch(function (e) {
      return e;
    });
  });
}

function expectsError(stackStartFn, actual, error, message) {
  if (typeof error === 'string') {
    if (arguments.length === 4) {
      throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
    }

    if (_typeof(actual) === 'object' && actual !== null) {
      if (actual.message === error) {
        throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
      }
    } else if (actual === error) {
      throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
    }

    message = error;
    error = undefined;
  } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
  }

  if (actual === NO_EXCEPTION_SENTINEL) {
    var details = '';

    if (error && error.name) {
      details += " (".concat(error.name, ")");
    }

    details += message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
    innerFail({
      actual: undefined,
      expected: error,
      operator: stackStartFn.name,
      message: "Missing expected ".concat(fnType).concat(details),
      stackStartFn: stackStartFn
    });
  }

  if (error && !expectedException(actual, error, message, stackStartFn)) {
    throw actual;
  }
}

function expectsNoError(stackStartFn, actual, error, message) {
  if (actual === NO_EXCEPTION_SENTINEL) return;

  if (typeof error === 'string') {
    message = error;
    error = undefined;
  }

  if (!error || expectedException(actual, error)) {
    var details = message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
    innerFail({
      actual: actual,
      expected: error,
      operator: stackStartFn.name,
      message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
      stackStartFn: stackStartFn
    });
  }

  throw actual;
}

assert.throws = function throws(promiseFn) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
};

assert.rejects = function rejects(promiseFn) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  return waitForActual(promiseFn).then(function (result) {
    return expectsError.apply(void 0, [rejects, result].concat(args));
  });
};

assert.doesNotThrow = function doesNotThrow(fn) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }

  expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
};

assert.doesNotReject = function doesNotReject(fn) {
  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    args[_key5 - 1] = arguments[_key5];
  }

  return waitForActual(fn).then(function (result) {
    return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
  });
};

assert.ifError = function ifError(err) {
  if (err !== null && err !== undefined) {
    var message = 'ifError got unwanted exception: ';

    if (_typeof(err) === 'object' && typeof err.message === 'string') {
      if (err.message.length === 0 && err.constructor) {
        message += err.constructor.name;
      } else {
        message += err.message;
      }
    } else {
      message += inspect(err);
    }

    var newErr = new AssertionError({
      actual: err,
      expected: null,
      operator: 'ifError',
      message: message,
      stackStartFn: ifError
    }); // Make sure we actually have a stack trace!

    var origStack = err.stack;

    if (typeof origStack === 'string') {
      // This will remove any duplicated frames from the error frames taken
      // from within `ifError` and add the original error frames to the newly
      // created ones.
      var tmp2 = origStack.split('\n');
      tmp2.shift(); // Filter all frames existing in err.stack.

      var tmp1 = newErr.stack.split('\n');

      for (var i = 0; i < tmp2.length; i++) {
        // Find the first occurrence of the frame.
        var pos = tmp1.indexOf(tmp2[i]);

        if (pos !== -1) {
          // Only keep new frames.
          tmp1 = tmp1.slice(0, pos);
          break;
        }
      }

      newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
    }

    throw newErr;
  }
}; // Expose a strict only variant of assert


function strict() {
  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }

  innerOk.apply(void 0, [strict, args.length].concat(args));
}

assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

/***/ }),

/***/ 4082:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(4406);
// Currently in sync with Node.js lib/internal/assert/assertion_error.js
// https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c


function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _require = __webpack_require__(3335),
    inspect = _require.inspect;

var _require2 = __webpack_require__(7515),
    ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat


function repeat(str, count) {
  count = Math.floor(count);
  if (str.length == 0 || count == 0) return '';
  var maxCount = str.length * count;
  count = Math.floor(Math.log(count) / Math.log(2));

  while (count) {
    str += str;
    count--;
  }

  str += str.substring(0, maxCount - str.length);
  return str;
}

var blue = '';
var green = '';
var red = '';
var white = '';
var kReadableOperator = {
  deepStrictEqual: 'Expected values to be strictly deep-equal:',
  strictEqual: 'Expected values to be strictly equal:',
  strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
  deepEqual: 'Expected values to be loosely deep-equal:',
  equal: 'Expected values to be loosely equal:',
  notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
  notStrictEqual: 'Expected "actual" to be strictly unequal to:',
  notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
  notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
  notEqual: 'Expected "actual" to be loosely unequal to:',
  notIdentical: 'Values identical but not reference-equal:'
}; // Comparing short primitives should just show === / !== instead of using the
// diff.

var kMaxShortLength = 10;

function copyError(source) {
  var keys = Object.keys(source);
  var target = Object.create(Object.getPrototypeOf(source));
  keys.forEach(function (key) {
    target[key] = source[key];
  });
  Object.defineProperty(target, 'message', {
    value: source.message
  });
  return target;
}

function inspectValue(val) {
  // The util.inspect default values could be changed. This makes sure the
  // error messages contain the necessary information nevertheless.
  return inspect(val, {
    compact: false,
    customInspect: false,
    depth: 1000,
    maxArrayLength: Infinity,
    // Assert compares only enumerable properties (with a few exceptions).
    showHidden: false,
    // Having a long line as error is better than wrapping the line for
    // comparison for now.
    // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
    // have meta information about the inspected properties (i.e., know where
    // in what line the property starts and ends).
    breakLength: Infinity,
    // Assert does not detect proxies currently.
    showProxy: false,
    sorted: true,
    // Inspect getters as we also check them when comparing entries.
    getters: true
  });
}

function createErrDiff(actual, expected, operator) {
  var other = '';
  var res = '';
  var lastPos = 0;
  var end = '';
  var skipped = false;
  var actualInspected = inspectValue(actual);
  var actualLines = actualInspected.split('\n');
  var expectedLines = inspectValue(expected).split('\n');
  var i = 0;
  var indicator = ''; // In case both values are objects explicitly mark them as not reference equal
  // for the `strictEqual` operator.

  if (operator === 'strictEqual' && _typeof(actual) === 'object' && _typeof(expected) === 'object' && actual !== null && expected !== null) {
    operator = 'strictEqualObject';
  } // If "actual" and "expected" fit on a single line and they are not strictly
  // equal, check further special handling.


  if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
    var inputLength = actualLines[0].length + expectedLines[0].length; // If the character length of "actual" and "expected" together is less than
    // kMaxShortLength and if neither is an object and at least one of them is
    // not `zero`, use the strict equal comparison to visualize the output.

    if (inputLength <= kMaxShortLength) {
      if ((_typeof(actual) !== 'object' || actual === null) && (_typeof(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {
        // -0 === +0
        return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
      }
    } else if (operator !== 'strictEqualObject') {
      // If the stderr is a tty and the input length is lower than the current
      // columns per line, add a mismatch indicator below the output. If it is
      // not a tty, use a default value of 80 characters.
      var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;

      if (inputLength < maxLength) {
        while (actualLines[0][i] === expectedLines[0][i]) {
          i++;
        } // Ignore the first characters.


        if (i > 2) {
          // Add position indicator for the first mismatch in case it is a
          // single line and the input length is less than the column length.
          indicator = "\n  ".concat(repeat(' ', i), "^");
          i = 0;
        }
      }
    }
  } // Remove all ending lines that match (this optimizes the output for
  // readability by reducing the number of total changed lines).


  var a = actualLines[actualLines.length - 1];
  var b = expectedLines[expectedLines.length - 1];

  while (a === b) {
    if (i++ < 2) {
      end = "\n  ".concat(a).concat(end);
    } else {
      other = a;
    }

    actualLines.pop();
    expectedLines.pop();
    if (actualLines.length === 0 || expectedLines.length === 0) break;
    a = actualLines[actualLines.length - 1];
    b = expectedLines[expectedLines.length - 1];
  }

  var maxLines = Math.max(actualLines.length, expectedLines.length); // Strict equal with identical objects that are not identical by reference.
  // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })

  if (maxLines === 0) {
    // We have to get the result again. The lines were all removed before.
    var _actualLines = actualInspected.split('\n'); // Only remove lines in case it makes sense to collapse those.
    // TODO: Accept env to always show the full error.


    if (_actualLines.length > 30) {
      _actualLines[26] = "".concat(blue, "...").concat(white);

      while (_actualLines.length > 27) {
        _actualLines.pop();
      }
    }

    return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
  }

  if (i > 3) {
    end = "\n".concat(blue, "...").concat(white).concat(end);
    skipped = true;
  }

  if (other !== '') {
    end = "\n  ".concat(other).concat(end);
    other = '';
  }

  var printedLines = 0;
  var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
  var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");

  for (i = 0; i < maxLines; i++) {
    // Only extra expected lines exist
    var cur = i - lastPos;

    if (actualLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(expectedLines[i - 2]);
          printedLines++;
        }

        res += "\n  ".concat(expectedLines[i - 1]);
        printedLines++;
      } // Mark the current line as the last diverging one.


      lastPos = i; // Add the expected line to the cache.

      other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
      printedLines++; // Only extra actual lines exist
    } else if (expectedLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(actualLines[i - 2]);
          printedLines++;
        }

        res += "\n  ".concat(actualLines[i - 1]);
        printedLines++;
      } // Mark the current line as the last diverging one.


      lastPos = i; // Add the actual line to the result.

      res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
      printedLines++; // Lines diverge
    } else {
      var expectedLine = expectedLines[i];
      var actualLine = actualLines[i]; // If the lines diverge, specifically check for lines that only diverge by
      // a trailing comma. In that case it is actually identical and we should
      // mark it as such.

      var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine); // If the expected line has a trailing comma but is otherwise identical,
      // add a comma at the end of the actual line. Otherwise the output could
      // look weird as in:
      //
      //   [
      //     1         // No comma at the end!
      // +   2
      //   ]
      //

      if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {
        divergingLines = false;
        actualLine += ',';
      }

      if (divergingLines) {
        // If the last diverging line is more than one line above and the
        // current line is at least line three, add some of the former lines and
        // also add dots to indicate skipped entries.
        if (cur > 1 && i > 2) {
          if (cur > 4) {
            res += "\n".concat(blue, "...").concat(white);
            skipped = true;
          } else if (cur > 3) {
            res += "\n  ".concat(actualLines[i - 2]);
            printedLines++;
          }

          res += "\n  ".concat(actualLines[i - 1]);
          printedLines++;
        } // Mark the current line as the last diverging one.


        lastPos = i; // Add the actual line to the result and cache the expected diverging
        // line so consecutive diverging lines show up as +++--- and not +-+-+-.

        res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
        other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
        printedLines += 2; // Lines are identical
      } else {
        // Add all cached information to the result before adding other things
        // and reset the cache.
        res += other;
        other = ''; // If the last diverging line is exactly one line above or if it is the
        // very first line, add the line to the result.

        if (cur === 1 || i === 0) {
          res += "\n  ".concat(actualLine);
          printedLines++;
        }
      }
    } // Inspected object to big (Show ~20 rows max)


    if (printedLines > 20 && i < maxLines - 2) {
      return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
    }
  }

  return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
}

var AssertionError =
/*#__PURE__*/
function (_Error) {
  _inherits(AssertionError, _Error);

  function AssertionError(options) {
    var _this;

    _classCallCheck(this, AssertionError);

    if (_typeof(options) !== 'object' || options === null) {
      throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);
    }

    var message = options.message,
        operator = options.operator,
        stackStartFn = options.stackStartFn;
    var actual = options.actual,
        expected = options.expected;
    var limit = Error.stackTraceLimit;
    Error.stackTraceLimit = 0;

    if (message != null) {
      _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, String(message)));
    } else {
      if (process.stderr && process.stderr.isTTY) {
        // Reset on each call to make sure we handle dynamically set environment
        // variables correct.
        if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
          blue = "\x1B[34m";
          green = "\x1B[32m";
          white = "\x1B[39m";
          red = "\x1B[31m";
        } else {
          blue = '';
          green = '';
          white = '';
          red = '';
        }
      } // Prevent the error stack from being visible by duplicating the error
      // in a very close way to the original in case both sides are actually
      // instances of Error.


      if (_typeof(actual) === 'object' && actual !== null && _typeof(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {
        actual = copyError(actual);
        expected = copyError(expected);
      }

      if (operator === 'deepStrictEqual' || operator === 'strictEqual') {
        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, createErrDiff(actual, expected, operator)));
      } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {
        // In case the objects are equal but the operator requires unequal, show
        // the first object and say A equals B
        var base = kReadableOperator[operator];
        var res = inspectValue(actual).split('\n'); // In case "actual" is an object, it should not be reference equal.

        if (operator === 'notStrictEqual' && _typeof(actual) === 'object' && actual !== null) {
          base = kReadableOperator.notStrictEqualObject;
        } // Only remove lines in case it makes sense to collapse those.
        // TODO: Accept env to always show the full error.


        if (res.length > 30) {
          res[26] = "".concat(blue, "...").concat(white);

          while (res.length > 27) {
            res.pop();
          }
        } // Only print a single input.


        if (res.length === 1) {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, " ").concat(res[0])));
        } else {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n")));
        }
      } else {
        var _res = inspectValue(actual);

        var other = '';
        var knownOperators = kReadableOperator[operator];

        if (operator === 'notDeepEqual' || operator === 'notEqual') {
          _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);

          if (_res.length > 1024) {
            _res = "".concat(_res.slice(0, 1021), "...");
          }
        } else {
          other = "".concat(inspectValue(expected));

          if (_res.length > 512) {
            _res = "".concat(_res.slice(0, 509), "...");
          }

          if (other.length > 512) {
            other = "".concat(other.slice(0, 509), "...");
          }

          if (operator === 'deepEqual' || operator === 'equal') {
            _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
          } else {
            other = " ".concat(operator, " ").concat(other);
          }
        }

        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(_res).concat(other)));
      }
    }

    Error.stackTraceLimit = limit;
    _this.generatedMessage = !message;
    Object.defineProperty(_assertThisInitialized(_this), 'name', {
      value: 'AssertionError [ERR_ASSERTION]',
      enumerable: false,
      writable: true,
      configurable: true
    });
    _this.code = 'ERR_ASSERTION';
    _this.actual = actual;
    _this.expected = expected;
    _this.operator = operator;

    if (Error.captureStackTrace) {
      // eslint-disable-next-line no-restricted-syntax
      Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
    } // Create error message including the error code in the name.


    _this.stack; // Reset the name.

    _this.name = 'AssertionError';
    return _possibleConstructorReturn(_this);
  }

  _createClass(AssertionError, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
    }
  }, {
    key: inspect.custom,
    value: function value(recurseTimes, ctx) {
      // This limits the `actual` and `expected` property default inspection to
      // the minimum depth. Otherwise those values would be too verbose compared
      // to the actual error message which contains a combined view of these two
      // input values.
      return inspect(this, _objectSpread({}, ctx, {
        customInspect: false,
        depth: 0
      }));
    }
  }]);

  return AssertionError;
}(_wrapNativeSuper(Error));

module.exports = AssertionError;

/***/ }),

/***/ 7515:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/errors.js
// https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f

/* eslint node-core/documented-errors: "error" */

/* eslint node-core/alphabetize-errors: "error" */

/* eslint node-core/prefer-util-format-errors: "error" */
 // The whole point behind this internal module is to allow Node.js to no
// longer be forced to treat every error message change as a semver-major
// change. The NodeError classes here all expose a `code` property whose
// value statically and permanently identifies the error. While the error
// message may change, the code should not.

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var codes = {}; // Lazy loaded

var assert;
var util;

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inherits(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      var _this;

      _classCallCheck(this, NodeError);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeError).call(this, getMessage(arg1, arg2, arg3)));
      _this.code = code;
      return _this;
    }

    return NodeError;
  }(Base);

  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  if (assert === undefined) assert = __webpack_require__(1696);
  assert(typeof name === 'string', "'name' must be a string"); // determiner: 'must be' or 'must not be'

  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } // TODO(BridgeAR): Improve the output by showing `null` and similar.


  msg += ". Received type ".concat(_typeof(actual));
  return msg;
}, TypeError);
createErrorType('ERR_INVALID_ARG_VALUE', function (name, value) {
  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
  if (util === undefined) util = __webpack_require__(3335);
  var inspected = util.inspect(value);

  if (inspected.length > 128) {
    inspected = "".concat(inspected.slice(0, 128), "...");
  }

  return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
}, TypeError, RangeError);
createErrorType('ERR_INVALID_RETURN_VALUE', function (input, name, value) {
  var type;

  if (value && value.constructor && value.constructor.name) {
    type = "instance of ".concat(value.constructor.name);
  } else {
    type = "type ".concat(_typeof(value));
  }

  return "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
}, TypeError);
createErrorType('ERR_MISSING_ARGS', function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (assert === undefined) assert = __webpack_require__(1696);
  assert(args.length > 0, 'At least one arg needs to be specified');
  var msg = 'The ';
  var len = args.length;
  args = args.map(function (a) {
    return "\"".concat(a, "\"");
  });

  switch (len) {
    case 1:
      msg += "".concat(args[0], " argument");
      break;

    case 2:
      msg += "".concat(args[0], " and ").concat(args[1], " arguments");
      break;

    default:
      msg += args.slice(0, len - 1).join(', ');
      msg += ", and ".concat(args[len - 1], " arguments");
      break;
  }

  return "".concat(msg, " must be specified");
}, TypeError);
module.exports.codes = codes;

/***/ }),

/***/ 6796:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/util/comparisons.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var regexFlagsSupported = /a/g.flags !== undefined;

var arrayFromSet = function arrayFromSet(set) {
  var array = [];
  set.forEach(function (value) {
    return array.push(value);
  });
  return array;
};

var arrayFromMap = function arrayFromMap(map) {
  var array = [];
  map.forEach(function (value, key) {
    return array.push([key, value]);
  });
  return array;
};

var objectIs = Object.is ? Object.is : __webpack_require__(4679);
var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function () {
  return [];
};
var numberIsNaN = Number.isNaN ? Number.isNaN : __webpack_require__(4782);

function uncurryThis(f) {
  return f.call.bind(f);
}

var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
var objectToString = uncurryThis(Object.prototype.toString);

var _require$types = (__webpack_require__(3335).types),
    isAnyArrayBuffer = _require$types.isAnyArrayBuffer,
    isArrayBufferView = _require$types.isArrayBufferView,
    isDate = _require$types.isDate,
    isMap = _require$types.isMap,
    isRegExp = _require$types.isRegExp,
    isSet = _require$types.isSet,
    isNativeError = _require$types.isNativeError,
    isBoxedPrimitive = _require$types.isBoxedPrimitive,
    isNumberObject = _require$types.isNumberObject,
    isStringObject = _require$types.isStringObject,
    isBooleanObject = _require$types.isBooleanObject,
    isBigIntObject = _require$types.isBigIntObject,
    isSymbolObject = _require$types.isSymbolObject,
    isFloat32Array = _require$types.isFloat32Array,
    isFloat64Array = _require$types.isFloat64Array;

function isNonIndex(key) {
  if (key.length === 0 || key.length > 10) return true;

  for (var i = 0; i < key.length; i++) {
    var code = key.charCodeAt(i);
    if (code < 48 || code > 57) return true;
  } // The maximum size for an array is 2 ** 32 -1.


  return key.length === 10 && key >= Math.pow(2, 32);
}

function getOwnNonIndexProperties(value) {
  return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
} // Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */


function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }

  if (y < x) {
    return 1;
  }

  return 0;
}

var ONLY_ENUMERABLE = undefined;
var kStrict = true;
var kLoose = false;
var kNoIterator = 0;
var kIsArray = 1;
var kIsSet = 2;
var kIsMap = 3; // Check if they have the same source and flags

function areSimilarRegExps(a, b) {
  return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
}

function areSimilarFloatArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }

  for (var offset = 0; offset < a.byteLength; offset++) {
    if (a[offset] !== b[offset]) {
      return false;
    }
  }

  return true;
}

function areSimilarTypedArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }

  return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
}

function areEqualArrayBuffers(buf1, buf2) {
  return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
}

function isEqualBoxedPrimitive(val1, val2) {
  if (isNumberObject(val1)) {
    return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
  }

  if (isStringObject(val1)) {
    return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
  }

  if (isBooleanObject(val1)) {
    return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
  }

  if (isBigIntObject(val1)) {
    return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
  }

  return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
} // Notes: Type tags are historical [[Class]] properties that can be set by
// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
// and retrieved using Object.prototype.toString.call(obj) in JS
// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
// for a list of tags pre-defined in the spec.
// There are some unspecified tags in the wild too (e.g. typed array tags).
// Since tags can be altered, they only serve fast failures
//
// Typed arrays and buffers are checked by comparing the content in their
// underlying ArrayBuffer. This optimization requires that it's
// reasonable to interpret their underlying memory in the same way,
// which is checked by comparing their type tags.
// (e.g. a Uint8Array and a Uint16Array with the same memory content
// could still be different because they will be interpreted differently).
//
// For strict comparison, objects should have
// a) The same built-in type tags
// b) The same prototypes.


function innerDeepEqual(val1, val2, strict, memos) {
  // All identical values are equivalent, as determined by ===.
  if (val1 === val2) {
    if (val1 !== 0) return true;
    return strict ? objectIs(val1, val2) : true;
  } // Check more closely if val1 and val2 are equal.


  if (strict) {
    if (_typeof(val1) !== 'object') {
      return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);
    }

    if (_typeof(val2) !== 'object' || val1 === null || val2 === null) {
      return false;
    }

    if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
      return false;
    }
  } else {
    if (val1 === null || _typeof(val1) !== 'object') {
      if (val2 === null || _typeof(val2) !== 'object') {
        // eslint-disable-next-line eqeqeq
        return val1 == val2;
      }

      return false;
    }

    if (val2 === null || _typeof(val2) !== 'object') {
      return false;
    }
  }

  var val1Tag = objectToString(val1);
  var val2Tag = objectToString(val2);

  if (val1Tag !== val2Tag) {
    return false;
  }

  if (Array.isArray(val1)) {
    // Check for sparse arrays and general fast path
    if (val1.length !== val2.length) {
      return false;
    }

    var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
    var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);

    if (keys1.length !== keys2.length) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
  } // [browserify] This triggers on certain types in IE (Map/Set) so we don't
  // wan't to early return out of the rest of the checks. However we can check
  // if the second value is one of these values and the first isn't.


  if (val1Tag === '[object Object]') {
    // return keyCheck(val1, val2, strict, memos, kNoIterator);
    if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
      return false;
    }
  }

  if (isDate(val1)) {
    if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
      return false;
    }
  } else if (isRegExp(val1)) {
    if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
      return false;
    }
  } else if (isNativeError(val1) || val1 instanceof Error) {
    // Do not compare the stack as it might differ even though the error itself
    // is otherwise identical.
    if (val1.message !== val2.message || val1.name !== val2.name) {
      return false;
    }
  } else if (isArrayBufferView(val1)) {
    if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
      if (!areSimilarFloatArrays(val1, val2)) {
        return false;
      }
    } else if (!areSimilarTypedArrays(val1, val2)) {
      return false;
    } // Buffer.compare returns true, so val1.length === val2.length. If they both
    // only contain numeric keys, we don't need to exam further than checking
    // the symbols.


    var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);

    var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);

    if (_keys.length !== _keys2.length) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
  } else if (isSet(val1)) {
    if (!isSet(val2) || val1.size !== val2.size) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsSet);
  } else if (isMap(val1)) {
    if (!isMap(val2) || val1.size !== val2.size) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsMap);
  } else if (isAnyArrayBuffer(val1)) {
    if (!areEqualArrayBuffers(val1, val2)) {
      return false;
    }
  } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
    return false;
  }

  return keyCheck(val1, val2, strict, memos, kNoIterator);
}

function getEnumerables(val, keys) {
  return keys.filter(function (k) {
    return propertyIsEnumerable(val, k);
  });
}

function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
  // For all remaining Object pairs, including Array, objects and Maps,
  // equivalence is determined by having:
  // a) The same number of owned enumerable properties
  // b) The same set of keys/indexes (although not necessarily the same order)
  // c) Equivalent values for every corresponding key/index
  // d) For Sets and Maps, equal contents
  // Note: this accounts for both named and indexed properties on Arrays.
  if (arguments.length === 5) {
    aKeys = Object.keys(val1);
    var bKeys = Object.keys(val2); // The pair must have the same number of owned properties.

    if (aKeys.length !== bKeys.length) {
      return false;
    }
  } // Cheap key test


  var i = 0;

  for (; i < aKeys.length; i++) {
    if (!hasOwnProperty(val2, aKeys[i])) {
      return false;
    }
  }

  if (strict && arguments.length === 5) {
    var symbolKeysA = objectGetOwnPropertySymbols(val1);

    if (symbolKeysA.length !== 0) {
      var count = 0;

      for (i = 0; i < symbolKeysA.length; i++) {
        var key = symbolKeysA[i];

        if (propertyIsEnumerable(val1, key)) {
          if (!propertyIsEnumerable(val2, key)) {
            return false;
          }

          aKeys.push(key);
          count++;
        } else if (propertyIsEnumerable(val2, key)) {
          return false;
        }
      }

      var symbolKeysB = objectGetOwnPropertySymbols(val2);

      if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
        return false;
      }
    } else {
      var _symbolKeysB = objectGetOwnPropertySymbols(val2);

      if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
        return false;
      }
    }
  }

  if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
    return true;
  } // Use memos to handle cycles.


  if (memos === undefined) {
    memos = {
      val1: new Map(),
      val2: new Map(),
      position: 0
    };
  } else {
    // We prevent up to two map.has(x) calls by directly retrieving the value
    // and checking for undefined. The map can only contain numbers, so it is
    // safe to check for undefined only.
    var val2MemoA = memos.val1.get(val1);

    if (val2MemoA !== undefined) {
      var val2MemoB = memos.val2.get(val2);

      if (val2MemoB !== undefined) {
        return val2MemoA === val2MemoB;
      }
    }

    memos.position++;
  }

  memos.val1.set(val1, memos.position);
  memos.val2.set(val2, memos.position);
  var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
  memos.val1.delete(val1);
  memos.val2.delete(val2);
  return areEq;
}

function setHasEqualElement(set, val1, strict, memo) {
  // Go looking.
  var setValues = arrayFromSet(set);

  for (var i = 0; i < setValues.length; i++) {
    var val2 = setValues[i];

    if (innerDeepEqual(val1, val2, strict, memo)) {
      // Remove the matching element to make sure we do not check that again.
      set.delete(val2);
      return true;
    }
  }

  return false;
} // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
// Sadly it is not possible to detect corresponding values properly in case the
// type is a string, number, bigint or boolean. The reason is that those values
// can match lots of different string values (e.g., 1n == '+00001').


function findLooseMatchingPrimitives(prim) {
  switch (_typeof(prim)) {
    case 'undefined':
      return null;

    case 'object':
      // Only pass in null as object!
      return undefined;

    case 'symbol':
      return false;

    case 'string':
      prim = +prim;
    // Loose equal entries exist only if the string is possible to convert to
    // a regular number and not NaN.
    // Fall through

    case 'number':
      if (numberIsNaN(prim)) {
        return false;
      }

  }

  return true;
}

function setMightHaveLoosePrim(a, b, prim) {
  var altValue = findLooseMatchingPrimitives(prim);
  if (altValue != null) return altValue;
  return b.has(altValue) && !a.has(altValue);
}

function mapMightHaveLoosePrim(a, b, prim, item, memo) {
  var altValue = findLooseMatchingPrimitives(prim);

  if (altValue != null) {
    return altValue;
  }

  var curB = b.get(altValue);

  if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
    return false;
  }

  return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
}

function setEquiv(a, b, strict, memo) {
  // This is a lazily initiated Set of entries which have to be compared
  // pairwise.
  var set = null;
  var aValues = arrayFromSet(a);

  for (var i = 0; i < aValues.length; i++) {
    var val = aValues[i]; // Note: Checking for the objects first improves the performance for object
    // heavy sets but it is a minor slow down for primitives. As they are fast
    // to check this improves the worst case scenario instead.

    if (_typeof(val) === 'object' && val !== null) {
      if (set === null) {
        set = new Set();
      } // If the specified value doesn't exist in the second set its an not null
      // object (or non strict only: a not matching primitive) we'll need to go
      // hunting for something thats deep-(strict-)equal to it. To make this
      // O(n log n) complexity we have to copy these values in a new set first.


      set.add(val);
    } else if (!b.has(val)) {
      if (strict) return false; // Fast path to detect missing string, symbol, undefined and null values.

      if (!setMightHaveLoosePrim(a, b, val)) {
        return false;
      }

      if (set === null) {
        set = new Set();
      }

      set.add(val);
    }
  }

  if (set !== null) {
    var bValues = arrayFromSet(b);

    for (var _i = 0; _i < bValues.length; _i++) {
      var _val = bValues[_i]; // We have to check if a primitive value is already
      // matching and only if it's not, go hunting for it.

      if (_typeof(_val) === 'object' && _val !== null) {
        if (!setHasEqualElement(set, _val, strict, memo)) return false;
      } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
  // To be able to handle cases like:
  //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
  // ... we need to consider *all* matching keys, not just the first we find.
  var setValues = arrayFromSet(set);

  for (var i = 0; i < setValues.length; i++) {
    var key2 = setValues[i];

    if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
      set.delete(key2);
      return true;
    }
  }

  return false;
}

function mapEquiv(a, b, strict, memo) {
  var set = null;
  var aEntries = arrayFromMap(a);

  for (var i = 0; i < aEntries.length; i++) {
    var _aEntries$i = _slicedToArray(aEntries[i], 2),
        key = _aEntries$i[0],
        item1 = _aEntries$i[1];

    if (_typeof(key) === 'object' && key !== null) {
      if (set === null) {
        set = new Set();
      }

      set.add(key);
    } else {
      // By directly retrieving the value we prevent another b.has(key) check in
      // almost all possible cases.
      var item2 = b.get(key);

      if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
        if (strict) return false; // Fast path to detect missing string, symbol, undefined and null
        // keys.

        if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;

        if (set === null) {
          set = new Set();
        }

        set.add(key);
      }
    }
  }

  if (set !== null) {
    var bEntries = arrayFromMap(b);

    for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
      var _bEntries$_i = _slicedToArray(bEntries[_i2], 2),
          key = _bEntries$_i[0],
          item = _bEntries$_i[1];

      if (_typeof(key) === 'object' && key !== null) {
        if (!mapHasEqualEntry(set, a, key, item, strict, memo)) return false;
      } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function objEquiv(a, b, strict, keys, memos, iterationType) {
  // Sets and maps don't have their entries accessible via normal object
  // properties.
  var i = 0;

  if (iterationType === kIsSet) {
    if (!setEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsMap) {
    if (!mapEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsArray) {
    for (; i < a.length; i++) {
      if (hasOwnProperty(a, i)) {
        if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
          return false;
        }
      } else if (hasOwnProperty(b, i)) {
        return false;
      } else {
        // Array is sparse.
        var keysA = Object.keys(a);

        for (; i < keysA.length; i++) {
          var key = keysA[i];

          if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
            return false;
          }
        }

        if (keysA.length !== Object.keys(b).length) {
          return false;
        }

        return true;
      }
    }
  } // The pair must have equivalent values for every corresponding key.
  // Possibly expensive deep test:


  for (i = 0; i < keys.length; i++) {
    var _key = keys[i];

    if (!innerDeepEqual(a[_key], b[_key], strict, memos)) {
      return false;
    }
  }

  return true;
}

function isDeepEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kLoose);
}

function isDeepStrictEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kStrict);
}

module.exports = {
  isDeepEqual: isDeepEqual,
  isDeepStrictEqual: isDeepStrictEqual
};

/***/ }),

/***/ 5766:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ 8834:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;
/* provided dependency */ var console = __webpack_require__(3716);
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



const base64 = __webpack_require__(5766)
const ieee754 = __webpack_require__(2333)
const customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
    : null

exports.lW = Buffer
__webpack_unused_export__ = SlowBuffer
exports.h2 = 50

const K_MAX_LENGTH = 0x7fffffff
__webpack_unused_export__ = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    const arr = new Uint8Array(1)
    const proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  const buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof SharedArrayBuffer !== 'undefined' &&
      (isInstance(value, SharedArrayBuffer) ||
      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  const valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  const b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  const length = byteLength(string, encoding) | 0
  let buf = createBuffer(length)

  const actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  const length = array.length < 0 ? 0 : checked(array.length) | 0
  const buf = createBuffer(length)
  for (let i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayView (arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    const copy = new Uint8Array(arrayView)
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
  }
  return fromArrayLike(arrayView)
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  let buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    const len = checked(obj.length) | 0
    const buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  let x = a.length
  let y = b.length

  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  let i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  const buffer = Buffer.allocUnsafe(length)
  let pos = 0
  for (i = 0; i < list.length; ++i) {
    let buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)
        buf.copy(buffer, pos)
      } else {
        Uint8Array.prototype.set.call(
          buffer,
          buf,
          pos
        )
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    } else {
      buf.copy(buffer, pos)
    }
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  const len = string.length
  const mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  let loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  const i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  const len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (let i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  const len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (let i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  const len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (let i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  const length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  let str = ''
  const max = exports.h2
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  let x = thisEnd - thisStart
  let y = end - start
  const len = Math.min(x, y)

  const thisCopy = this.slice(thisStart, thisEnd)
  const targetCopy = target.slice(start, end)

  for (let i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  let indexSize = 1
  let arrLength = arr.length
  let valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  let i
  if (dir) {
    let foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      let found = true
      for (let j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  const remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  const strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  let i
  for (i = 0; i < length; ++i) {
    const parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  const remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  const res = []

  let i = start
  while (i < end) {
    const firstByte = buf[i]
    let codePoint = null
    let bytesPerSequence = (firstByte > 0xEF)
      ? 4
      : (firstByte > 0xDF)
          ? 3
          : (firstByte > 0xBF)
              ? 2
              : 1

    if (i + bytesPerSequence <= end) {
      let secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  const len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  let res = ''
  let i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  const len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  let out = ''
  for (let i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  const bytes = buf.slice(start, end)
  let res = ''
  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  for (let i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  const len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  const newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUintLE =
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUintBE =
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  let val = this[offset + --byteLength]
  let mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUint8 =
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUint16LE =
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUint16BE =
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUint32LE =
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUint32BE =
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const lo = first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24

  const hi = this[++offset] +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    last * 2 ** 24

  return BigInt(lo) + (BigInt(hi) << BigInt(32))
})

Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const hi = first * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  const lo = this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last

  return (BigInt(hi) << BigInt(32)) + BigInt(lo)
})

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let i = byteLength
  let mul = 1
  let val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = this[offset + 4] +
    this[offset + 5] * 2 ** 8 +
    this[offset + 6] * 2 ** 16 +
    (last << 24) // Overflow

  return (BigInt(val) << BigInt(32)) +
    BigInt(first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24)
})

Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  return (BigInt(val) << BigInt(32)) +
    BigInt(this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last)
})

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUintLE =
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let mul = 1
  let i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUintBE =
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let i = byteLength - 1
  let mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUint8 =
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUint16LE =
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUint16BE =
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUint32LE =
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUint32BE =
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function wrtBigUInt64LE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  return offset
}

function wrtBigUInt64BE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset + 7] = lo
  lo = lo >> 8
  buf[offset + 6] = lo
  lo = lo >> 8
  buf[offset + 5] = lo
  lo = lo >> 8
  buf[offset + 4] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset + 3] = hi
  hi = hi >> 8
  buf[offset + 2] = hi
  hi = hi >> 8
  buf[offset + 1] = hi
  hi = hi >> 8
  buf[offset] = hi
  return offset + 8
}

Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = 0
  let mul = 1
  let sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = byteLength - 1
  let mul = 1
  let sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  const len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      const code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  let i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    const bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    const len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// CUSTOM ERRORS
// =============

// Simplified versions from Node, changed for Buffer-only usage
const errors = {}
function E (sym, getMessage, Base) {
  errors[sym] = class NodeError extends Base {
    constructor () {
      super()

      Object.defineProperty(this, 'message', {
        value: getMessage.apply(this, arguments),
        writable: true,
        configurable: true
      })

      // Add the error code to the name to include it in the stack trace.
      this.name = `${this.name} [${sym}]`
      // Access the stack to generate the error message including the error code
      // from the name.
      this.stack // eslint-disable-line no-unused-expressions
      // Reset the name to the actual name.
      delete this.name
    }

    get code () {
      return sym
    }

    set code (value) {
      Object.defineProperty(this, 'code', {
        configurable: true,
        enumerable: true,
        value,
        writable: true
      })
    }

    toString () {
      return `${this.name} [${sym}]: ${this.message}`
    }
  }
}

E('ERR_BUFFER_OUT_OF_BOUNDS',
  function (name) {
    if (name) {
      return `${name} is outside of buffer bounds`
    }

    return 'Attempt to access memory outside buffer bounds'
  }, RangeError)
E('ERR_INVALID_ARG_TYPE',
  function (name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`
  }, TypeError)
E('ERR_OUT_OF_RANGE',
  function (str, range, input) {
    let msg = `The value of "${str}" is out of range.`
    let received = input
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
      received = addNumericalSeparator(String(input))
    } else if (typeof input === 'bigint') {
      received = String(input)
      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
        received = addNumericalSeparator(received)
      }
      received += 'n'
    }
    msg += ` It must be ${range}. Received ${received}`
    return msg
  }, RangeError)

function addNumericalSeparator (val) {
  let res = ''
  let i = val.length
  const start = val[0] === '-' ? 1 : 0
  for (; i >= start + 4; i -= 3) {
    res = `_${val.slice(i - 3, i)}${res}`
  }
  return `${val.slice(0, i)}${res}`
}

// CHECK FUNCTIONS
// ===============

function checkBounds (buf, offset, byteLength) {
  validateNumber(offset, 'offset')
  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
    boundsError(offset, buf.length - (byteLength + 1))
  }
}

function checkIntBI (value, min, max, buf, offset, byteLength) {
  if (value > max || value < min) {
    const n = typeof min === 'bigint' ? 'n' : ''
    let range
    if (byteLength > 3) {
      if (min === 0 || min === BigInt(0)) {
        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`
      } else {
        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
                `${(byteLength + 1) * 8 - 1}${n}`
      }
    } else {
      range = `>= ${min}${n} and <= ${max}${n}`
    }
    throw new errors.ERR_OUT_OF_RANGE('value', range, value)
  }
  checkBounds(buf, offset, byteLength)
}

function validateNumber (value, name) {
  if (typeof value !== 'number') {
    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)
  }
}

function boundsError (value, length, type) {
  if (Math.floor(value) !== value) {
    validateNumber(value, type)
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)
  }

  if (length < 0) {
    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()
  }

  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',
                                    `>= ${type ? 1 : 0} and <= ${length}`,
                                    value)
}

// HELPER FUNCTIONS
// ================

const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  let codePoint
  const length = string.length
  let leadSurrogate = null
  const bytes = []

  for (let i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  let c, hi, lo
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  let i
  for (i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = (function () {
  const alphabet = '0123456789abcdef'
  const table = new Array(256)
  for (let i = 0; i < 16; ++i) {
    const i16 = i * 16
    for (let j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()

// Return not function with Error if BigInt not supported
function defineBigIntMethod (fn) {
  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
}

function BufferBigIntNotDefined () {
  throw new Error('BigInt not supported')
}


/***/ }),

/***/ 2680:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(7286);

var callBind = __webpack_require__(9429);

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};


/***/ }),

/***/ 9429:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(4090);
var GetIntrinsic = __webpack_require__(7286);

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}


/***/ }),

/***/ 3716:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*global window, global*/
var util = __webpack_require__(3335)
var assert = __webpack_require__(1696)
function now() { return new Date().getTime() }

var slice = Array.prototype.slice
var console
var times = {}

if (typeof __webpack_require__.g !== "undefined" && __webpack_require__.g.console) {
    console = __webpack_require__.g.console
} else if (typeof window !== "undefined" && window.console) {
    console = window.console
} else {
    console = {}
}

var functions = [
    [log, "log"],
    [info, "info"],
    [warn, "warn"],
    [error, "error"],
    [time, "time"],
    [timeEnd, "timeEnd"],
    [trace, "trace"],
    [dir, "dir"],
    [consoleAssert, "assert"]
]

for (var i = 0; i < functions.length; i++) {
    var tuple = functions[i]
    var f = tuple[0]
    var name = tuple[1]

    if (!console[name]) {
        console[name] = f
    }
}

module.exports = console

function log() {}

function info() {
    console.log.apply(console, arguments)
}

function warn() {
    console.log.apply(console, arguments)
}

function error() {
    console.warn.apply(console, arguments)
}

function time(label) {
    times[label] = now()
}

function timeEnd(label) {
    var time = times[label]
    if (!time) {
        throw new Error("No such label: " + label)
    }

    delete times[label]
    var duration = now() - time
    console.log(label + ": " + duration + "ms")
}

function trace() {
    var err = new Error()
    err.name = "Trace"
    err.message = util.format.apply(null, arguments)
    console.error(err.stack)
}

function dir(object) {
    console.log(util.inspect(object) + "\n")
}

function consoleAssert(expression) {
    if (!expression) {
        var arr = slice.call(arguments, 1)
        assert.ok(false, util.format.apply(null, arr))
    }
}


/***/ }),

/***/ 4926:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keys = __webpack_require__(3464);
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var hasPropertyDescriptors = __webpack_require__(1181)();

var supportsDescriptors = origDefineProperty && hasPropertyDescriptors;

var defineProperty = function (object, name, value, predicate) {
	if (name in object) {
		if (predicate === true) {
			if (object[name] === value) {
				return;
			}
		} else if (!isFunction(predicate) || !predicate()) {
			return;
		}
	}
	if (supportsDescriptors) {
		origDefineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value; // eslint-disable-line no-param-reassign
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;


/***/ }),

/***/ 4956:
/***/ ((module) => {

"use strict";
/**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */



function assign(target, firstSource) {
  if (target === undefined || target === null) {
    throw new TypeError('Cannot convert first argument to object');
  }

  var to = Object(target);
  for (var i = 1; i < arguments.length; i++) {
    var nextSource = arguments[i];
    if (nextSource === undefined || nextSource === null) {
      continue;
    }

    var keysArray = Object.keys(Object(nextSource));
    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
      var nextKey = keysArray[nextIndex];
      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
      if (desc !== undefined && desc.enumerable) {
        to[nextKey] = nextSource[nextKey];
      }
    }
  }
  return to;
}

function polyfill() {
  if (!Object.assign) {
    Object.defineProperty(Object, 'assign', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: assign
    });
  }
}

module.exports = {
  assign: assign,
  polyfill: polyfill
};


/***/ }),

/***/ 3243:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isCallable = __webpack_require__(9680);

var toStr = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

var forEachArray = function forEachArray(array, iterator, receiver) {
    for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
            if (receiver == null) {
                iterator(array[i], i, array);
            } else {
                iterator.call(receiver, array[i], i, array);
            }
        }
    }
};

var forEachString = function forEachString(string, iterator, receiver) {
    for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        if (receiver == null) {
            iterator(string.charAt(i), i, string);
        } else {
            iterator.call(receiver, string.charAt(i), i, string);
        }
    }
};

var forEachObject = function forEachObject(object, iterator, receiver) {
    for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
            if (receiver == null) {
                iterator(object[k], k, object);
            } else {
                iterator.call(receiver, object[k], k, object);
            }
        }
    }
};

var forEach = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) {
        throw new TypeError('iterator must be a function');
    }

    var receiver;
    if (arguments.length >= 3) {
        receiver = thisArg;
    }

    if (toStr.call(list) === '[object Array]') {
        forEachArray(list, iterator, receiver);
    } else if (typeof list === 'string') {
        forEachString(list, iterator, receiver);
    } else {
        forEachObject(list, iterator, receiver);
    }
};

module.exports = forEach;


/***/ }),

/***/ 7795:
/***/ ((module) => {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ 4090:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(7795);

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ 7286:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__(2636)();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(4090);
var hasOwn = __webpack_require__(3198);
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


/***/ }),

/***/ 326:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(7286);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);

if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;


/***/ }),

/***/ 1181:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(7286);

var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);

var hasPropertyDescriptors = function hasPropertyDescriptors() {
	if ($defineProperty) {
		try {
			$defineProperty({}, 'a', { value: 1 });
			return true;
		} catch (e) {
			// IE 8 has a broken defineProperty
			return false;
		}
	}
	return false;
};

hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
	// node v0.6 has a bug where array lengths can be Set but not Defined
	if (!hasPropertyDescriptors()) {
		return null;
	}
	try {
		return $defineProperty([], 'length', { value: 1 }).length !== 1;
	} catch (e) {
		// In Firefox 4-22, defining length on an array throws an exception.
		return true;
	}
};

module.exports = hasPropertyDescriptors;


/***/ }),

/***/ 2636:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = __webpack_require__(6679);

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};


/***/ }),

/***/ 6679:
/***/ ((module) => {

"use strict";


/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};


/***/ }),

/***/ 7226:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasSymbols = __webpack_require__(6679);

module.exports = function hasToStringTagShams() {
	return hasSymbols() && !!Symbol.toStringTag;
};


/***/ }),

/***/ 3198:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(4090);

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);


/***/ }),

/***/ 2333:
/***/ ((__unused_webpack_module, exports) => {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ 1285:
/***/ ((module) => {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),

/***/ 2635:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasToStringTag = __webpack_require__(7226)();
var callBound = __webpack_require__(2680);

var $toString = callBound('Object.prototype.toString');

var isStandardArguments = function isArguments(value) {
	if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
		return false;
	}
	return $toString(value) === '[object Arguments]';
};

var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null &&
		typeof value === 'object' &&
		typeof value.length === 'number' &&
		value.length >= 0 &&
		$toString(value) !== '[object Array]' &&
		$toString(value.callee) === '[object Function]';
};

var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());

isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;


/***/ }),

/***/ 9680:
/***/ ((module) => {

"use strict";


var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var objectClass = '[object Object]';
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var ddaClass = '[object HTMLAllCollection]'; // IE 11
var ddaClass2 = '[object HTML document.all class]';
var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`

var isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing

var isDDA = function isDocumentDotAll() { return false; };
if (typeof document === 'object') {
	// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
	var all = document.all;
	if (toStr.call(all) === toStr.call(document.all)) {
		isDDA = function isDocumentDotAll(value) {
			/* globals document: false */
			// in IE 6-8, typeof document.all is "object" and it's truthy
			if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
				try {
					var str = toStr.call(value);
					return (
						str === ddaClass
						|| str === ddaClass2
						|| str === ddaClass3 // opera 12.16
						|| str === objectClass // IE 6-8
					) && value('') == null; // eslint-disable-line eqeqeq
				} catch (e) { /**/ }
			}
			return false;
		};
	}
}

module.exports = reflectApply
	? function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value) && tryFunctionObject(value);
	}
	: function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		if (strClass !== fnClass && strClass !== genClass && !(/^\[object HTML/).test(strClass)) { return false; }
		return tryFunctionObject(value);
	};


/***/ }),

/***/ 3138:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = __webpack_require__(7226)();
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function () { // eslint-disable-line consistent-return
	if (!hasToStringTag) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
var GeneratorFunction;

module.exports = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex.test(fnToStr.call(fn))) {
		return true;
	}
	if (!hasToStringTag) {
		var str = toStr.call(fn);
		return str === '[object GeneratorFunction]';
	}
	if (!getProto) {
		return false;
	}
	if (typeof GeneratorFunction === 'undefined') {
		var generatorFunc = getGeneratorFunc();
		GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
	}
	return getProto(fn) === GeneratorFunction;
};


/***/ }),

/***/ 7053:
/***/ ((module) => {

"use strict";


/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function isNaN(value) {
	return value !== value;
};


/***/ }),

/***/ 4782:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var callBind = __webpack_require__(9429);
var define = __webpack_require__(4926);

var implementation = __webpack_require__(7053);
var getPolyfill = __webpack_require__(755);
var shim = __webpack_require__(5346);

var polyfill = callBind(getPolyfill(), Number);

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


/***/ }),

/***/ 755:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(7053);

module.exports = function getPolyfill() {
	if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
		return Number.isNaN;
	}
	return implementation;
};


/***/ }),

/***/ 5346:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(4926);
var getPolyfill = __webpack_require__(755);

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function shimNumberIsNaN() {
	var polyfill = getPolyfill();
	define(Number, { isNaN: polyfill }, {
		isNaN: function testIsNaN() {
			return Number.isNaN !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),

/***/ 198:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var forEach = __webpack_require__(3243);
var availableTypedArrays = __webpack_require__(2191);
var callBound = __webpack_require__(2680);

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = __webpack_require__(7226)();
var gOPD = __webpack_require__(326);

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
var typedArrays = availableTypedArrays();

var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};
var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		if (Symbol.toStringTag in arr) {
			var proto = getPrototypeOf(arr);
			var descriptor = gOPD(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf(proto);
				descriptor = gOPD(superProto, Symbol.toStringTag);
			}
			toStrTags[typedArray] = descriptor.get;
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var anyTrue = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!anyTrue) {
			try {
				anyTrue = getter.call(value) === typedArray;
			} catch (e) { /**/ }
		}
	});
	return anyTrue;
};

module.exports = function isTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag || !(Symbol.toStringTag in value)) {
		var tag = $slice($toString(value), 8, -1);
		return $indexOf(typedArrays, tag) > -1;
	}
	if (!gOPD) { return false; }
	return tryTypedArrays(value);
};


/***/ }),

/***/ 8169:
/***/ ((module) => {

"use strict";


var numberIsNaN = function (value) {
	return value !== value;
};

module.exports = function is(a, b) {
	if (a === 0 && b === 0) {
		return 1 / a === 1 / b;
	}
	if (a === b) {
		return true;
	}
	if (numberIsNaN(a) && numberIsNaN(b)) {
		return true;
	}
	return false;
};



/***/ }),

/***/ 4679:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(4926);
var callBind = __webpack_require__(9429);

var implementation = __webpack_require__(8169);
var getPolyfill = __webpack_require__(8070);
var shim = __webpack_require__(191);

var polyfill = callBind(getPolyfill(), Object);

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


/***/ }),

/***/ 8070:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(8169);

module.exports = function getPolyfill() {
	return typeof Object.is === 'function' ? Object.is : implementation;
};


/***/ }),

/***/ 191:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var getPolyfill = __webpack_require__(8070);
var define = __webpack_require__(4926);

module.exports = function shimObjectIs() {
	var polyfill = getPolyfill();
	define(Object, { is: polyfill }, {
		is: function testObjectIs() {
			return Object.is !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),

/***/ 5691:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = __webpack_require__(801); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;


/***/ }),

/***/ 3464:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var slice = Array.prototype.slice;
var isArgs = __webpack_require__(801);

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : __webpack_require__(5691);

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;


/***/ }),

/***/ 801:
/***/ ((module) => {

"use strict";


var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};


/***/ }),

/***/ 4406:
/***/ ((module) => {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ 82:
/***/ ((module) => {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ 4895:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9



var isArgumentsObject = __webpack_require__(2635);
var isGeneratorFunction = __webpack_require__(3138);
var whichTypedArray = __webpack_require__(2094);
var isTypedArray = __webpack_require__(198);

function uncurryThis(f) {
  return f.call.bind(f);
}

var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';

var ObjectToString = uncurryThis(Object.prototype.toString);

var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);

if (BigIntSupported) {
  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
}

if (SymbolSupported) {
  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
}

function checkBoxedPrimitive(value, prototypeValueOf) {
  if (typeof value !== 'object') {
    return false;
  }
  try {
    prototypeValueOf(value);
    return true;
  } catch(e) {
    return false;
  }
}

exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;

// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
	return (
		(
			typeof Promise !== 'undefined' &&
			input instanceof Promise
		) ||
		(
			input !== null &&
			typeof input === 'object' &&
			typeof input.then === 'function' &&
			typeof input.catch === 'function'
		)
	);
}
exports.isPromise = isPromise;

function isArrayBufferView(value) {
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    return ArrayBuffer.isView(value);
  }

  return (
    isTypedArray(value) ||
    isDataView(value)
  );
}
exports.isArrayBufferView = isArrayBufferView;


function isUint8Array(value) {
  return whichTypedArray(value) === 'Uint8Array';
}
exports.isUint8Array = isUint8Array;

function isUint8ClampedArray(value) {
  return whichTypedArray(value) === 'Uint8ClampedArray';
}
exports.isUint8ClampedArray = isUint8ClampedArray;

function isUint16Array(value) {
  return whichTypedArray(value) === 'Uint16Array';
}
exports.isUint16Array = isUint16Array;

function isUint32Array(value) {
  return whichTypedArray(value) === 'Uint32Array';
}
exports.isUint32Array = isUint32Array;

function isInt8Array(value) {
  return whichTypedArray(value) === 'Int8Array';
}
exports.isInt8Array = isInt8Array;

function isInt16Array(value) {
  return whichTypedArray(value) === 'Int16Array';
}
exports.isInt16Array = isInt16Array;

function isInt32Array(value) {
  return whichTypedArray(value) === 'Int32Array';
}
exports.isInt32Array = isInt32Array;

function isFloat32Array(value) {
  return whichTypedArray(value) === 'Float32Array';
}
exports.isFloat32Array = isFloat32Array;

function isFloat64Array(value) {
  return whichTypedArray(value) === 'Float64Array';
}
exports.isFloat64Array = isFloat64Array;

function isBigInt64Array(value) {
  return whichTypedArray(value) === 'BigInt64Array';
}
exports.isBigInt64Array = isBigInt64Array;

function isBigUint64Array(value) {
  return whichTypedArray(value) === 'BigUint64Array';
}
exports.isBigUint64Array = isBigUint64Array;

function isMapToString(value) {
  return ObjectToString(value) === '[object Map]';
}
isMapToString.working = (
  typeof Map !== 'undefined' &&
  isMapToString(new Map())
);

function isMap(value) {
  if (typeof Map === 'undefined') {
    return false;
  }

  return isMapToString.working
    ? isMapToString(value)
    : value instanceof Map;
}
exports.isMap = isMap;

function isSetToString(value) {
  return ObjectToString(value) === '[object Set]';
}
isSetToString.working = (
  typeof Set !== 'undefined' &&
  isSetToString(new Set())
);
function isSet(value) {
  if (typeof Set === 'undefined') {
    return false;
  }

  return isSetToString.working
    ? isSetToString(value)
    : value instanceof Set;
}
exports.isSet = isSet;

function isWeakMapToString(value) {
  return ObjectToString(value) === '[object WeakMap]';
}
isWeakMapToString.working = (
  typeof WeakMap !== 'undefined' &&
  isWeakMapToString(new WeakMap())
);
function isWeakMap(value) {
  if (typeof WeakMap === 'undefined') {
    return false;
  }

  return isWeakMapToString.working
    ? isWeakMapToString(value)
    : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;

function isWeakSetToString(value) {
  return ObjectToString(value) === '[object WeakSet]';
}
isWeakSetToString.working = (
  typeof WeakSet !== 'undefined' &&
  isWeakSetToString(new WeakSet())
);
function isWeakSet(value) {
  return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;

function isArrayBufferToString(value) {
  return ObjectToString(value) === '[object ArrayBuffer]';
}
isArrayBufferToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  isArrayBufferToString(new ArrayBuffer())
);
function isArrayBuffer(value) {
  if (typeof ArrayBuffer === 'undefined') {
    return false;
  }

  return isArrayBufferToString.working
    ? isArrayBufferToString(value)
    : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;

function isDataViewToString(value) {
  return ObjectToString(value) === '[object DataView]';
}
isDataViewToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  typeof DataView !== 'undefined' &&
  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
);
function isDataView(value) {
  if (typeof DataView === 'undefined') {
    return false;
  }

  return isDataViewToString.working
    ? isDataViewToString(value)
    : value instanceof DataView;
}
exports.isDataView = isDataView;

// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
  return ObjectToString(value) === '[object SharedArrayBuffer]';
}
function isSharedArrayBuffer(value) {
  if (typeof SharedArrayBufferCopy === 'undefined') {
    return false;
  }

  if (typeof isSharedArrayBufferToString.working === 'undefined') {
    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
  }

  return isSharedArrayBufferToString.working
    ? isSharedArrayBufferToString(value)
    : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;

function isAsyncFunction(value) {
  return ObjectToString(value) === '[object AsyncFunction]';
}
exports.isAsyncFunction = isAsyncFunction;

function isMapIterator(value) {
  return ObjectToString(value) === '[object Map Iterator]';
}
exports.isMapIterator = isMapIterator;

function isSetIterator(value) {
  return ObjectToString(value) === '[object Set Iterator]';
}
exports.isSetIterator = isSetIterator;

function isGeneratorObject(value) {
  return ObjectToString(value) === '[object Generator]';
}
exports.isGeneratorObject = isGeneratorObject;

function isWebAssemblyCompiledModule(value) {
  return ObjectToString(value) === '[object WebAssembly.Module]';
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

function isNumberObject(value) {
  return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;

function isStringObject(value) {
  return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;

function isBooleanObject(value) {
  return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;

function isBigIntObject(value) {
  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;

function isSymbolObject(value) {
  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;

function isBoxedPrimitive(value) {
  return (
    isNumberObject(value) ||
    isStringObject(value) ||
    isBooleanObject(value) ||
    isBigIntObject(value) ||
    isSymbolObject(value)
  );
}
exports.isBoxedPrimitive = isBoxedPrimitive;

function isAnyArrayBuffer(value) {
  return typeof Uint8Array !== 'undefined' && (
    isArrayBuffer(value) ||
    isSharedArrayBuffer(value)
  );
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;

['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
  Object.defineProperty(exports, method, {
    enumerable: false,
    value: function() {
      throw new Error(method + ' is not supported in userland');
    }
  });
});


/***/ }),

/***/ 3335:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(4406);
/* provided dependency */ var console = __webpack_require__(3716);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnvRegex = /^$/;

if (process.env.NODE_DEBUG) {
  var debugEnv = process.env.NODE_DEBUG;
  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
    .replace(/\*/g, '.*')
    .replace(/,/g, '$|^')
    .toUpperCase();
  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
}
exports.debuglog = function(set) {
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (debugEnvRegex.test(set)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').slice(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.slice(1, -1);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = __webpack_require__(4895);

function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
exports.types.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(82);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(1285);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },
            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;


/***/ }),

/***/ 1200:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */


module.exports = __webpack_require__(5953);

/***/ }),

/***/ 5953:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createMessageConnection = exports.BrowserMessageWriter = exports.BrowserMessageReader = void 0;
const ril_1 = __webpack_require__(3632);
// Install the browser runtime abstract.
ril_1.default.install();
const api_1 = __webpack_require__(5247);
__exportStar(__webpack_require__(5247), exports);
class BrowserMessageReader extends api_1.AbstractMessageReader {
    constructor(context) {
        super();
        this._onData = new api_1.Emitter();
        this._messageListener = (event) => {
            this._onData.fire(event.data);
        };
        context.addEventListener('error', (event) => this.fireError(event));
        context.onmessage = this._messageListener;
    }
    listen(callback) {
        return this._onData.event(callback);
    }
}
exports.BrowserMessageReader = BrowserMessageReader;
class BrowserMessageWriter extends api_1.AbstractMessageWriter {
    constructor(context) {
        super();
        this.context = context;
        this.errorCount = 0;
        context.addEventListener('error', (event) => this.fireError(event));
    }
    write(msg) {
        try {
            this.context.postMessage(msg);
            return Promise.resolve();
        }
        catch (error) {
            this.handleError(error, msg);
            return Promise.reject(error);
        }
    }
    handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    }
    end() {
    }
}
exports.BrowserMessageWriter = BrowserMessageWriter;
function createMessageConnection(reader, writer, logger, options) {
    if (logger === undefined) {
        logger = api_1.NullLogger;
    }
    if (api_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
    }
    return (0, api_1.createMessageConnection)(reader, writer, logger, options);
}
exports.createMessageConnection = createMessageConnection;
//# sourceMappingURL=main.js.map

/***/ }),

/***/ 3632:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var console = __webpack_require__(3716);

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
const ral_1 = __webpack_require__(5706);
const disposable_1 = __webpack_require__(8437);
const events_1 = __webpack_require__(5165);
const messageBuffer_1 = __webpack_require__(8652);
class MessageBuffer extends messageBuffer_1.AbstractMessageBuffer {
    constructor(encoding = 'utf-8') {
        super(encoding);
        this.asciiDecoder = new TextDecoder('ascii');
    }
    emptyBuffer() {
        return MessageBuffer.emptyBuffer;
    }
    fromString(value, _encoding) {
        return (new TextEncoder()).encode(value);
    }
    toString(value, encoding) {
        if (encoding === 'ascii') {
            return this.asciiDecoder.decode(value);
        }
        else {
            return (new TextDecoder(encoding)).decode(value);
        }
    }
    asNative(buffer, length) {
        if (length === undefined) {
            return buffer;
        }
        else {
            return buffer.slice(0, length);
        }
    }
    allocNative(length) {
        return new Uint8Array(length);
    }
}
MessageBuffer.emptyBuffer = new Uint8Array(0);
class ReadableStreamWrapper {
    constructor(socket) {
        this.socket = socket;
        this._onData = new events_1.Emitter();
        this._messageListener = (event) => {
            const blob = event.data;
            blob.arrayBuffer().then((buffer) => {
                this._onData.fire(new Uint8Array(buffer));
            }, () => {
                (0, ral_1.default)().console.error(`Converting blob to array buffer failed.`);
            });
        };
        this.socket.addEventListener('message', this._messageListener);
    }
    onClose(listener) {
        this.socket.addEventListener('close', listener);
        return disposable_1.Disposable.create(() => this.socket.removeEventListener('close', listener));
    }
    onError(listener) {
        this.socket.addEventListener('error', listener);
        return disposable_1.Disposable.create(() => this.socket.removeEventListener('error', listener));
    }
    onEnd(listener) {
        this.socket.addEventListener('end', listener);
        return disposable_1.Disposable.create(() => this.socket.removeEventListener('end', listener));
    }
    onData(listener) {
        return this._onData.event(listener);
    }
}
class WritableStreamWrapper {
    constructor(socket) {
        this.socket = socket;
    }
    onClose(listener) {
        this.socket.addEventListener('close', listener);
        return disposable_1.Disposable.create(() => this.socket.removeEventListener('close', listener));
    }
    onError(listener) {
        this.socket.addEventListener('error', listener);
        return disposable_1.Disposable.create(() => this.socket.removeEventListener('error', listener));
    }
    onEnd(listener) {
        this.socket.addEventListener('end', listener);
        return disposable_1.Disposable.create(() => this.socket.removeEventListener('end', listener));
    }
    write(data, encoding) {
        if (typeof data === 'string') {
            if (encoding !== undefined && encoding !== 'utf-8') {
                throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${encoding}`);
            }
            this.socket.send(data);
        }
        else {
            this.socket.send(data);
        }
        return Promise.resolve();
    }
    end() {
        this.socket.close();
    }
}
const _textEncoder = new TextEncoder();
const _ril = Object.freeze({
    messageBuffer: Object.freeze({
        create: (encoding) => new MessageBuffer(encoding)
    }),
    applicationJson: Object.freeze({
        encoder: Object.freeze({
            name: 'application/json',
            encode: (msg, options) => {
                if (options.charset !== 'utf-8') {
                    throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${options.charset}`);
                }
                return Promise.resolve(_textEncoder.encode(JSON.stringify(msg, undefined, 0)));
            }
        }),
        decoder: Object.freeze({
            name: 'application/json',
            decode: (buffer, options) => {
                if (!(buffer instanceof Uint8Array)) {
                    throw new Error(`In a Browser environments only Uint8Arrays are supported.`);
                }
                return Promise.resolve(JSON.parse(new TextDecoder(options.charset).decode(buffer)));
            }
        })
    }),
    stream: Object.freeze({
        asReadableStream: (socket) => new ReadableStreamWrapper(socket),
        asWritableStream: (socket) => new WritableStreamWrapper(socket)
    }),
    console: console,
    timer: Object.freeze({
        setTimeout(callback, ms, ...args) {
            const handle = setTimeout(callback, ms, ...args);
            return { dispose: () => clearTimeout(handle) };
        },
        setImmediate(callback, ...args) {
            const handle = setTimeout(callback, 0, ...args);
            return { dispose: () => clearTimeout(handle) };
        },
        setInterval(callback, ms, ...args) {
            const handle = setInterval(callback, ms, ...args);
            return { dispose: () => clearInterval(handle) };
        },
    })
});
function RIL() {
    return _ril;
}
(function (RIL) {
    function install() {
        ral_1.default.install(_ril);
    }
    RIL.install = install;
})(RIL || (RIL = {}));
exports["default"] = RIL;
//# sourceMappingURL=ril.js.map

/***/ }),

/***/ 5247:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
/// <reference path="../../typings/thenable.d.ts" />
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TraceFormat = exports.TraceValues = exports.Trace = exports.ProgressType = exports.ProgressToken = exports.createMessageConnection = exports.NullLogger = exports.ConnectionOptions = exports.ConnectionStrategy = exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = exports.CancellationToken = exports.CancellationTokenSource = exports.Emitter = exports.Event = exports.Disposable = exports.LRUCache = exports.Touch = exports.LinkedMap = exports.ParameterStructures = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.ErrorCodes = exports.ResponseError = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType0 = exports.RequestType = exports.Message = exports.RAL = void 0;
exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = void 0;
const messages_1 = __webpack_require__(9141);
Object.defineProperty(exports, "Message", ({ enumerable: true, get: function () { return messages_1.Message; } }));
Object.defineProperty(exports, "RequestType", ({ enumerable: true, get: function () { return messages_1.RequestType; } }));
Object.defineProperty(exports, "RequestType0", ({ enumerable: true, get: function () { return messages_1.RequestType0; } }));
Object.defineProperty(exports, "RequestType1", ({ enumerable: true, get: function () { return messages_1.RequestType1; } }));
Object.defineProperty(exports, "RequestType2", ({ enumerable: true, get: function () { return messages_1.RequestType2; } }));
Object.defineProperty(exports, "RequestType3", ({ enumerable: true, get: function () { return messages_1.RequestType3; } }));
Object.defineProperty(exports, "RequestType4", ({ enumerable: true, get: function () { return messages_1.RequestType4; } }));
Object.defineProperty(exports, "RequestType5", ({ enumerable: true, get: function () { return messages_1.RequestType5; } }));
Object.defineProperty(exports, "RequestType6", ({ enumerable: true, get: function () { return messages_1.RequestType6; } }));
Object.defineProperty(exports, "RequestType7", ({ enumerable: true, get: function () { return messages_1.RequestType7; } }));
Object.defineProperty(exports, "RequestType8", ({ enumerable: true, get: function () { return messages_1.RequestType8; } }));
Object.defineProperty(exports, "RequestType9", ({ enumerable: true, get: function () { return messages_1.RequestType9; } }));
Object.defineProperty(exports, "ResponseError", ({ enumerable: true, get: function () { return messages_1.ResponseError; } }));
Object.defineProperty(exports, "ErrorCodes", ({ enumerable: true, get: function () { return messages_1.ErrorCodes; } }));
Object.defineProperty(exports, "NotificationType", ({ enumerable: true, get: function () { return messages_1.NotificationType; } }));
Object.defineProperty(exports, "NotificationType0", ({ enumerable: true, get: function () { return messages_1.NotificationType0; } }));
Object.defineProperty(exports, "NotificationType1", ({ enumerable: true, get: function () { return messages_1.NotificationType1; } }));
Object.defineProperty(exports, "NotificationType2", ({ enumerable: true, get: function () { return messages_1.NotificationType2; } }));
Object.defineProperty(exports, "NotificationType3", ({ enumerable: true, get: function () { return messages_1.NotificationType3; } }));
Object.defineProperty(exports, "NotificationType4", ({ enumerable: true, get: function () { return messages_1.NotificationType4; } }));
Object.defineProperty(exports, "NotificationType5", ({ enumerable: true, get: function () { return messages_1.NotificationType5; } }));
Object.defineProperty(exports, "NotificationType6", ({ enumerable: true, get: function () { return messages_1.NotificationType6; } }));
Object.defineProperty(exports, "NotificationType7", ({ enumerable: true, get: function () { return messages_1.NotificationType7; } }));
Object.defineProperty(exports, "NotificationType8", ({ enumerable: true, get: function () { return messages_1.NotificationType8; } }));
Object.defineProperty(exports, "NotificationType9", ({ enumerable: true, get: function () { return messages_1.NotificationType9; } }));
Object.defineProperty(exports, "ParameterStructures", ({ enumerable: true, get: function () { return messages_1.ParameterStructures; } }));
const linkedMap_1 = __webpack_require__(7040);
Object.defineProperty(exports, "LinkedMap", ({ enumerable: true, get: function () { return linkedMap_1.LinkedMap; } }));
Object.defineProperty(exports, "LRUCache", ({ enumerable: true, get: function () { return linkedMap_1.LRUCache; } }));
Object.defineProperty(exports, "Touch", ({ enumerable: true, get: function () { return linkedMap_1.Touch; } }));
const disposable_1 = __webpack_require__(8437);
Object.defineProperty(exports, "Disposable", ({ enumerable: true, get: function () { return disposable_1.Disposable; } }));
const events_1 = __webpack_require__(5165);
Object.defineProperty(exports, "Event", ({ enumerable: true, get: function () { return events_1.Event; } }));
Object.defineProperty(exports, "Emitter", ({ enumerable: true, get: function () { return events_1.Emitter; } }));
const cancellation_1 = __webpack_require__(415);
Object.defineProperty(exports, "CancellationTokenSource", ({ enumerable: true, get: function () { return cancellation_1.CancellationTokenSource; } }));
Object.defineProperty(exports, "CancellationToken", ({ enumerable: true, get: function () { return cancellation_1.CancellationToken; } }));
const messageReader_1 = __webpack_require__(451);
Object.defineProperty(exports, "MessageReader", ({ enumerable: true, get: function () { return messageReader_1.MessageReader; } }));
Object.defineProperty(exports, "AbstractMessageReader", ({ enumerable: true, get: function () { return messageReader_1.AbstractMessageReader; } }));
Object.defineProperty(exports, "ReadableStreamMessageReader", ({ enumerable: true, get: function () { return messageReader_1.ReadableStreamMessageReader; } }));
const messageWriter_1 = __webpack_require__(1251);
Object.defineProperty(exports, "MessageWriter", ({ enumerable: true, get: function () { return messageWriter_1.MessageWriter; } }));
Object.defineProperty(exports, "AbstractMessageWriter", ({ enumerable: true, get: function () { return messageWriter_1.AbstractMessageWriter; } }));
Object.defineProperty(exports, "WriteableStreamMessageWriter", ({ enumerable: true, get: function () { return messageWriter_1.WriteableStreamMessageWriter; } }));
const connection_1 = __webpack_require__(1908);
Object.defineProperty(exports, "ConnectionStrategy", ({ enumerable: true, get: function () { return connection_1.ConnectionStrategy; } }));
Object.defineProperty(exports, "ConnectionOptions", ({ enumerable: true, get: function () { return connection_1.ConnectionOptions; } }));
Object.defineProperty(exports, "NullLogger", ({ enumerable: true, get: function () { return connection_1.NullLogger; } }));
Object.defineProperty(exports, "createMessageConnection", ({ enumerable: true, get: function () { return connection_1.createMessageConnection; } }));
Object.defineProperty(exports, "ProgressToken", ({ enumerable: true, get: function () { return connection_1.ProgressToken; } }));
Object.defineProperty(exports, "ProgressType", ({ enumerable: true, get: function () { return connection_1.ProgressType; } }));
Object.defineProperty(exports, "Trace", ({ enumerable: true, get: function () { return connection_1.Trace; } }));
Object.defineProperty(exports, "TraceValues", ({ enumerable: true, get: function () { return connection_1.TraceValues; } }));
Object.defineProperty(exports, "TraceFormat", ({ enumerable: true, get: function () { return connection_1.TraceFormat; } }));
Object.defineProperty(exports, "SetTraceNotification", ({ enumerable: true, get: function () { return connection_1.SetTraceNotification; } }));
Object.defineProperty(exports, "LogTraceNotification", ({ enumerable: true, get: function () { return connection_1.LogTraceNotification; } }));
Object.defineProperty(exports, "ConnectionErrors", ({ enumerable: true, get: function () { return connection_1.ConnectionErrors; } }));
Object.defineProperty(exports, "ConnectionError", ({ enumerable: true, get: function () { return connection_1.ConnectionError; } }));
Object.defineProperty(exports, "CancellationReceiverStrategy", ({ enumerable: true, get: function () { return connection_1.CancellationReceiverStrategy; } }));
Object.defineProperty(exports, "CancellationSenderStrategy", ({ enumerable: true, get: function () { return connection_1.CancellationSenderStrategy; } }));
Object.defineProperty(exports, "CancellationStrategy", ({ enumerable: true, get: function () { return connection_1.CancellationStrategy; } }));
const ral_1 = __webpack_require__(5706);
exports.RAL = ral_1.default;
//# sourceMappingURL=api.js.map

/***/ }),

/***/ 415:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CancellationTokenSource = exports.CancellationToken = void 0;
const ral_1 = __webpack_require__(5706);
const Is = __webpack_require__(8811);
const events_1 = __webpack_require__(5165);
var CancellationToken;
(function (CancellationToken) {
    CancellationToken.None = Object.freeze({
        isCancellationRequested: false,
        onCancellationRequested: events_1.Event.None
    });
    CancellationToken.Cancelled = Object.freeze({
        isCancellationRequested: true,
        onCancellationRequested: events_1.Event.None
    });
    function is(value) {
        const candidate = value;
        return candidate && (candidate === CancellationToken.None
            || candidate === CancellationToken.Cancelled
            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));
    }
    CancellationToken.is = is;
})(CancellationToken = exports.CancellationToken || (exports.CancellationToken = {}));
const shortcutEvent = Object.freeze(function (callback, context) {
    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);
    return { dispose() { handle.dispose(); } };
});
class MutableToken {
    constructor() {
        this._isCancelled = false;
    }
    cancel() {
        if (!this._isCancelled) {
            this._isCancelled = true;
            if (this._emitter) {
                this._emitter.fire(undefined);
                this.dispose();
            }
        }
    }
    get isCancellationRequested() {
        return this._isCancelled;
    }
    get onCancellationRequested() {
        if (this._isCancelled) {
            return shortcutEvent;
        }
        if (!this._emitter) {
            this._emitter = new events_1.Emitter();
        }
        return this._emitter.event;
    }
    dispose() {
        if (this._emitter) {
            this._emitter.dispose();
            this._emitter = undefined;
        }
    }
}
class CancellationTokenSource {
    get token() {
        if (!this._token) {
            // be lazy and create the token only when
            // actually needed
            this._token = new MutableToken();
        }
        return this._token;
    }
    cancel() {
        if (!this._token) {
            // save an object by returning the default
            // cancelled token when cancellation happens
            // before someone asks for the token
            this._token = CancellationToken.Cancelled;
        }
        else {
            this._token.cancel();
        }
    }
    dispose() {
        if (!this._token) {
            // ensure to initialize with an empty token if we had none
            this._token = CancellationToken.None;
        }
        else if (this._token instanceof MutableToken) {
            // actually dispose
            this._token.dispose();
        }
    }
}
exports.CancellationTokenSource = CancellationTokenSource;
//# sourceMappingURL=cancellation.js.map

/***/ }),

/***/ 1908:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createMessageConnection = exports.ConnectionOptions = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.TraceValues = exports.Trace = exports.NullLogger = exports.ProgressType = exports.ProgressToken = void 0;
const ral_1 = __webpack_require__(5706);
const Is = __webpack_require__(8811);
const messages_1 = __webpack_require__(9141);
const linkedMap_1 = __webpack_require__(7040);
const events_1 = __webpack_require__(5165);
const cancellation_1 = __webpack_require__(415);
var CancelNotification;
(function (CancelNotification) {
    CancelNotification.type = new messages_1.NotificationType('$/cancelRequest');
})(CancelNotification || (CancelNotification = {}));
var ProgressToken;
(function (ProgressToken) {
    function is(value) {
        return typeof value === 'string' || typeof value === 'number';
    }
    ProgressToken.is = is;
})(ProgressToken = exports.ProgressToken || (exports.ProgressToken = {}));
var ProgressNotification;
(function (ProgressNotification) {
    ProgressNotification.type = new messages_1.NotificationType('$/progress');
})(ProgressNotification || (ProgressNotification = {}));
class ProgressType {
    constructor() {
    }
}
exports.ProgressType = ProgressType;
var StarRequestHandler;
(function (StarRequestHandler) {
    function is(value) {
        return Is.func(value);
    }
    StarRequestHandler.is = is;
})(StarRequestHandler || (StarRequestHandler = {}));
exports.NullLogger = Object.freeze({
    error: () => { },
    warn: () => { },
    info: () => { },
    log: () => { }
});
var Trace;
(function (Trace) {
    Trace[Trace["Off"] = 0] = "Off";
    Trace[Trace["Messages"] = 1] = "Messages";
    Trace[Trace["Compact"] = 2] = "Compact";
    Trace[Trace["Verbose"] = 3] = "Verbose";
})(Trace = exports.Trace || (exports.Trace = {}));
var TraceValues;
(function (TraceValues) {
    /**
     * Turn tracing off.
     */
    TraceValues.Off = 'off';
    /**
     * Trace messages only.
     */
    TraceValues.Messages = 'messages';
    /**
     * Compact message tracing.
     */
    TraceValues.Compact = 'compact';
    /**
     * Verbose message tracing.
     */
    TraceValues.Verbose = 'verbose';
})(TraceValues = exports.TraceValues || (exports.TraceValues = {}));
(function (Trace) {
    function fromString(value) {
        if (!Is.string(value)) {
            return Trace.Off;
        }
        value = value.toLowerCase();
        switch (value) {
            case 'off':
                return Trace.Off;
            case 'messages':
                return Trace.Messages;
            case 'compact':
                return Trace.Compact;
            case 'verbose':
                return Trace.Verbose;
            default:
                return Trace.Off;
        }
    }
    Trace.fromString = fromString;
    function toString(value) {
        switch (value) {
            case Trace.Off:
                return 'off';
            case Trace.Messages:
                return 'messages';
            case Trace.Compact:
                return 'compact';
            case Trace.Verbose:
                return 'verbose';
            default:
                return 'off';
        }
    }
    Trace.toString = toString;
})(Trace = exports.Trace || (exports.Trace = {}));
var TraceFormat;
(function (TraceFormat) {
    TraceFormat["Text"] = "text";
    TraceFormat["JSON"] = "json";
})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
(function (TraceFormat) {
    function fromString(value) {
        if (!Is.string(value)) {
            return TraceFormat.Text;
        }
        value = value.toLowerCase();
        if (value === 'json') {
            return TraceFormat.JSON;
        }
        else {
            return TraceFormat.Text;
        }
    }
    TraceFormat.fromString = fromString;
})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
var SetTraceNotification;
(function (SetTraceNotification) {
    SetTraceNotification.type = new messages_1.NotificationType('$/setTrace');
})(SetTraceNotification = exports.SetTraceNotification || (exports.SetTraceNotification = {}));
var LogTraceNotification;
(function (LogTraceNotification) {
    LogTraceNotification.type = new messages_1.NotificationType('$/logTrace');
})(LogTraceNotification = exports.LogTraceNotification || (exports.LogTraceNotification = {}));
var ConnectionErrors;
(function (ConnectionErrors) {
    /**
     * The connection is closed.
     */
    ConnectionErrors[ConnectionErrors["Closed"] = 1] = "Closed";
    /**
     * The connection got disposed.
     */
    ConnectionErrors[ConnectionErrors["Disposed"] = 2] = "Disposed";
    /**
     * The connection is already in listening mode.
     */
    ConnectionErrors[ConnectionErrors["AlreadyListening"] = 3] = "AlreadyListening";
})(ConnectionErrors = exports.ConnectionErrors || (exports.ConnectionErrors = {}));
class ConnectionError extends Error {
    constructor(code, message) {
        super(message);
        this.code = code;
        Object.setPrototypeOf(this, ConnectionError.prototype);
    }
}
exports.ConnectionError = ConnectionError;
var ConnectionStrategy;
(function (ConnectionStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.cancelUndispatched);
    }
    ConnectionStrategy.is = is;
})(ConnectionStrategy = exports.ConnectionStrategy || (exports.ConnectionStrategy = {}));
var CancellationReceiverStrategy;
(function (CancellationReceiverStrategy) {
    CancellationReceiverStrategy.Message = Object.freeze({
        createCancellationTokenSource(_) {
            return new cancellation_1.CancellationTokenSource();
        }
    });
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.createCancellationTokenSource);
    }
    CancellationReceiverStrategy.is = is;
})(CancellationReceiverStrategy = exports.CancellationReceiverStrategy || (exports.CancellationReceiverStrategy = {}));
var CancellationSenderStrategy;
(function (CancellationSenderStrategy) {
    CancellationSenderStrategy.Message = Object.freeze({
        sendCancellation(conn, id) {
            return conn.sendNotification(CancelNotification.type, { id });
        },
        cleanup(_) { }
    });
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.sendCancellation) && Is.func(candidate.cleanup);
    }
    CancellationSenderStrategy.is = is;
})(CancellationSenderStrategy = exports.CancellationSenderStrategy || (exports.CancellationSenderStrategy = {}));
var CancellationStrategy;
(function (CancellationStrategy) {
    CancellationStrategy.Message = Object.freeze({
        receiver: CancellationReceiverStrategy.Message,
        sender: CancellationSenderStrategy.Message
    });
    function is(value) {
        const candidate = value;
        return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);
    }
    CancellationStrategy.is = is;
})(CancellationStrategy = exports.CancellationStrategy || (exports.CancellationStrategy = {}));
var ConnectionOptions;
(function (ConnectionOptions) {
    function is(value) {
        const candidate = value;
        return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy));
    }
    ConnectionOptions.is = is;
})(ConnectionOptions = exports.ConnectionOptions || (exports.ConnectionOptions = {}));
var ConnectionState;
(function (ConnectionState) {
    ConnectionState[ConnectionState["New"] = 1] = "New";
    ConnectionState[ConnectionState["Listening"] = 2] = "Listening";
    ConnectionState[ConnectionState["Closed"] = 3] = "Closed";
    ConnectionState[ConnectionState["Disposed"] = 4] = "Disposed";
})(ConnectionState || (ConnectionState = {}));
function createMessageConnection(messageReader, messageWriter, _logger, options) {
    const logger = _logger !== undefined ? _logger : exports.NullLogger;
    let sequenceNumber = 0;
    let notificationSequenceNumber = 0;
    let unknownResponseSequenceNumber = 0;
    const version = '2.0';
    let starRequestHandler = undefined;
    const requestHandlers = new Map();
    let starNotificationHandler = undefined;
    const notificationHandlers = new Map();
    const progressHandlers = new Map();
    let timer;
    let messageQueue = new linkedMap_1.LinkedMap();
    let responsePromises = new Map();
    let knownCanceledRequests = new Set();
    let requestTokens = new Map();
    let trace = Trace.Off;
    let traceFormat = TraceFormat.Text;
    let tracer;
    let state = ConnectionState.New;
    const errorEmitter = new events_1.Emitter();
    const closeEmitter = new events_1.Emitter();
    const unhandledNotificationEmitter = new events_1.Emitter();
    const unhandledProgressEmitter = new events_1.Emitter();
    const disposeEmitter = new events_1.Emitter();
    const cancellationStrategy = (options && options.cancellationStrategy) ? options.cancellationStrategy : CancellationStrategy.Message;
    function createRequestQueueKey(id) {
        if (id === null) {
            throw new Error(`Can't send requests with id null since the response can't be correlated.`);
        }
        return 'req-' + id.toString();
    }
    function createResponseQueueKey(id) {
        if (id === null) {
            return 'res-unknown-' + (++unknownResponseSequenceNumber).toString();
        }
        else {
            return 'res-' + id.toString();
        }
    }
    function createNotificationQueueKey() {
        return 'not-' + (++notificationSequenceNumber).toString();
    }
    function addMessageToQueue(queue, message) {
        if (messages_1.Message.isRequest(message)) {
            queue.set(createRequestQueueKey(message.id), message);
        }
        else if (messages_1.Message.isResponse(message)) {
            queue.set(createResponseQueueKey(message.id), message);
        }
        else {
            queue.set(createNotificationQueueKey(), message);
        }
    }
    function cancelUndispatched(_message) {
        return undefined;
    }
    function isListening() {
        return state === ConnectionState.Listening;
    }
    function isClosed() {
        return state === ConnectionState.Closed;
    }
    function isDisposed() {
        return state === ConnectionState.Disposed;
    }
    function closeHandler() {
        if (state === ConnectionState.New || state === ConnectionState.Listening) {
            state = ConnectionState.Closed;
            closeEmitter.fire(undefined);
        }
        // If the connection is disposed don't sent close events.
    }
    function readErrorHandler(error) {
        errorEmitter.fire([error, undefined, undefined]);
    }
    function writeErrorHandler(data) {
        errorEmitter.fire(data);
    }
    messageReader.onClose(closeHandler);
    messageReader.onError(readErrorHandler);
    messageWriter.onClose(closeHandler);
    messageWriter.onError(writeErrorHandler);
    function triggerMessageQueue() {
        if (timer || messageQueue.size === 0) {
            return;
        }
        timer = (0, ral_1.default)().timer.setImmediate(() => {
            timer = undefined;
            processMessageQueue();
        });
    }
    function processMessageQueue() {
        if (messageQueue.size === 0) {
            return;
        }
        const message = messageQueue.shift();
        try {
            if (messages_1.Message.isRequest(message)) {
                handleRequest(message);
            }
            else if (messages_1.Message.isNotification(message)) {
                handleNotification(message);
            }
            else if (messages_1.Message.isResponse(message)) {
                handleResponse(message);
            }
            else {
                handleInvalidMessage(message);
            }
        }
        finally {
            triggerMessageQueue();
        }
    }
    const callback = (message) => {
        try {
            // We have received a cancellation message. Check if the message is still in the queue
            // and cancel it if allowed to do so.
            if (messages_1.Message.isNotification(message) && message.method === CancelNotification.type.method) {
                const cancelId = message.params.id;
                const key = createRequestQueueKey(cancelId);
                const toCancel = messageQueue.get(key);
                if (messages_1.Message.isRequest(toCancel)) {
                    const strategy = options?.connectionStrategy;
                    const response = (strategy && strategy.cancelUndispatched) ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);
                    if (response && (response.error !== undefined || response.result !== undefined)) {
                        messageQueue.delete(key);
                        requestTokens.delete(cancelId);
                        response.id = toCancel.id;
                        traceSendingResponse(response, message.method, Date.now());
                        messageWriter.write(response).catch(() => logger.error(`Sending response for canceled message failed.`));
                        return;
                    }
                }
                const cancellationToken = requestTokens.get(cancelId);
                // The request is already running. Cancel the token
                if (cancellationToken !== undefined) {
                    cancellationToken.cancel();
                    traceReceivedNotification(message);
                    return;
                }
                else {
                    // Remember the cancel but still queue the message to
                    // clean up state in process message.
                    knownCanceledRequests.add(cancelId);
                }
            }
            addMessageToQueue(messageQueue, message);
        }
        finally {
            triggerMessageQueue();
        }
    };
    function handleRequest(requestMessage) {
        if (isDisposed()) {
            // we return here silently since we fired an event when the
            // connection got disposed.
            return;
        }
        function reply(resultOrError, method, startTime) {
            const message = {
                jsonrpc: version,
                id: requestMessage.id
            };
            if (resultOrError instanceof messages_1.ResponseError) {
                message.error = resultOrError.toJson();
            }
            else {
                message.result = resultOrError === undefined ? null : resultOrError;
            }
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        function replyError(error, method, startTime) {
            const message = {
                jsonrpc: version,
                id: requestMessage.id,
                error: error.toJson()
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        function replySuccess(result, method, startTime) {
            // The JSON RPC defines that a response must either have a result or an error
            // So we can't treat undefined as a valid response result.
            if (result === undefined) {
                result = null;
            }
            const message = {
                jsonrpc: version,
                id: requestMessage.id,
                result: result
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        traceReceivedRequest(requestMessage);
        const element = requestHandlers.get(requestMessage.method);
        let type;
        let requestHandler;
        if (element) {
            type = element.type;
            requestHandler = element.handler;
        }
        const startTime = Date.now();
        if (requestHandler || starRequestHandler) {
            const tokenKey = requestMessage.id ?? String(Date.now()); //
            const cancellationSource = cancellationStrategy.receiver.createCancellationTokenSource(tokenKey);
            if (requestMessage.id !== null && knownCanceledRequests.has(requestMessage.id)) {
                cancellationSource.cancel();
            }
            if (requestMessage.id !== null) {
                requestTokens.set(tokenKey, cancellationSource);
            }
            try {
                let handlerResult;
                if (requestHandler) {
                    if (requestMessage.params === undefined) {
                        if (type !== undefined && type.numberOfParams !== 0) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines ${type.numberOfParams} params but received none.`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(cancellationSource.token);
                    }
                    else if (Array.isArray(requestMessage.params)) {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byName) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by name but received parameters by position`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(...requestMessage.params, cancellationSource.token);
                    }
                    else {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by position but received parameters by name`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(requestMessage.params, cancellationSource.token);
                    }
                }
                else if (starRequestHandler) {
                    handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
                }
                const promise = handlerResult;
                if (!handlerResult) {
                    requestTokens.delete(tokenKey);
                    replySuccess(handlerResult, requestMessage.method, startTime);
                }
                else if (promise.then) {
                    promise.then((resultOrError) => {
                        requestTokens.delete(tokenKey);
                        reply(resultOrError, requestMessage.method, startTime);
                    }, error => {
                        requestTokens.delete(tokenKey);
                        if (error instanceof messages_1.ResponseError) {
                            replyError(error, requestMessage.method, startTime);
                        }
                        else if (error && Is.string(error.message)) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                        }
                        else {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                        }
                    });
                }
                else {
                    requestTokens.delete(tokenKey);
                    reply(handlerResult, requestMessage.method, startTime);
                }
            }
            catch (error) {
                requestTokens.delete(tokenKey);
                if (error instanceof messages_1.ResponseError) {
                    reply(error, requestMessage.method, startTime);
                }
                else if (error && Is.string(error.message)) {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                }
                else {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                }
            }
        }
        else {
            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);
        }
    }
    function handleResponse(responseMessage) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        if (responseMessage.id === null) {
            if (responseMessage.error) {
                logger.error(`Received response message without id: Error is: \n${JSON.stringify(responseMessage.error, undefined, 4)}`);
            }
            else {
                logger.error(`Received response message without id. No further error information provided.`);
            }
        }
        else {
            const key = responseMessage.id;
            const responsePromise = responsePromises.get(key);
            traceReceivedResponse(responseMessage, responsePromise);
            if (responsePromise !== undefined) {
                responsePromises.delete(key);
                try {
                    if (responseMessage.error) {
                        const error = responseMessage.error;
                        responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));
                    }
                    else if (responseMessage.result !== undefined) {
                        responsePromise.resolve(responseMessage.result);
                    }
                    else {
                        throw new Error('Should never happen.');
                    }
                }
                catch (error) {
                    if (error.message) {
                        logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);
                    }
                    else {
                        logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);
                    }
                }
            }
        }
    }
    function handleNotification(message) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        let type = undefined;
        let notificationHandler;
        if (message.method === CancelNotification.type.method) {
            const cancelId = message.params.id;
            knownCanceledRequests.delete(cancelId);
            traceReceivedNotification(message);
            return;
        }
        else {
            const element = notificationHandlers.get(message.method);
            if (element) {
                notificationHandler = element.handler;
                type = element.type;
            }
        }
        if (notificationHandler || starNotificationHandler) {
            try {
                traceReceivedNotification(message);
                if (notificationHandler) {
                    if (message.params === undefined) {
                        if (type !== undefined) {
                            if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {
                                logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received none.`);
                            }
                        }
                        notificationHandler();
                    }
                    else if (Array.isArray(message.params)) {
                        // There are JSON-RPC libraries that send progress message as positional params although
                        // specified as named. So convert them if this is the case.
                        const params = message.params;
                        if (message.method === ProgressNotification.type.method && params.length === 2 && ProgressToken.is(params[0])) {
                            notificationHandler({ token: params[0], value: params[1] });
                        }
                        else {
                            if (type !== undefined) {
                                if (type.parameterStructures === messages_1.ParameterStructures.byName) {
                                    logger.error(`Notification ${message.method} defines parameters by name but received parameters by position`);
                                }
                                if (type.numberOfParams !== message.params.length) {
                                    logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received ${params.length} arguments`);
                                }
                            }
                            notificationHandler(...params);
                        }
                    }
                    else {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                            logger.error(`Notification ${message.method} defines parameters by position but received parameters by name`);
                        }
                        notificationHandler(message.params);
                    }
                }
                else if (starNotificationHandler) {
                    starNotificationHandler(message.method, message.params);
                }
            }
            catch (error) {
                if (error.message) {
                    logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);
                }
                else {
                    logger.error(`Notification handler '${message.method}' failed unexpectedly.`);
                }
            }
        }
        else {
            unhandledNotificationEmitter.fire(message);
        }
    }
    function handleInvalidMessage(message) {
        if (!message) {
            logger.error('Received empty message.');
            return;
        }
        logger.error(`Received message which is neither a response nor a notification message:\n${JSON.stringify(message, null, 4)}`);
        // Test whether we find an id to reject the promise
        const responseMessage = message;
        if (Is.string(responseMessage.id) || Is.number(responseMessage.id)) {
            const key = responseMessage.id;
            const responseHandler = responsePromises.get(key);
            if (responseHandler) {
                responseHandler.reject(new Error('The received response has neither a result nor an error property.'));
            }
        }
    }
    function stringifyTrace(params) {
        if (params === undefined || params === null) {
            return undefined;
        }
        switch (trace) {
            case Trace.Verbose:
                return JSON.stringify(params, null, 4);
            case Trace.Compact:
                return JSON.stringify(params);
            default:
                return undefined;
        }
    }
    function traceSendingRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                data = `Params: ${stringifyTrace(message.params)}\n\n`;
            }
            tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);
        }
        else {
            logLSPMessage('send-request', message);
        }
    }
    function traceSendingNotification(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.params) {
                    data = `Params: ${stringifyTrace(message.params)}\n\n`;
                }
                else {
                    data = 'No parameters provided.\n\n';
                }
            }
            tracer.log(`Sending notification '${message.method}'.`, data);
        }
        else {
            logLSPMessage('send-notification', message);
        }
    }
    function traceSendingResponse(message, method, startTime) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.error && message.error.data) {
                    data = `Error data: ${stringifyTrace(message.error.data)}\n\n`;
                }
                else {
                    if (message.result) {
                        data = `Result: ${stringifyTrace(message.result)}\n\n`;
                    }
                    else if (message.error === undefined) {
                        data = 'No result returned.\n\n';
                    }
                }
            }
            tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);
        }
        else {
            logLSPMessage('send-response', message);
        }
    }
    function traceReceivedRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                data = `Params: ${stringifyTrace(message.params)}\n\n`;
            }
            tracer.log(`Received request '${message.method} - (${message.id})'.`, data);
        }
        else {
            logLSPMessage('receive-request', message);
        }
    }
    function traceReceivedNotification(message) {
        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.params) {
                    data = `Params: ${stringifyTrace(message.params)}\n\n`;
                }
                else {
                    data = 'No parameters provided.\n\n';
                }
            }
            tracer.log(`Received notification '${message.method}'.`, data);
        }
        else {
            logLSPMessage('receive-notification', message);
        }
    }
    function traceReceivedResponse(message, responsePromise) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.error && message.error.data) {
                    data = `Error data: ${stringifyTrace(message.error.data)}\n\n`;
                }
                else {
                    if (message.result) {
                        data = `Result: ${stringifyTrace(message.result)}\n\n`;
                    }
                    else if (message.error === undefined) {
                        data = 'No result returned.\n\n';
                    }
                }
            }
            if (responsePromise) {
                const error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : '';
                tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);
            }
            else {
                tracer.log(`Received response ${message.id} without active response promise.`, data);
            }
        }
        else {
            logLSPMessage('receive-response', message);
        }
    }
    function logLSPMessage(type, message) {
        if (!tracer || trace === Trace.Off) {
            return;
        }
        const lspMessage = {
            isLSPMessage: true,
            type,
            message,
            timestamp: Date.now()
        };
        tracer.log(lspMessage);
    }
    function throwIfClosedOrDisposed() {
        if (isClosed()) {
            throw new ConnectionError(ConnectionErrors.Closed, 'Connection is closed.');
        }
        if (isDisposed()) {
            throw new ConnectionError(ConnectionErrors.Disposed, 'Connection is disposed.');
        }
    }
    function throwIfListening() {
        if (isListening()) {
            throw new ConnectionError(ConnectionErrors.AlreadyListening, 'Connection is already listening');
        }
    }
    function throwIfNotListening() {
        if (!isListening()) {
            throw new Error('Call listen() first.');
        }
    }
    function undefinedToNull(param) {
        if (param === undefined) {
            return null;
        }
        else {
            return param;
        }
    }
    function nullToUndefined(param) {
        if (param === null) {
            return undefined;
        }
        else {
            return param;
        }
    }
    function isNamedParam(param) {
        return param !== undefined && param !== null && !Array.isArray(param) && typeof param === 'object';
    }
    function computeSingleParam(parameterStructures, param) {
        switch (parameterStructures) {
            case messages_1.ParameterStructures.auto:
                if (isNamedParam(param)) {
                    return nullToUndefined(param);
                }
                else {
                    return [undefinedToNull(param)];
                }
            case messages_1.ParameterStructures.byName:
                if (!isNamedParam(param)) {
                    throw new Error(`Received parameters by name but param is not an object literal.`);
                }
                return nullToUndefined(param);
            case messages_1.ParameterStructures.byPosition:
                return [undefinedToNull(param)];
            default:
                throw new Error(`Unknown parameter structure ${parameterStructures.toString()}`);
        }
    }
    function computeMessageParams(type, params) {
        let result;
        const numberOfParams = type.numberOfParams;
        switch (numberOfParams) {
            case 0:
                result = undefined;
                break;
            case 1:
                result = computeSingleParam(type.parameterStructures, params[0]);
                break;
            default:
                result = [];
                for (let i = 0; i < params.length && i < numberOfParams; i++) {
                    result.push(undefinedToNull(params[i]));
                }
                if (params.length < numberOfParams) {
                    for (let i = params.length; i < numberOfParams; i++) {
                        result.push(null);
                    }
                }
                break;
        }
        return result;
    }
    const connection = {
        sendNotification: (type, ...args) => {
            throwIfClosedOrDisposed();
            let method;
            let messageParams;
            if (Is.string(type)) {
                method = type;
                const first = args[0];
                let paramStart = 0;
                let parameterStructures = messages_1.ParameterStructures.auto;
                if (messages_1.ParameterStructures.is(first)) {
                    paramStart = 1;
                    parameterStructures = first;
                }
                let paramEnd = args.length;
                const numberOfParams = paramEnd - paramStart;
                switch (numberOfParams) {
                    case 0:
                        messageParams = undefined;
                        break;
                    case 1:
                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                        break;
                    default:
                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' notification parameter structure.`);
                        }
                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));
                        break;
                }
            }
            else {
                const params = args;
                method = type.method;
                messageParams = computeMessageParams(type, params);
            }
            const notificationMessage = {
                jsonrpc: version,
                method: method,
                params: messageParams
            };
            traceSendingNotification(notificationMessage);
            return messageWriter.write(notificationMessage).catch(() => logger.error(`Sending notification failed.`));
        },
        onNotification: (type, handler) => {
            throwIfClosedOrDisposed();
            let method;
            if (Is.func(type)) {
                starNotificationHandler = type;
            }
            else if (handler) {
                if (Is.string(type)) {
                    method = type;
                    notificationHandlers.set(type, { type: undefined, handler });
                }
                else {
                    method = type.method;
                    notificationHandlers.set(type.method, { type, handler });
                }
            }
            return {
                dispose: () => {
                    if (method !== undefined) {
                        notificationHandlers.delete(method);
                    }
                    else {
                        starNotificationHandler = undefined;
                    }
                }
            };
        },
        onProgress: (_type, token, handler) => {
            if (progressHandlers.has(token)) {
                throw new Error(`Progress handler for token ${token} already registered`);
            }
            progressHandlers.set(token, handler);
            return {
                dispose: () => {
                    progressHandlers.delete(token);
                }
            };
        },
        sendProgress: (_type, token, value) => {
            return connection.sendNotification(ProgressNotification.type, { token, value });
        },
        onUnhandledProgress: unhandledProgressEmitter.event,
        sendRequest: (type, ...args) => {
            throwIfClosedOrDisposed();
            throwIfNotListening();
            let method;
            let messageParams;
            let token = undefined;
            if (Is.string(type)) {
                method = type;
                const first = args[0];
                const last = args[args.length - 1];
                let paramStart = 0;
                let parameterStructures = messages_1.ParameterStructures.auto;
                if (messages_1.ParameterStructures.is(first)) {
                    paramStart = 1;
                    parameterStructures = first;
                }
                let paramEnd = args.length;
                if (cancellation_1.CancellationToken.is(last)) {
                    paramEnd = paramEnd - 1;
                    token = last;
                }
                const numberOfParams = paramEnd - paramStart;
                switch (numberOfParams) {
                    case 0:
                        messageParams = undefined;
                        break;
                    case 1:
                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                        break;
                    default:
                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' request parameter structure.`);
                        }
                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));
                        break;
                }
            }
            else {
                const params = args;
                method = type.method;
                messageParams = computeMessageParams(type, params);
                const numberOfParams = type.numberOfParams;
                token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : undefined;
            }
            const id = sequenceNumber++;
            let disposable;
            if (token) {
                disposable = token.onCancellationRequested(() => {
                    const p = cancellationStrategy.sender.sendCancellation(connection, id);
                    if (p === undefined) {
                        logger.log(`Received no promise from cancellation strategy when cancelling id ${id}`);
                        return Promise.resolve();
                    }
                    else {
                        return p.catch(() => {
                            logger.log(`Sending cancellation messages for id ${id} failed`);
                        });
                    }
                });
            }
            const result = new Promise((resolve, reject) => {
                const requestMessage = {
                    jsonrpc: version,
                    id: id,
                    method: method,
                    params: messageParams
                };
                const resolveWithCleanup = (r) => {
                    resolve(r);
                    cancellationStrategy.sender.cleanup(id);
                    disposable?.dispose();
                };
                const rejectWithCleanup = (r) => {
                    reject(r);
                    cancellationStrategy.sender.cleanup(id);
                    disposable?.dispose();
                };
                let responsePromise = { method: method, timerStart: Date.now(), resolve: resolveWithCleanup, reject: rejectWithCleanup };
                traceSendingRequest(requestMessage);
                try {
                    messageWriter.write(requestMessage).catch(() => logger.error(`Sending request failed.`));
                }
                catch (e) {
                    // Writing the message failed. So we need to reject the promise.
                    responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, e.message ? e.message : 'Unknown reason'));
                    responsePromise = null;
                }
                if (responsePromise) {
                    responsePromises.set(id, responsePromise);
                }
            });
            return result;
        },
        onRequest: (type, handler) => {
            throwIfClosedOrDisposed();
            let method = null;
            if (StarRequestHandler.is(type)) {
                method = undefined;
                starRequestHandler = type;
            }
            else if (Is.string(type)) {
                method = null;
                if (handler !== undefined) {
                    method = type;
                    requestHandlers.set(type, { handler: handler, type: undefined });
                }
            }
            else {
                if (handler !== undefined) {
                    method = type.method;
                    requestHandlers.set(type.method, { type, handler });
                }
            }
            return {
                dispose: () => {
                    if (method === null) {
                        return;
                    }
                    if (method !== undefined) {
                        requestHandlers.delete(method);
                    }
                    else {
                        starRequestHandler = undefined;
                    }
                }
            };
        },
        hasPendingResponse: () => {
            return responsePromises.size > 0;
        },
        trace: async (_value, _tracer, sendNotificationOrTraceOptions) => {
            let _sendNotification = false;
            let _traceFormat = TraceFormat.Text;
            if (sendNotificationOrTraceOptions !== undefined) {
                if (Is.boolean(sendNotificationOrTraceOptions)) {
                    _sendNotification = sendNotificationOrTraceOptions;
                }
                else {
                    _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;
                    _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;
                }
            }
            trace = _value;
            traceFormat = _traceFormat;
            if (trace === Trace.Off) {
                tracer = undefined;
            }
            else {
                tracer = _tracer;
            }
            if (_sendNotification && !isClosed() && !isDisposed()) {
                await connection.sendNotification(SetTraceNotification.type, { value: Trace.toString(_value) });
            }
        },
        onError: errorEmitter.event,
        onClose: closeEmitter.event,
        onUnhandledNotification: unhandledNotificationEmitter.event,
        onDispose: disposeEmitter.event,
        end: () => {
            messageWriter.end();
        },
        dispose: () => {
            if (isDisposed()) {
                return;
            }
            state = ConnectionState.Disposed;
            disposeEmitter.fire(undefined);
            const error = new messages_1.ResponseError(messages_1.ErrorCodes.PendingResponseRejected, 'Pending response rejected since connection got disposed');
            for (const promise of responsePromises.values()) {
                promise.reject(error);
            }
            responsePromises = new Map();
            requestTokens = new Map();
            knownCanceledRequests = new Set();
            messageQueue = new linkedMap_1.LinkedMap();
            // Test for backwards compatibility
            if (Is.func(messageWriter.dispose)) {
                messageWriter.dispose();
            }
            if (Is.func(messageReader.dispose)) {
                messageReader.dispose();
            }
        },
        listen: () => {
            throwIfClosedOrDisposed();
            throwIfListening();
            state = ConnectionState.Listening;
            messageReader.listen(callback);
        },
        inspect: () => {
            // eslint-disable-next-line no-console
            (0, ral_1.default)().console.log('inspect');
        }
    };
    connection.onNotification(LogTraceNotification.type, (params) => {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        const verbose = trace === Trace.Verbose || trace === Trace.Compact;
        tracer.log(params.message, verbose ? params.verbose : undefined);
    });
    connection.onNotification(ProgressNotification.type, (params) => {
        const handler = progressHandlers.get(params.token);
        if (handler) {
            handler(params.value);
        }
        else {
            unhandledProgressEmitter.fire(params);
        }
    });
    return connection;
}
exports.createMessageConnection = createMessageConnection;
//# sourceMappingURL=connection.js.map

/***/ }),

/***/ 8437:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Disposable = void 0;
var Disposable;
(function (Disposable) {
    function create(func) {
        return {
            dispose: func
        };
    }
    Disposable.create = create;
})(Disposable = exports.Disposable || (exports.Disposable = {}));
//# sourceMappingURL=disposable.js.map

/***/ }),

/***/ 5165:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Emitter = exports.Event = void 0;
const ral_1 = __webpack_require__(5706);
var Event;
(function (Event) {
    const _disposable = { dispose() { } };
    Event.None = function () { return _disposable; };
})(Event = exports.Event || (exports.Event = {}));
class CallbackList {
    add(callback, context = null, bucket) {
        if (!this._callbacks) {
            this._callbacks = [];
            this._contexts = [];
        }
        this._callbacks.push(callback);
        this._contexts.push(context);
        if (Array.isArray(bucket)) {
            bucket.push({ dispose: () => this.remove(callback, context) });
        }
    }
    remove(callback, context = null) {
        if (!this._callbacks) {
            return;
        }
        let foundCallbackWithDifferentContext = false;
        for (let i = 0, len = this._callbacks.length; i < len; i++) {
            if (this._callbacks[i] === callback) {
                if (this._contexts[i] === context) {
                    // callback & context match => remove it
                    this._callbacks.splice(i, 1);
                    this._contexts.splice(i, 1);
                    return;
                }
                else {
                    foundCallbackWithDifferentContext = true;
                }
            }
        }
        if (foundCallbackWithDifferentContext) {
            throw new Error('When adding a listener with a context, you should remove it with the same context');
        }
    }
    invoke(...args) {
        if (!this._callbacks) {
            return [];
        }
        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);
        for (let i = 0, len = callbacks.length; i < len; i++) {
            try {
                ret.push(callbacks[i].apply(contexts[i], args));
            }
            catch (e) {
                // eslint-disable-next-line no-console
                (0, ral_1.default)().console.error(e);
            }
        }
        return ret;
    }
    isEmpty() {
        return !this._callbacks || this._callbacks.length === 0;
    }
    dispose() {
        this._callbacks = undefined;
        this._contexts = undefined;
    }
}
class Emitter {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * For the public to allow to subscribe
     * to events from this Emitter
     */
    get event() {
        if (!this._event) {
            this._event = (listener, thisArgs, disposables) => {
                if (!this._callbacks) {
                    this._callbacks = new CallbackList();
                }
                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {
                    this._options.onFirstListenerAdd(this);
                }
                this._callbacks.add(listener, thisArgs);
                const result = {
                    dispose: () => {
                        if (!this._callbacks) {
                            // disposable is disposed after emitter is disposed.
                            return;
                        }
                        this._callbacks.remove(listener, thisArgs);
                        result.dispose = Emitter._noop;
                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {
                            this._options.onLastListenerRemove(this);
                        }
                    }
                };
                if (Array.isArray(disposables)) {
                    disposables.push(result);
                }
                return result;
            };
        }
        return this._event;
    }
    /**
     * To be kept private to fire an event to
     * subscribers
     */
    fire(event) {
        if (this._callbacks) {
            this._callbacks.invoke.call(this._callbacks, event);
        }
    }
    dispose() {
        if (this._callbacks) {
            this._callbacks.dispose();
            this._callbacks = undefined;
        }
    }
}
exports.Emitter = Emitter;
Emitter._noop = function () { };
//# sourceMappingURL=events.js.map

/***/ }),

/***/ 8811:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;
//# sourceMappingURL=is.js.map

/***/ }),

/***/ 7040:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LRUCache = exports.LinkedMap = exports.Touch = void 0;
var Touch;
(function (Touch) {
    Touch.None = 0;
    Touch.First = 1;
    Touch.AsOld = Touch.First;
    Touch.Last = 2;
    Touch.AsNew = Touch.Last;
})(Touch = exports.Touch || (exports.Touch = {}));
class LinkedMap {
    constructor() {
        this[_a] = 'LinkedMap';
        this._map = new Map();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
        this._state = 0;
    }
    clear() {
        this._map.clear();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
        this._state++;
    }
    isEmpty() {
        return !this._head && !this._tail;
    }
    get size() {
        return this._size;
    }
    get first() {
        return this._head?.value;
    }
    get last() {
        return this._tail?.value;
    }
    has(key) {
        return this._map.has(key);
    }
    get(key, touch = Touch.None) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        if (touch !== Touch.None) {
            this.touch(item, touch);
        }
        return item.value;
    }
    set(key, value, touch = Touch.None) {
        let item = this._map.get(key);
        if (item) {
            item.value = value;
            if (touch !== Touch.None) {
                this.touch(item, touch);
            }
        }
        else {
            item = { key, value, next: undefined, previous: undefined };
            switch (touch) {
                case Touch.None:
                    this.addItemLast(item);
                    break;
                case Touch.First:
                    this.addItemFirst(item);
                    break;
                case Touch.Last:
                    this.addItemLast(item);
                    break;
                default:
                    this.addItemLast(item);
                    break;
            }
            this._map.set(key, item);
            this._size++;
        }
        return this;
    }
    delete(key) {
        return !!this.remove(key);
    }
    remove(key) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        this._map.delete(key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    shift() {
        if (!this._head && !this._tail) {
            return undefined;
        }
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        const item = this._head;
        this._map.delete(item.key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    forEach(callbackfn, thisArg) {
        const state = this._state;
        let current = this._head;
        while (current) {
            if (thisArg) {
                callbackfn.bind(thisArg)(current.value, current.key, this);
            }
            else {
                callbackfn(current.value, current.key, this);
            }
            if (this._state !== state) {
                throw new Error(`LinkedMap got modified during iteration.`);
            }
            current = current.next;
        }
    }
    keys() {
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]: () => {
                return iterator;
            },
            next: () => {
                if (this._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: current.key, done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    values() {
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]: () => {
                return iterator;
            },
            next: () => {
                if (this._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: current.value, done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    entries() {
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]: () => {
                return iterator;
            },
            next: () => {
                if (this._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: [current.key, current.value], done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    [(_a = Symbol.toStringTag, Symbol.iterator)]() {
        return this.entries();
    }
    trimOld(newSize) {
        if (newSize >= this.size) {
            return;
        }
        if (newSize === 0) {
            this.clear();
            return;
        }
        let current = this._head;
        let currentSize = this.size;
        while (current && currentSize > newSize) {
            this._map.delete(current.key);
            current = current.next;
            currentSize--;
        }
        this._head = current;
        this._size = currentSize;
        if (current) {
            current.previous = undefined;
        }
        this._state++;
    }
    addItemFirst(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._tail = item;
        }
        else if (!this._head) {
            throw new Error('Invalid list');
        }
        else {
            item.next = this._head;
            this._head.previous = item;
        }
        this._head = item;
        this._state++;
    }
    addItemLast(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._head = item;
        }
        else if (!this._tail) {
            throw new Error('Invalid list');
        }
        else {
            item.previous = this._tail;
            this._tail.next = item;
        }
        this._tail = item;
        this._state++;
    }
    removeItem(item) {
        if (item === this._head && item === this._tail) {
            this._head = undefined;
            this._tail = undefined;
        }
        else if (item === this._head) {
            // This can only happened if size === 1 which is handle
            // by the case above.
            if (!item.next) {
                throw new Error('Invalid list');
            }
            item.next.previous = undefined;
            this._head = item.next;
        }
        else if (item === this._tail) {
            // This can only happened if size === 1 which is handle
            // by the case above.
            if (!item.previous) {
                throw new Error('Invalid list');
            }
            item.previous.next = undefined;
            this._tail = item.previous;
        }
        else {
            const next = item.next;
            const previous = item.previous;
            if (!next || !previous) {
                throw new Error('Invalid list');
            }
            next.previous = previous;
            previous.next = next;
        }
        item.next = undefined;
        item.previous = undefined;
        this._state++;
    }
    touch(item, touch) {
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        if ((touch !== Touch.First && touch !== Touch.Last)) {
            return;
        }
        if (touch === Touch.First) {
            if (item === this._head) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item
            if (item === this._tail) {
                // previous must be defined since item was not head but is tail
                // So there are more than on item in the map
                previous.next = undefined;
                this._tail = previous;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            // Insert the node at head
            item.previous = undefined;
            item.next = this._head;
            this._head.previous = item;
            this._head = item;
            this._state++;
        }
        else if (touch === Touch.Last) {
            if (item === this._tail) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item.
            if (item === this._head) {
                // next must be defined since item was not tail but is head
                // So there are more than on item in the map
                next.previous = undefined;
                this._head = next;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            item.next = undefined;
            item.previous = this._tail;
            this._tail.next = item;
            this._tail = item;
            this._state++;
        }
    }
    toJSON() {
        const data = [];
        this.forEach((value, key) => {
            data.push([key, value]);
        });
        return data;
    }
    fromJSON(data) {
        this.clear();
        for (const [key, value] of data) {
            this.set(key, value);
        }
    }
}
exports.LinkedMap = LinkedMap;
class LRUCache extends LinkedMap {
    constructor(limit, ratio = 1) {
        super();
        this._limit = limit;
        this._ratio = Math.min(Math.max(0, ratio), 1);
    }
    get limit() {
        return this._limit;
    }
    set limit(limit) {
        this._limit = limit;
        this.checkTrim();
    }
    get ratio() {
        return this._ratio;
    }
    set ratio(ratio) {
        this._ratio = Math.min(Math.max(0, ratio), 1);
        this.checkTrim();
    }
    get(key, touch = Touch.AsNew) {
        return super.get(key, touch);
    }
    peek(key) {
        return super.get(key, Touch.None);
    }
    set(key, value) {
        super.set(key, value, Touch.Last);
        this.checkTrim();
        return this;
    }
    checkTrim() {
        if (this.size > this._limit) {
            this.trimOld(Math.round(this._limit * this._ratio));
        }
    }
}
exports.LRUCache = LRUCache;
//# sourceMappingURL=linkedMap.js.map

/***/ }),

/***/ 8652:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractMessageBuffer = void 0;
const CR = 13;
const LF = 10;
const CRLF = '\r\n';
class AbstractMessageBuffer {
    constructor(encoding = 'utf-8') {
        this._encoding = encoding;
        this._chunks = [];
        this._totalLength = 0;
    }
    get encoding() {
        return this._encoding;
    }
    append(chunk) {
        const toAppend = typeof chunk === 'string' ? this.fromString(chunk, this._encoding) : chunk;
        this._chunks.push(toAppend);
        this._totalLength += toAppend.byteLength;
    }
    tryReadHeaders() {
        if (this._chunks.length === 0) {
            return undefined;
        }
        let state = 0;
        let chunkIndex = 0;
        let offset = 0;
        let chunkBytesRead = 0;
        row: while (chunkIndex < this._chunks.length) {
            const chunk = this._chunks[chunkIndex];
            offset = 0;
            column: while (offset < chunk.length) {
                const value = chunk[offset];
                switch (value) {
                    case CR:
                        switch (state) {
                            case 0:
                                state = 1;
                                break;
                            case 2:
                                state = 3;
                                break;
                            default:
                                state = 0;
                        }
                        break;
                    case LF:
                        switch (state) {
                            case 1:
                                state = 2;
                                break;
                            case 3:
                                state = 4;
                                offset++;
                                break row;
                            default:
                                state = 0;
                        }
                        break;
                    default:
                        state = 0;
                }
                offset++;
            }
            chunkBytesRead += chunk.byteLength;
            chunkIndex++;
        }
        if (state !== 4) {
            return undefined;
        }
        // The buffer contains the two CRLF at the end. So we will
        // have two empty lines after the split at the end as well.
        const buffer = this._read(chunkBytesRead + offset);
        const result = new Map();
        const headers = this.toString(buffer, 'ascii').split(CRLF);
        if (headers.length < 2) {
            return result;
        }
        for (let i = 0; i < headers.length - 2; i++) {
            const header = headers[i];
            const index = header.indexOf(':');
            if (index === -1) {
                throw new Error('Message header must separate key and value using :');
            }
            const key = header.substr(0, index);
            const value = header.substr(index + 1).trim();
            result.set(key, value);
        }
        return result;
    }
    tryReadBody(length) {
        if (this._totalLength < length) {
            return undefined;
        }
        return this._read(length);
    }
    get numberOfBytes() {
        return this._totalLength;
    }
    _read(byteCount) {
        if (byteCount === 0) {
            return this.emptyBuffer();
        }
        if (byteCount > this._totalLength) {
            throw new Error(`Cannot read so many bytes!`);
        }
        if (this._chunks[0].byteLength === byteCount) {
            // super fast path, precisely first chunk must be returned
            const chunk = this._chunks[0];
            this._chunks.shift();
            this._totalLength -= byteCount;
            return this.asNative(chunk);
        }
        if (this._chunks[0].byteLength > byteCount) {
            // fast path, the reading is entirely within the first chunk
            const chunk = this._chunks[0];
            const result = this.asNative(chunk, byteCount);
            this._chunks[0] = chunk.slice(byteCount);
            this._totalLength -= byteCount;
            return result;
        }
        const result = this.allocNative(byteCount);
        let resultOffset = 0;
        let chunkIndex = 0;
        while (byteCount > 0) {
            const chunk = this._chunks[chunkIndex];
            if (chunk.byteLength > byteCount) {
                // this chunk will survive
                const chunkPart = chunk.slice(0, byteCount);
                result.set(chunkPart, resultOffset);
                resultOffset += byteCount;
                this._chunks[chunkIndex] = chunk.slice(byteCount);
                this._totalLength -= byteCount;
                byteCount -= byteCount;
            }
            else {
                // this chunk will be entirely read
                result.set(chunk, resultOffset);
                resultOffset += chunk.byteLength;
                this._chunks.shift();
                this._totalLength -= chunk.byteLength;
                byteCount -= chunk.byteLength;
            }
        }
        return result;
    }
}
exports.AbstractMessageBuffer = AbstractMessageBuffer;
//# sourceMappingURL=messageBuffer.js.map

/***/ }),

/***/ 451:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = void 0;
const ral_1 = __webpack_require__(5706);
const Is = __webpack_require__(8811);
const events_1 = __webpack_require__(5165);
var MessageReader;
(function (MessageReader) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.listen) && Is.func(candidate.dispose) &&
            Is.func(candidate.onError) && Is.func(candidate.onClose) && Is.func(candidate.onPartialMessage);
    }
    MessageReader.is = is;
})(MessageReader = exports.MessageReader || (exports.MessageReader = {}));
class AbstractMessageReader {
    constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
        this.partialMessageEmitter = new events_1.Emitter();
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error) {
        this.errorEmitter.fire(this.asError(error));
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    get onPartialMessage() {
        return this.partialMessageEmitter.event;
    }
    firePartialMessage(info) {
        this.partialMessageEmitter.fire(info);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        else {
            return new Error(`Reader received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
        }
    }
}
exports.AbstractMessageReader = AbstractMessageReader;
var ResolvedMessageReaderOptions;
(function (ResolvedMessageReaderOptions) {
    function fromOptions(options) {
        let charset;
        let result;
        let contentDecoder;
        const contentDecoders = new Map();
        let contentTypeDecoder;
        const contentTypeDecoders = new Map();
        if (options === undefined || typeof options === 'string') {
            charset = options ?? 'utf-8';
        }
        else {
            charset = options.charset ?? 'utf-8';
            if (options.contentDecoder !== undefined) {
                contentDecoder = options.contentDecoder;
                contentDecoders.set(contentDecoder.name, contentDecoder);
            }
            if (options.contentDecoders !== undefined) {
                for (const decoder of options.contentDecoders) {
                    contentDecoders.set(decoder.name, decoder);
                }
            }
            if (options.contentTypeDecoder !== undefined) {
                contentTypeDecoder = options.contentTypeDecoder;
                contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
            }
            if (options.contentTypeDecoders !== undefined) {
                for (const decoder of options.contentTypeDecoders) {
                    contentTypeDecoders.set(decoder.name, decoder);
                }
            }
        }
        if (contentTypeDecoder === undefined) {
            contentTypeDecoder = (0, ral_1.default)().applicationJson.decoder;
            contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
        }
        return { charset, contentDecoder, contentDecoders, contentTypeDecoder, contentTypeDecoders };
    }
    ResolvedMessageReaderOptions.fromOptions = fromOptions;
})(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));
class ReadableStreamMessageReader extends AbstractMessageReader {
    constructor(readable, options) {
        super();
        this.readable = readable;
        this.options = ResolvedMessageReaderOptions.fromOptions(options);
        this.buffer = (0, ral_1.default)().messageBuffer.create(this.options.charset);
        this._partialMessageTimeout = 10000;
        this.nextMessageLength = -1;
        this.messageToken = 0;
    }
    set partialMessageTimeout(timeout) {
        this._partialMessageTimeout = timeout;
    }
    get partialMessageTimeout() {
        return this._partialMessageTimeout;
    }
    listen(callback) {
        this.nextMessageLength = -1;
        this.messageToken = 0;
        this.partialMessageTimer = undefined;
        this.callback = callback;
        const result = this.readable.onData((data) => {
            this.onData(data);
        });
        this.readable.onError((error) => this.fireError(error));
        this.readable.onClose(() => this.fireClose());
        return result;
    }
    onData(data) {
        this.buffer.append(data);
        while (true) {
            if (this.nextMessageLength === -1) {
                const headers = this.buffer.tryReadHeaders();
                if (!headers) {
                    return;
                }
                const contentLength = headers.get('Content-Length');
                if (!contentLength) {
                    throw new Error('Header must provide a Content-Length property.');
                }
                const length = parseInt(contentLength);
                if (isNaN(length)) {
                    throw new Error('Content-Length value must be a number.');
                }
                this.nextMessageLength = length;
            }
            const body = this.buffer.tryReadBody(this.nextMessageLength);
            if (body === undefined) {
                /** We haven't received the full message yet. */
                this.setPartialMessageTimer();
                return;
            }
            this.clearPartialMessageTimer();
            this.nextMessageLength = -1;
            let p;
            if (this.options.contentDecoder !== undefined) {
                p = this.options.contentDecoder.decode(body);
            }
            else {
                p = Promise.resolve(body);
            }
            p.then((value) => {
                this.options.contentTypeDecoder.decode(value, this.options).then((msg) => {
                    this.callback(msg);
                }, (error) => {
                    this.fireError(error);
                });
            }, (error) => {
                this.fireError(error);
            });
        }
    }
    clearPartialMessageTimer() {
        if (this.partialMessageTimer) {
            this.partialMessageTimer.dispose();
            this.partialMessageTimer = undefined;
        }
    }
    setPartialMessageTimer() {
        this.clearPartialMessageTimer();
        if (this._partialMessageTimeout <= 0) {
            return;
        }
        this.partialMessageTimer = (0, ral_1.default)().timer.setTimeout((token, timeout) => {
            this.partialMessageTimer = undefined;
            if (token === this.messageToken) {
                this.firePartialMessage({ messageToken: token, waitingTime: timeout });
                this.setPartialMessageTimer();
            }
        }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
    }
}
exports.ReadableStreamMessageReader = ReadableStreamMessageReader;
//# sourceMappingURL=messageReader.js.map

/***/ }),

/***/ 1251:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = void 0;
const ral_1 = __webpack_require__(5706);
const Is = __webpack_require__(8811);
const semaphore_1 = __webpack_require__(2339);
const events_1 = __webpack_require__(5165);
const ContentLength = 'Content-Length: ';
const CRLF = '\r\n';
var MessageWriter;
(function (MessageWriter) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.dispose) && Is.func(candidate.onClose) &&
            Is.func(candidate.onError) && Is.func(candidate.write);
    }
    MessageWriter.is = is;
})(MessageWriter = exports.MessageWriter || (exports.MessageWriter = {}));
class AbstractMessageWriter {
    constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error, message, count) {
        this.errorEmitter.fire([this.asError(error), message, count]);
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        else {
            return new Error(`Writer received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
        }
    }
}
exports.AbstractMessageWriter = AbstractMessageWriter;
var ResolvedMessageWriterOptions;
(function (ResolvedMessageWriterOptions) {
    function fromOptions(options) {
        if (options === undefined || typeof options === 'string') {
            return { charset: options ?? 'utf-8', contentTypeEncoder: (0, ral_1.default)().applicationJson.encoder };
        }
        else {
            return { charset: options.charset ?? 'utf-8', contentEncoder: options.contentEncoder, contentTypeEncoder: options.contentTypeEncoder ?? (0, ral_1.default)().applicationJson.encoder };
        }
    }
    ResolvedMessageWriterOptions.fromOptions = fromOptions;
})(ResolvedMessageWriterOptions || (ResolvedMessageWriterOptions = {}));
class WriteableStreamMessageWriter extends AbstractMessageWriter {
    constructor(writable, options) {
        super();
        this.writable = writable;
        this.options = ResolvedMessageWriterOptions.fromOptions(options);
        this.errorCount = 0;
        this.writeSemaphore = new semaphore_1.Semaphore(1);
        this.writable.onError((error) => this.fireError(error));
        this.writable.onClose(() => this.fireClose());
    }
    async write(msg) {
        return this.writeSemaphore.lock(async () => {
            const payload = this.options.contentTypeEncoder.encode(msg, this.options).then((buffer) => {
                if (this.options.contentEncoder !== undefined) {
                    return this.options.contentEncoder.encode(buffer);
                }
                else {
                    return buffer;
                }
            });
            return payload.then((buffer) => {
                const headers = [];
                headers.push(ContentLength, buffer.byteLength.toString(), CRLF);
                headers.push(CRLF);
                return this.doWrite(msg, headers, buffer);
            }, (error) => {
                this.fireError(error);
                throw error;
            });
        });
    }
    async doWrite(msg, headers, data) {
        try {
            await this.writable.write(headers.join(''), 'ascii');
            return this.writable.write(data);
        }
        catch (error) {
            this.handleError(error, msg);
            return Promise.reject(error);
        }
    }
    handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    }
    end() {
        this.writable.end();
    }
}
exports.WriteableStreamMessageWriter = WriteableStreamMessageWriter;
//# sourceMappingURL=messageWriter.js.map

/***/ }),

/***/ 9141:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Message = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType = exports.RequestType0 = exports.AbstractMessageSignature = exports.ParameterStructures = exports.ResponseError = exports.ErrorCodes = void 0;
const is = __webpack_require__(8811);
/**
 * Predefined error codes.
 */
var ErrorCodes;
(function (ErrorCodes) {
    // Defined by JSON RPC
    ErrorCodes.ParseError = -32700;
    ErrorCodes.InvalidRequest = -32600;
    ErrorCodes.MethodNotFound = -32601;
    ErrorCodes.InvalidParams = -32602;
    ErrorCodes.InternalError = -32603;
    /**
     * This is the start range of JSON RPC reserved error codes.
     * It doesn't denote a real error code. No application error codes should
     * be defined between the start and end range. For backwards
     * compatibility the `ServerNotInitialized` and the `UnknownErrorCode`
     * are left in the range.
     *
     * @since 3.16.0
    */
    ErrorCodes.jsonrpcReservedErrorRangeStart = -32099;
    /** @deprecated use  jsonrpcReservedErrorRangeStart */
    ErrorCodes.serverErrorStart = -32099;
    /**
     * An error occurred when write a message to the transport layer.
     */
    ErrorCodes.MessageWriteError = -32099;
    /**
     * An error occurred when reading a message from the transport layer.
     */
    ErrorCodes.MessageReadError = -32098;
    /**
     * The connection got disposed or lost and all pending responses got
     * rejected.
     */
    ErrorCodes.PendingResponseRejected = -32097;
    /**
     * The connection is inactive and a use of it failed.
     */
    ErrorCodes.ConnectionInactive = -32096;
    /**
     * Error code indicating that a server received a notification or
     * request before the server has received the `initialize` request.
     */
    ErrorCodes.ServerNotInitialized = -32002;
    ErrorCodes.UnknownErrorCode = -32001;
    /**
     * This is the end range of JSON RPC reserved error codes.
     * It doesn't denote a real error code.
     *
     * @since 3.16.0
    */
    ErrorCodes.jsonrpcReservedErrorRangeEnd = -32000;
    /** @deprecated use  jsonrpcReservedErrorRangeEnd */
    ErrorCodes.serverErrorEnd = -32000;
})(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));
/**
 * An error object return in a response in case a request
 * has failed.
 */
class ResponseError extends Error {
    constructor(code, message, data) {
        super(message);
        this.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode;
        this.data = data;
        Object.setPrototypeOf(this, ResponseError.prototype);
    }
    toJson() {
        const result = {
            code: this.code,
            message: this.message
        };
        if (this.data !== undefined) {
            result.data = this.data;
        }
        return result;
    }
}
exports.ResponseError = ResponseError;
class ParameterStructures {
    constructor(kind) {
        this.kind = kind;
    }
    static is(value) {
        return value === ParameterStructures.auto || value === ParameterStructures.byName || value === ParameterStructures.byPosition;
    }
    toString() {
        return this.kind;
    }
}
exports.ParameterStructures = ParameterStructures;
/**
 * The parameter structure is automatically inferred on the number of parameters
 * and the parameter type in case of a single param.
 */
ParameterStructures.auto = new ParameterStructures('auto');
/**
 * Forces `byPosition` parameter structure. This is useful if you have a single
 * parameter which has a literal type.
 */
ParameterStructures.byPosition = new ParameterStructures('byPosition');
/**
 * Forces `byName` parameter structure. This is only useful when having a single
 * parameter. The library will report errors if used with a different number of
 * parameters.
 */
ParameterStructures.byName = new ParameterStructures('byName');
/**
 * An abstract implementation of a MessageType.
 */
class AbstractMessageSignature {
    constructor(method, numberOfParams) {
        this.method = method;
        this.numberOfParams = numberOfParams;
    }
    get parameterStructures() {
        return ParameterStructures.auto;
    }
}
exports.AbstractMessageSignature = AbstractMessageSignature;
/**
 * Classes to type request response pairs
 */
class RequestType0 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 0);
    }
}
exports.RequestType0 = RequestType0;
class RequestType extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.RequestType = RequestType;
class RequestType1 extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.RequestType1 = RequestType1;
class RequestType2 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 2);
    }
}
exports.RequestType2 = RequestType2;
class RequestType3 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 3);
    }
}
exports.RequestType3 = RequestType3;
class RequestType4 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 4);
    }
}
exports.RequestType4 = RequestType4;
class RequestType5 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 5);
    }
}
exports.RequestType5 = RequestType5;
class RequestType6 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 6);
    }
}
exports.RequestType6 = RequestType6;
class RequestType7 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 7);
    }
}
exports.RequestType7 = RequestType7;
class RequestType8 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 8);
    }
}
exports.RequestType8 = RequestType8;
class RequestType9 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 9);
    }
}
exports.RequestType9 = RequestType9;
class NotificationType extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.NotificationType = NotificationType;
class NotificationType0 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 0);
    }
}
exports.NotificationType0 = NotificationType0;
class NotificationType1 extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.NotificationType1 = NotificationType1;
class NotificationType2 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 2);
    }
}
exports.NotificationType2 = NotificationType2;
class NotificationType3 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 3);
    }
}
exports.NotificationType3 = NotificationType3;
class NotificationType4 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 4);
    }
}
exports.NotificationType4 = NotificationType4;
class NotificationType5 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 5);
    }
}
exports.NotificationType5 = NotificationType5;
class NotificationType6 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 6);
    }
}
exports.NotificationType6 = NotificationType6;
class NotificationType7 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 7);
    }
}
exports.NotificationType7 = NotificationType7;
class NotificationType8 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 8);
    }
}
exports.NotificationType8 = NotificationType8;
class NotificationType9 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 9);
    }
}
exports.NotificationType9 = NotificationType9;
var Message;
(function (Message) {
    /**
     * Tests if the given message is a request message
     */
    function isRequest(message) {
        const candidate = message;
        return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
    }
    Message.isRequest = isRequest;
    /**
     * Tests if the given message is a notification message
     */
    function isNotification(message) {
        const candidate = message;
        return candidate && is.string(candidate.method) && message.id === void 0;
    }
    Message.isNotification = isNotification;
    /**
     * Tests if the given message is a response message
     */
    function isResponse(message) {
        const candidate = message;
        return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
    }
    Message.isResponse = isResponse;
})(Message = exports.Message || (exports.Message = {}));
//# sourceMappingURL=messages.js.map

/***/ }),

/***/ 5706:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
let _ral;
function RAL() {
    if (_ral === undefined) {
        throw new Error(`No runtime abstraction layer installed`);
    }
    return _ral;
}
(function (RAL) {
    function install(ral) {
        if (ral === undefined) {
            throw new Error(`No runtime abstraction layer provided`);
        }
        _ral = ral;
    }
    RAL.install = install;
})(RAL || (RAL = {}));
exports["default"] = RAL;
//# sourceMappingURL=ral.js.map

/***/ }),

/***/ 2339:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Semaphore = void 0;
const ral_1 = __webpack_require__(5706);
class Semaphore {
    constructor(capacity = 1) {
        if (capacity <= 0) {
            throw new Error('Capacity must be greater than 0');
        }
        this._capacity = capacity;
        this._active = 0;
        this._waiting = [];
    }
    lock(thunk) {
        return new Promise((resolve, reject) => {
            this._waiting.push({ thunk, resolve, reject });
            this.runNext();
        });
    }
    get active() {
        return this._active;
    }
    runNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
            return;
        }
        (0, ral_1.default)().timer.setImmediate(() => this.doRunNext());
    }
    doRunNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
            return;
        }
        const next = this._waiting.shift();
        this._active++;
        if (this._active > this._capacity) {
            throw new Error(`To many thunks active`);
        }
        try {
            const result = next.thunk();
            if (result instanceof Promise) {
                result.then((value) => {
                    this._active--;
                    next.resolve(value);
                    this.runNext();
                }, (err) => {
                    this._active--;
                    next.reject(err);
                    this.runNext();
                });
            }
            else {
                this._active--;
                next.resolve(result);
                this.runNext();
            }
        }
        catch (err) {
            this._active--;
            next.reject(err);
            this.runNext();
        }
    }
}
exports.Semaphore = Semaphore;
//# sourceMappingURL=semaphore.js.map

/***/ }),

/***/ 294:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createProtocolConnection = void 0;
const browser_1 = __webpack_require__(1200);
__exportStar(__webpack_require__(1200), exports);
__exportStar(__webpack_require__(9372), exports);
function createProtocolConnection(reader, writer, logger, options) {
    return (0, browser_1.createMessageConnection)(reader, writer, logger, options);
}
exports.createProtocolConnection = createProtocolConnection;
//# sourceMappingURL=main.js.map

/***/ }),

/***/ 9372:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LSPErrorCodes = exports.createProtocolConnection = void 0;
__exportStar(__webpack_require__(5953), exports);
__exportStar(__webpack_require__(4767), exports);
__exportStar(__webpack_require__(8599), exports);
__exportStar(__webpack_require__(6525), exports);
var connection_1 = __webpack_require__(2798);
Object.defineProperty(exports, "createProtocolConnection", ({ enumerable: true, get: function () { return connection_1.createProtocolConnection; } }));
var LSPErrorCodes;
(function (LSPErrorCodes) {
    /**
    * This is the start range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */
    LSPErrorCodes.lspReservedErrorRangeStart = -32899;
    /**
     * A request failed but it was syntactically correct, e.g the
     * method name was known and the parameters were valid. The error
     * message should contain human readable information about why
     * the request failed.
     *
     * @since 3.17.0
     */
    LSPErrorCodes.RequestFailed = -32803;
    /**
     * The server cancelled the request. This error code should
     * only be used for requests that explicitly support being
     * server cancellable.
     *
     * @since 3.17.0
     */
    LSPErrorCodes.ServerCancelled = -32802;
    /**
     * The server detected that the content of a document got
     * modified outside normal conditions. A server should
     * NOT send this error code if it detects a content change
     * in it unprocessed messages. The result even computed
     * on an older state might still be useful for the client.
     *
     * If a client decides that a result is not of any use anymore
     * the client should cancel the request.
     */
    LSPErrorCodes.ContentModified = -32801;
    /**
     * The client has canceled a request and a server as detected
     * the cancel.
     */
    LSPErrorCodes.RequestCancelled = -32800;
    /**
    * This is the end range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */
    LSPErrorCodes.lspReservedErrorRangeEnd = -32800;
})(LSPErrorCodes = exports.LSPErrorCodes || (exports.LSPErrorCodes = {}));
//# sourceMappingURL=api.js.map

/***/ }),

/***/ 2798:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createProtocolConnection = void 0;
const vscode_jsonrpc_1 = __webpack_require__(5953);
function createProtocolConnection(input, output, logger, options) {
    if (vscode_jsonrpc_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
    }
    return (0, vscode_jsonrpc_1.createMessageConnection)(input, output, logger, options);
}
exports.createProtocolConnection = createProtocolConnection;
//# sourceMappingURL=connection.js.map

/***/ }),

/***/ 8599:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProtocolNotificationType = exports.ProtocolNotificationType0 = exports.ProtocolRequestType = exports.ProtocolRequestType0 = exports.RegistrationType = exports.MessageDirection = void 0;
const vscode_jsonrpc_1 = __webpack_require__(5953);
var MessageDirection;
(function (MessageDirection) {
    MessageDirection["clientToServer"] = "clientToServer";
    MessageDirection["serverToClient"] = "serverToClient";
    MessageDirection["both"] = "both";
})(MessageDirection = exports.MessageDirection || (exports.MessageDirection = {}));
class RegistrationType {
    constructor(method) {
        this.method = method;
    }
}
exports.RegistrationType = RegistrationType;
class ProtocolRequestType0 extends vscode_jsonrpc_1.RequestType0 {
    constructor(method) {
        super(method);
    }
}
exports.ProtocolRequestType0 = ProtocolRequestType0;
class ProtocolRequestType extends vscode_jsonrpc_1.RequestType {
    constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
    }
}
exports.ProtocolRequestType = ProtocolRequestType;
class ProtocolNotificationType0 extends vscode_jsonrpc_1.NotificationType0 {
    constructor(method) {
        super(method);
    }
}
exports.ProtocolNotificationType0 = ProtocolNotificationType0;
class ProtocolNotificationType extends vscode_jsonrpc_1.NotificationType {
    constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
    }
}
exports.ProtocolNotificationType = ProtocolNotificationType;
//# sourceMappingURL=messages.js.map

/***/ }),

/***/ 4434:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox, Microsoft and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.CallHierarchyPrepareRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A request to result a `CallHierarchyItem` in a document at a given position.
 * Can be used as an input to an incoming or outgoing call hierarchy.
 *
 * @since 3.16.0
 */
var CallHierarchyPrepareRequest;
(function (CallHierarchyPrepareRequest) {
    CallHierarchyPrepareRequest.method = 'textDocument/prepareCallHierarchy';
    CallHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CallHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(CallHierarchyPrepareRequest.method);
})(CallHierarchyPrepareRequest = exports.CallHierarchyPrepareRequest || (exports.CallHierarchyPrepareRequest = {}));
/**
 * A request to resolve the incoming calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */
var CallHierarchyIncomingCallsRequest;
(function (CallHierarchyIncomingCallsRequest) {
    CallHierarchyIncomingCallsRequest.method = 'callHierarchy/incomingCalls';
    CallHierarchyIncomingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CallHierarchyIncomingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyIncomingCallsRequest.method);
})(CallHierarchyIncomingCallsRequest = exports.CallHierarchyIncomingCallsRequest || (exports.CallHierarchyIncomingCallsRequest = {}));
/**
 * A request to resolve the outgoing calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */
var CallHierarchyOutgoingCallsRequest;
(function (CallHierarchyOutgoingCallsRequest) {
    CallHierarchyOutgoingCallsRequest.method = 'callHierarchy/outgoingCalls';
    CallHierarchyOutgoingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CallHierarchyOutgoingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyOutgoingCallsRequest.method);
})(CallHierarchyOutgoingCallsRequest = exports.CallHierarchyOutgoingCallsRequest || (exports.CallHierarchyOutgoingCallsRequest = {}));
//# sourceMappingURL=protocol.callHierarchy.js.map

/***/ }),

/***/ 7908:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColorPresentationRequest = exports.DocumentColorRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A request to list all color symbols found in a given text document. The request's
 * parameter is of type [DocumentColorParams](#DocumentColorParams) the
 * response is of type [ColorInformation[]](#ColorInformation) or a Thenable
 * that resolves to such.
 */
var DocumentColorRequest;
(function (DocumentColorRequest) {
    DocumentColorRequest.method = 'textDocument/documentColor';
    DocumentColorRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentColorRequest.type = new messages_1.ProtocolRequestType(DocumentColorRequest.method);
})(DocumentColorRequest = exports.DocumentColorRequest || (exports.DocumentColorRequest = {}));
/**
 * A request to list all presentation for a color. The request's
 * parameter is of type [ColorPresentationParams](#ColorPresentationParams) the
 * response is of type [ColorInformation[]](#ColorInformation) or a Thenable
 * that resolves to such.
 */
var ColorPresentationRequest;
(function (ColorPresentationRequest) {
    ColorPresentationRequest.method = 'textDocument/colorPresentation';
    ColorPresentationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ColorPresentationRequest.type = new messages_1.ProtocolRequestType(ColorPresentationRequest.method);
})(ColorPresentationRequest = exports.ColorPresentationRequest || (exports.ColorPresentationRequest = {}));
//# sourceMappingURL=protocol.colorProvider.js.map

/***/ }),

/***/ 5442:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConfigurationRequest = void 0;
const messages_1 = __webpack_require__(8599);
//---- Get Configuration request ----
/**
 * The 'workspace/configuration' request is sent from the server to the client to fetch a certain
 * configuration setting.
 *
 * This pull model replaces the old push model were the client signaled configuration change via an
 * event. If the server still needs to react to configuration changes (since the server caches the
 * result of `workspace/configuration` requests) the server should register for an empty configuration
 * change event and empty the cache if such an event is received.
 */
var ConfigurationRequest;
(function (ConfigurationRequest) {
    ConfigurationRequest.method = 'workspace/configuration';
    ConfigurationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ConfigurationRequest.type = new messages_1.ProtocolRequestType(ConfigurationRequest.method);
})(ConfigurationRequest = exports.ConfigurationRequest || (exports.ConfigurationRequest = {}));
//# sourceMappingURL=protocol.configuration.js.map

/***/ }),

/***/ 7210:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeclarationRequest = void 0;
const messages_1 = __webpack_require__(8599);
// @ts-ignore: to avoid inlining LocationLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositionParams]
 * (#TextDocumentPositionParams) the response is of type [Declaration](#Declaration)
 * or a typed array of [DeclarationLink](#DeclarationLink) or a Thenable that resolves
 * to such.
 */
var DeclarationRequest;
(function (DeclarationRequest) {
    DeclarationRequest.method = 'textDocument/declaration';
    DeclarationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DeclarationRequest.type = new messages_1.ProtocolRequestType(DeclarationRequest.method);
})(DeclarationRequest = exports.DeclarationRequest || (exports.DeclarationRequest = {}));
//# sourceMappingURL=protocol.declaration.js.map

/***/ }),

/***/ 5692:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = void 0;
const vscode_jsonrpc_1 = __webpack_require__(5953);
const Is = __webpack_require__(2523);
const messages_1 = __webpack_require__(8599);
/**
 * @since 3.17.0
 */
var DiagnosticServerCancellationData;
(function (DiagnosticServerCancellationData) {
    function is(value) {
        const candidate = value;
        return candidate && Is.boolean(candidate.retriggerRequest);
    }
    DiagnosticServerCancellationData.is = is;
})(DiagnosticServerCancellationData = exports.DiagnosticServerCancellationData || (exports.DiagnosticServerCancellationData = {}));
/**
 * The document diagnostic report kinds.
 *
 * @since 3.17.0
 */
var DocumentDiagnosticReportKind;
(function (DocumentDiagnosticReportKind) {
    /**
     * A diagnostic report with a full
     * set of problems.
     */
    DocumentDiagnosticReportKind.Full = 'full';
    /**
     * A report indicating that the last
     * returned report is still accurate.
     */
    DocumentDiagnosticReportKind.Unchanged = 'unchanged';
})(DocumentDiagnosticReportKind = exports.DocumentDiagnosticReportKind || (exports.DocumentDiagnosticReportKind = {}));
/**
 * The document diagnostic request definition.
 *
 * @since 3.17.0
 */
var DocumentDiagnosticRequest;
(function (DocumentDiagnosticRequest) {
    DocumentDiagnosticRequest.method = 'textDocument/diagnostic';
    DocumentDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentDiagnosticRequest.type = new messages_1.ProtocolRequestType(DocumentDiagnosticRequest.method);
    DocumentDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
})(DocumentDiagnosticRequest = exports.DocumentDiagnosticRequest || (exports.DocumentDiagnosticRequest = {}));
/**
 * The workspace diagnostic request definition.
 *
 * @since 3.17.0
 */
var WorkspaceDiagnosticRequest;
(function (WorkspaceDiagnosticRequest) {
    WorkspaceDiagnosticRequest.method = 'workspace/diagnostic';
    WorkspaceDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkspaceDiagnosticRequest.type = new messages_1.ProtocolRequestType(WorkspaceDiagnosticRequest.method);
    WorkspaceDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
})(WorkspaceDiagnosticRequest = exports.WorkspaceDiagnosticRequest || (exports.WorkspaceDiagnosticRequest = {}));
/**
 * The diagnostic refresh request definition.
 *
 * @since 3.17.0
 */
var DiagnosticRefreshRequest;
(function (DiagnosticRefreshRequest) {
    DiagnosticRefreshRequest.method = `workspace/diagnostic/refresh`;
    DiagnosticRefreshRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DiagnosticRefreshRequest.type = new messages_1.ProtocolRequestType0(DiagnosticRefreshRequest.method);
})(DiagnosticRefreshRequest = exports.DiagnosticRefreshRequest || (exports.DiagnosticRefreshRequest = {}));
//# sourceMappingURL=protocol.diagnostic.js.map

/***/ }),

/***/ 6190:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.DidRenameFilesNotification = exports.WillRenameFilesRequest = exports.DidCreateFilesNotification = exports.WillCreateFilesRequest = exports.FileOperationPatternKind = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A pattern kind describing if a glob pattern matches a file a folder or
 * both.
 *
 * @since 3.16.0
 */
var FileOperationPatternKind;
(function (FileOperationPatternKind) {
    /**
     * The pattern matches a file only.
     */
    FileOperationPatternKind.file = 'file';
    /**
     * The pattern matches a folder only.
     */
    FileOperationPatternKind.folder = 'folder';
})(FileOperationPatternKind = exports.FileOperationPatternKind || (exports.FileOperationPatternKind = {}));
/**
 * The will create files request is sent from the client to the server before files are actually
 * created as long as the creation is triggered from within the client.
 *
 * @since 3.16.0
 */
var WillCreateFilesRequest;
(function (WillCreateFilesRequest) {
    WillCreateFilesRequest.method = 'workspace/willCreateFiles';
    WillCreateFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillCreateFilesRequest.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest.method);
})(WillCreateFilesRequest = exports.WillCreateFilesRequest || (exports.WillCreateFilesRequest = {}));
/**
 * The did create files notification is sent from the client to the server when
 * files were created from within the client.
 *
 * @since 3.16.0
 */
var DidCreateFilesNotification;
(function (DidCreateFilesNotification) {
    DidCreateFilesNotification.method = 'workspace/didCreateFiles';
    DidCreateFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidCreateFilesNotification.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification.method);
})(DidCreateFilesNotification = exports.DidCreateFilesNotification || (exports.DidCreateFilesNotification = {}));
/**
 * The will rename files request is sent from the client to the server before files are actually
 * renamed as long as the rename is triggered from within the client.
 *
 * @since 3.16.0
 */
var WillRenameFilesRequest;
(function (WillRenameFilesRequest) {
    WillRenameFilesRequest.method = 'workspace/willRenameFiles';
    WillRenameFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillRenameFilesRequest.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest.method);
})(WillRenameFilesRequest = exports.WillRenameFilesRequest || (exports.WillRenameFilesRequest = {}));
/**
 * The did rename files notification is sent from the client to the server when
 * files were renamed from within the client.
 *
 * @since 3.16.0
 */
var DidRenameFilesNotification;
(function (DidRenameFilesNotification) {
    DidRenameFilesNotification.method = 'workspace/didRenameFiles';
    DidRenameFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidRenameFilesNotification.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification.method);
})(DidRenameFilesNotification = exports.DidRenameFilesNotification || (exports.DidRenameFilesNotification = {}));
/**
 * The will delete files request is sent from the client to the server before files are actually
 * deleted as long as the deletion is triggered from within the client.
 *
 * @since 3.16.0
 */
var DidDeleteFilesNotification;
(function (DidDeleteFilesNotification) {
    DidDeleteFilesNotification.method = 'workspace/didDeleteFiles';
    DidDeleteFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidDeleteFilesNotification.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification.method);
})(DidDeleteFilesNotification = exports.DidDeleteFilesNotification || (exports.DidDeleteFilesNotification = {}));
/**
 * The did delete files notification is sent from the client to the server when
 * files were deleted from within the client.
 *
 * @since 3.16.0
 */
var WillDeleteFilesRequest;
(function (WillDeleteFilesRequest) {
    WillDeleteFilesRequest.method = 'workspace/willDeleteFiles';
    WillDeleteFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillDeleteFilesRequest.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest.method);
})(WillDeleteFilesRequest = exports.WillDeleteFilesRequest || (exports.WillDeleteFilesRequest = {}));
//# sourceMappingURL=protocol.fileOperations.js.map

/***/ }),

/***/ 7029:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FoldingRangeRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A request to provide folding ranges in a document. The request's
 * parameter is of type [FoldingRangeParams](#FoldingRangeParams), the
 * response is of type [FoldingRangeList](#FoldingRangeList) or a Thenable
 * that resolves to such.
 */
var FoldingRangeRequest;
(function (FoldingRangeRequest) {
    FoldingRangeRequest.method = 'textDocument/foldingRange';
    FoldingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    FoldingRangeRequest.type = new messages_1.ProtocolRequestType(FoldingRangeRequest.method);
})(FoldingRangeRequest = exports.FoldingRangeRequest || (exports.FoldingRangeRequest = {}));
//# sourceMappingURL=protocol.foldingRange.js.map

/***/ }),

/***/ 9380:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImplementationRequest = void 0;
const messages_1 = __webpack_require__(8599);
// @ts-ignore: to avoid inlining LocationLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the implementation locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositionParams]
 * (#TextDocumentPositionParams) the response is of type [Definition](#Definition) or a
 * Thenable that resolves to such.
 */
var ImplementationRequest;
(function (ImplementationRequest) {
    ImplementationRequest.method = 'textDocument/implementation';
    ImplementationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ImplementationRequest.type = new messages_1.ProtocolRequestType(ImplementationRequest.method);
})(ImplementationRequest = exports.ImplementationRequest || (exports.ImplementationRequest = {}));
//# sourceMappingURL=protocol.implementation.js.map

/***/ }),

/***/ 6315:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A request to provide inlay hints in a document. The request's parameter is of
 * type [InlayHintsParams](#InlayHintsParams), the response is of type
 * [InlayHint[]](#InlayHint[]) or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */
var InlayHintRequest;
(function (InlayHintRequest) {
    InlayHintRequest.method = 'textDocument/inlayHint';
    InlayHintRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlayHintRequest.type = new messages_1.ProtocolRequestType(InlayHintRequest.method);
})(InlayHintRequest = exports.InlayHintRequest || (exports.InlayHintRequest = {}));
/**
 * A request to resolve additional properties for an inlay hint.
 * The request's parameter is of type [InlayHint](#InlayHint), the response is
 * of type [InlayHint](#InlayHint) or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */
var InlayHintResolveRequest;
(function (InlayHintResolveRequest) {
    InlayHintResolveRequest.method = 'inlayHint/resolve';
    InlayHintResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlayHintResolveRequest.type = new messages_1.ProtocolRequestType(InlayHintResolveRequest.method);
})(InlayHintResolveRequest = exports.InlayHintResolveRequest || (exports.InlayHintResolveRequest = {}));
/**
 * @since 3.17.0
 */
var InlayHintRefreshRequest;
(function (InlayHintRefreshRequest) {
    InlayHintRefreshRequest.method = `workspace/inlayHint/refresh`;
    InlayHintRefreshRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlayHintRefreshRequest.type = new messages_1.ProtocolRequestType0(InlayHintRefreshRequest.method);
})(InlayHintRefreshRequest = exports.InlayHintRefreshRequest || (exports.InlayHintRefreshRequest = {}));
//# sourceMappingURL=protocol.inlayHint.js.map

/***/ }),

/***/ 7425:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlineValueRefreshRequest = exports.InlineValueRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A request to provide inline values in a document. The request's parameter is of
 * type [InlineValueParams](#InlineValueParams), the response is of type
 * [InlineValue[]](#InlineValue[]) or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */
var InlineValueRequest;
(function (InlineValueRequest) {
    InlineValueRequest.method = 'textDocument/inlineValue';
    InlineValueRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlineValueRequest.type = new messages_1.ProtocolRequestType(InlineValueRequest.method);
})(InlineValueRequest = exports.InlineValueRequest || (exports.InlineValueRequest = {}));
/**
 * @since 3.17.0
 */
var InlineValueRefreshRequest;
(function (InlineValueRefreshRequest) {
    InlineValueRefreshRequest.method = `workspace/inlineValue/refresh`;
    InlineValueRefreshRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlineValueRefreshRequest.type = new messages_1.ProtocolRequestType0(InlineValueRefreshRequest.method);
})(InlineValueRefreshRequest = exports.InlineValueRefreshRequest || (exports.InlineValueRefreshRequest = {}));
//# sourceMappingURL=protocol.inlineValue.js.map

/***/ }),

/***/ 6525:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkspaceSymbolRequest = exports.CodeActionResolveRequest = exports.CodeActionRequest = exports.DocumentSymbolRequest = exports.DocumentHighlightRequest = exports.ReferencesRequest = exports.DefinitionRequest = exports.SignatureHelpRequest = exports.SignatureHelpTriggerKind = exports.HoverRequest = exports.CompletionResolveRequest = exports.CompletionRequest = exports.CompletionTriggerKind = exports.PublishDiagnosticsNotification = exports.WatchKind = exports.RelativePattern = exports.FileChangeType = exports.DidChangeWatchedFilesNotification = exports.WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentNotification = exports.TextDocumentSaveReason = exports.DidSaveTextDocumentNotification = exports.DidCloseTextDocumentNotification = exports.DidChangeTextDocumentNotification = exports.TextDocumentContentChangeEvent = exports.DidOpenTextDocumentNotification = exports.TextDocumentSyncKind = exports.TelemetryEventNotification = exports.LogMessageNotification = exports.ShowMessageRequest = exports.ShowMessageNotification = exports.MessageType = exports.DidChangeConfigurationNotification = exports.ExitNotification = exports.ShutdownRequest = exports.InitializedNotification = exports.InitializeErrorCodes = exports.InitializeRequest = exports.WorkDoneProgressOptions = exports.TextDocumentRegistrationOptions = exports.StaticRegistrationOptions = exports.PositionEncodingKind = exports.FailureHandlingKind = exports.ResourceOperationKind = exports.UnregistrationRequest = exports.RegistrationRequest = exports.DocumentSelector = exports.NotebookCellTextDocumentFilter = exports.NotebookDocumentFilter = exports.TextDocumentFilter = void 0;
exports.TypeHierarchySubtypesRequest = exports.TypeHierarchyPrepareRequest = exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.WillRenameFilesRequest = exports.DidRenameFilesNotification = exports.WillCreateFilesRequest = exports.DidCreateFilesNotification = exports.FileOperationPatternKind = exports.LinkedEditingRangeRequest = exports.ShowDocumentRequest = exports.SemanticTokensRegistrationType = exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.TokenFormat = exports.CallHierarchyPrepareRequest = exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = exports.SelectionRangeRequest = exports.DeclarationRequest = exports.FoldingRangeRequest = exports.ColorPresentationRequest = exports.DocumentColorRequest = exports.ConfigurationRequest = exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = exports.TypeDefinitionRequest = exports.ImplementationRequest = exports.ApplyWorkspaceEditRequest = exports.ExecuteCommandRequest = exports.PrepareRenameRequest = exports.RenameRequest = exports.PrepareSupportDefaultBehavior = exports.DocumentOnTypeFormattingRequest = exports.DocumentRangeFormattingRequest = exports.DocumentFormattingRequest = exports.DocumentLinkResolveRequest = exports.DocumentLinkRequest = exports.CodeLensRefreshRequest = exports.CodeLensResolveRequest = exports.CodeLensRequest = exports.WorkspaceSymbolResolveRequest = void 0;
exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = exports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = exports.InlineValueRefreshRequest = exports.InlineValueRequest = exports.TypeHierarchySupertypesRequest = void 0;
const messages_1 = __webpack_require__(8599);
const vscode_languageserver_types_1 = __webpack_require__(4767);
const Is = __webpack_require__(2523);
const protocol_implementation_1 = __webpack_require__(9380);
Object.defineProperty(exports, "ImplementationRequest", ({ enumerable: true, get: function () { return protocol_implementation_1.ImplementationRequest; } }));
const protocol_typeDefinition_1 = __webpack_require__(8642);
Object.defineProperty(exports, "TypeDefinitionRequest", ({ enumerable: true, get: function () { return protocol_typeDefinition_1.TypeDefinitionRequest; } }));
const protocol_workspaceFolder_1 = __webpack_require__(3402);
Object.defineProperty(exports, "WorkspaceFoldersRequest", ({ enumerable: true, get: function () { return protocol_workspaceFolder_1.WorkspaceFoldersRequest; } }));
Object.defineProperty(exports, "DidChangeWorkspaceFoldersNotification", ({ enumerable: true, get: function () { return protocol_workspaceFolder_1.DidChangeWorkspaceFoldersNotification; } }));
const protocol_configuration_1 = __webpack_require__(5442);
Object.defineProperty(exports, "ConfigurationRequest", ({ enumerable: true, get: function () { return protocol_configuration_1.ConfigurationRequest; } }));
const protocol_colorProvider_1 = __webpack_require__(7908);
Object.defineProperty(exports, "DocumentColorRequest", ({ enumerable: true, get: function () { return protocol_colorProvider_1.DocumentColorRequest; } }));
Object.defineProperty(exports, "ColorPresentationRequest", ({ enumerable: true, get: function () { return protocol_colorProvider_1.ColorPresentationRequest; } }));
const protocol_foldingRange_1 = __webpack_require__(7029);
Object.defineProperty(exports, "FoldingRangeRequest", ({ enumerable: true, get: function () { return protocol_foldingRange_1.FoldingRangeRequest; } }));
const protocol_declaration_1 = __webpack_require__(7210);
Object.defineProperty(exports, "DeclarationRequest", ({ enumerable: true, get: function () { return protocol_declaration_1.DeclarationRequest; } }));
const protocol_selectionRange_1 = __webpack_require__(2392);
Object.defineProperty(exports, "SelectionRangeRequest", ({ enumerable: true, get: function () { return protocol_selectionRange_1.SelectionRangeRequest; } }));
const protocol_progress_1 = __webpack_require__(7895);
Object.defineProperty(exports, "WorkDoneProgress", ({ enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgress; } }));
Object.defineProperty(exports, "WorkDoneProgressCreateRequest", ({ enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgressCreateRequest; } }));
Object.defineProperty(exports, "WorkDoneProgressCancelNotification", ({ enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgressCancelNotification; } }));
const protocol_callHierarchy_1 = __webpack_require__(4434);
Object.defineProperty(exports, "CallHierarchyIncomingCallsRequest", ({ enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest; } }));
Object.defineProperty(exports, "CallHierarchyOutgoingCallsRequest", ({ enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest; } }));
Object.defineProperty(exports, "CallHierarchyPrepareRequest", ({ enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyPrepareRequest; } }));
const protocol_semanticTokens_1 = __webpack_require__(8489);
Object.defineProperty(exports, "TokenFormat", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.TokenFormat; } }));
Object.defineProperty(exports, "SemanticTokensRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRequest; } }));
Object.defineProperty(exports, "SemanticTokensDeltaRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensDeltaRequest; } }));
Object.defineProperty(exports, "SemanticTokensRangeRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRangeRequest; } }));
Object.defineProperty(exports, "SemanticTokensRefreshRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRefreshRequest; } }));
Object.defineProperty(exports, "SemanticTokensRegistrationType", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRegistrationType; } }));
const protocol_showDocument_1 = __webpack_require__(1541);
Object.defineProperty(exports, "ShowDocumentRequest", ({ enumerable: true, get: function () { return protocol_showDocument_1.ShowDocumentRequest; } }));
const protocol_linkedEditingRange_1 = __webpack_require__(527);
Object.defineProperty(exports, "LinkedEditingRangeRequest", ({ enumerable: true, get: function () { return protocol_linkedEditingRange_1.LinkedEditingRangeRequest; } }));
const protocol_fileOperations_1 = __webpack_require__(6190);
Object.defineProperty(exports, "FileOperationPatternKind", ({ enumerable: true, get: function () { return protocol_fileOperations_1.FileOperationPatternKind; } }));
Object.defineProperty(exports, "DidCreateFilesNotification", ({ enumerable: true, get: function () { return protocol_fileOperations_1.DidCreateFilesNotification; } }));
Object.defineProperty(exports, "WillCreateFilesRequest", ({ enumerable: true, get: function () { return protocol_fileOperations_1.WillCreateFilesRequest; } }));
Object.defineProperty(exports, "DidRenameFilesNotification", ({ enumerable: true, get: function () { return protocol_fileOperations_1.DidRenameFilesNotification; } }));
Object.defineProperty(exports, "WillRenameFilesRequest", ({ enumerable: true, get: function () { return protocol_fileOperations_1.WillRenameFilesRequest; } }));
Object.defineProperty(exports, "DidDeleteFilesNotification", ({ enumerable: true, get: function () { return protocol_fileOperations_1.DidDeleteFilesNotification; } }));
Object.defineProperty(exports, "WillDeleteFilesRequest", ({ enumerable: true, get: function () { return protocol_fileOperations_1.WillDeleteFilesRequest; } }));
const protocol_moniker_1 = __webpack_require__(1964);
Object.defineProperty(exports, "UniquenessLevel", ({ enumerable: true, get: function () { return protocol_moniker_1.UniquenessLevel; } }));
Object.defineProperty(exports, "MonikerKind", ({ enumerable: true, get: function () { return protocol_moniker_1.MonikerKind; } }));
Object.defineProperty(exports, "MonikerRequest", ({ enumerable: true, get: function () { return protocol_moniker_1.MonikerRequest; } }));
const protocol_typeHierarchy_1 = __webpack_require__(5318);
Object.defineProperty(exports, "TypeHierarchyPrepareRequest", ({ enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchyPrepareRequest; } }));
Object.defineProperty(exports, "TypeHierarchySubtypesRequest", ({ enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchySubtypesRequest; } }));
Object.defineProperty(exports, "TypeHierarchySupertypesRequest", ({ enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchySupertypesRequest; } }));
const protocol_inlineValue_1 = __webpack_require__(7425);
Object.defineProperty(exports, "InlineValueRequest", ({ enumerable: true, get: function () { return protocol_inlineValue_1.InlineValueRequest; } }));
Object.defineProperty(exports, "InlineValueRefreshRequest", ({ enumerable: true, get: function () { return protocol_inlineValue_1.InlineValueRefreshRequest; } }));
const protocol_inlayHint_1 = __webpack_require__(6315);
Object.defineProperty(exports, "InlayHintRequest", ({ enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintRequest; } }));
Object.defineProperty(exports, "InlayHintResolveRequest", ({ enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintResolveRequest; } }));
Object.defineProperty(exports, "InlayHintRefreshRequest", ({ enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintRefreshRequest; } }));
const protocol_diagnostic_1 = __webpack_require__(5692);
Object.defineProperty(exports, "DiagnosticServerCancellationData", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DiagnosticServerCancellationData; } }));
Object.defineProperty(exports, "DocumentDiagnosticReportKind", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DocumentDiagnosticReportKind; } }));
Object.defineProperty(exports, "DocumentDiagnosticRequest", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DocumentDiagnosticRequest; } }));
Object.defineProperty(exports, "WorkspaceDiagnosticRequest", ({ enumerable: true, get: function () { return protocol_diagnostic_1.WorkspaceDiagnosticRequest; } }));
Object.defineProperty(exports, "DiagnosticRefreshRequest", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DiagnosticRefreshRequest; } }));
const protocol_notebook_1 = __webpack_require__(4460);
Object.defineProperty(exports, "NotebookCellKind", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookCellKind; } }));
Object.defineProperty(exports, "ExecutionSummary", ({ enumerable: true, get: function () { return protocol_notebook_1.ExecutionSummary; } }));
Object.defineProperty(exports, "NotebookCell", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookCell; } }));
Object.defineProperty(exports, "NotebookDocument", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookDocument; } }));
Object.defineProperty(exports, "NotebookDocumentSyncRegistrationType", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookDocumentSyncRegistrationType; } }));
Object.defineProperty(exports, "DidOpenNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidOpenNotebookDocumentNotification; } }));
Object.defineProperty(exports, "NotebookCellArrayChange", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookCellArrayChange; } }));
Object.defineProperty(exports, "DidChangeNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidChangeNotebookDocumentNotification; } }));
Object.defineProperty(exports, "DidSaveNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidSaveNotebookDocumentNotification; } }));
Object.defineProperty(exports, "DidCloseNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidCloseNotebookDocumentNotification; } }));
// @ts-ignore: to avoid inlining LocationLink as dynamic import
let __noDynamicImport;
/**
 * The TextDocumentFilter namespace provides helper functions to work with
 * [TextDocumentFilter](#TextDocumentFilter) literals.
 *
 * @since 3.17.0
 */
var TextDocumentFilter;
(function (TextDocumentFilter) {
    function is(value) {
        const candidate = value;
        return Is.string(candidate.language) || Is.string(candidate.scheme) || Is.string(candidate.pattern);
    }
    TextDocumentFilter.is = is;
})(TextDocumentFilter = exports.TextDocumentFilter || (exports.TextDocumentFilter = {}));
/**
 * The NotebookDocumentFilter namespace provides helper functions to work with
 * [NotebookDocumentFilter](#NotebookDocumentFilter) literals.
 *
 * @since 3.17.0
 */
var NotebookDocumentFilter;
(function (NotebookDocumentFilter) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (Is.string(candidate.notebookType) || Is.string(candidate.scheme) || Is.string(candidate.pattern));
    }
    NotebookDocumentFilter.is = is;
})(NotebookDocumentFilter = exports.NotebookDocumentFilter || (exports.NotebookDocumentFilter = {}));
/**
 * The NotebookCellTextDocumentFilter namespace provides helper functions to work with
 * [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
 *
 * @since 3.17.0
 */
var NotebookCellTextDocumentFilter;
(function (NotebookCellTextDocumentFilter) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate)
            && (Is.string(candidate.notebook) || NotebookDocumentFilter.is(candidate.notebook))
            && (candidate.language === undefined || Is.string(candidate.language));
    }
    NotebookCellTextDocumentFilter.is = is;
})(NotebookCellTextDocumentFilter = exports.NotebookCellTextDocumentFilter || (exports.NotebookCellTextDocumentFilter = {}));
/**
 * The DocumentSelector namespace provides helper functions to work with
 * [DocumentSelector](#DocumentSelector)s.
 */
var DocumentSelector;
(function (DocumentSelector) {
    function is(value) {
        if (!Array.isArray(value)) {
            return false;
        }
        for (let elem of value) {
            if (!Is.string(elem) && !TextDocumentFilter.is(elem) && !NotebookCellTextDocumentFilter.is(elem)) {
                return false;
            }
        }
        return true;
    }
    DocumentSelector.is = is;
})(DocumentSelector = exports.DocumentSelector || (exports.DocumentSelector = {}));
/**
 * The `client/registerCapability` request is sent from the server to the client to register a new capability
 * handler on the client side.
 */
var RegistrationRequest;
(function (RegistrationRequest) {
    RegistrationRequest.method = 'client/registerCapability';
    RegistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    RegistrationRequest.type = new messages_1.ProtocolRequestType(RegistrationRequest.method);
})(RegistrationRequest = exports.RegistrationRequest || (exports.RegistrationRequest = {}));
/**
 * The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability
 * handler on the client side.
 */
var UnregistrationRequest;
(function (UnregistrationRequest) {
    UnregistrationRequest.method = 'client/unregisterCapability';
    UnregistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    UnregistrationRequest.type = new messages_1.ProtocolRequestType(UnregistrationRequest.method);
})(UnregistrationRequest = exports.UnregistrationRequest || (exports.UnregistrationRequest = {}));
var ResourceOperationKind;
(function (ResourceOperationKind) {
    /**
     * Supports creating new files and folders.
     */
    ResourceOperationKind.Create = 'create';
    /**
     * Supports renaming existing files and folders.
     */
    ResourceOperationKind.Rename = 'rename';
    /**
     * Supports deleting existing files and folders.
     */
    ResourceOperationKind.Delete = 'delete';
})(ResourceOperationKind = exports.ResourceOperationKind || (exports.ResourceOperationKind = {}));
var FailureHandlingKind;
(function (FailureHandlingKind) {
    /**
     * Applying the workspace change is simply aborted if one of the changes provided
     * fails. All operations executed before the failing operation stay executed.
     */
    FailureHandlingKind.Abort = 'abort';
    /**
     * All operations are executed transactional. That means they either all
     * succeed or no changes at all are applied to the workspace.
     */
    FailureHandlingKind.Transactional = 'transactional';
    /**
     * If the workspace edit contains only textual file changes they are executed transactional.
     * If resource changes (create, rename or delete file) are part of the change the failure
     * handling strategy is abort.
     */
    FailureHandlingKind.TextOnlyTransactional = 'textOnlyTransactional';
    /**
     * The client tries to undo the operations already executed. But there is no
     * guarantee that this is succeeding.
     */
    FailureHandlingKind.Undo = 'undo';
})(FailureHandlingKind = exports.FailureHandlingKind || (exports.FailureHandlingKind = {}));
/**
 * A set of predefined position encoding kinds.
 *
 * @since 3.17.0
 */
var PositionEncodingKind;
(function (PositionEncodingKind) {
    /**
     * Character offsets count UTF-8 code units.
     */
    PositionEncodingKind.UTF8 = 'utf-8';
    /**
     * Character offsets count UTF-16 code units.
     *
     * This is the default and must always be supported
     * by servers
     */
    PositionEncodingKind.UTF16 = 'utf-16';
    /**
     * Character offsets count UTF-32 code units.
     *
     * Implementation note: these are the same as Unicode code points,
     * so this `PositionEncodingKind` may also be used for an
     * encoding-agnostic representation of character offsets.
     */
    PositionEncodingKind.UTF32 = 'utf-32';
})(PositionEncodingKind = exports.PositionEncodingKind || (exports.PositionEncodingKind = {}));
/**
 * The StaticRegistrationOptions namespace provides helper functions to work with
 * [StaticRegistrationOptions](#StaticRegistrationOptions) literals.
 */
var StaticRegistrationOptions;
(function (StaticRegistrationOptions) {
    function hasId(value) {
        const candidate = value;
        return candidate && Is.string(candidate.id) && candidate.id.length > 0;
    }
    StaticRegistrationOptions.hasId = hasId;
})(StaticRegistrationOptions = exports.StaticRegistrationOptions || (exports.StaticRegistrationOptions = {}));
/**
 * The TextDocumentRegistrationOptions namespace provides helper functions to work with
 * [TextDocumentRegistrationOptions](#TextDocumentRegistrationOptions) literals.
 */
var TextDocumentRegistrationOptions;
(function (TextDocumentRegistrationOptions) {
    function is(value) {
        const candidate = value;
        return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));
    }
    TextDocumentRegistrationOptions.is = is;
})(TextDocumentRegistrationOptions = exports.TextDocumentRegistrationOptions || (exports.TextDocumentRegistrationOptions = {}));
/**
 * The WorkDoneProgressOptions namespace provides helper functions to work with
 * [WorkDoneProgressOptions](#WorkDoneProgressOptions) literals.
 */
var WorkDoneProgressOptions;
(function (WorkDoneProgressOptions) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (candidate.workDoneProgress === undefined || Is.boolean(candidate.workDoneProgress));
    }
    WorkDoneProgressOptions.is = is;
    function hasWorkDoneProgress(value) {
        const candidate = value;
        return candidate && Is.boolean(candidate.workDoneProgress);
    }
    WorkDoneProgressOptions.hasWorkDoneProgress = hasWorkDoneProgress;
})(WorkDoneProgressOptions = exports.WorkDoneProgressOptions || (exports.WorkDoneProgressOptions = {}));
/**
 * The initialize request is sent from the client to the server.
 * It is sent once as the request after starting up the server.
 * The requests parameter is of type [InitializeParams](#InitializeParams)
 * the response if of type [InitializeResult](#InitializeResult) of a Thenable that
 * resolves to such.
 */
var InitializeRequest;
(function (InitializeRequest) {
    InitializeRequest.method = 'initialize';
    InitializeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InitializeRequest.type = new messages_1.ProtocolRequestType(InitializeRequest.method);
})(InitializeRequest = exports.InitializeRequest || (exports.InitializeRequest = {}));
/**
 * Known error codes for an `InitializeErrorCodes`;
 */
var InitializeErrorCodes;
(function (InitializeErrorCodes) {
    /**
     * If the protocol version provided by the client can't be handled by the server.
     *
     * @deprecated This initialize error got replaced by client capabilities. There is
     * no version handshake in version 3.0x
     */
    InitializeErrorCodes.unknownProtocolVersion = 1;
})(InitializeErrorCodes = exports.InitializeErrorCodes || (exports.InitializeErrorCodes = {}));
/**
 * The initialized notification is sent from the client to the
 * server after the client is fully initialized and the server
 * is allowed to send requests from the server to the client.
 */
var InitializedNotification;
(function (InitializedNotification) {
    InitializedNotification.method = 'initialized';
    InitializedNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    InitializedNotification.type = new messages_1.ProtocolNotificationType(InitializedNotification.method);
})(InitializedNotification = exports.InitializedNotification || (exports.InitializedNotification = {}));
//---- Shutdown Method ----
/**
 * A shutdown request is sent from the client to the server.
 * It is sent once when the client decides to shutdown the
 * server. The only notification that is sent after a shutdown request
 * is the exit event.
 */
var ShutdownRequest;
(function (ShutdownRequest) {
    ShutdownRequest.method = 'shutdown';
    ShutdownRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ShutdownRequest.type = new messages_1.ProtocolRequestType0(ShutdownRequest.method);
})(ShutdownRequest = exports.ShutdownRequest || (exports.ShutdownRequest = {}));
//---- Exit Notification ----
/**
 * The exit event is sent from the client to the server to
 * ask the server to exit its process.
 */
var ExitNotification;
(function (ExitNotification) {
    ExitNotification.method = 'exit';
    ExitNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    ExitNotification.type = new messages_1.ProtocolNotificationType0(ExitNotification.method);
})(ExitNotification = exports.ExitNotification || (exports.ExitNotification = {}));
/**
 * The configuration change notification is sent from the client to the server
 * when the client's configuration has changed. The notification contains
 * the changed configuration as defined by the language client.
 */
var DidChangeConfigurationNotification;
(function (DidChangeConfigurationNotification) {
    DidChangeConfigurationNotification.method = 'workspace/didChangeConfiguration';
    DidChangeConfigurationNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeConfigurationNotification.type = new messages_1.ProtocolNotificationType(DidChangeConfigurationNotification.method);
})(DidChangeConfigurationNotification = exports.DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = {}));
//---- Message show and log notifications ----
/**
 * The message type
 */
var MessageType;
(function (MessageType) {
    /**
     * An error message.
     */
    MessageType.Error = 1;
    /**
     * A warning message.
     */
    MessageType.Warning = 2;
    /**
     * An information message.
     */
    MessageType.Info = 3;
    /**
     * A log message.
     */
    MessageType.Log = 4;
})(MessageType = exports.MessageType || (exports.MessageType = {}));
/**
 * The show message notification is sent from a server to a client to ask
 * the client to display a particular message in the user interface.
 */
var ShowMessageNotification;
(function (ShowMessageNotification) {
    ShowMessageNotification.method = 'window/showMessage';
    ShowMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    ShowMessageNotification.type = new messages_1.ProtocolNotificationType(ShowMessageNotification.method);
})(ShowMessageNotification = exports.ShowMessageNotification || (exports.ShowMessageNotification = {}));
/**
 * The show message request is sent from the server to the client to show a message
 * and a set of options actions to the user.
 */
var ShowMessageRequest;
(function (ShowMessageRequest) {
    ShowMessageRequest.method = 'window/showMessageRequest';
    ShowMessageRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ShowMessageRequest.type = new messages_1.ProtocolRequestType(ShowMessageRequest.method);
})(ShowMessageRequest = exports.ShowMessageRequest || (exports.ShowMessageRequest = {}));
/**
 * The log message notification is sent from the server to the client to ask
 * the client to log a particular message.
 */
var LogMessageNotification;
(function (LogMessageNotification) {
    LogMessageNotification.method = 'window/logMessage';
    LogMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    LogMessageNotification.type = new messages_1.ProtocolNotificationType(LogMessageNotification.method);
})(LogMessageNotification = exports.LogMessageNotification || (exports.LogMessageNotification = {}));
//---- Telemetry notification
/**
 * The telemetry event notification is sent from the server to the client to ask
 * the client to log telemetry data.
 */
var TelemetryEventNotification;
(function (TelemetryEventNotification) {
    TelemetryEventNotification.method = 'telemetry/event';
    TelemetryEventNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    TelemetryEventNotification.type = new messages_1.ProtocolNotificationType(TelemetryEventNotification.method);
})(TelemetryEventNotification = exports.TelemetryEventNotification || (exports.TelemetryEventNotification = {}));
/**
 * Defines how the host (editor) should sync
 * document changes to the language server.
 */
var TextDocumentSyncKind;
(function (TextDocumentSyncKind) {
    /**
     * Documents should not be synced at all.
     */
    TextDocumentSyncKind.None = 0;
    /**
     * Documents are synced by always sending the full content
     * of the document.
     */
    TextDocumentSyncKind.Full = 1;
    /**
     * Documents are synced by sending the full content on open.
     * After that only incremental updates to the document are
     * send.
     */
    TextDocumentSyncKind.Incremental = 2;
})(TextDocumentSyncKind = exports.TextDocumentSyncKind || (exports.TextDocumentSyncKind = {}));
/**
 * The document open notification is sent from the client to the server to signal
 * newly opened text documents. The document's truth is now managed by the client
 * and the server must not try to read the document's truth using the document's
 * uri. Open in this sense means it is managed by the client. It doesn't necessarily
 * mean that its content is presented in an editor. An open notification must not
 * be sent more than once without a corresponding close notification send before.
 * This means open and close notification must be balanced and the max open count
 * is one.
 */
var DidOpenTextDocumentNotification;
(function (DidOpenTextDocumentNotification) {
    DidOpenTextDocumentNotification.method = 'textDocument/didOpen';
    DidOpenTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidOpenTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification.method);
})(DidOpenTextDocumentNotification = exports.DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = {}));
var TextDocumentContentChangeEvent;
(function (TextDocumentContentChangeEvent) {
    /**
     * Checks whether the information describes a delta event.
     */
    function isIncremental(event) {
        let candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range !== undefined &&
            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
    }
    TextDocumentContentChangeEvent.isIncremental = isIncremental;
    /**
     * Checks whether the information describes a full replacement event.
     */
    function isFull(event) {
        let candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
    }
    TextDocumentContentChangeEvent.isFull = isFull;
})(TextDocumentContentChangeEvent = exports.TextDocumentContentChangeEvent || (exports.TextDocumentContentChangeEvent = {}));
/**
 * The document change notification is sent from the client to the server to signal
 * changes to a text document.
 */
var DidChangeTextDocumentNotification;
(function (DidChangeTextDocumentNotification) {
    DidChangeTextDocumentNotification.method = 'textDocument/didChange';
    DidChangeTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification.method);
})(DidChangeTextDocumentNotification = exports.DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = {}));
/**
 * The document close notification is sent from the client to the server when
 * the document got closed in the client. The document's truth now exists where
 * the document's uri points to (e.g. if the document's uri is a file uri the
 * truth now exists on disk). As with the open notification the close notification
 * is about managing the document's content. Receiving a close notification
 * doesn't mean that the document was open in an editor before. A close
 * notification requires a previous open notification to be sent.
 */
var DidCloseTextDocumentNotification;
(function (DidCloseTextDocumentNotification) {
    DidCloseTextDocumentNotification.method = 'textDocument/didClose';
    DidCloseTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidCloseTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification.method);
})(DidCloseTextDocumentNotification = exports.DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = {}));
/**
 * The document save notification is sent from the client to the server when
 * the document got saved in the client.
 */
var DidSaveTextDocumentNotification;
(function (DidSaveTextDocumentNotification) {
    DidSaveTextDocumentNotification.method = 'textDocument/didSave';
    DidSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification.method);
})(DidSaveTextDocumentNotification = exports.DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = {}));
/**
 * Represents reasons why a text document is saved.
 */
var TextDocumentSaveReason;
(function (TextDocumentSaveReason) {
    /**
     * Manually triggered, e.g. by the user pressing save, by starting debugging,
     * or by an API call.
     */
    TextDocumentSaveReason.Manual = 1;
    /**
     * Automatic after a delay.
     */
    TextDocumentSaveReason.AfterDelay = 2;
    /**
     * When the editor lost focus.
     */
    TextDocumentSaveReason.FocusOut = 3;
})(TextDocumentSaveReason = exports.TextDocumentSaveReason || (exports.TextDocumentSaveReason = {}));
/**
 * A document will save notification is sent from the client to the server before
 * the document is actually saved.
 */
var WillSaveTextDocumentNotification;
(function (WillSaveTextDocumentNotification) {
    WillSaveTextDocumentNotification.method = 'textDocument/willSave';
    WillSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    WillSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification.method);
})(WillSaveTextDocumentNotification = exports.WillSaveTextDocumentNotification || (exports.WillSaveTextDocumentNotification = {}));
/**
 * A document will save request is sent from the client to the server before
 * the document is actually saved. The request can return an array of TextEdits
 * which will be applied to the text document before it is saved. Please note that
 * clients might drop results if computing the text edits took too long or if a
 * server constantly fails on this request. This is done to keep the save fast and
 * reliable.
 */
var WillSaveTextDocumentWaitUntilRequest;
(function (WillSaveTextDocumentWaitUntilRequest) {
    WillSaveTextDocumentWaitUntilRequest.method = 'textDocument/willSaveWaitUntil';
    WillSaveTextDocumentWaitUntilRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillSaveTextDocumentWaitUntilRequest.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest.method);
})(WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentWaitUntilRequest || (exports.WillSaveTextDocumentWaitUntilRequest = {}));
/**
 * The watched files notification is sent from the client to the server when
 * the client detects changes to file watched by the language client.
 */
var DidChangeWatchedFilesNotification;
(function (DidChangeWatchedFilesNotification) {
    DidChangeWatchedFilesNotification.method = 'workspace/didChangeWatchedFiles';
    DidChangeWatchedFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeWatchedFilesNotification.type = new messages_1.ProtocolNotificationType(DidChangeWatchedFilesNotification.method);
})(DidChangeWatchedFilesNotification = exports.DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = {}));
/**
 * The file event type
 */
var FileChangeType;
(function (FileChangeType) {
    /**
     * The file got created.
     */
    FileChangeType.Created = 1;
    /**
     * The file got changed.
     */
    FileChangeType.Changed = 2;
    /**
     * The file got deleted.
     */
    FileChangeType.Deleted = 3;
})(FileChangeType = exports.FileChangeType || (exports.FileChangeType = {}));
var RelativePattern;
(function (RelativePattern) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (vscode_languageserver_types_1.URI.is(candidate.baseUri) || vscode_languageserver_types_1.WorkspaceFolder.is(candidate.baseUri)) && Is.string(candidate.pattern);
    }
    RelativePattern.is = is;
})(RelativePattern = exports.RelativePattern || (exports.RelativePattern = {}));
var WatchKind;
(function (WatchKind) {
    /**
     * Interested in create events.
     */
    WatchKind.Create = 1;
    /**
     * Interested in change events
     */
    WatchKind.Change = 2;
    /**
     * Interested in delete events
     */
    WatchKind.Delete = 4;
})(WatchKind = exports.WatchKind || (exports.WatchKind = {}));
/**
 * Diagnostics notification are sent from the server to the client to signal
 * results of validation runs.
 */
var PublishDiagnosticsNotification;
(function (PublishDiagnosticsNotification) {
    PublishDiagnosticsNotification.method = 'textDocument/publishDiagnostics';
    PublishDiagnosticsNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    PublishDiagnosticsNotification.type = new messages_1.ProtocolNotificationType(PublishDiagnosticsNotification.method);
})(PublishDiagnosticsNotification = exports.PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = {}));
/**
 * How a completion was triggered
 */
var CompletionTriggerKind;
(function (CompletionTriggerKind) {
    /**
     * Completion was triggered by typing an identifier (24x7 code
     * complete), manual invocation (e.g Ctrl+Space) or via API.
     */
    CompletionTriggerKind.Invoked = 1;
    /**
     * Completion was triggered by a trigger character specified by
     * the `triggerCharacters` properties of the `CompletionRegistrationOptions`.
     */
    CompletionTriggerKind.TriggerCharacter = 2;
    /**
     * Completion was re-triggered as current completion list is incomplete
     */
    CompletionTriggerKind.TriggerForIncompleteCompletions = 3;
})(CompletionTriggerKind = exports.CompletionTriggerKind || (exports.CompletionTriggerKind = {}));
/**
 * Request to request completion at a given text document position. The request's
 * parameter is of type [TextDocumentPosition](#TextDocumentPosition) the response
 * is of type [CompletionItem[]](#CompletionItem) or [CompletionList](#CompletionList)
 * or a Thenable that resolves to such.
 *
 * The request can delay the computation of the [`detail`](#CompletionItem.detail)
 * and [`documentation`](#CompletionItem.documentation) properties to the `completionItem/resolve`
 * request. However, properties that are needed for the initial sorting and filtering, like `sortText`,
 * `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.
 */
var CompletionRequest;
(function (CompletionRequest) {
    CompletionRequest.method = 'textDocument/completion';
    CompletionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CompletionRequest.type = new messages_1.ProtocolRequestType(CompletionRequest.method);
})(CompletionRequest = exports.CompletionRequest || (exports.CompletionRequest = {}));
/**
 * Request to resolve additional information for a given completion item.The request's
 * parameter is of type [CompletionItem](#CompletionItem) the response
 * is of type [CompletionItem](#CompletionItem) or a Thenable that resolves to such.
 */
var CompletionResolveRequest;
(function (CompletionResolveRequest) {
    CompletionResolveRequest.method = 'completionItem/resolve';
    CompletionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CompletionResolveRequest.type = new messages_1.ProtocolRequestType(CompletionResolveRequest.method);
})(CompletionResolveRequest = exports.CompletionResolveRequest || (exports.CompletionResolveRequest = {}));
/**
 * Request to request hover information at a given text document position. The request's
 * parameter is of type [TextDocumentPosition](#TextDocumentPosition) the response is of
 * type [Hover](#Hover) or a Thenable that resolves to such.
 */
var HoverRequest;
(function (HoverRequest) {
    HoverRequest.method = 'textDocument/hover';
    HoverRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    HoverRequest.type = new messages_1.ProtocolRequestType(HoverRequest.method);
})(HoverRequest = exports.HoverRequest || (exports.HoverRequest = {}));
/**
 * How a signature help was triggered.
 *
 * @since 3.15.0
 */
var SignatureHelpTriggerKind;
(function (SignatureHelpTriggerKind) {
    /**
     * Signature help was invoked manually by the user or by a command.
     */
    SignatureHelpTriggerKind.Invoked = 1;
    /**
     * Signature help was triggered by a trigger character.
     */
    SignatureHelpTriggerKind.TriggerCharacter = 2;
    /**
     * Signature help was triggered by the cursor moving or by the document content changing.
     */
    SignatureHelpTriggerKind.ContentChange = 3;
})(SignatureHelpTriggerKind = exports.SignatureHelpTriggerKind || (exports.SignatureHelpTriggerKind = {}));
var SignatureHelpRequest;
(function (SignatureHelpRequest) {
    SignatureHelpRequest.method = 'textDocument/signatureHelp';
    SignatureHelpRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SignatureHelpRequest.type = new messages_1.ProtocolRequestType(SignatureHelpRequest.method);
})(SignatureHelpRequest = exports.SignatureHelpRequest || (exports.SignatureHelpRequest = {}));
/**
 * A request to resolve the definition location of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPosition]
 * (#TextDocumentPosition) the response is of either type [Definition](#Definition)
 * or a typed array of [DefinitionLink](#DefinitionLink) or a Thenable that resolves
 * to such.
 */
var DefinitionRequest;
(function (DefinitionRequest) {
    DefinitionRequest.method = 'textDocument/definition';
    DefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DefinitionRequest.type = new messages_1.ProtocolRequestType(DefinitionRequest.method);
})(DefinitionRequest = exports.DefinitionRequest || (exports.DefinitionRequest = {}));
/**
 * A request to resolve project-wide references for the symbol denoted
 * by the given text document position. The request's parameter is of
 * type [ReferenceParams](#ReferenceParams) the response is of type
 * [Location[]](#Location) or a Thenable that resolves to such.
 */
var ReferencesRequest;
(function (ReferencesRequest) {
    ReferencesRequest.method = 'textDocument/references';
    ReferencesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ReferencesRequest.type = new messages_1.ProtocolRequestType(ReferencesRequest.method);
})(ReferencesRequest = exports.ReferencesRequest || (exports.ReferencesRequest = {}));
/**
 * Request to resolve a [DocumentHighlight](#DocumentHighlight) for a given
 * text document position. The request's parameter is of type [TextDocumentPosition]
 * (#TextDocumentPosition) the request response is of type [DocumentHighlight[]]
 * (#DocumentHighlight) or a Thenable that resolves to such.
 */
var DocumentHighlightRequest;
(function (DocumentHighlightRequest) {
    DocumentHighlightRequest.method = 'textDocument/documentHighlight';
    DocumentHighlightRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentHighlightRequest.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest.method);
})(DocumentHighlightRequest = exports.DocumentHighlightRequest || (exports.DocumentHighlightRequest = {}));
/**
 * A request to list all symbols found in a given text document. The request's
 * parameter is of type [TextDocumentIdentifier](#TextDocumentIdentifier) the
 * response is of type [SymbolInformation[]](#SymbolInformation) or a Thenable
 * that resolves to such.
 */
var DocumentSymbolRequest;
(function (DocumentSymbolRequest) {
    DocumentSymbolRequest.method = 'textDocument/documentSymbol';
    DocumentSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentSymbolRequest.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest.method);
})(DocumentSymbolRequest = exports.DocumentSymbolRequest || (exports.DocumentSymbolRequest = {}));
/**
 * A request to provide commands for the given text document and range.
 */
var CodeActionRequest;
(function (CodeActionRequest) {
    CodeActionRequest.method = 'textDocument/codeAction';
    CodeActionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeActionRequest.type = new messages_1.ProtocolRequestType(CodeActionRequest.method);
})(CodeActionRequest = exports.CodeActionRequest || (exports.CodeActionRequest = {}));
/**
 * Request to resolve additional information for a given code action.The request's
 * parameter is of type [CodeAction](#CodeAction) the response
 * is of type [CodeAction](#CodeAction) or a Thenable that resolves to such.
 */
var CodeActionResolveRequest;
(function (CodeActionResolveRequest) {
    CodeActionResolveRequest.method = 'codeAction/resolve';
    CodeActionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeActionResolveRequest.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest.method);
})(CodeActionResolveRequest = exports.CodeActionResolveRequest || (exports.CodeActionResolveRequest = {}));
/**
 * A request to list project-wide symbols matching the query string given
 * by the [WorkspaceSymbolParams](#WorkspaceSymbolParams). The response is
 * of type [SymbolInformation[]](#SymbolInformation) or a Thenable that
 * resolves to such.
 *
 * @since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients
 *  need to advertise support for WorkspaceSymbols via the client capability
 *  `workspace.symbol.resolveSupport`.
 *
 */
var WorkspaceSymbolRequest;
(function (WorkspaceSymbolRequest) {
    WorkspaceSymbolRequest.method = 'workspace/symbol';
    WorkspaceSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkspaceSymbolRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest.method);
})(WorkspaceSymbolRequest = exports.WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = {}));
/**
 * A request to resolve the range inside the workspace
 * symbol's location.
 *
 * @since 3.17.0
 */
var WorkspaceSymbolResolveRequest;
(function (WorkspaceSymbolResolveRequest) {
    WorkspaceSymbolResolveRequest.method = 'workspaceSymbol/resolve';
    WorkspaceSymbolResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkspaceSymbolResolveRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolResolveRequest.method);
})(WorkspaceSymbolResolveRequest = exports.WorkspaceSymbolResolveRequest || (exports.WorkspaceSymbolResolveRequest = {}));
/**
 * A request to provide code lens for the given text document.
 */
var CodeLensRequest;
(function (CodeLensRequest) {
    CodeLensRequest.method = 'textDocument/codeLens';
    CodeLensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeLensRequest.type = new messages_1.ProtocolRequestType(CodeLensRequest.method);
})(CodeLensRequest = exports.CodeLensRequest || (exports.CodeLensRequest = {}));
/**
 * A request to resolve a command for a given code lens.
 */
var CodeLensResolveRequest;
(function (CodeLensResolveRequest) {
    CodeLensResolveRequest.method = 'codeLens/resolve';
    CodeLensResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeLensResolveRequest.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest.method);
})(CodeLensResolveRequest = exports.CodeLensResolveRequest || (exports.CodeLensResolveRequest = {}));
/**
 * A request to refresh all code actions
 *
 * @since 3.16.0
 */
var CodeLensRefreshRequest;
(function (CodeLensRefreshRequest) {
    CodeLensRefreshRequest.method = `workspace/codeLens/refresh`;
    CodeLensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    CodeLensRefreshRequest.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest.method);
})(CodeLensRefreshRequest = exports.CodeLensRefreshRequest || (exports.CodeLensRefreshRequest = {}));
/**
 * A request to provide document links
 */
var DocumentLinkRequest;
(function (DocumentLinkRequest) {
    DocumentLinkRequest.method = 'textDocument/documentLink';
    DocumentLinkRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentLinkRequest.type = new messages_1.ProtocolRequestType(DocumentLinkRequest.method);
})(DocumentLinkRequest = exports.DocumentLinkRequest || (exports.DocumentLinkRequest = {}));
/**
 * Request to resolve additional information for a given document link. The request's
 * parameter is of type [DocumentLink](#DocumentLink) the response
 * is of type [DocumentLink](#DocumentLink) or a Thenable that resolves to such.
 */
var DocumentLinkResolveRequest;
(function (DocumentLinkResolveRequest) {
    DocumentLinkResolveRequest.method = 'documentLink/resolve';
    DocumentLinkResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentLinkResolveRequest.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest.method);
})(DocumentLinkResolveRequest = exports.DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = {}));
/**
 * A request to to format a whole document.
 */
var DocumentFormattingRequest;
(function (DocumentFormattingRequest) {
    DocumentFormattingRequest.method = 'textDocument/formatting';
    DocumentFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest.method);
})(DocumentFormattingRequest = exports.DocumentFormattingRequest || (exports.DocumentFormattingRequest = {}));
/**
 * A request to to format a range in a document.
 */
var DocumentRangeFormattingRequest;
(function (DocumentRangeFormattingRequest) {
    DocumentRangeFormattingRequest.method = 'textDocument/rangeFormatting';
    DocumentRangeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentRangeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest.method);
})(DocumentRangeFormattingRequest = exports.DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = {}));
/**
 * A request to format a document on type.
 */
var DocumentOnTypeFormattingRequest;
(function (DocumentOnTypeFormattingRequest) {
    DocumentOnTypeFormattingRequest.method = 'textDocument/onTypeFormatting';
    DocumentOnTypeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentOnTypeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest.method);
})(DocumentOnTypeFormattingRequest = exports.DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = {}));
//---- Rename ----------------------------------------------
var PrepareSupportDefaultBehavior;
(function (PrepareSupportDefaultBehavior) {
    /**
     * The client's default behavior is to select the identifier
     * according the to language's syntax rule.
     */
    PrepareSupportDefaultBehavior.Identifier = 1;
})(PrepareSupportDefaultBehavior = exports.PrepareSupportDefaultBehavior || (exports.PrepareSupportDefaultBehavior = {}));
/**
 * A request to rename a symbol.
 */
var RenameRequest;
(function (RenameRequest) {
    RenameRequest.method = 'textDocument/rename';
    RenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    RenameRequest.type = new messages_1.ProtocolRequestType(RenameRequest.method);
})(RenameRequest = exports.RenameRequest || (exports.RenameRequest = {}));
/**
 * A request to test and perform the setup necessary for a rename.
 *
 * @since 3.16 - support for default behavior
 */
var PrepareRenameRequest;
(function (PrepareRenameRequest) {
    PrepareRenameRequest.method = 'textDocument/prepareRename';
    PrepareRenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    PrepareRenameRequest.type = new messages_1.ProtocolRequestType(PrepareRenameRequest.method);
})(PrepareRenameRequest = exports.PrepareRenameRequest || (exports.PrepareRenameRequest = {}));
/**
 * A request send from the client to the server to execute a command. The request might return
 * a workspace edit which the client will apply to the workspace.
 */
var ExecuteCommandRequest;
(function (ExecuteCommandRequest) {
    ExecuteCommandRequest.method = 'workspace/executeCommand';
    ExecuteCommandRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ExecuteCommandRequest.type = new messages_1.ProtocolRequestType(ExecuteCommandRequest.method);
})(ExecuteCommandRequest = exports.ExecuteCommandRequest || (exports.ExecuteCommandRequest = {}));
/**
 * A request sent from the server to the client to modified certain resources.
 */
var ApplyWorkspaceEditRequest;
(function (ApplyWorkspaceEditRequest) {
    ApplyWorkspaceEditRequest.method = 'workspace/applyEdit';
    ApplyWorkspaceEditRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ApplyWorkspaceEditRequest.type = new messages_1.ProtocolRequestType('workspace/applyEdit');
})(ApplyWorkspaceEditRequest = exports.ApplyWorkspaceEditRequest || (exports.ApplyWorkspaceEditRequest = {}));
//# sourceMappingURL=protocol.js.map

/***/ }),

/***/ 527:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LinkedEditingRangeRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A request to provide ranges that can be edited together.
 *
 * @since 3.16.0
 */
var LinkedEditingRangeRequest;
(function (LinkedEditingRangeRequest) {
    LinkedEditingRangeRequest.method = 'textDocument/linkedEditingRange';
    LinkedEditingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    LinkedEditingRangeRequest.type = new messages_1.ProtocolRequestType(LinkedEditingRangeRequest.method);
})(LinkedEditingRangeRequest = exports.LinkedEditingRangeRequest || (exports.LinkedEditingRangeRequest = {}));
//# sourceMappingURL=protocol.linkedEditingRange.js.map

/***/ }),

/***/ 1964:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * Moniker uniqueness level to define scope of the moniker.
 *
 * @since 3.16.0
 */
var UniquenessLevel;
(function (UniquenessLevel) {
    /**
     * The moniker is only unique inside a document
     */
    UniquenessLevel.document = 'document';
    /**
     * The moniker is unique inside a project for which a dump got created
     */
    UniquenessLevel.project = 'project';
    /**
     * The moniker is unique inside the group to which a project belongs
     */
    UniquenessLevel.group = 'group';
    /**
     * The moniker is unique inside the moniker scheme.
     */
    UniquenessLevel.scheme = 'scheme';
    /**
     * The moniker is globally unique
     */
    UniquenessLevel.global = 'global';
})(UniquenessLevel = exports.UniquenessLevel || (exports.UniquenessLevel = {}));
/**
 * The moniker kind.
 *
 * @since 3.16.0
 */
var MonikerKind;
(function (MonikerKind) {
    /**
     * The moniker represent a symbol that is imported into a project
     */
    MonikerKind.$import = 'import';
    /**
     * The moniker represents a symbol that is exported from a project
     */
    MonikerKind.$export = 'export';
    /**
     * The moniker represents a symbol that is local to a project (e.g. a local
     * variable of a function, a class not visible outside the project, ...)
     */
    MonikerKind.local = 'local';
})(MonikerKind = exports.MonikerKind || (exports.MonikerKind = {}));
/**
 * A request to get the moniker of a symbol at a given text document position.
 * The request parameter is of type [TextDocumentPositionParams](#TextDocumentPositionParams).
 * The response is of type [Moniker[]](#Moniker[]) or `null`.
 */
var MonikerRequest;
(function (MonikerRequest) {
    MonikerRequest.method = 'textDocument/moniker';
    MonikerRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    MonikerRequest.type = new messages_1.ProtocolRequestType(MonikerRequest.method);
})(MonikerRequest = exports.MonikerRequest || (exports.MonikerRequest = {}));
//# sourceMappingURL=protocol.moniker.js.map

/***/ }),

/***/ 4460:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = void 0;
const vscode_languageserver_types_1 = __webpack_require__(4767);
const Is = __webpack_require__(2523);
const messages_1 = __webpack_require__(8599);
/**
 * A notebook cell kind.
 *
 * @since 3.17.0
 */
var NotebookCellKind;
(function (NotebookCellKind) {
    /**
     * A markup-cell is formatted source that is used for display.
     */
    NotebookCellKind.Markup = 1;
    /**
     * A code-cell is source code.
     */
    NotebookCellKind.Code = 2;
    function is(value) {
        return value === 1 || value === 2;
    }
    NotebookCellKind.is = is;
})(NotebookCellKind = exports.NotebookCellKind || (exports.NotebookCellKind = {}));
var ExecutionSummary;
(function (ExecutionSummary) {
    function create(executionOrder, success) {
        const result = { executionOrder };
        if (success === true || success === false) {
            result.success = success;
        }
        return result;
    }
    ExecutionSummary.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.executionOrder) && (candidate.success === undefined || Is.boolean(candidate.success));
    }
    ExecutionSummary.is = is;
    function equals(one, other) {
        if (one === other) {
            return true;
        }
        if (one === null || one === undefined || other === null || other === undefined) {
            return false;
        }
        return one.executionOrder === other.executionOrder && one.success === other.success;
    }
    ExecutionSummary.equals = equals;
})(ExecutionSummary = exports.ExecutionSummary || (exports.ExecutionSummary = {}));
var NotebookCell;
(function (NotebookCell) {
    function create(kind, document) {
        return { kind, document };
    }
    NotebookCell.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && NotebookCellKind.is(candidate.kind) && vscode_languageserver_types_1.DocumentUri.is(candidate.document) &&
            (candidate.metadata === undefined || Is.objectLiteral(candidate.metadata));
    }
    NotebookCell.is = is;
    function diff(one, two) {
        const result = new Set();
        if (one.document !== two.document) {
            result.add('document');
        }
        if (one.kind !== two.kind) {
            result.add('kind');
        }
        if (one.executionSummary !== two.executionSummary) {
            result.add('executionSummary');
        }
        if ((one.metadata !== undefined || two.metadata !== undefined) && !equalsMetadata(one.metadata, two.metadata)) {
            result.add('metadata');
        }
        if ((one.executionSummary !== undefined || two.executionSummary !== undefined) && !ExecutionSummary.equals(one.executionSummary, two.executionSummary)) {
            result.add('executionSummary');
        }
        return result;
    }
    NotebookCell.diff = diff;
    function equalsMetadata(one, other) {
        if (one === other) {
            return true;
        }
        if (one === null || one === undefined || other === null || other === undefined) {
            return false;
        }
        if (typeof one !== typeof other) {
            return false;
        }
        if (typeof one !== 'object') {
            return false;
        }
        const oneArray = Array.isArray(one);
        const otherArray = Array.isArray(other);
        if (oneArray !== otherArray) {
            return false;
        }
        if (oneArray && otherArray) {
            if (one.length !== other.length) {
                return false;
            }
            for (let i = 0; i < one.length; i++) {
                if (!equalsMetadata(one[i], other[i])) {
                    return false;
                }
            }
        }
        if (Is.objectLiteral(one) && Is.objectLiteral(other)) {
            const oneKeys = Object.keys(one);
            const otherKeys = Object.keys(other);
            if (oneKeys.length !== otherKeys.length) {
                return false;
            }
            oneKeys.sort();
            otherKeys.sort();
            if (!equalsMetadata(oneKeys, otherKeys)) {
                return false;
            }
            for (let i = 0; i < oneKeys.length; i++) {
                const prop = oneKeys[i];
                if (!equalsMetadata(one[prop], other[prop])) {
                    return false;
                }
            }
        }
        return true;
    }
})(NotebookCell = exports.NotebookCell || (exports.NotebookCell = {}));
var NotebookDocument;
(function (NotebookDocument) {
    function create(uri, notebookType, version, cells) {
        return { uri, notebookType, version, cells };
    }
    NotebookDocument.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.uri) && vscode_languageserver_types_1.integer.is(candidate.version) && Is.typedArray(candidate.cells, NotebookCell.is);
    }
    NotebookDocument.is = is;
})(NotebookDocument = exports.NotebookDocument || (exports.NotebookDocument = {}));
var NotebookDocumentSyncRegistrationType;
(function (NotebookDocumentSyncRegistrationType) {
    NotebookDocumentSyncRegistrationType.method = 'notebookDocument/sync';
    NotebookDocumentSyncRegistrationType.messageDirection = messages_1.MessageDirection.clientToServer;
    NotebookDocumentSyncRegistrationType.type = new messages_1.RegistrationType(NotebookDocumentSyncRegistrationType.method);
})(NotebookDocumentSyncRegistrationType = exports.NotebookDocumentSyncRegistrationType || (exports.NotebookDocumentSyncRegistrationType = {}));
/**
 * A notification sent when a notebook opens.
 *
 * @since 3.17.0
 */
var DidOpenNotebookDocumentNotification;
(function (DidOpenNotebookDocumentNotification) {
    DidOpenNotebookDocumentNotification.method = 'notebookDocument/didOpen';
    DidOpenNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidOpenNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenNotebookDocumentNotification.method);
    DidOpenNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidOpenNotebookDocumentNotification = exports.DidOpenNotebookDocumentNotification || (exports.DidOpenNotebookDocumentNotification = {}));
var NotebookCellArrayChange;
(function (NotebookCellArrayChange) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.start) && vscode_languageserver_types_1.uinteger.is(candidate.deleteCount) && (candidate.cells === undefined || Is.typedArray(candidate.cells, NotebookCell.is));
    }
    NotebookCellArrayChange.is = is;
    function create(start, deleteCount, cells) {
        const result = { start, deleteCount };
        if (cells !== undefined) {
            result.cells = cells;
        }
        return result;
    }
    NotebookCellArrayChange.create = create;
})(NotebookCellArrayChange = exports.NotebookCellArrayChange || (exports.NotebookCellArrayChange = {}));
var DidChangeNotebookDocumentNotification;
(function (DidChangeNotebookDocumentNotification) {
    DidChangeNotebookDocumentNotification.method = 'notebookDocument/didChange';
    DidChangeNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeNotebookDocumentNotification.method);
    DidChangeNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidChangeNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification || (exports.DidChangeNotebookDocumentNotification = {}));
/**
 * A notification sent when a notebook document is saved.
 *
 * @since 3.17.0
 */
var DidSaveNotebookDocumentNotification;
(function (DidSaveNotebookDocumentNotification) {
    DidSaveNotebookDocumentNotification.method = 'notebookDocument/didSave';
    DidSaveNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidSaveNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveNotebookDocumentNotification.method);
    DidSaveNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidSaveNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification || (exports.DidSaveNotebookDocumentNotification = {}));
/**
 * A notification sent when a notebook closes.
 *
 * @since 3.17.0
 */
var DidCloseNotebookDocumentNotification;
(function (DidCloseNotebookDocumentNotification) {
    DidCloseNotebookDocumentNotification.method = 'notebookDocument/didClose';
    DidCloseNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidCloseNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseNotebookDocumentNotification.method);
    DidCloseNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidCloseNotebookDocumentNotification = exports.DidCloseNotebookDocumentNotification || (exports.DidCloseNotebookDocumentNotification = {}));
//# sourceMappingURL=protocol.notebook.js.map

/***/ }),

/***/ 7895:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = void 0;
const vscode_jsonrpc_1 = __webpack_require__(5953);
const messages_1 = __webpack_require__(8599);
var WorkDoneProgress;
(function (WorkDoneProgress) {
    WorkDoneProgress.type = new vscode_jsonrpc_1.ProgressType();
    function is(value) {
        return value === WorkDoneProgress.type;
    }
    WorkDoneProgress.is = is;
})(WorkDoneProgress = exports.WorkDoneProgress || (exports.WorkDoneProgress = {}));
/**
 * The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress
 * reporting from the server.
 */
var WorkDoneProgressCreateRequest;
(function (WorkDoneProgressCreateRequest) {
    WorkDoneProgressCreateRequest.method = 'window/workDoneProgress/create';
    WorkDoneProgressCreateRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    WorkDoneProgressCreateRequest.type = new messages_1.ProtocolRequestType(WorkDoneProgressCreateRequest.method);
})(WorkDoneProgressCreateRequest = exports.WorkDoneProgressCreateRequest || (exports.WorkDoneProgressCreateRequest = {}));
/**
 * The `window/workDoneProgress/cancel` notification is sent from  the client to the server to cancel a progress
 * initiated on the server side.
 */
var WorkDoneProgressCancelNotification;
(function (WorkDoneProgressCancelNotification) {
    WorkDoneProgressCancelNotification.method = 'window/workDoneProgress/cancel';
    WorkDoneProgressCancelNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkDoneProgressCancelNotification.type = new messages_1.ProtocolNotificationType(WorkDoneProgressCancelNotification.method);
})(WorkDoneProgressCancelNotification = exports.WorkDoneProgressCancelNotification || (exports.WorkDoneProgressCancelNotification = {}));
//# sourceMappingURL=protocol.progress.js.map

/***/ }),

/***/ 2392:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectionRangeRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A request to provide selection ranges in a document. The request's
 * parameter is of type [SelectionRangeParams](#SelectionRangeParams), the
 * response is of type [SelectionRange[]](#SelectionRange[]) or a Thenable
 * that resolves to such.
 */
var SelectionRangeRequest;
(function (SelectionRangeRequest) {
    SelectionRangeRequest.method = 'textDocument/selectionRange';
    SelectionRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SelectionRangeRequest.type = new messages_1.ProtocolRequestType(SelectionRangeRequest.method);
})(SelectionRangeRequest = exports.SelectionRangeRequest || (exports.SelectionRangeRequest = {}));
//# sourceMappingURL=protocol.selectionRange.js.map

/***/ }),

/***/ 8489:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.SemanticTokensRegistrationType = exports.TokenFormat = void 0;
const messages_1 = __webpack_require__(8599);
//------- 'textDocument/semanticTokens' -----
var TokenFormat;
(function (TokenFormat) {
    TokenFormat.Relative = 'relative';
})(TokenFormat = exports.TokenFormat || (exports.TokenFormat = {}));
var SemanticTokensRegistrationType;
(function (SemanticTokensRegistrationType) {
    SemanticTokensRegistrationType.method = 'textDocument/semanticTokens';
    SemanticTokensRegistrationType.type = new messages_1.RegistrationType(SemanticTokensRegistrationType.method);
})(SemanticTokensRegistrationType = exports.SemanticTokensRegistrationType || (exports.SemanticTokensRegistrationType = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRequest;
(function (SemanticTokensRequest) {
    SemanticTokensRequest.method = 'textDocument/semanticTokens/full';
    SemanticTokensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SemanticTokensRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRequest.method);
    SemanticTokensRequest.registrationMethod = SemanticTokensRegistrationType.method;
})(SemanticTokensRequest = exports.SemanticTokensRequest || (exports.SemanticTokensRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensDeltaRequest;
(function (SemanticTokensDeltaRequest) {
    SemanticTokensDeltaRequest.method = 'textDocument/semanticTokens/full/delta';
    SemanticTokensDeltaRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SemanticTokensDeltaRequest.type = new messages_1.ProtocolRequestType(SemanticTokensDeltaRequest.method);
    SemanticTokensDeltaRequest.registrationMethod = SemanticTokensRegistrationType.method;
})(SemanticTokensDeltaRequest = exports.SemanticTokensDeltaRequest || (exports.SemanticTokensDeltaRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRangeRequest;
(function (SemanticTokensRangeRequest) {
    SemanticTokensRangeRequest.method = 'textDocument/semanticTokens/range';
    SemanticTokensRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SemanticTokensRangeRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRangeRequest.method);
    SemanticTokensRangeRequest.registrationMethod = SemanticTokensRegistrationType.method;
})(SemanticTokensRangeRequest = exports.SemanticTokensRangeRequest || (exports.SemanticTokensRangeRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRefreshRequest;
(function (SemanticTokensRefreshRequest) {
    SemanticTokensRefreshRequest.method = `workspace/semanticTokens/refresh`;
    SemanticTokensRefreshRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SemanticTokensRefreshRequest.type = new messages_1.ProtocolRequestType0(SemanticTokensRefreshRequest.method);
})(SemanticTokensRefreshRequest = exports.SemanticTokensRefreshRequest || (exports.SemanticTokensRefreshRequest = {}));
//# sourceMappingURL=protocol.semanticTokens.js.map

/***/ }),

/***/ 1541:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShowDocumentRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A request to show a document. This request might open an
 * external program depending on the value of the URI to open.
 * For example a request to open `https://code.visualstudio.com/`
 * will very likely open the URI in a WEB browser.
 *
 * @since 3.16.0
*/
var ShowDocumentRequest;
(function (ShowDocumentRequest) {
    ShowDocumentRequest.method = 'window/showDocument';
    ShowDocumentRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ShowDocumentRequest.type = new messages_1.ProtocolRequestType(ShowDocumentRequest.method);
})(ShowDocumentRequest = exports.ShowDocumentRequest || (exports.ShowDocumentRequest = {}));
//# sourceMappingURL=protocol.showDocument.js.map

/***/ }),

/***/ 8642:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeDefinitionRequest = void 0;
const messages_1 = __webpack_require__(8599);
// @ts-ignore: to avoid inlining LocatioLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositioParams]
 * (#TextDocumentPositionParams) the response is of type [Definition](#Definition) or a
 * Thenable that resolves to such.
 */
var TypeDefinitionRequest;
(function (TypeDefinitionRequest) {
    TypeDefinitionRequest.method = 'textDocument/typeDefinition';
    TypeDefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeDefinitionRequest.type = new messages_1.ProtocolRequestType(TypeDefinitionRequest.method);
})(TypeDefinitionRequest = exports.TypeDefinitionRequest || (exports.TypeDefinitionRequest = {}));
//# sourceMappingURL=protocol.typeDefinition.js.map

/***/ }),

/***/ 5318:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox, Microsoft and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeHierarchySubtypesRequest = exports.TypeHierarchySupertypesRequest = exports.TypeHierarchyPrepareRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A request to result a `TypeHierarchyItem` in a document at a given position.
 * Can be used as an input to a subtypes or supertypes type hierarchy.
 *
 * @since 3.17.0
 */
var TypeHierarchyPrepareRequest;
(function (TypeHierarchyPrepareRequest) {
    TypeHierarchyPrepareRequest.method = 'textDocument/prepareTypeHierarchy';
    TypeHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(TypeHierarchyPrepareRequest.method);
})(TypeHierarchyPrepareRequest = exports.TypeHierarchyPrepareRequest || (exports.TypeHierarchyPrepareRequest = {}));
/**
 * A request to resolve the supertypes for a given `TypeHierarchyItem`.
 *
 * @since 3.17.0
 */
var TypeHierarchySupertypesRequest;
(function (TypeHierarchySupertypesRequest) {
    TypeHierarchySupertypesRequest.method = 'typeHierarchy/supertypes';
    TypeHierarchySupertypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeHierarchySupertypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySupertypesRequest.method);
})(TypeHierarchySupertypesRequest = exports.TypeHierarchySupertypesRequest || (exports.TypeHierarchySupertypesRequest = {}));
/**
 * A request to resolve the subtypes for a given `TypeHierarchyItem`.
 *
 * @since 3.17.0
 */
var TypeHierarchySubtypesRequest;
(function (TypeHierarchySubtypesRequest) {
    TypeHierarchySubtypesRequest.method = 'typeHierarchy/subtypes';
    TypeHierarchySubtypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeHierarchySubtypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySubtypesRequest.method);
})(TypeHierarchySubtypesRequest = exports.TypeHierarchySubtypesRequest || (exports.TypeHierarchySubtypesRequest = {}));
//# sourceMappingURL=protocol.typeHierarchy.js.map

/***/ }),

/***/ 3402:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.
 */
var WorkspaceFoldersRequest;
(function (WorkspaceFoldersRequest) {
    WorkspaceFoldersRequest.method = 'workspace/workspaceFolders';
    WorkspaceFoldersRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    WorkspaceFoldersRequest.type = new messages_1.ProtocolRequestType0(WorkspaceFoldersRequest.method);
})(WorkspaceFoldersRequest = exports.WorkspaceFoldersRequest || (exports.WorkspaceFoldersRequest = {}));
/**
 * The `workspace/didChangeWorkspaceFolders` notification is sent from the client to the server when the workspace
 * folder configuration changes.
 */
var DidChangeWorkspaceFoldersNotification;
(function (DidChangeWorkspaceFoldersNotification) {
    DidChangeWorkspaceFoldersNotification.method = 'workspace/didChangeWorkspaceFolders';
    DidChangeWorkspaceFoldersNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeWorkspaceFoldersNotification.type = new messages_1.ProtocolNotificationType(DidChangeWorkspaceFoldersNotification.method);
})(DidChangeWorkspaceFoldersNotification = exports.DidChangeWorkspaceFoldersNotification || (exports.DidChangeWorkspaceFoldersNotification = {}));
//# sourceMappingURL=protocol.workspaceFolder.js.map

/***/ }),

/***/ 2523:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.objectLiteral = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;
function typedArray(value, check) {
    return Array.isArray(value) && value.every(check);
}
exports.typedArray = typedArray;
function objectLiteral(value) {
    // Strictly speaking class instances pass this check as well. Since the LSP
    // doesn't use classes we ignore this for now. If we do we need to add something
    // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
    return value !== null && typeof value === 'object';
}
exports.objectLiteral = objectLiteral;
//# sourceMappingURL=is.js.map

/***/ }),

/***/ 4767:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnnotatedTextEdit": () => (/* binding */ AnnotatedTextEdit),
/* harmony export */   "ChangeAnnotation": () => (/* binding */ ChangeAnnotation),
/* harmony export */   "ChangeAnnotationIdentifier": () => (/* binding */ ChangeAnnotationIdentifier),
/* harmony export */   "CodeAction": () => (/* binding */ CodeAction),
/* harmony export */   "CodeActionContext": () => (/* binding */ CodeActionContext),
/* harmony export */   "CodeActionKind": () => (/* binding */ CodeActionKind),
/* harmony export */   "CodeActionTriggerKind": () => (/* binding */ CodeActionTriggerKind),
/* harmony export */   "CodeDescription": () => (/* binding */ CodeDescription),
/* harmony export */   "CodeLens": () => (/* binding */ CodeLens),
/* harmony export */   "Color": () => (/* binding */ Color),
/* harmony export */   "ColorInformation": () => (/* binding */ ColorInformation),
/* harmony export */   "ColorPresentation": () => (/* binding */ ColorPresentation),
/* harmony export */   "Command": () => (/* binding */ Command),
/* harmony export */   "CompletionItem": () => (/* binding */ CompletionItem),
/* harmony export */   "CompletionItemKind": () => (/* binding */ CompletionItemKind),
/* harmony export */   "CompletionItemLabelDetails": () => (/* binding */ CompletionItemLabelDetails),
/* harmony export */   "CompletionItemTag": () => (/* binding */ CompletionItemTag),
/* harmony export */   "CompletionList": () => (/* binding */ CompletionList),
/* harmony export */   "CreateFile": () => (/* binding */ CreateFile),
/* harmony export */   "DeleteFile": () => (/* binding */ DeleteFile),
/* harmony export */   "Diagnostic": () => (/* binding */ Diagnostic),
/* harmony export */   "DiagnosticRelatedInformation": () => (/* binding */ DiagnosticRelatedInformation),
/* harmony export */   "DiagnosticSeverity": () => (/* binding */ DiagnosticSeverity),
/* harmony export */   "DiagnosticTag": () => (/* binding */ DiagnosticTag),
/* harmony export */   "DocumentHighlight": () => (/* binding */ DocumentHighlight),
/* harmony export */   "DocumentHighlightKind": () => (/* binding */ DocumentHighlightKind),
/* harmony export */   "DocumentLink": () => (/* binding */ DocumentLink),
/* harmony export */   "DocumentSymbol": () => (/* binding */ DocumentSymbol),
/* harmony export */   "DocumentUri": () => (/* binding */ DocumentUri),
/* harmony export */   "EOL": () => (/* binding */ EOL),
/* harmony export */   "FoldingRange": () => (/* binding */ FoldingRange),
/* harmony export */   "FoldingRangeKind": () => (/* binding */ FoldingRangeKind),
/* harmony export */   "FormattingOptions": () => (/* binding */ FormattingOptions),
/* harmony export */   "Hover": () => (/* binding */ Hover),
/* harmony export */   "InlayHint": () => (/* binding */ InlayHint),
/* harmony export */   "InlayHintKind": () => (/* binding */ InlayHintKind),
/* harmony export */   "InlayHintLabelPart": () => (/* binding */ InlayHintLabelPart),
/* harmony export */   "InlineValueContext": () => (/* binding */ InlineValueContext),
/* harmony export */   "InlineValueEvaluatableExpression": () => (/* binding */ InlineValueEvaluatableExpression),
/* harmony export */   "InlineValueText": () => (/* binding */ InlineValueText),
/* harmony export */   "InlineValueVariableLookup": () => (/* binding */ InlineValueVariableLookup),
/* harmony export */   "InsertReplaceEdit": () => (/* binding */ InsertReplaceEdit),
/* harmony export */   "InsertTextFormat": () => (/* binding */ InsertTextFormat),
/* harmony export */   "InsertTextMode": () => (/* binding */ InsertTextMode),
/* harmony export */   "Location": () => (/* binding */ Location),
/* harmony export */   "LocationLink": () => (/* binding */ LocationLink),
/* harmony export */   "MarkedString": () => (/* binding */ MarkedString),
/* harmony export */   "MarkupContent": () => (/* binding */ MarkupContent),
/* harmony export */   "MarkupKind": () => (/* binding */ MarkupKind),
/* harmony export */   "OptionalVersionedTextDocumentIdentifier": () => (/* binding */ OptionalVersionedTextDocumentIdentifier),
/* harmony export */   "ParameterInformation": () => (/* binding */ ParameterInformation),
/* harmony export */   "Position": () => (/* binding */ Position),
/* harmony export */   "Range": () => (/* binding */ Range),
/* harmony export */   "RenameFile": () => (/* binding */ RenameFile),
/* harmony export */   "SelectionRange": () => (/* binding */ SelectionRange),
/* harmony export */   "SemanticTokenModifiers": () => (/* binding */ SemanticTokenModifiers),
/* harmony export */   "SemanticTokenTypes": () => (/* binding */ SemanticTokenTypes),
/* harmony export */   "SemanticTokens": () => (/* binding */ SemanticTokens),
/* harmony export */   "SignatureInformation": () => (/* binding */ SignatureInformation),
/* harmony export */   "SymbolInformation": () => (/* binding */ SymbolInformation),
/* harmony export */   "SymbolKind": () => (/* binding */ SymbolKind),
/* harmony export */   "SymbolTag": () => (/* binding */ SymbolTag),
/* harmony export */   "TextDocument": () => (/* binding */ TextDocument),
/* harmony export */   "TextDocumentEdit": () => (/* binding */ TextDocumentEdit),
/* harmony export */   "TextDocumentIdentifier": () => (/* binding */ TextDocumentIdentifier),
/* harmony export */   "TextDocumentItem": () => (/* binding */ TextDocumentItem),
/* harmony export */   "TextEdit": () => (/* binding */ TextEdit),
/* harmony export */   "URI": () => (/* binding */ URI),
/* harmony export */   "VersionedTextDocumentIdentifier": () => (/* binding */ VersionedTextDocumentIdentifier),
/* harmony export */   "WorkspaceChange": () => (/* binding */ WorkspaceChange),
/* harmony export */   "WorkspaceEdit": () => (/* binding */ WorkspaceEdit),
/* harmony export */   "WorkspaceFolder": () => (/* binding */ WorkspaceFolder),
/* harmony export */   "WorkspaceSymbol": () => (/* binding */ WorkspaceSymbol),
/* harmony export */   "integer": () => (/* binding */ integer),
/* harmony export */   "uinteger": () => (/* binding */ uinteger)
/* harmony export */ });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

var DocumentUri;
(function (DocumentUri) {
    function is(value) {
        return typeof value === 'string';
    }
    DocumentUri.is = is;
})(DocumentUri || (DocumentUri = {}));
var URI;
(function (URI) {
    function is(value) {
        return typeof value === 'string';
    }
    URI.is = is;
})(URI || (URI = {}));
var integer;
(function (integer) {
    integer.MIN_VALUE = -2147483648;
    integer.MAX_VALUE = 2147483647;
    function is(value) {
        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;
    }
    integer.is = is;
})(integer || (integer = {}));
var uinteger;
(function (uinteger) {
    uinteger.MIN_VALUE = 0;
    uinteger.MAX_VALUE = 2147483647;
    function is(value) {
        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;
    }
    uinteger.is = is;
})(uinteger || (uinteger = {}));
/**
 * The Position namespace provides helper functions to work with
 * [Position](#Position) literals.
 */
var Position;
(function (Position) {
    /**
     * Creates a new Position literal from the given line and character.
     * @param line The position's line.
     * @param character The position's character.
     */
    function create(line, character) {
        if (line === Number.MAX_VALUE) {
            line = uinteger.MAX_VALUE;
        }
        if (character === Number.MAX_VALUE) {
            character = uinteger.MAX_VALUE;
        }
        return { line: line, character: character };
    }
    Position.create = create;
    /**
     * Checks whether the given literal conforms to the [Position](#Position) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
    }
    Position.is = is;
})(Position || (Position = {}));
/**
 * The Range namespace provides helper functions to work with
 * [Range](#Range) literals.
 */
var Range;
(function (Range) {
    function create(one, two, three, four) {
        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
            return { start: Position.create(one, two), end: Position.create(three, four) };
        }
        else if (Position.is(one) && Position.is(two)) {
            return { start: one, end: two };
        }
        else {
            throw new Error("Range#create called with invalid arguments[".concat(one, ", ").concat(two, ", ").concat(three, ", ").concat(four, "]"));
        }
    }
    Range.create = create;
    /**
     * Checks whether the given literal conforms to the [Range](#Range) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
    }
    Range.is = is;
})(Range || (Range = {}));
/**
 * The Location namespace provides helper functions to work with
 * [Location](#Location) literals.
 */
var Location;
(function (Location) {
    /**
     * Creates a Location literal.
     * @param uri The location's uri.
     * @param range The location's range.
     */
    function create(uri, range) {
        return { uri: uri, range: range };
    }
    Location.create = create;
    /**
     * Checks whether the given literal conforms to the [Location](#Location) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
    }
    Location.is = is;
})(Location || (Location = {}));
/**
 * The LocationLink namespace provides helper functions to work with
 * [LocationLink](#LocationLink) literals.
 */
var LocationLink;
(function (LocationLink) {
    /**
     * Creates a LocationLink literal.
     * @param targetUri The definition's uri.
     * @param targetRange The full range of the definition.
     * @param targetSelectionRange The span of the symbol definition at the target.
     * @param originSelectionRange The span of the symbol being defined in the originating source file.
     */
    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
        return { targetUri: targetUri, targetRange: targetRange, targetSelectionRange: targetSelectionRange, originSelectionRange: originSelectionRange };
    }
    LocationLink.create = create;
    /**
     * Checks whether the given literal conforms to the [LocationLink](#LocationLink) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)
            && Range.is(candidate.targetSelectionRange)
            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
    }
    LocationLink.is = is;
})(LocationLink || (LocationLink = {}));
/**
 * The Color namespace provides helper functions to work with
 * [Color](#Color) literals.
 */
var Color;
(function (Color) {
    /**
     * Creates a new Color literal.
     */
    function create(red, green, blue, alpha) {
        return {
            red: red,
            green: green,
            blue: blue,
            alpha: alpha,
        };
    }
    Color.create = create;
    /**
     * Checks whether the given literal conforms to the [Color](#Color) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)
            && Is.numberRange(candidate.green, 0, 1)
            && Is.numberRange(candidate.blue, 0, 1)
            && Is.numberRange(candidate.alpha, 0, 1);
    }
    Color.is = is;
})(Color || (Color = {}));
/**
 * The ColorInformation namespace provides helper functions to work with
 * [ColorInformation](#ColorInformation) literals.
 */
var ColorInformation;
(function (ColorInformation) {
    /**
     * Creates a new ColorInformation literal.
     */
    function create(range, color) {
        return {
            range: range,
            color: color,
        };
    }
    ColorInformation.create = create;
    /**
     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);
    }
    ColorInformation.is = is;
})(ColorInformation || (ColorInformation = {}));
/**
 * The Color namespace provides helper functions to work with
 * [ColorPresentation](#ColorPresentation) literals.
 */
var ColorPresentation;
(function (ColorPresentation) {
    /**
     * Creates a new ColorInformation literal.
     */
    function create(label, textEdit, additionalTextEdits) {
        return {
            label: label,
            textEdit: textEdit,
            additionalTextEdits: additionalTextEdits,
        };
    }
    ColorPresentation.create = create;
    /**
     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label)
            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))
            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
    }
    ColorPresentation.is = is;
})(ColorPresentation || (ColorPresentation = {}));
/**
 * A set of predefined range kinds.
 */
var FoldingRangeKind;
(function (FoldingRangeKind) {
    /**
     * Folding range for a comment
     */
    FoldingRangeKind.Comment = 'comment';
    /**
     * Folding range for an import or include
     */
    FoldingRangeKind.Imports = 'imports';
    /**
     * Folding range for a region (e.g. `#region`)
     */
    FoldingRangeKind.Region = 'region';
})(FoldingRangeKind || (FoldingRangeKind = {}));
/**
 * The folding range namespace provides helper functions to work with
 * [FoldingRange](#FoldingRange) literals.
 */
var FoldingRange;
(function (FoldingRange) {
    /**
     * Creates a new FoldingRange literal.
     */
    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {
        var result = {
            startLine: startLine,
            endLine: endLine
        };
        if (Is.defined(startCharacter)) {
            result.startCharacter = startCharacter;
        }
        if (Is.defined(endCharacter)) {
            result.endCharacter = endCharacter;
        }
        if (Is.defined(kind)) {
            result.kind = kind;
        }
        if (Is.defined(collapsedText)) {
            result.collapsedText = collapsedText;
        }
        return result;
    }
    FoldingRange.create = create;
    /**
     * Checks whether the given literal conforms to the [FoldingRange](#FoldingRange) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)
            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))
            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))
            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
    }
    FoldingRange.is = is;
})(FoldingRange || (FoldingRange = {}));
/**
 * The DiagnosticRelatedInformation namespace provides helper functions to work with
 * [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) literals.
 */
var DiagnosticRelatedInformation;
(function (DiagnosticRelatedInformation) {
    /**
     * Creates a new DiagnosticRelatedInformation literal.
     */
    function create(location, message) {
        return {
            location: location,
            message: message
        };
    }
    DiagnosticRelatedInformation.create = create;
    /**
     * Checks whether the given literal conforms to the [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
    }
    DiagnosticRelatedInformation.is = is;
})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));
/**
 * The diagnostic's severity.
 */
var DiagnosticSeverity;
(function (DiagnosticSeverity) {
    /**
     * Reports an error.
     */
    DiagnosticSeverity.Error = 1;
    /**
     * Reports a warning.
     */
    DiagnosticSeverity.Warning = 2;
    /**
     * Reports an information.
     */
    DiagnosticSeverity.Information = 3;
    /**
     * Reports a hint.
     */
    DiagnosticSeverity.Hint = 4;
})(DiagnosticSeverity || (DiagnosticSeverity = {}));
/**
 * The diagnostic tags.
 *
 * @since 3.15.0
 */
var DiagnosticTag;
(function (DiagnosticTag) {
    /**
     * Unused or unnecessary code.
     *
     * Clients are allowed to render diagnostics with this tag faded out instead of having
     * an error squiggle.
     */
    DiagnosticTag.Unnecessary = 1;
    /**
     * Deprecated or obsolete code.
     *
     * Clients are allowed to rendered diagnostics with this tag strike through.
     */
    DiagnosticTag.Deprecated = 2;
})(DiagnosticTag || (DiagnosticTag = {}));
/**
 * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.
 *
 * @since 3.16.0
 */
var CodeDescription;
(function (CodeDescription) {
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.href);
    }
    CodeDescription.is = is;
})(CodeDescription || (CodeDescription = {}));
/**
 * The Diagnostic namespace provides helper functions to work with
 * [Diagnostic](#Diagnostic) literals.
 */
var Diagnostic;
(function (Diagnostic) {
    /**
     * Creates a new Diagnostic literal.
     */
    function create(range, message, severity, code, source, relatedInformation) {
        var result = { range: range, message: message };
        if (Is.defined(severity)) {
            result.severity = severity;
        }
        if (Is.defined(code)) {
            result.code = code;
        }
        if (Is.defined(source)) {
            result.source = source;
        }
        if (Is.defined(relatedInformation)) {
            result.relatedInformation = relatedInformation;
        }
        return result;
    }
    Diagnostic.create = create;
    /**
     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.
     */
    function is(value) {
        var _a;
        var candidate = value;
        return Is.defined(candidate)
            && Range.is(candidate.range)
            && Is.string(candidate.message)
            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))
            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))
            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))
            && (Is.string(candidate.source) || Is.undefined(candidate.source))
            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
    }
    Diagnostic.is = is;
})(Diagnostic || (Diagnostic = {}));
/**
 * The Command namespace provides helper functions to work with
 * [Command](#Command) literals.
 */
var Command;
(function (Command) {
    /**
     * Creates a new Command literal.
     */
    function create(title, command) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var result = { title: title, command: command };
        if (Is.defined(args) && args.length > 0) {
            result.arguments = args;
        }
        return result;
    }
    Command.create = create;
    /**
     * Checks whether the given literal conforms to the [Command](#Command) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
    }
    Command.is = is;
})(Command || (Command = {}));
/**
 * The TextEdit namespace provides helper function to create replace,
 * insert and delete edits more easily.
 */
var TextEdit;
(function (TextEdit) {
    /**
     * Creates a replace text edit.
     * @param range The range of text to be replaced.
     * @param newText The new text.
     */
    function replace(range, newText) {
        return { range: range, newText: newText };
    }
    TextEdit.replace = replace;
    /**
     * Creates an insert text edit.
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     */
    function insert(position, newText) {
        return { range: { start: position, end: position }, newText: newText };
    }
    TextEdit.insert = insert;
    /**
     * Creates a delete text edit.
     * @param range The range of text to be deleted.
     */
    function del(range) {
        return { range: range, newText: '' };
    }
    TextEdit.del = del;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate)
            && Is.string(candidate.newText)
            && Range.is(candidate.range);
    }
    TextEdit.is = is;
})(TextEdit || (TextEdit = {}));
var ChangeAnnotation;
(function (ChangeAnnotation) {
    function create(label, needsConfirmation, description) {
        var result = { label: label };
        if (needsConfirmation !== undefined) {
            result.needsConfirmation = needsConfirmation;
        }
        if (description !== undefined) {
            result.description = description;
        }
        return result;
    }
    ChangeAnnotation.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label) &&
            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&
            (Is.string(candidate.description) || candidate.description === undefined);
    }
    ChangeAnnotation.is = is;
})(ChangeAnnotation || (ChangeAnnotation = {}));
var ChangeAnnotationIdentifier;
(function (ChangeAnnotationIdentifier) {
    function is(value) {
        var candidate = value;
        return Is.string(candidate);
    }
    ChangeAnnotationIdentifier.is = is;
})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));
var AnnotatedTextEdit;
(function (AnnotatedTextEdit) {
    /**
     * Creates an annotated replace text edit.
     *
     * @param range The range of text to be replaced.
     * @param newText The new text.
     * @param annotation The annotation.
     */
    function replace(range, newText, annotation) {
        return { range: range, newText: newText, annotationId: annotation };
    }
    AnnotatedTextEdit.replace = replace;
    /**
     * Creates an annotated insert text edit.
     *
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     * @param annotation The annotation.
     */
    function insert(position, newText, annotation) {
        return { range: { start: position, end: position }, newText: newText, annotationId: annotation };
    }
    AnnotatedTextEdit.insert = insert;
    /**
     * Creates an annotated delete text edit.
     *
     * @param range The range of text to be deleted.
     * @param annotation The annotation.
     */
    function del(range, annotation) {
        return { range: range, newText: '', annotationId: annotation };
    }
    AnnotatedTextEdit.del = del;
    function is(value) {
        var candidate = value;
        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    AnnotatedTextEdit.is = is;
})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));
/**
 * The TextDocumentEdit namespace provides helper function to create
 * an edit that manipulates a text document.
 */
var TextDocumentEdit;
(function (TextDocumentEdit) {
    /**
     * Creates a new `TextDocumentEdit`
     */
    function create(textDocument, edits) {
        return { textDocument: textDocument, edits: edits };
    }
    TextDocumentEdit.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate)
            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)
            && Array.isArray(candidate.edits);
    }
    TextDocumentEdit.is = is;
})(TextDocumentEdit || (TextDocumentEdit = {}));
var CreateFile;
(function (CreateFile) {
    function create(uri, options, annotation) {
        var result = {
            kind: 'create',
            uri: uri
        };
        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    CreateFile.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||
            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    CreateFile.is = is;
})(CreateFile || (CreateFile = {}));
var RenameFile;
(function (RenameFile) {
    function create(oldUri, newUri, options, annotation) {
        var result = {
            kind: 'rename',
            oldUri: oldUri,
            newUri: newUri
        };
        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    RenameFile.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||
            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    RenameFile.is = is;
})(RenameFile || (RenameFile = {}));
var DeleteFile;
(function (DeleteFile) {
    function create(uri, options, annotation) {
        var result = {
            kind: 'delete',
            uri: uri
        };
        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    DeleteFile.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||
            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    DeleteFile.is = is;
})(DeleteFile || (DeleteFile = {}));
var WorkspaceEdit;
(function (WorkspaceEdit) {
    function is(value) {
        var candidate = value;
        return candidate &&
            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&
            (candidate.documentChanges === undefined || candidate.documentChanges.every(function (change) {
                if (Is.string(change.kind)) {
                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
                }
                else {
                    return TextDocumentEdit.is(change);
                }
            }));
    }
    WorkspaceEdit.is = is;
})(WorkspaceEdit || (WorkspaceEdit = {}));
var TextEditChangeImpl = /** @class */ (function () {
    function TextEditChangeImpl(edits, changeAnnotations) {
        this.edits = edits;
        this.changeAnnotations = changeAnnotations;
    }
    TextEditChangeImpl.prototype.insert = function (position, newText, annotation) {
        var edit;
        var id;
        if (annotation === undefined) {
            edit = TextEdit.insert(position, newText);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.insert(position, newText, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.insert(position, newText, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    };
    TextEditChangeImpl.prototype.replace = function (range, newText, annotation) {
        var edit;
        var id;
        if (annotation === undefined) {
            edit = TextEdit.replace(range, newText);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.replace(range, newText, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.replace(range, newText, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    };
    TextEditChangeImpl.prototype.delete = function (range, annotation) {
        var edit;
        var id;
        if (annotation === undefined) {
            edit = TextEdit.del(range);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.del(range, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.del(range, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    };
    TextEditChangeImpl.prototype.add = function (edit) {
        this.edits.push(edit);
    };
    TextEditChangeImpl.prototype.all = function () {
        return this.edits;
    };
    TextEditChangeImpl.prototype.clear = function () {
        this.edits.splice(0, this.edits.length);
    };
    TextEditChangeImpl.prototype.assertChangeAnnotations = function (value) {
        if (value === undefined) {
            throw new Error("Text edit change is not configured to manage change annotations.");
        }
    };
    return TextEditChangeImpl;
}());
/**
 * A helper class
 */
var ChangeAnnotations = /** @class */ (function () {
    function ChangeAnnotations(annotations) {
        this._annotations = annotations === undefined ? Object.create(null) : annotations;
        this._counter = 0;
        this._size = 0;
    }
    ChangeAnnotations.prototype.all = function () {
        return this._annotations;
    };
    Object.defineProperty(ChangeAnnotations.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: false,
        configurable: true
    });
    ChangeAnnotations.prototype.manage = function (idOrAnnotation, annotation) {
        var id;
        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {
            id = idOrAnnotation;
        }
        else {
            id = this.nextId();
            annotation = idOrAnnotation;
        }
        if (this._annotations[id] !== undefined) {
            throw new Error("Id ".concat(id, " is already in use."));
        }
        if (annotation === undefined) {
            throw new Error("No annotation provided for id ".concat(id));
        }
        this._annotations[id] = annotation;
        this._size++;
        return id;
    };
    ChangeAnnotations.prototype.nextId = function () {
        this._counter++;
        return this._counter.toString();
    };
    return ChangeAnnotations;
}());
/**
 * A workspace change helps constructing changes to a workspace.
 */
var WorkspaceChange = /** @class */ (function () {
    function WorkspaceChange(workspaceEdit) {
        var _this = this;
        this._textEditChanges = Object.create(null);
        if (workspaceEdit !== undefined) {
            this._workspaceEdit = workspaceEdit;
            if (workspaceEdit.documentChanges) {
                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);
                workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                workspaceEdit.documentChanges.forEach(function (change) {
                    if (TextDocumentEdit.is(change)) {
                        var textEditChange = new TextEditChangeImpl(change.edits, _this._changeAnnotations);
                        _this._textEditChanges[change.textDocument.uri] = textEditChange;
                    }
                });
            }
            else if (workspaceEdit.changes) {
                Object.keys(workspaceEdit.changes).forEach(function (key) {
                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
                    _this._textEditChanges[key] = textEditChange;
                });
            }
        }
        else {
            this._workspaceEdit = {};
        }
    }
    Object.defineProperty(WorkspaceChange.prototype, "edit", {
        /**
         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal
         * use to be returned from a workspace edit operation like rename.
         */
        get: function () {
            this.initDocumentChanges();
            if (this._changeAnnotations !== undefined) {
                if (this._changeAnnotations.size === 0) {
                    this._workspaceEdit.changeAnnotations = undefined;
                }
                else {
                    this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                }
            }
            return this._workspaceEdit;
        },
        enumerable: false,
        configurable: true
    });
    WorkspaceChange.prototype.getTextEditChange = function (key) {
        if (OptionalVersionedTextDocumentIdentifier.is(key)) {
            this.initDocumentChanges();
            if (this._workspaceEdit.documentChanges === undefined) {
                throw new Error('Workspace edit is not configured for document changes.');
            }
            var textDocument = { uri: key.uri, version: key.version };
            var result = this._textEditChanges[textDocument.uri];
            if (!result) {
                var edits = [];
                var textDocumentEdit = {
                    textDocument: textDocument,
                    edits: edits
                };
                this._workspaceEdit.documentChanges.push(textDocumentEdit);
                result = new TextEditChangeImpl(edits, this._changeAnnotations);
                this._textEditChanges[textDocument.uri] = result;
            }
            return result;
        }
        else {
            this.initChanges();
            if (this._workspaceEdit.changes === undefined) {
                throw new Error('Workspace edit is not configured for normal text edit changes.');
            }
            var result = this._textEditChanges[key];
            if (!result) {
                var edits = [];
                this._workspaceEdit.changes[key] = edits;
                result = new TextEditChangeImpl(edits);
                this._textEditChanges[key] = result;
            }
            return result;
        }
    };
    WorkspaceChange.prototype.initDocumentChanges = function () {
        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
            this._changeAnnotations = new ChangeAnnotations();
            this._workspaceEdit.documentChanges = [];
            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
        }
    };
    WorkspaceChange.prototype.initChanges = function () {
        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
            this._workspaceEdit.changes = Object.create(null);
        }
    };
    WorkspaceChange.prototype.createFile = function (uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === undefined) {
            operation = CreateFile.create(uri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = CreateFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    };
    WorkspaceChange.prototype.renameFile = function (oldUri, newUri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === undefined) {
            operation = RenameFile.create(oldUri, newUri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = RenameFile.create(oldUri, newUri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    };
    WorkspaceChange.prototype.deleteFile = function (uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === undefined) {
            operation = DeleteFile.create(uri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = DeleteFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    };
    return WorkspaceChange;
}());

/**
 * The TextDocumentIdentifier namespace provides helper functions to work with
 * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.
 */
var TextDocumentIdentifier;
(function (TextDocumentIdentifier) {
    /**
     * Creates a new TextDocumentIdentifier literal.
     * @param uri The document's uri.
     */
    function create(uri) {
        return { uri: uri };
    }
    TextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri);
    }
    TextDocumentIdentifier.is = is;
})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));
/**
 * The VersionedTextDocumentIdentifier namespace provides helper functions to work with
 * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.
 */
var VersionedTextDocumentIdentifier;
(function (VersionedTextDocumentIdentifier) {
    /**
     * Creates a new VersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */
    function create(uri, version) {
        return { uri: uri, version: version };
    }
    VersionedTextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
    }
    VersionedTextDocumentIdentifier.is = is;
})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));
/**
 * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with
 * [OptionalVersionedTextDocumentIdentifier](#OptionalVersionedTextDocumentIdentifier) literals.
 */
var OptionalVersionedTextDocumentIdentifier;
(function (OptionalVersionedTextDocumentIdentifier) {
    /**
     * Creates a new OptionalVersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */
    function create(uri, version) {
        return { uri: uri, version: version };
    }
    OptionalVersionedTextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the [OptionalVersionedTextDocumentIdentifier](#OptionalVersionedTextDocumentIdentifier) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
    }
    OptionalVersionedTextDocumentIdentifier.is = is;
})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));
/**
 * The TextDocumentItem namespace provides helper functions to work with
 * [TextDocumentItem](#TextDocumentItem) literals.
 */
var TextDocumentItem;
(function (TextDocumentItem) {
    /**
     * Creates a new TextDocumentItem literal.
     * @param uri The document's uri.
     * @param languageId The document's language identifier.
     * @param version The document's version number.
     * @param text The document's text.
     */
    function create(uri, languageId, version, text) {
        return { uri: uri, languageId: languageId, version: version, text: text };
    }
    TextDocumentItem.create = create;
    /**
     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
    }
    TextDocumentItem.is = is;
})(TextDocumentItem || (TextDocumentItem = {}));
/**
 * Describes the content type that a client supports in various
 * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
 *
 * Please note that `MarkupKinds` must not start with a `$`. This kinds
 * are reserved for internal usage.
 */
var MarkupKind;
(function (MarkupKind) {
    /**
     * Plain text is supported as a content format
     */
    MarkupKind.PlainText = 'plaintext';
    /**
     * Markdown is supported as a content format
     */
    MarkupKind.Markdown = 'markdown';
    /**
     * Checks whether the given value is a value of the [MarkupKind](#MarkupKind) type.
     */
    function is(value) {
        var candidate = value;
        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;
    }
    MarkupKind.is = is;
})(MarkupKind || (MarkupKind = {}));
var MarkupContent;
(function (MarkupContent) {
    /**
     * Checks whether the given value conforms to the [MarkupContent](#MarkupContent) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
    }
    MarkupContent.is = is;
})(MarkupContent || (MarkupContent = {}));
/**
 * The kind of a completion entry.
 */
var CompletionItemKind;
(function (CompletionItemKind) {
    CompletionItemKind.Text = 1;
    CompletionItemKind.Method = 2;
    CompletionItemKind.Function = 3;
    CompletionItemKind.Constructor = 4;
    CompletionItemKind.Field = 5;
    CompletionItemKind.Variable = 6;
    CompletionItemKind.Class = 7;
    CompletionItemKind.Interface = 8;
    CompletionItemKind.Module = 9;
    CompletionItemKind.Property = 10;
    CompletionItemKind.Unit = 11;
    CompletionItemKind.Value = 12;
    CompletionItemKind.Enum = 13;
    CompletionItemKind.Keyword = 14;
    CompletionItemKind.Snippet = 15;
    CompletionItemKind.Color = 16;
    CompletionItemKind.File = 17;
    CompletionItemKind.Reference = 18;
    CompletionItemKind.Folder = 19;
    CompletionItemKind.EnumMember = 20;
    CompletionItemKind.Constant = 21;
    CompletionItemKind.Struct = 22;
    CompletionItemKind.Event = 23;
    CompletionItemKind.Operator = 24;
    CompletionItemKind.TypeParameter = 25;
})(CompletionItemKind || (CompletionItemKind = {}));
/**
 * Defines whether the insert text in a completion item should be interpreted as
 * plain text or a snippet.
 */
var InsertTextFormat;
(function (InsertTextFormat) {
    /**
     * The primary text to be inserted is treated as a plain string.
     */
    InsertTextFormat.PlainText = 1;
    /**
     * The primary text to be inserted is treated as a snippet.
     *
     * A snippet can define tab stops and placeholders with `$1`, `$2`
     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to
     * the end of the snippet. Placeholders with equal identifiers are linked,
     * that is typing in one will update others too.
     *
     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax
     */
    InsertTextFormat.Snippet = 2;
})(InsertTextFormat || (InsertTextFormat = {}));
/**
 * Completion item tags are extra annotations that tweak the rendering of a completion
 * item.
 *
 * @since 3.15.0
 */
var CompletionItemTag;
(function (CompletionItemTag) {
    /**
     * Render a completion as obsolete, usually using a strike-out.
     */
    CompletionItemTag.Deprecated = 1;
})(CompletionItemTag || (CompletionItemTag = {}));
/**
 * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.
 *
 * @since 3.16.0
 */
var InsertReplaceEdit;
(function (InsertReplaceEdit) {
    /**
     * Creates a new insert / replace edit
     */
    function create(newText, insert, replace) {
        return { newText: newText, insert: insert, replace: replace };
    }
    InsertReplaceEdit.create = create;
    /**
     * Checks whether the given literal conforms to the [InsertReplaceEdit](#InsertReplaceEdit) interface.
     */
    function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);
    }
    InsertReplaceEdit.is = is;
})(InsertReplaceEdit || (InsertReplaceEdit = {}));
/**
 * How whitespace and indentation is handled during completion
 * item insertion.
 *
 * @since 3.16.0
 */
var InsertTextMode;
(function (InsertTextMode) {
    /**
     * The insertion or replace strings is taken as it is. If the
     * value is multi line the lines below the cursor will be
     * inserted using the indentation defined in the string value.
     * The client will not apply any kind of adjustments to the
     * string.
     */
    InsertTextMode.asIs = 1;
    /**
     * The editor adjusts leading whitespace of new lines so that
     * they match the indentation up to the cursor of the line for
     * which the item is accepted.
     *
     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a
     * multi line completion item is indented using 2 tabs and all
     * following lines inserted will be indented using 2 tabs as well.
     */
    InsertTextMode.adjustIndentation = 2;
})(InsertTextMode || (InsertTextMode = {}));
var CompletionItemLabelDetails;
(function (CompletionItemLabelDetails) {
    function is(value) {
        var candidate = value;
        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&
            (Is.string(candidate.description) || candidate.description === undefined);
    }
    CompletionItemLabelDetails.is = is;
})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));
/**
 * The CompletionItem namespace provides functions to deal with
 * completion items.
 */
var CompletionItem;
(function (CompletionItem) {
    /**
     * Create a completion item and seed it with a label.
     * @param label The completion item's label
     */
    function create(label) {
        return { label: label };
    }
    CompletionItem.create = create;
})(CompletionItem || (CompletionItem = {}));
/**
 * The CompletionList namespace provides functions to deal with
 * completion lists.
 */
var CompletionList;
(function (CompletionList) {
    /**
     * Creates a new completion list.
     *
     * @param items The completion items.
     * @param isIncomplete The list is not complete.
     */
    function create(items, isIncomplete) {
        return { items: items ? items : [], isIncomplete: !!isIncomplete };
    }
    CompletionList.create = create;
})(CompletionList || (CompletionList = {}));
var MarkedString;
(function (MarkedString) {
    /**
     * Creates a marked string from plain text.
     *
     * @param plainText The plain text.
     */
    function fromPlainText(plainText) {
        return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, '\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
    }
    MarkedString.fromPlainText = fromPlainText;
    /**
     * Checks whether the given value conforms to the [MarkedString](#MarkedString) type.
     */
    function is(value) {
        var candidate = value;
        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));
    }
    MarkedString.is = is;
})(MarkedString || (MarkedString = {}));
var Hover;
(function (Hover) {
    /**
     * Checks whether the given value conforms to the [Hover](#Hover) interface.
     */
    function is(value) {
        var candidate = value;
        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||
            MarkedString.is(candidate.contents) ||
            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));
    }
    Hover.is = is;
})(Hover || (Hover = {}));
/**
 * The ParameterInformation namespace provides helper functions to work with
 * [ParameterInformation](#ParameterInformation) literals.
 */
var ParameterInformation;
(function (ParameterInformation) {
    /**
     * Creates a new parameter information literal.
     *
     * @param label A label string.
     * @param documentation A doc string.
     */
    function create(label, documentation) {
        return documentation ? { label: label, documentation: documentation } : { label: label };
    }
    ParameterInformation.create = create;
})(ParameterInformation || (ParameterInformation = {}));
/**
 * The SignatureInformation namespace provides helper functions to work with
 * [SignatureInformation](#SignatureInformation) literals.
 */
var SignatureInformation;
(function (SignatureInformation) {
    function create(label, documentation) {
        var parameters = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            parameters[_i - 2] = arguments[_i];
        }
        var result = { label: label };
        if (Is.defined(documentation)) {
            result.documentation = documentation;
        }
        if (Is.defined(parameters)) {
            result.parameters = parameters;
        }
        else {
            result.parameters = [];
        }
        return result;
    }
    SignatureInformation.create = create;
})(SignatureInformation || (SignatureInformation = {}));
/**
 * A document highlight kind.
 */
var DocumentHighlightKind;
(function (DocumentHighlightKind) {
    /**
     * A textual occurrence.
     */
    DocumentHighlightKind.Text = 1;
    /**
     * Read-access of a symbol, like reading a variable.
     */
    DocumentHighlightKind.Read = 2;
    /**
     * Write-access of a symbol, like writing to a variable.
     */
    DocumentHighlightKind.Write = 3;
})(DocumentHighlightKind || (DocumentHighlightKind = {}));
/**
 * DocumentHighlight namespace to provide helper functions to work with
 * [DocumentHighlight](#DocumentHighlight) literals.
 */
var DocumentHighlight;
(function (DocumentHighlight) {
    /**
     * Create a DocumentHighlight object.
     * @param range The range the highlight applies to.
     * @param kind The highlight kind
     */
    function create(range, kind) {
        var result = { range: range };
        if (Is.number(kind)) {
            result.kind = kind;
        }
        return result;
    }
    DocumentHighlight.create = create;
})(DocumentHighlight || (DocumentHighlight = {}));
/**
 * A symbol kind.
 */
var SymbolKind;
(function (SymbolKind) {
    SymbolKind.File = 1;
    SymbolKind.Module = 2;
    SymbolKind.Namespace = 3;
    SymbolKind.Package = 4;
    SymbolKind.Class = 5;
    SymbolKind.Method = 6;
    SymbolKind.Property = 7;
    SymbolKind.Field = 8;
    SymbolKind.Constructor = 9;
    SymbolKind.Enum = 10;
    SymbolKind.Interface = 11;
    SymbolKind.Function = 12;
    SymbolKind.Variable = 13;
    SymbolKind.Constant = 14;
    SymbolKind.String = 15;
    SymbolKind.Number = 16;
    SymbolKind.Boolean = 17;
    SymbolKind.Array = 18;
    SymbolKind.Object = 19;
    SymbolKind.Key = 20;
    SymbolKind.Null = 21;
    SymbolKind.EnumMember = 22;
    SymbolKind.Struct = 23;
    SymbolKind.Event = 24;
    SymbolKind.Operator = 25;
    SymbolKind.TypeParameter = 26;
})(SymbolKind || (SymbolKind = {}));
/**
 * Symbol tags are extra annotations that tweak the rendering of a symbol.
 *
 * @since 3.16
 */
var SymbolTag;
(function (SymbolTag) {
    /**
     * Render a symbol as obsolete, usually using a strike-out.
     */
    SymbolTag.Deprecated = 1;
})(SymbolTag || (SymbolTag = {}));
var SymbolInformation;
(function (SymbolInformation) {
    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the location of the symbol.
     * @param uri The resource of the location of symbol.
     * @param containerName The name of the symbol containing the symbol.
     */
    function create(name, kind, range, uri, containerName) {
        var result = {
            name: name,
            kind: kind,
            location: { uri: uri, range: range }
        };
        if (containerName) {
            result.containerName = containerName;
        }
        return result;
    }
    SymbolInformation.create = create;
})(SymbolInformation || (SymbolInformation = {}));
var WorkspaceSymbol;
(function (WorkspaceSymbol) {
    /**
     * Create a new workspace symbol.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param uri The resource of the location of the symbol.
     * @param range An options range of the location.
     * @returns A WorkspaceSymbol.
     */
    function create(name, kind, uri, range) {
        return range !== undefined
            ? { name: name, kind: kind, location: { uri: uri, range: range } }
            : { name: name, kind: kind, location: { uri: uri } };
    }
    WorkspaceSymbol.create = create;
})(WorkspaceSymbol || (WorkspaceSymbol = {}));
var DocumentSymbol;
(function (DocumentSymbol) {
    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param detail The detail of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the symbol.
     * @param selectionRange The selectionRange of the symbol.
     * @param children Children of the symbol.
     */
    function create(name, detail, kind, range, selectionRange, children) {
        var result = {
            name: name,
            detail: detail,
            kind: kind,
            range: range,
            selectionRange: selectionRange
        };
        if (children !== undefined) {
            result.children = children;
        }
        return result;
    }
    DocumentSymbol.create = create;
    /**
     * Checks whether the given literal conforms to the [DocumentSymbol](#DocumentSymbol) interface.
     */
    function is(value) {
        var candidate = value;
        return candidate &&
            Is.string(candidate.name) && Is.number(candidate.kind) &&
            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&
            (candidate.detail === undefined || Is.string(candidate.detail)) &&
            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&
            (candidate.children === undefined || Array.isArray(candidate.children)) &&
            (candidate.tags === undefined || Array.isArray(candidate.tags));
    }
    DocumentSymbol.is = is;
})(DocumentSymbol || (DocumentSymbol = {}));
/**
 * A set of predefined code action kinds
 */
var CodeActionKind;
(function (CodeActionKind) {
    /**
     * Empty kind.
     */
    CodeActionKind.Empty = '';
    /**
     * Base kind for quickfix actions: 'quickfix'
     */
    CodeActionKind.QuickFix = 'quickfix';
    /**
     * Base kind for refactoring actions: 'refactor'
     */
    CodeActionKind.Refactor = 'refactor';
    /**
     * Base kind for refactoring extraction actions: 'refactor.extract'
     *
     * Example extract actions:
     *
     * - Extract method
     * - Extract function
     * - Extract variable
     * - Extract interface from class
     * - ...
     */
    CodeActionKind.RefactorExtract = 'refactor.extract';
    /**
     * Base kind for refactoring inline actions: 'refactor.inline'
     *
     * Example inline actions:
     *
     * - Inline function
     * - Inline variable
     * - Inline constant
     * - ...
     */
    CodeActionKind.RefactorInline = 'refactor.inline';
    /**
     * Base kind for refactoring rewrite actions: 'refactor.rewrite'
     *
     * Example rewrite actions:
     *
     * - Convert JavaScript function to class
     * - Add or remove parameter
     * - Encapsulate field
     * - Make method static
     * - Move method to base class
     * - ...
     */
    CodeActionKind.RefactorRewrite = 'refactor.rewrite';
    /**
     * Base kind for source actions: `source`
     *
     * Source code actions apply to the entire file.
     */
    CodeActionKind.Source = 'source';
    /**
     * Base kind for an organize imports source action: `source.organizeImports`
     */
    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';
    /**
     * Base kind for auto-fix source actions: `source.fixAll`.
     *
     * Fix all actions automatically fix errors that have a clear fix that do not require user input.
     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.
     *
     * @since 3.15.0
     */
    CodeActionKind.SourceFixAll = 'source.fixAll';
})(CodeActionKind || (CodeActionKind = {}));
/**
 * The reason why code actions were requested.
 *
 * @since 3.17.0
 */
var CodeActionTriggerKind;
(function (CodeActionTriggerKind) {
    /**
     * Code actions were explicitly requested by the user or by an extension.
     */
    CodeActionTriggerKind.Invoked = 1;
    /**
     * Code actions were requested automatically.
     *
     * This typically happens when current selection in a file changes, but can
     * also be triggered when file content changes.
     */
    CodeActionTriggerKind.Automatic = 2;
})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));
/**
 * The CodeActionContext namespace provides helper functions to work with
 * [CodeActionContext](#CodeActionContext) literals.
 */
var CodeActionContext;
(function (CodeActionContext) {
    /**
     * Creates a new CodeActionContext literal.
     */
    function create(diagnostics, only, triggerKind) {
        var result = { diagnostics: diagnostics };
        if (only !== undefined && only !== null) {
            result.only = only;
        }
        if (triggerKind !== undefined && triggerKind !== null) {
            result.triggerKind = triggerKind;
        }
        return result;
    }
    CodeActionContext.create = create;
    /**
     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)
            && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))
            && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
    }
    CodeActionContext.is = is;
})(CodeActionContext || (CodeActionContext = {}));
var CodeAction;
(function (CodeAction) {
    function create(title, kindOrCommandOrEdit, kind) {
        var result = { title: title };
        var checkKind = true;
        if (typeof kindOrCommandOrEdit === 'string') {
            checkKind = false;
            result.kind = kindOrCommandOrEdit;
        }
        else if (Command.is(kindOrCommandOrEdit)) {
            result.command = kindOrCommandOrEdit;
        }
        else {
            result.edit = kindOrCommandOrEdit;
        }
        if (checkKind && kind !== undefined) {
            result.kind = kind;
        }
        return result;
    }
    CodeAction.create = create;
    function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.title) &&
            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&
            (candidate.kind === undefined || Is.string(candidate.kind)) &&
            (candidate.edit !== undefined || candidate.command !== undefined) &&
            (candidate.command === undefined || Command.is(candidate.command)) &&
            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&
            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));
    }
    CodeAction.is = is;
})(CodeAction || (CodeAction = {}));
/**
 * The CodeLens namespace provides helper functions to work with
 * [CodeLens](#CodeLens) literals.
 */
var CodeLens;
(function (CodeLens) {
    /**
     * Creates a new CodeLens literal.
     */
    function create(range, data) {
        var result = { range: range };
        if (Is.defined(data)) {
            result.data = data;
        }
        return result;
    }
    CodeLens.create = create;
    /**
     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
    }
    CodeLens.is = is;
})(CodeLens || (CodeLens = {}));
/**
 * The FormattingOptions namespace provides helper functions to work with
 * [FormattingOptions](#FormattingOptions) literals.
 */
var FormattingOptions;
(function (FormattingOptions) {
    /**
     * Creates a new FormattingOptions literal.
     */
    function create(tabSize, insertSpaces) {
        return { tabSize: tabSize, insertSpaces: insertSpaces };
    }
    FormattingOptions.create = create;
    /**
     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
    }
    FormattingOptions.is = is;
})(FormattingOptions || (FormattingOptions = {}));
/**
 * The DocumentLink namespace provides helper functions to work with
 * [DocumentLink](#DocumentLink) literals.
 */
var DocumentLink;
(function (DocumentLink) {
    /**
     * Creates a new DocumentLink literal.
     */
    function create(range, target, data) {
        return { range: range, target: target, data: data };
    }
    DocumentLink.create = create;
    /**
     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
    }
    DocumentLink.is = is;
})(DocumentLink || (DocumentLink = {}));
/**
 * The SelectionRange namespace provides helper function to work with
 * SelectionRange literals.
 */
var SelectionRange;
(function (SelectionRange) {
    /**
     * Creates a new SelectionRange
     * @param range the range.
     * @param parent an optional parent.
     */
    function create(range, parent) {
        return { range: range, parent: parent };
    }
    SelectionRange.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));
    }
    SelectionRange.is = is;
})(SelectionRange || (SelectionRange = {}));
/**
 * A set of predefined token types. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */
var SemanticTokenTypes;
(function (SemanticTokenTypes) {
    SemanticTokenTypes["namespace"] = "namespace";
    /**
     * Represents a generic type. Acts as a fallback for types which can't be mapped to
     * a specific type like class or enum.
     */
    SemanticTokenTypes["type"] = "type";
    SemanticTokenTypes["class"] = "class";
    SemanticTokenTypes["enum"] = "enum";
    SemanticTokenTypes["interface"] = "interface";
    SemanticTokenTypes["struct"] = "struct";
    SemanticTokenTypes["typeParameter"] = "typeParameter";
    SemanticTokenTypes["parameter"] = "parameter";
    SemanticTokenTypes["variable"] = "variable";
    SemanticTokenTypes["property"] = "property";
    SemanticTokenTypes["enumMember"] = "enumMember";
    SemanticTokenTypes["event"] = "event";
    SemanticTokenTypes["function"] = "function";
    SemanticTokenTypes["method"] = "method";
    SemanticTokenTypes["macro"] = "macro";
    SemanticTokenTypes["keyword"] = "keyword";
    SemanticTokenTypes["modifier"] = "modifier";
    SemanticTokenTypes["comment"] = "comment";
    SemanticTokenTypes["string"] = "string";
    SemanticTokenTypes["number"] = "number";
    SemanticTokenTypes["regexp"] = "regexp";
    SemanticTokenTypes["operator"] = "operator";
    /**
     * @since 3.17.0
     */
    SemanticTokenTypes["decorator"] = "decorator";
})(SemanticTokenTypes || (SemanticTokenTypes = {}));
/**
 * A set of predefined token modifiers. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */
var SemanticTokenModifiers;
(function (SemanticTokenModifiers) {
    SemanticTokenModifiers["declaration"] = "declaration";
    SemanticTokenModifiers["definition"] = "definition";
    SemanticTokenModifiers["readonly"] = "readonly";
    SemanticTokenModifiers["static"] = "static";
    SemanticTokenModifiers["deprecated"] = "deprecated";
    SemanticTokenModifiers["abstract"] = "abstract";
    SemanticTokenModifiers["async"] = "async";
    SemanticTokenModifiers["modification"] = "modification";
    SemanticTokenModifiers["documentation"] = "documentation";
    SemanticTokenModifiers["defaultLibrary"] = "defaultLibrary";
})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));
/**
 * @since 3.16.0
 */
var SemanticTokens;
(function (SemanticTokens) {
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&
            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');
    }
    SemanticTokens.is = is;
})(SemanticTokens || (SemanticTokens = {}));
/**
 * The InlineValueText namespace provides functions to deal with InlineValueTexts.
 *
 * @since 3.17.0
 */
var InlineValueText;
(function (InlineValueText) {
    /**
     * Creates a new InlineValueText literal.
     */
    function create(range, text) {
        return { range: range, text: text };
    }
    InlineValueText.create = create;
    function is(value) {
        var candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);
    }
    InlineValueText.is = is;
})(InlineValueText || (InlineValueText = {}));
/**
 * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.
 *
 * @since 3.17.0
 */
var InlineValueVariableLookup;
(function (InlineValueVariableLookup) {
    /**
     * Creates a new InlineValueText literal.
     */
    function create(range, variableName, caseSensitiveLookup) {
        return { range: range, variableName: variableName, caseSensitiveLookup: caseSensitiveLookup };
    }
    InlineValueVariableLookup.create = create;
    function is(value) {
        var candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)
            && (Is.string(candidate.variableName) || candidate.variableName === undefined);
    }
    InlineValueVariableLookup.is = is;
})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));
/**
 * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.
 *
 * @since 3.17.0
 */
var InlineValueEvaluatableExpression;
(function (InlineValueEvaluatableExpression) {
    /**
     * Creates a new InlineValueEvaluatableExpression literal.
     */
    function create(range, expression) {
        return { range: range, expression: expression };
    }
    InlineValueEvaluatableExpression.create = create;
    function is(value) {
        var candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range)
            && (Is.string(candidate.expression) || candidate.expression === undefined);
    }
    InlineValueEvaluatableExpression.is = is;
})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));
/**
 * The InlineValueContext namespace provides helper functions to work with
 * [InlineValueContext](#InlineValueContext) literals.
 *
 * @since 3.17.0
 */
var InlineValueContext;
(function (InlineValueContext) {
    /**
     * Creates a new InlineValueContext literal.
     */
    function create(frameId, stoppedLocation) {
        return { frameId: frameId, stoppedLocation: stoppedLocation };
    }
    InlineValueContext.create = create;
    /**
     * Checks whether the given literal conforms to the [InlineValueContext](#InlineValueContext) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(value.stoppedLocation);
    }
    InlineValueContext.is = is;
})(InlineValueContext || (InlineValueContext = {}));
/**
 * Inlay hint kinds.
 *
 * @since 3.17.0
 */
var InlayHintKind;
(function (InlayHintKind) {
    /**
     * An inlay hint that for a type annotation.
     */
    InlayHintKind.Type = 1;
    /**
     * An inlay hint that is for a parameter.
     */
    InlayHintKind.Parameter = 2;
    function is(value) {
        return value === 1 || value === 2;
    }
    InlayHintKind.is = is;
})(InlayHintKind || (InlayHintKind = {}));
var InlayHintLabelPart;
(function (InlayHintLabelPart) {
    function create(value) {
        return { value: value };
    }
    InlayHintLabelPart.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate)
            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))
            && (candidate.location === undefined || Location.is(candidate.location))
            && (candidate.command === undefined || Command.is(candidate.command));
    }
    InlayHintLabelPart.is = is;
})(InlayHintLabelPart || (InlayHintLabelPart = {}));
var InlayHint;
(function (InlayHint) {
    function create(position, label, kind) {
        var result = { position: position, label: label };
        if (kind !== undefined) {
            result.kind = kind;
        }
        return result;
    }
    InlayHint.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.position)
            && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))
            && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))
            && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)
            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))
            && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))
            && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));
    }
    InlayHint.is = is;
})(InlayHint || (InlayHint = {}));
var WorkspaceFolder;
(function (WorkspaceFolder) {
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);
    }
    WorkspaceFolder.is = is;
})(WorkspaceFolder || (WorkspaceFolder = {}));
var EOL = ['\n', '\r\n', '\r'];
/**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */
var TextDocument;
(function (TextDocument) {
    /**
     * Creates a new ITextDocument literal from the given uri and content.
     * @param uri The document's uri.
     * @param languageId The document's language Id.
     * @param version The document's version.
     * @param content The document's content.
     */
    function create(uri, languageId, version, content) {
        return new FullTextDocument(uri, languageId, version, content);
    }
    TextDocument.create = create;
    /**
     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)
            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
    }
    TextDocument.is = is;
    function applyEdits(document, edits) {
        var text = document.getText();
        var sortedEdits = mergeSort(edits, function (a, b) {
            var diff = a.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a.range.start.character - b.range.start.character;
            }
            return diff;
        });
        var lastModifiedOffset = text.length;
        for (var i = sortedEdits.length - 1; i >= 0; i--) {
            var e = sortedEdits[i];
            var startOffset = document.offsetAt(e.range.start);
            var endOffset = document.offsetAt(e.range.end);
            if (endOffset <= lastModifiedOffset) {
                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
            }
            else {
                throw new Error('Overlapping edit');
            }
            lastModifiedOffset = startOffset;
        }
        return text;
    }
    TextDocument.applyEdits = applyEdits;
    function mergeSort(data, compare) {
        if (data.length <= 1) {
            // sorted
            return data;
        }
        var p = (data.length / 2) | 0;
        var left = data.slice(0, p);
        var right = data.slice(p);
        mergeSort(left, compare);
        mergeSort(right, compare);
        var leftIdx = 0;
        var rightIdx = 0;
        var i = 0;
        while (leftIdx < left.length && rightIdx < right.length) {
            var ret = compare(left[leftIdx], right[rightIdx]);
            if (ret <= 0) {
                // smaller_equal -> take left to preserve order
                data[i++] = left[leftIdx++];
            }
            else {
                // greater -> take right
                data[i++] = right[rightIdx++];
            }
        }
        while (leftIdx < left.length) {
            data[i++] = left[leftIdx++];
        }
        while (rightIdx < right.length) {
            data[i++] = right[rightIdx++];
        }
        return data;
    }
})(TextDocument || (TextDocument = {}));
/**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */
var FullTextDocument = /** @class */ (function () {
    function FullTextDocument(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = undefined;
    }
    Object.defineProperty(FullTextDocument.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "languageId", {
        get: function () {
            return this._languageId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "version", {
        get: function () {
            return this._version;
        },
        enumerable: false,
        configurable: true
    });
    FullTextDocument.prototype.getText = function (range) {
        if (range) {
            var start = this.offsetAt(range.start);
            var end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    };
    FullTextDocument.prototype.update = function (event, version) {
        this._content = event.text;
        this._version = version;
        this._lineOffsets = undefined;
    };
    FullTextDocument.prototype.getLineOffsets = function () {
        if (this._lineOffsets === undefined) {
            var lineOffsets = [];
            var text = this._content;
            var isLineStart = true;
            for (var i = 0; i < text.length; i++) {
                if (isLineStart) {
                    lineOffsets.push(i);
                    isLineStart = false;
                }
                var ch = text.charAt(i);
                isLineStart = (ch === '\r' || ch === '\n');
                if (ch === '\r' && i + 1 < text.length && text.charAt(i + 1) === '\n') {
                    i++;
                }
            }
            if (isLineStart && text.length > 0) {
                lineOffsets.push(text.length);
            }
            this._lineOffsets = lineOffsets;
        }
        return this._lineOffsets;
    };
    FullTextDocument.prototype.positionAt = function (offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        var lineOffsets = this.getLineOffsets();
        var low = 0, high = lineOffsets.length;
        if (high === 0) {
            return Position.create(0, offset);
        }
        while (low < high) {
            var mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }
        // low is the least x for which the line offset is larger than the current offset
        // or array.length if no line offset is larger than the current offset
        var line = low - 1;
        return Position.create(line, offset - lineOffsets[line]);
    };
    FullTextDocument.prototype.offsetAt = function (position) {
        var lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        }
        else if (position.line < 0) {
            return 0;
        }
        var lineOffset = lineOffsets[position.line];
        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    };
    Object.defineProperty(FullTextDocument.prototype, "lineCount", {
        get: function () {
            return this.getLineOffsets().length;
        },
        enumerable: false,
        configurable: true
    });
    return FullTextDocument;
}());
var Is;
(function (Is) {
    var toString = Object.prototype.toString;
    function defined(value) {
        return typeof value !== 'undefined';
    }
    Is.defined = defined;
    function undefined(value) {
        return typeof value === 'undefined';
    }
    Is.undefined = undefined;
    function boolean(value) {
        return value === true || value === false;
    }
    Is.boolean = boolean;
    function string(value) {
        return toString.call(value) === '[object String]';
    }
    Is.string = string;
    function number(value) {
        return toString.call(value) === '[object Number]';
    }
    Is.number = number;
    function numberRange(value, min, max) {
        return toString.call(value) === '[object Number]' && min <= value && value <= max;
    }
    Is.numberRange = numberRange;
    function integer(value) {
        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;
    }
    Is.integer = integer;
    function uinteger(value) {
        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;
    }
    Is.uinteger = uinteger;
    function func(value) {
        return toString.call(value) === '[object Function]';
    }
    Is.func = func;
    function objectLiteral(value) {
        // Strictly speaking class instances pass this check as well. Since the LSP
        // doesn't use classes we ignore this for now. If we do we need to add something
        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
        return value !== null && typeof value === 'object';
    }
    Is.objectLiteral = objectLiteral;
    function typedArray(value, check) {
        return Array.isArray(value) && value.every(check);
    }
    Is.typedArray = typedArray;
})(Is || (Is = {}));


/***/ }),

/***/ 2094:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var forEach = __webpack_require__(3243);
var availableTypedArrays = __webpack_require__(2191);
var callBound = __webpack_require__(2680);
var gOPD = __webpack_require__(326);

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = __webpack_require__(7226)();

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
var typedArrays = availableTypedArrays();

var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		if (typeof g[typedArray] === 'function') {
			var arr = new g[typedArray]();
			if (Symbol.toStringTag in arr) {
				var proto = getPrototypeOf(arr);
				var descriptor = gOPD(proto, Symbol.toStringTag);
				if (!descriptor) {
					var superProto = getPrototypeOf(proto);
					descriptor = gOPD(superProto, Symbol.toStringTag);
				}
				toStrTags[typedArray] = descriptor.get;
			}
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var foundName = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!foundName) {
			try {
				var name = getter.call(value);
				if (name === typedArray) {
					foundName = name;
				}
			} catch (e) {}
		}
	});
	return foundName;
};

var isTypedArray = __webpack_require__(198);

module.exports = function whichTypedArray(value) {
	if (!isTypedArray(value)) { return false; }
	if (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }
	return tryTypedArrays(value);
};


/***/ }),

/***/ 7595:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 7595;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 2191:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var possibleNames = [
	'BigInt64Array',
	'BigUint64Array',
	'Float32Array',
	'Float64Array',
	'Int16Array',
	'Int32Array',
	'Int8Array',
	'Uint16Array',
	'Uint32Array',
	'Uint8Array',
	'Uint8ClampedArray'
];

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;

module.exports = function availableTypedArrays() {
	var out = [];
	for (var i = 0; i < possibleNames.length; i++) {
		if (typeof g[possibleNames[i]] === 'function') {
			out[out.length] = possibleNames[i];
		}
	}
	return out;
};


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "YamlService": () => (/* binding */ YamlService)
});

;// CONCATENATED MODULE: ./utils.ts
function mergeObjects(obj1, obj2) {
    if (!obj1) return obj2;
    if (!obj2) return obj1;
    const mergedObjects = {
        ...obj2,
        ...obj1
    }; // Give priority to obj1 values by spreading obj2 first, then obj1
    for (const key of Object.keys(mergedObjects)){
        if (obj1[key] && obj2[key]) {
            if (Array.isArray(obj1[key])) {
                mergedObjects[key] = obj1[key].concat(obj2[key]);
            } else if (Array.isArray(obj2[key])) {
                mergedObjects[key] = obj2[key].concat(obj1[key]);
            } else if (typeof obj1[key] === 'object' && typeof obj2[key] === 'object') {
                mergedObjects[key] = mergeObjects(obj1[key], obj2[key]);
            }
        }
    }
    return mergedObjects;
}
function utils_notEmpty(value) {
    return value !== null && value !== undefined;
}
//taken with small changes from ace-code
function utils_mergeRanges(ranges) {
    var list = ranges;
    list = list.sort(function(a, b) {
        return comparePoints(a.start, b.start);
    });
    var next = list[0], range;
    for(var i = 1; i < list.length; i++){
        range = next;
        next = list[i];
        var cmp = comparePoints(range.end, next.start);
        if (cmp < 0) continue;
        if (cmp == 0 && !range.isEmpty() && !next.isEmpty()) continue;
        if (comparePoints(range.end, next.end) < 0) {
            range.end.row = next.end.row;
            range.end.column = next.end.column;
        }
        list.splice(i, 1);
        next = range;
        i--;
    }
    return list;
}
function comparePoints(p1, p2) {
    return p1.row - p2.row || p1.column - p2.column;
}
function checkValueAgainstRegexpArray(value, regexpArray) {
    if (!regexpArray) {
        return false;
    }
    for(let i = 0; i < regexpArray.length; i++){
        if (regexpArray[i].test(value)) {
            return true;
        }
    }
    return false;
}

;// CONCATENATED MODULE: ../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var FullTextDocument = /** @class */ (function () {
    function FullTextDocument(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = undefined;
    }
    Object.defineProperty(FullTextDocument.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "languageId", {
        get: function () {
            return this._languageId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "version", {
        get: function () {
            return this._version;
        },
        enumerable: false,
        configurable: true
    });
    FullTextDocument.prototype.getText = function (range) {
        if (range) {
            var start = this.offsetAt(range.start);
            var end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    };
    FullTextDocument.prototype.update = function (changes, version) {
        for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {
            var change = changes_1[_i];
            if (FullTextDocument.isIncremental(change)) {
                // makes sure start is before end
                var range = getWellformedRange(change.range);
                // update content
                var startOffset = this.offsetAt(range.start);
                var endOffset = this.offsetAt(range.end);
                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);
                // update the offsets
                var startLine = Math.max(range.start.line, 0);
                var endLine = Math.max(range.end.line, 0);
                var lineOffsets = this._lineOffsets;
                var addedLineOffsets = computeLineOffsets(change.text, false, startOffset);
                if (endLine - startLine === addedLineOffsets.length) {
                    for (var i = 0, len = addedLineOffsets.length; i < len; i++) {
                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];
                    }
                }
                else {
                    if (addedLineOffsets.length < 10000) {
                        lineOffsets.splice.apply(lineOffsets, __spreadArray([startLine + 1, endLine - startLine], addedLineOffsets, false));
                    }
                    else { // avoid too many arguments for splice
                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
                    }
                }
                var diff = change.text.length - (endOffset - startOffset);
                if (diff !== 0) {
                    for (var i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {
                        lineOffsets[i] = lineOffsets[i] + diff;
                    }
                }
            }
            else if (FullTextDocument.isFull(change)) {
                this._content = change.text;
                this._lineOffsets = undefined;
            }
            else {
                throw new Error('Unknown change event received');
            }
        }
        this._version = version;
    };
    FullTextDocument.prototype.getLineOffsets = function () {
        if (this._lineOffsets === undefined) {
            this._lineOffsets = computeLineOffsets(this._content, true);
        }
        return this._lineOffsets;
    };
    FullTextDocument.prototype.positionAt = function (offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        var lineOffsets = this.getLineOffsets();
        var low = 0, high = lineOffsets.length;
        if (high === 0) {
            return { line: 0, character: offset };
        }
        while (low < high) {
            var mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }
        // low is the least x for which the line offset is larger than the current offset
        // or array.length if no line offset is larger than the current offset
        var line = low - 1;
        return { line: line, character: offset - lineOffsets[line] };
    };
    FullTextDocument.prototype.offsetAt = function (position) {
        var lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        }
        else if (position.line < 0) {
            return 0;
        }
        var lineOffset = lineOffsets[position.line];
        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    };
    Object.defineProperty(FullTextDocument.prototype, "lineCount", {
        get: function () {
            return this.getLineOffsets().length;
        },
        enumerable: false,
        configurable: true
    });
    FullTextDocument.isIncremental = function (event) {
        var candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range !== undefined &&
            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
    };
    FullTextDocument.isFull = function (event) {
        var candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
    };
    return FullTextDocument;
}());
var TextDocument;
(function (TextDocument) {
    /**
     * Creates a new text document.
     *
     * @param uri The document's uri.
     * @param languageId  The document's language Id.
     * @param version The document's initial version number.
     * @param content The document's content.
     */
    function create(uri, languageId, version, content) {
        return new FullTextDocument(uri, languageId, version, content);
    }
    TextDocument.create = create;
    /**
     * Updates a TextDocument by modifying its content.
     *
     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.
     * @param changes the changes to apply to the document.
     * @param version the changes version for the document.
     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.
     *
     */
    function update(document, changes, version) {
        if (document instanceof FullTextDocument) {
            document.update(changes, version);
            return document;
        }
        else {
            throw new Error('TextDocument.update: document must be created by TextDocument.create');
        }
    }
    TextDocument.update = update;
    function applyEdits(document, edits) {
        var text = document.getText();
        var sortedEdits = mergeSort(edits.map(getWellformedEdit), function (a, b) {
            var diff = a.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a.range.start.character - b.range.start.character;
            }
            return diff;
        });
        var lastModifiedOffset = 0;
        var spans = [];
        for (var _i = 0, sortedEdits_1 = sortedEdits; _i < sortedEdits_1.length; _i++) {
            var e = sortedEdits_1[_i];
            var startOffset = document.offsetAt(e.range.start);
            if (startOffset < lastModifiedOffset) {
                throw new Error('Overlapping edit');
            }
            else if (startOffset > lastModifiedOffset) {
                spans.push(text.substring(lastModifiedOffset, startOffset));
            }
            if (e.newText.length) {
                spans.push(e.newText);
            }
            lastModifiedOffset = document.offsetAt(e.range.end);
        }
        spans.push(text.substr(lastModifiedOffset));
        return spans.join('');
    }
    TextDocument.applyEdits = applyEdits;
})(TextDocument || (TextDocument = {}));
function mergeSort(data, compare) {
    if (data.length <= 1) {
        // sorted
        return data;
    }
    var p = (data.length / 2) | 0;
    var left = data.slice(0, p);
    var right = data.slice(p);
    mergeSort(left, compare);
    mergeSort(right, compare);
    var leftIdx = 0;
    var rightIdx = 0;
    var i = 0;
    while (leftIdx < left.length && rightIdx < right.length) {
        var ret = compare(left[leftIdx], right[rightIdx]);
        if (ret <= 0) {
            // smaller_equal -> take left to preserve order
            data[i++] = left[leftIdx++];
        }
        else {
            // greater -> take right
            data[i++] = right[rightIdx++];
        }
    }
    while (leftIdx < left.length) {
        data[i++] = left[leftIdx++];
    }
    while (rightIdx < right.length) {
        data[i++] = right[rightIdx++];
    }
    return data;
}
function computeLineOffsets(text, isAtLineStart, textOffset) {
    if (textOffset === void 0) { textOffset = 0; }
    var result = isAtLineStart ? [textOffset] : [];
    for (var i = 0; i < text.length; i++) {
        var ch = text.charCodeAt(i);
        if (ch === 13 /* CharCode.CarriageReturn */ || ch === 10 /* CharCode.LineFeed */) {
            if (ch === 13 /* CharCode.CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {
                i++;
            }
            result.push(textOffset + i + 1);
        }
    }
    return result;
}
function getWellformedRange(range) {
    var start = range.start;
    var end = range.end;
    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {
        return { start: end, end: start };
    }
    return range;
}
function getWellformedEdit(textEdit) {
    var range = getWellformedRange(textEdit.range);
    if (range !== textEdit.range) {
        return { newText: textEdit.newText, range: range };
    }
    return textEdit;
}

;// CONCATENATED MODULE: ./services/base-service.ts
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}


class BaseService {
    addDocument(document) {
        this.documents[document.uri] = TextDocument.create(document.uri, document.languageId, document.version, document.text);
    //TODO:
    /*if (options)
            this.setSessionOptions(sessionID, options);*/ }
    getDocument(uri) {
        return this.documents[uri];
    }
    removeDocument(document) {
        delete this.documents[document.uri];
        if (this.options[document.uri]) {
            delete this.options[document.uri];
        }
    }
    getDocumentValue(uri) {
        var _this_getDocument;
        return (_this_getDocument = this.getDocument(uri)) === null || _this_getDocument === void 0 ? void 0 : _this_getDocument.getText();
    }
    setValue(identifier, value) {
        let document = this.getDocument(identifier.uri);
        if (document) {
            document = TextDocument.create(document.uri, document.languageId, document.version, value);
            this.documents[document.uri] = document;
        }
    }
    setGlobalOptions(options) {
        this.globalOptions = options !== null && options !== void 0 ? options : {};
    }
    setOptions(sessionID, options, merge = false) {
        this.options[sessionID] = merge ? mergeObjects(options, this.options[sessionID]) : options;
    }
    getOption(sessionID, optionName) {
        if (this.options[sessionID] && this.options[sessionID][optionName]) {
            return this.options[sessionID][optionName];
        } else {
            return this.globalOptions[optionName];
        }
    }
    applyDeltas(identifier, deltas) {
        let document = this.getDocument(identifier.uri);
        if (document) TextDocument.update(document, deltas, identifier.version);
    }
    async doComplete(document, position) {
        return null;
    }
    async doHover(document, position) {
        return null;
    }
    async doResolve(item) {
        return null;
    }
    async doValidation(document) {
        return [];
    }
    format(document, range, options) {
        return [];
    }
    async provideSignatureHelp(document, position) {
        return null;
    }
    async findDocumentHighlights(document, position) {
        return [];
    }
    get optionsToFilterDiagnostics() {
        var _this_globalOptions_errorCodesToIgnore, _this_globalOptions_errorCodesToTreatAsWarning, _this_globalOptions_errorCodesToTreatAsInfo, _this_globalOptions_errorMessagesToIgnore, _this_globalOptions_errorMessagesToTreatAsWarning, _this_globalOptions_errorMessagesToTreatAsInfo;
        return {
            errorCodesToIgnore: (_this_globalOptions_errorCodesToIgnore = this.globalOptions.errorCodesToIgnore) !== null && _this_globalOptions_errorCodesToIgnore !== void 0 ? _this_globalOptions_errorCodesToIgnore : [],
            errorCodesToTreatAsWarning: (_this_globalOptions_errorCodesToTreatAsWarning = this.globalOptions.errorCodesToTreatAsWarning) !== null && _this_globalOptions_errorCodesToTreatAsWarning !== void 0 ? _this_globalOptions_errorCodesToTreatAsWarning : [],
            errorCodesToTreatAsInfo: (_this_globalOptions_errorCodesToTreatAsInfo = this.globalOptions.errorCodesToTreatAsInfo) !== null && _this_globalOptions_errorCodesToTreatAsInfo !== void 0 ? _this_globalOptions_errorCodesToTreatAsInfo : [],
            errorMessagesToIgnore: (_this_globalOptions_errorMessagesToIgnore = this.globalOptions.errorMessagesToIgnore) !== null && _this_globalOptions_errorMessagesToIgnore !== void 0 ? _this_globalOptions_errorMessagesToIgnore : [],
            errorMessagesToTreatAsWarning: (_this_globalOptions_errorMessagesToTreatAsWarning = this.globalOptions.errorMessagesToTreatAsWarning) !== null && _this_globalOptions_errorMessagesToTreatAsWarning !== void 0 ? _this_globalOptions_errorMessagesToTreatAsWarning : [],
            errorMessagesToTreatAsInfo: (_this_globalOptions_errorMessagesToTreatAsInfo = this.globalOptions.errorMessagesToTreatAsInfo) !== null && _this_globalOptions_errorMessagesToTreatAsInfo !== void 0 ? _this_globalOptions_errorMessagesToTreatAsInfo : []
        };
    }
    constructor(mode){
        _define_property(this, "mode", void 0);
        _define_property(this, "documents", {});
        _define_property(this, "options", {});
        _define_property(this, "globalOptions", {});
        _define_property(this, "serviceData", void 0);
        this.mode = mode;
    }
}

;// CONCATENATED MODULE: ./services/yaml/lib/index.js
/* provided dependency */ var process = __webpack_require__(4406);
/* provided dependency */ var console = __webpack_require__(3716);
/* provided dependency */ var Buffer = __webpack_require__(8834)["lW"];
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x)=> true ? __webpack_require__(7595) : 0)(function(x) {
    if (true) return __webpack_require__(7595).apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __commonJS = (cb, mod)=>function __require2() {
        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {
            exports: {}
        }).exports, mod), mod.exports;
    };
var __export = (target, all)=>{
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = (to, from, except, desc)=>{
    if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
            get: ()=>from[key],
            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
        });
    }
    return to;
};
var __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
        value: mod,
        enumerable: true
    }) : target, mod));
// ../../node_modules/path-browserify/index.js
var require_path_browserify = __commonJS({
    "../../node_modules/path-browserify/index.js" (exports, module) {
        "use strict";
        function assertPath(path5) {
            if (typeof path5 !== "string") {
                throw new TypeError("Path must be a string. Received " + JSON.stringify(path5));
            }
        }
        function normalizeStringPosix(path5, allowAboveRoot) {
            var res = "";
            var lastSegmentLength = 0;
            var lastSlash = -1;
            var dots = 0;
            var code;
            for(var i = 0; i <= path5.length; ++i){
                if (i < path5.length) code = path5.charCodeAt(i);
                else if (code === 47) break;
                else code = 47;
                if (code === 47) {
                    if (lastSlash === i - 1 || dots === 1) {} else if (lastSlash !== i - 1 && dots === 2) {
                        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
                            if (res.length > 2) {
                                var lastSlashIndex = res.lastIndexOf("/");
                                if (lastSlashIndex !== res.length - 1) {
                                    if (lastSlashIndex === -1) {
                                        res = "";
                                        lastSegmentLength = 0;
                                    } else {
                                        res = res.slice(0, lastSlashIndex);
                                        lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
                                    }
                                    lastSlash = i;
                                    dots = 0;
                                    continue;
                                }
                            } else if (res.length === 2 || res.length === 1) {
                                res = "";
                                lastSegmentLength = 0;
                                lastSlash = i;
                                dots = 0;
                                continue;
                            }
                        }
                        if (allowAboveRoot) {
                            if (res.length > 0) res += "/..";
                            else res = "..";
                            lastSegmentLength = 2;
                        }
                    } else {
                        if (res.length > 0) res += "/" + path5.slice(lastSlash + 1, i);
                        else res = path5.slice(lastSlash + 1, i);
                        lastSegmentLength = i - lastSlash - 1;
                    }
                    lastSlash = i;
                    dots = 0;
                } else if (code === 46 && dots !== -1) {
                    ++dots;
                } else {
                    dots = -1;
                }
            }
            return res;
        }
        function _format(sep, pathObject) {
            var dir = pathObject.dir || pathObject.root;
            var base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
            if (!dir) {
                return base;
            }
            if (dir === pathObject.root) {
                return dir + base;
            }
            return dir + sep + base;
        }
        var posix = {
            // path.resolve([from ...], to)
            resolve: function resolve2() {
                var resolvedPath = "";
                var resolvedAbsolute = false;
                var cwd;
                for(var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--){
                    var path5;
                    if (i >= 0) path5 = arguments[i];
                    else {
                        if (cwd === void 0) cwd = process.cwd();
                        path5 = cwd;
                    }
                    assertPath(path5);
                    if (path5.length === 0) {
                        continue;
                    }
                    resolvedPath = path5 + "/" + resolvedPath;
                    resolvedAbsolute = path5.charCodeAt(0) === 47;
                }
                resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
                if (resolvedAbsolute) {
                    if (resolvedPath.length > 0) return "/" + resolvedPath;
                    else return "/";
                } else if (resolvedPath.length > 0) {
                    return resolvedPath;
                } else {
                    return ".";
                }
            },
            normalize: function normalize(path5) {
                assertPath(path5);
                if (path5.length === 0) return ".";
                var isAbsolute2 = path5.charCodeAt(0) === 47;
                var trailingSeparator = path5.charCodeAt(path5.length - 1) === 47;
                path5 = normalizeStringPosix(path5, !isAbsolute2);
                if (path5.length === 0 && !isAbsolute2) path5 = ".";
                if (path5.length > 0 && trailingSeparator) path5 += "/";
                if (isAbsolute2) return "/" + path5;
                return path5;
            },
            isAbsolute: function isAbsolute2(path5) {
                assertPath(path5);
                return path5.length > 0 && path5.charCodeAt(0) === 47;
            },
            join: function join() {
                if (arguments.length === 0) return ".";
                var joined;
                for(var i = 0; i < arguments.length; ++i){
                    var arg = arguments[i];
                    assertPath(arg);
                    if (arg.length > 0) {
                        if (joined === void 0) joined = arg;
                        else joined += "/" + arg;
                    }
                }
                if (joined === void 0) return ".";
                return posix.normalize(joined);
            },
            relative: function relative(from, to) {
                assertPath(from);
                assertPath(to);
                if (from === to) return "";
                from = posix.resolve(from);
                to = posix.resolve(to);
                if (from === to) return "";
                var fromStart = 1;
                for(; fromStart < from.length; ++fromStart){
                    if (from.charCodeAt(fromStart) !== 47) break;
                }
                var fromEnd = from.length;
                var fromLen = fromEnd - fromStart;
                var toStart = 1;
                for(; toStart < to.length; ++toStart){
                    if (to.charCodeAt(toStart) !== 47) break;
                }
                var toEnd = to.length;
                var toLen = toEnd - toStart;
                var length = fromLen < toLen ? fromLen : toLen;
                var lastCommonSep = -1;
                var i = 0;
                for(; i <= length; ++i){
                    if (i === length) {
                        if (toLen > length) {
                            if (to.charCodeAt(toStart + i) === 47) {
                                return to.slice(toStart + i + 1);
                            } else if (i === 0) {
                                return to.slice(toStart + i);
                            }
                        } else if (fromLen > length) {
                            if (from.charCodeAt(fromStart + i) === 47) {
                                lastCommonSep = i;
                            } else if (i === 0) {
                                lastCommonSep = 0;
                            }
                        }
                        break;
                    }
                    var fromCode = from.charCodeAt(fromStart + i);
                    var toCode = to.charCodeAt(toStart + i);
                    if (fromCode !== toCode) break;
                    else if (fromCode === 47) lastCommonSep = i;
                }
                var out = "";
                for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
                    if (i === fromEnd || from.charCodeAt(i) === 47) {
                        if (out.length === 0) out += "..";
                        else out += "/..";
                    }
                }
                if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
                else {
                    toStart += lastCommonSep;
                    if (to.charCodeAt(toStart) === 47) ++toStart;
                    return to.slice(toStart);
                }
            },
            _makeLong: function _makeLong(path5) {
                return path5;
            },
            dirname: function dirname(path5) {
                assertPath(path5);
                if (path5.length === 0) return ".";
                var code = path5.charCodeAt(0);
                var hasRoot = code === 47;
                var end = -1;
                var matchedSlash = true;
                for(var i = path5.length - 1; i >= 1; --i){
                    code = path5.charCodeAt(i);
                    if (code === 47) {
                        if (!matchedSlash) {
                            end = i;
                            break;
                        }
                    } else {
                        matchedSlash = false;
                    }
                }
                if (end === -1) return hasRoot ? "/" : ".";
                if (hasRoot && end === 1) return "//";
                return path5.slice(0, end);
            },
            basename: function basename4(path5, ext) {
                if (ext !== void 0 && typeof ext !== "string") throw new TypeError('"ext" argument must be a string');
                assertPath(path5);
                var start = 0;
                var end = -1;
                var matchedSlash = true;
                var i;
                if (ext !== void 0 && ext.length > 0 && ext.length <= path5.length) {
                    if (ext.length === path5.length && ext === path5) return "";
                    var extIdx = ext.length - 1;
                    var firstNonSlashEnd = -1;
                    for(i = path5.length - 1; i >= 0; --i){
                        var code = path5.charCodeAt(i);
                        if (code === 47) {
                            if (!matchedSlash) {
                                start = i + 1;
                                break;
                            }
                        } else {
                            if (firstNonSlashEnd === -1) {
                                matchedSlash = false;
                                firstNonSlashEnd = i + 1;
                            }
                            if (extIdx >= 0) {
                                if (code === ext.charCodeAt(extIdx)) {
                                    if (--extIdx === -1) {
                                        end = i;
                                    }
                                } else {
                                    extIdx = -1;
                                    end = firstNonSlashEnd;
                                }
                            }
                        }
                    }
                    if (start === end) end = firstNonSlashEnd;
                    else if (end === -1) end = path5.length;
                    return path5.slice(start, end);
                } else {
                    for(i = path5.length - 1; i >= 0; --i){
                        if (path5.charCodeAt(i) === 47) {
                            if (!matchedSlash) {
                                start = i + 1;
                                break;
                            }
                        } else if (end === -1) {
                            matchedSlash = false;
                            end = i + 1;
                        }
                    }
                    if (end === -1) return "";
                    return path5.slice(start, end);
                }
            },
            extname: function extname2(path5) {
                assertPath(path5);
                var startDot = -1;
                var startPart = 0;
                var end = -1;
                var matchedSlash = true;
                var preDotState = 0;
                for(var i = path5.length - 1; i >= 0; --i){
                    var code = path5.charCodeAt(i);
                    if (code === 47) {
                        if (!matchedSlash) {
                            startPart = i + 1;
                            break;
                        }
                        continue;
                    }
                    if (end === -1) {
                        matchedSlash = false;
                        end = i + 1;
                    }
                    if (code === 46) {
                        if (startDot === -1) startDot = i;
                        else if (preDotState !== 1) preDotState = 1;
                    } else if (startDot !== -1) {
                        preDotState = -1;
                    }
                }
                if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
                preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
                preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
                    return "";
                }
                return path5.slice(startDot, end);
            },
            format: function format5(pathObject) {
                if (pathObject === null || typeof pathObject !== "object") {
                    throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
                }
                return _format("/", pathObject);
            },
            parse: function parse7(path5) {
                assertPath(path5);
                var ret = {
                    root: "",
                    dir: "",
                    base: "",
                    ext: "",
                    name: ""
                };
                if (path5.length === 0) return ret;
                var code = path5.charCodeAt(0);
                var isAbsolute2 = code === 47;
                var start;
                if (isAbsolute2) {
                    ret.root = "/";
                    start = 1;
                } else {
                    start = 0;
                }
                var startDot = -1;
                var startPart = 0;
                var end = -1;
                var matchedSlash = true;
                var i = path5.length - 1;
                var preDotState = 0;
                for(; i >= start; --i){
                    code = path5.charCodeAt(i);
                    if (code === 47) {
                        if (!matchedSlash) {
                            startPart = i + 1;
                            break;
                        }
                        continue;
                    }
                    if (end === -1) {
                        matchedSlash = false;
                        end = i + 1;
                    }
                    if (code === 46) {
                        if (startDot === -1) startDot = i;
                        else if (preDotState !== 1) preDotState = 1;
                    } else if (startDot !== -1) {
                        preDotState = -1;
                    }
                }
                if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
                preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
                preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
                    if (end !== -1) {
                        if (startPart === 0 && isAbsolute2) ret.base = ret.name = path5.slice(1, end);
                        else ret.base = ret.name = path5.slice(startPart, end);
                    }
                } else {
                    if (startPart === 0 && isAbsolute2) {
                        ret.name = path5.slice(1, startDot);
                        ret.base = path5.slice(1, end);
                    } else {
                        ret.name = path5.slice(startPart, startDot);
                        ret.base = path5.slice(startPart, end);
                    }
                    ret.ext = path5.slice(startDot, end);
                }
                if (startPart > 0) ret.dir = path5.slice(0, startPart - 1);
                else if (isAbsolute2) ret.dir = "/";
                return ret;
            },
            sep: "/",
            delimiter: ":",
            win32: null,
            posix: null
        };
        posix.posix = posix;
        module.exports = posix;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-draft-07.json
var require_json_schema_draft_07 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-draft-07.json" (exports, module) {
        module.exports = {
            $schema: "http://json-schema.org/draft-07/schema#",
            $id: "http://json-schema.org/draft-07/schema#",
            title: "Core schema meta-schema",
            definitions: {
                schemaArray: {
                    type: "array",
                    minItems: 1,
                    items: {
                        $ref: "#"
                    }
                },
                nonNegativeInteger: {
                    type: "integer",
                    minimum: 0
                },
                nonNegativeIntegerDefault0: {
                    allOf: [
                        {
                            $ref: "#/definitions/nonNegativeInteger"
                        },
                        {
                            default: 0
                        }
                    ]
                },
                simpleTypes: {
                    enum: [
                        "array",
                        "boolean",
                        "integer",
                        "null",
                        "number",
                        "object",
                        "string"
                    ]
                },
                stringArray: {
                    type: "array",
                    items: {
                        type: "string"
                    },
                    uniqueItems: true,
                    default: []
                }
            },
            type: [
                "object",
                "boolean"
            ],
            properties: {
                $id: {
                    type: "string",
                    format: "uri-reference"
                },
                $schema: {
                    type: "string",
                    format: "uri"
                },
                $ref: {
                    type: "string",
                    format: "uri-reference"
                },
                $comment: {
                    type: "string"
                },
                title: {
                    type: "string"
                },
                description: {
                    type: "string"
                },
                default: true,
                readOnly: {
                    type: "boolean",
                    default: false
                },
                examples: {
                    type: "array",
                    items: true
                },
                multipleOf: {
                    type: "number",
                    exclusiveMinimum: 0
                },
                maximum: {
                    type: "number"
                },
                exclusiveMaximum: {
                    type: "number"
                },
                minimum: {
                    type: "number"
                },
                exclusiveMinimum: {
                    type: "number"
                },
                maxLength: {
                    $ref: "#/definitions/nonNegativeInteger"
                },
                minLength: {
                    $ref: "#/definitions/nonNegativeIntegerDefault0"
                },
                pattern: {
                    type: "string",
                    format: "regex"
                },
                additionalItems: {
                    $ref: "#"
                },
                items: {
                    anyOf: [
                        {
                            $ref: "#"
                        },
                        {
                            $ref: "#/definitions/schemaArray"
                        }
                    ],
                    default: true
                },
                maxItems: {
                    $ref: "#/definitions/nonNegativeInteger"
                },
                minItems: {
                    $ref: "#/definitions/nonNegativeIntegerDefault0"
                },
                uniqueItems: {
                    type: "boolean",
                    default: false
                },
                contains: {
                    $ref: "#"
                },
                maxProperties: {
                    $ref: "#/definitions/nonNegativeInteger"
                },
                minProperties: {
                    $ref: "#/definitions/nonNegativeIntegerDefault0"
                },
                required: {
                    $ref: "#/definitions/stringArray"
                },
                additionalProperties: {
                    $ref: "#"
                },
                definitions: {
                    type: "object",
                    additionalProperties: {
                        $ref: "#"
                    },
                    default: {}
                },
                properties: {
                    type: "object",
                    additionalProperties: {
                        $ref: "#"
                    },
                    default: {}
                },
                patternProperties: {
                    type: "object",
                    additionalProperties: {
                        $ref: "#"
                    },
                    propertyNames: {
                        format: "regex"
                    },
                    default: {}
                },
                dependencies: {
                    type: "object",
                    additionalProperties: {
                        anyOf: [
                            {
                                $ref: "#"
                            },
                            {
                                $ref: "#/definitions/stringArray"
                            }
                        ]
                    }
                },
                propertyNames: {
                    $ref: "#"
                },
                const: true,
                enum: {
                    type: "array",
                    items: true,
                    minItems: 1,
                    uniqueItems: true
                },
                type: {
                    anyOf: [
                        {
                            $ref: "#/definitions/simpleTypes"
                        },
                        {
                            type: "array",
                            items: {
                                $ref: "#/definitions/simpleTypes"
                            },
                            minItems: 1,
                            uniqueItems: true
                        }
                    ]
                },
                format: {
                    type: "string"
                },
                contentMediaType: {
                    type: "string"
                },
                contentEncoding: {
                    type: "string"
                },
                if: {
                    $ref: "#"
                },
                then: {
                    $ref: "#"
                },
                else: {
                    $ref: "#"
                },
                allOf: {
                    $ref: "#/definitions/schemaArray"
                },
                anyOf: {
                    $ref: "#/definitions/schemaArray"
                },
                oneOf: {
                    $ref: "#/definitions/schemaArray"
                },
                not: {
                    $ref: "#"
                }
            },
            default: true
        };
    }
});
// ../../node_modules/prettier/standalone.js
var require_standalone = __commonJS({
    "../../node_modules/prettier/standalone.js" (exports, module) {
        (function(global2, factory) {
            typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && __webpack_require__.amdO ? define(factory) : (global2 = global2 || self, global2.prettier = factory());
        })(exports, function() {
            "use strict";
            var name = "prettier";
            var version = "2.0.5";
            var description = "Prettier is an opinionated code formatter";
            var bin = "./bin/prettier.js";
            var repository = "prettier/prettier";
            var homepage = "https://prettier.io";
            var author = "James Long";
            var license = "MIT";
            var main = "./index.js";
            var engines = {
                node: ">=10.13.0"
            };
            var dependencies = {
                "@angular/compiler": "9.0.5",
                "@babel/code-frame": "7.8.0",
                "@babel/parser": "7.9.4",
                "@glimmer/syntax": "0.50.0",
                "@iarna/toml": "2.2.3",
                "@typescript-eslint/typescript-estree": "2.26.0",
                "angular-estree-parser": "1.3.0",
                "angular-html-parser": "1.4.0",
                camelcase: "5.3.1",
                chalk: "4.0.0",
                "ci-info": "watson/ci-info#f43f6a1cefff47fb361c88cf4b943fdbcaafe540",
                "cjk-regex": "2.0.0",
                cosmiconfig: "6.0.0",
                dashify: "2.0.0",
                dedent: "0.7.0",
                diff: "4.0.2",
                editorconfig: "0.15.3",
                "editorconfig-to-prettier": "0.1.1",
                "escape-string-regexp": "2.0.0",
                esutils: "2.0.3",
                "fast-glob": "3.2.2",
                "find-parent-dir": "0.3.0",
                "find-project-root": "1.1.1",
                "flow-parser": "0.122.0",
                "get-stream": "5.1.0",
                globby: "11.0.0",
                graphql: "15.0.0",
                "html-element-attributes": "2.2.1",
                "html-styles": "1.0.0",
                "html-tag-names": "1.1.5",
                ignore: "4.0.6",
                "jest-docblock": "25.2.6",
                "json-stable-stringify": "1.0.1",
                leven: "3.1.0",
                "lines-and-columns": "1.1.6",
                "linguist-languages": "7.9.0",
                lodash: "4.17.15",
                mem: "6.0.1",
                minimatch: "3.0.4",
                minimist: "1.2.5",
                "n-readlines": "1.0.0",
                "please-upgrade-node": "3.2.0",
                "postcss-less": "3.1.4",
                "postcss-media-query-parser": "0.2.3",
                "postcss-scss": "2.0.0",
                "postcss-selector-parser": "2.2.3",
                "postcss-values-parser": "2.0.1",
                "regexp-util": "1.2.2",
                "remark-math": "1.0.6",
                "remark-parse": "5.0.0",
                resolve: "1.16.1",
                semver: "7.1.3",
                srcset: "2.0.1",
                "string-width": "4.2.0",
                typescript: "3.8.3",
                "unicode-regex": "3.0.0",
                unified: "9.0.0",
                vnopts: "1.0.2",
                "yaml-unist-parser": "1.1.1"
            };
            var devDependencies = {
                "@babel/core": "7.9.0",
                "@babel/preset-env": "7.9.0",
                "@rollup/plugin-alias": "3.0.1",
                "@rollup/plugin-commonjs": "11.0.2",
                "@rollup/plugin-json": "4.0.2",
                "@rollup/plugin-node-resolve": "7.1.1",
                "@rollup/plugin-replace": "2.3.1",
                "babel-loader": "8.1.0",
                benchmark: "2.1.4",
                "builtin-modules": "3.1.0",
                codecov: "3.6.5",
                "cross-env": "7.0.2",
                cspell: "4.0.55",
                eslint: "6.8.0",
                "eslint-config-prettier": "6.10.1",
                "eslint-formatter-friendly": "7.0.0",
                "eslint-plugin-import": "2.20.2",
                "eslint-plugin-prettier": "3.1.2",
                "eslint-plugin-react": "7.19.0",
                "eslint-plugin-unicorn": "18.0.1",
                execa: "4.0.0",
                jest: "25.2.7",
                "jest-snapshot-serializer-ansi": "1.0.0",
                "jest-snapshot-serializer-raw": "1.1.0",
                "jest-watch-typeahead": "0.5.0",
                prettier: "2.0.4",
                rimraf: "3.0.2",
                rollup: "2.3.2",
                "rollup-plugin-babel": "4.4.0",
                "rollup-plugin-node-globals": "1.4.0",
                "rollup-plugin-terser": "5.3.0",
                shelljs: "0.8.3",
                "snapshot-diff": "0.7.0",
                "strip-ansi": "6.0.0",
                "synchronous-promise": "2.0.10",
                tempy: "0.5.0",
                "terser-webpack-plugin": "2.3.5",
                webpack: "4.42.1"
            };
            var scripts = {
                prepublishOnly: 'echo "Error: must publish from dist/" && exit 1',
                "prepare-release": "yarn && yarn build && yarn test:dist",
                test: "jest",
                "test:dist": "cross-env NODE_ENV=production jest",
                "test:dist-standalone": "cross-env NODE_ENV=production TEST_STANDALONE=1 jest tests/",
                "test:integration": "jest tests_integration",
                "perf:repeat": "yarn && yarn build && cross-env NODE_ENV=production node ./dist/bin-prettier.js --debug-repeat ${PERF_REPEAT:-1000} --loglevel debug ${PERF_FILE:-./index.js} > /dev/null",
                "perf:repeat-inspect": "yarn && yarn build && cross-env NODE_ENV=production node --inspect-brk ./dist/bin-prettier.js --debug-repeat ${PERF_REPEAT:-1000} --loglevel debug ${PERF_FILE:-./index.js} > /dev/null",
                "perf:benchmark": "yarn && yarn build && cross-env NODE_ENV=production node ./dist/bin-prettier.js --debug-benchmark --loglevel debug ${PERF_FILE:-./index.js} > /dev/null",
                "lint:typecheck": "tsc",
                "lint:eslint": "cross-env EFF_NO_LINK_RULES=true eslint . --format friendly",
                "lint:changelog": "node ./scripts/lint-changelog.js",
                "lint:prettier": 'prettier "**/*.{md,json,yml,html,css}" --check',
                "lint:dist": 'eslint --no-eslintrc --no-ignore --env=es6,browser --parser-options=ecmaVersion:2016 "dist/!(bin-prettier|index|third-party).js"',
                "lint:spellcheck": "cspell {bin,scripts,src,website}/**/*.js {docs,website/blog,changelog_unreleased}/**/*.md",
                "lint:deps": "node ./scripts/check-deps.js",
                build: "node --max-old-space-size=3072 ./scripts/build/build.js",
                "build-docs": "node ./scripts/build-docs.js"
            };
            var _package = {
                name,
                version,
                description,
                bin,
                repository,
                homepage,
                author,
                license,
                main,
                engines,
                dependencies,
                devDependencies,
                scripts
            };
            var _package$1 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                name,
                version,
                description,
                bin,
                repository,
                homepage,
                author,
                license,
                main,
                engines,
                dependencies,
                devDependencies,
                scripts,
                "default": _package
            });
            function Diff() {}
            Diff.prototype = {
                diff: function diff2(oldString, newString) {
                    var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                    var callback = options2.callback;
                    if (typeof options2 === "function") {
                        callback = options2;
                        options2 = {};
                    }
                    this.options = options2;
                    var self2 = this;
                    function done(value1) {
                        if (callback) {
                            setTimeout(function() {
                                callback(void 0, value1);
                            }, 0);
                            return true;
                        } else {
                            return value1;
                        }
                    }
                    oldString = this.castInput(oldString);
                    newString = this.castInput(newString);
                    oldString = this.removeEmpty(this.tokenize(oldString));
                    newString = this.removeEmpty(this.tokenize(newString));
                    var newLen = newString.length, oldLen = oldString.length;
                    var editLength = 1;
                    var maxEditLength = newLen + oldLen;
                    var bestPath = [
                        {
                            newPos: -1,
                            components: []
                        }
                    ];
                    var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);
                    if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
                        return done([
                            {
                                value: this.join(newString),
                                count: newString.length
                            }
                        ]);
                    }
                    function execEditLength() {
                        for(var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2){
                            var basePath = void 0;
                            var addPath = bestPath[diagonalPath - 1], removePath = bestPath[diagonalPath + 1], _oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;
                            if (addPath) {
                                bestPath[diagonalPath - 1] = void 0;
                            }
                            var canAdd = addPath && addPath.newPos + 1 < newLen, canRemove = removePath && 0 <= _oldPos && _oldPos < oldLen;
                            if (!canAdd && !canRemove) {
                                bestPath[diagonalPath] = void 0;
                                continue;
                            }
                            if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {
                                basePath = clonePath(removePath);
                                self2.pushComponent(basePath.components, void 0, true);
                            } else {
                                basePath = addPath;
                                basePath.newPos++;
                                self2.pushComponent(basePath.components, true, void 0);
                            }
                            _oldPos = self2.extractCommon(basePath, newString, oldString, diagonalPath);
                            if (basePath.newPos + 1 >= newLen && _oldPos + 1 >= oldLen) {
                                return done(buildValues(self2, basePath.components, newString, oldString, self2.useLongestToken));
                            } else {
                                bestPath[diagonalPath] = basePath;
                            }
                        }
                        editLength++;
                    }
                    if (callback) {
                        (function exec() {
                            setTimeout(function() {
                                if (editLength > maxEditLength) {
                                    return callback();
                                }
                                if (!execEditLength()) {
                                    exec();
                                }
                            }, 0);
                        })();
                    } else {
                        while(editLength <= maxEditLength){
                            var ret = execEditLength();
                            if (ret) {
                                return ret;
                            }
                        }
                    }
                },
                pushComponent: function pushComponent(components, added, removed) {
                    var last = components[components.length - 1];
                    if (last && last.added === added && last.removed === removed) {
                        components[components.length - 1] = {
                            count: last.count + 1,
                            added,
                            removed
                        };
                    } else {
                        components.push({
                            count: 1,
                            added,
                            removed
                        });
                    }
                },
                extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {
                    var newLen = newString.length, oldLen = oldString.length, newPos = basePath.newPos, oldPos = newPos - diagonalPath, commonCount = 0;
                    while(newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])){
                        newPos++;
                        oldPos++;
                        commonCount++;
                    }
                    if (commonCount) {
                        basePath.components.push({
                            count: commonCount
                        });
                    }
                    basePath.newPos = newPos;
                    return oldPos;
                },
                equals: function equals3(left, right) {
                    if (this.options.comparator) {
                        return this.options.comparator(left, right);
                    } else {
                        return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();
                    }
                },
                removeEmpty: function removeEmpty(array2) {
                    var ret = [];
                    for(var i = 0; i < array2.length; i++){
                        if (array2[i]) {
                            ret.push(array2[i]);
                        }
                    }
                    return ret;
                },
                castInput: function castInput(value1) {
                    return value1;
                },
                tokenize: function tokenize(value1) {
                    return value1.split("");
                },
                join: function join2(chars) {
                    return chars.join("");
                }
            };
            function buildValues(diff2, components, newString, oldString, useLongestToken) {
                var componentPos = 0, componentLen = components.length, newPos = 0, oldPos = 0;
                for(; componentPos < componentLen; componentPos++){
                    var component = components[componentPos];
                    if (!component.removed) {
                        if (!component.added && useLongestToken) {
                            var value1 = newString.slice(newPos, newPos + component.count);
                            value1 = value1.map(function(value2, i) {
                                var oldValue = oldString[oldPos + i];
                                return oldValue.length > value2.length ? oldValue : value2;
                            });
                            component.value = diff2.join(value1);
                        } else {
                            component.value = diff2.join(newString.slice(newPos, newPos + component.count));
                        }
                        newPos += component.count;
                        if (!component.added) {
                            oldPos += component.count;
                        }
                    } else {
                        component.value = diff2.join(oldString.slice(oldPos, oldPos + component.count));
                        oldPos += component.count;
                        if (componentPos && components[componentPos - 1].added) {
                            var tmp = components[componentPos - 1];
                            components[componentPos - 1] = components[componentPos];
                            components[componentPos] = tmp;
                        }
                    }
                }
                var lastComponent = components[componentLen - 1];
                if (componentLen > 1 && typeof lastComponent.value === "string" && (lastComponent.added || lastComponent.removed) && diff2.equals("", lastComponent.value)) {
                    components[componentLen - 2].value += lastComponent.value;
                    components.pop();
                }
                return components;
            }
            function clonePath(path6) {
                return {
                    newPos: path6.newPos,
                    components: path6.components.slice(0)
                };
            }
            var characterDiff = new Diff();
            function diffChars(oldStr, newStr, options2) {
                return characterDiff.diff(oldStr, newStr, options2);
            }
            function generateOptions(options2, defaults2) {
                if (typeof options2 === "function") {
                    defaults2.callback = options2;
                } else if (options2) {
                    for(var name2 in options2){
                        if (options2.hasOwnProperty(name2)) {
                            defaults2[name2] = options2[name2];
                        }
                    }
                }
                return defaults2;
            }
            var extendedWordChars = /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/;
            var reWhitespace = /\S/;
            var wordDiff = new Diff();
            wordDiff.equals = function(left, right) {
                if (this.options.ignoreCase) {
                    left = left.toLowerCase();
                    right = right.toLowerCase();
                }
                return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);
            };
            wordDiff.tokenize = function(value1) {
                var tokens = value1.split(/(\s+|[()[\]{}'"]|\b)/);
                for(var i = 0; i < tokens.length - 1; i++){
                    if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {
                        tokens[i] += tokens[i + 2];
                        tokens.splice(i + 1, 2);
                        i--;
                    }
                }
                return tokens;
            };
            function diffWords(oldStr, newStr, options2) {
                options2 = generateOptions(options2, {
                    ignoreWhitespace: true
                });
                return wordDiff.diff(oldStr, newStr, options2);
            }
            function diffWordsWithSpace(oldStr, newStr, options2) {
                return wordDiff.diff(oldStr, newStr, options2);
            }
            var lineDiff = new Diff();
            lineDiff.tokenize = function(value1) {
                var retLines = [], linesAndNewlines = value1.split(/(\n|\r\n)/);
                if (!linesAndNewlines[linesAndNewlines.length - 1]) {
                    linesAndNewlines.pop();
                }
                for(var i = 0; i < linesAndNewlines.length; i++){
                    var line2 = linesAndNewlines[i];
                    if (i % 2 && !this.options.newlineIsToken) {
                        retLines[retLines.length - 1] += line2;
                    } else {
                        if (this.options.ignoreWhitespace) {
                            line2 = line2.trim();
                        }
                        retLines.push(line2);
                    }
                }
                return retLines;
            };
            function diffLines(oldStr, newStr, callback) {
                return lineDiff.diff(oldStr, newStr, callback);
            }
            function diffTrimmedLines(oldStr, newStr, callback) {
                var options2 = generateOptions(callback, {
                    ignoreWhitespace: true
                });
                return lineDiff.diff(oldStr, newStr, options2);
            }
            var sentenceDiff = new Diff();
            sentenceDiff.tokenize = function(value1) {
                return value1.split(/(\S.+?[.!?])(?=\s+|$)/);
            };
            function diffSentences(oldStr, newStr, callback) {
                return sentenceDiff.diff(oldStr, newStr, callback);
            }
            var cssDiff = new Diff();
            cssDiff.tokenize = function(value1) {
                return value1.split(/([{}:;,]|\s+)/);
            };
            function diffCss(oldStr, newStr, callback) {
                return cssDiff.diff(oldStr, newStr, callback);
            }
            function _typeof(obj) {
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof2(obj2) {
                        return typeof obj2;
                    };
                } else {
                    _typeof = function _typeof2(obj2) {
                        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                    };
                }
                return _typeof(obj);
            }
            function _toConsumableArray(arr2) {
                return _arrayWithoutHoles(arr2) || _iterableToArray(arr2) || _nonIterableSpread();
            }
            function _arrayWithoutHoles(arr2) {
                if (Array.isArray(arr2)) {
                    for(var i = 0, arr22 = new Array(arr2.length); i < arr2.length; i++)arr22[i] = arr2[i];
                    return arr22;
                }
            }
            function _iterableToArray(iter) {
                if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
            }
            function _nonIterableSpread() {
                throw new TypeError("Invalid attempt to spread non-iterable instance");
            }
            var objectPrototypeToString = Object.prototype.toString;
            var jsonDiff = new Diff();
            jsonDiff.useLongestToken = true;
            jsonDiff.tokenize = lineDiff.tokenize;
            jsonDiff.castInput = function(value1) {
                var _this$options = this.options, undefinedReplacement = _this$options.undefinedReplacement, _this$options$stringi = _this$options.stringifyReplacer, stringifyReplacer = _this$options$stringi === void 0 ? function(k, v) {
                    return typeof v === "undefined" ? undefinedReplacement : v;
                } : _this$options$stringi;
                return typeof value1 === "string" ? value1 : JSON.stringify(canonicalize(value1, null, null, stringifyReplacer), stringifyReplacer, "  ");
            };
            jsonDiff.equals = function(left, right) {
                return Diff.prototype.equals.call(jsonDiff, left.replace(/,([\r\n])/g, "$1"), right.replace(/,([\r\n])/g, "$1"));
            };
            function diffJson(oldObj, newObj, options2) {
                return jsonDiff.diff(oldObj, newObj, options2);
            }
            function canonicalize(obj, stack, replacementStack, replacer, key) {
                stack = stack || [];
                replacementStack = replacementStack || [];
                if (replacer) {
                    obj = replacer(key, obj);
                }
                var i;
                for(i = 0; i < stack.length; i += 1){
                    if (stack[i] === obj) {
                        return replacementStack[i];
                    }
                }
                var canonicalizedObj;
                if ("[object Array]" === objectPrototypeToString.call(obj)) {
                    stack.push(obj);
                    canonicalizedObj = new Array(obj.length);
                    replacementStack.push(canonicalizedObj);
                    for(i = 0; i < obj.length; i += 1){
                        canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);
                    }
                    stack.pop();
                    replacementStack.pop();
                    return canonicalizedObj;
                }
                if (obj && obj.toJSON) {
                    obj = obj.toJSON();
                }
                if (_typeof(obj) === "object" && obj !== null) {
                    stack.push(obj);
                    canonicalizedObj = {};
                    replacementStack.push(canonicalizedObj);
                    var sortedKeys = [], _key;
                    for(_key in obj){
                        if (obj.hasOwnProperty(_key)) {
                            sortedKeys.push(_key);
                        }
                    }
                    sortedKeys.sort();
                    for(i = 0; i < sortedKeys.length; i += 1){
                        _key = sortedKeys[i];
                        canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);
                    }
                    stack.pop();
                    replacementStack.pop();
                } else {
                    canonicalizedObj = obj;
                }
                return canonicalizedObj;
            }
            var arrayDiff = new Diff();
            arrayDiff.tokenize = function(value1) {
                return value1.slice();
            };
            arrayDiff.join = arrayDiff.removeEmpty = function(value1) {
                return value1;
            };
            function diffArrays(oldArr, newArr, callback) {
                return arrayDiff.diff(oldArr, newArr, callback);
            }
            function parsePatch(uniDiff) {
                var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                var diffstr = uniDiff.split(/\r\n|[\n\v\f\r\x85]/), delimiters = uniDiff.match(/\r\n|[\n\v\f\r\x85]/g) || [], list = [], i = 0;
                function parseIndex() {
                    var index2 = {};
                    list.push(index2);
                    while(i < diffstr.length){
                        var line2 = diffstr[i];
                        if (/^(\-\-\-|\+\+\+|@@)\s/.test(line2)) {
                            break;
                        }
                        var header = /^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(line2);
                        if (header) {
                            index2.index = header[1];
                        }
                        i++;
                    }
                    parseFileHeader(index2);
                    parseFileHeader(index2);
                    index2.hunks = [];
                    while(i < diffstr.length){
                        var _line = diffstr[i];
                        if (/^(Index:|diff|\-\-\-|\+\+\+)\s/.test(_line)) {
                            break;
                        } else if (/^@@/.test(_line)) {
                            index2.hunks.push(parseHunk());
                        } else if (_line && options2.strict) {
                            throw new Error("Unknown line " + (i + 1) + " " + JSON.stringify(_line));
                        } else {
                            i++;
                        }
                    }
                }
                function parseFileHeader(index2) {
                    var fileHeader = /^(---|\+\+\+)\s+(.*)$/.exec(diffstr[i]);
                    if (fileHeader) {
                        var keyPrefix = fileHeader[1] === "---" ? "old" : "new";
                        var data2 = fileHeader[2].split("	", 2);
                        var fileName = data2[0].replace(/\\\\/g, "\\");
                        if (/^".*"$/.test(fileName)) {
                            fileName = fileName.substr(1, fileName.length - 2);
                        }
                        index2[keyPrefix + "FileName"] = fileName;
                        index2[keyPrefix + "Header"] = (data2[1] || "").trim();
                        i++;
                    }
                }
                function parseHunk() {
                    var chunkHeaderIndex = i, chunkHeaderLine = diffstr[i++], chunkHeader = chunkHeaderLine.split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/);
                    var hunk = {
                        oldStart: +chunkHeader[1],
                        oldLines: +chunkHeader[2] || 1,
                        newStart: +chunkHeader[3],
                        newLines: +chunkHeader[4] || 1,
                        lines: [],
                        linedelimiters: []
                    };
                    var addCount = 0, removeCount = 0;
                    for(; i < diffstr.length; i++){
                        if (diffstr[i].indexOf("--- ") === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf("+++ ") === 0 && diffstr[i + 2].indexOf("@@") === 0) {
                            break;
                        }
                        var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? " " : diffstr[i][0];
                        if (operation === "+" || operation === "-" || operation === " " || operation === "\\") {
                            hunk.lines.push(diffstr[i]);
                            hunk.linedelimiters.push(delimiters[i] || "\n");
                            if (operation === "+") {
                                addCount++;
                            } else if (operation === "-") {
                                removeCount++;
                            } else if (operation === " ") {
                                addCount++;
                                removeCount++;
                            }
                        } else {
                            break;
                        }
                    }
                    if (!addCount && hunk.newLines === 1) {
                        hunk.newLines = 0;
                    }
                    if (!removeCount && hunk.oldLines === 1) {
                        hunk.oldLines = 0;
                    }
                    if (options2.strict) {
                        if (addCount !== hunk.newLines) {
                            throw new Error("Added line count did not match for hunk at line " + (chunkHeaderIndex + 1));
                        }
                        if (removeCount !== hunk.oldLines) {
                            throw new Error("Removed line count did not match for hunk at line " + (chunkHeaderIndex + 1));
                        }
                    }
                    return hunk;
                }
                while(i < diffstr.length){
                    parseIndex();
                }
                return list;
            }
            function distanceIterator(start, minLine, maxLine) {
                var wantForward = true, backwardExhausted = false, forwardExhausted = false, localOffset = 1;
                return function iterator() {
                    if (wantForward && !forwardExhausted) {
                        if (backwardExhausted) {
                            localOffset++;
                        } else {
                            wantForward = false;
                        }
                        if (start + localOffset <= maxLine) {
                            return localOffset;
                        }
                        forwardExhausted = true;
                    }
                    if (!backwardExhausted) {
                        if (!forwardExhausted) {
                            wantForward = true;
                        }
                        if (minLine <= start - localOffset) {
                            return -localOffset++;
                        }
                        backwardExhausted = true;
                        return iterator();
                    }
                };
            }
            function applyPatch(source2, uniDiff) {
                var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                if (typeof uniDiff === "string") {
                    uniDiff = parsePatch(uniDiff);
                }
                if (Array.isArray(uniDiff)) {
                    if (uniDiff.length > 1) {
                        throw new Error("applyPatch only works with a single input.");
                    }
                    uniDiff = uniDiff[0];
                }
                var lines = source2.split(/\r\n|[\n\v\f\r\x85]/), delimiters = source2.match(/\r\n|[\n\v\f\r\x85]/g) || [], hunks = uniDiff.hunks, compareLine = options2.compareLine || function(lineNumber, line3, operation2, patchContent) {
                    return line3 === patchContent;
                }, errorCount = 0, fuzzFactor = options2.fuzzFactor || 0, minLine = 0, offset = 0, removeEOFNL, addEOFNL;
                function hunkFits(hunk2, toPos2) {
                    for(var j2 = 0; j2 < hunk2.lines.length; j2++){
                        var line3 = hunk2.lines[j2], operation2 = line3.length > 0 ? line3[0] : " ", content2 = line3.length > 0 ? line3.substr(1) : line3;
                        if (operation2 === " " || operation2 === "-") {
                            if (!compareLine(toPos2 + 1, lines[toPos2], operation2, content2)) {
                                errorCount++;
                                if (errorCount > fuzzFactor) {
                                    return false;
                                }
                            }
                            toPos2++;
                        }
                    }
                    return true;
                }
                for(var i = 0; i < hunks.length; i++){
                    var hunk = hunks[i], maxLine = lines.length - hunk.oldLines, localOffset = 0, toPos = offset + hunk.oldStart - 1;
                    var iterator = distanceIterator(toPos, minLine, maxLine);
                    for(; localOffset !== void 0; localOffset = iterator()){
                        if (hunkFits(hunk, toPos + localOffset)) {
                            hunk.offset = offset += localOffset;
                            break;
                        }
                    }
                    if (localOffset === void 0) {
                        return false;
                    }
                    minLine = hunk.offset + hunk.oldStart + hunk.oldLines;
                }
                var diffOffset = 0;
                for(var _i = 0; _i < hunks.length; _i++){
                    var _hunk = hunks[_i], _toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1;
                    diffOffset += _hunk.newLines - _hunk.oldLines;
                    if (_toPos < 0) {
                        _toPos = 0;
                    }
                    for(var j = 0; j < _hunk.lines.length; j++){
                        var line2 = _hunk.lines[j], operation = line2.length > 0 ? line2[0] : " ", content = line2.length > 0 ? line2.substr(1) : line2, delimiter = _hunk.linedelimiters[j];
                        if (operation === " ") {
                            _toPos++;
                        } else if (operation === "-") {
                            lines.splice(_toPos, 1);
                            delimiters.splice(_toPos, 1);
                        } else if (operation === "+") {
                            lines.splice(_toPos, 0, content);
                            delimiters.splice(_toPos, 0, delimiter);
                            _toPos++;
                        } else if (operation === "\\") {
                            var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;
                            if (previousOperation === "+") {
                                removeEOFNL = true;
                            } else if (previousOperation === "-") {
                                addEOFNL = true;
                            }
                        }
                    }
                }
                if (removeEOFNL) {
                    while(!lines[lines.length - 1]){
                        lines.pop();
                        delimiters.pop();
                    }
                } else if (addEOFNL) {
                    lines.push("");
                    delimiters.push("\n");
                }
                for(var _k = 0; _k < lines.length - 1; _k++){
                    lines[_k] = lines[_k] + delimiters[_k];
                }
                return lines.join("");
            }
            function applyPatches(uniDiff, options2) {
                if (typeof uniDiff === "string") {
                    uniDiff = parsePatch(uniDiff);
                }
                var currentIndex = 0;
                function processIndex() {
                    var index2 = uniDiff[currentIndex++];
                    if (!index2) {
                        return options2.complete();
                    }
                    options2.loadFile(index2, function(err, data2) {
                        if (err) {
                            return options2.complete(err);
                        }
                        var updatedContent = applyPatch(data2, index2, options2);
                        options2.patched(index2, updatedContent, function(err2) {
                            if (err2) {
                                return options2.complete(err2);
                            }
                            processIndex();
                        });
                    });
                }
                processIndex();
            }
            function structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options2) {
                if (!options2) {
                    options2 = {};
                }
                if (typeof options2.context === "undefined") {
                    options2.context = 4;
                }
                var diff2 = diffLines(oldStr, newStr, options2);
                diff2.push({
                    value: "",
                    lines: []
                });
                function contextLines(lines) {
                    return lines.map(function(entry) {
                        return " " + entry;
                    });
                }
                var hunks = [];
                var oldRangeStart = 0, newRangeStart = 0, curRange = [], oldLine = 1, newLine = 1;
                var _loop = function _loop2(i2) {
                    var current = diff2[i2], lines = current.lines || current.value.replace(/\n$/, "").split("\n");
                    current.lines = lines;
                    if (current.added || current.removed) {
                        var _curRange;
                        if (!oldRangeStart) {
                            var prev = diff2[i2 - 1];
                            oldRangeStart = oldLine;
                            newRangeStart = newLine;
                            if (prev) {
                                curRange = options2.context > 0 ? contextLines(prev.lines.slice(-options2.context)) : [];
                                oldRangeStart -= curRange.length;
                                newRangeStart -= curRange.length;
                            }
                        }
                        (_curRange = curRange).push.apply(_curRange, _toConsumableArray(lines.map(function(entry) {
                            return (current.added ? "+" : "-") + entry;
                        })));
                        if (current.added) {
                            newLine += lines.length;
                        } else {
                            oldLine += lines.length;
                        }
                    } else {
                        if (oldRangeStart) {
                            if (lines.length <= options2.context * 2 && i2 < diff2.length - 2) {
                                var _curRange2;
                                (_curRange2 = curRange).push.apply(_curRange2, _toConsumableArray(contextLines(lines)));
                            } else {
                                var _curRange3;
                                var contextSize = Math.min(lines.length, options2.context);
                                (_curRange3 = curRange).push.apply(_curRange3, _toConsumableArray(contextLines(lines.slice(0, contextSize))));
                                var hunk = {
                                    oldStart: oldRangeStart,
                                    oldLines: oldLine - oldRangeStart + contextSize,
                                    newStart: newRangeStart,
                                    newLines: newLine - newRangeStart + contextSize,
                                    lines: curRange
                                };
                                if (i2 >= diff2.length - 2 && lines.length <= options2.context) {
                                    var oldEOFNewline = /\n$/.test(oldStr);
                                    var newEOFNewline = /\n$/.test(newStr);
                                    var noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;
                                    if (!oldEOFNewline && noNlBeforeAdds) {
                                        curRange.splice(hunk.oldLines, 0, "\\ No newline at end of file");
                                    }
                                    if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) {
                                        curRange.push("\\ No newline at end of file");
                                    }
                                }
                                hunks.push(hunk);
                                oldRangeStart = 0;
                                newRangeStart = 0;
                                curRange = [];
                            }
                        }
                        oldLine += lines.length;
                        newLine += lines.length;
                    }
                };
                for(var i = 0; i < diff2.length; i++){
                    _loop(i);
                }
                return {
                    oldFileName,
                    newFileName,
                    oldHeader,
                    newHeader,
                    hunks
                };
            }
            function createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options2) {
                var diff2 = structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options2);
                var ret = [];
                if (oldFileName == newFileName) {
                    ret.push("Index: " + oldFileName);
                }
                ret.push("===================================================================");
                ret.push("--- " + diff2.oldFileName + (typeof diff2.oldHeader === "undefined" ? "" : "	" + diff2.oldHeader));
                ret.push("+++ " + diff2.newFileName + (typeof diff2.newHeader === "undefined" ? "" : "	" + diff2.newHeader));
                for(var i = 0; i < diff2.hunks.length; i++){
                    var hunk = diff2.hunks[i];
                    ret.push("@@ -" + hunk.oldStart + "," + hunk.oldLines + " +" + hunk.newStart + "," + hunk.newLines + " @@");
                    ret.push.apply(ret, hunk.lines);
                }
                return ret.join("\n") + "\n";
            }
            function createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options2) {
                return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options2);
            }
            function arrayEqual(a3, b) {
                if (a3.length !== b.length) {
                    return false;
                }
                return arrayStartsWith(a3, b);
            }
            function arrayStartsWith(array2, start) {
                if (start.length > array2.length) {
                    return false;
                }
                for(var i = 0; i < start.length; i++){
                    if (start[i] !== array2[i]) {
                        return false;
                    }
                }
                return true;
            }
            function calcLineCount(hunk) {
                var _calcOldNewLineCount = calcOldNewLineCount(hunk.lines), oldLines = _calcOldNewLineCount.oldLines, newLines = _calcOldNewLineCount.newLines;
                if (oldLines !== void 0) {
                    hunk.oldLines = oldLines;
                } else {
                    delete hunk.oldLines;
                }
                if (newLines !== void 0) {
                    hunk.newLines = newLines;
                } else {
                    delete hunk.newLines;
                }
            }
            function merge(mine, theirs, base2) {
                mine = loadPatch(mine, base2);
                theirs = loadPatch(theirs, base2);
                var ret = {};
                if (mine.index || theirs.index) {
                    ret.index = mine.index || theirs.index;
                }
                if (mine.newFileName || theirs.newFileName) {
                    if (!fileNameChanged(mine)) {
                        ret.oldFileName = theirs.oldFileName || mine.oldFileName;
                        ret.newFileName = theirs.newFileName || mine.newFileName;
                        ret.oldHeader = theirs.oldHeader || mine.oldHeader;
                        ret.newHeader = theirs.newHeader || mine.newHeader;
                    } else if (!fileNameChanged(theirs)) {
                        ret.oldFileName = mine.oldFileName;
                        ret.newFileName = mine.newFileName;
                        ret.oldHeader = mine.oldHeader;
                        ret.newHeader = mine.newHeader;
                    } else {
                        ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);
                        ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);
                        ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);
                        ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);
                    }
                }
                ret.hunks = [];
                var mineIndex = 0, theirsIndex = 0, mineOffset = 0, theirsOffset = 0;
                while(mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length){
                    var mineCurrent = mine.hunks[mineIndex] || {
                        oldStart: Infinity
                    }, theirsCurrent = theirs.hunks[theirsIndex] || {
                        oldStart: Infinity
                    };
                    if (hunkBefore(mineCurrent, theirsCurrent)) {
                        ret.hunks.push(cloneHunk(mineCurrent, mineOffset));
                        mineIndex++;
                        theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;
                    } else if (hunkBefore(theirsCurrent, mineCurrent)) {
                        ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));
                        theirsIndex++;
                        mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;
                    } else {
                        var mergedHunk = {
                            oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),
                            oldLines: 0,
                            newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),
                            newLines: 0,
                            lines: []
                        };
                        mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);
                        theirsIndex++;
                        mineIndex++;
                        ret.hunks.push(mergedHunk);
                    }
                }
                return ret;
            }
            function loadPatch(param2, base2) {
                if (typeof param2 === "string") {
                    if (/^@@/m.test(param2) || /^Index:/m.test(param2)) {
                        return parsePatch(param2)[0];
                    }
                    if (!base2) {
                        throw new Error("Must provide a base reference or pass in a patch");
                    }
                    return structuredPatch(void 0, void 0, base2, param2);
                }
                return param2;
            }
            function fileNameChanged(patch) {
                return patch.newFileName && patch.newFileName !== patch.oldFileName;
            }
            function selectField(index2, mine, theirs) {
                if (mine === theirs) {
                    return mine;
                } else {
                    index2.conflict = true;
                    return {
                        mine,
                        theirs
                    };
                }
            }
            function hunkBefore(test, check) {
                return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;
            }
            function cloneHunk(hunk, offset) {
                return {
                    oldStart: hunk.oldStart,
                    oldLines: hunk.oldLines,
                    newStart: hunk.newStart + offset,
                    newLines: hunk.newLines,
                    lines: hunk.lines
                };
            }
            function mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {
                var mine = {
                    offset: mineOffset,
                    lines: mineLines,
                    index: 0
                }, their = {
                    offset: theirOffset,
                    lines: theirLines,
                    index: 0
                };
                insertLeading(hunk, mine, their);
                insertLeading(hunk, their, mine);
                while(mine.index < mine.lines.length && their.index < their.lines.length){
                    var mineCurrent = mine.lines[mine.index], theirCurrent = their.lines[their.index];
                    if ((mineCurrent[0] === "-" || mineCurrent[0] === "+") && (theirCurrent[0] === "-" || theirCurrent[0] === "+")) {
                        mutualChange(hunk, mine, their);
                    } else if (mineCurrent[0] === "+" && theirCurrent[0] === " ") {
                        var _hunk$lines;
                        (_hunk$lines = hunk.lines).push.apply(_hunk$lines, _toConsumableArray(collectChange(mine)));
                    } else if (theirCurrent[0] === "+" && mineCurrent[0] === " ") {
                        var _hunk$lines2;
                        (_hunk$lines2 = hunk.lines).push.apply(_hunk$lines2, _toConsumableArray(collectChange(their)));
                    } else if (mineCurrent[0] === "-" && theirCurrent[0] === " ") {
                        removal(hunk, mine, their);
                    } else if (theirCurrent[0] === "-" && mineCurrent[0] === " ") {
                        removal(hunk, their, mine, true);
                    } else if (mineCurrent === theirCurrent) {
                        hunk.lines.push(mineCurrent);
                        mine.index++;
                        their.index++;
                    } else {
                        conflict(hunk, collectChange(mine), collectChange(their));
                    }
                }
                insertTrailing(hunk, mine);
                insertTrailing(hunk, their);
                calcLineCount(hunk);
            }
            function mutualChange(hunk, mine, their) {
                var myChanges = collectChange(mine), theirChanges = collectChange(their);
                if (allRemoves(myChanges) && allRemoves(theirChanges)) {
                    if (arrayStartsWith(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {
                        var _hunk$lines3;
                        (_hunk$lines3 = hunk.lines).push.apply(_hunk$lines3, _toConsumableArray(myChanges));
                        return;
                    } else if (arrayStartsWith(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {
                        var _hunk$lines4;
                        (_hunk$lines4 = hunk.lines).push.apply(_hunk$lines4, _toConsumableArray(theirChanges));
                        return;
                    }
                } else if (arrayEqual(myChanges, theirChanges)) {
                    var _hunk$lines5;
                    (_hunk$lines5 = hunk.lines).push.apply(_hunk$lines5, _toConsumableArray(myChanges));
                    return;
                }
                conflict(hunk, myChanges, theirChanges);
            }
            function removal(hunk, mine, their, swap2) {
                var myChanges = collectChange(mine), theirChanges = collectContext(their, myChanges);
                if (theirChanges.merged) {
                    var _hunk$lines6;
                    (_hunk$lines6 = hunk.lines).push.apply(_hunk$lines6, _toConsumableArray(theirChanges.merged));
                } else {
                    conflict(hunk, swap2 ? theirChanges : myChanges, swap2 ? myChanges : theirChanges);
                }
            }
            function conflict(hunk, mine, their) {
                hunk.conflict = true;
                hunk.lines.push({
                    conflict: true,
                    mine,
                    theirs: their
                });
            }
            function insertLeading(hunk, insert, their) {
                while(insert.offset < their.offset && insert.index < insert.lines.length){
                    var line2 = insert.lines[insert.index++];
                    hunk.lines.push(line2);
                    insert.offset++;
                }
            }
            function insertTrailing(hunk, insert) {
                while(insert.index < insert.lines.length){
                    var line2 = insert.lines[insert.index++];
                    hunk.lines.push(line2);
                }
            }
            function collectChange(state) {
                var ret = [], operation = state.lines[state.index][0];
                while(state.index < state.lines.length){
                    var line2 = state.lines[state.index];
                    if (operation === "-" && line2[0] === "+") {
                        operation = "+";
                    }
                    if (operation === line2[0]) {
                        ret.push(line2);
                        state.index++;
                    } else {
                        break;
                    }
                }
                return ret;
            }
            function collectContext(state, matchChanges) {
                var changes = [], merged = [], matchIndex = 0, contextChanges = false, conflicted = false;
                while(matchIndex < matchChanges.length && state.index < state.lines.length){
                    var change = state.lines[state.index], match = matchChanges[matchIndex];
                    if (match[0] === "+") {
                        break;
                    }
                    contextChanges = contextChanges || change[0] !== " ";
                    merged.push(match);
                    matchIndex++;
                    if (change[0] === "+") {
                        conflicted = true;
                        while(change[0] === "+"){
                            changes.push(change);
                            change = state.lines[++state.index];
                        }
                    }
                    if (match.substr(1) === change.substr(1)) {
                        changes.push(change);
                        state.index++;
                    } else {
                        conflicted = true;
                    }
                }
                if ((matchChanges[matchIndex] || "")[0] === "+" && contextChanges) {
                    conflicted = true;
                }
                if (conflicted) {
                    return changes;
                }
                while(matchIndex < matchChanges.length){
                    merged.push(matchChanges[matchIndex++]);
                }
                return {
                    merged,
                    changes
                };
            }
            function allRemoves(changes) {
                return changes.reduce(function(prev, change) {
                    return prev && change[0] === "-";
                }, true);
            }
            function skipRemoveSuperset(state, removeChanges, delta) {
                for(var i = 0; i < delta; i++){
                    var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);
                    if (state.lines[state.index + i] !== " " + changeContent) {
                        return false;
                    }
                }
                state.index += delta;
                return true;
            }
            function calcOldNewLineCount(lines) {
                var oldLines = 0;
                var newLines = 0;
                lines.forEach(function(line2) {
                    if (typeof line2 !== "string") {
                        var myCount = calcOldNewLineCount(line2.mine);
                        var theirCount = calcOldNewLineCount(line2.theirs);
                        if (oldLines !== void 0) {
                            if (myCount.oldLines === theirCount.oldLines) {
                                oldLines += myCount.oldLines;
                            } else {
                                oldLines = void 0;
                            }
                        }
                        if (newLines !== void 0) {
                            if (myCount.newLines === theirCount.newLines) {
                                newLines += myCount.newLines;
                            } else {
                                newLines = void 0;
                            }
                        }
                    } else {
                        if (newLines !== void 0 && (line2[0] === "+" || line2[0] === " ")) {
                            newLines++;
                        }
                        if (oldLines !== void 0 && (line2[0] === "-" || line2[0] === " ")) {
                            oldLines++;
                        }
                    }
                });
                return {
                    oldLines,
                    newLines
                };
            }
            function convertChangesToDMP(changes) {
                var ret = [], change, operation;
                for(var i = 0; i < changes.length; i++){
                    change = changes[i];
                    if (change.added) {
                        operation = 1;
                    } else if (change.removed) {
                        operation = -1;
                    } else {
                        operation = 0;
                    }
                    ret.push([
                        operation,
                        change.value
                    ]);
                }
                return ret;
            }
            function convertChangesToXML(changes) {
                var ret = [];
                for(var i = 0; i < changes.length; i++){
                    var change = changes[i];
                    if (change.added) {
                        ret.push("<ins>");
                    } else if (change.removed) {
                        ret.push("<del>");
                    }
                    ret.push(escapeHTML(change.value));
                    if (change.added) {
                        ret.push("</ins>");
                    } else if (change.removed) {
                        ret.push("</del>");
                    }
                }
                return ret.join("");
            }
            function escapeHTML(s) {
                var n = s;
                n = n.replace(/&/g, "&amp;");
                n = n.replace(/</g, "&lt;");
                n = n.replace(/>/g, "&gt;");
                n = n.replace(/"/g, "&quot;");
                return n;
            }
            var index_es6 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                Diff,
                diffChars,
                diffWords,
                diffWordsWithSpace,
                diffLines,
                diffTrimmedLines,
                diffSentences,
                diffCss,
                diffJson,
                diffArrays,
                structuredPatch,
                createTwoFilesPatch,
                createPatch,
                applyPatch,
                applyPatches,
                parsePatch,
                merge,
                convertChangesToDMP,
                convertChangesToXML,
                canonicalize
            });
            var _shim_fs = {};
            var _shim_fs$1 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                "default": _shim_fs
            });
            const sep = /[\\/]/;
            function extname2(path6) {
                const filename = basename4(path6);
                const dotIndex = filename.lastIndexOf(".");
                if (dotIndex === -1) return "";
                return filename.slice(dotIndex);
            }
            function basename4(path6) {
                return path6.split(sep).pop();
            }
            function isAbsolute2() {
                return true;
            }
            var path5 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                extname: extname2,
                basename: basename4,
                isAbsolute: isAbsolute2
            });
            var global$1 = typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
            var lookup = [];
            var revLookup = [];
            var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
            var inited = false;
            function init() {
                inited = true;
                var code2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                for(var i = 0, len = code2.length; i < len; ++i){
                    lookup[i] = code2[i];
                    revLookup[code2.charCodeAt(i)] = i;
                }
                revLookup["-".charCodeAt(0)] = 62;
                revLookup["_".charCodeAt(0)] = 63;
            }
            function toByteArray(b64) {
                if (!inited) {
                    init();
                }
                var i, j, l, tmp, placeHolders, arr2;
                var len = b64.length;
                if (len % 4 > 0) {
                    throw new Error("Invalid string. Length must be a multiple of 4");
                }
                placeHolders = b64[len - 2] === "=" ? 2 : b64[len - 1] === "=" ? 1 : 0;
                arr2 = new Arr(len * 3 / 4 - placeHolders);
                l = placeHolders > 0 ? len - 4 : len;
                var L = 0;
                for(i = 0, j = 0; i < l; i += 4, j += 3){
                    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
                    arr2[L++] = tmp >> 16 & 255;
                    arr2[L++] = tmp >> 8 & 255;
                    arr2[L++] = tmp & 255;
                }
                if (placeHolders === 2) {
                    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
                    arr2[L++] = tmp & 255;
                } else if (placeHolders === 1) {
                    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
                    arr2[L++] = tmp >> 8 & 255;
                    arr2[L++] = tmp & 255;
                }
                return arr2;
            }
            function tripletToBase64(num) {
                return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
            }
            function encodeChunk(uint8, start, end) {
                var tmp;
                var output2 = [];
                for(var i = start; i < end; i += 3){
                    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
                    output2.push(tripletToBase64(tmp));
                }
                return output2.join("");
            }
            function fromByteArray(uint8) {
                if (!inited) {
                    init();
                }
                var tmp;
                var len = uint8.length;
                var extraBytes = len % 3;
                var output2 = "";
                var parts = [];
                var maxChunkLength = 16383;
                for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength){
                    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
                }
                if (extraBytes === 1) {
                    tmp = uint8[len - 1];
                    output2 += lookup[tmp >> 2];
                    output2 += lookup[tmp << 4 & 63];
                    output2 += "==";
                } else if (extraBytes === 2) {
                    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
                    output2 += lookup[tmp >> 10];
                    output2 += lookup[tmp >> 4 & 63];
                    output2 += lookup[tmp << 2 & 63];
                    output2 += "=";
                }
                parts.push(output2);
                return parts.join("");
            }
            function read(buffer, offset, isLE, mLen, nBytes) {
                var e, m;
                var eLen = nBytes * 8 - mLen - 1;
                var eMax = (1 << eLen) - 1;
                var eBias = eMax >> 1;
                var nBits = -7;
                var i = isLE ? nBytes - 1 : 0;
                var d = isLE ? -1 : 1;
                var s = buffer[offset + i];
                i += d;
                e = s & (1 << -nBits) - 1;
                s >>= -nBits;
                nBits += eLen;
                for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8){}
                m = e & (1 << -nBits) - 1;
                e >>= -nBits;
                nBits += mLen;
                for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8){}
                if (e === 0) {
                    e = 1 - eBias;
                } else if (e === eMax) {
                    return m ? NaN : (s ? -1 : 1) * Infinity;
                } else {
                    m = m + Math.pow(2, mLen);
                    e = e - eBias;
                }
                return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
            }
            function write(buffer, value1, offset, isLE, mLen, nBytes) {
                var e, m, c;
                var eLen = nBytes * 8 - mLen - 1;
                var eMax = (1 << eLen) - 1;
                var eBias = eMax >> 1;
                var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
                var i = isLE ? 0 : nBytes - 1;
                var d = isLE ? 1 : -1;
                var s = value1 < 0 || value1 === 0 && 1 / value1 < 0 ? 1 : 0;
                value1 = Math.abs(value1);
                if (isNaN(value1) || value1 === Infinity) {
                    m = isNaN(value1) ? 1 : 0;
                    e = eMax;
                } else {
                    e = Math.floor(Math.log(value1) / Math.LN2);
                    if (value1 * (c = Math.pow(2, -e)) < 1) {
                        e--;
                        c *= 2;
                    }
                    if (e + eBias >= 1) {
                        value1 += rt / c;
                    } else {
                        value1 += rt * Math.pow(2, 1 - eBias);
                    }
                    if (value1 * c >= 2) {
                        e++;
                        c /= 2;
                    }
                    if (e + eBias >= eMax) {
                        m = 0;
                        e = eMax;
                    } else if (e + eBias >= 1) {
                        m = (value1 * c - 1) * Math.pow(2, mLen);
                        e = e + eBias;
                    } else {
                        m = value1 * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                        e = 0;
                    }
                }
                for(; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8){}
                e = e << mLen | m;
                eLen += mLen;
                for(; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8){}
                buffer[offset + i - d] |= s * 128;
            }
            var toString = {}.toString;
            var isArray = Array.isArray || function(arr2) {
                return toString.call(arr2) == "[object Array]";
            };
            var INSPECT_MAX_BYTES = 50;
            Buffer2.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== void 0 ? global$1.TYPED_ARRAY_SUPPORT : true;
            function kMaxLength() {
                return Buffer2.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
            }
            function createBuffer(that, length) {
                if (kMaxLength() < length) {
                    throw new RangeError("Invalid typed array length");
                }
                if (Buffer2.TYPED_ARRAY_SUPPORT) {
                    that = new Uint8Array(length);
                    that.__proto__ = Buffer2.prototype;
                } else {
                    if (that === null) {
                        that = new Buffer2(length);
                    }
                    that.length = length;
                }
                return that;
            }
            function Buffer2(arg, encodingOrOffset, length) {
                if (!Buffer2.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer2)) {
                    return new Buffer2(arg, encodingOrOffset, length);
                }
                if (typeof arg === "number") {
                    if (typeof encodingOrOffset === "string") {
                        throw new Error("If encoding is specified then the first argument must be a string");
                    }
                    return allocUnsafe(this, arg);
                }
                return from(this, arg, encodingOrOffset, length);
            }
            Buffer2.poolSize = 8192;
            Buffer2._augment = function(arr2) {
                arr2.__proto__ = Buffer2.prototype;
                return arr2;
            };
            function from(that, value1, encodingOrOffset, length) {
                if (typeof value1 === "number") {
                    throw new TypeError('"value" argument must not be a number');
                }
                if (typeof ArrayBuffer !== "undefined" && value1 instanceof ArrayBuffer) {
                    return fromArrayBuffer(that, value1, encodingOrOffset, length);
                }
                if (typeof value1 === "string") {
                    return fromString(that, value1, encodingOrOffset);
                }
                return fromObject(that, value1);
            }
            Buffer2.from = function(value1, encodingOrOffset, length) {
                return from(null, value1, encodingOrOffset, length);
            };
            if (Buffer2.TYPED_ARRAY_SUPPORT) {
                Buffer2.prototype.__proto__ = Uint8Array.prototype;
                Buffer2.__proto__ = Uint8Array;
            }
            function assertSize(size) {
                if (typeof size !== "number") {
                    throw new TypeError('"size" argument must be a number');
                } else if (size < 0) {
                    throw new RangeError('"size" argument must not be negative');
                }
            }
            function alloc(that, size, fill2, encoding) {
                assertSize(size);
                if (size <= 0) {
                    return createBuffer(that, size);
                }
                if (fill2 !== void 0) {
                    return typeof encoding === "string" ? createBuffer(that, size).fill(fill2, encoding) : createBuffer(that, size).fill(fill2);
                }
                return createBuffer(that, size);
            }
            Buffer2.alloc = function(size, fill2, encoding) {
                return alloc(null, size, fill2, encoding);
            };
            function allocUnsafe(that, size) {
                assertSize(size);
                that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
                if (!Buffer2.TYPED_ARRAY_SUPPORT) {
                    for(var i = 0; i < size; ++i){
                        that[i] = 0;
                    }
                }
                return that;
            }
            Buffer2.allocUnsafe = function(size) {
                return allocUnsafe(null, size);
            };
            Buffer2.allocUnsafeSlow = function(size) {
                return allocUnsafe(null, size);
            };
            function fromString(that, string3, encoding) {
                if (typeof encoding !== "string" || encoding === "") {
                    encoding = "utf8";
                }
                if (!Buffer2.isEncoding(encoding)) {
                    throw new TypeError('"encoding" must be a valid string encoding');
                }
                var length = byteLength(string3, encoding) | 0;
                that = createBuffer(that, length);
                var actual = that.write(string3, encoding);
                if (actual !== length) {
                    that = that.slice(0, actual);
                }
                return that;
            }
            function fromArrayLike(that, array2) {
                var length = array2.length < 0 ? 0 : checked(array2.length) | 0;
                that = createBuffer(that, length);
                for(var i = 0; i < length; i += 1){
                    that[i] = array2[i] & 255;
                }
                return that;
            }
            function fromArrayBuffer(that, array2, byteOffset, length) {
                array2.byteLength;
                if (byteOffset < 0 || array2.byteLength < byteOffset) {
                    throw new RangeError("'offset' is out of bounds");
                }
                if (array2.byteLength < byteOffset + (length || 0)) {
                    throw new RangeError("'length' is out of bounds");
                }
                if (byteOffset === void 0 && length === void 0) {
                    array2 = new Uint8Array(array2);
                } else if (length === void 0) {
                    array2 = new Uint8Array(array2, byteOffset);
                } else {
                    array2 = new Uint8Array(array2, byteOffset, length);
                }
                if (Buffer2.TYPED_ARRAY_SUPPORT) {
                    that = array2;
                    that.__proto__ = Buffer2.prototype;
                } else {
                    that = fromArrayLike(that, array2);
                }
                return that;
            }
            function fromObject(that, obj) {
                if (internalIsBuffer(obj)) {
                    var len = checked(obj.length) | 0;
                    that = createBuffer(that, len);
                    if (that.length === 0) {
                        return that;
                    }
                    obj.copy(that, 0, 0, len);
                    return that;
                }
                if (obj) {
                    if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
                        if (typeof obj.length !== "number" || isnan(obj.length)) {
                            return createBuffer(that, 0);
                        }
                        return fromArrayLike(that, obj);
                    }
                    if (obj.type === "Buffer" && isArray(obj.data)) {
                        return fromArrayLike(that, obj.data);
                    }
                }
                throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
            }
            function checked(length) {
                if (length >= kMaxLength()) {
                    throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
                }
                return length | 0;
            }
            Buffer2.isBuffer = isBuffer;
            function internalIsBuffer(b) {
                return !!(b != null && b._isBuffer);
            }
            Buffer2.compare = function compare2(a3, b) {
                if (!internalIsBuffer(a3) || !internalIsBuffer(b)) {
                    throw new TypeError("Arguments must be Buffers");
                }
                if (a3 === b) return 0;
                var x = a3.length;
                var y = b.length;
                for(var i = 0, len = Math.min(x, y); i < len; ++i){
                    if (a3[i] !== b[i]) {
                        x = a3[i];
                        y = b[i];
                        break;
                    }
                }
                if (x < y) return -1;
                if (y < x) return 1;
                return 0;
            };
            Buffer2.isEncoding = function isEncoding(encoding) {
                switch(String(encoding).toLowerCase()){
                    case "hex":
                    case "utf8":
                    case "utf-8":
                    case "ascii":
                    case "latin1":
                    case "binary":
                    case "base64":
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                        return true;
                    default:
                        return false;
                }
            };
            Buffer2.concat = function concat2(list, length) {
                if (!isArray(list)) {
                    throw new TypeError('"list" argument must be an Array of Buffers');
                }
                if (list.length === 0) {
                    return Buffer2.alloc(0);
                }
                var i;
                if (length === void 0) {
                    length = 0;
                    for(i = 0; i < list.length; ++i){
                        length += list[i].length;
                    }
                }
                var buffer = Buffer2.allocUnsafe(length);
                var pos = 0;
                for(i = 0; i < list.length; ++i){
                    var buf = list[i];
                    if (!internalIsBuffer(buf)) {
                        throw new TypeError('"list" argument must be an Array of Buffers');
                    }
                    buf.copy(buffer, pos);
                    pos += buf.length;
                }
                return buffer;
            };
            function byteLength(string3, encoding) {
                if (internalIsBuffer(string3)) {
                    return string3.length;
                }
                if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string3) || string3 instanceof ArrayBuffer)) {
                    return string3.byteLength;
                }
                if (typeof string3 !== "string") {
                    string3 = "" + string3;
                }
                var len = string3.length;
                if (len === 0) return 0;
                var loweredCase = false;
                for(;;){
                    switch(encoding){
                        case "ascii":
                        case "latin1":
                        case "binary":
                            return len;
                        case "utf8":
                        case "utf-8":
                        case void 0:
                            return utf8ToBytes(string3).length;
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return len * 2;
                        case "hex":
                            return len >>> 1;
                        case "base64":
                            return base64ToBytes(string3).length;
                        default:
                            if (loweredCase) return utf8ToBytes(string3).length;
                            encoding = ("" + encoding).toLowerCase();
                            loweredCase = true;
                    }
                }
            }
            Buffer2.byteLength = byteLength;
            function slowToString(encoding, start, end) {
                var loweredCase = false;
                if (start === void 0 || start < 0) {
                    start = 0;
                }
                if (start > this.length) {
                    return "";
                }
                if (end === void 0 || end > this.length) {
                    end = this.length;
                }
                if (end <= 0) {
                    return "";
                }
                end >>>= 0;
                start >>>= 0;
                if (end <= start) {
                    return "";
                }
                if (!encoding) encoding = "utf8";
                while(true){
                    switch(encoding){
                        case "hex":
                            return hexSlice(this, start, end);
                        case "utf8":
                        case "utf-8":
                            return utf8Slice(this, start, end);
                        case "ascii":
                            return asciiSlice(this, start, end);
                        case "latin1":
                        case "binary":
                            return latin1Slice(this, start, end);
                        case "base64":
                            return base64Slice(this, start, end);
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return utf16leSlice(this, start, end);
                        default:
                            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                            encoding = (encoding + "").toLowerCase();
                            loweredCase = true;
                    }
                }
            }
            Buffer2.prototype._isBuffer = true;
            function swap(b, n, m) {
                var i = b[n];
                b[n] = b[m];
                b[m] = i;
            }
            Buffer2.prototype.swap16 = function swap16() {
                var len = this.length;
                if (len % 2 !== 0) {
                    throw new RangeError("Buffer size must be a multiple of 16-bits");
                }
                for(var i = 0; i < len; i += 2){
                    swap(this, i, i + 1);
                }
                return this;
            };
            Buffer2.prototype.swap32 = function swap32() {
                var len = this.length;
                if (len % 4 !== 0) {
                    throw new RangeError("Buffer size must be a multiple of 32-bits");
                }
                for(var i = 0; i < len; i += 4){
                    swap(this, i, i + 3);
                    swap(this, i + 1, i + 2);
                }
                return this;
            };
            Buffer2.prototype.swap64 = function swap64() {
                var len = this.length;
                if (len % 8 !== 0) {
                    throw new RangeError("Buffer size must be a multiple of 64-bits");
                }
                for(var i = 0; i < len; i += 8){
                    swap(this, i, i + 7);
                    swap(this, i + 1, i + 6);
                    swap(this, i + 2, i + 5);
                    swap(this, i + 3, i + 4);
                }
                return this;
            };
            Buffer2.prototype.toString = function toString2() {
                var length = this.length | 0;
                if (length === 0) return "";
                if (arguments.length === 0) return utf8Slice(this, 0, length);
                return slowToString.apply(this, arguments);
            };
            Buffer2.prototype.equals = function equals3(b) {
                if (!internalIsBuffer(b)) throw new TypeError("Argument must be a Buffer");
                if (this === b) return true;
                return Buffer2.compare(this, b) === 0;
            };
            Buffer2.prototype.inspect = function inspect() {
                var str = "";
                var max = INSPECT_MAX_BYTES;
                if (this.length > 0) {
                    str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
                    if (this.length > max) str += " ... ";
                }
                return "<Buffer " + str + ">";
            };
            Buffer2.prototype.compare = function compare2(target, start, end, thisStart, thisEnd) {
                if (!internalIsBuffer(target)) {
                    throw new TypeError("Argument must be a Buffer");
                }
                if (start === void 0) {
                    start = 0;
                }
                if (end === void 0) {
                    end = target ? target.length : 0;
                }
                if (thisStart === void 0) {
                    thisStart = 0;
                }
                if (thisEnd === void 0) {
                    thisEnd = this.length;
                }
                if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                    throw new RangeError("out of range index");
                }
                if (thisStart >= thisEnd && start >= end) {
                    return 0;
                }
                if (thisStart >= thisEnd) {
                    return -1;
                }
                if (start >= end) {
                    return 1;
                }
                start >>>= 0;
                end >>>= 0;
                thisStart >>>= 0;
                thisEnd >>>= 0;
                if (this === target) return 0;
                var x = thisEnd - thisStart;
                var y = end - start;
                var len = Math.min(x, y);
                var thisCopy = this.slice(thisStart, thisEnd);
                var targetCopy = target.slice(start, end);
                for(var i = 0; i < len; ++i){
                    if (thisCopy[i] !== targetCopy[i]) {
                        x = thisCopy[i];
                        y = targetCopy[i];
                        break;
                    }
                }
                if (x < y) return -1;
                if (y < x) return 1;
                return 0;
            };
            function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir2) {
                if (buffer.length === 0) return -1;
                if (typeof byteOffset === "string") {
                    encoding = byteOffset;
                    byteOffset = 0;
                } else if (byteOffset > 2147483647) {
                    byteOffset = 2147483647;
                } else if (byteOffset < -2147483648) {
                    byteOffset = -2147483648;
                }
                byteOffset = +byteOffset;
                if (isNaN(byteOffset)) {
                    byteOffset = dir2 ? 0 : buffer.length - 1;
                }
                if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
                if (byteOffset >= buffer.length) {
                    if (dir2) return -1;
                    else byteOffset = buffer.length - 1;
                } else if (byteOffset < 0) {
                    if (dir2) byteOffset = 0;
                    else return -1;
                }
                if (typeof val === "string") {
                    val = Buffer2.from(val, encoding);
                }
                if (internalIsBuffer(val)) {
                    if (val.length === 0) {
                        return -1;
                    }
                    return arrayIndexOf(buffer, val, byteOffset, encoding, dir2);
                } else if (typeof val === "number") {
                    val = val & 255;
                    if (Buffer2.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
                        if (dir2) {
                            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                        } else {
                            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                        }
                    }
                    return arrayIndexOf(buffer, [
                        val
                    ], byteOffset, encoding, dir2);
                }
                throw new TypeError("val must be string, number or Buffer");
            }
            function arrayIndexOf(arr2, val, byteOffset, encoding, dir2) {
                var indexSize = 1;
                var arrLength = arr2.length;
                var valLength = val.length;
                if (encoding !== void 0) {
                    encoding = String(encoding).toLowerCase();
                    if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
                        if (arr2.length < 2 || val.length < 2) {
                            return -1;
                        }
                        indexSize = 2;
                        arrLength /= 2;
                        valLength /= 2;
                        byteOffset /= 2;
                    }
                }
                function read2(buf, i2) {
                    if (indexSize === 1) {
                        return buf[i2];
                    } else {
                        return buf.readUInt16BE(i2 * indexSize);
                    }
                }
                var i;
                if (dir2) {
                    var foundIndex = -1;
                    for(i = byteOffset; i < arrLength; i++){
                        if (read2(arr2, i) === read2(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                            if (foundIndex === -1) foundIndex = i;
                            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
                        } else {
                            if (foundIndex !== -1) i -= i - foundIndex;
                            foundIndex = -1;
                        }
                    }
                } else {
                    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
                    for(i = byteOffset; i >= 0; i--){
                        var found = true;
                        for(var j = 0; j < valLength; j++){
                            if (read2(arr2, i + j) !== read2(val, j)) {
                                found = false;
                                break;
                            }
                        }
                        if (found) return i;
                    }
                }
                return -1;
            }
            Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
                return this.indexOf(val, byteOffset, encoding) !== -1;
            };
            Buffer2.prototype.indexOf = function indexOf2(val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
            };
            Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
            };
            function hexWrite(buf, string3, offset, length) {
                offset = Number(offset) || 0;
                var remaining = buf.length - offset;
                if (!length) {
                    length = remaining;
                } else {
                    length = Number(length);
                    if (length > remaining) {
                        length = remaining;
                    }
                }
                var strLen = string3.length;
                if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");
                if (length > strLen / 2) {
                    length = strLen / 2;
                }
                for(var i = 0; i < length; ++i){
                    var parsed = parseInt(string3.substr(i * 2, 2), 16);
                    if (isNaN(parsed)) return i;
                    buf[offset + i] = parsed;
                }
                return i;
            }
            function utf8Write(buf, string3, offset, length) {
                return blitBuffer(utf8ToBytes(string3, buf.length - offset), buf, offset, length);
            }
            function asciiWrite(buf, string3, offset, length) {
                return blitBuffer(asciiToBytes(string3), buf, offset, length);
            }
            function latin1Write(buf, string3, offset, length) {
                return asciiWrite(buf, string3, offset, length);
            }
            function base64Write(buf, string3, offset, length) {
                return blitBuffer(base64ToBytes(string3), buf, offset, length);
            }
            function ucs2Write(buf, string3, offset, length) {
                return blitBuffer(utf16leToBytes(string3, buf.length - offset), buf, offset, length);
            }
            Buffer2.prototype.write = function write2(string3, offset, length, encoding) {
                if (offset === void 0) {
                    encoding = "utf8";
                    length = this.length;
                    offset = 0;
                } else if (length === void 0 && typeof offset === "string") {
                    encoding = offset;
                    length = this.length;
                    offset = 0;
                } else if (isFinite(offset)) {
                    offset = offset | 0;
                    if (isFinite(length)) {
                        length = length | 0;
                        if (encoding === void 0) encoding = "utf8";
                    } else {
                        encoding = length;
                        length = void 0;
                    }
                } else {
                    throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                }
                var remaining = this.length - offset;
                if (length === void 0 || length > remaining) length = remaining;
                if (string3.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                    throw new RangeError("Attempt to write outside buffer bounds");
                }
                if (!encoding) encoding = "utf8";
                var loweredCase = false;
                for(;;){
                    switch(encoding){
                        case "hex":
                            return hexWrite(this, string3, offset, length);
                        case "utf8":
                        case "utf-8":
                            return utf8Write(this, string3, offset, length);
                        case "ascii":
                            return asciiWrite(this, string3, offset, length);
                        case "latin1":
                        case "binary":
                            return latin1Write(this, string3, offset, length);
                        case "base64":
                            return base64Write(this, string3, offset, length);
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return ucs2Write(this, string3, offset, length);
                        default:
                            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                            encoding = ("" + encoding).toLowerCase();
                            loweredCase = true;
                    }
                }
            };
            Buffer2.prototype.toJSON = function toJSON() {
                return {
                    type: "Buffer",
                    data: Array.prototype.slice.call(this._arr || this, 0)
                };
            };
            function base64Slice(buf, start, end) {
                if (start === 0 && end === buf.length) {
                    return fromByteArray(buf);
                } else {
                    return fromByteArray(buf.slice(start, end));
                }
            }
            function utf8Slice(buf, start, end) {
                end = Math.min(buf.length, end);
                var res = [];
                var i = start;
                while(i < end){
                    var firstByte = buf[i];
                    var codePoint = null;
                    var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
                    if (i + bytesPerSequence <= end) {
                        var secondByte, thirdByte, fourthByte, tempCodePoint;
                        switch(bytesPerSequence){
                            case 1:
                                if (firstByte < 128) {
                                    codePoint = firstByte;
                                }
                                break;
                            case 2:
                                secondByte = buf[i + 1];
                                if ((secondByte & 192) === 128) {
                                    tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                                    if (tempCodePoint > 127) {
                                        codePoint = tempCodePoint;
                                    }
                                }
                                break;
                            case 3:
                                secondByte = buf[i + 1];
                                thirdByte = buf[i + 2];
                                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                                    tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                                    if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                                        codePoint = tempCodePoint;
                                    }
                                }
                                break;
                            case 4:
                                secondByte = buf[i + 1];
                                thirdByte = buf[i + 2];
                                fourthByte = buf[i + 3];
                                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                                    tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                                    if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                                        codePoint = tempCodePoint;
                                    }
                                }
                        }
                    }
                    if (codePoint === null) {
                        codePoint = 65533;
                        bytesPerSequence = 1;
                    } else if (codePoint > 65535) {
                        codePoint -= 65536;
                        res.push(codePoint >>> 10 & 1023 | 55296);
                        codePoint = 56320 | codePoint & 1023;
                    }
                    res.push(codePoint);
                    i += bytesPerSequence;
                }
                return decodeCodePointsArray(res);
            }
            var MAX_ARGUMENTS_LENGTH = 4096;
            function decodeCodePointsArray(codePoints) {
                var len = codePoints.length;
                if (len <= MAX_ARGUMENTS_LENGTH) {
                    return String.fromCharCode.apply(String, codePoints);
                }
                var res = "";
                var i = 0;
                while(i < len){
                    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
                }
                return res;
            }
            function asciiSlice(buf, start, end) {
                var ret = "";
                end = Math.min(buf.length, end);
                for(var i = start; i < end; ++i){
                    ret += String.fromCharCode(buf[i] & 127);
                }
                return ret;
            }
            function latin1Slice(buf, start, end) {
                var ret = "";
                end = Math.min(buf.length, end);
                for(var i = start; i < end; ++i){
                    ret += String.fromCharCode(buf[i]);
                }
                return ret;
            }
            function hexSlice(buf, start, end) {
                var len = buf.length;
                if (!start || start < 0) start = 0;
                if (!end || end < 0 || end > len) end = len;
                var out = "";
                for(var i = start; i < end; ++i){
                    out += toHex(buf[i]);
                }
                return out;
            }
            function utf16leSlice(buf, start, end) {
                var bytes = buf.slice(start, end);
                var res = "";
                for(var i = 0; i < bytes.length; i += 2){
                    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
                }
                return res;
            }
            Buffer2.prototype.slice = function slice(start, end) {
                var len = this.length;
                start = ~~start;
                end = end === void 0 ? len : ~~end;
                if (start < 0) {
                    start += len;
                    if (start < 0) start = 0;
                } else if (start > len) {
                    start = len;
                }
                if (end < 0) {
                    end += len;
                    if (end < 0) end = 0;
                } else if (end > len) {
                    end = len;
                }
                if (end < start) end = start;
                var newBuf;
                if (Buffer2.TYPED_ARRAY_SUPPORT) {
                    newBuf = this.subarray(start, end);
                    newBuf.__proto__ = Buffer2.prototype;
                } else {
                    var sliceLen = end - start;
                    newBuf = new Buffer2(sliceLen, void 0);
                    for(var i = 0; i < sliceLen; ++i){
                        newBuf[i] = this[i + start];
                    }
                }
                return newBuf;
            };
            function checkOffset(offset, ext, length) {
                if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
                if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
            }
            Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
                offset = offset | 0;
                byteLength2 = byteLength2 | 0;
                if (!noAssert) checkOffset(offset, byteLength2, this.length);
                var val = this[offset];
                var mul = 1;
                var i = 0;
                while(++i < byteLength2 && (mul *= 256)){
                    val += this[offset + i] * mul;
                }
                return val;
            };
            Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
                offset = offset | 0;
                byteLength2 = byteLength2 | 0;
                if (!noAssert) {
                    checkOffset(offset, byteLength2, this.length);
                }
                var val = this[offset + --byteLength2];
                var mul = 1;
                while(byteLength2 > 0 && (mul *= 256)){
                    val += this[offset + --byteLength2] * mul;
                }
                return val;
            };
            Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 1, this.length);
                return this[offset];
            };
            Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 2, this.length);
                return this[offset] | this[offset + 1] << 8;
            };
            Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 2, this.length);
                return this[offset] << 8 | this[offset + 1];
            };
            Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 4, this.length);
                return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
            };
            Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 4, this.length);
                return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
            };
            Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
                offset = offset | 0;
                byteLength2 = byteLength2 | 0;
                if (!noAssert) checkOffset(offset, byteLength2, this.length);
                var val = this[offset];
                var mul = 1;
                var i = 0;
                while(++i < byteLength2 && (mul *= 256)){
                    val += this[offset + i] * mul;
                }
                mul *= 128;
                if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
                return val;
            };
            Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
                offset = offset | 0;
                byteLength2 = byteLength2 | 0;
                if (!noAssert) checkOffset(offset, byteLength2, this.length);
                var i = byteLength2;
                var mul = 1;
                var val = this[offset + --i];
                while(i > 0 && (mul *= 256)){
                    val += this[offset + --i] * mul;
                }
                mul *= 128;
                if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
                return val;
            };
            Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 1, this.length);
                if (!(this[offset] & 128)) return this[offset];
                return (255 - this[offset] + 1) * -1;
            };
            Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 2, this.length);
                var val = this[offset] | this[offset + 1] << 8;
                return val & 32768 ? val | 4294901760 : val;
            };
            Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 2, this.length);
                var val = this[offset + 1] | this[offset] << 8;
                return val & 32768 ? val | 4294901760 : val;
            };
            Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 4, this.length);
                return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
            };
            Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 4, this.length);
                return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
            };
            Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 4, this.length);
                return read(this, offset, true, 23, 4);
            };
            Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 4, this.length);
                return read(this, offset, false, 23, 4);
            };
            Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 8, this.length);
                return read(this, offset, true, 52, 8);
            };
            Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 8, this.length);
                return read(this, offset, false, 52, 8);
            };
            function checkInt(buf, value1, offset, ext, max, min) {
                if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
                if (value1 > max || value1 < min) throw new RangeError('"value" argument is out of bounds');
                if (offset + ext > buf.length) throw new RangeError("Index out of range");
            }
            Buffer2.prototype.writeUIntLE = function writeUIntLE(value1, offset, byteLength2, noAssert) {
                value1 = +value1;
                offset = offset | 0;
                byteLength2 = byteLength2 | 0;
                if (!noAssert) {
                    var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
                    checkInt(this, value1, offset, byteLength2, maxBytes, 0);
                }
                var mul = 1;
                var i = 0;
                this[offset] = value1 & 255;
                while(++i < byteLength2 && (mul *= 256)){
                    this[offset + i] = value1 / mul & 255;
                }
                return offset + byteLength2;
            };
            Buffer2.prototype.writeUIntBE = function writeUIntBE(value1, offset, byteLength2, noAssert) {
                value1 = +value1;
                offset = offset | 0;
                byteLength2 = byteLength2 | 0;
                if (!noAssert) {
                    var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
                    checkInt(this, value1, offset, byteLength2, maxBytes, 0);
                }
                var i = byteLength2 - 1;
                var mul = 1;
                this[offset + i] = value1 & 255;
                while(--i >= 0 && (mul *= 256)){
                    this[offset + i] = value1 / mul & 255;
                }
                return offset + byteLength2;
            };
            Buffer2.prototype.writeUInt8 = function writeUInt8(value1, offset, noAssert) {
                value1 = +value1;
                offset = offset | 0;
                if (!noAssert) checkInt(this, value1, offset, 1, 255, 0);
                if (!Buffer2.TYPED_ARRAY_SUPPORT) value1 = Math.floor(value1);
                this[offset] = value1 & 255;
                return offset + 1;
            };
            function objectWriteUInt16(buf, value1, offset, littleEndian) {
                if (value1 < 0) value1 = 65535 + value1 + 1;
                for(var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i){
                    buf[offset + i] = (value1 & 255 << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
                }
            }
            Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value1, offset, noAssert) {
                value1 = +value1;
                offset = offset | 0;
                if (!noAssert) checkInt(this, value1, offset, 2, 65535, 0);
                if (Buffer2.TYPED_ARRAY_SUPPORT) {
                    this[offset] = value1 & 255;
                    this[offset + 1] = value1 >>> 8;
                } else {
                    objectWriteUInt16(this, value1, offset, true);
                }
                return offset + 2;
            };
            Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value1, offset, noAssert) {
                value1 = +value1;
                offset = offset | 0;
                if (!noAssert) checkInt(this, value1, offset, 2, 65535, 0);
                if (Buffer2.TYPED_ARRAY_SUPPORT) {
                    this[offset] = value1 >>> 8;
                    this[offset + 1] = value1 & 255;
                } else {
                    objectWriteUInt16(this, value1, offset, false);
                }
                return offset + 2;
            };
            function objectWriteUInt32(buf, value1, offset, littleEndian) {
                if (value1 < 0) value1 = 4294967295 + value1 + 1;
                for(var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i){
                    buf[offset + i] = value1 >>> (littleEndian ? i : 3 - i) * 8 & 255;
                }
            }
            Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value1, offset, noAssert) {
                value1 = +value1;
                offset = offset | 0;
                if (!noAssert) checkInt(this, value1, offset, 4, 4294967295, 0);
                if (Buffer2.TYPED_ARRAY_SUPPORT) {
                    this[offset + 3] = value1 >>> 24;
                    this[offset + 2] = value1 >>> 16;
                    this[offset + 1] = value1 >>> 8;
                    this[offset] = value1 & 255;
                } else {
                    objectWriteUInt32(this, value1, offset, true);
                }
                return offset + 4;
            };
            Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value1, offset, noAssert) {
                value1 = +value1;
                offset = offset | 0;
                if (!noAssert) checkInt(this, value1, offset, 4, 4294967295, 0);
                if (Buffer2.TYPED_ARRAY_SUPPORT) {
                    this[offset] = value1 >>> 24;
                    this[offset + 1] = value1 >>> 16;
                    this[offset + 2] = value1 >>> 8;
                    this[offset + 3] = value1 & 255;
                } else {
                    objectWriteUInt32(this, value1, offset, false);
                }
                return offset + 4;
            };
            Buffer2.prototype.writeIntLE = function writeIntLE(value1, offset, byteLength2, noAssert) {
                value1 = +value1;
                offset = offset | 0;
                if (!noAssert) {
                    var limit = Math.pow(2, 8 * byteLength2 - 1);
                    checkInt(this, value1, offset, byteLength2, limit - 1, -limit);
                }
                var i = 0;
                var mul = 1;
                var sub = 0;
                this[offset] = value1 & 255;
                while(++i < byteLength2 && (mul *= 256)){
                    if (value1 < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                        sub = 1;
                    }
                    this[offset + i] = (value1 / mul >> 0) - sub & 255;
                }
                return offset + byteLength2;
            };
            Buffer2.prototype.writeIntBE = function writeIntBE(value1, offset, byteLength2, noAssert) {
                value1 = +value1;
                offset = offset | 0;
                if (!noAssert) {
                    var limit = Math.pow(2, 8 * byteLength2 - 1);
                    checkInt(this, value1, offset, byteLength2, limit - 1, -limit);
                }
                var i = byteLength2 - 1;
                var mul = 1;
                var sub = 0;
                this[offset + i] = value1 & 255;
                while(--i >= 0 && (mul *= 256)){
                    if (value1 < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                        sub = 1;
                    }
                    this[offset + i] = (value1 / mul >> 0) - sub & 255;
                }
                return offset + byteLength2;
            };
            Buffer2.prototype.writeInt8 = function writeInt8(value1, offset, noAssert) {
                value1 = +value1;
                offset = offset | 0;
                if (!noAssert) checkInt(this, value1, offset, 1, 127, -128);
                if (!Buffer2.TYPED_ARRAY_SUPPORT) value1 = Math.floor(value1);
                if (value1 < 0) value1 = 255 + value1 + 1;
                this[offset] = value1 & 255;
                return offset + 1;
            };
            Buffer2.prototype.writeInt16LE = function writeInt16LE(value1, offset, noAssert) {
                value1 = +value1;
                offset = offset | 0;
                if (!noAssert) checkInt(this, value1, offset, 2, 32767, -32768);
                if (Buffer2.TYPED_ARRAY_SUPPORT) {
                    this[offset] = value1 & 255;
                    this[offset + 1] = value1 >>> 8;
                } else {
                    objectWriteUInt16(this, value1, offset, true);
                }
                return offset + 2;
            };
            Buffer2.prototype.writeInt16BE = function writeInt16BE(value1, offset, noAssert) {
                value1 = +value1;
                offset = offset | 0;
                if (!noAssert) checkInt(this, value1, offset, 2, 32767, -32768);
                if (Buffer2.TYPED_ARRAY_SUPPORT) {
                    this[offset] = value1 >>> 8;
                    this[offset + 1] = value1 & 255;
                } else {
                    objectWriteUInt16(this, value1, offset, false);
                }
                return offset + 2;
            };
            Buffer2.prototype.writeInt32LE = function writeInt32LE(value1, offset, noAssert) {
                value1 = +value1;
                offset = offset | 0;
                if (!noAssert) checkInt(this, value1, offset, 4, 2147483647, -2147483648);
                if (Buffer2.TYPED_ARRAY_SUPPORT) {
                    this[offset] = value1 & 255;
                    this[offset + 1] = value1 >>> 8;
                    this[offset + 2] = value1 >>> 16;
                    this[offset + 3] = value1 >>> 24;
                } else {
                    objectWriteUInt32(this, value1, offset, true);
                }
                return offset + 4;
            };
            Buffer2.prototype.writeInt32BE = function writeInt32BE(value1, offset, noAssert) {
                value1 = +value1;
                offset = offset | 0;
                if (!noAssert) checkInt(this, value1, offset, 4, 2147483647, -2147483648);
                if (value1 < 0) value1 = 4294967295 + value1 + 1;
                if (Buffer2.TYPED_ARRAY_SUPPORT) {
                    this[offset] = value1 >>> 24;
                    this[offset + 1] = value1 >>> 16;
                    this[offset + 2] = value1 >>> 8;
                    this[offset + 3] = value1 & 255;
                } else {
                    objectWriteUInt32(this, value1, offset, false);
                }
                return offset + 4;
            };
            function checkIEEE754(buf, value1, offset, ext, max, min) {
                if (offset + ext > buf.length) throw new RangeError("Index out of range");
                if (offset < 0) throw new RangeError("Index out of range");
            }
            function writeFloat(buf, value1, offset, littleEndian, noAssert) {
                if (!noAssert) {
                    checkIEEE754(buf, value1, offset, 4);
                }
                write(buf, value1, offset, littleEndian, 23, 4);
                return offset + 4;
            }
            Buffer2.prototype.writeFloatLE = function writeFloatLE(value1, offset, noAssert) {
                return writeFloat(this, value1, offset, true, noAssert);
            };
            Buffer2.prototype.writeFloatBE = function writeFloatBE(value1, offset, noAssert) {
                return writeFloat(this, value1, offset, false, noAssert);
            };
            function writeDouble(buf, value1, offset, littleEndian, noAssert) {
                if (!noAssert) {
                    checkIEEE754(buf, value1, offset, 8);
                }
                write(buf, value1, offset, littleEndian, 52, 8);
                return offset + 8;
            }
            Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value1, offset, noAssert) {
                return writeDouble(this, value1, offset, true, noAssert);
            };
            Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value1, offset, noAssert) {
                return writeDouble(this, value1, offset, false, noAssert);
            };
            Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
                if (!start) start = 0;
                if (!end && end !== 0) end = this.length;
                if (targetStart >= target.length) targetStart = target.length;
                if (!targetStart) targetStart = 0;
                if (end > 0 && end < start) end = start;
                if (end === start) return 0;
                if (target.length === 0 || this.length === 0) return 0;
                if (targetStart < 0) {
                    throw new RangeError("targetStart out of bounds");
                }
                if (start < 0 || start >= this.length) throw new RangeError("sourceStart out of bounds");
                if (end < 0) throw new RangeError("sourceEnd out of bounds");
                if (end > this.length) end = this.length;
                if (target.length - targetStart < end - start) {
                    end = target.length - targetStart + start;
                }
                var len = end - start;
                var i;
                if (this === target && start < targetStart && targetStart < end) {
                    for(i = len - 1; i >= 0; --i){
                        target[i + targetStart] = this[i + start];
                    }
                } else if (len < 1e3 || !Buffer2.TYPED_ARRAY_SUPPORT) {
                    for(i = 0; i < len; ++i){
                        target[i + targetStart] = this[i + start];
                    }
                } else {
                    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
                }
                return len;
            };
            Buffer2.prototype.fill = function fill2(val, start, end, encoding) {
                if (typeof val === "string") {
                    if (typeof start === "string") {
                        encoding = start;
                        start = 0;
                        end = this.length;
                    } else if (typeof end === "string") {
                        encoding = end;
                        end = this.length;
                    }
                    if (val.length === 1) {
                        var code2 = val.charCodeAt(0);
                        if (code2 < 256) {
                            val = code2;
                        }
                    }
                    if (encoding !== void 0 && typeof encoding !== "string") {
                        throw new TypeError("encoding must be a string");
                    }
                    if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
                        throw new TypeError("Unknown encoding: " + encoding);
                    }
                } else if (typeof val === "number") {
                    val = val & 255;
                }
                if (start < 0 || this.length < start || this.length < end) {
                    throw new RangeError("Out of range index");
                }
                if (end <= start) {
                    return this;
                }
                start = start >>> 0;
                end = end === void 0 ? this.length : end >>> 0;
                if (!val) val = 0;
                var i;
                if (typeof val === "number") {
                    for(i = start; i < end; ++i){
                        this[i] = val;
                    }
                } else {
                    var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer2(val, encoding).toString());
                    var len = bytes.length;
                    for(i = 0; i < end - start; ++i){
                        this[i + start] = bytes[i % len];
                    }
                }
                return this;
            };
            var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
            function base64clean(str) {
                str = stringtrim(str).replace(INVALID_BASE64_RE, "");
                if (str.length < 2) return "";
                while(str.length % 4 !== 0){
                    str = str + "=";
                }
                return str;
            }
            function stringtrim(str) {
                if (str.trim) return str.trim();
                return str.replace(/^\s+|\s+$/g, "");
            }
            function toHex(n) {
                if (n < 16) return "0" + n.toString(16);
                return n.toString(16);
            }
            function utf8ToBytes(string3, units) {
                units = units || Infinity;
                var codePoint;
                var length = string3.length;
                var leadSurrogate = null;
                var bytes = [];
                for(var i = 0; i < length; ++i){
                    codePoint = string3.charCodeAt(i);
                    if (codePoint > 55295 && codePoint < 57344) {
                        if (!leadSurrogate) {
                            if (codePoint > 56319) {
                                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                                continue;
                            } else if (i + 1 === length) {
                                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                                continue;
                            }
                            leadSurrogate = codePoint;
                            continue;
                        }
                        if (codePoint < 56320) {
                            if ((units -= 3) > -1) bytes.push(239, 191, 189);
                            leadSurrogate = codePoint;
                            continue;
                        }
                        codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
                    } else if (leadSurrogate) {
                        if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    }
                    leadSurrogate = null;
                    if (codePoint < 128) {
                        if ((units -= 1) < 0) break;
                        bytes.push(codePoint);
                    } else if (codePoint < 2048) {
                        if ((units -= 2) < 0) break;
                        bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
                    } else if (codePoint < 65536) {
                        if ((units -= 3) < 0) break;
                        bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
                    } else if (codePoint < 1114112) {
                        if ((units -= 4) < 0) break;
                        bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
                    } else {
                        throw new Error("Invalid code point");
                    }
                }
                return bytes;
            }
            function asciiToBytes(str) {
                var byteArray = [];
                for(var i = 0; i < str.length; ++i){
                    byteArray.push(str.charCodeAt(i) & 255);
                }
                return byteArray;
            }
            function utf16leToBytes(str, units) {
                var c, hi, lo;
                var byteArray = [];
                for(var i = 0; i < str.length; ++i){
                    if ((units -= 2) < 0) break;
                    c = str.charCodeAt(i);
                    hi = c >> 8;
                    lo = c % 256;
                    byteArray.push(lo);
                    byteArray.push(hi);
                }
                return byteArray;
            }
            function base64ToBytes(str) {
                return toByteArray(base64clean(str));
            }
            function blitBuffer(src, dst, offset, length) {
                for(var i = 0; i < length; ++i){
                    if (i + offset >= dst.length || i >= src.length) break;
                    dst[i + offset] = src[i];
                }
                return i;
            }
            function isnan(val) {
                return val !== val;
            }
            function isBuffer(obj) {
                return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
            }
            function isFastBuffer(obj) {
                return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
            }
            function isSlowBuffer(obj) {
                return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isFastBuffer(obj.slice(0, 0));
            }
            var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : {};
            function unwrapExports(x) {
                return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
            }
            function createCommonjsModule(fn, module2) {
                return module2 = {
                    exports: {}
                }, fn(module2, module2.exports), module2.exports;
            }
            function getCjsExportFromNamespace(n) {
                return n && n["default"] || n;
            }
            var fs = getCjsExportFromNamespace(_shim_fs$1);
            class LineByLine {
                _searchInBuffer(buffer, hexNeedle) {
                    let found = -1;
                    for(let i = 0; i <= buffer.length; i++){
                        let b_byte = buffer[i];
                        if (b_byte === hexNeedle) {
                            found = i;
                            break;
                        }
                    }
                    return found;
                }
                reset() {
                    this.eofReached = false;
                    this.linesCache = [];
                    this.fdPosition = 0;
                }
                close() {
                    fs.closeSync(this.fd);
                    this.fd = null;
                }
                _extractLines(buffer) {
                    let line2;
                    const lines = [];
                    let bufferPosition = 0;
                    let lastNewLineBufferPosition = 0;
                    while(true){
                        let bufferPositionValue = buffer[bufferPosition++];
                        if (bufferPositionValue === this.newLineCharacter) {
                            line2 = buffer.slice(lastNewLineBufferPosition, bufferPosition);
                            lines.push(line2);
                            lastNewLineBufferPosition = bufferPosition;
                        } else if (!bufferPositionValue) {
                            break;
                        }
                    }
                    let leftovers = buffer.slice(lastNewLineBufferPosition, bufferPosition);
                    if (leftovers.length) {
                        lines.push(leftovers);
                    }
                    return lines;
                }
                _readChunk(lineLeftovers) {
                    let totalBytesRead = 0;
                    let bytesRead;
                    const buffers = [];
                    do {
                        const readBuffer = new Buffer2(this.options.readChunk);
                        bytesRead = fs.readSync(this.fd, readBuffer, 0, this.options.readChunk, this.fdPosition);
                        totalBytesRead = totalBytesRead + bytesRead;
                        this.fdPosition = this.fdPosition + bytesRead;
                        buffers.push(readBuffer);
                    }while (bytesRead && this._searchInBuffer(buffers[buffers.length - 1], this.options.newLineCharacter) === -1)
                    let bufferData = Buffer2.concat(buffers);
                    if (bytesRead < this.options.readChunk) {
                        this.eofReached = true;
                        bufferData = bufferData.slice(0, totalBytesRead);
                    }
                    if (totalBytesRead) {
                        this.linesCache = this._extractLines(bufferData);
                        if (lineLeftovers) {
                            this.linesCache[0] = Buffer2.concat([
                                lineLeftovers,
                                this.linesCache[0]
                            ]);
                        }
                    }
                    return totalBytesRead;
                }
                next() {
                    if (!this.fd) return false;
                    let line2 = false;
                    if (this.eofReached && this.linesCache.length === 0) {
                        return line2;
                    }
                    let bytesRead;
                    if (!this.linesCache.length) {
                        bytesRead = this._readChunk();
                    }
                    if (this.linesCache.length) {
                        line2 = this.linesCache.shift();
                        const lastLineCharacter = line2[line2.length - 1];
                        if (lastLineCharacter !== 10) {
                            bytesRead = this._readChunk(line2);
                            if (bytesRead) {
                                line2 = this.linesCache.shift();
                            }
                        }
                    }
                    if (this.eofReached && this.linesCache.length === 0) {
                        this.close();
                    }
                    if (line2 && line2[line2.length - 1] === this.newLineCharacter) {
                        line2 = line2.slice(0, line2.length - 1);
                    }
                    return line2;
                }
                constructor(file, options2){
                    options2 = options2 || {};
                    if (!options2.readChunk) options2.readChunk = 1024;
                    if (!options2.newLineCharacter) {
                        options2.newLineCharacter = 10;
                    } else {
                        options2.newLineCharacter = options2.newLineCharacter.charCodeAt(0);
                    }
                    if (typeof file === "number") {
                        this.fd = file;
                    } else {
                        this.fd = fs.openSync(file, "r");
                    }
                    this.options = options2;
                    this.newLineCharacter = options2.newLineCharacter;
                    this.reset();
                }
            }
            var readlines = LineByLine;
            function fromPairs(pairs2) {
                var index2 = -1, length = pairs2 == null ? 0 : pairs2.length, result = {};
                while(++index2 < length){
                    var pair = pairs2[index2];
                    result[pair[0]] = pair[1];
                }
                return result;
            }
            var fromPairs_1 = fromPairs;
            class ConfigError extends Error {
            }
            class DebugError extends Error {
            }
            class UndefinedParserError extends Error {
            }
            var errors = {
                ConfigError,
                DebugError,
                UndefinedParserError
            };
            function _objectWithoutPropertiesLoose(source2, excluded) {
                if (source2 == null) return {};
                var target = {};
                var sourceKeys = Object.keys(source2);
                var key, i;
                for(i = 0; i < sourceKeys.length; i++){
                    key = sourceKeys[i];
                    if (excluded.indexOf(key) >= 0) continue;
                    target[key] = source2[key];
                }
                return target;
            }
            function _taggedTemplateLiteral(strings, raw) {
                if (!raw) {
                    raw = strings.slice(0);
                }
                return Object.freeze(Object.defineProperties(strings, {
                    raw: {
                        value: Object.freeze(raw)
                    }
                }));
            }
            function defaultSetTimout() {
                throw new Error("setTimeout has not been defined");
            }
            function defaultClearTimeout() {
                throw new Error("clearTimeout has not been defined");
            }
            var cachedSetTimeout = defaultSetTimout;
            var cachedClearTimeout = defaultClearTimeout;
            if (typeof global$1.setTimeout === "function") {
                cachedSetTimeout = setTimeout;
            }
            if (typeof global$1.clearTimeout === "function") {
                cachedClearTimeout = clearTimeout;
            }
            function runTimeout(fun) {
                if (cachedSetTimeout === setTimeout) {
                    return setTimeout(fun, 0);
                }
                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                    cachedSetTimeout = setTimeout;
                    return setTimeout(fun, 0);
                }
                try {
                    return cachedSetTimeout(fun, 0);
                } catch (e) {
                    try {
                        return cachedSetTimeout.call(null, fun, 0);
                    } catch (e2) {
                        return cachedSetTimeout.call(this, fun, 0);
                    }
                }
            }
            function runClearTimeout(marker) {
                if (cachedClearTimeout === clearTimeout) {
                    return clearTimeout(marker);
                }
                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                    cachedClearTimeout = clearTimeout;
                    return clearTimeout(marker);
                }
                try {
                    return cachedClearTimeout(marker);
                } catch (e) {
                    try {
                        return cachedClearTimeout.call(null, marker);
                    } catch (e2) {
                        return cachedClearTimeout.call(this, marker);
                    }
                }
            }
            var queue = [];
            var draining = false;
            var currentQueue;
            var queueIndex = -1;
            function cleanUpNextTick() {
                if (!draining || !currentQueue) {
                    return;
                }
                draining = false;
                if (currentQueue.length) {
                    queue = currentQueue.concat(queue);
                } else {
                    queueIndex = -1;
                }
                if (queue.length) {
                    drainQueue();
                }
            }
            function drainQueue() {
                if (draining) {
                    return;
                }
                var timeout = runTimeout(cleanUpNextTick);
                draining = true;
                var len = queue.length;
                while(len){
                    currentQueue = queue;
                    queue = [];
                    while(++queueIndex < len){
                        if (currentQueue) {
                            currentQueue[queueIndex].run();
                        }
                    }
                    queueIndex = -1;
                    len = queue.length;
                }
                currentQueue = null;
                draining = false;
                runClearTimeout(timeout);
            }
            function nextTick(fun) {
                var args = new Array(arguments.length - 1);
                if (arguments.length > 1) {
                    for(var i = 1; i < arguments.length; i++){
                        args[i - 1] = arguments[i];
                    }
                }
                queue.push(new Item(fun, args));
                if (queue.length === 1 && !draining) {
                    runTimeout(drainQueue);
                }
            }
            function Item(fun, array2) {
                this.fun = fun;
                this.array = array2;
            }
            Item.prototype.run = function() {
                this.fun.apply(null, this.array);
            };
            var title = "browser";
            var platform = "browser";
            var browser = true;
            var env = {};
            var argv = [];
            var version$1 = "";
            var versions = {};
            var release = {};
            var config = {};
            function noop() {}
            var on = noop;
            var addListener = noop;
            var once = noop;
            var off = noop;
            var removeListener = noop;
            var removeAllListeners = noop;
            var emit = noop;
            function binding(name2) {
                throw new Error("process.binding is not supported");
            }
            function cwd() {
                return "/";
            }
            function chdir(dir2) {
                throw new Error("process.chdir is not supported");
            }
            function umask() {
                return 0;
            }
            var performance = global$1.performance || {};
            var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function() {
                return /* @__PURE__ */ new Date().getTime();
            };
            function hrtime(previousTimestamp) {
                var clocktime = performanceNow.call(performance) * 1e-3;
                var seconds = Math.floor(clocktime);
                var nanoseconds = Math.floor(clocktime % 1 * 1e9);
                if (previousTimestamp) {
                    seconds = seconds - previousTimestamp[0];
                    nanoseconds = nanoseconds - previousTimestamp[1];
                    if (nanoseconds < 0) {
                        seconds--;
                        nanoseconds += 1e9;
                    }
                }
                return [
                    seconds,
                    nanoseconds
                ];
            }
            var startTime = /* @__PURE__ */ new Date();
            function uptime() {
                var currentTime = /* @__PURE__ */ new Date();
                var dif = currentTime - startTime;
                return dif / 1e3;
            }
            var process2 = {
                nextTick,
                title,
                browser,
                env,
                argv,
                version: version$1,
                versions,
                on,
                addListener,
                once,
                off,
                removeListener,
                removeAllListeners,
                emit,
                binding,
                cwd,
                chdir,
                umask,
                hrtime,
                platform,
                release,
                config,
                uptime
            };
            const debug = typeof process2 === "object" && process2.env && process2.env.NODE_DEBUG && /\bsemver\b/i.test(process2.env.NODE_DEBUG) ? (...args)=>console.error("SEMVER", ...args) : ()=>{};
            var debug_1 = debug;
            const SEMVER_SPEC_VERSION = "2.0.0";
            const MAX_LENGTH = 256;
            const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */ 9007199254740991;
            const MAX_SAFE_COMPONENT_LENGTH = 16;
            var constants = {
                SEMVER_SPEC_VERSION,
                MAX_LENGTH,
                MAX_SAFE_INTEGER,
                MAX_SAFE_COMPONENT_LENGTH
            };
            var re_1 = createCommonjsModule(function(module2, exports2) {
                const { MAX_SAFE_COMPONENT_LENGTH: MAX_SAFE_COMPONENT_LENGTH2  } = constants;
                exports2 = module2.exports = {};
                const re2 = exports2.re = [];
                const src = exports2.src = [];
                const t2 = exports2.t = {};
                let R = 0;
                const createToken = (name2, value1, isGlobal)=>{
                    const index2 = R++;
                    debug_1(index2, value1);
                    t2[name2] = index2;
                    src[index2] = value1;
                    re2[index2] = new RegExp(value1, isGlobal ? "g" : void 0);
                };
                createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
                createToken("NUMERICIDENTIFIERLOOSE", "[0-9]+");
                createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*");
                createToken("MAINVERSION", "(".concat(src[t2.NUMERICIDENTIFIER], ")\\.") + "(".concat(src[t2.NUMERICIDENTIFIER], ")\\.") + "(".concat(src[t2.NUMERICIDENTIFIER], ")"));
                createToken("MAINVERSIONLOOSE", "(".concat(src[t2.NUMERICIDENTIFIERLOOSE], ")\\.") + "(".concat(src[t2.NUMERICIDENTIFIERLOOSE], ")\\.") + "(".concat(src[t2.NUMERICIDENTIFIERLOOSE], ")"));
                createToken("PRERELEASEIDENTIFIER", "(?:".concat(src[t2.NUMERICIDENTIFIER], "|").concat(src[t2.NONNUMERICIDENTIFIER], ")"));
                createToken("PRERELEASEIDENTIFIERLOOSE", "(?:".concat(src[t2.NUMERICIDENTIFIERLOOSE], "|").concat(src[t2.NONNUMERICIDENTIFIER], ")"));
                createToken("PRERELEASE", "(?:-(".concat(src[t2.PRERELEASEIDENTIFIER], "(?:\\.").concat(src[t2.PRERELEASEIDENTIFIER], ")*))"));
                createToken("PRERELEASELOOSE", "(?:-?(".concat(src[t2.PRERELEASEIDENTIFIERLOOSE], "(?:\\.").concat(src[t2.PRERELEASEIDENTIFIERLOOSE], ")*))"));
                createToken("BUILDIDENTIFIER", "[0-9A-Za-z-]+");
                createToken("BUILD", "(?:\\+(".concat(src[t2.BUILDIDENTIFIER], "(?:\\.").concat(src[t2.BUILDIDENTIFIER], ")*))"));
                createToken("FULLPLAIN", "v?".concat(src[t2.MAINVERSION]).concat(src[t2.PRERELEASE], "?").concat(src[t2.BUILD], "?"));
                createToken("FULL", "^".concat(src[t2.FULLPLAIN], "$"));
                createToken("LOOSEPLAIN", "[v=\\s]*".concat(src[t2.MAINVERSIONLOOSE]).concat(src[t2.PRERELEASELOOSE], "?").concat(src[t2.BUILD], "?"));
                createToken("LOOSE", "^".concat(src[t2.LOOSEPLAIN], "$"));
                createToken("GTLT", "((?:<|>)?=?)");
                createToken("XRANGEIDENTIFIERLOOSE", "".concat(src[t2.NUMERICIDENTIFIERLOOSE], "|x|X|\\*"));
                createToken("XRANGEIDENTIFIER", "".concat(src[t2.NUMERICIDENTIFIER], "|x|X|\\*"));
                createToken("XRANGEPLAIN", "[v=\\s]*(".concat(src[t2.XRANGEIDENTIFIER], ")") + "(?:\\.(".concat(src[t2.XRANGEIDENTIFIER], ")") + "(?:\\.(".concat(src[t2.XRANGEIDENTIFIER], ")") + "(?:".concat(src[t2.PRERELEASE], ")?").concat(src[t2.BUILD], "?") + ")?)?");
                createToken("XRANGEPLAINLOOSE", "[v=\\s]*(".concat(src[t2.XRANGEIDENTIFIERLOOSE], ")") + "(?:\\.(".concat(src[t2.XRANGEIDENTIFIERLOOSE], ")") + "(?:\\.(".concat(src[t2.XRANGEIDENTIFIERLOOSE], ")") + "(?:".concat(src[t2.PRERELEASELOOSE], ")?").concat(src[t2.BUILD], "?") + ")?)?");
                createToken("XRANGE", "^".concat(src[t2.GTLT], "\\s*").concat(src[t2.XRANGEPLAIN], "$"));
                createToken("XRANGELOOSE", "^".concat(src[t2.GTLT], "\\s*").concat(src[t2.XRANGEPLAINLOOSE], "$"));
                createToken("COERCE", "".concat("(^|[^\\d])(\\d{1,").concat(MAX_SAFE_COMPONENT_LENGTH2, "})") + "(?:\\.(\\d{1,".concat(MAX_SAFE_COMPONENT_LENGTH2, "}))?") + "(?:\\.(\\d{1,".concat(MAX_SAFE_COMPONENT_LENGTH2, "}))?") + "(?:$|[^\\d])");
                createToken("COERCERTL", src[t2.COERCE], true);
                createToken("LONETILDE", "(?:~>?)");
                createToken("TILDETRIM", "(\\s*)".concat(src[t2.LONETILDE], "\\s+"), true);
                exports2.tildeTrimReplace = "$1~";
                createToken("TILDE", "^".concat(src[t2.LONETILDE]).concat(src[t2.XRANGEPLAIN], "$"));
                createToken("TILDELOOSE", "^".concat(src[t2.LONETILDE]).concat(src[t2.XRANGEPLAINLOOSE], "$"));
                createToken("LONECARET", "(?:\\^)");
                createToken("CARETTRIM", "(\\s*)".concat(src[t2.LONECARET], "\\s+"), true);
                exports2.caretTrimReplace = "$1^";
                createToken("CARET", "^".concat(src[t2.LONECARET]).concat(src[t2.XRANGEPLAIN], "$"));
                createToken("CARETLOOSE", "^".concat(src[t2.LONECARET]).concat(src[t2.XRANGEPLAINLOOSE], "$"));
                createToken("COMPARATORLOOSE", "^".concat(src[t2.GTLT], "\\s*(").concat(src[t2.LOOSEPLAIN], ")$|^$"));
                createToken("COMPARATOR", "^".concat(src[t2.GTLT], "\\s*(").concat(src[t2.FULLPLAIN], ")$|^$"));
                createToken("COMPARATORTRIM", "(\\s*)".concat(src[t2.GTLT], "\\s*(").concat(src[t2.LOOSEPLAIN], "|").concat(src[t2.XRANGEPLAIN], ")"), true);
                exports2.comparatorTrimReplace = "$1$2$3";
                createToken("HYPHENRANGE", "^\\s*(".concat(src[t2.XRANGEPLAIN], ")") + "\\s+-\\s+" + "(".concat(src[t2.XRANGEPLAIN], ")") + "\\s*$");
                createToken("HYPHENRANGELOOSE", "^\\s*(".concat(src[t2.XRANGEPLAINLOOSE], ")") + "\\s+-\\s+" + "(".concat(src[t2.XRANGEPLAINLOOSE], ")") + "\\s*$");
                createToken("STAR", "(<|>)?=?\\s*\\*");
            });
            var re_2 = re_1.re;
            var re_3 = re_1.src;
            var re_4 = re_1.t;
            var re_5 = re_1.tildeTrimReplace;
            var re_6 = re_1.caretTrimReplace;
            var re_7 = re_1.comparatorTrimReplace;
            const numeric = /^[0-9]+$/;
            const compareIdentifiers = (a3, b)=>{
                const anum = numeric.test(a3);
                const bnum = numeric.test(b);
                if (anum && bnum) {
                    a3 = +a3;
                    b = +b;
                }
                return a3 === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a3 < b ? -1 : 1;
            };
            const rcompareIdentifiers = (a3, b)=>compareIdentifiers(b, a3);
            var identifiers = {
                compareIdentifiers,
                rcompareIdentifiers
            };
            const { MAX_LENGTH: MAX_LENGTH$1 , MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$1  } = constants;
            const { re , t  } = re_1;
            const { compareIdentifiers: compareIdentifiers$1  } = identifiers;
            class SemVer {
                format() {
                    this.version = "".concat(this.major, ".").concat(this.minor, ".").concat(this.patch);
                    if (this.prerelease.length) {
                        this.version += "-".concat(this.prerelease.join("."));
                    }
                    return this.version;
                }
                toString() {
                    return this.version;
                }
                compare(other) {
                    debug_1("SemVer.compare", this.version, this.options, other);
                    if (!(other instanceof SemVer)) {
                        if (typeof other === "string" && other === this.version) {
                            return 0;
                        }
                        other = new SemVer(other, this.options);
                    }
                    if (other.version === this.version) {
                        return 0;
                    }
                    return this.compareMain(other) || this.comparePre(other);
                }
                compareMain(other) {
                    if (!(other instanceof SemVer)) {
                        other = new SemVer(other, this.options);
                    }
                    return compareIdentifiers$1(this.major, other.major) || compareIdentifiers$1(this.minor, other.minor) || compareIdentifiers$1(this.patch, other.patch);
                }
                comparePre(other) {
                    if (!(other instanceof SemVer)) {
                        other = new SemVer(other, this.options);
                    }
                    if (this.prerelease.length && !other.prerelease.length) {
                        return -1;
                    } else if (!this.prerelease.length && other.prerelease.length) {
                        return 1;
                    } else if (!this.prerelease.length && !other.prerelease.length) {
                        return 0;
                    }
                    let i = 0;
                    do {
                        const a3 = this.prerelease[i];
                        const b = other.prerelease[i];
                        debug_1("prerelease compare", i, a3, b);
                        if (a3 === void 0 && b === void 0) {
                            return 0;
                        } else if (b === void 0) {
                            return 1;
                        } else if (a3 === void 0) {
                            return -1;
                        } else if (a3 === b) {
                            continue;
                        } else {
                            return compareIdentifiers$1(a3, b);
                        }
                    }while (++i)
                }
                compareBuild(other) {
                    if (!(other instanceof SemVer)) {
                        other = new SemVer(other, this.options);
                    }
                    let i = 0;
                    do {
                        const a3 = this.build[i];
                        const b = other.build[i];
                        debug_1("prerelease compare", i, a3, b);
                        if (a3 === void 0 && b === void 0) {
                            return 0;
                        } else if (b === void 0) {
                            return 1;
                        } else if (a3 === void 0) {
                            return -1;
                        } else if (a3 === b) {
                            continue;
                        } else {
                            return compareIdentifiers$1(a3, b);
                        }
                    }while (++i)
                }
                // preminor will bump the version up to the next minor release, and immediately
                // down to pre-release. premajor and prepatch work the same way.
                inc(release2, identifier) {
                    switch(release2){
                        case "premajor":
                            this.prerelease.length = 0;
                            this.patch = 0;
                            this.minor = 0;
                            this.major++;
                            this.inc("pre", identifier);
                            break;
                        case "preminor":
                            this.prerelease.length = 0;
                            this.patch = 0;
                            this.minor++;
                            this.inc("pre", identifier);
                            break;
                        case "prepatch":
                            this.prerelease.length = 0;
                            this.inc("patch", identifier);
                            this.inc("pre", identifier);
                            break;
                        case "prerelease":
                            if (this.prerelease.length === 0) {
                                this.inc("patch", identifier);
                            }
                            this.inc("pre", identifier);
                            break;
                        case "major":
                            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
                                this.major++;
                            }
                            this.minor = 0;
                            this.patch = 0;
                            this.prerelease = [];
                            break;
                        case "minor":
                            if (this.patch !== 0 || this.prerelease.length === 0) {
                                this.minor++;
                            }
                            this.patch = 0;
                            this.prerelease = [];
                            break;
                        case "patch":
                            if (this.prerelease.length === 0) {
                                this.patch++;
                            }
                            this.prerelease = [];
                            break;
                        case "pre":
                            if (this.prerelease.length === 0) {
                                this.prerelease = [
                                    0
                                ];
                            } else {
                                let i = this.prerelease.length;
                                while(--i >= 0){
                                    if (typeof this.prerelease[i] === "number") {
                                        this.prerelease[i]++;
                                        i = -2;
                                    }
                                }
                                if (i === -1) {
                                    this.prerelease.push(0);
                                }
                            }
                            if (identifier) {
                                if (this.prerelease[0] === identifier) {
                                    if (isNaN(this.prerelease[1])) {
                                        this.prerelease = [
                                            identifier,
                                            0
                                        ];
                                    }
                                } else {
                                    this.prerelease = [
                                        identifier,
                                        0
                                    ];
                                }
                            }
                            break;
                        default:
                            throw new Error("invalid increment argument: ".concat(release2));
                    }
                    this.format();
                    this.raw = this.version;
                    return this;
                }
                constructor(version2, options2){
                    if (!options2 || typeof options2 !== "object") {
                        options2 = {
                            loose: !!options2,
                            includePrerelease: false
                        };
                    }
                    if (version2 instanceof SemVer) {
                        if (version2.loose === !!options2.loose && version2.includePrerelease === !!options2.includePrerelease) {
                            return version2;
                        } else {
                            version2 = version2.version;
                        }
                    } else if (typeof version2 !== "string") {
                        throw new TypeError("Invalid Version: ".concat(version2));
                    }
                    if (version2.length > MAX_LENGTH$1) {
                        throw new TypeError("version is longer than ".concat(MAX_LENGTH$1, " characters"));
                    }
                    debug_1("SemVer", version2, options2);
                    this.options = options2;
                    this.loose = !!options2.loose;
                    this.includePrerelease = !!options2.includePrerelease;
                    const m = version2.trim().match(options2.loose ? re[t.LOOSE] : re[t.FULL]);
                    if (!m) {
                        throw new TypeError("Invalid Version: ".concat(version2));
                    }
                    this.raw = version2;
                    this.major = +m[1];
                    this.minor = +m[2];
                    this.patch = +m[3];
                    if (this.major > MAX_SAFE_INTEGER$1 || this.major < 0) {
                        throw new TypeError("Invalid major version");
                    }
                    if (this.minor > MAX_SAFE_INTEGER$1 || this.minor < 0) {
                        throw new TypeError("Invalid minor version");
                    }
                    if (this.patch > MAX_SAFE_INTEGER$1 || this.patch < 0) {
                        throw new TypeError("Invalid patch version");
                    }
                    if (!m[4]) {
                        this.prerelease = [];
                    } else {
                        this.prerelease = m[4].split(".").map((id)=>{
                            if (/^[0-9]+$/.test(id)) {
                                const num = +id;
                                if (num >= 0 && num < MAX_SAFE_INTEGER$1) {
                                    return num;
                                }
                            }
                            return id;
                        });
                    }
                    this.build = m[5] ? m[5].split(".") : [];
                    this.format();
                }
            }
            var semver = SemVer;
            const compare = (a3, b, loose)=>new semver(a3, loose).compare(new semver(b, loose));
            var compare_1 = compare;
            const lt = (a3, b, loose)=>compare_1(a3, b, loose) < 0;
            var lt_1 = lt;
            const gte = (a3, b, loose)=>compare_1(a3, b, loose) >= 0;
            var gte_1 = gte;
            var arrayify = (object2, keyName)=>Object.entries(object2).map(([key, value1])=>Object.assign({
                        [keyName]: key
                    }, value1));
            var dedent_1 = createCommonjsModule(function(module2) {
                function dedent2(strings) {
                    var raw = void 0;
                    if (typeof strings === "string") {
                        raw = [
                            strings
                        ];
                    } else {
                        raw = strings.raw;
                    }
                    var result = "";
                    for(var i = 0; i < raw.length; i++){
                        result += raw[i].replace(/\\\n[ \t]*/g, "").replace(/\\`/g, "`");
                        if (i < (arguments.length <= 1 ? 0 : arguments.length - 1)) {
                            result += arguments.length <= i + 1 ? void 0 : arguments[i + 1];
                        }
                    }
                    var lines = result.split("\n");
                    var mindent = null;
                    lines.forEach(function(l) {
                        var m = l.match(/^(\s+)\S+/);
                        if (m) {
                            var indent2 = m[1].length;
                            if (!mindent) {
                                mindent = indent2;
                            } else {
                                mindent = Math.min(mindent, indent2);
                            }
                        }
                    });
                    if (mindent !== null) {
                        result = lines.map(function(l) {
                            return l[0] === " " ? l.slice(mindent) : l;
                        }).join("\n");
                    }
                    result = result.trim();
                    return result.replace(/\\n/g, "\n");
                }
                {
                    module2.exports = dedent2;
                }
            });
            function _templateObject6() {
                const data2 = _taggedTemplateLiteral([
                    "\n      Require either '@prettier' or '@format' to be present in the file's first docblock comment\n      in order for it to be formatted.\n    "
                ]);
                _templateObject6 = function _templateObject62() {
                    return data2;
                };
                return data2;
            }
            function _templateObject5() {
                const data2 = _taggedTemplateLiteral([
                    "\n      Format code starting at a given character offset.\n      The range will extend backwards to the start of the first line containing the selected statement.\n      This option cannot be used with --cursor-offset.\n    "
                ]);
                _templateObject5 = function _templateObject52() {
                    return data2;
                };
                return data2;
            }
            function _templateObject4() {
                const data2 = _taggedTemplateLiteral([
                    "\n      Format code ending at a given character offset (exclusive).\n      The range will extend forwards to the end of the selected statement.\n      This option cannot be used with --cursor-offset.\n    "
                ]);
                _templateObject4 = function _templateObject42() {
                    return data2;
                };
                return data2;
            }
            function _templateObject3() {
                const data2 = _taggedTemplateLiteral([
                    "\n      Custom directory that contains prettier plugins in node_modules subdirectory.\n      Overrides default behavior when plugins are searched relatively to the location of Prettier.\n      Multiple values are accepted.\n    "
                ]);
                _templateObject3 = function _templateObject32() {
                    return data2;
                };
                return data2;
            }
            function _templateObject2() {
                const data2 = _taggedTemplateLiteral([
                    "\n          Maintain existing\n          (mixed values within one file are normalised by looking at what's used after the first line)\n        "
                ]);
                _templateObject2 = function _templateObject22() {
                    return data2;
                };
                return data2;
            }
            function _templateObject() {
                const data2 = _taggedTemplateLiteral([
                    "\n      Print (to stderr) where a cursor at the given position would move to after formatting.\n      This option cannot be used with --range-start and --range-end.\n    "
                ]);
                _templateObject = function _templateObject7() {
                    return data2;
                };
                return data2;
            }
            const CATEGORY_CONFIG = "Config";
            const CATEGORY_EDITOR = "Editor";
            const CATEGORY_FORMAT = "Format";
            const CATEGORY_OTHER = "Other";
            const CATEGORY_OUTPUT = "Output";
            const CATEGORY_GLOBAL = "Global";
            const CATEGORY_SPECIAL = "Special";
            const options = {
                cursorOffset: {
                    since: "1.4.0",
                    category: CATEGORY_SPECIAL,
                    type: "int",
                    default: -1,
                    range: {
                        start: -1,
                        end: Infinity,
                        step: 1
                    },
                    description: dedent_1(_templateObject()),
                    cliCategory: CATEGORY_EDITOR
                },
                endOfLine: {
                    since: "1.15.0",
                    category: CATEGORY_GLOBAL,
                    type: "choice",
                    default: [
                        {
                            since: "1.15.0",
                            value: "auto"
                        },
                        {
                            since: "2.0.0",
                            value: "lf"
                        }
                    ],
                    description: "Which end of line characters to apply.",
                    choices: [
                        {
                            value: "lf",
                            description: "Line Feed only (\\n), common on Linux and macOS as well as inside git repos"
                        },
                        {
                            value: "crlf",
                            description: "Carriage Return + Line Feed characters (\\r\\n), common on Windows"
                        },
                        {
                            value: "cr",
                            description: "Carriage Return character only (\\r), used very rarely"
                        },
                        {
                            value: "auto",
                            description: dedent_1(_templateObject2())
                        }
                    ]
                },
                filepath: {
                    since: "1.4.0",
                    category: CATEGORY_SPECIAL,
                    type: "path",
                    description: "Specify the input filepath. This will be used to do parser inference.",
                    cliName: "stdin-filepath",
                    cliCategory: CATEGORY_OTHER,
                    cliDescription: "Path to the file to pretend that stdin comes from."
                },
                insertPragma: {
                    since: "1.8.0",
                    category: CATEGORY_SPECIAL,
                    type: "boolean",
                    default: false,
                    description: "Insert @format pragma into file's first docblock comment.",
                    cliCategory: CATEGORY_OTHER
                },
                parser: {
                    since: "0.0.10",
                    category: CATEGORY_GLOBAL,
                    type: "choice",
                    default: [
                        {
                            since: "0.0.10",
                            value: "babylon"
                        },
                        {
                            since: "1.13.0",
                            value: void 0
                        }
                    ],
                    description: "Which parser to use.",
                    exception: (value1)=>typeof value1 === "string" || typeof value1 === "function",
                    choices: [
                        {
                            value: "flow",
                            description: "Flow"
                        },
                        {
                            value: "babel",
                            since: "1.16.0",
                            description: "JavaScript"
                        },
                        {
                            value: "babel-flow",
                            since: "1.16.0",
                            description: "Flow"
                        },
                        {
                            value: "babel-ts",
                            since: "2.0.0",
                            description: "TypeScript"
                        },
                        {
                            value: "typescript",
                            since: "1.4.0",
                            description: "TypeScript"
                        },
                        {
                            value: "css",
                            since: "1.7.1",
                            description: "CSS"
                        },
                        {
                            value: "less",
                            since: "1.7.1",
                            description: "Less"
                        },
                        {
                            value: "scss",
                            since: "1.7.1",
                            description: "SCSS"
                        },
                        {
                            value: "json",
                            since: "1.5.0",
                            description: "JSON"
                        },
                        {
                            value: "json5",
                            since: "1.13.0",
                            description: "JSON5"
                        },
                        {
                            value: "json-stringify",
                            since: "1.13.0",
                            description: "JSON.stringify"
                        },
                        {
                            value: "graphql",
                            since: "1.5.0",
                            description: "GraphQL"
                        },
                        {
                            value: "markdown",
                            since: "1.8.0",
                            description: "Markdown"
                        },
                        {
                            value: "mdx",
                            since: "1.15.0",
                            description: "MDX"
                        },
                        {
                            value: "vue",
                            since: "1.10.0",
                            description: "Vue"
                        },
                        {
                            value: "yaml",
                            since: "1.14.0",
                            description: "YAML"
                        },
                        {
                            value: "glimmer",
                            since: null,
                            description: "Handlebars"
                        },
                        {
                            value: "html",
                            since: "1.15.0",
                            description: "HTML"
                        },
                        {
                            value: "angular",
                            since: "1.15.0",
                            description: "Angular"
                        },
                        {
                            value: "lwc",
                            since: "1.17.0",
                            description: "Lightning Web Components"
                        }
                    ]
                },
                plugins: {
                    since: "1.10.0",
                    type: "path",
                    array: true,
                    default: [
                        {
                            value: []
                        }
                    ],
                    category: CATEGORY_GLOBAL,
                    description: "Add a plugin. Multiple plugins can be passed as separate `--plugin`s.",
                    exception: (value1)=>typeof value1 === "string" || typeof value1 === "object",
                    cliName: "plugin",
                    cliCategory: CATEGORY_CONFIG
                },
                pluginSearchDirs: {
                    since: "1.13.0",
                    type: "path",
                    array: true,
                    default: [
                        {
                            value: []
                        }
                    ],
                    category: CATEGORY_GLOBAL,
                    description: dedent_1(_templateObject3()),
                    exception: (value1)=>typeof value1 === "string" || typeof value1 === "object",
                    cliName: "plugin-search-dir",
                    cliCategory: CATEGORY_CONFIG
                },
                printWidth: {
                    since: "0.0.0",
                    category: CATEGORY_GLOBAL,
                    type: "int",
                    default: 80,
                    description: "The line length where Prettier will try wrap.",
                    range: {
                        start: 0,
                        end: Infinity,
                        step: 1
                    }
                },
                rangeEnd: {
                    since: "1.4.0",
                    category: CATEGORY_SPECIAL,
                    type: "int",
                    default: Infinity,
                    range: {
                        start: 0,
                        end: Infinity,
                        step: 1
                    },
                    description: dedent_1(_templateObject4()),
                    cliCategory: CATEGORY_EDITOR
                },
                rangeStart: {
                    since: "1.4.0",
                    category: CATEGORY_SPECIAL,
                    type: "int",
                    default: 0,
                    range: {
                        start: 0,
                        end: Infinity,
                        step: 1
                    },
                    description: dedent_1(_templateObject5()),
                    cliCategory: CATEGORY_EDITOR
                },
                requirePragma: {
                    since: "1.7.0",
                    category: CATEGORY_SPECIAL,
                    type: "boolean",
                    default: false,
                    description: dedent_1(_templateObject6()),
                    cliCategory: CATEGORY_OTHER
                },
                tabWidth: {
                    type: "int",
                    category: CATEGORY_GLOBAL,
                    default: 2,
                    description: "Number of spaces per indentation level.",
                    range: {
                        start: 0,
                        end: Infinity,
                        step: 1
                    }
                },
                useTabs: {
                    since: "1.0.0",
                    category: CATEGORY_GLOBAL,
                    type: "boolean",
                    default: false,
                    description: "Indent with tabs instead of spaces."
                }
            };
            var coreOptions = {
                CATEGORY_CONFIG,
                CATEGORY_EDITOR,
                CATEGORY_FORMAT,
                CATEGORY_OTHER,
                CATEGORY_OUTPUT,
                CATEGORY_GLOBAL,
                CATEGORY_SPECIAL,
                options
            };
            var require$$0 = getCjsExportFromNamespace(_package$1);
            const semver$1 = {
                compare: compare_1,
                lt: lt_1,
                gte: gte_1
            };
            const currentVersion = require$$0.version;
            const coreOptions$1 = coreOptions.options;
            function getSupportInfo({ plugins =[] , showUnreleased =false , showDeprecated =false , showInternal =false  } = {}) {
                const version2 = currentVersion.split("-", 1)[0];
                const options2 = arrayify(Object.assign({}, ...plugins.map(({ options: options3  })=>options3), coreOptions$1), "name").filter((option2)=>filterSince(option2) && filterDeprecated(option2)).sort((a3, b)=>a3.name === b.name ? 0 : a3.name < b.name ? -1 : 1).map(mapInternal).map((option2)=>{
                    option2 = Object.assign({}, option2);
                    if (Array.isArray(option2.default)) {
                        option2.default = option2.default.length === 1 ? option2.default[0].value : option2.default.filter(filterSince).sort((info1, info2)=>semver$1.compare(info2.since, info1.since))[0].value;
                    }
                    if (Array.isArray(option2.choices)) {
                        option2.choices = option2.choices.filter((option3)=>filterSince(option3) && filterDeprecated(option3));
                    }
                    const filteredPlugins = plugins.filter((plugin)=>plugin.defaultOptions && plugin.defaultOptions[option2.name] !== void 0);
                    const pluginDefaults = filteredPlugins.reduce((reduced, plugin)=>{
                        reduced[plugin.name] = plugin.defaultOptions[option2.name];
                        return reduced;
                    }, {});
                    return Object.assign({}, option2, {
                        pluginDefaults
                    });
                });
                const languages2 = plugins.reduce((all, plugin)=>all.concat(plugin.languages || []), []).filter(filterSince);
                return {
                    languages: languages2,
                    options: options2
                };
                function filterSince(object2) {
                    return showUnreleased || !("since" in object2) || object2.since && semver$1.gte(version2, object2.since);
                }
                function filterDeprecated(object2) {
                    return showDeprecated || !("deprecated" in object2) || object2.deprecated && semver$1.lt(version2, object2.deprecated);
                }
                function mapInternal(object2) {
                    if (showInternal) {
                        return object2;
                    }
                    const newObject = _objectWithoutPropertiesLoose(object2, [
                        "cliName",
                        "cliCategory",
                        "cliDescription"
                    ]);
                    return newObject;
                }
            }
            var support = {
                getSupportInfo
            };
            var _extendStatics = function extendStatics(d, b) {
                _extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p2 in b2)if (b2.hasOwnProperty(p2)) d2[p2] = b2[p2];
                };
                return _extendStatics(d, b);
            };
            function __extends2(d, b) {
                _extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            }
            var _assign = function __assign() {
                _assign = Object.assign || function __assign2(t2) {
                    for(var s, i = 1, n = arguments.length; i < n; i++){
                        s = arguments[i];
                        for(var p2 in s)if (Object.prototype.hasOwnProperty.call(s, p2)) t2[p2] = s[p2];
                    }
                    return t2;
                };
                return _assign.apply(this, arguments);
            };
            function __rest(s, e) {
                var t2 = {};
                for(var p2 in s)if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0) t2[p2] = s[p2];
                if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++){
                    if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i])) t2[p2[i]] = s[p2[i]];
                }
                return t2;
            }
            function __decorate(decorators, target, key, desc) {
                var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }
            function __param(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                };
            }
            function __metadata(metadataKey, metadataValue) {
                if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
            }
            function __awaiter(thisArg, _arguments, P, generator) {
                return new (P || (P = Promise))(function(resolve2, reject) {
                    function fulfilled(value1) {
                        try {
                            step(generator.next(value1));
                        } catch (e) {
                            reject(e);
                        }
                    }
                    function rejected(value1) {
                        try {
                            step(generator["throw"](value1));
                        } catch (e) {
                            reject(e);
                        }
                    }
                    function step(result) {
                        result.done ? resolve2(result.value) : new P(function(resolve3) {
                            resolve3(result.value);
                        }).then(fulfilled, rejected);
                    }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            }
            function __generator(thisArg, body2) {
                var _ = {
                    label: 0,
                    sent: function sent() {
                        if (t2[0] & 1) throw t2[1];
                        return t2[1];
                    },
                    trys: [],
                    ops: []
                }, f2, y, t2, g;
                return g = {
                    next: verb(0),
                    "throw": verb(1),
                    "return": verb(2)
                }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
                    return this;
                }), g;
                function verb(n) {
                    return function(v) {
                        return step([
                            n,
                            v
                        ]);
                    };
                }
                function step(op) {
                    if (f2) throw new TypeError("Generator is already executing.");
                    while(_)try {
                        if (f2 = 1, y && (t2 = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t2 = y["return"]) && t2.call(y), 0) : y.next) && !(t2 = t2.call(y, op[1])).done) return t2;
                        if (y = 0, t2) op = [
                            op[0] & 2,
                            t2.value
                        ];
                        switch(op[0]){
                            case 0:
                            case 1:
                                t2 = op;
                                break;
                            case 4:
                                _.label++;
                                return {
                                    value: op[1],
                                    done: false
                                };
                            case 5:
                                _.label++;
                                y = op[1];
                                op = [
                                    0
                                ];
                                continue;
                            case 7:
                                op = _.ops.pop();
                                _.trys.pop();
                                continue;
                            default:
                                if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                    _ = 0;
                                    continue;
                                }
                                if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                                    _.label = op[1];
                                    break;
                                }
                                if (op[0] === 6 && _.label < t2[1]) {
                                    _.label = t2[1];
                                    t2 = op;
                                    break;
                                }
                                if (t2 && _.label < t2[2]) {
                                    _.label = t2[2];
                                    _.ops.push(op);
                                    break;
                                }
                                if (t2[2]) _.ops.pop();
                                _.trys.pop();
                                continue;
                        }
                        op = body2.call(thisArg, _);
                    } catch (e) {
                        op = [
                            6,
                            e
                        ];
                        y = 0;
                    } finally{
                        f2 = t2 = 0;
                    }
                    if (op[0] & 5) throw op[1];
                    return {
                        value: op[0] ? op[1] : void 0,
                        done: true
                    };
                }
            }
            function __exportStar(m, exports2) {
                for(var p2 in m)if (!exports2.hasOwnProperty(p2)) exports2[p2] = m[p2];
            }
            function __values(o) {
                var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
                if (m) return m.call(o);
                return {
                    next: function next() {
                        if (o && i >= o.length) o = void 0;
                        return {
                            value: o && o[i++],
                            done: !o
                        };
                    }
                };
            }
            function __read(o, n) {
                var m = typeof Symbol === "function" && o[Symbol.iterator];
                if (!m) return o;
                var i = m.call(o), r, ar = [], e;
                try {
                    while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
                } catch (error) {
                    e = {
                        error
                    };
                } finally{
                    try {
                        if (r && !r.done && (m = i["return"])) m.call(i);
                    } finally{
                        if (e) throw e.error;
                    }
                }
                return ar;
            }
            function __spread() {
                for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
                return ar;
            }
            function __spreadArrays() {
                for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
                for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a3 = arguments[i], j = 0, jl = a3.length; j < jl; j++, k++)r[k] = a3[j];
                return r;
            }
            function __await(v) {
                return this instanceof __await ? (this.v = v, this) : new __await(v);
            }
            function __asyncGenerator(thisArg, _arguments, generator) {
                if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                var g = generator.apply(thisArg, _arguments || []), i, q2 = [];
                return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
                    return this;
                }, i;
                function verb(n) {
                    if (g[n]) i[n] = function(v) {
                        return new Promise(function(a3, b) {
                            q2.push([
                                n,
                                v,
                                a3,
                                b
                            ]) > 1 || resume(n, v);
                        });
                    };
                }
                function resume(n, v) {
                    try {
                        step(g[n](v));
                    } catch (e) {
                        settle(q2[0][3], e);
                    }
                }
                function step(r) {
                    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q2[0][2], r);
                }
                function fulfill(value1) {
                    resume("next", value1);
                }
                function reject(value1) {
                    resume("throw", value1);
                }
                function settle(f2, v) {
                    if (f2(v), q2.shift(), q2.length) resume(q2[0][0], q2[0][1]);
                }
            }
            function __asyncDelegator(o) {
                var i, p2;
                return i = {}, verb("next"), verb("throw", function(e) {
                    throw e;
                }), verb("return"), i[Symbol.iterator] = function() {
                    return this;
                }, i;
                function verb(n, f2) {
                    i[n] = o[n] ? function(v) {
                        return (p2 = !p2) ? {
                            value: __await(o[n](v)),
                            done: n === "return"
                        } : f2 ? f2(v) : v;
                    } : f2;
                }
            }
            function __asyncValues(o) {
                if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                var m = o[Symbol.asyncIterator], i;
                return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
                    return this;
                }, i);
                function verb(n) {
                    i[n] = o[n] && function(v) {
                        return new Promise(function(resolve2, reject) {
                            v = o[n](v), settle(resolve2, reject, v.done, v.value);
                        });
                    };
                }
                function settle(resolve2, reject, d, v) {
                    Promise.resolve(v).then(function(v2) {
                        resolve2({
                            value: v2,
                            done: d
                        });
                    }, reject);
                }
            }
            function __makeTemplateObject(cooked, raw) {
                if (Object.defineProperty) {
                    Object.defineProperty(cooked, "raw", {
                        value: raw
                    });
                } else {
                    cooked.raw = raw;
                }
                return cooked;
            }
            function __importStar(mod) {
                if (mod && mod.__esModule) return mod;
                var result = {};
                if (mod != null) {
                    for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
                }
                result.default = mod;
                return result;
            }
            function __importDefault(mod) {
                return mod && mod.__esModule ? mod : {
                    default: mod
                };
            }
            var tslib_es6 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                __extends: __extends2,
                get __assign () {
                    return _assign;
                },
                __rest,
                __decorate,
                __param,
                __metadata,
                __awaiter,
                __generator,
                __exportStar,
                __values,
                __read,
                __spread,
                __spreadArrays,
                __await,
                __asyncGenerator,
                __asyncDelegator,
                __asyncValues,
                __makeTemplateObject,
                __importStar,
                __importDefault
            });
            var api = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                exports2.apiDescriptor = {
                    key: (_key)=>/^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(_key) ? _key : JSON.stringify(_key),
                    value (value1) {
                        if (value1 === null || typeof value1 !== "object") {
                            return JSON.stringify(value1);
                        }
                        if (Array.isArray(value1)) {
                            return "[".concat(value1.map((subValue)=>exports2.apiDescriptor.value(subValue)).join(", "), "]");
                        }
                        const keys = Object.keys(value1);
                        return keys.length === 0 ? "{}" : "{ ".concat(keys.map((key)=>"".concat(exports2.apiDescriptor.key(key), ": ").concat(exports2.apiDescriptor.value(value1[key]))).join(", "), " }");
                    },
                    pair: ({ key , value: value1  })=>exports2.apiDescriptor.value({
                            [key]: value1
                        })
                };
            });
            unwrapExports(api);
            var api_1 = api.apiDescriptor;
            var tslib_1 = getCjsExportFromNamespace(tslib_es6);
            var descriptors = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                tslib_1.__exportStar(api, exports2);
            });
            unwrapExports(descriptors);
            var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
            var escapeStringRegexp = function escapeStringRegexp2(str) {
                if (typeof str !== "string") {
                    throw new TypeError("Expected a string");
                }
                return str.replace(matchOperatorsRe, "\\$&");
            };
            var colorName = {
                "aliceblue": [
                    240,
                    248,
                    255
                ],
                "antiquewhite": [
                    250,
                    235,
                    215
                ],
                "aqua": [
                    0,
                    255,
                    255
                ],
                "aquamarine": [
                    127,
                    255,
                    212
                ],
                "azure": [
                    240,
                    255,
                    255
                ],
                "beige": [
                    245,
                    245,
                    220
                ],
                "bisque": [
                    255,
                    228,
                    196
                ],
                "black": [
                    0,
                    0,
                    0
                ],
                "blanchedalmond": [
                    255,
                    235,
                    205
                ],
                "blue": [
                    0,
                    0,
                    255
                ],
                "blueviolet": [
                    138,
                    43,
                    226
                ],
                "brown": [
                    165,
                    42,
                    42
                ],
                "burlywood": [
                    222,
                    184,
                    135
                ],
                "cadetblue": [
                    95,
                    158,
                    160
                ],
                "chartreuse": [
                    127,
                    255,
                    0
                ],
                "chocolate": [
                    210,
                    105,
                    30
                ],
                "coral": [
                    255,
                    127,
                    80
                ],
                "cornflowerblue": [
                    100,
                    149,
                    237
                ],
                "cornsilk": [
                    255,
                    248,
                    220
                ],
                "crimson": [
                    220,
                    20,
                    60
                ],
                "cyan": [
                    0,
                    255,
                    255
                ],
                "darkblue": [
                    0,
                    0,
                    139
                ],
                "darkcyan": [
                    0,
                    139,
                    139
                ],
                "darkgoldenrod": [
                    184,
                    134,
                    11
                ],
                "darkgray": [
                    169,
                    169,
                    169
                ],
                "darkgreen": [
                    0,
                    100,
                    0
                ],
                "darkgrey": [
                    169,
                    169,
                    169
                ],
                "darkkhaki": [
                    189,
                    183,
                    107
                ],
                "darkmagenta": [
                    139,
                    0,
                    139
                ],
                "darkolivegreen": [
                    85,
                    107,
                    47
                ],
                "darkorange": [
                    255,
                    140,
                    0
                ],
                "darkorchid": [
                    153,
                    50,
                    204
                ],
                "darkred": [
                    139,
                    0,
                    0
                ],
                "darksalmon": [
                    233,
                    150,
                    122
                ],
                "darkseagreen": [
                    143,
                    188,
                    143
                ],
                "darkslateblue": [
                    72,
                    61,
                    139
                ],
                "darkslategray": [
                    47,
                    79,
                    79
                ],
                "darkslategrey": [
                    47,
                    79,
                    79
                ],
                "darkturquoise": [
                    0,
                    206,
                    209
                ],
                "darkviolet": [
                    148,
                    0,
                    211
                ],
                "deeppink": [
                    255,
                    20,
                    147
                ],
                "deepskyblue": [
                    0,
                    191,
                    255
                ],
                "dimgray": [
                    105,
                    105,
                    105
                ],
                "dimgrey": [
                    105,
                    105,
                    105
                ],
                "dodgerblue": [
                    30,
                    144,
                    255
                ],
                "firebrick": [
                    178,
                    34,
                    34
                ],
                "floralwhite": [
                    255,
                    250,
                    240
                ],
                "forestgreen": [
                    34,
                    139,
                    34
                ],
                "fuchsia": [
                    255,
                    0,
                    255
                ],
                "gainsboro": [
                    220,
                    220,
                    220
                ],
                "ghostwhite": [
                    248,
                    248,
                    255
                ],
                "gold": [
                    255,
                    215,
                    0
                ],
                "goldenrod": [
                    218,
                    165,
                    32
                ],
                "gray": [
                    128,
                    128,
                    128
                ],
                "green": [
                    0,
                    128,
                    0
                ],
                "greenyellow": [
                    173,
                    255,
                    47
                ],
                "grey": [
                    128,
                    128,
                    128
                ],
                "honeydew": [
                    240,
                    255,
                    240
                ],
                "hotpink": [
                    255,
                    105,
                    180
                ],
                "indianred": [
                    205,
                    92,
                    92
                ],
                "indigo": [
                    75,
                    0,
                    130
                ],
                "ivory": [
                    255,
                    255,
                    240
                ],
                "khaki": [
                    240,
                    230,
                    140
                ],
                "lavender": [
                    230,
                    230,
                    250
                ],
                "lavenderblush": [
                    255,
                    240,
                    245
                ],
                "lawngreen": [
                    124,
                    252,
                    0
                ],
                "lemonchiffon": [
                    255,
                    250,
                    205
                ],
                "lightblue": [
                    173,
                    216,
                    230
                ],
                "lightcoral": [
                    240,
                    128,
                    128
                ],
                "lightcyan": [
                    224,
                    255,
                    255
                ],
                "lightgoldenrodyellow": [
                    250,
                    250,
                    210
                ],
                "lightgray": [
                    211,
                    211,
                    211
                ],
                "lightgreen": [
                    144,
                    238,
                    144
                ],
                "lightgrey": [
                    211,
                    211,
                    211
                ],
                "lightpink": [
                    255,
                    182,
                    193
                ],
                "lightsalmon": [
                    255,
                    160,
                    122
                ],
                "lightseagreen": [
                    32,
                    178,
                    170
                ],
                "lightskyblue": [
                    135,
                    206,
                    250
                ],
                "lightslategray": [
                    119,
                    136,
                    153
                ],
                "lightslategrey": [
                    119,
                    136,
                    153
                ],
                "lightsteelblue": [
                    176,
                    196,
                    222
                ],
                "lightyellow": [
                    255,
                    255,
                    224
                ],
                "lime": [
                    0,
                    255,
                    0
                ],
                "limegreen": [
                    50,
                    205,
                    50
                ],
                "linen": [
                    250,
                    240,
                    230
                ],
                "magenta": [
                    255,
                    0,
                    255
                ],
                "maroon": [
                    128,
                    0,
                    0
                ],
                "mediumaquamarine": [
                    102,
                    205,
                    170
                ],
                "mediumblue": [
                    0,
                    0,
                    205
                ],
                "mediumorchid": [
                    186,
                    85,
                    211
                ],
                "mediumpurple": [
                    147,
                    112,
                    219
                ],
                "mediumseagreen": [
                    60,
                    179,
                    113
                ],
                "mediumslateblue": [
                    123,
                    104,
                    238
                ],
                "mediumspringgreen": [
                    0,
                    250,
                    154
                ],
                "mediumturquoise": [
                    72,
                    209,
                    204
                ],
                "mediumvioletred": [
                    199,
                    21,
                    133
                ],
                "midnightblue": [
                    25,
                    25,
                    112
                ],
                "mintcream": [
                    245,
                    255,
                    250
                ],
                "mistyrose": [
                    255,
                    228,
                    225
                ],
                "moccasin": [
                    255,
                    228,
                    181
                ],
                "navajowhite": [
                    255,
                    222,
                    173
                ],
                "navy": [
                    0,
                    0,
                    128
                ],
                "oldlace": [
                    253,
                    245,
                    230
                ],
                "olive": [
                    128,
                    128,
                    0
                ],
                "olivedrab": [
                    107,
                    142,
                    35
                ],
                "orange": [
                    255,
                    165,
                    0
                ],
                "orangered": [
                    255,
                    69,
                    0
                ],
                "orchid": [
                    218,
                    112,
                    214
                ],
                "palegoldenrod": [
                    238,
                    232,
                    170
                ],
                "palegreen": [
                    152,
                    251,
                    152
                ],
                "paleturquoise": [
                    175,
                    238,
                    238
                ],
                "palevioletred": [
                    219,
                    112,
                    147
                ],
                "papayawhip": [
                    255,
                    239,
                    213
                ],
                "peachpuff": [
                    255,
                    218,
                    185
                ],
                "peru": [
                    205,
                    133,
                    63
                ],
                "pink": [
                    255,
                    192,
                    203
                ],
                "plum": [
                    221,
                    160,
                    221
                ],
                "powderblue": [
                    176,
                    224,
                    230
                ],
                "purple": [
                    128,
                    0,
                    128
                ],
                "rebeccapurple": [
                    102,
                    51,
                    153
                ],
                "red": [
                    255,
                    0,
                    0
                ],
                "rosybrown": [
                    188,
                    143,
                    143
                ],
                "royalblue": [
                    65,
                    105,
                    225
                ],
                "saddlebrown": [
                    139,
                    69,
                    19
                ],
                "salmon": [
                    250,
                    128,
                    114
                ],
                "sandybrown": [
                    244,
                    164,
                    96
                ],
                "seagreen": [
                    46,
                    139,
                    87
                ],
                "seashell": [
                    255,
                    245,
                    238
                ],
                "sienna": [
                    160,
                    82,
                    45
                ],
                "silver": [
                    192,
                    192,
                    192
                ],
                "skyblue": [
                    135,
                    206,
                    235
                ],
                "slateblue": [
                    106,
                    90,
                    205
                ],
                "slategray": [
                    112,
                    128,
                    144
                ],
                "slategrey": [
                    112,
                    128,
                    144
                ],
                "snow": [
                    255,
                    250,
                    250
                ],
                "springgreen": [
                    0,
                    255,
                    127
                ],
                "steelblue": [
                    70,
                    130,
                    180
                ],
                "tan": [
                    210,
                    180,
                    140
                ],
                "teal": [
                    0,
                    128,
                    128
                ],
                "thistle": [
                    216,
                    191,
                    216
                ],
                "tomato": [
                    255,
                    99,
                    71
                ],
                "turquoise": [
                    64,
                    224,
                    208
                ],
                "violet": [
                    238,
                    130,
                    238
                ],
                "wheat": [
                    245,
                    222,
                    179
                ],
                "white": [
                    255,
                    255,
                    255
                ],
                "whitesmoke": [
                    245,
                    245,
                    245
                ],
                "yellow": [
                    255,
                    255,
                    0
                ],
                "yellowgreen": [
                    154,
                    205,
                    50
                ]
            };
            var conversions = createCommonjsModule(function(module2) {
                var reverseKeywords2 = {};
                for(var key in colorName){
                    if (colorName.hasOwnProperty(key)) {
                        reverseKeywords2[colorName[key]] = key;
                    }
                }
                var convert2 = module2.exports = {
                    rgb: {
                        channels: 3,
                        labels: "rgb"
                    },
                    hsl: {
                        channels: 3,
                        labels: "hsl"
                    },
                    hsv: {
                        channels: 3,
                        labels: "hsv"
                    },
                    hwb: {
                        channels: 3,
                        labels: "hwb"
                    },
                    cmyk: {
                        channels: 4,
                        labels: "cmyk"
                    },
                    xyz: {
                        channels: 3,
                        labels: "xyz"
                    },
                    lab: {
                        channels: 3,
                        labels: "lab"
                    },
                    lch: {
                        channels: 3,
                        labels: "lch"
                    },
                    hex: {
                        channels: 1,
                        labels: [
                            "hex"
                        ]
                    },
                    keyword: {
                        channels: 1,
                        labels: [
                            "keyword"
                        ]
                    },
                    ansi16: {
                        channels: 1,
                        labels: [
                            "ansi16"
                        ]
                    },
                    ansi256: {
                        channels: 1,
                        labels: [
                            "ansi256"
                        ]
                    },
                    hcg: {
                        channels: 3,
                        labels: [
                            "h",
                            "c",
                            "g"
                        ]
                    },
                    apple: {
                        channels: 3,
                        labels: [
                            "r16",
                            "g16",
                            "b16"
                        ]
                    },
                    gray: {
                        channels: 1,
                        labels: [
                            "gray"
                        ]
                    }
                };
                for(var model in convert2){
                    if (convert2.hasOwnProperty(model)) {
                        if (!("channels" in convert2[model])) {
                            throw new Error("missing channels property: " + model);
                        }
                        if (!("labels" in convert2[model])) {
                            throw new Error("missing channel labels property: " + model);
                        }
                        if (convert2[model].labels.length !== convert2[model].channels) {
                            throw new Error("channel and label counts mismatch: " + model);
                        }
                        var channels = convert2[model].channels;
                        var labels = convert2[model].labels;
                        delete convert2[model].channels;
                        delete convert2[model].labels;
                        Object.defineProperty(convert2[model], "channels", {
                            value: channels
                        });
                        Object.defineProperty(convert2[model], "labels", {
                            value: labels
                        });
                    }
                }
                convert2.rgb.hsl = function(rgb) {
                    var r = rgb[0] / 255;
                    var g = rgb[1] / 255;
                    var b = rgb[2] / 255;
                    var min = Math.min(r, g, b);
                    var max = Math.max(r, g, b);
                    var delta = max - min;
                    var h;
                    var s;
                    var l;
                    if (max === min) {
                        h = 0;
                    } else if (r === max) {
                        h = (g - b) / delta;
                    } else if (g === max) {
                        h = 2 + (b - r) / delta;
                    } else if (b === max) {
                        h = 4 + (r - g) / delta;
                    }
                    h = Math.min(h * 60, 360);
                    if (h < 0) {
                        h += 360;
                    }
                    l = (min + max) / 2;
                    if (max === min) {
                        s = 0;
                    } else if (l <= 0.5) {
                        s = delta / (max + min);
                    } else {
                        s = delta / (2 - max - min);
                    }
                    return [
                        h,
                        s * 100,
                        l * 100
                    ];
                };
                convert2.rgb.hsv = function(rgb) {
                    var rdif;
                    var gdif;
                    var bdif;
                    var h;
                    var s;
                    var r = rgb[0] / 255;
                    var g = rgb[1] / 255;
                    var b = rgb[2] / 255;
                    var v = Math.max(r, g, b);
                    var diff2 = v - Math.min(r, g, b);
                    var diffc = function diffc2(c) {
                        return (v - c) / 6 / diff2 + 1 / 2;
                    };
                    if (diff2 === 0) {
                        h = s = 0;
                    } else {
                        s = diff2 / v;
                        rdif = diffc(r);
                        gdif = diffc(g);
                        bdif = diffc(b);
                        if (r === v) {
                            h = bdif - gdif;
                        } else if (g === v) {
                            h = 1 / 3 + rdif - bdif;
                        } else if (b === v) {
                            h = 2 / 3 + gdif - rdif;
                        }
                        if (h < 0) {
                            h += 1;
                        } else if (h > 1) {
                            h -= 1;
                        }
                    }
                    return [
                        h * 360,
                        s * 100,
                        v * 100
                    ];
                };
                convert2.rgb.hwb = function(rgb) {
                    var r = rgb[0];
                    var g = rgb[1];
                    var b = rgb[2];
                    var h = convert2.rgb.hsl(rgb)[0];
                    var w = 1 / 255 * Math.min(r, Math.min(g, b));
                    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
                    return [
                        h,
                        w * 100,
                        b * 100
                    ];
                };
                convert2.rgb.cmyk = function(rgb) {
                    var r = rgb[0] / 255;
                    var g = rgb[1] / 255;
                    var b = rgb[2] / 255;
                    var c;
                    var m;
                    var y;
                    var k;
                    k = Math.min(1 - r, 1 - g, 1 - b);
                    c = (1 - r - k) / (1 - k) || 0;
                    m = (1 - g - k) / (1 - k) || 0;
                    y = (1 - b - k) / (1 - k) || 0;
                    return [
                        c * 100,
                        m * 100,
                        y * 100,
                        k * 100
                    ];
                };
                function comparativeDistance2(x, y) {
                    return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
                }
                convert2.rgb.keyword = function(rgb) {
                    var reversed = reverseKeywords2[rgb];
                    if (reversed) {
                        return reversed;
                    }
                    var currentClosestDistance = Infinity;
                    var currentClosestKeyword;
                    for(var keyword2 in colorName){
                        if (colorName.hasOwnProperty(keyword2)) {
                            var value1 = colorName[keyword2];
                            var distance = comparativeDistance2(rgb, value1);
                            if (distance < currentClosestDistance) {
                                currentClosestDistance = distance;
                                currentClosestKeyword = keyword2;
                            }
                        }
                    }
                    return currentClosestKeyword;
                };
                convert2.keyword.rgb = function(keyword2) {
                    return colorName[keyword2];
                };
                convert2.rgb.xyz = function(rgb) {
                    var r = rgb[0] / 255;
                    var g = rgb[1] / 255;
                    var b = rgb[2] / 255;
                    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
                    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
                    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
                    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
                    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
                    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
                    return [
                        x * 100,
                        y * 100,
                        z * 100
                    ];
                };
                convert2.rgb.lab = function(rgb) {
                    var xyz = convert2.rgb.xyz(rgb);
                    var x = xyz[0];
                    var y = xyz[1];
                    var z = xyz[2];
                    var l;
                    var a3;
                    var b;
                    x /= 95.047;
                    y /= 100;
                    z /= 108.883;
                    x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
                    y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
                    z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
                    l = 116 * y - 16;
                    a3 = 500 * (x - y);
                    b = 200 * (y - z);
                    return [
                        l,
                        a3,
                        b
                    ];
                };
                convert2.hsl.rgb = function(hsl) {
                    var h = hsl[0] / 360;
                    var s = hsl[1] / 100;
                    var l = hsl[2] / 100;
                    var t1;
                    var t2;
                    var t3;
                    var rgb;
                    var val;
                    if (s === 0) {
                        val = l * 255;
                        return [
                            val,
                            val,
                            val
                        ];
                    }
                    if (l < 0.5) {
                        t2 = l * (1 + s);
                    } else {
                        t2 = l + s - l * s;
                    }
                    t1 = 2 * l - t2;
                    rgb = [
                        0,
                        0,
                        0
                    ];
                    for(var i = 0; i < 3; i++){
                        t3 = h + 1 / 3 * -(i - 1);
                        if (t3 < 0) {
                            t3++;
                        }
                        if (t3 > 1) {
                            t3--;
                        }
                        if (6 * t3 < 1) {
                            val = t1 + (t2 - t1) * 6 * t3;
                        } else if (2 * t3 < 1) {
                            val = t2;
                        } else if (3 * t3 < 2) {
                            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
                        } else {
                            val = t1;
                        }
                        rgb[i] = val * 255;
                    }
                    return rgb;
                };
                convert2.hsl.hsv = function(hsl) {
                    var h = hsl[0];
                    var s = hsl[1] / 100;
                    var l = hsl[2] / 100;
                    var smin = s;
                    var lmin = Math.max(l, 0.01);
                    var sv;
                    var v;
                    l *= 2;
                    s *= l <= 1 ? l : 2 - l;
                    smin *= lmin <= 1 ? lmin : 2 - lmin;
                    v = (l + s) / 2;
                    sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
                    return [
                        h,
                        sv * 100,
                        v * 100
                    ];
                };
                convert2.hsv.rgb = function(hsv) {
                    var h = hsv[0] / 60;
                    var s = hsv[1] / 100;
                    var v = hsv[2] / 100;
                    var hi = Math.floor(h) % 6;
                    var f2 = h - Math.floor(h);
                    var p2 = 255 * v * (1 - s);
                    var q2 = 255 * v * (1 - s * f2);
                    var t2 = 255 * v * (1 - s * (1 - f2));
                    v *= 255;
                    switch(hi){
                        case 0:
                            return [
                                v,
                                t2,
                                p2
                            ];
                        case 1:
                            return [
                                q2,
                                v,
                                p2
                            ];
                        case 2:
                            return [
                                p2,
                                v,
                                t2
                            ];
                        case 3:
                            return [
                                p2,
                                q2,
                                v
                            ];
                        case 4:
                            return [
                                t2,
                                p2,
                                v
                            ];
                        case 5:
                            return [
                                v,
                                p2,
                                q2
                            ];
                    }
                };
                convert2.hsv.hsl = function(hsv) {
                    var h = hsv[0];
                    var s = hsv[1] / 100;
                    var v = hsv[2] / 100;
                    var vmin = Math.max(v, 0.01);
                    var lmin;
                    var sl;
                    var l;
                    l = (2 - s) * v;
                    lmin = (2 - s) * vmin;
                    sl = s * vmin;
                    sl /= lmin <= 1 ? lmin : 2 - lmin;
                    sl = sl || 0;
                    l /= 2;
                    return [
                        h,
                        sl * 100,
                        l * 100
                    ];
                };
                convert2.hwb.rgb = function(hwb) {
                    var h = hwb[0] / 360;
                    var wh = hwb[1] / 100;
                    var bl = hwb[2] / 100;
                    var ratio = wh + bl;
                    var i;
                    var v;
                    var f2;
                    var n;
                    if (ratio > 1) {
                        wh /= ratio;
                        bl /= ratio;
                    }
                    i = Math.floor(6 * h);
                    v = 1 - bl;
                    f2 = 6 * h - i;
                    if ((i & 1) !== 0) {
                        f2 = 1 - f2;
                    }
                    n = wh + f2 * (v - wh);
                    var r;
                    var g;
                    var b;
                    switch(i){
                        default:
                        case 6:
                        case 0:
                            r = v;
                            g = n;
                            b = wh;
                            break;
                        case 1:
                            r = n;
                            g = v;
                            b = wh;
                            break;
                        case 2:
                            r = wh;
                            g = v;
                            b = n;
                            break;
                        case 3:
                            r = wh;
                            g = n;
                            b = v;
                            break;
                        case 4:
                            r = n;
                            g = wh;
                            b = v;
                            break;
                        case 5:
                            r = v;
                            g = wh;
                            b = n;
                            break;
                    }
                    return [
                        r * 255,
                        g * 255,
                        b * 255
                    ];
                };
                convert2.cmyk.rgb = function(cmyk) {
                    var c = cmyk[0] / 100;
                    var m = cmyk[1] / 100;
                    var y = cmyk[2] / 100;
                    var k = cmyk[3] / 100;
                    var r;
                    var g;
                    var b;
                    r = 1 - Math.min(1, c * (1 - k) + k);
                    g = 1 - Math.min(1, m * (1 - k) + k);
                    b = 1 - Math.min(1, y * (1 - k) + k);
                    return [
                        r * 255,
                        g * 255,
                        b * 255
                    ];
                };
                convert2.xyz.rgb = function(xyz) {
                    var x = xyz[0] / 100;
                    var y = xyz[1] / 100;
                    var z = xyz[2] / 100;
                    var r;
                    var g;
                    var b;
                    r = x * 3.2406 + y * -1.5372 + z * -0.4986;
                    g = x * -0.9689 + y * 1.8758 + z * 0.0415;
                    b = x * 0.0557 + y * -0.204 + z * 1.057;
                    r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
                    g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
                    b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
                    r = Math.min(Math.max(0, r), 1);
                    g = Math.min(Math.max(0, g), 1);
                    b = Math.min(Math.max(0, b), 1);
                    return [
                        r * 255,
                        g * 255,
                        b * 255
                    ];
                };
                convert2.xyz.lab = function(xyz) {
                    var x = xyz[0];
                    var y = xyz[1];
                    var z = xyz[2];
                    var l;
                    var a3;
                    var b;
                    x /= 95.047;
                    y /= 100;
                    z /= 108.883;
                    x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
                    y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
                    z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
                    l = 116 * y - 16;
                    a3 = 500 * (x - y);
                    b = 200 * (y - z);
                    return [
                        l,
                        a3,
                        b
                    ];
                };
                convert2.lab.xyz = function(lab) {
                    var l = lab[0];
                    var a3 = lab[1];
                    var b = lab[2];
                    var x;
                    var y;
                    var z;
                    y = (l + 16) / 116;
                    x = a3 / 500 + y;
                    z = y - b / 200;
                    var y2 = Math.pow(y, 3);
                    var x2 = Math.pow(x, 3);
                    var z2 = Math.pow(z, 3);
                    y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
                    x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
                    z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
                    x *= 95.047;
                    y *= 100;
                    z *= 108.883;
                    return [
                        x,
                        y,
                        z
                    ];
                };
                convert2.lab.lch = function(lab) {
                    var l = lab[0];
                    var a3 = lab[1];
                    var b = lab[2];
                    var hr2;
                    var h;
                    var c;
                    hr2 = Math.atan2(b, a3);
                    h = hr2 * 360 / 2 / Math.PI;
                    if (h < 0) {
                        h += 360;
                    }
                    c = Math.sqrt(a3 * a3 + b * b);
                    return [
                        l,
                        c,
                        h
                    ];
                };
                convert2.lch.lab = function(lch) {
                    var l = lch[0];
                    var c = lch[1];
                    var h = lch[2];
                    var a3;
                    var b;
                    var hr2;
                    hr2 = h / 360 * 2 * Math.PI;
                    a3 = c * Math.cos(hr2);
                    b = c * Math.sin(hr2);
                    return [
                        l,
                        a3,
                        b
                    ];
                };
                convert2.rgb.ansi16 = function(args) {
                    var r = args[0];
                    var g = args[1];
                    var b = args[2];
                    var value1 = 1 in arguments ? arguments[1] : convert2.rgb.hsv(args)[2];
                    value1 = Math.round(value1 / 50);
                    if (value1 === 0) {
                        return 30;
                    }
                    var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
                    if (value1 === 2) {
                        ansi += 60;
                    }
                    return ansi;
                };
                convert2.hsv.ansi16 = function(args) {
                    return convert2.rgb.ansi16(convert2.hsv.rgb(args), args[2]);
                };
                convert2.rgb.ansi256 = function(args) {
                    var r = args[0];
                    var g = args[1];
                    var b = args[2];
                    if (r === g && g === b) {
                        if (r < 8) {
                            return 16;
                        }
                        if (r > 248) {
                            return 231;
                        }
                        return Math.round((r - 8) / 247 * 24) + 232;
                    }
                    var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
                    return ansi;
                };
                convert2.ansi16.rgb = function(args) {
                    var color2 = args % 10;
                    if (color2 === 0 || color2 === 7) {
                        if (args > 50) {
                            color2 += 3.5;
                        }
                        color2 = color2 / 10.5 * 255;
                        return [
                            color2,
                            color2,
                            color2
                        ];
                    }
                    var mult = (~~(args > 50) + 1) * 0.5;
                    var r = (color2 & 1) * mult * 255;
                    var g = (color2 >> 1 & 1) * mult * 255;
                    var b = (color2 >> 2 & 1) * mult * 255;
                    return [
                        r,
                        g,
                        b
                    ];
                };
                convert2.ansi256.rgb = function(args) {
                    if (args >= 232) {
                        var c = (args - 232) * 10 + 8;
                        return [
                            c,
                            c,
                            c
                        ];
                    }
                    args -= 16;
                    var rem;
                    var r = Math.floor(args / 36) / 5 * 255;
                    var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
                    var b = rem % 6 / 5 * 255;
                    return [
                        r,
                        g,
                        b
                    ];
                };
                convert2.rgb.hex = function(args) {
                    var integer3 = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
                    var string3 = integer3.toString(16).toUpperCase();
                    return "000000".substring(string3.length) + string3;
                };
                convert2.hex.rgb = function(args) {
                    var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
                    if (!match) {
                        return [
                            0,
                            0,
                            0
                        ];
                    }
                    var colorString = match[0];
                    if (match[0].length === 3) {
                        colorString = colorString.split("").map(function(char) {
                            return char + char;
                        }).join("");
                    }
                    var integer3 = parseInt(colorString, 16);
                    var r = integer3 >> 16 & 255;
                    var g = integer3 >> 8 & 255;
                    var b = integer3 & 255;
                    return [
                        r,
                        g,
                        b
                    ];
                };
                convert2.rgb.hcg = function(rgb) {
                    var r = rgb[0] / 255;
                    var g = rgb[1] / 255;
                    var b = rgb[2] / 255;
                    var max = Math.max(Math.max(r, g), b);
                    var min = Math.min(Math.min(r, g), b);
                    var chroma = max - min;
                    var grayscale;
                    var hue;
                    if (chroma < 1) {
                        grayscale = min / (1 - chroma);
                    } else {
                        grayscale = 0;
                    }
                    if (chroma <= 0) {
                        hue = 0;
                    } else if (max === r) {
                        hue = (g - b) / chroma % 6;
                    } else if (max === g) {
                        hue = 2 + (b - r) / chroma;
                    } else {
                        hue = 4 + (r - g) / chroma + 4;
                    }
                    hue /= 6;
                    hue %= 1;
                    return [
                        hue * 360,
                        chroma * 100,
                        grayscale * 100
                    ];
                };
                convert2.hsl.hcg = function(hsl) {
                    var s = hsl[1] / 100;
                    var l = hsl[2] / 100;
                    var c = 1;
                    var f2 = 0;
                    if (l < 0.5) {
                        c = 2 * s * l;
                    } else {
                        c = 2 * s * (1 - l);
                    }
                    if (c < 1) {
                        f2 = (l - 0.5 * c) / (1 - c);
                    }
                    return [
                        hsl[0],
                        c * 100,
                        f2 * 100
                    ];
                };
                convert2.hsv.hcg = function(hsv) {
                    var s = hsv[1] / 100;
                    var v = hsv[2] / 100;
                    var c = s * v;
                    var f2 = 0;
                    if (c < 1) {
                        f2 = (v - c) / (1 - c);
                    }
                    return [
                        hsv[0],
                        c * 100,
                        f2 * 100
                    ];
                };
                convert2.hcg.rgb = function(hcg) {
                    var h = hcg[0] / 360;
                    var c = hcg[1] / 100;
                    var g = hcg[2] / 100;
                    if (c === 0) {
                        return [
                            g * 255,
                            g * 255,
                            g * 255
                        ];
                    }
                    var pure = [
                        0,
                        0,
                        0
                    ];
                    var hi = h % 1 * 6;
                    var v = hi % 1;
                    var w = 1 - v;
                    var mg = 0;
                    switch(Math.floor(hi)){
                        case 0:
                            pure[0] = 1;
                            pure[1] = v;
                            pure[2] = 0;
                            break;
                        case 1:
                            pure[0] = w;
                            pure[1] = 1;
                            pure[2] = 0;
                            break;
                        case 2:
                            pure[0] = 0;
                            pure[1] = 1;
                            pure[2] = v;
                            break;
                        case 3:
                            pure[0] = 0;
                            pure[1] = w;
                            pure[2] = 1;
                            break;
                        case 4:
                            pure[0] = v;
                            pure[1] = 0;
                            pure[2] = 1;
                            break;
                        default:
                            pure[0] = 1;
                            pure[1] = 0;
                            pure[2] = w;
                    }
                    mg = (1 - c) * g;
                    return [
                        (c * pure[0] + mg) * 255,
                        (c * pure[1] + mg) * 255,
                        (c * pure[2] + mg) * 255
                    ];
                };
                convert2.hcg.hsv = function(hcg) {
                    var c = hcg[1] / 100;
                    var g = hcg[2] / 100;
                    var v = c + g * (1 - c);
                    var f2 = 0;
                    if (v > 0) {
                        f2 = c / v;
                    }
                    return [
                        hcg[0],
                        f2 * 100,
                        v * 100
                    ];
                };
                convert2.hcg.hsl = function(hcg) {
                    var c = hcg[1] / 100;
                    var g = hcg[2] / 100;
                    var l = g * (1 - c) + 0.5 * c;
                    var s = 0;
                    if (l > 0 && l < 0.5) {
                        s = c / (2 * l);
                    } else if (l >= 0.5 && l < 1) {
                        s = c / (2 * (1 - l));
                    }
                    return [
                        hcg[0],
                        s * 100,
                        l * 100
                    ];
                };
                convert2.hcg.hwb = function(hcg) {
                    var c = hcg[1] / 100;
                    var g = hcg[2] / 100;
                    var v = c + g * (1 - c);
                    return [
                        hcg[0],
                        (v - c) * 100,
                        (1 - v) * 100
                    ];
                };
                convert2.hwb.hcg = function(hwb) {
                    var w = hwb[1] / 100;
                    var b = hwb[2] / 100;
                    var v = 1 - b;
                    var c = v - w;
                    var g = 0;
                    if (c < 1) {
                        g = (v - c) / (1 - c);
                    }
                    return [
                        hwb[0],
                        c * 100,
                        g * 100
                    ];
                };
                convert2.apple.rgb = function(apple) {
                    return [
                        apple[0] / 65535 * 255,
                        apple[1] / 65535 * 255,
                        apple[2] / 65535 * 255
                    ];
                };
                convert2.rgb.apple = function(rgb) {
                    return [
                        rgb[0] / 255 * 65535,
                        rgb[1] / 255 * 65535,
                        rgb[2] / 255 * 65535
                    ];
                };
                convert2.gray.rgb = function(args) {
                    return [
                        args[0] / 100 * 255,
                        args[0] / 100 * 255,
                        args[0] / 100 * 255
                    ];
                };
                convert2.gray.hsl = convert2.gray.hsv = function(args) {
                    return [
                        0,
                        0,
                        args[0]
                    ];
                };
                convert2.gray.hwb = function(gray) {
                    return [
                        0,
                        100,
                        gray[0]
                    ];
                };
                convert2.gray.cmyk = function(gray) {
                    return [
                        0,
                        0,
                        0,
                        gray[0]
                    ];
                };
                convert2.gray.lab = function(gray) {
                    return [
                        gray[0],
                        0,
                        0
                    ];
                };
                convert2.gray.hex = function(gray) {
                    var val = Math.round(gray[0] / 100 * 255) & 255;
                    var integer3 = (val << 16) + (val << 8) + val;
                    var string3 = integer3.toString(16).toUpperCase();
                    return "000000".substring(string3.length) + string3;
                };
                convert2.rgb.gray = function(rgb) {
                    var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
                    return [
                        val / 255 * 100
                    ];
                };
            });
            var conversions_1 = conversions.rgb;
            var conversions_2 = conversions.hsl;
            var conversions_3 = conversions.hsv;
            var conversions_4 = conversions.hwb;
            var conversions_5 = conversions.cmyk;
            var conversions_6 = conversions.xyz;
            var conversions_7 = conversions.lab;
            var conversions_8 = conversions.lch;
            var conversions_9 = conversions.hex;
            var conversions_10 = conversions.keyword;
            var conversions_11 = conversions.ansi16;
            var conversions_12 = conversions.ansi256;
            var conversions_13 = conversions.hcg;
            var conversions_14 = conversions.apple;
            var conversions_15 = conversions.gray;
            function buildGraph() {
                var graph = {};
                var models2 = Object.keys(conversions);
                for(var len = models2.length, i = 0; i < len; i++){
                    graph[models2[i]] = {
                        // http://jsperf.com/1-vs-infinity
                        // micro-opt, but this is simple.
                        distance: -1,
                        parent: null
                    };
                }
                return graph;
            }
            function deriveBFS(fromModel) {
                var graph = buildGraph();
                var queue2 = [
                    fromModel
                ];
                graph[fromModel].distance = 0;
                while(queue2.length){
                    var current = queue2.pop();
                    var adjacents = Object.keys(conversions[current]);
                    for(var len = adjacents.length, i = 0; i < len; i++){
                        var adjacent = adjacents[i];
                        var node = graph[adjacent];
                        if (node.distance === -1) {
                            node.distance = graph[current].distance + 1;
                            node.parent = current;
                            queue2.unshift(adjacent);
                        }
                    }
                }
                return graph;
            }
            function link(from2, to) {
                return function(args) {
                    return to(from2(args));
                };
            }
            function wrapConversion(toModel, graph) {
                var path6 = [
                    graph[toModel].parent,
                    toModel
                ];
                var fn = conversions[graph[toModel].parent][toModel];
                var cur = graph[toModel].parent;
                while(graph[cur].parent){
                    path6.unshift(graph[cur].parent);
                    fn = link(conversions[graph[cur].parent][cur], fn);
                    cur = graph[cur].parent;
                }
                fn.conversion = path6;
                return fn;
            }
            var route = function route2(fromModel) {
                var graph = deriveBFS(fromModel);
                var conversion = {};
                var models2 = Object.keys(graph);
                for(var len = models2.length, i = 0; i < len; i++){
                    var toModel = models2[i];
                    var node = graph[toModel];
                    if (node.parent === null) {
                        continue;
                    }
                    conversion[toModel] = wrapConversion(toModel, graph);
                }
                return conversion;
            };
            var convert = {};
            var models = Object.keys(conversions);
            function wrapRaw(fn) {
                var wrappedFn = function wrappedFn2(args) {
                    if (args === void 0 || args === null) {
                        return args;
                    }
                    if (arguments.length > 1) {
                        args = Array.prototype.slice.call(arguments);
                    }
                    return fn(args);
                };
                if ("conversion" in fn) {
                    wrappedFn.conversion = fn.conversion;
                }
                return wrappedFn;
            }
            function wrapRounded(fn) {
                var wrappedFn = function wrappedFn2(args) {
                    if (args === void 0 || args === null) {
                        return args;
                    }
                    if (arguments.length > 1) {
                        args = Array.prototype.slice.call(arguments);
                    }
                    var result = fn(args);
                    if (typeof result === "object") {
                        for(var len = result.length, i = 0; i < len; i++){
                            result[i] = Math.round(result[i]);
                        }
                    }
                    return result;
                };
                if ("conversion" in fn) {
                    wrappedFn.conversion = fn.conversion;
                }
                return wrappedFn;
            }
            models.forEach(function(fromModel) {
                convert[fromModel] = {};
                Object.defineProperty(convert[fromModel], "channels", {
                    value: conversions[fromModel].channels
                });
                Object.defineProperty(convert[fromModel], "labels", {
                    value: conversions[fromModel].labels
                });
                var routes = route(fromModel);
                var routeModels = Object.keys(routes);
                routeModels.forEach(function(toModel) {
                    var fn = routes[toModel];
                    convert[fromModel][toModel] = wrapRounded(fn);
                    convert[fromModel][toModel].raw = wrapRaw(fn);
                });
            });
            var colorConvert = convert;
            var ansiStyles = createCommonjsModule(function(module2) {
                const wrapAnsi16 = (fn, offset)=>function() {
                        const code2 = fn.apply(colorConvert, arguments);
                        return "\x1B[".concat(code2 + offset, "m");
                    };
                const wrapAnsi256 = (fn, offset)=>function() {
                        const code2 = fn.apply(colorConvert, arguments);
                        return "\x1B[".concat(38 + offset, ";5;").concat(code2, "m");
                    };
                const wrapAnsi16m = (fn, offset)=>function() {
                        const rgb = fn.apply(colorConvert, arguments);
                        return "\x1B[".concat(38 + offset, ";2;").concat(rgb[0], ";").concat(rgb[1], ";").concat(rgb[2], "m");
                    };
                function assembleStyles() {
                    const codes = /* @__PURE__ */ new Map();
                    const styles2 = {
                        modifier: {
                            reset: [
                                0,
                                0
                            ],
                            // 21 isn't widely supported and 22 does the same thing
                            bold: [
                                1,
                                22
                            ],
                            dim: [
                                2,
                                22
                            ],
                            italic: [
                                3,
                                23
                            ],
                            underline: [
                                4,
                                24
                            ],
                            inverse: [
                                7,
                                27
                            ],
                            hidden: [
                                8,
                                28
                            ],
                            strikethrough: [
                                9,
                                29
                            ]
                        },
                        color: {
                            black: [
                                30,
                                39
                            ],
                            red: [
                                31,
                                39
                            ],
                            green: [
                                32,
                                39
                            ],
                            yellow: [
                                33,
                                39
                            ],
                            blue: [
                                34,
                                39
                            ],
                            magenta: [
                                35,
                                39
                            ],
                            cyan: [
                                36,
                                39
                            ],
                            white: [
                                37,
                                39
                            ],
                            gray: [
                                90,
                                39
                            ],
                            // Bright color
                            redBright: [
                                91,
                                39
                            ],
                            greenBright: [
                                92,
                                39
                            ],
                            yellowBright: [
                                93,
                                39
                            ],
                            blueBright: [
                                94,
                                39
                            ],
                            magentaBright: [
                                95,
                                39
                            ],
                            cyanBright: [
                                96,
                                39
                            ],
                            whiteBright: [
                                97,
                                39
                            ]
                        },
                        bgColor: {
                            bgBlack: [
                                40,
                                49
                            ],
                            bgRed: [
                                41,
                                49
                            ],
                            bgGreen: [
                                42,
                                49
                            ],
                            bgYellow: [
                                43,
                                49
                            ],
                            bgBlue: [
                                44,
                                49
                            ],
                            bgMagenta: [
                                45,
                                49
                            ],
                            bgCyan: [
                                46,
                                49
                            ],
                            bgWhite: [
                                47,
                                49
                            ],
                            // Bright color
                            bgBlackBright: [
                                100,
                                49
                            ],
                            bgRedBright: [
                                101,
                                49
                            ],
                            bgGreenBright: [
                                102,
                                49
                            ],
                            bgYellowBright: [
                                103,
                                49
                            ],
                            bgBlueBright: [
                                104,
                                49
                            ],
                            bgMagentaBright: [
                                105,
                                49
                            ],
                            bgCyanBright: [
                                106,
                                49
                            ],
                            bgWhiteBright: [
                                107,
                                49
                            ]
                        }
                    };
                    styles2.color.grey = styles2.color.gray;
                    for (const groupName of Object.keys(styles2)){
                        const group2 = styles2[groupName];
                        for (const styleName of Object.keys(group2)){
                            const style2 = group2[styleName];
                            styles2[styleName] = {
                                open: "\x1B[".concat(style2[0], "m"),
                                close: "\x1B[".concat(style2[1], "m")
                            };
                            group2[styleName] = styles2[styleName];
                            codes.set(style2[0], style2[1]);
                        }
                        Object.defineProperty(styles2, groupName, {
                            value: group2,
                            enumerable: false
                        });
                        Object.defineProperty(styles2, "codes", {
                            value: codes,
                            enumerable: false
                        });
                    }
                    const ansi2ansi = (n)=>n;
                    const rgb2rgb = (r, g, b)=>[
                            r,
                            g,
                            b
                        ];
                    styles2.color.close = "\x1B[39m";
                    styles2.bgColor.close = "\x1B[49m";
                    styles2.color.ansi = {
                        ansi: wrapAnsi16(ansi2ansi, 0)
                    };
                    styles2.color.ansi256 = {
                        ansi256: wrapAnsi256(ansi2ansi, 0)
                    };
                    styles2.color.ansi16m = {
                        rgb: wrapAnsi16m(rgb2rgb, 0)
                    };
                    styles2.bgColor.ansi = {
                        ansi: wrapAnsi16(ansi2ansi, 10)
                    };
                    styles2.bgColor.ansi256 = {
                        ansi256: wrapAnsi256(ansi2ansi, 10)
                    };
                    styles2.bgColor.ansi16m = {
                        rgb: wrapAnsi16m(rgb2rgb, 10)
                    };
                    for (let key of Object.keys(colorConvert)){
                        if (typeof colorConvert[key] !== "object") {
                            continue;
                        }
                        const suite = colorConvert[key];
                        if (key === "ansi16") {
                            key = "ansi";
                        }
                        if ("ansi16" in suite) {
                            styles2.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
                            styles2.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
                        }
                        if ("ansi256" in suite) {
                            styles2.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
                            styles2.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
                        }
                        if ("rgb" in suite) {
                            styles2.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
                            styles2.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
                        }
                    }
                    return styles2;
                }
                Object.defineProperty(module2, "exports", {
                    enumerable: true,
                    get: assembleStyles
                });
            });
            var require$$0$1 = {
                EOL: "\n"
            };
            var hasFlag = (flag, argv2)=>{
                argv2 = argv2 || process2.argv;
                const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
                const pos = argv2.indexOf(prefix + flag);
                const terminatorPos = argv2.indexOf("--");
                return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
            };
            const env$1 = process2.env;
            let forceColor;
            if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false")) {
                forceColor = false;
            } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
                forceColor = true;
            }
            if ("FORCE_COLOR" in env$1) {
                forceColor = env$1.FORCE_COLOR.length === 0 || parseInt(env$1.FORCE_COLOR, 10) !== 0;
            }
            function translateLevel(level) {
                if (level === 0) {
                    return false;
                }
                return {
                    level,
                    hasBasic: true,
                    has256: level >= 2,
                    has16m: level >= 3
                };
            }
            function supportsColor(stream) {
                if (forceColor === false) {
                    return 0;
                }
                if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
                    return 3;
                }
                if (hasFlag("color=256")) {
                    return 2;
                }
                if (stream && !stream.isTTY && forceColor !== true) {
                    return 0;
                }
                const min = forceColor ? 1 : 0;
                if (process2.platform === "win32") {
                    const osRelease = require$$0$1.release().split(".");
                    if (Number(process2.versions.node.split(".")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
                        return Number(osRelease[2]) >= 14931 ? 3 : 2;
                    }
                    return 1;
                }
                if ("CI" in env$1) {
                    if ([
                        "TRAVIS",
                        "CIRCLECI",
                        "APPVEYOR",
                        "GITLAB_CI"
                    ].some((sign)=>sign in env$1) || env$1.CI_NAME === "codeship") {
                        return 1;
                    }
                    return min;
                }
                if ("TEAMCITY_VERSION" in env$1) {
                    return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env$1.TEAMCITY_VERSION) ? 1 : 0;
                }
                if (env$1.COLORTERM === "truecolor") {
                    return 3;
                }
                if ("TERM_PROGRAM" in env$1) {
                    const version2 = parseInt((env$1.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
                    switch(env$1.TERM_PROGRAM){
                        case "iTerm.app":
                            return version2 >= 3 ? 3 : 2;
                        case "Apple_Terminal":
                            return 2;
                    }
                }
                if (/-256(color)?$/i.test(env$1.TERM)) {
                    return 2;
                }
                if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env$1.TERM)) {
                    return 1;
                }
                if ("COLORTERM" in env$1) {
                    return 1;
                }
                if (env$1.TERM === "dumb") {
                    return min;
                }
                return min;
            }
            function getSupportLevel(stream) {
                const level = supportsColor(stream);
                return translateLevel(level);
            }
            var supportsColor_1 = {
                supportsColor: getSupportLevel,
                stdout: getSupportLevel(process2.stdout),
                stderr: getSupportLevel(process2.stderr)
            };
            const TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
            const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
            const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
            const ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
            const ESCAPES = /* @__PURE__ */ new Map([
                [
                    "n",
                    "\n"
                ],
                [
                    "r",
                    "\r"
                ],
                [
                    "t",
                    "	"
                ],
                [
                    "b",
                    "\b"
                ],
                [
                    "f",
                    "\f"
                ],
                [
                    "v",
                    "\v"
                ],
                [
                    "0",
                    "\0"
                ],
                [
                    "\\",
                    "\\"
                ],
                [
                    "e",
                    "\x1B"
                ],
                [
                    "a",
                    "\x07"
                ]
            ]);
            function unescape2(c) {
                if (c[0] === "u" && c.length === 5 || c[0] === "x" && c.length === 3) {
                    return String.fromCharCode(parseInt(c.slice(1), 16));
                }
                return ESCAPES.get(c) || c;
            }
            function parseArguments(name2, args) {
                const results = [];
                const chunks = args.trim().split(/\s*,\s*/g);
                let matches;
                for (const chunk of chunks){
                    if (!isNaN(chunk)) {
                        results.push(Number(chunk));
                    } else if (matches = chunk.match(STRING_REGEX)) {
                        results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr)=>escape ? unescape2(escape) : chr));
                    } else {
                        throw new Error("Invalid Chalk template style argument: ".concat(chunk, " (in style '").concat(name2, "')"));
                    }
                }
                return results;
            }
            function parseStyle(style2) {
                STYLE_REGEX.lastIndex = 0;
                const results = [];
                let matches;
                while((matches = STYLE_REGEX.exec(style2)) !== null){
                    const name2 = matches[1];
                    if (matches[2]) {
                        const args = parseArguments(name2, matches[2]);
                        results.push([
                            name2
                        ].concat(args));
                    } else {
                        results.push([
                            name2
                        ]);
                    }
                }
                return results;
            }
            function buildStyle(chalk2, styles2) {
                const enabled = {};
                for (const layer of styles2){
                    for (const style2 of layer.styles){
                        enabled[style2[0]] = layer.inverse ? null : style2.slice(1);
                    }
                }
                let current = chalk2;
                for (const styleName of Object.keys(enabled)){
                    if (Array.isArray(enabled[styleName])) {
                        if (!(styleName in current)) {
                            throw new Error("Unknown Chalk style: ".concat(styleName));
                        }
                        if (enabled[styleName].length > 0) {
                            current = current[styleName].apply(current, enabled[styleName]);
                        } else {
                            current = current[styleName];
                        }
                    }
                }
                return current;
            }
            var templates = (chalk2, tmp)=>{
                const styles2 = [];
                const chunks = [];
                let chunk = [];
                tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style2, close, chr)=>{
                    if (escapeChar) {
                        chunk.push(unescape2(escapeChar));
                    } else if (style2) {
                        const str = chunk.join("");
                        chunk = [];
                        chunks.push(styles2.length === 0 ? str : buildStyle(chalk2, styles2)(str));
                        styles2.push({
                            inverse,
                            styles: parseStyle(style2)
                        });
                    } else if (close) {
                        if (styles2.length === 0) {
                            throw new Error("Found extraneous } in Chalk template literal");
                        }
                        chunks.push(buildStyle(chalk2, styles2)(chunk.join("")));
                        chunk = [];
                        styles2.pop();
                    } else {
                        chunk.push(chr);
                    }
                });
                chunks.push(chunk.join(""));
                if (styles2.length > 0) {
                    const errMsg = "Chalk template literal is missing ".concat(styles2.length, " closing bracket").concat(styles2.length === 1 ? "" : "s", " (`}`)");
                    throw new Error(errMsg);
                }
                return chunks.join("");
            };
            var chalk = createCommonjsModule(function(module2) {
                const stdoutColor2 = supportsColor_1.stdout;
                const isSimpleWindowsTerm = process2.platform === "win32" && !(process2.env.TERM || "").toLowerCase().startsWith("xterm");
                const levelMapping2 = [
                    "ansi",
                    "ansi",
                    "ansi256",
                    "ansi16m"
                ];
                const skipModels = /* @__PURE__ */ new Set([
                    "gray"
                ]);
                const styles2 = /* @__PURE__ */ Object.create(null);
                function applyOptions2(obj, options2) {
                    options2 = options2 || {};
                    const scLevel = stdoutColor2 ? stdoutColor2.level : 0;
                    obj.level = options2.level === void 0 ? scLevel : options2.level;
                    obj.enabled = "enabled" in options2 ? options2.enabled : obj.level > 0;
                }
                function Chalk2(options2) {
                    if (!this || !(this instanceof Chalk2) || this.template) {
                        const chalk2 = {};
                        applyOptions2(chalk2, options2);
                        chalk2.template = function() {
                            const args = [].slice.call(arguments);
                            return chalkTag2.apply(null, [
                                chalk2.template
                            ].concat(args));
                        };
                        Object.setPrototypeOf(chalk2, Chalk2.prototype);
                        Object.setPrototypeOf(chalk2.template, chalk2);
                        chalk2.template.constructor = Chalk2;
                        return chalk2.template;
                    }
                    applyOptions2(this, options2);
                }
                if (isSimpleWindowsTerm) {
                    ansiStyles.blue.open = "\x1B[94m";
                }
                for (const key of Object.keys(ansiStyles)){
                    ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), "g");
                    styles2[key] = {
                        get () {
                            const codes = ansiStyles[key];
                            return build2.call(this, this._styles ? this._styles.concat(codes) : [
                                codes
                            ], this._empty, key);
                        }
                    };
                }
                styles2.visible = {
                    get () {
                        return build2.call(this, this._styles || [], true, "visible");
                    }
                };
                ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), "g");
                for (const model of Object.keys(ansiStyles.color.ansi)){
                    if (skipModels.has(model)) {
                        continue;
                    }
                    styles2[model] = {
                        get () {
                            const level = this.level;
                            return function() {
                                const open = ansiStyles.color[levelMapping2[level]][model].apply(null, arguments);
                                const codes = {
                                    open,
                                    close: ansiStyles.color.close,
                                    closeRe: ansiStyles.color.closeRe
                                };
                                return build2.call(this, this._styles ? this._styles.concat(codes) : [
                                    codes
                                ], this._empty, model);
                            };
                        }
                    };
                }
                ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), "g");
                for (const model of Object.keys(ansiStyles.bgColor.ansi)){
                    if (skipModels.has(model)) {
                        continue;
                    }
                    const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
                    styles2[bgModel] = {
                        get () {
                            const level = this.level;
                            return function() {
                                const open = ansiStyles.bgColor[levelMapping2[level]][model].apply(null, arguments);
                                const codes = {
                                    open,
                                    close: ansiStyles.bgColor.close,
                                    closeRe: ansiStyles.bgColor.closeRe
                                };
                                return build2.call(this, this._styles ? this._styles.concat(codes) : [
                                    codes
                                ], this._empty, model);
                            };
                        }
                    };
                }
                const proto2 = Object.defineProperties(()=>{}, styles2);
                function build2(_styles, _empty, key) {
                    const builder = function builder2() {
                        return applyStyle2.apply(builder2, arguments);
                    };
                    builder._styles = _styles;
                    builder._empty = _empty;
                    const self2 = this;
                    Object.defineProperty(builder, "level", {
                        enumerable: true,
                        get () {
                            return self2.level;
                        },
                        set (level) {
                            self2.level = level;
                        }
                    });
                    Object.defineProperty(builder, "enabled", {
                        enumerable: true,
                        get () {
                            return self2.enabled;
                        },
                        set (enabled) {
                            self2.enabled = enabled;
                        }
                    });
                    builder.hasGrey = this.hasGrey || key === "gray" || key === "grey";
                    builder.__proto__ = proto2;
                    return builder;
                }
                function applyStyle2() {
                    const args = arguments;
                    const argsLen = args.length;
                    let str = String(arguments[0]);
                    if (argsLen === 0) {
                        return "";
                    }
                    if (argsLen > 1) {
                        for(let a3 = 1; a3 < argsLen; a3++){
                            str += " " + args[a3];
                        }
                    }
                    if (!this.enabled || this.level <= 0 || !str) {
                        return this._empty ? "" : str;
                    }
                    const originalDim = ansiStyles.dim.open;
                    if (isSimpleWindowsTerm && this.hasGrey) {
                        ansiStyles.dim.open = "";
                    }
                    for (const code2 of this._styles.slice().reverse()){
                        str = code2.open + str.replace(code2.closeRe, code2.open) + code2.close;
                        str = str.replace(/\r?\n/g, "".concat(code2.close, "$&").concat(code2.open));
                    }
                    ansiStyles.dim.open = originalDim;
                    return str;
                }
                function chalkTag2(chalk2, strings) {
                    if (!Array.isArray(strings)) {
                        return [].slice.call(arguments, 1).join(" ");
                    }
                    const args = [].slice.call(arguments, 2);
                    const parts = [
                        strings.raw[0]
                    ];
                    for(let i = 1; i < strings.length; i++){
                        parts.push(String(args[i - 1]).replace(/[{}\\]/g, "\\$&"));
                        parts.push(String(strings.raw[i]));
                    }
                    return templates(chalk2, parts.join(""));
                }
                Object.defineProperties(Chalk2.prototype, styles2);
                module2.exports = Chalk2();
                module2.exports.supportsColor = stdoutColor2;
                module2.exports.default = module2.exports;
            });
            var chalk_1 = chalk.supportsColor;
            var common = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                exports2.commonDeprecatedHandler = (keyOrPair, redirectTo, { descriptor  })=>{
                    const messages = [
                        "".concat(chalk.default.yellow(typeof keyOrPair === "string" ? descriptor.key(keyOrPair) : descriptor.pair(keyOrPair)), " is deprecated")
                    ];
                    if (redirectTo) {
                        messages.push("we now treat it as ".concat(chalk.default.blue(typeof redirectTo === "string" ? descriptor.key(redirectTo) : descriptor.pair(redirectTo))));
                    }
                    return messages.join("; ") + ".";
                };
            });
            unwrapExports(common);
            var common_1 = common.commonDeprecatedHandler;
            var deprecated = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                tslib_1.__exportStar(common, exports2);
            });
            unwrapExports(deprecated);
            var common$1 = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                exports2.commonInvalidHandler = (key, value1, utils2)=>[
                        "Invalid ".concat(chalk.default.red(utils2.descriptor.key(key)), " value."),
                        "Expected ".concat(chalk.default.blue(utils2.schemas[key].expected(utils2)), ","),
                        "but received ".concat(chalk.default.red(utils2.descriptor.value(value1)), ".")
                    ].join(" ");
            });
            unwrapExports(common$1);
            var common_1$1 = common$1.commonInvalidHandler;
            var invalid = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                tslib_1.__exportStar(common$1, exports2);
            });
            unwrapExports(invalid);
            var arr = [];
            var charCodeCache = [];
            var leven = function leven2(a3, b) {
                if (a3 === b) {
                    return 0;
                }
                var swap2 = a3;
                if (a3.length > b.length) {
                    a3 = b;
                    b = swap2;
                }
                var aLen = a3.length;
                var bLen = b.length;
                if (aLen === 0) {
                    return bLen;
                }
                if (bLen === 0) {
                    return aLen;
                }
                while(aLen > 0 && a3.charCodeAt(~-aLen) === b.charCodeAt(~-bLen)){
                    aLen--;
                    bLen--;
                }
                if (aLen === 0) {
                    return bLen;
                }
                var start = 0;
                while(start < aLen && a3.charCodeAt(start) === b.charCodeAt(start)){
                    start++;
                }
                aLen -= start;
                bLen -= start;
                if (aLen === 0) {
                    return bLen;
                }
                var bCharCode;
                var ret;
                var tmp;
                var tmp2;
                var i = 0;
                var j = 0;
                while(i < aLen){
                    charCodeCache[start + i] = a3.charCodeAt(start + i);
                    arr[i] = ++i;
                }
                while(j < bLen){
                    bCharCode = b.charCodeAt(start + j);
                    tmp = j++;
                    ret = j;
                    for(i = 0; i < aLen; i++){
                        tmp2 = bCharCode === charCodeCache[start + i] ? tmp : tmp + 1;
                        tmp = arr[i];
                        ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;
                    }
                }
                return ret;
            };
            var leven_1 = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                exports2.levenUnknownHandler = (key, value1, { descriptor , logger , schemas: schemas3  })=>{
                    const messages = [
                        "Ignored unknown option ".concat(chalk.default.yellow(descriptor.pair({
                            key,
                            value: value1
                        })), ".")
                    ];
                    const suggestion = Object.keys(schemas3).sort().find((knownKey)=>leven(key, knownKey) < 3);
                    if (suggestion) {
                        messages.push("Did you mean ".concat(chalk.default.blue(descriptor.key(suggestion)), "?"));
                    }
                    logger.warn(messages.join(" "));
                };
            });
            unwrapExports(leven_1);
            var leven_2 = leven_1.levenUnknownHandler;
            var unknown = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                tslib_1.__exportStar(leven_1, exports2);
            });
            unwrapExports(unknown);
            var handlers = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                tslib_1.__exportStar(deprecated, exports2);
                tslib_1.__exportStar(invalid, exports2);
                tslib_1.__exportStar(unknown, exports2);
            });
            unwrapExports(handlers);
            var schema4 = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                const HANDLER_KEYS = [
                    "default",
                    "expected",
                    "validate",
                    "deprecated",
                    "forward",
                    "redirect",
                    "overlap",
                    "preprocess",
                    "postprocess"
                ];
                function createSchema(SchemaConstructor, parameters) {
                    const schema5 = new SchemaConstructor(parameters);
                    const subSchema = Object.create(schema5);
                    for (const handlerKey of HANDLER_KEYS){
                        if (handlerKey in parameters) {
                            subSchema[handlerKey] = normalizeHandler(parameters[handlerKey], schema5, Schema2.prototype[handlerKey].length);
                        }
                    }
                    return subSchema;
                }
                exports2.createSchema = createSchema;
                class Schema2 {
                    static create(parameters) {
                        return createSchema(this, parameters);
                    }
                    default(_utils) {
                        return void 0;
                    }
                    // istanbul ignore next: this is actually an abstract method but we need a placeholder to get `function.length`
                    expected(_utils) {
                        return "nothing";
                    }
                    // istanbul ignore next: this is actually an abstract method but we need a placeholder to get `function.length`
                    validate(_value, _utils) {
                        return false;
                    }
                    deprecated(_value, _utils) {
                        return false;
                    }
                    forward(_value, _utils) {
                        return void 0;
                    }
                    redirect(_value, _utils) {
                        return void 0;
                    }
                    overlap(currentValue, _newValue, _utils) {
                        return currentValue;
                    }
                    preprocess(value1, _utils) {
                        return value1;
                    }
                    postprocess(value1, _utils) {
                        return value1;
                    }
                    constructor(parameters){
                        this.name = parameters.name;
                    }
                }
                exports2.Schema = Schema2;
                function normalizeHandler(handler, superSchema, handlerArgumentsLength) {
                    return typeof handler === "function" ? (...args)=>handler(...args.slice(0, handlerArgumentsLength - 1), superSchema, ...args.slice(handlerArgumentsLength - 1)) : ()=>handler;
                }
            });
            unwrapExports(schema4);
            var schema_1 = schema4.createSchema;
            var schema_2 = schema4.Schema;
            var alias = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                class AliasSchema extends schema4.Schema {
                    expected(utils2) {
                        return utils2.schemas[this._sourceName].expected(utils2);
                    }
                    validate(value1, utils2) {
                        return utils2.schemas[this._sourceName].validate(value1, utils2);
                    }
                    redirect(_value, _utils) {
                        return this._sourceName;
                    }
                    constructor(parameters){
                        super(parameters);
                        this._sourceName = parameters.sourceName;
                    }
                }
                exports2.AliasSchema = AliasSchema;
            });
            unwrapExports(alias);
            var alias_1 = alias.AliasSchema;
            var any = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                class AnySchema extends schema4.Schema {
                    expected() {
                        return "anything";
                    }
                    validate() {
                        return true;
                    }
                }
                exports2.AnySchema = AnySchema;
            });
            unwrapExports(any);
            var any_1 = any.AnySchema;
            var array = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                class ArraySchema extends schema4.Schema {
                    expected(utils2) {
                        return "an array of ".concat(this._valueSchema.expected(utils2));
                    }
                    validate(value1, utils2) {
                        if (!Array.isArray(value1)) {
                            return false;
                        }
                        const invalidValues = [];
                        for (const subValue of value1){
                            const subValidateResult = utils2.normalizeValidateResult(this._valueSchema.validate(subValue, utils2), subValue);
                            if (subValidateResult !== true) {
                                invalidValues.push(subValidateResult.value);
                            }
                        }
                        return invalidValues.length === 0 ? true : {
                            value: invalidValues
                        };
                    }
                    deprecated(value1, utils2) {
                        const deprecatedResult = [];
                        for (const subValue of value1){
                            const subDeprecatedResult = utils2.normalizeDeprecatedResult(this._valueSchema.deprecated(subValue, utils2), subValue);
                            if (subDeprecatedResult !== false) {
                                deprecatedResult.push(...subDeprecatedResult.map(({ value: deprecatedValue  })=>({
                                        value: [
                                            deprecatedValue
                                        ]
                                    })));
                            }
                        }
                        return deprecatedResult;
                    }
                    forward(value1, utils2) {
                        const forwardResult = [];
                        for (const subValue of value1){
                            const subForwardResult = utils2.normalizeForwardResult(this._valueSchema.forward(subValue, utils2), subValue);
                            forwardResult.push(...subForwardResult.map(wrapTransferResult));
                        }
                        return forwardResult;
                    }
                    redirect(value1, utils2) {
                        const remain = [];
                        const redirect = [];
                        for (const subValue of value1){
                            const subRedirectResult = utils2.normalizeRedirectResult(this._valueSchema.redirect(subValue, utils2), subValue);
                            if ("remain" in subRedirectResult) {
                                remain.push(subRedirectResult.remain);
                            }
                            redirect.push(...subRedirectResult.redirect.map(wrapTransferResult));
                        }
                        return remain.length === 0 ? {
                            redirect
                        } : {
                            redirect,
                            remain
                        };
                    }
                    overlap(currentValue, newValue) {
                        return currentValue.concat(newValue);
                    }
                    constructor(_a){
                        var { valueSchema , name: name2 = valueSchema.name  } = _a, handlers2 = tslib_1.__rest(_a, [
                            "valueSchema",
                            "name"
                        ]);
                        super(Object.assign({}, handlers2, {
                            name: name2
                        }));
                        this._valueSchema = valueSchema;
                    }
                }
                exports2.ArraySchema = ArraySchema;
                function wrapTransferResult({ from: from2 , to  }) {
                    return {
                        from: [
                            from2
                        ],
                        to
                    };
                }
            });
            unwrapExports(array);
            var array_1 = array.ArraySchema;
            var boolean_1 = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                class BooleanSchema extends schema4.Schema {
                    expected() {
                        return "true or false";
                    }
                    validate(value1) {
                        return typeof value1 === "boolean";
                    }
                }
                exports2.BooleanSchema = BooleanSchema;
            });
            unwrapExports(boolean_1);
            var boolean_2 = boolean_1.BooleanSchema;
            var utils = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                function recordFromArray(array2, mainKey) {
                    const record = /* @__PURE__ */ Object.create(null);
                    for (const value1 of array2){
                        const key = value1[mainKey];
                        if (record[key]) {
                            throw new Error("Duplicate ".concat(mainKey, " ").concat(JSON.stringify(key)));
                        }
                        record[key] = value1;
                    }
                    return record;
                }
                exports2.recordFromArray = recordFromArray;
                function mapFromArray(array2, mainKey) {
                    const map3 = /* @__PURE__ */ new Map();
                    for (const value1 of array2){
                        const key = value1[mainKey];
                        if (map3.has(key)) {
                            throw new Error("Duplicate ".concat(mainKey, " ").concat(JSON.stringify(key)));
                        }
                        map3.set(key, value1);
                    }
                    return map3;
                }
                exports2.mapFromArray = mapFromArray;
                function createAutoChecklist() {
                    const map3 = /* @__PURE__ */ Object.create(null);
                    return (id)=>{
                        const idString = JSON.stringify(id);
                        if (map3[idString]) {
                            return true;
                        }
                        map3[idString] = true;
                        return false;
                    };
                }
                exports2.createAutoChecklist = createAutoChecklist;
                function partition(array2, predicate) {
                    const trueArray = [];
                    const falseArray = [];
                    for (const value1 of array2){
                        if (predicate(value1)) {
                            trueArray.push(value1);
                        } else {
                            falseArray.push(value1);
                        }
                    }
                    return [
                        trueArray,
                        falseArray
                    ];
                }
                exports2.partition = partition;
                function isInt(value1) {
                    return value1 === Math.floor(value1);
                }
                exports2.isInt = isInt;
                function comparePrimitive(a3, b) {
                    if (a3 === b) {
                        return 0;
                    }
                    const typeofA = typeof a3;
                    const typeofB = typeof b;
                    const orders = [
                        "undefined",
                        "object",
                        "boolean",
                        "number",
                        "string"
                    ];
                    if (typeofA !== typeofB) {
                        return orders.indexOf(typeofA) - orders.indexOf(typeofB);
                    }
                    if (typeofA !== "string") {
                        return Number(a3) - Number(b);
                    }
                    return a3.localeCompare(b);
                }
                exports2.comparePrimitive = comparePrimitive;
                function normalizeDefaultResult(result) {
                    return result === void 0 ? {} : result;
                }
                exports2.normalizeDefaultResult = normalizeDefaultResult;
                function normalizeValidateResult(result, value1) {
                    return result === true ? true : result === false ? {
                        value: value1
                    } : result;
                }
                exports2.normalizeValidateResult = normalizeValidateResult;
                function normalizeDeprecatedResult(result, value1, doNotNormalizeTrue = false) {
                    return result === false ? false : result === true ? doNotNormalizeTrue ? true : [
                        {
                            value: value1
                        }
                    ] : "value" in result ? [
                        result
                    ] : result.length === 0 ? false : result;
                }
                exports2.normalizeDeprecatedResult = normalizeDeprecatedResult;
                function normalizeTransferResult(result, value1) {
                    return typeof result === "string" || "key" in result ? {
                        from: value1,
                        to: result
                    } : "from" in result ? {
                        from: result.from,
                        to: result.to
                    } : {
                        from: value1,
                        to: result.to
                    };
                }
                exports2.normalizeTransferResult = normalizeTransferResult;
                function normalizeForwardResult(result, value1) {
                    return result === void 0 ? [] : Array.isArray(result) ? result.map((transferResult)=>normalizeTransferResult(transferResult, value1)) : [
                        normalizeTransferResult(result, value1)
                    ];
                }
                exports2.normalizeForwardResult = normalizeForwardResult;
                function normalizeRedirectResult(result, value1) {
                    const redirect = normalizeForwardResult(typeof result === "object" && "redirect" in result ? result.redirect : result, value1);
                    return redirect.length === 0 ? {
                        remain: value1,
                        redirect
                    } : typeof result === "object" && "remain" in result ? {
                        remain: result.remain,
                        redirect
                    } : {
                        redirect
                    };
                }
                exports2.normalizeRedirectResult = normalizeRedirectResult;
            });
            unwrapExports(utils);
            var utils_1 = utils.recordFromArray;
            var utils_2 = utils.mapFromArray;
            var utils_3 = utils.createAutoChecklist;
            var utils_4 = utils.partition;
            var utils_5 = utils.isInt;
            var utils_6 = utils.comparePrimitive;
            var utils_7 = utils.normalizeDefaultResult;
            var utils_8 = utils.normalizeValidateResult;
            var utils_9 = utils.normalizeDeprecatedResult;
            var utils_10 = utils.normalizeTransferResult;
            var utils_11 = utils.normalizeForwardResult;
            var utils_12 = utils.normalizeRedirectResult;
            var choice = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                class ChoiceSchema extends schema4.Schema {
                    expected({ descriptor  }) {
                        const choiceValues = Array.from(this._choices.keys()).map((value1)=>this._choices.get(value1)).filter((choiceInfo)=>!choiceInfo.deprecated).map((choiceInfo)=>choiceInfo.value).sort(utils.comparePrimitive).map(descriptor.value);
                        const head2 = choiceValues.slice(0, -2);
                        const tail = choiceValues.slice(-2);
                        return head2.concat(tail.join(" or ")).join(", ");
                    }
                    validate(value1) {
                        return this._choices.has(value1);
                    }
                    deprecated(value1) {
                        const choiceInfo = this._choices.get(value1);
                        return choiceInfo && choiceInfo.deprecated ? {
                            value: value1
                        } : false;
                    }
                    forward(value1) {
                        const choiceInfo = this._choices.get(value1);
                        return choiceInfo ? choiceInfo.forward : void 0;
                    }
                    redirect(value1) {
                        const choiceInfo = this._choices.get(value1);
                        return choiceInfo ? choiceInfo.redirect : void 0;
                    }
                    constructor(parameters){
                        super(parameters);
                        this._choices = utils.mapFromArray(parameters.choices.map((choice2)=>choice2 && typeof choice2 === "object" ? choice2 : {
                                value: choice2
                            }), "value");
                    }
                }
                exports2.ChoiceSchema = ChoiceSchema;
            });
            unwrapExports(choice);
            var choice_1 = choice.ChoiceSchema;
            var number = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                class NumberSchema extends schema4.Schema {
                    expected() {
                        return "a number";
                    }
                    validate(value1, _utils) {
                        return typeof value1 === "number";
                    }
                }
                exports2.NumberSchema = NumberSchema;
            });
            unwrapExports(number);
            var number_1 = number.NumberSchema;
            var integer2 = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                class IntegerSchema extends number.NumberSchema {
                    expected() {
                        return "an integer";
                    }
                    validate(value1, utils$12) {
                        return utils$12.normalizeValidateResult(super.validate(value1, utils$12), value1) === true && utils.isInt(value1);
                    }
                }
                exports2.IntegerSchema = IntegerSchema;
            });
            unwrapExports(integer2);
            var integer_1 = integer2.IntegerSchema;
            var string2 = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                class StringSchema extends schema4.Schema {
                    expected() {
                        return "a string";
                    }
                    validate(value1) {
                        return typeof value1 === "string";
                    }
                }
                exports2.StringSchema = StringSchema;
            });
            unwrapExports(string2);
            var string_1 = string2.StringSchema;
            var schemas2 = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                tslib_1.__exportStar(alias, exports2);
                tslib_1.__exportStar(any, exports2);
                tslib_1.__exportStar(array, exports2);
                tslib_1.__exportStar(boolean_1, exports2);
                tslib_1.__exportStar(choice, exports2);
                tslib_1.__exportStar(integer2, exports2);
                tslib_1.__exportStar(number, exports2);
                tslib_1.__exportStar(string2, exports2);
            });
            unwrapExports(schemas2);
            var defaults = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                exports2.defaultDescriptor = api.apiDescriptor;
                exports2.defaultUnknownHandler = leven_1.levenUnknownHandler;
                exports2.defaultInvalidHandler = invalid.commonInvalidHandler;
                exports2.defaultDeprecatedHandler = common.commonDeprecatedHandler;
            });
            unwrapExports(defaults);
            var defaults_1 = defaults.defaultDescriptor;
            var defaults_2 = defaults.defaultUnknownHandler;
            var defaults_3 = defaults.defaultInvalidHandler;
            var defaults_4 = defaults.defaultDeprecatedHandler;
            var normalize = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                exports2.normalize = (options2, schemas3, opts)=>new Normalizer(schemas3, opts).normalize(options2);
                class Normalizer {
                    cleanHistory() {
                        this._hasDeprecationWarned = utils.createAutoChecklist();
                    }
                    normalize(options2) {
                        const normalized = {};
                        const restOptionsArray = [
                            options2
                        ];
                        const applyNormalization = ()=>{
                            while(restOptionsArray.length !== 0){
                                const currentOptions = restOptionsArray.shift();
                                const transferredOptionsArray = this._applyNormalization(currentOptions, normalized);
                                restOptionsArray.push(...transferredOptionsArray);
                            }
                        };
                        applyNormalization();
                        for (const key of Object.keys(this._utils.schemas)){
                            const schema5 = this._utils.schemas[key];
                            if (!(key in normalized)) {
                                const defaultResult = utils.normalizeDefaultResult(schema5.default(this._utils));
                                if ("value" in defaultResult) {
                                    restOptionsArray.push({
                                        [key]: defaultResult.value
                                    });
                                }
                            }
                        }
                        applyNormalization();
                        for (const key of Object.keys(this._utils.schemas)){
                            const schema5 = this._utils.schemas[key];
                            if (key in normalized) {
                                normalized[key] = schema5.postprocess(normalized[key], this._utils);
                            }
                        }
                        return normalized;
                    }
                    _applyNormalization(options2, normalized) {
                        const transferredOptionsArray = [];
                        const [knownOptionNames, unknownOptionNames] = utils.partition(Object.keys(options2), (key)=>key in this._utils.schemas);
                        for (const key of knownOptionNames){
                            const schema5 = this._utils.schemas[key];
                            const value1 = schema5.preprocess(options2[key], this._utils);
                            const validateResult = utils.normalizeValidateResult(schema5.validate(value1, this._utils), value1);
                            if (validateResult !== true) {
                                const { value: invalidValue  } = validateResult;
                                const errorMessageOrError = this._invalidHandler(key, invalidValue, this._utils);
                                throw typeof errorMessageOrError === "string" ? new Error(errorMessageOrError) : /* istanbul ignore next*/ errorMessageOrError;
                            }
                            const appendTransferredOptions = ({ from: from2 , to  })=>{
                                transferredOptionsArray.push(typeof to === "string" ? {
                                    [to]: from2
                                } : {
                                    [to.key]: to.value
                                });
                            };
                            const warnDeprecated = ({ value: currentValue , redirectTo  })=>{
                                const deprecatedResult = utils.normalizeDeprecatedResult(schema5.deprecated(currentValue, this._utils), value1, /* doNotNormalizeTrue */ true);
                                if (deprecatedResult === false) {
                                    return;
                                }
                                if (deprecatedResult === true) {
                                    if (!this._hasDeprecationWarned(key)) {
                                        this._utils.logger.warn(this._deprecatedHandler(key, redirectTo, this._utils));
                                    }
                                } else {
                                    for (const { value: deprecatedValue  } of deprecatedResult){
                                        const pair = {
                                            key,
                                            value: deprecatedValue
                                        };
                                        if (!this._hasDeprecationWarned(pair)) {
                                            const redirectToPair = typeof redirectTo === "string" ? {
                                                key: redirectTo,
                                                value: deprecatedValue
                                            } : redirectTo;
                                            this._utils.logger.warn(this._deprecatedHandler(pair, redirectToPair, this._utils));
                                        }
                                    }
                                }
                            };
                            const forwardResult = utils.normalizeForwardResult(schema5.forward(value1, this._utils), value1);
                            forwardResult.forEach(appendTransferredOptions);
                            const redirectResult = utils.normalizeRedirectResult(schema5.redirect(value1, this._utils), value1);
                            redirectResult.redirect.forEach(appendTransferredOptions);
                            if ("remain" in redirectResult) {
                                const remainingValue = redirectResult.remain;
                                normalized[key] = key in normalized ? schema5.overlap(normalized[key], remainingValue, this._utils) : remainingValue;
                                warnDeprecated({
                                    value: remainingValue
                                });
                            }
                            for (const { from: from2 , to  } of redirectResult.redirect){
                                warnDeprecated({
                                    value: from2,
                                    redirectTo: to
                                });
                            }
                        }
                        for (const key of unknownOptionNames){
                            const value1 = options2[key];
                            const unknownResult = this._unknownHandler(key, value1, this._utils);
                            if (unknownResult) {
                                for (const unknownKey of Object.keys(unknownResult)){
                                    const unknownOption = {
                                        [unknownKey]: unknownResult[unknownKey]
                                    };
                                    if (unknownKey in this._utils.schemas) {
                                        transferredOptionsArray.push(unknownOption);
                                    } else {
                                        Object.assign(normalized, unknownOption);
                                    }
                                }
                            }
                        }
                        return transferredOptionsArray;
                    }
                    constructor(schemas3, opts){
                        const { logger =console , descriptor =defaults.defaultDescriptor , unknown: unknown2 = defaults.defaultUnknownHandler , invalid: invalid2 = defaults.defaultInvalidHandler , deprecated: deprecated2 = defaults.defaultDeprecatedHandler  } = opts || {};
                        this._utils = {
                            descriptor,
                            logger: /* istanbul ignore next */ logger || {
                                warn: ()=>{}
                            },
                            schemas: utils.recordFromArray(schemas3, "name"),
                            normalizeDefaultResult: utils.normalizeDefaultResult,
                            normalizeDeprecatedResult: utils.normalizeDeprecatedResult,
                            normalizeForwardResult: utils.normalizeForwardResult,
                            normalizeRedirectResult: utils.normalizeRedirectResult,
                            normalizeValidateResult: utils.normalizeValidateResult
                        };
                        this._unknownHandler = unknown2;
                        this._invalidHandler = invalid2;
                        this._deprecatedHandler = deprecated2;
                        this.cleanHistory();
                    }
                }
                exports2.Normalizer = Normalizer;
            });
            unwrapExports(normalize);
            var normalize_1 = normalize.normalize;
            var normalize_2 = normalize.Normalizer;
            var lib = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                tslib_1.__exportStar(descriptors, exports2);
                tslib_1.__exportStar(handlers, exports2);
                tslib_1.__exportStar(schemas2, exports2);
                tslib_1.__exportStar(normalize, exports2);
                tslib_1.__exportStar(schema4, exports2);
            });
            unwrapExports(lib);
            const array$1 = [];
            const charCodeCache$1 = [];
            const leven$1 = (left, right)=>{
                if (left === right) {
                    return 0;
                }
                const swap2 = left;
                if (left.length > right.length) {
                    left = right;
                    right = swap2;
                }
                let leftLength = left.length;
                let rightLength = right.length;
                while(leftLength > 0 && left.charCodeAt(~-leftLength) === right.charCodeAt(~-rightLength)){
                    leftLength--;
                    rightLength--;
                }
                let start = 0;
                while(start < leftLength && left.charCodeAt(start) === right.charCodeAt(start)){
                    start++;
                }
                leftLength -= start;
                rightLength -= start;
                if (leftLength === 0) {
                    return rightLength;
                }
                let bCharCode;
                let result;
                let temp;
                let temp2;
                let i = 0;
                let j = 0;
                while(i < leftLength){
                    charCodeCache$1[i] = left.charCodeAt(start + i);
                    array$1[i] = ++i;
                }
                while(j < rightLength){
                    bCharCode = right.charCodeAt(start + j);
                    temp = j++;
                    result = j;
                    for(i = 0; i < leftLength; i++){
                        temp2 = bCharCode === charCodeCache$1[i] ? temp : temp + 1;
                        temp = array$1[i];
                        result = array$1[i] = temp > result ? temp2 > result ? result + 1 : temp2 : temp2 > temp ? temp + 1 : temp2;
                    }
                }
                return result;
            };
            var leven_1$1 = leven$1;
            var default_1 = leven$1;
            leven_1$1.default = default_1;
            var colorName$1 = {
                "aliceblue": [
                    240,
                    248,
                    255
                ],
                "antiquewhite": [
                    250,
                    235,
                    215
                ],
                "aqua": [
                    0,
                    255,
                    255
                ],
                "aquamarine": [
                    127,
                    255,
                    212
                ],
                "azure": [
                    240,
                    255,
                    255
                ],
                "beige": [
                    245,
                    245,
                    220
                ],
                "bisque": [
                    255,
                    228,
                    196
                ],
                "black": [
                    0,
                    0,
                    0
                ],
                "blanchedalmond": [
                    255,
                    235,
                    205
                ],
                "blue": [
                    0,
                    0,
                    255
                ],
                "blueviolet": [
                    138,
                    43,
                    226
                ],
                "brown": [
                    165,
                    42,
                    42
                ],
                "burlywood": [
                    222,
                    184,
                    135
                ],
                "cadetblue": [
                    95,
                    158,
                    160
                ],
                "chartreuse": [
                    127,
                    255,
                    0
                ],
                "chocolate": [
                    210,
                    105,
                    30
                ],
                "coral": [
                    255,
                    127,
                    80
                ],
                "cornflowerblue": [
                    100,
                    149,
                    237
                ],
                "cornsilk": [
                    255,
                    248,
                    220
                ],
                "crimson": [
                    220,
                    20,
                    60
                ],
                "cyan": [
                    0,
                    255,
                    255
                ],
                "darkblue": [
                    0,
                    0,
                    139
                ],
                "darkcyan": [
                    0,
                    139,
                    139
                ],
                "darkgoldenrod": [
                    184,
                    134,
                    11
                ],
                "darkgray": [
                    169,
                    169,
                    169
                ],
                "darkgreen": [
                    0,
                    100,
                    0
                ],
                "darkgrey": [
                    169,
                    169,
                    169
                ],
                "darkkhaki": [
                    189,
                    183,
                    107
                ],
                "darkmagenta": [
                    139,
                    0,
                    139
                ],
                "darkolivegreen": [
                    85,
                    107,
                    47
                ],
                "darkorange": [
                    255,
                    140,
                    0
                ],
                "darkorchid": [
                    153,
                    50,
                    204
                ],
                "darkred": [
                    139,
                    0,
                    0
                ],
                "darksalmon": [
                    233,
                    150,
                    122
                ],
                "darkseagreen": [
                    143,
                    188,
                    143
                ],
                "darkslateblue": [
                    72,
                    61,
                    139
                ],
                "darkslategray": [
                    47,
                    79,
                    79
                ],
                "darkslategrey": [
                    47,
                    79,
                    79
                ],
                "darkturquoise": [
                    0,
                    206,
                    209
                ],
                "darkviolet": [
                    148,
                    0,
                    211
                ],
                "deeppink": [
                    255,
                    20,
                    147
                ],
                "deepskyblue": [
                    0,
                    191,
                    255
                ],
                "dimgray": [
                    105,
                    105,
                    105
                ],
                "dimgrey": [
                    105,
                    105,
                    105
                ],
                "dodgerblue": [
                    30,
                    144,
                    255
                ],
                "firebrick": [
                    178,
                    34,
                    34
                ],
                "floralwhite": [
                    255,
                    250,
                    240
                ],
                "forestgreen": [
                    34,
                    139,
                    34
                ],
                "fuchsia": [
                    255,
                    0,
                    255
                ],
                "gainsboro": [
                    220,
                    220,
                    220
                ],
                "ghostwhite": [
                    248,
                    248,
                    255
                ],
                "gold": [
                    255,
                    215,
                    0
                ],
                "goldenrod": [
                    218,
                    165,
                    32
                ],
                "gray": [
                    128,
                    128,
                    128
                ],
                "green": [
                    0,
                    128,
                    0
                ],
                "greenyellow": [
                    173,
                    255,
                    47
                ],
                "grey": [
                    128,
                    128,
                    128
                ],
                "honeydew": [
                    240,
                    255,
                    240
                ],
                "hotpink": [
                    255,
                    105,
                    180
                ],
                "indianred": [
                    205,
                    92,
                    92
                ],
                "indigo": [
                    75,
                    0,
                    130
                ],
                "ivory": [
                    255,
                    255,
                    240
                ],
                "khaki": [
                    240,
                    230,
                    140
                ],
                "lavender": [
                    230,
                    230,
                    250
                ],
                "lavenderblush": [
                    255,
                    240,
                    245
                ],
                "lawngreen": [
                    124,
                    252,
                    0
                ],
                "lemonchiffon": [
                    255,
                    250,
                    205
                ],
                "lightblue": [
                    173,
                    216,
                    230
                ],
                "lightcoral": [
                    240,
                    128,
                    128
                ],
                "lightcyan": [
                    224,
                    255,
                    255
                ],
                "lightgoldenrodyellow": [
                    250,
                    250,
                    210
                ],
                "lightgray": [
                    211,
                    211,
                    211
                ],
                "lightgreen": [
                    144,
                    238,
                    144
                ],
                "lightgrey": [
                    211,
                    211,
                    211
                ],
                "lightpink": [
                    255,
                    182,
                    193
                ],
                "lightsalmon": [
                    255,
                    160,
                    122
                ],
                "lightseagreen": [
                    32,
                    178,
                    170
                ],
                "lightskyblue": [
                    135,
                    206,
                    250
                ],
                "lightslategray": [
                    119,
                    136,
                    153
                ],
                "lightslategrey": [
                    119,
                    136,
                    153
                ],
                "lightsteelblue": [
                    176,
                    196,
                    222
                ],
                "lightyellow": [
                    255,
                    255,
                    224
                ],
                "lime": [
                    0,
                    255,
                    0
                ],
                "limegreen": [
                    50,
                    205,
                    50
                ],
                "linen": [
                    250,
                    240,
                    230
                ],
                "magenta": [
                    255,
                    0,
                    255
                ],
                "maroon": [
                    128,
                    0,
                    0
                ],
                "mediumaquamarine": [
                    102,
                    205,
                    170
                ],
                "mediumblue": [
                    0,
                    0,
                    205
                ],
                "mediumorchid": [
                    186,
                    85,
                    211
                ],
                "mediumpurple": [
                    147,
                    112,
                    219
                ],
                "mediumseagreen": [
                    60,
                    179,
                    113
                ],
                "mediumslateblue": [
                    123,
                    104,
                    238
                ],
                "mediumspringgreen": [
                    0,
                    250,
                    154
                ],
                "mediumturquoise": [
                    72,
                    209,
                    204
                ],
                "mediumvioletred": [
                    199,
                    21,
                    133
                ],
                "midnightblue": [
                    25,
                    25,
                    112
                ],
                "mintcream": [
                    245,
                    255,
                    250
                ],
                "mistyrose": [
                    255,
                    228,
                    225
                ],
                "moccasin": [
                    255,
                    228,
                    181
                ],
                "navajowhite": [
                    255,
                    222,
                    173
                ],
                "navy": [
                    0,
                    0,
                    128
                ],
                "oldlace": [
                    253,
                    245,
                    230
                ],
                "olive": [
                    128,
                    128,
                    0
                ],
                "olivedrab": [
                    107,
                    142,
                    35
                ],
                "orange": [
                    255,
                    165,
                    0
                ],
                "orangered": [
                    255,
                    69,
                    0
                ],
                "orchid": [
                    218,
                    112,
                    214
                ],
                "palegoldenrod": [
                    238,
                    232,
                    170
                ],
                "palegreen": [
                    152,
                    251,
                    152
                ],
                "paleturquoise": [
                    175,
                    238,
                    238
                ],
                "palevioletred": [
                    219,
                    112,
                    147
                ],
                "papayawhip": [
                    255,
                    239,
                    213
                ],
                "peachpuff": [
                    255,
                    218,
                    185
                ],
                "peru": [
                    205,
                    133,
                    63
                ],
                "pink": [
                    255,
                    192,
                    203
                ],
                "plum": [
                    221,
                    160,
                    221
                ],
                "powderblue": [
                    176,
                    224,
                    230
                ],
                "purple": [
                    128,
                    0,
                    128
                ],
                "rebeccapurple": [
                    102,
                    51,
                    153
                ],
                "red": [
                    255,
                    0,
                    0
                ],
                "rosybrown": [
                    188,
                    143,
                    143
                ],
                "royalblue": [
                    65,
                    105,
                    225
                ],
                "saddlebrown": [
                    139,
                    69,
                    19
                ],
                "salmon": [
                    250,
                    128,
                    114
                ],
                "sandybrown": [
                    244,
                    164,
                    96
                ],
                "seagreen": [
                    46,
                    139,
                    87
                ],
                "seashell": [
                    255,
                    245,
                    238
                ],
                "sienna": [
                    160,
                    82,
                    45
                ],
                "silver": [
                    192,
                    192,
                    192
                ],
                "skyblue": [
                    135,
                    206,
                    235
                ],
                "slateblue": [
                    106,
                    90,
                    205
                ],
                "slategray": [
                    112,
                    128,
                    144
                ],
                "slategrey": [
                    112,
                    128,
                    144
                ],
                "snow": [
                    255,
                    250,
                    250
                ],
                "springgreen": [
                    0,
                    255,
                    127
                ],
                "steelblue": [
                    70,
                    130,
                    180
                ],
                "tan": [
                    210,
                    180,
                    140
                ],
                "teal": [
                    0,
                    128,
                    128
                ],
                "thistle": [
                    216,
                    191,
                    216
                ],
                "tomato": [
                    255,
                    99,
                    71
                ],
                "turquoise": [
                    64,
                    224,
                    208
                ],
                "violet": [
                    238,
                    130,
                    238
                ],
                "wheat": [
                    245,
                    222,
                    179
                ],
                "white": [
                    255,
                    255,
                    255
                ],
                "whitesmoke": [
                    245,
                    245,
                    245
                ],
                "yellow": [
                    255,
                    255,
                    0
                ],
                "yellowgreen": [
                    154,
                    205,
                    50
                ]
            };
            const reverseKeywords = {};
            for (const key of Object.keys(colorName$1)){
                reverseKeywords[colorName$1[key]] = key;
            }
            const convert$1 = {
                rgb: {
                    channels: 3,
                    labels: "rgb"
                },
                hsl: {
                    channels: 3,
                    labels: "hsl"
                },
                hsv: {
                    channels: 3,
                    labels: "hsv"
                },
                hwb: {
                    channels: 3,
                    labels: "hwb"
                },
                cmyk: {
                    channels: 4,
                    labels: "cmyk"
                },
                xyz: {
                    channels: 3,
                    labels: "xyz"
                },
                lab: {
                    channels: 3,
                    labels: "lab"
                },
                lch: {
                    channels: 3,
                    labels: "lch"
                },
                hex: {
                    channels: 1,
                    labels: [
                        "hex"
                    ]
                },
                keyword: {
                    channels: 1,
                    labels: [
                        "keyword"
                    ]
                },
                ansi16: {
                    channels: 1,
                    labels: [
                        "ansi16"
                    ]
                },
                ansi256: {
                    channels: 1,
                    labels: [
                        "ansi256"
                    ]
                },
                hcg: {
                    channels: 3,
                    labels: [
                        "h",
                        "c",
                        "g"
                    ]
                },
                apple: {
                    channels: 3,
                    labels: [
                        "r16",
                        "g16",
                        "b16"
                    ]
                },
                gray: {
                    channels: 1,
                    labels: [
                        "gray"
                    ]
                }
            };
            var conversions$1 = convert$1;
            for (const model of Object.keys(convert$1)){
                if (!("channels" in convert$1[model])) {
                    throw new Error("missing channels property: " + model);
                }
                if (!("labels" in convert$1[model])) {
                    throw new Error("missing channel labels property: " + model);
                }
                if (convert$1[model].labels.length !== convert$1[model].channels) {
                    throw new Error("channel and label counts mismatch: " + model);
                }
                const { channels , labels  } = convert$1[model];
                delete convert$1[model].channels;
                delete convert$1[model].labels;
                Object.defineProperty(convert$1[model], "channels", {
                    value: channels
                });
                Object.defineProperty(convert$1[model], "labels", {
                    value: labels
                });
            }
            convert$1.rgb.hsl = function(rgb) {
                const r = rgb[0] / 255;
                const g = rgb[1] / 255;
                const b = rgb[2] / 255;
                const min = Math.min(r, g, b);
                const max = Math.max(r, g, b);
                const delta = max - min;
                let h;
                let s;
                if (max === min) {
                    h = 0;
                } else if (r === max) {
                    h = (g - b) / delta;
                } else if (g === max) {
                    h = 2 + (b - r) / delta;
                } else if (b === max) {
                    h = 4 + (r - g) / delta;
                }
                h = Math.min(h * 60, 360);
                if (h < 0) {
                    h += 360;
                }
                const l = (min + max) / 2;
                if (max === min) {
                    s = 0;
                } else if (l <= 0.5) {
                    s = delta / (max + min);
                } else {
                    s = delta / (2 - max - min);
                }
                return [
                    h,
                    s * 100,
                    l * 100
                ];
            };
            convert$1.rgb.hsv = function(rgb) {
                let rdif;
                let gdif;
                let bdif;
                let h;
                let s;
                const r = rgb[0] / 255;
                const g = rgb[1] / 255;
                const b = rgb[2] / 255;
                const v = Math.max(r, g, b);
                const diff2 = v - Math.min(r, g, b);
                const diffc = function diffc2(c) {
                    return (v - c) / 6 / diff2 + 1 / 2;
                };
                if (diff2 === 0) {
                    h = 0;
                    s = 0;
                } else {
                    s = diff2 / v;
                    rdif = diffc(r);
                    gdif = diffc(g);
                    bdif = diffc(b);
                    if (r === v) {
                        h = bdif - gdif;
                    } else if (g === v) {
                        h = 1 / 3 + rdif - bdif;
                    } else if (b === v) {
                        h = 2 / 3 + gdif - rdif;
                    }
                    if (h < 0) {
                        h += 1;
                    } else if (h > 1) {
                        h -= 1;
                    }
                }
                return [
                    h * 360,
                    s * 100,
                    v * 100
                ];
            };
            convert$1.rgb.hwb = function(rgb) {
                const r = rgb[0];
                const g = rgb[1];
                let b = rgb[2];
                const h = convert$1.rgb.hsl(rgb)[0];
                const w = 1 / 255 * Math.min(r, Math.min(g, b));
                b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
                return [
                    h,
                    w * 100,
                    b * 100
                ];
            };
            convert$1.rgb.cmyk = function(rgb) {
                const r = rgb[0] / 255;
                const g = rgb[1] / 255;
                const b = rgb[2] / 255;
                const k = Math.min(1 - r, 1 - g, 1 - b);
                const c = (1 - r - k) / (1 - k) || 0;
                const m = (1 - g - k) / (1 - k) || 0;
                const y = (1 - b - k) / (1 - k) || 0;
                return [
                    c * 100,
                    m * 100,
                    y * 100,
                    k * 100
                ];
            };
            function comparativeDistance(x, y) {
                return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;
            }
            convert$1.rgb.keyword = function(rgb) {
                const reversed = reverseKeywords[rgb];
                if (reversed) {
                    return reversed;
                }
                let currentClosestDistance = Infinity;
                let currentClosestKeyword;
                for (const keyword2 of Object.keys(colorName$1)){
                    const value1 = colorName$1[keyword2];
                    const distance = comparativeDistance(rgb, value1);
                    if (distance < currentClosestDistance) {
                        currentClosestDistance = distance;
                        currentClosestKeyword = keyword2;
                    }
                }
                return currentClosestKeyword;
            };
            convert$1.keyword.rgb = function(keyword2) {
                return colorName$1[keyword2];
            };
            convert$1.rgb.xyz = function(rgb) {
                let r = rgb[0] / 255;
                let g = rgb[1] / 255;
                let b = rgb[2] / 255;
                r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
                g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
                b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
                const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
                const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
                const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
                return [
                    x * 100,
                    y * 100,
                    z * 100
                ];
            };
            convert$1.rgb.lab = function(rgb) {
                const xyz = convert$1.rgb.xyz(rgb);
                let x = xyz[0];
                let y = xyz[1];
                let z = xyz[2];
                x /= 95.047;
                y /= 100;
                z /= 108.883;
                x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
                y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
                z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
                const l = 116 * y - 16;
                const a3 = 500 * (x - y);
                const b = 200 * (y - z);
                return [
                    l,
                    a3,
                    b
                ];
            };
            convert$1.hsl.rgb = function(hsl) {
                const h = hsl[0] / 360;
                const s = hsl[1] / 100;
                const l = hsl[2] / 100;
                let t2;
                let t3;
                let val;
                if (s === 0) {
                    val = l * 255;
                    return [
                        val,
                        val,
                        val
                    ];
                }
                if (l < 0.5) {
                    t2 = l * (1 + s);
                } else {
                    t2 = l + s - l * s;
                }
                const t1 = 2 * l - t2;
                const rgb = [
                    0,
                    0,
                    0
                ];
                for(let i = 0; i < 3; i++){
                    t3 = h + 1 / 3 * -(i - 1);
                    if (t3 < 0) {
                        t3++;
                    }
                    if (t3 > 1) {
                        t3--;
                    }
                    if (6 * t3 < 1) {
                        val = t1 + (t2 - t1) * 6 * t3;
                    } else if (2 * t3 < 1) {
                        val = t2;
                    } else if (3 * t3 < 2) {
                        val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
                    } else {
                        val = t1;
                    }
                    rgb[i] = val * 255;
                }
                return rgb;
            };
            convert$1.hsl.hsv = function(hsl) {
                const h = hsl[0];
                let s = hsl[1] / 100;
                let l = hsl[2] / 100;
                let smin = s;
                const lmin = Math.max(l, 0.01);
                l *= 2;
                s *= l <= 1 ? l : 2 - l;
                smin *= lmin <= 1 ? lmin : 2 - lmin;
                const v = (l + s) / 2;
                const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
                return [
                    h,
                    sv * 100,
                    v * 100
                ];
            };
            convert$1.hsv.rgb = function(hsv) {
                const h = hsv[0] / 60;
                const s = hsv[1] / 100;
                let v = hsv[2] / 100;
                const hi = Math.floor(h) % 6;
                const f2 = h - Math.floor(h);
                const p2 = 255 * v * (1 - s);
                const q2 = 255 * v * (1 - s * f2);
                const t2 = 255 * v * (1 - s * (1 - f2));
                v *= 255;
                switch(hi){
                    case 0:
                        return [
                            v,
                            t2,
                            p2
                        ];
                    case 1:
                        return [
                            q2,
                            v,
                            p2
                        ];
                    case 2:
                        return [
                            p2,
                            v,
                            t2
                        ];
                    case 3:
                        return [
                            p2,
                            q2,
                            v
                        ];
                    case 4:
                        return [
                            t2,
                            p2,
                            v
                        ];
                    case 5:
                        return [
                            v,
                            p2,
                            q2
                        ];
                }
            };
            convert$1.hsv.hsl = function(hsv) {
                const h = hsv[0];
                const s = hsv[1] / 100;
                const v = hsv[2] / 100;
                const vmin = Math.max(v, 0.01);
                let sl;
                let l;
                l = (2 - s) * v;
                const lmin = (2 - s) * vmin;
                sl = s * vmin;
                sl /= lmin <= 1 ? lmin : 2 - lmin;
                sl = sl || 0;
                l /= 2;
                return [
                    h,
                    sl * 100,
                    l * 100
                ];
            };
            convert$1.hwb.rgb = function(hwb) {
                const h = hwb[0] / 360;
                let wh = hwb[1] / 100;
                let bl = hwb[2] / 100;
                const ratio = wh + bl;
                let f2;
                if (ratio > 1) {
                    wh /= ratio;
                    bl /= ratio;
                }
                const i = Math.floor(6 * h);
                const v = 1 - bl;
                f2 = 6 * h - i;
                if ((i & 1) !== 0) {
                    f2 = 1 - f2;
                }
                const n = wh + f2 * (v - wh);
                let r;
                let g;
                let b;
                switch(i){
                    default:
                    case 6:
                    case 0:
                        r = v;
                        g = n;
                        b = wh;
                        break;
                    case 1:
                        r = n;
                        g = v;
                        b = wh;
                        break;
                    case 2:
                        r = wh;
                        g = v;
                        b = n;
                        break;
                    case 3:
                        r = wh;
                        g = n;
                        b = v;
                        break;
                    case 4:
                        r = n;
                        g = wh;
                        b = v;
                        break;
                    case 5:
                        r = v;
                        g = wh;
                        b = n;
                        break;
                }
                return [
                    r * 255,
                    g * 255,
                    b * 255
                ];
            };
            convert$1.cmyk.rgb = function(cmyk) {
                const c = cmyk[0] / 100;
                const m = cmyk[1] / 100;
                const y = cmyk[2] / 100;
                const k = cmyk[3] / 100;
                const r = 1 - Math.min(1, c * (1 - k) + k);
                const g = 1 - Math.min(1, m * (1 - k) + k);
                const b = 1 - Math.min(1, y * (1 - k) + k);
                return [
                    r * 255,
                    g * 255,
                    b * 255
                ];
            };
            convert$1.xyz.rgb = function(xyz) {
                const x = xyz[0] / 100;
                const y = xyz[1] / 100;
                const z = xyz[2] / 100;
                let r;
                let g;
                let b;
                r = x * 3.2406 + y * -1.5372 + z * -0.4986;
                g = x * -0.9689 + y * 1.8758 + z * 0.0415;
                b = x * 0.0557 + y * -0.204 + z * 1.057;
                r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
                g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
                b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
                r = Math.min(Math.max(0, r), 1);
                g = Math.min(Math.max(0, g), 1);
                b = Math.min(Math.max(0, b), 1);
                return [
                    r * 255,
                    g * 255,
                    b * 255
                ];
            };
            convert$1.xyz.lab = function(xyz) {
                let x = xyz[0];
                let y = xyz[1];
                let z = xyz[2];
                x /= 95.047;
                y /= 100;
                z /= 108.883;
                x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
                y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
                z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
                const l = 116 * y - 16;
                const a3 = 500 * (x - y);
                const b = 200 * (y - z);
                return [
                    l,
                    a3,
                    b
                ];
            };
            convert$1.lab.xyz = function(lab) {
                const l = lab[0];
                const a3 = lab[1];
                const b = lab[2];
                let x;
                let y;
                let z;
                y = (l + 16) / 116;
                x = a3 / 500 + y;
                z = y - b / 200;
                const y2 = y ** 3;
                const x2 = x ** 3;
                const z2 = z ** 3;
                y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
                x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
                z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
                x *= 95.047;
                y *= 100;
                z *= 108.883;
                return [
                    x,
                    y,
                    z
                ];
            };
            convert$1.lab.lch = function(lab) {
                const l = lab[0];
                const a3 = lab[1];
                const b = lab[2];
                let h;
                const hr2 = Math.atan2(b, a3);
                h = hr2 * 360 / 2 / Math.PI;
                if (h < 0) {
                    h += 360;
                }
                const c = Math.sqrt(a3 * a3 + b * b);
                return [
                    l,
                    c,
                    h
                ];
            };
            convert$1.lch.lab = function(lch) {
                const l = lch[0];
                const c = lch[1];
                const h = lch[2];
                const hr2 = h / 360 * 2 * Math.PI;
                const a3 = c * Math.cos(hr2);
                const b = c * Math.sin(hr2);
                return [
                    l,
                    a3,
                    b
                ];
            };
            convert$1.rgb.ansi16 = function(args, saturation = null) {
                const [r, g, b] = args;
                let value1 = saturation === null ? convert$1.rgb.hsv(args)[2] : saturation;
                value1 = Math.round(value1 / 50);
                if (value1 === 0) {
                    return 30;
                }
                let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
                if (value1 === 2) {
                    ansi += 60;
                }
                return ansi;
            };
            convert$1.hsv.ansi16 = function(args) {
                return convert$1.rgb.ansi16(convert$1.hsv.rgb(args), args[2]);
            };
            convert$1.rgb.ansi256 = function(args) {
                const r = args[0];
                const g = args[1];
                const b = args[2];
                if (r === g && g === b) {
                    if (r < 8) {
                        return 16;
                    }
                    if (r > 248) {
                        return 231;
                    }
                    return Math.round((r - 8) / 247 * 24) + 232;
                }
                const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
                return ansi;
            };
            convert$1.ansi16.rgb = function(args) {
                let color2 = args % 10;
                if (color2 === 0 || color2 === 7) {
                    if (args > 50) {
                        color2 += 3.5;
                    }
                    color2 = color2 / 10.5 * 255;
                    return [
                        color2,
                        color2,
                        color2
                    ];
                }
                const mult = (~~(args > 50) + 1) * 0.5;
                const r = (color2 & 1) * mult * 255;
                const g = (color2 >> 1 & 1) * mult * 255;
                const b = (color2 >> 2 & 1) * mult * 255;
                return [
                    r,
                    g,
                    b
                ];
            };
            convert$1.ansi256.rgb = function(args) {
                if (args >= 232) {
                    const c = (args - 232) * 10 + 8;
                    return [
                        c,
                        c,
                        c
                    ];
                }
                args -= 16;
                let rem;
                const r = Math.floor(args / 36) / 5 * 255;
                const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
                const b = rem % 6 / 5 * 255;
                return [
                    r,
                    g,
                    b
                ];
            };
            convert$1.rgb.hex = function(args) {
                const integer3 = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
                const string3 = integer3.toString(16).toUpperCase();
                return "000000".substring(string3.length) + string3;
            };
            convert$1.hex.rgb = function(args) {
                const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
                if (!match) {
                    return [
                        0,
                        0,
                        0
                    ];
                }
                let colorString = match[0];
                if (match[0].length === 3) {
                    colorString = colorString.split("").map((char)=>{
                        return char + char;
                    }).join("");
                }
                const integer3 = parseInt(colorString, 16);
                const r = integer3 >> 16 & 255;
                const g = integer3 >> 8 & 255;
                const b = integer3 & 255;
                return [
                    r,
                    g,
                    b
                ];
            };
            convert$1.rgb.hcg = function(rgb) {
                const r = rgb[0] / 255;
                const g = rgb[1] / 255;
                const b = rgb[2] / 255;
                const max = Math.max(Math.max(r, g), b);
                const min = Math.min(Math.min(r, g), b);
                const chroma = max - min;
                let grayscale;
                let hue;
                if (chroma < 1) {
                    grayscale = min / (1 - chroma);
                } else {
                    grayscale = 0;
                }
                if (chroma <= 0) {
                    hue = 0;
                } else if (max === r) {
                    hue = (g - b) / chroma % 6;
                } else if (max === g) {
                    hue = 2 + (b - r) / chroma;
                } else {
                    hue = 4 + (r - g) / chroma;
                }
                hue /= 6;
                hue %= 1;
                return [
                    hue * 360,
                    chroma * 100,
                    grayscale * 100
                ];
            };
            convert$1.hsl.hcg = function(hsl) {
                const s = hsl[1] / 100;
                const l = hsl[2] / 100;
                const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
                let f2 = 0;
                if (c < 1) {
                    f2 = (l - 0.5 * c) / (1 - c);
                }
                return [
                    hsl[0],
                    c * 100,
                    f2 * 100
                ];
            };
            convert$1.hsv.hcg = function(hsv) {
                const s = hsv[1] / 100;
                const v = hsv[2] / 100;
                const c = s * v;
                let f2 = 0;
                if (c < 1) {
                    f2 = (v - c) / (1 - c);
                }
                return [
                    hsv[0],
                    c * 100,
                    f2 * 100
                ];
            };
            convert$1.hcg.rgb = function(hcg) {
                const h = hcg[0] / 360;
                const c = hcg[1] / 100;
                const g = hcg[2] / 100;
                if (c === 0) {
                    return [
                        g * 255,
                        g * 255,
                        g * 255
                    ];
                }
                const pure = [
                    0,
                    0,
                    0
                ];
                const hi = h % 1 * 6;
                const v = hi % 1;
                const w = 1 - v;
                let mg = 0;
                switch(Math.floor(hi)){
                    case 0:
                        pure[0] = 1;
                        pure[1] = v;
                        pure[2] = 0;
                        break;
                    case 1:
                        pure[0] = w;
                        pure[1] = 1;
                        pure[2] = 0;
                        break;
                    case 2:
                        pure[0] = 0;
                        pure[1] = 1;
                        pure[2] = v;
                        break;
                    case 3:
                        pure[0] = 0;
                        pure[1] = w;
                        pure[2] = 1;
                        break;
                    case 4:
                        pure[0] = v;
                        pure[1] = 0;
                        pure[2] = 1;
                        break;
                    default:
                        pure[0] = 1;
                        pure[1] = 0;
                        pure[2] = w;
                }
                mg = (1 - c) * g;
                return [
                    (c * pure[0] + mg) * 255,
                    (c * pure[1] + mg) * 255,
                    (c * pure[2] + mg) * 255
                ];
            };
            convert$1.hcg.hsv = function(hcg) {
                const c = hcg[1] / 100;
                const g = hcg[2] / 100;
                const v = c + g * (1 - c);
                let f2 = 0;
                if (v > 0) {
                    f2 = c / v;
                }
                return [
                    hcg[0],
                    f2 * 100,
                    v * 100
                ];
            };
            convert$1.hcg.hsl = function(hcg) {
                const c = hcg[1] / 100;
                const g = hcg[2] / 100;
                const l = g * (1 - c) + 0.5 * c;
                let s = 0;
                if (l > 0 && l < 0.5) {
                    s = c / (2 * l);
                } else if (l >= 0.5 && l < 1) {
                    s = c / (2 * (1 - l));
                }
                return [
                    hcg[0],
                    s * 100,
                    l * 100
                ];
            };
            convert$1.hcg.hwb = function(hcg) {
                const c = hcg[1] / 100;
                const g = hcg[2] / 100;
                const v = c + g * (1 - c);
                return [
                    hcg[0],
                    (v - c) * 100,
                    (1 - v) * 100
                ];
            };
            convert$1.hwb.hcg = function(hwb) {
                const w = hwb[1] / 100;
                const b = hwb[2] / 100;
                const v = 1 - b;
                const c = v - w;
                let g = 0;
                if (c < 1) {
                    g = (v - c) / (1 - c);
                }
                return [
                    hwb[0],
                    c * 100,
                    g * 100
                ];
            };
            convert$1.apple.rgb = function(apple) {
                return [
                    apple[0] / 65535 * 255,
                    apple[1] / 65535 * 255,
                    apple[2] / 65535 * 255
                ];
            };
            convert$1.rgb.apple = function(rgb) {
                return [
                    rgb[0] / 255 * 65535,
                    rgb[1] / 255 * 65535,
                    rgb[2] / 255 * 65535
                ];
            };
            convert$1.gray.rgb = function(args) {
                return [
                    args[0] / 100 * 255,
                    args[0] / 100 * 255,
                    args[0] / 100 * 255
                ];
            };
            convert$1.gray.hsl = function(args) {
                return [
                    0,
                    0,
                    args[0]
                ];
            };
            convert$1.gray.hsv = convert$1.gray.hsl;
            convert$1.gray.hwb = function(gray) {
                return [
                    0,
                    100,
                    gray[0]
                ];
            };
            convert$1.gray.cmyk = function(gray) {
                return [
                    0,
                    0,
                    0,
                    gray[0]
                ];
            };
            convert$1.gray.lab = function(gray) {
                return [
                    gray[0],
                    0,
                    0
                ];
            };
            convert$1.gray.hex = function(gray) {
                const val = Math.round(gray[0] / 100 * 255) & 255;
                const integer3 = (val << 16) + (val << 8) + val;
                const string3 = integer3.toString(16).toUpperCase();
                return "000000".substring(string3.length) + string3;
            };
            convert$1.rgb.gray = function(rgb) {
                const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
                return [
                    val / 255 * 100
                ];
            };
            function buildGraph$1() {
                const graph = {};
                const models2 = Object.keys(conversions$1);
                for(let len = models2.length, i = 0; i < len; i++){
                    graph[models2[i]] = {
                        // http://jsperf.com/1-vs-infinity
                        // micro-opt, but this is simple.
                        distance: -1,
                        parent: null
                    };
                }
                return graph;
            }
            function deriveBFS$1(fromModel) {
                const graph = buildGraph$1();
                const queue2 = [
                    fromModel
                ];
                graph[fromModel].distance = 0;
                while(queue2.length){
                    const current = queue2.pop();
                    const adjacents = Object.keys(conversions$1[current]);
                    for(let len = adjacents.length, i = 0; i < len; i++){
                        const adjacent = adjacents[i];
                        const node = graph[adjacent];
                        if (node.distance === -1) {
                            node.distance = graph[current].distance + 1;
                            node.parent = current;
                            queue2.unshift(adjacent);
                        }
                    }
                }
                return graph;
            }
            function link$1(from2, to) {
                return function(args) {
                    return to(from2(args));
                };
            }
            function wrapConversion$1(toModel, graph) {
                const path6 = [
                    graph[toModel].parent,
                    toModel
                ];
                let fn = conversions$1[graph[toModel].parent][toModel];
                let cur = graph[toModel].parent;
                while(graph[cur].parent){
                    path6.unshift(graph[cur].parent);
                    fn = link$1(conversions$1[graph[cur].parent][cur], fn);
                    cur = graph[cur].parent;
                }
                fn.conversion = path6;
                return fn;
            }
            var route$1 = function route2(fromModel) {
                const graph = deriveBFS$1(fromModel);
                const conversion = {};
                const models2 = Object.keys(graph);
                for(let len = models2.length, i = 0; i < len; i++){
                    const toModel = models2[i];
                    const node = graph[toModel];
                    if (node.parent === null) {
                        continue;
                    }
                    conversion[toModel] = wrapConversion$1(toModel, graph);
                }
                return conversion;
            };
            const convert$2 = {};
            const models$1 = Object.keys(conversions$1);
            function wrapRaw$1(fn) {
                const wrappedFn = function wrappedFn2(...args) {
                    const arg0 = args[0];
                    if (arg0 === void 0 || arg0 === null) {
                        return arg0;
                    }
                    if (arg0.length > 1) {
                        args = arg0;
                    }
                    return fn(args);
                };
                if ("conversion" in fn) {
                    wrappedFn.conversion = fn.conversion;
                }
                return wrappedFn;
            }
            function wrapRounded$1(fn) {
                const wrappedFn = function wrappedFn2(...args) {
                    const arg0 = args[0];
                    if (arg0 === void 0 || arg0 === null) {
                        return arg0;
                    }
                    if (arg0.length > 1) {
                        args = arg0;
                    }
                    const result = fn(args);
                    if (typeof result === "object") {
                        for(let len = result.length, i = 0; i < len; i++){
                            result[i] = Math.round(result[i]);
                        }
                    }
                    return result;
                };
                if ("conversion" in fn) {
                    wrappedFn.conversion = fn.conversion;
                }
                return wrappedFn;
            }
            models$1.forEach((fromModel)=>{
                convert$2[fromModel] = {};
                Object.defineProperty(convert$2[fromModel], "channels", {
                    value: conversions$1[fromModel].channels
                });
                Object.defineProperty(convert$2[fromModel], "labels", {
                    value: conversions$1[fromModel].labels
                });
                const routes = route$1(fromModel);
                const routeModels = Object.keys(routes);
                routeModels.forEach((toModel)=>{
                    const fn = routes[toModel];
                    convert$2[fromModel][toModel] = wrapRounded$1(fn);
                    convert$2[fromModel][toModel].raw = wrapRaw$1(fn);
                });
            });
            var colorConvert$1 = convert$2;
            var ansiStyles$1 = createCommonjsModule(function(module2) {
                const wrapAnsi16 = (fn, offset)=>(...args)=>{
                        const code2 = fn(...args);
                        return "\x1B[".concat(code2 + offset, "m");
                    };
                const wrapAnsi256 = (fn, offset)=>(...args)=>{
                        const code2 = fn(...args);
                        return "\x1B[".concat(38 + offset, ";5;").concat(code2, "m");
                    };
                const wrapAnsi16m = (fn, offset)=>(...args)=>{
                        const rgb = fn(...args);
                        return "\x1B[".concat(38 + offset, ";2;").concat(rgb[0], ";").concat(rgb[1], ";").concat(rgb[2], "m");
                    };
                const ansi2ansi = (n)=>n;
                const rgb2rgb = (r, g, b)=>[
                        r,
                        g,
                        b
                    ];
                const setLazyProperty = (object2, property, _get)=>{
                    Object.defineProperty(object2, property, {
                        get: ()=>{
                            const value1 = _get();
                            Object.defineProperty(object2, property, {
                                value: value1,
                                enumerable: true,
                                configurable: true
                            });
                            return value1;
                        },
                        enumerable: true,
                        configurable: true
                    });
                };
                let colorConvert2;
                const makeDynamicStyles = (wrap2, targetSpace, identity2, isBackground)=>{
                    if (colorConvert2 === void 0) {
                        colorConvert2 = colorConvert$1;
                    }
                    const offset = isBackground ? 10 : 0;
                    const styles2 = {};
                    for (const [sourceSpace, suite] of Object.entries(colorConvert2)){
                        const name2 = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
                        if (sourceSpace === targetSpace) {
                            styles2[name2] = wrap2(identity2, offset);
                        } else if (typeof suite === "object") {
                            styles2[name2] = wrap2(suite[targetSpace], offset);
                        }
                    }
                    return styles2;
                };
                function assembleStyles() {
                    const codes = /* @__PURE__ */ new Map();
                    const styles2 = {
                        modifier: {
                            reset: [
                                0,
                                0
                            ],
                            // 21 isn't widely supported and 22 does the same thing
                            bold: [
                                1,
                                22
                            ],
                            dim: [
                                2,
                                22
                            ],
                            italic: [
                                3,
                                23
                            ],
                            underline: [
                                4,
                                24
                            ],
                            inverse: [
                                7,
                                27
                            ],
                            hidden: [
                                8,
                                28
                            ],
                            strikethrough: [
                                9,
                                29
                            ]
                        },
                        color: {
                            black: [
                                30,
                                39
                            ],
                            red: [
                                31,
                                39
                            ],
                            green: [
                                32,
                                39
                            ],
                            yellow: [
                                33,
                                39
                            ],
                            blue: [
                                34,
                                39
                            ],
                            magenta: [
                                35,
                                39
                            ],
                            cyan: [
                                36,
                                39
                            ],
                            white: [
                                37,
                                39
                            ],
                            // Bright color
                            blackBright: [
                                90,
                                39
                            ],
                            redBright: [
                                91,
                                39
                            ],
                            greenBright: [
                                92,
                                39
                            ],
                            yellowBright: [
                                93,
                                39
                            ],
                            blueBright: [
                                94,
                                39
                            ],
                            magentaBright: [
                                95,
                                39
                            ],
                            cyanBright: [
                                96,
                                39
                            ],
                            whiteBright: [
                                97,
                                39
                            ]
                        },
                        bgColor: {
                            bgBlack: [
                                40,
                                49
                            ],
                            bgRed: [
                                41,
                                49
                            ],
                            bgGreen: [
                                42,
                                49
                            ],
                            bgYellow: [
                                43,
                                49
                            ],
                            bgBlue: [
                                44,
                                49
                            ],
                            bgMagenta: [
                                45,
                                49
                            ],
                            bgCyan: [
                                46,
                                49
                            ],
                            bgWhite: [
                                47,
                                49
                            ],
                            // Bright color
                            bgBlackBright: [
                                100,
                                49
                            ],
                            bgRedBright: [
                                101,
                                49
                            ],
                            bgGreenBright: [
                                102,
                                49
                            ],
                            bgYellowBright: [
                                103,
                                49
                            ],
                            bgBlueBright: [
                                104,
                                49
                            ],
                            bgMagentaBright: [
                                105,
                                49
                            ],
                            bgCyanBright: [
                                106,
                                49
                            ],
                            bgWhiteBright: [
                                107,
                                49
                            ]
                        }
                    };
                    styles2.color.gray = styles2.color.blackBright;
                    styles2.bgColor.bgGray = styles2.bgColor.bgBlackBright;
                    styles2.color.grey = styles2.color.blackBright;
                    styles2.bgColor.bgGrey = styles2.bgColor.bgBlackBright;
                    for (const [groupName, group2] of Object.entries(styles2)){
                        for (const [styleName, style2] of Object.entries(group2)){
                            styles2[styleName] = {
                                open: "\x1B[".concat(style2[0], "m"),
                                close: "\x1B[".concat(style2[1], "m")
                            };
                            group2[styleName] = styles2[styleName];
                            codes.set(style2[0], style2[1]);
                        }
                        Object.defineProperty(styles2, groupName, {
                            value: group2,
                            enumerable: false
                        });
                    }
                    Object.defineProperty(styles2, "codes", {
                        value: codes,
                        enumerable: false
                    });
                    styles2.color.close = "\x1B[39m";
                    styles2.bgColor.close = "\x1B[49m";
                    setLazyProperty(styles2.color, "ansi", ()=>makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
                    setLazyProperty(styles2.color, "ansi256", ()=>makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
                    setLazyProperty(styles2.color, "ansi16m", ()=>makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
                    setLazyProperty(styles2.bgColor, "ansi", ()=>makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
                    setLazyProperty(styles2.bgColor, "ansi256", ()=>makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
                    setLazyProperty(styles2.bgColor, "ansi16m", ()=>makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
                    return styles2;
                }
                Object.defineProperty(module2, "exports", {
                    enumerable: true,
                    get: assembleStyles
                });
            });
            var tty = {
                isatty () {
                    return false;
                }
            };
            var hasFlag$1 = (flag, argv2 = process2.argv)=>{
                const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
                const position = argv2.indexOf(prefix + flag);
                const terminatorPosition = argv2.indexOf("--");
                return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
            };
            const { env: env$2  } = process2;
            let forceColor$1;
            if (hasFlag$1("no-color") || hasFlag$1("no-colors") || hasFlag$1("color=false") || hasFlag$1("color=never")) {
                forceColor$1 = 0;
            } else if (hasFlag$1("color") || hasFlag$1("colors") || hasFlag$1("color=true") || hasFlag$1("color=always")) {
                forceColor$1 = 1;
            }
            if ("FORCE_COLOR" in env$2) {
                if (env$2.FORCE_COLOR === "true") {
                    forceColor$1 = 1;
                } else if (env$2.FORCE_COLOR === "false") {
                    forceColor$1 = 0;
                } else {
                    forceColor$1 = env$2.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env$2.FORCE_COLOR, 10), 3);
                }
            }
            function translateLevel$1(level) {
                if (level === 0) {
                    return false;
                }
                return {
                    level,
                    hasBasic: true,
                    has256: level >= 2,
                    has16m: level >= 3
                };
            }
            function supportsColor$1(haveStream, streamIsTTY) {
                if (forceColor$1 === 0) {
                    return 0;
                }
                if (hasFlag$1("color=16m") || hasFlag$1("color=full") || hasFlag$1("color=truecolor")) {
                    return 3;
                }
                if (hasFlag$1("color=256")) {
                    return 2;
                }
                if (haveStream && !streamIsTTY && forceColor$1 === void 0) {
                    return 0;
                }
                const min = forceColor$1 || 0;
                if (env$2.TERM === "dumb") {
                    return min;
                }
                if (process2.platform === "win32") {
                    const osRelease = require$$0$1.release().split(".");
                    if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
                        return Number(osRelease[2]) >= 14931 ? 3 : 2;
                    }
                    return 1;
                }
                if ("CI" in env$2) {
                    if ([
                        "TRAVIS",
                        "CIRCLECI",
                        "APPVEYOR",
                        "GITLAB_CI"
                    ].some((sign)=>sign in env$2) || env$2.CI_NAME === "codeship") {
                        return 1;
                    }
                    return min;
                }
                if ("TEAMCITY_VERSION" in env$2) {
                    return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env$2.TEAMCITY_VERSION) ? 1 : 0;
                }
                if ("GITHUB_ACTIONS" in env$2) {
                    return 1;
                }
                if (env$2.COLORTERM === "truecolor") {
                    return 3;
                }
                if ("TERM_PROGRAM" in env$2) {
                    const version2 = parseInt((env$2.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
                    switch(env$2.TERM_PROGRAM){
                        case "iTerm.app":
                            return version2 >= 3 ? 3 : 2;
                        case "Apple_Terminal":
                            return 2;
                    }
                }
                if (/-256(color)?$/i.test(env$2.TERM)) {
                    return 2;
                }
                if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env$2.TERM)) {
                    return 1;
                }
                if ("COLORTERM" in env$2) {
                    return 1;
                }
                return min;
            }
            function getSupportLevel$1(stream) {
                const level = supportsColor$1(stream, stream && stream.isTTY);
                return translateLevel$1(level);
            }
            var supportsColor_1$1 = {
                supportsColor: getSupportLevel$1,
                stdout: translateLevel$1(supportsColor$1(true, tty.isatty(1))),
                stderr: translateLevel$1(supportsColor$1(true, tty.isatty(2)))
            };
            const stringReplaceAll = (string3, substring, replacer)=>{
                let index2 = string3.indexOf(substring);
                if (index2 === -1) {
                    return string3;
                }
                const substringLength = substring.length;
                let endIndex = 0;
                let returnValue = "";
                do {
                    returnValue += string3.substr(endIndex, index2 - endIndex) + substring + replacer;
                    endIndex = index2 + substringLength;
                    index2 = string3.indexOf(substring, endIndex);
                }while (index2 !== -1)
                returnValue += string3.substr(endIndex);
                return returnValue;
            };
            const stringEncaseCRLFWithFirstIndex = (string3, prefix, postfix, index2)=>{
                let endIndex = 0;
                let returnValue = "";
                do {
                    const gotCR = string3[index2 - 1] === "\r";
                    returnValue += string3.substr(endIndex, (gotCR ? index2 - 1 : index2) - endIndex) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
                    endIndex = index2 + 1;
                    index2 = string3.indexOf("\n", endIndex);
                }while (index2 !== -1)
                returnValue += string3.substr(endIndex);
                return returnValue;
            };
            var util = {
                stringReplaceAll,
                stringEncaseCRLFWithFirstIndex
            };
            const TEMPLATE_REGEX$1 = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
            const STYLE_REGEX$1 = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
            const STRING_REGEX$1 = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
            const ESCAPE_REGEX$1 = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
            const ESCAPES$1 = /* @__PURE__ */ new Map([
                [
                    "n",
                    "\n"
                ],
                [
                    "r",
                    "\r"
                ],
                [
                    "t",
                    "	"
                ],
                [
                    "b",
                    "\b"
                ],
                [
                    "f",
                    "\f"
                ],
                [
                    "v",
                    "\v"
                ],
                [
                    "0",
                    "\0"
                ],
                [
                    "\\",
                    "\\"
                ],
                [
                    "e",
                    "\x1B"
                ],
                [
                    "a",
                    "\x07"
                ]
            ]);
            function unescape$1(c) {
                const u = c[0] === "u";
                const bracket = c[1] === "{";
                if (u && !bracket && c.length === 5 || c[0] === "x" && c.length === 3) {
                    return String.fromCharCode(parseInt(c.slice(1), 16));
                }
                if (u && bracket) {
                    return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
                }
                return ESCAPES$1.get(c) || c;
            }
            function parseArguments$1(name2, arguments_) {
                const results = [];
                const chunks = arguments_.trim().split(/\s*,\s*/g);
                let matches;
                for (const chunk of chunks){
                    const number2 = Number(chunk);
                    if (!Number.isNaN(number2)) {
                        results.push(number2);
                    } else if (matches = chunk.match(STRING_REGEX$1)) {
                        results.push(matches[2].replace(ESCAPE_REGEX$1, (m, escape, character)=>escape ? unescape$1(escape) : character));
                    } else {
                        throw new Error("Invalid Chalk template style argument: ".concat(chunk, " (in style '").concat(name2, "')"));
                    }
                }
                return results;
            }
            function parseStyle$1(style2) {
                STYLE_REGEX$1.lastIndex = 0;
                const results = [];
                let matches;
                while((matches = STYLE_REGEX$1.exec(style2)) !== null){
                    const name2 = matches[1];
                    if (matches[2]) {
                        const args = parseArguments$1(name2, matches[2]);
                        results.push([
                            name2
                        ].concat(args));
                    } else {
                        results.push([
                            name2
                        ]);
                    }
                }
                return results;
            }
            function buildStyle$1(chalk2, styles2) {
                const enabled = {};
                for (const layer of styles2){
                    for (const style2 of layer.styles){
                        enabled[style2[0]] = layer.inverse ? null : style2.slice(1);
                    }
                }
                let current = chalk2;
                for (const [styleName, styles3] of Object.entries(enabled)){
                    if (!Array.isArray(styles3)) {
                        continue;
                    }
                    if (!(styleName in current)) {
                        throw new Error("Unknown Chalk style: ".concat(styleName));
                    }
                    current = styles3.length > 0 ? current[styleName](...styles3) : current[styleName];
                }
                return current;
            }
            var templates$1 = (chalk2, temporary)=>{
                const styles2 = [];
                const chunks = [];
                let chunk = [];
                temporary.replace(TEMPLATE_REGEX$1, (m, escapeCharacter, inverse, style2, close, character)=>{
                    if (escapeCharacter) {
                        chunk.push(unescape$1(escapeCharacter));
                    } else if (style2) {
                        const string3 = chunk.join("");
                        chunk = [];
                        chunks.push(styles2.length === 0 ? string3 : buildStyle$1(chalk2, styles2)(string3));
                        styles2.push({
                            inverse,
                            styles: parseStyle$1(style2)
                        });
                    } else if (close) {
                        if (styles2.length === 0) {
                            throw new Error("Found extraneous } in Chalk template literal");
                        }
                        chunks.push(buildStyle$1(chalk2, styles2)(chunk.join("")));
                        chunk = [];
                        styles2.pop();
                    } else {
                        chunk.push(character);
                    }
                });
                chunks.push(chunk.join(""));
                if (styles2.length > 0) {
                    const errMessage = "Chalk template literal is missing ".concat(styles2.length, " closing bracket").concat(styles2.length === 1 ? "" : "s", " (`}`)");
                    throw new Error(errMessage);
                }
                return chunks.join("");
            };
            const { stdout: stdoutColor , stderr: stderrColor  } = supportsColor_1$1;
            const { stringReplaceAll: stringReplaceAll$1 , stringEncaseCRLFWithFirstIndex: stringEncaseCRLFWithFirstIndex$1  } = util;
            const levelMapping = [
                "ansi",
                "ansi",
                "ansi256",
                "ansi16m"
            ];
            const styles = /* @__PURE__ */ Object.create(null);
            const applyOptions = (object2, options2 = {})=>{
                if (options2.level && !(Number.isInteger(options2.level) && options2.level >= 0 && options2.level <= 3)) {
                    throw new Error("The `level` option should be an integer from 0 to 3");
                }
                const colorLevel = stdoutColor ? stdoutColor.level : 0;
                object2.level = options2.level === void 0 ? colorLevel : options2.level;
            };
            class ChalkClass {
                constructor(options2){
                    return chalkFactory(options2);
                }
            }
            const chalkFactory = (options2)=>{
                const chalk2 = {};
                applyOptions(chalk2, options2);
                chalk2.template = (...arguments_)=>chalkTag(chalk2.template, ...arguments_);
                Object.setPrototypeOf(chalk2, Chalk.prototype);
                Object.setPrototypeOf(chalk2.template, chalk2);
                chalk2.template.constructor = ()=>{
                    throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
                };
                chalk2.template.Instance = ChalkClass;
                return chalk2.template;
            };
            function Chalk(options2) {
                return chalkFactory(options2);
            }
            for (const [styleName, style2] of Object.entries(ansiStyles$1)){
                styles[styleName] = {
                    get () {
                        const builder = createBuilder(this, createStyler(style2.open, style2.close, this._styler), this._isEmpty);
                        Object.defineProperty(this, styleName, {
                            value: builder
                        });
                        return builder;
                    }
                };
            }
            styles.visible = {
                get () {
                    const builder = createBuilder(this, this._styler, true);
                    Object.defineProperty(this, "visible", {
                        value: builder
                    });
                    return builder;
                }
            };
            const usedModels = [
                "rgb",
                "hex",
                "keyword",
                "hsl",
                "hsv",
                "hwb",
                "ansi",
                "ansi256"
            ];
            for (const model of usedModels){
                styles[model] = {
                    get () {
                        const { level  } = this;
                        return function(...arguments_) {
                            const styler = createStyler(ansiStyles$1.color[levelMapping[level]][model](...arguments_), ansiStyles$1.color.close, this._styler);
                            return createBuilder(this, styler, this._isEmpty);
                        };
                    }
                };
            }
            for (const model of usedModels){
                const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
                styles[bgModel] = {
                    get () {
                        const { level  } = this;
                        return function(...arguments_) {
                            const styler = createStyler(ansiStyles$1.bgColor[levelMapping[level]][model](...arguments_), ansiStyles$1.bgColor.close, this._styler);
                            return createBuilder(this, styler, this._isEmpty);
                        };
                    }
                };
            }
            const proto = Object.defineProperties(()=>{}, Object.assign({}, styles, {
                level: {
                    enumerable: true,
                    get () {
                        return this._generator.level;
                    },
                    set (level) {
                        this._generator.level = level;
                    }
                }
            }));
            const createStyler = (open, close, parent)=>{
                let openAll;
                let closeAll;
                if (parent === void 0) {
                    openAll = open;
                    closeAll = close;
                } else {
                    openAll = parent.openAll + open;
                    closeAll = close + parent.closeAll;
                }
                return {
                    open,
                    close,
                    openAll,
                    closeAll,
                    parent
                };
            };
            const createBuilder = (self2, _styler, _isEmpty)=>{
                const builder = (...arguments_)=>{
                    return applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
                };
                Object.setPrototypeOf(builder, proto);
                builder._generator = self2;
                builder._styler = _styler;
                builder._isEmpty = _isEmpty;
                return builder;
            };
            const applyStyle = (self2, string3)=>{
                if (self2.level <= 0 || !string3) {
                    return self2._isEmpty ? "" : string3;
                }
                let styler = self2._styler;
                if (styler === void 0) {
                    return string3;
                }
                const { openAll , closeAll  } = styler;
                if (string3.indexOf("\x1B") !== -1) {
                    while(styler !== void 0){
                        string3 = stringReplaceAll$1(string3, styler.close, styler.open);
                        styler = styler.parent;
                    }
                }
                const lfIndex = string3.indexOf("\n");
                if (lfIndex !== -1) {
                    string3 = stringEncaseCRLFWithFirstIndex$1(string3, closeAll, openAll, lfIndex);
                }
                return openAll + string3 + closeAll;
            };
            let template;
            const chalkTag = (chalk2, ...strings)=>{
                const [firstString] = strings;
                if (!Array.isArray(firstString)) {
                    return strings.join(" ");
                }
                const arguments_ = strings.slice(1);
                const parts = [
                    firstString.raw[0]
                ];
                for(let i = 1; i < firstString.length; i++){
                    parts.push(String(arguments_[i - 1]).replace(/[{}\\]/g, "\\$&"), String(firstString.raw[i]));
                }
                if (template === void 0) {
                    template = templates$1;
                }
                return template(chalk2, parts.join(""));
            };
            Object.defineProperties(Chalk.prototype, styles);
            const chalk$1 = Chalk();
            chalk$1.supportsColor = stdoutColor;
            chalk$1.stderr = Chalk({
                level: stderrColor ? stderrColor.level : 0
            });
            chalk$1.stderr.supportsColor = stderrColor;
            var source = chalk$1;
            const cliDescriptor = {
                key: (_key)=>_key.length === 1 ? "-".concat(_key) : "--".concat(_key),
                value: (_value)=>lib.apiDescriptor.value(_value),
                pair: ({ key , value: value1  })=>value1 === false ? "--no-".concat(key) : value1 === true ? cliDescriptor.key(key) : value1 === "" ? "".concat(cliDescriptor.key(key), " without an argument") : "".concat(cliDescriptor.key(key), "=").concat(value1)
            };
            class FlagSchema extends lib.ChoiceSchema {
                preprocess(value1, utils2) {
                    if (typeof value1 === "string" && value1.length !== 0 && !this._flags.includes(value1)) {
                        const suggestion = this._flags.find((flag)=>leven_1$1(flag, value1) < 3);
                        if (suggestion) {
                            utils2.logger.warn([
                                "Unknown flag ".concat(source.yellow(utils2.descriptor.value(value1)), ","),
                                "did you mean ".concat(source.blue(utils2.descriptor.value(suggestion)), "?")
                            ].join(" "));
                            return suggestion;
                        }
                    }
                    return value1;
                }
                expected() {
                    return "a flag";
                }
                constructor({ name: name2 , flags  }){
                    super({
                        name: name2,
                        choices: flags
                    });
                    this._flags = flags.slice().sort();
                }
            }
            let hasDeprecationWarned;
            function normalizeOptions(options2, optionInfos, { logger , isCLI =false , passThrough =false  } = {}) {
                const unknown2 = !passThrough ? lib.levenUnknownHandler : Array.isArray(passThrough) ? (key, value1)=>!passThrough.includes(key) ? void 0 : {
                        [key]: value1
                    } : (key, value1)=>({
                        [key]: value1
                    });
                const descriptor = isCLI ? cliDescriptor : lib.apiDescriptor;
                const schemas3 = optionInfosToSchemas(optionInfos, {
                    isCLI
                });
                const normalizer = new lib.Normalizer(schemas3, {
                    logger,
                    unknown: unknown2,
                    descriptor
                });
                const shouldSuppressDuplicateDeprecationWarnings = logger !== false;
                if (shouldSuppressDuplicateDeprecationWarnings && hasDeprecationWarned) {
                    normalizer._hasDeprecationWarned = hasDeprecationWarned;
                }
                const normalized = normalizer.normalize(options2);
                if (shouldSuppressDuplicateDeprecationWarnings) {
                    hasDeprecationWarned = normalizer._hasDeprecationWarned;
                }
                return normalized;
            }
            function optionInfosToSchemas(optionInfos, { isCLI  }) {
                const schemas3 = [];
                if (isCLI) {
                    schemas3.push(lib.AnySchema.create({
                        name: "_"
                    }));
                }
                for (const optionInfo of optionInfos){
                    schemas3.push(optionInfoToSchema(optionInfo, {
                        isCLI,
                        optionInfos
                    }));
                    if (optionInfo.alias && isCLI) {
                        schemas3.push(lib.AliasSchema.create({
                            name: optionInfo.alias,
                            sourceName: optionInfo.name
                        }));
                    }
                }
                return schemas3;
            }
            function optionInfoToSchema(optionInfo, { isCLI , optionInfos  }) {
                let SchemaConstructor;
                const parameters = {
                    name: optionInfo.name
                };
                const handlers2 = {};
                switch(optionInfo.type){
                    case "int":
                        SchemaConstructor = lib.IntegerSchema;
                        if (isCLI) {
                            parameters.preprocess = (value1)=>Number(value1);
                        }
                        break;
                    case "string":
                        SchemaConstructor = lib.StringSchema;
                        break;
                    case "choice":
                        SchemaConstructor = lib.ChoiceSchema;
                        parameters.choices = optionInfo.choices.map((choiceInfo)=>typeof choiceInfo === "object" && choiceInfo.redirect ? Object.assign({}, choiceInfo, {
                                redirect: {
                                    to: {
                                        key: optionInfo.name,
                                        value: choiceInfo.redirect
                                    }
                                }
                            }) : choiceInfo);
                        break;
                    case "boolean":
                        SchemaConstructor = lib.BooleanSchema;
                        break;
                    case "flag":
                        SchemaConstructor = FlagSchema;
                        parameters.flags = optionInfos.map((optionInfo2)=>[].concat(optionInfo2.alias || [], optionInfo2.description ? optionInfo2.name : [], optionInfo2.oppositeDescription ? "no-".concat(optionInfo2.name) : [])).reduce((a3, b)=>a3.concat(b), []);
                        break;
                    case "path":
                        SchemaConstructor = lib.StringSchema;
                        break;
                    default:
                        throw new Error("Unexpected type ".concat(optionInfo.type));
                }
                if (optionInfo.exception) {
                    parameters.validate = (value1, schema5, utils2)=>{
                        return optionInfo.exception(value1) || schema5.validate(value1, utils2);
                    };
                } else {
                    parameters.validate = (value1, schema5, utils2)=>{
                        return value1 === void 0 || schema5.validate(value1, utils2);
                    };
                }
                if (optionInfo.redirect) {
                    handlers2.redirect = (value1)=>!value1 ? void 0 : {
                            to: {
                                key: optionInfo.redirect.option,
                                value: optionInfo.redirect.value
                            }
                        };
                }
                if (optionInfo.deprecated) {
                    handlers2.deprecated = true;
                }
                if (isCLI && !optionInfo.array) {
                    const originalPreprocess = parameters.preprocess || ((x)=>x);
                    parameters.preprocess = (value1, schema5, utils2)=>schema5.preprocess(originalPreprocess(Array.isArray(value1) ? value1[value1.length - 1] : value1), utils2);
                }
                return optionInfo.array ? lib.ArraySchema.create(Object.assign({}, isCLI ? {
                    preprocess: (v)=>[].concat(v)
                } : {}, {}, handlers2, {
                    valueSchema: SchemaConstructor.create(parameters)
                })) : SchemaConstructor.create(Object.assign({}, parameters, {}, handlers2));
            }
            function normalizeApiOptions(options2, optionInfos, opts) {
                return normalizeOptions(options2, optionInfos, opts);
            }
            function normalizeCliOptions(options2, optionInfos, opts) {
                return normalizeOptions(options2, optionInfos, Object.assign({
                    isCLI: true
                }, opts));
            }
            var optionsNormalizer = {
                normalizeApiOptions,
                normalizeCliOptions
            };
            var getLast = (arr2)=>arr2[arr2.length - 1];
            function locStart(node, opts) {
                opts = opts || {};
                if (!opts.ignoreDecorators && node.declaration && node.declaration.decorators && node.declaration.decorators.length > 0) {
                    return locStart(node.declaration.decorators[0]);
                }
                if (!opts.ignoreDecorators && node.decorators && node.decorators.length > 0) {
                    return locStart(node.decorators[0]);
                }
                if (node.__location) {
                    return node.__location.startOffset;
                }
                if (node.range) {
                    return node.range[0];
                }
                if (typeof node.start === "number") {
                    return node.start;
                }
                if (node.loc) {
                    return node.loc.start;
                }
                return null;
            }
            function locEnd(node) {
                const endNode = node.nodes && getLast(node.nodes);
                if (endNode && node.source && !node.source.end) {
                    node = endNode;
                }
                if (node.__location) {
                    return node.__location.endOffset;
                }
                const loc2 = node.range ? node.range[1] : typeof node.end === "number" ? node.end : null;
                if (node.typeAnnotation) {
                    return Math.max(loc2, locEnd(node.typeAnnotation));
                }
                if (node.loc && !loc2) {
                    return node.loc.end;
                }
                return loc2;
            }
            function composeLoc(startNode, endNodeOrLength = startNode) {
                const length = typeof endNodeOrLength === "number" ? endNodeOrLength : -1;
                const start = locStart(startNode);
                const end = length !== -1 ? start + length : locEnd(endNodeOrLength);
                const startLoc = startNode.loc.start;
                return {
                    start,
                    end,
                    range: [
                        start,
                        end
                    ],
                    loc: {
                        start: startLoc,
                        end: length !== -1 ? {
                            line: startLoc.line,
                            column: startLoc.column + length
                        } : endNodeOrLength.loc.end
                    }
                };
            }
            var loc = {
                locStart,
                locEnd,
                composeLoc
            };
            var jsTokens = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                exports2.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;
                exports2.matchToToken = function(match) {
                    var token = {
                        type: "invalid",
                        value: match[0],
                        closed: void 0
                    };
                    if (match[1]) token.type = "string", token.closed = !!(match[3] || match[4]);
                    else if (match[5]) token.type = "comment";
                    else if (match[6]) token.type = "comment", token.closed = !!match[7];
                    else if (match[8]) token.type = "regex";
                    else if (match[9]) token.type = "number";
                    else if (match[10]) token.type = "name";
                    else if (match[11]) token.type = "punctuator";
                    else if (match[12]) token.type = "whitespace";
                    return token;
                };
            });
            unwrapExports(jsTokens);
            var jsTokens_1 = jsTokens.matchToToken;
            var ast = createCommonjsModule(function(module2) {
                (function() {
                    function isExpression(node) {
                        if (node == null) {
                            return false;
                        }
                        switch(node.type){
                            case "ArrayExpression":
                            case "AssignmentExpression":
                            case "BinaryExpression":
                            case "CallExpression":
                            case "ConditionalExpression":
                            case "FunctionExpression":
                            case "Identifier":
                            case "Literal":
                            case "LogicalExpression":
                            case "MemberExpression":
                            case "NewExpression":
                            case "ObjectExpression":
                            case "SequenceExpression":
                            case "ThisExpression":
                            case "UnaryExpression":
                            case "UpdateExpression":
                                return true;
                        }
                        return false;
                    }
                    function isIterationStatement(node) {
                        if (node == null) {
                            return false;
                        }
                        switch(node.type){
                            case "DoWhileStatement":
                            case "ForInStatement":
                            case "ForStatement":
                            case "WhileStatement":
                                return true;
                        }
                        return false;
                    }
                    function isStatement2(node) {
                        if (node == null) {
                            return false;
                        }
                        switch(node.type){
                            case "BlockStatement":
                            case "BreakStatement":
                            case "ContinueStatement":
                            case "DebuggerStatement":
                            case "DoWhileStatement":
                            case "EmptyStatement":
                            case "ExpressionStatement":
                            case "ForInStatement":
                            case "ForStatement":
                            case "IfStatement":
                            case "LabeledStatement":
                            case "ReturnStatement":
                            case "SwitchStatement":
                            case "ThrowStatement":
                            case "TryStatement":
                            case "VariableDeclaration":
                            case "WhileStatement":
                            case "WithStatement":
                                return true;
                        }
                        return false;
                    }
                    function isSourceElement2(node) {
                        return isStatement2(node) || node != null && node.type === "FunctionDeclaration";
                    }
                    function trailingStatement(node) {
                        switch(node.type){
                            case "IfStatement":
                                if (node.alternate != null) {
                                    return node.alternate;
                                }
                                return node.consequent;
                            case "LabeledStatement":
                            case "ForStatement":
                            case "ForInStatement":
                            case "WhileStatement":
                            case "WithStatement":
                                return node.body;
                        }
                        return null;
                    }
                    function isProblematicIfStatement(node) {
                        var current;
                        if (node.type !== "IfStatement") {
                            return false;
                        }
                        if (node.alternate == null) {
                            return false;
                        }
                        current = node.consequent;
                        do {
                            if (current.type === "IfStatement") {
                                if (current.alternate == null) {
                                    return true;
                                }
                            }
                            current = trailingStatement(current);
                        }while (current)
                        return false;
                    }
                    module2.exports = {
                        isExpression,
                        isStatement: isStatement2,
                        isIterationStatement,
                        isSourceElement: isSourceElement2,
                        isProblematicIfStatement,
                        trailingStatement
                    };
                })();
            });
            var ast_1 = ast.isExpression;
            var ast_2 = ast.isStatement;
            var ast_3 = ast.isIterationStatement;
            var ast_4 = ast.isSourceElement;
            var ast_5 = ast.isProblematicIfStatement;
            var ast_6 = ast.trailingStatement;
            var code = createCommonjsModule(function(module2) {
                (function() {
                    var ES6Regex, ES5Regex, NON_ASCII_WHITESPACES, IDENTIFIER_START, IDENTIFIER_PART, ch;
                    ES5Regex = {
                        // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierStart:
                        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
                        // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierPart:
                        NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
                    };
                    ES6Regex = {
                        // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierStart:
                        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
                        // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierPart:
                        NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
                    };
                    function isDecimalDigit(ch2) {
                        return 48 <= ch2 && ch2 <= 57;
                    }
                    function isHexDigit(ch2) {
                        return 48 <= ch2 && ch2 <= 57 || // 0..9
                        97 <= ch2 && ch2 <= 102 || // a..f
                        65 <= ch2 && ch2 <= 70;
                    }
                    function isOctalDigit(ch2) {
                        return ch2 >= 48 && ch2 <= 55;
                    }
                    NON_ASCII_WHITESPACES = [
                        5760,
                        8192,
                        8193,
                        8194,
                        8195,
                        8196,
                        8197,
                        8198,
                        8199,
                        8200,
                        8201,
                        8202,
                        8239,
                        8287,
                        12288,
                        65279
                    ];
                    function isWhiteSpace2(ch2) {
                        return ch2 === 32 || ch2 === 9 || ch2 === 11 || ch2 === 12 || ch2 === 160 || ch2 >= 5760 && NON_ASCII_WHITESPACES.indexOf(ch2) >= 0;
                    }
                    function isLineTerminator(ch2) {
                        return ch2 === 10 || ch2 === 13 || ch2 === 8232 || ch2 === 8233;
                    }
                    function fromCodePoint(cp) {
                        if (cp <= 65535) {
                            return String.fromCharCode(cp);
                        }
                        var cu1 = String.fromCharCode(Math.floor((cp - 65536) / 1024) + 55296);
                        var cu2 = String.fromCharCode((cp - 65536) % 1024 + 56320);
                        return cu1 + cu2;
                    }
                    IDENTIFIER_START = new Array(128);
                    for(ch = 0; ch < 128; ++ch){
                        IDENTIFIER_START[ch] = ch >= 97 && ch <= 122 || // a..z
                        ch >= 65 && ch <= 90 || // A..Z
                        ch === 36 || ch === 95;
                    }
                    IDENTIFIER_PART = new Array(128);
                    for(ch = 0; ch < 128; ++ch){
                        IDENTIFIER_PART[ch] = ch >= 97 && ch <= 122 || // a..z
                        ch >= 65 && ch <= 90 || // A..Z
                        ch >= 48 && ch <= 57 || // 0..9
                        ch === 36 || ch === 95;
                    }
                    function isIdentifierStartES5(ch2) {
                        return ch2 < 128 ? IDENTIFIER_START[ch2] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch2));
                    }
                    function isIdentifierPartES5(ch2) {
                        return ch2 < 128 ? IDENTIFIER_PART[ch2] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch2));
                    }
                    function isIdentifierStartES6(ch2) {
                        return ch2 < 128 ? IDENTIFIER_START[ch2] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch2));
                    }
                    function isIdentifierPartES6(ch2) {
                        return ch2 < 128 ? IDENTIFIER_PART[ch2] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch2));
                    }
                    module2.exports = {
                        isDecimalDigit,
                        isHexDigit,
                        isOctalDigit,
                        isWhiteSpace: isWhiteSpace2,
                        isLineTerminator,
                        isIdentifierStartES5,
                        isIdentifierPartES5,
                        isIdentifierStartES6,
                        isIdentifierPartES6
                    };
                })();
            });
            var code_1 = code.isDecimalDigit;
            var code_2 = code.isHexDigit;
            var code_3 = code.isOctalDigit;
            var code_4 = code.isWhiteSpace;
            var code_5 = code.isLineTerminator;
            var code_6 = code.isIdentifierStartES5;
            var code_7 = code.isIdentifierPartES5;
            var code_8 = code.isIdentifierStartES6;
            var code_9 = code.isIdentifierPartES6;
            var keyword = createCommonjsModule(function(module2) {
                (function() {
                    var code$1 = code;
                    function isStrictModeReservedWordES6(id) {
                        switch(id){
                            case "implements":
                            case "interface":
                            case "package":
                            case "private":
                            case "protected":
                            case "public":
                            case "static":
                            case "let":
                                return true;
                            default:
                                return false;
                        }
                    }
                    function isKeywordES5(id, strict) {
                        if (!strict && id === "yield") {
                            return false;
                        }
                        return isKeywordES6(id, strict);
                    }
                    function isKeywordES6(id, strict) {
                        if (strict && isStrictModeReservedWordES6(id)) {
                            return true;
                        }
                        switch(id.length){
                            case 2:
                                return id === "if" || id === "in" || id === "do";
                            case 3:
                                return id === "var" || id === "for" || id === "new" || id === "try";
                            case 4:
                                return id === "this" || id === "else" || id === "case" || id === "void" || id === "with" || id === "enum";
                            case 5:
                                return id === "while" || id === "break" || id === "catch" || id === "throw" || id === "const" || id === "yield" || id === "class" || id === "super";
                            case 6:
                                return id === "return" || id === "typeof" || id === "delete" || id === "switch" || id === "export" || id === "import";
                            case 7:
                                return id === "default" || id === "finally" || id === "extends";
                            case 8:
                                return id === "function" || id === "continue" || id === "debugger";
                            case 10:
                                return id === "instanceof";
                            default:
                                return false;
                        }
                    }
                    function isReservedWordES5(id, strict) {
                        return id === "null" || id === "true" || id === "false" || isKeywordES5(id, strict);
                    }
                    function isReservedWordES6(id, strict) {
                        return id === "null" || id === "true" || id === "false" || isKeywordES6(id, strict);
                    }
                    function isRestrictedWord(id) {
                        return id === "eval" || id === "arguments";
                    }
                    function isIdentifierNameES5(id) {
                        var i, iz, ch;
                        if (id.length === 0) {
                            return false;
                        }
                        ch = id.charCodeAt(0);
                        if (!code$1.isIdentifierStartES5(ch)) {
                            return false;
                        }
                        for(i = 1, iz = id.length; i < iz; ++i){
                            ch = id.charCodeAt(i);
                            if (!code$1.isIdentifierPartES5(ch)) {
                                return false;
                            }
                        }
                        return true;
                    }
                    function decodeUtf16(lead, trail) {
                        return (lead - 55296) * 1024 + (trail - 56320) + 65536;
                    }
                    function isIdentifierNameES6(id) {
                        var i, iz, ch, lowCh, check;
                        if (id.length === 0) {
                            return false;
                        }
                        check = code$1.isIdentifierStartES6;
                        for(i = 0, iz = id.length; i < iz; ++i){
                            ch = id.charCodeAt(i);
                            if (55296 <= ch && ch <= 56319) {
                                ++i;
                                if (i >= iz) {
                                    return false;
                                }
                                lowCh = id.charCodeAt(i);
                                if (!(56320 <= lowCh && lowCh <= 57343)) {
                                    return false;
                                }
                                ch = decodeUtf16(ch, lowCh);
                            }
                            if (!check(ch)) {
                                return false;
                            }
                            check = code$1.isIdentifierPartES6;
                        }
                        return true;
                    }
                    function isIdentifierES5(id, strict) {
                        return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);
                    }
                    function isIdentifierES6(id, strict) {
                        return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);
                    }
                    module2.exports = {
                        isKeywordES5,
                        isKeywordES6,
                        isReservedWordES5,
                        isReservedWordES6,
                        isRestrictedWord,
                        isIdentifierNameES5,
                        isIdentifierNameES6,
                        isIdentifierES5,
                        isIdentifierES6
                    };
                })();
            });
            var keyword_1 = keyword.isKeywordES5;
            var keyword_2 = keyword.isKeywordES6;
            var keyword_3 = keyword.isReservedWordES5;
            var keyword_4 = keyword.isReservedWordES6;
            var keyword_5 = keyword.isRestrictedWord;
            var keyword_6 = keyword.isIdentifierNameES5;
            var keyword_7 = keyword.isIdentifierNameES6;
            var keyword_8 = keyword.isIdentifierES5;
            var keyword_9 = keyword.isIdentifierES6;
            var utils$1 = createCommonjsModule(function(module2, exports2) {
                (function() {
                    exports2.ast = ast;
                    exports2.code = code;
                    exports2.keyword = keyword;
                })();
            });
            var utils_1$1 = utils$1.ast;
            var utils_2$1 = utils$1.code;
            var utils_3$1 = utils$1.keyword;
            var matchOperatorsRe$1 = /[|\\{}()[\]^$+*?.]/g;
            var escapeStringRegexp$1 = function escapeStringRegexp2(str) {
                if (typeof str !== "string") {
                    throw new TypeError("Expected a string");
                }
                return str.replace(matchOperatorsRe$1, "\\$&");
            };
            var colorName$2 = {
                "aliceblue": [
                    240,
                    248,
                    255
                ],
                "antiquewhite": [
                    250,
                    235,
                    215
                ],
                "aqua": [
                    0,
                    255,
                    255
                ],
                "aquamarine": [
                    127,
                    255,
                    212
                ],
                "azure": [
                    240,
                    255,
                    255
                ],
                "beige": [
                    245,
                    245,
                    220
                ],
                "bisque": [
                    255,
                    228,
                    196
                ],
                "black": [
                    0,
                    0,
                    0
                ],
                "blanchedalmond": [
                    255,
                    235,
                    205
                ],
                "blue": [
                    0,
                    0,
                    255
                ],
                "blueviolet": [
                    138,
                    43,
                    226
                ],
                "brown": [
                    165,
                    42,
                    42
                ],
                "burlywood": [
                    222,
                    184,
                    135
                ],
                "cadetblue": [
                    95,
                    158,
                    160
                ],
                "chartreuse": [
                    127,
                    255,
                    0
                ],
                "chocolate": [
                    210,
                    105,
                    30
                ],
                "coral": [
                    255,
                    127,
                    80
                ],
                "cornflowerblue": [
                    100,
                    149,
                    237
                ],
                "cornsilk": [
                    255,
                    248,
                    220
                ],
                "crimson": [
                    220,
                    20,
                    60
                ],
                "cyan": [
                    0,
                    255,
                    255
                ],
                "darkblue": [
                    0,
                    0,
                    139
                ],
                "darkcyan": [
                    0,
                    139,
                    139
                ],
                "darkgoldenrod": [
                    184,
                    134,
                    11
                ],
                "darkgray": [
                    169,
                    169,
                    169
                ],
                "darkgreen": [
                    0,
                    100,
                    0
                ],
                "darkgrey": [
                    169,
                    169,
                    169
                ],
                "darkkhaki": [
                    189,
                    183,
                    107
                ],
                "darkmagenta": [
                    139,
                    0,
                    139
                ],
                "darkolivegreen": [
                    85,
                    107,
                    47
                ],
                "darkorange": [
                    255,
                    140,
                    0
                ],
                "darkorchid": [
                    153,
                    50,
                    204
                ],
                "darkred": [
                    139,
                    0,
                    0
                ],
                "darksalmon": [
                    233,
                    150,
                    122
                ],
                "darkseagreen": [
                    143,
                    188,
                    143
                ],
                "darkslateblue": [
                    72,
                    61,
                    139
                ],
                "darkslategray": [
                    47,
                    79,
                    79
                ],
                "darkslategrey": [
                    47,
                    79,
                    79
                ],
                "darkturquoise": [
                    0,
                    206,
                    209
                ],
                "darkviolet": [
                    148,
                    0,
                    211
                ],
                "deeppink": [
                    255,
                    20,
                    147
                ],
                "deepskyblue": [
                    0,
                    191,
                    255
                ],
                "dimgray": [
                    105,
                    105,
                    105
                ],
                "dimgrey": [
                    105,
                    105,
                    105
                ],
                "dodgerblue": [
                    30,
                    144,
                    255
                ],
                "firebrick": [
                    178,
                    34,
                    34
                ],
                "floralwhite": [
                    255,
                    250,
                    240
                ],
                "forestgreen": [
                    34,
                    139,
                    34
                ],
                "fuchsia": [
                    255,
                    0,
                    255
                ],
                "gainsboro": [
                    220,
                    220,
                    220
                ],
                "ghostwhite": [
                    248,
                    248,
                    255
                ],
                "gold": [
                    255,
                    215,
                    0
                ],
                "goldenrod": [
                    218,
                    165,
                    32
                ],
                "gray": [
                    128,
                    128,
                    128
                ],
                "green": [
                    0,
                    128,
                    0
                ],
                "greenyellow": [
                    173,
                    255,
                    47
                ],
                "grey": [
                    128,
                    128,
                    128
                ],
                "honeydew": [
                    240,
                    255,
                    240
                ],
                "hotpink": [
                    255,
                    105,
                    180
                ],
                "indianred": [
                    205,
                    92,
                    92
                ],
                "indigo": [
                    75,
                    0,
                    130
                ],
                "ivory": [
                    255,
                    255,
                    240
                ],
                "khaki": [
                    240,
                    230,
                    140
                ],
                "lavender": [
                    230,
                    230,
                    250
                ],
                "lavenderblush": [
                    255,
                    240,
                    245
                ],
                "lawngreen": [
                    124,
                    252,
                    0
                ],
                "lemonchiffon": [
                    255,
                    250,
                    205
                ],
                "lightblue": [
                    173,
                    216,
                    230
                ],
                "lightcoral": [
                    240,
                    128,
                    128
                ],
                "lightcyan": [
                    224,
                    255,
                    255
                ],
                "lightgoldenrodyellow": [
                    250,
                    250,
                    210
                ],
                "lightgray": [
                    211,
                    211,
                    211
                ],
                "lightgreen": [
                    144,
                    238,
                    144
                ],
                "lightgrey": [
                    211,
                    211,
                    211
                ],
                "lightpink": [
                    255,
                    182,
                    193
                ],
                "lightsalmon": [
                    255,
                    160,
                    122
                ],
                "lightseagreen": [
                    32,
                    178,
                    170
                ],
                "lightskyblue": [
                    135,
                    206,
                    250
                ],
                "lightslategray": [
                    119,
                    136,
                    153
                ],
                "lightslategrey": [
                    119,
                    136,
                    153
                ],
                "lightsteelblue": [
                    176,
                    196,
                    222
                ],
                "lightyellow": [
                    255,
                    255,
                    224
                ],
                "lime": [
                    0,
                    255,
                    0
                ],
                "limegreen": [
                    50,
                    205,
                    50
                ],
                "linen": [
                    250,
                    240,
                    230
                ],
                "magenta": [
                    255,
                    0,
                    255
                ],
                "maroon": [
                    128,
                    0,
                    0
                ],
                "mediumaquamarine": [
                    102,
                    205,
                    170
                ],
                "mediumblue": [
                    0,
                    0,
                    205
                ],
                "mediumorchid": [
                    186,
                    85,
                    211
                ],
                "mediumpurple": [
                    147,
                    112,
                    219
                ],
                "mediumseagreen": [
                    60,
                    179,
                    113
                ],
                "mediumslateblue": [
                    123,
                    104,
                    238
                ],
                "mediumspringgreen": [
                    0,
                    250,
                    154
                ],
                "mediumturquoise": [
                    72,
                    209,
                    204
                ],
                "mediumvioletred": [
                    199,
                    21,
                    133
                ],
                "midnightblue": [
                    25,
                    25,
                    112
                ],
                "mintcream": [
                    245,
                    255,
                    250
                ],
                "mistyrose": [
                    255,
                    228,
                    225
                ],
                "moccasin": [
                    255,
                    228,
                    181
                ],
                "navajowhite": [
                    255,
                    222,
                    173
                ],
                "navy": [
                    0,
                    0,
                    128
                ],
                "oldlace": [
                    253,
                    245,
                    230
                ],
                "olive": [
                    128,
                    128,
                    0
                ],
                "olivedrab": [
                    107,
                    142,
                    35
                ],
                "orange": [
                    255,
                    165,
                    0
                ],
                "orangered": [
                    255,
                    69,
                    0
                ],
                "orchid": [
                    218,
                    112,
                    214
                ],
                "palegoldenrod": [
                    238,
                    232,
                    170
                ],
                "palegreen": [
                    152,
                    251,
                    152
                ],
                "paleturquoise": [
                    175,
                    238,
                    238
                ],
                "palevioletred": [
                    219,
                    112,
                    147
                ],
                "papayawhip": [
                    255,
                    239,
                    213
                ],
                "peachpuff": [
                    255,
                    218,
                    185
                ],
                "peru": [
                    205,
                    133,
                    63
                ],
                "pink": [
                    255,
                    192,
                    203
                ],
                "plum": [
                    221,
                    160,
                    221
                ],
                "powderblue": [
                    176,
                    224,
                    230
                ],
                "purple": [
                    128,
                    0,
                    128
                ],
                "rebeccapurple": [
                    102,
                    51,
                    153
                ],
                "red": [
                    255,
                    0,
                    0
                ],
                "rosybrown": [
                    188,
                    143,
                    143
                ],
                "royalblue": [
                    65,
                    105,
                    225
                ],
                "saddlebrown": [
                    139,
                    69,
                    19
                ],
                "salmon": [
                    250,
                    128,
                    114
                ],
                "sandybrown": [
                    244,
                    164,
                    96
                ],
                "seagreen": [
                    46,
                    139,
                    87
                ],
                "seashell": [
                    255,
                    245,
                    238
                ],
                "sienna": [
                    160,
                    82,
                    45
                ],
                "silver": [
                    192,
                    192,
                    192
                ],
                "skyblue": [
                    135,
                    206,
                    235
                ],
                "slateblue": [
                    106,
                    90,
                    205
                ],
                "slategray": [
                    112,
                    128,
                    144
                ],
                "slategrey": [
                    112,
                    128,
                    144
                ],
                "snow": [
                    255,
                    250,
                    250
                ],
                "springgreen": [
                    0,
                    255,
                    127
                ],
                "steelblue": [
                    70,
                    130,
                    180
                ],
                "tan": [
                    210,
                    180,
                    140
                ],
                "teal": [
                    0,
                    128,
                    128
                ],
                "thistle": [
                    216,
                    191,
                    216
                ],
                "tomato": [
                    255,
                    99,
                    71
                ],
                "turquoise": [
                    64,
                    224,
                    208
                ],
                "violet": [
                    238,
                    130,
                    238
                ],
                "wheat": [
                    245,
                    222,
                    179
                ],
                "white": [
                    255,
                    255,
                    255
                ],
                "whitesmoke": [
                    245,
                    245,
                    245
                ],
                "yellow": [
                    255,
                    255,
                    0
                ],
                "yellowgreen": [
                    154,
                    205,
                    50
                ]
            };
            var conversions$2 = createCommonjsModule(function(module2) {
                var reverseKeywords2 = {};
                for(var key in colorName$2){
                    if (colorName$2.hasOwnProperty(key)) {
                        reverseKeywords2[colorName$2[key]] = key;
                    }
                }
                var convert2 = module2.exports = {
                    rgb: {
                        channels: 3,
                        labels: "rgb"
                    },
                    hsl: {
                        channels: 3,
                        labels: "hsl"
                    },
                    hsv: {
                        channels: 3,
                        labels: "hsv"
                    },
                    hwb: {
                        channels: 3,
                        labels: "hwb"
                    },
                    cmyk: {
                        channels: 4,
                        labels: "cmyk"
                    },
                    xyz: {
                        channels: 3,
                        labels: "xyz"
                    },
                    lab: {
                        channels: 3,
                        labels: "lab"
                    },
                    lch: {
                        channels: 3,
                        labels: "lch"
                    },
                    hex: {
                        channels: 1,
                        labels: [
                            "hex"
                        ]
                    },
                    keyword: {
                        channels: 1,
                        labels: [
                            "keyword"
                        ]
                    },
                    ansi16: {
                        channels: 1,
                        labels: [
                            "ansi16"
                        ]
                    },
                    ansi256: {
                        channels: 1,
                        labels: [
                            "ansi256"
                        ]
                    },
                    hcg: {
                        channels: 3,
                        labels: [
                            "h",
                            "c",
                            "g"
                        ]
                    },
                    apple: {
                        channels: 3,
                        labels: [
                            "r16",
                            "g16",
                            "b16"
                        ]
                    },
                    gray: {
                        channels: 1,
                        labels: [
                            "gray"
                        ]
                    }
                };
                for(var model in convert2){
                    if (convert2.hasOwnProperty(model)) {
                        if (!("channels" in convert2[model])) {
                            throw new Error("missing channels property: " + model);
                        }
                        if (!("labels" in convert2[model])) {
                            throw new Error("missing channel labels property: " + model);
                        }
                        if (convert2[model].labels.length !== convert2[model].channels) {
                            throw new Error("channel and label counts mismatch: " + model);
                        }
                        var channels = convert2[model].channels;
                        var labels = convert2[model].labels;
                        delete convert2[model].channels;
                        delete convert2[model].labels;
                        Object.defineProperty(convert2[model], "channels", {
                            value: channels
                        });
                        Object.defineProperty(convert2[model], "labels", {
                            value: labels
                        });
                    }
                }
                convert2.rgb.hsl = function(rgb) {
                    var r = rgb[0] / 255;
                    var g = rgb[1] / 255;
                    var b = rgb[2] / 255;
                    var min = Math.min(r, g, b);
                    var max = Math.max(r, g, b);
                    var delta = max - min;
                    var h;
                    var s;
                    var l;
                    if (max === min) {
                        h = 0;
                    } else if (r === max) {
                        h = (g - b) / delta;
                    } else if (g === max) {
                        h = 2 + (b - r) / delta;
                    } else if (b === max) {
                        h = 4 + (r - g) / delta;
                    }
                    h = Math.min(h * 60, 360);
                    if (h < 0) {
                        h += 360;
                    }
                    l = (min + max) / 2;
                    if (max === min) {
                        s = 0;
                    } else if (l <= 0.5) {
                        s = delta / (max + min);
                    } else {
                        s = delta / (2 - max - min);
                    }
                    return [
                        h,
                        s * 100,
                        l * 100
                    ];
                };
                convert2.rgb.hsv = function(rgb) {
                    var rdif;
                    var gdif;
                    var bdif;
                    var h;
                    var s;
                    var r = rgb[0] / 255;
                    var g = rgb[1] / 255;
                    var b = rgb[2] / 255;
                    var v = Math.max(r, g, b);
                    var diff2 = v - Math.min(r, g, b);
                    var diffc = function diffc2(c) {
                        return (v - c) / 6 / diff2 + 1 / 2;
                    };
                    if (diff2 === 0) {
                        h = s = 0;
                    } else {
                        s = diff2 / v;
                        rdif = diffc(r);
                        gdif = diffc(g);
                        bdif = diffc(b);
                        if (r === v) {
                            h = bdif - gdif;
                        } else if (g === v) {
                            h = 1 / 3 + rdif - bdif;
                        } else if (b === v) {
                            h = 2 / 3 + gdif - rdif;
                        }
                        if (h < 0) {
                            h += 1;
                        } else if (h > 1) {
                            h -= 1;
                        }
                    }
                    return [
                        h * 360,
                        s * 100,
                        v * 100
                    ];
                };
                convert2.rgb.hwb = function(rgb) {
                    var r = rgb[0];
                    var g = rgb[1];
                    var b = rgb[2];
                    var h = convert2.rgb.hsl(rgb)[0];
                    var w = 1 / 255 * Math.min(r, Math.min(g, b));
                    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
                    return [
                        h,
                        w * 100,
                        b * 100
                    ];
                };
                convert2.rgb.cmyk = function(rgb) {
                    var r = rgb[0] / 255;
                    var g = rgb[1] / 255;
                    var b = rgb[2] / 255;
                    var c;
                    var m;
                    var y;
                    var k;
                    k = Math.min(1 - r, 1 - g, 1 - b);
                    c = (1 - r - k) / (1 - k) || 0;
                    m = (1 - g - k) / (1 - k) || 0;
                    y = (1 - b - k) / (1 - k) || 0;
                    return [
                        c * 100,
                        m * 100,
                        y * 100,
                        k * 100
                    ];
                };
                function comparativeDistance2(x, y) {
                    return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
                }
                convert2.rgb.keyword = function(rgb) {
                    var reversed = reverseKeywords2[rgb];
                    if (reversed) {
                        return reversed;
                    }
                    var currentClosestDistance = Infinity;
                    var currentClosestKeyword;
                    for(var keyword2 in colorName$2){
                        if (colorName$2.hasOwnProperty(keyword2)) {
                            var value1 = colorName$2[keyword2];
                            var distance = comparativeDistance2(rgb, value1);
                            if (distance < currentClosestDistance) {
                                currentClosestDistance = distance;
                                currentClosestKeyword = keyword2;
                            }
                        }
                    }
                    return currentClosestKeyword;
                };
                convert2.keyword.rgb = function(keyword2) {
                    return colorName$2[keyword2];
                };
                convert2.rgb.xyz = function(rgb) {
                    var r = rgb[0] / 255;
                    var g = rgb[1] / 255;
                    var b = rgb[2] / 255;
                    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
                    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
                    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
                    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
                    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
                    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
                    return [
                        x * 100,
                        y * 100,
                        z * 100
                    ];
                };
                convert2.rgb.lab = function(rgb) {
                    var xyz = convert2.rgb.xyz(rgb);
                    var x = xyz[0];
                    var y = xyz[1];
                    var z = xyz[2];
                    var l;
                    var a3;
                    var b;
                    x /= 95.047;
                    y /= 100;
                    z /= 108.883;
                    x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
                    y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
                    z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
                    l = 116 * y - 16;
                    a3 = 500 * (x - y);
                    b = 200 * (y - z);
                    return [
                        l,
                        a3,
                        b
                    ];
                };
                convert2.hsl.rgb = function(hsl) {
                    var h = hsl[0] / 360;
                    var s = hsl[1] / 100;
                    var l = hsl[2] / 100;
                    var t1;
                    var t2;
                    var t3;
                    var rgb;
                    var val;
                    if (s === 0) {
                        val = l * 255;
                        return [
                            val,
                            val,
                            val
                        ];
                    }
                    if (l < 0.5) {
                        t2 = l * (1 + s);
                    } else {
                        t2 = l + s - l * s;
                    }
                    t1 = 2 * l - t2;
                    rgb = [
                        0,
                        0,
                        0
                    ];
                    for(var i = 0; i < 3; i++){
                        t3 = h + 1 / 3 * -(i - 1);
                        if (t3 < 0) {
                            t3++;
                        }
                        if (t3 > 1) {
                            t3--;
                        }
                        if (6 * t3 < 1) {
                            val = t1 + (t2 - t1) * 6 * t3;
                        } else if (2 * t3 < 1) {
                            val = t2;
                        } else if (3 * t3 < 2) {
                            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
                        } else {
                            val = t1;
                        }
                        rgb[i] = val * 255;
                    }
                    return rgb;
                };
                convert2.hsl.hsv = function(hsl) {
                    var h = hsl[0];
                    var s = hsl[1] / 100;
                    var l = hsl[2] / 100;
                    var smin = s;
                    var lmin = Math.max(l, 0.01);
                    var sv;
                    var v;
                    l *= 2;
                    s *= l <= 1 ? l : 2 - l;
                    smin *= lmin <= 1 ? lmin : 2 - lmin;
                    v = (l + s) / 2;
                    sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
                    return [
                        h,
                        sv * 100,
                        v * 100
                    ];
                };
                convert2.hsv.rgb = function(hsv) {
                    var h = hsv[0] / 60;
                    var s = hsv[1] / 100;
                    var v = hsv[2] / 100;
                    var hi = Math.floor(h) % 6;
                    var f2 = h - Math.floor(h);
                    var p2 = 255 * v * (1 - s);
                    var q2 = 255 * v * (1 - s * f2);
                    var t2 = 255 * v * (1 - s * (1 - f2));
                    v *= 255;
                    switch(hi){
                        case 0:
                            return [
                                v,
                                t2,
                                p2
                            ];
                        case 1:
                            return [
                                q2,
                                v,
                                p2
                            ];
                        case 2:
                            return [
                                p2,
                                v,
                                t2
                            ];
                        case 3:
                            return [
                                p2,
                                q2,
                                v
                            ];
                        case 4:
                            return [
                                t2,
                                p2,
                                v
                            ];
                        case 5:
                            return [
                                v,
                                p2,
                                q2
                            ];
                    }
                };
                convert2.hsv.hsl = function(hsv) {
                    var h = hsv[0];
                    var s = hsv[1] / 100;
                    var v = hsv[2] / 100;
                    var vmin = Math.max(v, 0.01);
                    var lmin;
                    var sl;
                    var l;
                    l = (2 - s) * v;
                    lmin = (2 - s) * vmin;
                    sl = s * vmin;
                    sl /= lmin <= 1 ? lmin : 2 - lmin;
                    sl = sl || 0;
                    l /= 2;
                    return [
                        h,
                        sl * 100,
                        l * 100
                    ];
                };
                convert2.hwb.rgb = function(hwb) {
                    var h = hwb[0] / 360;
                    var wh = hwb[1] / 100;
                    var bl = hwb[2] / 100;
                    var ratio = wh + bl;
                    var i;
                    var v;
                    var f2;
                    var n;
                    if (ratio > 1) {
                        wh /= ratio;
                        bl /= ratio;
                    }
                    i = Math.floor(6 * h);
                    v = 1 - bl;
                    f2 = 6 * h - i;
                    if ((i & 1) !== 0) {
                        f2 = 1 - f2;
                    }
                    n = wh + f2 * (v - wh);
                    var r;
                    var g;
                    var b;
                    switch(i){
                        default:
                        case 6:
                        case 0:
                            r = v;
                            g = n;
                            b = wh;
                            break;
                        case 1:
                            r = n;
                            g = v;
                            b = wh;
                            break;
                        case 2:
                            r = wh;
                            g = v;
                            b = n;
                            break;
                        case 3:
                            r = wh;
                            g = n;
                            b = v;
                            break;
                        case 4:
                            r = n;
                            g = wh;
                            b = v;
                            break;
                        case 5:
                            r = v;
                            g = wh;
                            b = n;
                            break;
                    }
                    return [
                        r * 255,
                        g * 255,
                        b * 255
                    ];
                };
                convert2.cmyk.rgb = function(cmyk) {
                    var c = cmyk[0] / 100;
                    var m = cmyk[1] / 100;
                    var y = cmyk[2] / 100;
                    var k = cmyk[3] / 100;
                    var r;
                    var g;
                    var b;
                    r = 1 - Math.min(1, c * (1 - k) + k);
                    g = 1 - Math.min(1, m * (1 - k) + k);
                    b = 1 - Math.min(1, y * (1 - k) + k);
                    return [
                        r * 255,
                        g * 255,
                        b * 255
                    ];
                };
                convert2.xyz.rgb = function(xyz) {
                    var x = xyz[0] / 100;
                    var y = xyz[1] / 100;
                    var z = xyz[2] / 100;
                    var r;
                    var g;
                    var b;
                    r = x * 3.2406 + y * -1.5372 + z * -0.4986;
                    g = x * -0.9689 + y * 1.8758 + z * 0.0415;
                    b = x * 0.0557 + y * -0.204 + z * 1.057;
                    r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
                    g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
                    b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
                    r = Math.min(Math.max(0, r), 1);
                    g = Math.min(Math.max(0, g), 1);
                    b = Math.min(Math.max(0, b), 1);
                    return [
                        r * 255,
                        g * 255,
                        b * 255
                    ];
                };
                convert2.xyz.lab = function(xyz) {
                    var x = xyz[0];
                    var y = xyz[1];
                    var z = xyz[2];
                    var l;
                    var a3;
                    var b;
                    x /= 95.047;
                    y /= 100;
                    z /= 108.883;
                    x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
                    y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
                    z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
                    l = 116 * y - 16;
                    a3 = 500 * (x - y);
                    b = 200 * (y - z);
                    return [
                        l,
                        a3,
                        b
                    ];
                };
                convert2.lab.xyz = function(lab) {
                    var l = lab[0];
                    var a3 = lab[1];
                    var b = lab[2];
                    var x;
                    var y;
                    var z;
                    y = (l + 16) / 116;
                    x = a3 / 500 + y;
                    z = y - b / 200;
                    var y2 = Math.pow(y, 3);
                    var x2 = Math.pow(x, 3);
                    var z2 = Math.pow(z, 3);
                    y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
                    x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
                    z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
                    x *= 95.047;
                    y *= 100;
                    z *= 108.883;
                    return [
                        x,
                        y,
                        z
                    ];
                };
                convert2.lab.lch = function(lab) {
                    var l = lab[0];
                    var a3 = lab[1];
                    var b = lab[2];
                    var hr2;
                    var h;
                    var c;
                    hr2 = Math.atan2(b, a3);
                    h = hr2 * 360 / 2 / Math.PI;
                    if (h < 0) {
                        h += 360;
                    }
                    c = Math.sqrt(a3 * a3 + b * b);
                    return [
                        l,
                        c,
                        h
                    ];
                };
                convert2.lch.lab = function(lch) {
                    var l = lch[0];
                    var c = lch[1];
                    var h = lch[2];
                    var a3;
                    var b;
                    var hr2;
                    hr2 = h / 360 * 2 * Math.PI;
                    a3 = c * Math.cos(hr2);
                    b = c * Math.sin(hr2);
                    return [
                        l,
                        a3,
                        b
                    ];
                };
                convert2.rgb.ansi16 = function(args) {
                    var r = args[0];
                    var g = args[1];
                    var b = args[2];
                    var value1 = 1 in arguments ? arguments[1] : convert2.rgb.hsv(args)[2];
                    value1 = Math.round(value1 / 50);
                    if (value1 === 0) {
                        return 30;
                    }
                    var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
                    if (value1 === 2) {
                        ansi += 60;
                    }
                    return ansi;
                };
                convert2.hsv.ansi16 = function(args) {
                    return convert2.rgb.ansi16(convert2.hsv.rgb(args), args[2]);
                };
                convert2.rgb.ansi256 = function(args) {
                    var r = args[0];
                    var g = args[1];
                    var b = args[2];
                    if (r === g && g === b) {
                        if (r < 8) {
                            return 16;
                        }
                        if (r > 248) {
                            return 231;
                        }
                        return Math.round((r - 8) / 247 * 24) + 232;
                    }
                    var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
                    return ansi;
                };
                convert2.ansi16.rgb = function(args) {
                    var color2 = args % 10;
                    if (color2 === 0 || color2 === 7) {
                        if (args > 50) {
                            color2 += 3.5;
                        }
                        color2 = color2 / 10.5 * 255;
                        return [
                            color2,
                            color2,
                            color2
                        ];
                    }
                    var mult = (~~(args > 50) + 1) * 0.5;
                    var r = (color2 & 1) * mult * 255;
                    var g = (color2 >> 1 & 1) * mult * 255;
                    var b = (color2 >> 2 & 1) * mult * 255;
                    return [
                        r,
                        g,
                        b
                    ];
                };
                convert2.ansi256.rgb = function(args) {
                    if (args >= 232) {
                        var c = (args - 232) * 10 + 8;
                        return [
                            c,
                            c,
                            c
                        ];
                    }
                    args -= 16;
                    var rem;
                    var r = Math.floor(args / 36) / 5 * 255;
                    var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
                    var b = rem % 6 / 5 * 255;
                    return [
                        r,
                        g,
                        b
                    ];
                };
                convert2.rgb.hex = function(args) {
                    var integer3 = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
                    var string3 = integer3.toString(16).toUpperCase();
                    return "000000".substring(string3.length) + string3;
                };
                convert2.hex.rgb = function(args) {
                    var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
                    if (!match) {
                        return [
                            0,
                            0,
                            0
                        ];
                    }
                    var colorString = match[0];
                    if (match[0].length === 3) {
                        colorString = colorString.split("").map(function(char) {
                            return char + char;
                        }).join("");
                    }
                    var integer3 = parseInt(colorString, 16);
                    var r = integer3 >> 16 & 255;
                    var g = integer3 >> 8 & 255;
                    var b = integer3 & 255;
                    return [
                        r,
                        g,
                        b
                    ];
                };
                convert2.rgb.hcg = function(rgb) {
                    var r = rgb[0] / 255;
                    var g = rgb[1] / 255;
                    var b = rgb[2] / 255;
                    var max = Math.max(Math.max(r, g), b);
                    var min = Math.min(Math.min(r, g), b);
                    var chroma = max - min;
                    var grayscale;
                    var hue;
                    if (chroma < 1) {
                        grayscale = min / (1 - chroma);
                    } else {
                        grayscale = 0;
                    }
                    if (chroma <= 0) {
                        hue = 0;
                    } else if (max === r) {
                        hue = (g - b) / chroma % 6;
                    } else if (max === g) {
                        hue = 2 + (b - r) / chroma;
                    } else {
                        hue = 4 + (r - g) / chroma + 4;
                    }
                    hue /= 6;
                    hue %= 1;
                    return [
                        hue * 360,
                        chroma * 100,
                        grayscale * 100
                    ];
                };
                convert2.hsl.hcg = function(hsl) {
                    var s = hsl[1] / 100;
                    var l = hsl[2] / 100;
                    var c = 1;
                    var f2 = 0;
                    if (l < 0.5) {
                        c = 2 * s * l;
                    } else {
                        c = 2 * s * (1 - l);
                    }
                    if (c < 1) {
                        f2 = (l - 0.5 * c) / (1 - c);
                    }
                    return [
                        hsl[0],
                        c * 100,
                        f2 * 100
                    ];
                };
                convert2.hsv.hcg = function(hsv) {
                    var s = hsv[1] / 100;
                    var v = hsv[2] / 100;
                    var c = s * v;
                    var f2 = 0;
                    if (c < 1) {
                        f2 = (v - c) / (1 - c);
                    }
                    return [
                        hsv[0],
                        c * 100,
                        f2 * 100
                    ];
                };
                convert2.hcg.rgb = function(hcg) {
                    var h = hcg[0] / 360;
                    var c = hcg[1] / 100;
                    var g = hcg[2] / 100;
                    if (c === 0) {
                        return [
                            g * 255,
                            g * 255,
                            g * 255
                        ];
                    }
                    var pure = [
                        0,
                        0,
                        0
                    ];
                    var hi = h % 1 * 6;
                    var v = hi % 1;
                    var w = 1 - v;
                    var mg = 0;
                    switch(Math.floor(hi)){
                        case 0:
                            pure[0] = 1;
                            pure[1] = v;
                            pure[2] = 0;
                            break;
                        case 1:
                            pure[0] = w;
                            pure[1] = 1;
                            pure[2] = 0;
                            break;
                        case 2:
                            pure[0] = 0;
                            pure[1] = 1;
                            pure[2] = v;
                            break;
                        case 3:
                            pure[0] = 0;
                            pure[1] = w;
                            pure[2] = 1;
                            break;
                        case 4:
                            pure[0] = v;
                            pure[1] = 0;
                            pure[2] = 1;
                            break;
                        default:
                            pure[0] = 1;
                            pure[1] = 0;
                            pure[2] = w;
                    }
                    mg = (1 - c) * g;
                    return [
                        (c * pure[0] + mg) * 255,
                        (c * pure[1] + mg) * 255,
                        (c * pure[2] + mg) * 255
                    ];
                };
                convert2.hcg.hsv = function(hcg) {
                    var c = hcg[1] / 100;
                    var g = hcg[2] / 100;
                    var v = c + g * (1 - c);
                    var f2 = 0;
                    if (v > 0) {
                        f2 = c / v;
                    }
                    return [
                        hcg[0],
                        f2 * 100,
                        v * 100
                    ];
                };
                convert2.hcg.hsl = function(hcg) {
                    var c = hcg[1] / 100;
                    var g = hcg[2] / 100;
                    var l = g * (1 - c) + 0.5 * c;
                    var s = 0;
                    if (l > 0 && l < 0.5) {
                        s = c / (2 * l);
                    } else if (l >= 0.5 && l < 1) {
                        s = c / (2 * (1 - l));
                    }
                    return [
                        hcg[0],
                        s * 100,
                        l * 100
                    ];
                };
                convert2.hcg.hwb = function(hcg) {
                    var c = hcg[1] / 100;
                    var g = hcg[2] / 100;
                    var v = c + g * (1 - c);
                    return [
                        hcg[0],
                        (v - c) * 100,
                        (1 - v) * 100
                    ];
                };
                convert2.hwb.hcg = function(hwb) {
                    var w = hwb[1] / 100;
                    var b = hwb[2] / 100;
                    var v = 1 - b;
                    var c = v - w;
                    var g = 0;
                    if (c < 1) {
                        g = (v - c) / (1 - c);
                    }
                    return [
                        hwb[0],
                        c * 100,
                        g * 100
                    ];
                };
                convert2.apple.rgb = function(apple) {
                    return [
                        apple[0] / 65535 * 255,
                        apple[1] / 65535 * 255,
                        apple[2] / 65535 * 255
                    ];
                };
                convert2.rgb.apple = function(rgb) {
                    return [
                        rgb[0] / 255 * 65535,
                        rgb[1] / 255 * 65535,
                        rgb[2] / 255 * 65535
                    ];
                };
                convert2.gray.rgb = function(args) {
                    return [
                        args[0] / 100 * 255,
                        args[0] / 100 * 255,
                        args[0] / 100 * 255
                    ];
                };
                convert2.gray.hsl = convert2.gray.hsv = function(args) {
                    return [
                        0,
                        0,
                        args[0]
                    ];
                };
                convert2.gray.hwb = function(gray) {
                    return [
                        0,
                        100,
                        gray[0]
                    ];
                };
                convert2.gray.cmyk = function(gray) {
                    return [
                        0,
                        0,
                        0,
                        gray[0]
                    ];
                };
                convert2.gray.lab = function(gray) {
                    return [
                        gray[0],
                        0,
                        0
                    ];
                };
                convert2.gray.hex = function(gray) {
                    var val = Math.round(gray[0] / 100 * 255) & 255;
                    var integer3 = (val << 16) + (val << 8) + val;
                    var string3 = integer3.toString(16).toUpperCase();
                    return "000000".substring(string3.length) + string3;
                };
                convert2.rgb.gray = function(rgb) {
                    var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
                    return [
                        val / 255 * 100
                    ];
                };
            });
            var conversions_1$1 = conversions$2.rgb;
            var conversions_2$1 = conversions$2.hsl;
            var conversions_3$1 = conversions$2.hsv;
            var conversions_4$1 = conversions$2.hwb;
            var conversions_5$1 = conversions$2.cmyk;
            var conversions_6$1 = conversions$2.xyz;
            var conversions_7$1 = conversions$2.lab;
            var conversions_8$1 = conversions$2.lch;
            var conversions_9$1 = conversions$2.hex;
            var conversions_10$1 = conversions$2.keyword;
            var conversions_11$1 = conversions$2.ansi16;
            var conversions_12$1 = conversions$2.ansi256;
            var conversions_13$1 = conversions$2.hcg;
            var conversions_14$1 = conversions$2.apple;
            var conversions_15$1 = conversions$2.gray;
            function buildGraph$2() {
                var graph = {};
                var models2 = Object.keys(conversions$2);
                for(var len = models2.length, i = 0; i < len; i++){
                    graph[models2[i]] = {
                        // http://jsperf.com/1-vs-infinity
                        // micro-opt, but this is simple.
                        distance: -1,
                        parent: null
                    };
                }
                return graph;
            }
            function deriveBFS$2(fromModel) {
                var graph = buildGraph$2();
                var queue2 = [
                    fromModel
                ];
                graph[fromModel].distance = 0;
                while(queue2.length){
                    var current = queue2.pop();
                    var adjacents = Object.keys(conversions$2[current]);
                    for(var len = adjacents.length, i = 0; i < len; i++){
                        var adjacent = adjacents[i];
                        var node = graph[adjacent];
                        if (node.distance === -1) {
                            node.distance = graph[current].distance + 1;
                            node.parent = current;
                            queue2.unshift(adjacent);
                        }
                    }
                }
                return graph;
            }
            function link$2(from2, to) {
                return function(args) {
                    return to(from2(args));
                };
            }
            function wrapConversion$2(toModel, graph) {
                var path6 = [
                    graph[toModel].parent,
                    toModel
                ];
                var fn = conversions$2[graph[toModel].parent][toModel];
                var cur = graph[toModel].parent;
                while(graph[cur].parent){
                    path6.unshift(graph[cur].parent);
                    fn = link$2(conversions$2[graph[cur].parent][cur], fn);
                    cur = graph[cur].parent;
                }
                fn.conversion = path6;
                return fn;
            }
            var route$2 = function route2(fromModel) {
                var graph = deriveBFS$2(fromModel);
                var conversion = {};
                var models2 = Object.keys(graph);
                for(var len = models2.length, i = 0; i < len; i++){
                    var toModel = models2[i];
                    var node = graph[toModel];
                    if (node.parent === null) {
                        continue;
                    }
                    conversion[toModel] = wrapConversion$2(toModel, graph);
                }
                return conversion;
            };
            var convert$3 = {};
            var models$2 = Object.keys(conversions$2);
            function wrapRaw$2(fn) {
                var wrappedFn = function wrappedFn2(args) {
                    if (args === void 0 || args === null) {
                        return args;
                    }
                    if (arguments.length > 1) {
                        args = Array.prototype.slice.call(arguments);
                    }
                    return fn(args);
                };
                if ("conversion" in fn) {
                    wrappedFn.conversion = fn.conversion;
                }
                return wrappedFn;
            }
            function wrapRounded$2(fn) {
                var wrappedFn = function wrappedFn2(args) {
                    if (args === void 0 || args === null) {
                        return args;
                    }
                    if (arguments.length > 1) {
                        args = Array.prototype.slice.call(arguments);
                    }
                    var result = fn(args);
                    if (typeof result === "object") {
                        for(var len = result.length, i = 0; i < len; i++){
                            result[i] = Math.round(result[i]);
                        }
                    }
                    return result;
                };
                if ("conversion" in fn) {
                    wrappedFn.conversion = fn.conversion;
                }
                return wrappedFn;
            }
            models$2.forEach(function(fromModel) {
                convert$3[fromModel] = {};
                Object.defineProperty(convert$3[fromModel], "channels", {
                    value: conversions$2[fromModel].channels
                });
                Object.defineProperty(convert$3[fromModel], "labels", {
                    value: conversions$2[fromModel].labels
                });
                var routes = route$2(fromModel);
                var routeModels = Object.keys(routes);
                routeModels.forEach(function(toModel) {
                    var fn = routes[toModel];
                    convert$3[fromModel][toModel] = wrapRounded$2(fn);
                    convert$3[fromModel][toModel].raw = wrapRaw$2(fn);
                });
            });
            var colorConvert$2 = convert$3;
            var ansiStyles$2 = createCommonjsModule(function(module2) {
                const wrapAnsi16 = (fn, offset)=>function() {
                        const code2 = fn.apply(colorConvert$2, arguments);
                        return "\x1B[".concat(code2 + offset, "m");
                    };
                const wrapAnsi256 = (fn, offset)=>function() {
                        const code2 = fn.apply(colorConvert$2, arguments);
                        return "\x1B[".concat(38 + offset, ";5;").concat(code2, "m");
                    };
                const wrapAnsi16m = (fn, offset)=>function() {
                        const rgb = fn.apply(colorConvert$2, arguments);
                        return "\x1B[".concat(38 + offset, ";2;").concat(rgb[0], ";").concat(rgb[1], ";").concat(rgb[2], "m");
                    };
                function assembleStyles() {
                    const codes = /* @__PURE__ */ new Map();
                    const styles2 = {
                        modifier: {
                            reset: [
                                0,
                                0
                            ],
                            // 21 isn't widely supported and 22 does the same thing
                            bold: [
                                1,
                                22
                            ],
                            dim: [
                                2,
                                22
                            ],
                            italic: [
                                3,
                                23
                            ],
                            underline: [
                                4,
                                24
                            ],
                            inverse: [
                                7,
                                27
                            ],
                            hidden: [
                                8,
                                28
                            ],
                            strikethrough: [
                                9,
                                29
                            ]
                        },
                        color: {
                            black: [
                                30,
                                39
                            ],
                            red: [
                                31,
                                39
                            ],
                            green: [
                                32,
                                39
                            ],
                            yellow: [
                                33,
                                39
                            ],
                            blue: [
                                34,
                                39
                            ],
                            magenta: [
                                35,
                                39
                            ],
                            cyan: [
                                36,
                                39
                            ],
                            white: [
                                37,
                                39
                            ],
                            gray: [
                                90,
                                39
                            ],
                            // Bright color
                            redBright: [
                                91,
                                39
                            ],
                            greenBright: [
                                92,
                                39
                            ],
                            yellowBright: [
                                93,
                                39
                            ],
                            blueBright: [
                                94,
                                39
                            ],
                            magentaBright: [
                                95,
                                39
                            ],
                            cyanBright: [
                                96,
                                39
                            ],
                            whiteBright: [
                                97,
                                39
                            ]
                        },
                        bgColor: {
                            bgBlack: [
                                40,
                                49
                            ],
                            bgRed: [
                                41,
                                49
                            ],
                            bgGreen: [
                                42,
                                49
                            ],
                            bgYellow: [
                                43,
                                49
                            ],
                            bgBlue: [
                                44,
                                49
                            ],
                            bgMagenta: [
                                45,
                                49
                            ],
                            bgCyan: [
                                46,
                                49
                            ],
                            bgWhite: [
                                47,
                                49
                            ],
                            // Bright color
                            bgBlackBright: [
                                100,
                                49
                            ],
                            bgRedBright: [
                                101,
                                49
                            ],
                            bgGreenBright: [
                                102,
                                49
                            ],
                            bgYellowBright: [
                                103,
                                49
                            ],
                            bgBlueBright: [
                                104,
                                49
                            ],
                            bgMagentaBright: [
                                105,
                                49
                            ],
                            bgCyanBright: [
                                106,
                                49
                            ],
                            bgWhiteBright: [
                                107,
                                49
                            ]
                        }
                    };
                    styles2.color.grey = styles2.color.gray;
                    for (const groupName of Object.keys(styles2)){
                        const group2 = styles2[groupName];
                        for (const styleName of Object.keys(group2)){
                            const style2 = group2[styleName];
                            styles2[styleName] = {
                                open: "\x1B[".concat(style2[0], "m"),
                                close: "\x1B[".concat(style2[1], "m")
                            };
                            group2[styleName] = styles2[styleName];
                            codes.set(style2[0], style2[1]);
                        }
                        Object.defineProperty(styles2, groupName, {
                            value: group2,
                            enumerable: false
                        });
                        Object.defineProperty(styles2, "codes", {
                            value: codes,
                            enumerable: false
                        });
                    }
                    const ansi2ansi = (n)=>n;
                    const rgb2rgb = (r, g, b)=>[
                            r,
                            g,
                            b
                        ];
                    styles2.color.close = "\x1B[39m";
                    styles2.bgColor.close = "\x1B[49m";
                    styles2.color.ansi = {
                        ansi: wrapAnsi16(ansi2ansi, 0)
                    };
                    styles2.color.ansi256 = {
                        ansi256: wrapAnsi256(ansi2ansi, 0)
                    };
                    styles2.color.ansi16m = {
                        rgb: wrapAnsi16m(rgb2rgb, 0)
                    };
                    styles2.bgColor.ansi = {
                        ansi: wrapAnsi16(ansi2ansi, 10)
                    };
                    styles2.bgColor.ansi256 = {
                        ansi256: wrapAnsi256(ansi2ansi, 10)
                    };
                    styles2.bgColor.ansi16m = {
                        rgb: wrapAnsi16m(rgb2rgb, 10)
                    };
                    for (let key of Object.keys(colorConvert$2)){
                        if (typeof colorConvert$2[key] !== "object") {
                            continue;
                        }
                        const suite = colorConvert$2[key];
                        if (key === "ansi16") {
                            key = "ansi";
                        }
                        if ("ansi16" in suite) {
                            styles2.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
                            styles2.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
                        }
                        if ("ansi256" in suite) {
                            styles2.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
                            styles2.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
                        }
                        if ("rgb" in suite) {
                            styles2.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
                            styles2.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
                        }
                    }
                    return styles2;
                }
                Object.defineProperty(module2, "exports", {
                    enumerable: true,
                    get: assembleStyles
                });
            });
            const env$3 = process2.env;
            let forceColor$2;
            if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false")) {
                forceColor$2 = false;
            } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
                forceColor$2 = true;
            }
            if ("FORCE_COLOR" in env$3) {
                forceColor$2 = env$3.FORCE_COLOR.length === 0 || parseInt(env$3.FORCE_COLOR, 10) !== 0;
            }
            function translateLevel$2(level) {
                if (level === 0) {
                    return false;
                }
                return {
                    level,
                    hasBasic: true,
                    has256: level >= 2,
                    has16m: level >= 3
                };
            }
            function supportsColor$2(stream) {
                if (forceColor$2 === false) {
                    return 0;
                }
                if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
                    return 3;
                }
                if (hasFlag("color=256")) {
                    return 2;
                }
                if (stream && !stream.isTTY && forceColor$2 !== true) {
                    return 0;
                }
                const min = forceColor$2 ? 1 : 0;
                if (process2.platform === "win32") {
                    const osRelease = require$$0$1.release().split(".");
                    if (Number(process2.versions.node.split(".")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
                        return Number(osRelease[2]) >= 14931 ? 3 : 2;
                    }
                    return 1;
                }
                if ("CI" in env$3) {
                    if ([
                        "TRAVIS",
                        "CIRCLECI",
                        "APPVEYOR",
                        "GITLAB_CI"
                    ].some((sign)=>sign in env$3) || env$3.CI_NAME === "codeship") {
                        return 1;
                    }
                    return min;
                }
                if ("TEAMCITY_VERSION" in env$3) {
                    return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env$3.TEAMCITY_VERSION) ? 1 : 0;
                }
                if (env$3.COLORTERM === "truecolor") {
                    return 3;
                }
                if ("TERM_PROGRAM" in env$3) {
                    const version2 = parseInt((env$3.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
                    switch(env$3.TERM_PROGRAM){
                        case "iTerm.app":
                            return version2 >= 3 ? 3 : 2;
                        case "Apple_Terminal":
                            return 2;
                    }
                }
                if (/-256(color)?$/i.test(env$3.TERM)) {
                    return 2;
                }
                if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env$3.TERM)) {
                    return 1;
                }
                if ("COLORTERM" in env$3) {
                    return 1;
                }
                if (env$3.TERM === "dumb") {
                    return min;
                }
                return min;
            }
            function getSupportLevel$2(stream) {
                const level = supportsColor$2(stream);
                return translateLevel$2(level);
            }
            var supportsColor_1$2 = {
                supportsColor: getSupportLevel$2,
                stdout: getSupportLevel$2(process2.stdout),
                stderr: getSupportLevel$2(process2.stderr)
            };
            const TEMPLATE_REGEX$2 = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
            const STYLE_REGEX$2 = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
            const STRING_REGEX$2 = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
            const ESCAPE_REGEX$2 = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
            const ESCAPES$2 = /* @__PURE__ */ new Map([
                [
                    "n",
                    "\n"
                ],
                [
                    "r",
                    "\r"
                ],
                [
                    "t",
                    "	"
                ],
                [
                    "b",
                    "\b"
                ],
                [
                    "f",
                    "\f"
                ],
                [
                    "v",
                    "\v"
                ],
                [
                    "0",
                    "\0"
                ],
                [
                    "\\",
                    "\\"
                ],
                [
                    "e",
                    "\x1B"
                ],
                [
                    "a",
                    "\x07"
                ]
            ]);
            function unescape$2(c) {
                if (c[0] === "u" && c.length === 5 || c[0] === "x" && c.length === 3) {
                    return String.fromCharCode(parseInt(c.slice(1), 16));
                }
                return ESCAPES$2.get(c) || c;
            }
            function parseArguments$2(name2, args) {
                const results = [];
                const chunks = args.trim().split(/\s*,\s*/g);
                let matches;
                for (const chunk of chunks){
                    if (!isNaN(chunk)) {
                        results.push(Number(chunk));
                    } else if (matches = chunk.match(STRING_REGEX$2)) {
                        results.push(matches[2].replace(ESCAPE_REGEX$2, (m, escape, chr)=>escape ? unescape$2(escape) : chr));
                    } else {
                        throw new Error("Invalid Chalk template style argument: ".concat(chunk, " (in style '").concat(name2, "')"));
                    }
                }
                return results;
            }
            function parseStyle$2(style2) {
                STYLE_REGEX$2.lastIndex = 0;
                const results = [];
                let matches;
                while((matches = STYLE_REGEX$2.exec(style2)) !== null){
                    const name2 = matches[1];
                    if (matches[2]) {
                        const args = parseArguments$2(name2, matches[2]);
                        results.push([
                            name2
                        ].concat(args));
                    } else {
                        results.push([
                            name2
                        ]);
                    }
                }
                return results;
            }
            function buildStyle$2(chalk2, styles2) {
                const enabled = {};
                for (const layer of styles2){
                    for (const style2 of layer.styles){
                        enabled[style2[0]] = layer.inverse ? null : style2.slice(1);
                    }
                }
                let current = chalk2;
                for (const styleName of Object.keys(enabled)){
                    if (Array.isArray(enabled[styleName])) {
                        if (!(styleName in current)) {
                            throw new Error("Unknown Chalk style: ".concat(styleName));
                        }
                        if (enabled[styleName].length > 0) {
                            current = current[styleName].apply(current, enabled[styleName]);
                        } else {
                            current = current[styleName];
                        }
                    }
                }
                return current;
            }
            var templates$2 = (chalk2, tmp)=>{
                const styles2 = [];
                const chunks = [];
                let chunk = [];
                tmp.replace(TEMPLATE_REGEX$2, (m, escapeChar, inverse, style2, close, chr)=>{
                    if (escapeChar) {
                        chunk.push(unescape$2(escapeChar));
                    } else if (style2) {
                        const str = chunk.join("");
                        chunk = [];
                        chunks.push(styles2.length === 0 ? str : buildStyle$2(chalk2, styles2)(str));
                        styles2.push({
                            inverse,
                            styles: parseStyle$2(style2)
                        });
                    } else if (close) {
                        if (styles2.length === 0) {
                            throw new Error("Found extraneous } in Chalk template literal");
                        }
                        chunks.push(buildStyle$2(chalk2, styles2)(chunk.join("")));
                        chunk = [];
                        styles2.pop();
                    } else {
                        chunk.push(chr);
                    }
                });
                chunks.push(chunk.join(""));
                if (styles2.length > 0) {
                    const errMsg = "Chalk template literal is missing ".concat(styles2.length, " closing bracket").concat(styles2.length === 1 ? "" : "s", " (`}`)");
                    throw new Error(errMsg);
                }
                return chunks.join("");
            };
            var chalk$2 = createCommonjsModule(function(module2) {
                const stdoutColor2 = supportsColor_1$2.stdout;
                const isSimpleWindowsTerm = process2.platform === "win32" && !(process2.env.TERM || "").toLowerCase().startsWith("xterm");
                const levelMapping2 = [
                    "ansi",
                    "ansi",
                    "ansi256",
                    "ansi16m"
                ];
                const skipModels = /* @__PURE__ */ new Set([
                    "gray"
                ]);
                const styles2 = /* @__PURE__ */ Object.create(null);
                function applyOptions2(obj, options2) {
                    options2 = options2 || {};
                    const scLevel = stdoutColor2 ? stdoutColor2.level : 0;
                    obj.level = options2.level === void 0 ? scLevel : options2.level;
                    obj.enabled = "enabled" in options2 ? options2.enabled : obj.level > 0;
                }
                function Chalk2(options2) {
                    if (!this || !(this instanceof Chalk2) || this.template) {
                        const chalk2 = {};
                        applyOptions2(chalk2, options2);
                        chalk2.template = function() {
                            const args = [].slice.call(arguments);
                            return chalkTag2.apply(null, [
                                chalk2.template
                            ].concat(args));
                        };
                        Object.setPrototypeOf(chalk2, Chalk2.prototype);
                        Object.setPrototypeOf(chalk2.template, chalk2);
                        chalk2.template.constructor = Chalk2;
                        return chalk2.template;
                    }
                    applyOptions2(this, options2);
                }
                if (isSimpleWindowsTerm) {
                    ansiStyles$2.blue.open = "\x1B[94m";
                }
                for (const key of Object.keys(ansiStyles$2)){
                    ansiStyles$2[key].closeRe = new RegExp(escapeStringRegexp$1(ansiStyles$2[key].close), "g");
                    styles2[key] = {
                        get () {
                            const codes = ansiStyles$2[key];
                            return build2.call(this, this._styles ? this._styles.concat(codes) : [
                                codes
                            ], this._empty, key);
                        }
                    };
                }
                styles2.visible = {
                    get () {
                        return build2.call(this, this._styles || [], true, "visible");
                    }
                };
                ansiStyles$2.color.closeRe = new RegExp(escapeStringRegexp$1(ansiStyles$2.color.close), "g");
                for (const model of Object.keys(ansiStyles$2.color.ansi)){
                    if (skipModels.has(model)) {
                        continue;
                    }
                    styles2[model] = {
                        get () {
                            const level = this.level;
                            return function() {
                                const open = ansiStyles$2.color[levelMapping2[level]][model].apply(null, arguments);
                                const codes = {
                                    open,
                                    close: ansiStyles$2.color.close,
                                    closeRe: ansiStyles$2.color.closeRe
                                };
                                return build2.call(this, this._styles ? this._styles.concat(codes) : [
                                    codes
                                ], this._empty, model);
                            };
                        }
                    };
                }
                ansiStyles$2.bgColor.closeRe = new RegExp(escapeStringRegexp$1(ansiStyles$2.bgColor.close), "g");
                for (const model of Object.keys(ansiStyles$2.bgColor.ansi)){
                    if (skipModels.has(model)) {
                        continue;
                    }
                    const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
                    styles2[bgModel] = {
                        get () {
                            const level = this.level;
                            return function() {
                                const open = ansiStyles$2.bgColor[levelMapping2[level]][model].apply(null, arguments);
                                const codes = {
                                    open,
                                    close: ansiStyles$2.bgColor.close,
                                    closeRe: ansiStyles$2.bgColor.closeRe
                                };
                                return build2.call(this, this._styles ? this._styles.concat(codes) : [
                                    codes
                                ], this._empty, model);
                            };
                        }
                    };
                }
                const proto2 = Object.defineProperties(()=>{}, styles2);
                function build2(_styles, _empty, key) {
                    const builder = function builder2() {
                        return applyStyle2.apply(builder2, arguments);
                    };
                    builder._styles = _styles;
                    builder._empty = _empty;
                    const self2 = this;
                    Object.defineProperty(builder, "level", {
                        enumerable: true,
                        get () {
                            return self2.level;
                        },
                        set (level) {
                            self2.level = level;
                        }
                    });
                    Object.defineProperty(builder, "enabled", {
                        enumerable: true,
                        get () {
                            return self2.enabled;
                        },
                        set (enabled) {
                            self2.enabled = enabled;
                        }
                    });
                    builder.hasGrey = this.hasGrey || key === "gray" || key === "grey";
                    builder.__proto__ = proto2;
                    return builder;
                }
                function applyStyle2() {
                    const args = arguments;
                    const argsLen = args.length;
                    let str = String(arguments[0]);
                    if (argsLen === 0) {
                        return "";
                    }
                    if (argsLen > 1) {
                        for(let a3 = 1; a3 < argsLen; a3++){
                            str += " " + args[a3];
                        }
                    }
                    if (!this.enabled || this.level <= 0 || !str) {
                        return this._empty ? "" : str;
                    }
                    const originalDim = ansiStyles$2.dim.open;
                    if (isSimpleWindowsTerm && this.hasGrey) {
                        ansiStyles$2.dim.open = "";
                    }
                    for (const code2 of this._styles.slice().reverse()){
                        str = code2.open + str.replace(code2.closeRe, code2.open) + code2.close;
                        str = str.replace(/\r?\n/g, "".concat(code2.close, "$&").concat(code2.open));
                    }
                    ansiStyles$2.dim.open = originalDim;
                    return str;
                }
                function chalkTag2(chalk2, strings) {
                    if (!Array.isArray(strings)) {
                        return [].slice.call(arguments, 1).join(" ");
                    }
                    const args = [].slice.call(arguments, 2);
                    const parts = [
                        strings.raw[0]
                    ];
                    for(let i = 1; i < strings.length; i++){
                        parts.push(String(args[i - 1]).replace(/[{}\\]/g, "\\$&"));
                        parts.push(String(strings.raw[i]));
                    }
                    return templates$2(chalk2, parts.join(""));
                }
                Object.defineProperties(Chalk2.prototype, styles2);
                module2.exports = Chalk2();
                module2.exports.supportsColor = stdoutColor2;
                module2.exports.default = module2.exports;
            });
            var chalk_1$1 = chalk$2.supportsColor;
            var lib$1 = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                exports2.shouldHighlight = shouldHighlight;
                exports2.getChalk = getChalk;
                exports2.default = highlight;
                var _jsTokens = _interopRequireWildcard(jsTokens);
                var _esutils = _interopRequireDefault(utils$1);
                var _chalk = _interopRequireDefault(chalk$2);
                function _interopRequireDefault(obj) {
                    return obj && obj.__esModule ? obj : {
                        default: obj
                    };
                }
                function _getRequireWildcardCache() {
                    if (typeof WeakMap !== "function") return null;
                    var cache = /* @__PURE__ */ new WeakMap();
                    _getRequireWildcardCache = function _getRequireWildcardCache2() {
                        return cache;
                    };
                    return cache;
                }
                function _interopRequireWildcard(obj) {
                    if (obj && obj.__esModule) {
                        return obj;
                    }
                    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                        return {
                            default: obj
                        };
                    }
                    var cache = _getRequireWildcardCache();
                    if (cache && cache.has(obj)) {
                        return cache.get(obj);
                    }
                    var newObj = {};
                    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var key in obj){
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                            if (desc && (desc.get || desc.set)) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                    newObj.default = obj;
                    if (cache) {
                        cache.set(obj, newObj);
                    }
                    return newObj;
                }
                function getDefs(chalk2) {
                    return {
                        keyword: chalk2.cyan,
                        capitalized: chalk2.yellow,
                        jsx_tag: chalk2.yellow,
                        punctuator: chalk2.yellow,
                        number: chalk2.magenta,
                        string: chalk2.green,
                        regex: chalk2.magenta,
                        comment: chalk2.grey,
                        invalid: chalk2.white.bgRed.bold
                    };
                }
                const NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
                const JSX_TAG = /^[a-z][\w-]*$/i;
                const BRACKET = /^[()[\]{}]$/;
                function getTokenType(match) {
                    const [offset, text] = match.slice(-2);
                    const token = (0, _jsTokens.matchToToken)(match);
                    if (token.type === "name") {
                        if (_esutils.default.keyword.isReservedWordES6(token.value)) {
                            return "keyword";
                        }
                        if (JSX_TAG.test(token.value) && (text[offset - 1] === "<" || text.substr(offset - 2, 2) == "</")) {
                            return "jsx_tag";
                        }
                        if (token.value[0] !== token.value[0].toLowerCase()) {
                            return "capitalized";
                        }
                    }
                    if (token.type === "punctuator" && BRACKET.test(token.value)) {
                        return "bracket";
                    }
                    if (token.type === "invalid" && (token.value === "@" || token.value === "#")) {
                        return "punctuator";
                    }
                    return token.type;
                }
                function highlightTokens(defs, text) {
                    return text.replace(_jsTokens.default, function(...args) {
                        const type2 = getTokenType(args);
                        const colorize = defs[type2];
                        if (colorize) {
                            return args[0].split(NEWLINE).map((str)=>colorize(str)).join("\n");
                        } else {
                            return args[0];
                        }
                    });
                }
                function shouldHighlight(options2) {
                    return _chalk.default.supportsColor || options2.forceColor;
                }
                function getChalk(options2) {
                    let chalk2 = _chalk.default;
                    if (options2.forceColor) {
                        chalk2 = new _chalk.default.constructor({
                            enabled: true,
                            level: 1
                        });
                    }
                    return chalk2;
                }
                function highlight(code2, options2 = {}) {
                    if (shouldHighlight(options2)) {
                        const chalk2 = getChalk(options2);
                        const defs = getDefs(chalk2);
                        return highlightTokens(defs, code2);
                    } else {
                        return code2;
                    }
                }
            });
            unwrapExports(lib$1);
            var lib_1 = lib$1.shouldHighlight;
            var lib_2 = lib$1.getChalk;
            var lib$2 = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                exports2.codeFrameColumns = codeFrameColumns;
                exports2.default = _default;
                var _highlight = _interopRequireWildcard(lib$1);
                function _getRequireWildcardCache() {
                    if (typeof WeakMap !== "function") return null;
                    var cache = /* @__PURE__ */ new WeakMap();
                    _getRequireWildcardCache = function _getRequireWildcardCache2() {
                        return cache;
                    };
                    return cache;
                }
                function _interopRequireWildcard(obj) {
                    if (obj && obj.__esModule) {
                        return obj;
                    }
                    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
                        return {
                            default: obj
                        };
                    }
                    var cache = _getRequireWildcardCache();
                    if (cache && cache.has(obj)) {
                        return cache.get(obj);
                    }
                    var newObj = {};
                    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var key in obj){
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                            if (desc && (desc.get || desc.set)) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                    newObj.default = obj;
                    if (cache) {
                        cache.set(obj, newObj);
                    }
                    return newObj;
                }
                let deprecationWarningShown = false;
                function getDefs(chalk2) {
                    return {
                        gutter: chalk2.grey,
                        marker: chalk2.red.bold,
                        message: chalk2.red.bold
                    };
                }
                const NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
                function getMarkerLines(loc2, source2, opts) {
                    const startLoc = Object.assign({
                        column: 0,
                        line: -1
                    }, loc2.start);
                    const endLoc = Object.assign({}, startLoc, {}, loc2.end);
                    const { linesAbove =2 , linesBelow =3  } = opts || {};
                    const startLine = startLoc.line;
                    const startColumn = startLoc.column;
                    const endLine = endLoc.line;
                    const endColumn = endLoc.column;
                    let start = Math.max(startLine - (linesAbove + 1), 0);
                    let end = Math.min(source2.length, endLine + linesBelow);
                    if (startLine === -1) {
                        start = 0;
                    }
                    if (endLine === -1) {
                        end = source2.length;
                    }
                    const lineDiff2 = endLine - startLine;
                    const markerLines = {};
                    if (lineDiff2) {
                        for(let i = 0; i <= lineDiff2; i++){
                            const lineNumber = i + startLine;
                            if (!startColumn) {
                                markerLines[lineNumber] = true;
                            } else if (i === 0) {
                                const sourceLength = source2[lineNumber - 1].length;
                                markerLines[lineNumber] = [
                                    startColumn,
                                    sourceLength - startColumn + 1
                                ];
                            } else if (i === lineDiff2) {
                                markerLines[lineNumber] = [
                                    0,
                                    endColumn
                                ];
                            } else {
                                const sourceLength = source2[lineNumber - i].length;
                                markerLines[lineNumber] = [
                                    0,
                                    sourceLength
                                ];
                            }
                        }
                    } else {
                        if (startColumn === endColumn) {
                            if (startColumn) {
                                markerLines[startLine] = [
                                    startColumn,
                                    0
                                ];
                            } else {
                                markerLines[startLine] = true;
                            }
                        } else {
                            markerLines[startLine] = [
                                startColumn,
                                endColumn - startColumn
                            ];
                        }
                    }
                    return {
                        start,
                        end,
                        markerLines
                    };
                }
                function codeFrameColumns(rawLines, loc2, opts = {}) {
                    const highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts);
                    const chalk2 = (0, _highlight.getChalk)(opts);
                    const defs = getDefs(chalk2);
                    const maybeHighlight = (chalkFn, string3)=>{
                        return highlighted ? chalkFn(string3) : string3;
                    };
                    const lines = rawLines.split(NEWLINE);
                    const { start , end , markerLines  } = getMarkerLines(loc2, lines, opts);
                    const hasColumns = loc2.start && typeof loc2.start.column === "number";
                    const numberMaxWidth = String(end).length;
                    const highlightedLines = highlighted ? (0, _highlight.default)(rawLines, opts) : rawLines;
                    let frame2 = highlightedLines.split(NEWLINE).slice(start, end).map((line2, index2)=>{
                        const number2 = start + 1 + index2;
                        const paddedNumber = " ".concat(number2).slice(-numberMaxWidth);
                        const gutter = " ".concat(paddedNumber, " | ");
                        const hasMarker = markerLines[number2];
                        const lastMarkerLine = !markerLines[number2 + 1];
                        if (hasMarker) {
                            let markerLine = "";
                            if (Array.isArray(hasMarker)) {
                                const markerSpacing = line2.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\t]/g, " ");
                                const numberOfMarkers = hasMarker[1] || 1;
                                markerLine = [
                                    "\n ",
                                    maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")),
                                    markerSpacing,
                                    maybeHighlight(defs.marker, "^").repeat(numberOfMarkers)
                                ].join("");
                                if (lastMarkerLine && opts.message) {
                                    markerLine += " " + maybeHighlight(defs.message, opts.message);
                                }
                            }
                            return [
                                maybeHighlight(defs.marker, ">"),
                                maybeHighlight(defs.gutter, gutter),
                                line2,
                                markerLine
                            ].join("");
                        } else {
                            return " ".concat(maybeHighlight(defs.gutter, gutter)).concat(line2);
                        }
                    }).join("\n");
                    if (opts.message && !hasColumns) {
                        frame2 = "".concat(" ".repeat(numberMaxWidth + 1)).concat(opts.message, "\n").concat(frame2);
                    }
                    if (highlighted) {
                        return chalk2.reset(frame2);
                    } else {
                        return frame2;
                    }
                }
                function _default(rawLines, lineNumber, colNumber, opts = {}) {
                    if (!deprecationWarningShown) {
                        deprecationWarningShown = true;
                        const message = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
                        if (process2.emitWarning) {
                            process2.emitWarning(message, "DeprecationWarning");
                        } else {
                            const deprecationError = new Error(message);
                            deprecationError.name = "DeprecationWarning";
                            console.warn(new Error(message));
                        }
                    }
                    colNumber = Math.max(colNumber, 0);
                    const location = {
                        start: {
                            column: colNumber,
                            line: lineNumber
                        }
                    };
                    return codeFrameColumns(rawLines, location, opts);
                }
            });
            unwrapExports(lib$2);
            var lib_1$1 = lib$2.codeFrameColumns;
            const { ConfigError: ConfigError$1  } = errors;
            const { locStart: locStart$1 , locEnd: locEnd$1  } = loc;
            const ownNames = Object.getOwnPropertyNames;
            const ownDescriptor = Object.getOwnPropertyDescriptor;
            function getParsers(options2) {
                const parsers = {};
                for (const plugin of options2.plugins){
                    if (!plugin.parsers) {
                        continue;
                    }
                    for (const name2 of ownNames(plugin.parsers)){
                        Object.defineProperty(parsers, name2, ownDescriptor(plugin.parsers, name2));
                    }
                }
                return parsers;
            }
            function resolveParser(opts, parsers) {
                parsers = parsers || getParsers(opts);
                if (typeof opts.parser === "function") {
                    return {
                        parse: opts.parser,
                        astFormat: "estree",
                        locStart: locStart$1,
                        locEnd: locEnd$1
                    };
                }
                if (typeof opts.parser === "string") {
                    if (Object.prototype.hasOwnProperty.call(parsers, opts.parser)) {
                        return parsers[opts.parser];
                    }
                    {
                        throw new ConfigError$1(`Couldn't resolve parser "`.concat(opts.parser, '". Parsers must be explicitly added to the standalone bundle.'));
                    }
                }
            }
            function parse7(text, opts) {
                const parsers = getParsers(opts);
                const parsersForCustomParserApi = Object.keys(parsers).reduce((object2, parserName)=>Object.defineProperty(object2, parserName, {
                        enumerable: true,
                        get () {
                            return parsers[parserName].parse;
                        }
                    }), {});
                const parser3 = resolveParser(opts, parsers);
                try {
                    if (parser3.preprocess) {
                        text = parser3.preprocess(text, opts);
                    }
                    return {
                        text,
                        ast: parser3.parse(text, parsersForCustomParserApi, opts)
                    };
                } catch (error) {
                    const { loc: loc2  } = error;
                    if (loc2) {
                        const codeFrame = lib$2;
                        error.codeFrame = codeFrame.codeFrameColumns(text, loc2, {
                            highlightCode: true
                        });
                        error.message += "\n" + error.codeFrame;
                        throw error;
                    }
                    throw error.stack;
                }
            }
            var parser2 = {
                parse: parse7,
                resolveParser
            };
            const { UndefinedParserError: UndefinedParserError$1  } = errors;
            const { getSupportInfo: getSupportInfo$1  } = support;
            const { resolveParser: resolveParser$1  } = parser2;
            const hiddenDefaults = {
                astFormat: "estree",
                printer: {},
                originalText: void 0,
                locStart: null,
                locEnd: null
            };
            function normalize$1(options2, opts) {
                opts = opts || {};
                const rawOptions = Object.assign({}, options2);
                const supportOptions = getSupportInfo$1({
                    plugins: options2.plugins,
                    showUnreleased: true,
                    showDeprecated: true
                }).options;
                const defaults2 = Object.assign({}, hiddenDefaults, {}, fromPairs_1(supportOptions.filter((optionInfo)=>optionInfo.default !== void 0).map((option2)=>[
                        option2.name,
                        option2.default
                    ])));
                if (!rawOptions.parser) {
                    if (!rawOptions.filepath) {
                        const logger = opts.logger || console;
                        logger.warn("No parser and no filepath given, using 'babel' the parser now but this will throw an error in the future. Please specify a parser or a filepath so one can be inferred.");
                        rawOptions.parser = "babel";
                    } else {
                        rawOptions.parser = inferParser(rawOptions.filepath, rawOptions.plugins);
                        if (!rawOptions.parser) {
                            throw new UndefinedParserError$1("No parser could be inferred for file: ".concat(rawOptions.filepath));
                        }
                    }
                }
                const parser3 = resolveParser$1(optionsNormalizer.normalizeApiOptions(rawOptions, [
                    supportOptions.find((x)=>x.name === "parser")
                ], {
                    passThrough: true,
                    logger: false
                }));
                rawOptions.astFormat = parser3.astFormat;
                rawOptions.locEnd = parser3.locEnd;
                rawOptions.locStart = parser3.locStart;
                const plugin = getPlugin(rawOptions);
                rawOptions.printer = plugin.printers[rawOptions.astFormat];
                const pluginDefaults = supportOptions.filter((optionInfo)=>optionInfo.pluginDefaults && optionInfo.pluginDefaults[plugin.name] !== void 0).reduce((reduced, optionInfo)=>Object.assign(reduced, {
                        [optionInfo.name]: optionInfo.pluginDefaults[plugin.name]
                    }), {});
                const mixedDefaults = Object.assign({}, defaults2, {}, pluginDefaults);
                Object.keys(mixedDefaults).forEach((k)=>{
                    if (rawOptions[k] == null) {
                        rawOptions[k] = mixedDefaults[k];
                    }
                });
                if (rawOptions.parser === "json") {
                    rawOptions.trailingComma = "none";
                }
                return optionsNormalizer.normalizeApiOptions(rawOptions, supportOptions, Object.assign({
                    passThrough: Object.keys(hiddenDefaults)
                }, opts));
            }
            function getPlugin(options2) {
                const { astFormat  } = options2;
                if (!astFormat) {
                    throw new Error("getPlugin() requires astFormat to be set");
                }
                const printerPlugin = options2.plugins.find((plugin)=>plugin.printers && plugin.printers[astFormat]);
                if (!printerPlugin) {
                    throw new Error(`Couldn't find plugin for AST format "`.concat(astFormat, '"'));
                }
                return printerPlugin;
            }
            function getInterpreter(filepath) {
                if (typeof filepath !== "string") {
                    return "";
                }
                let fd;
                try {
                    fd = fs.openSync(filepath, "r");
                } catch (err) {
                    return "";
                }
                try {
                    const liner = new readlines(fd);
                    const firstLine = liner.next().toString("utf8");
                    const m1 = firstLine.match(/^#!\/(?:usr\/)?bin\/env\s+(\S+)/);
                    if (m1) {
                        return m1[1];
                    }
                    const m2 = firstLine.match(/^#!\/(?:usr\/(?:local\/)?)?bin\/(\S+)/);
                    if (m2) {
                        return m2[1];
                    }
                    return "";
                } catch (err) {
                    return "";
                } finally{
                    try {
                        fs.closeSync(fd);
                    } catch (err) {}
                }
            }
            function inferParser(filepath, plugins) {
                const filename = path5.basename(filepath).toLowerCase();
                const languages2 = getSupportInfo$1({
                    plugins
                }).languages.filter((language2)=>language2.since !== null);
                let language = languages2.find((language2)=>language2.extensions && language2.extensions.some((extension)=>filename.endsWith(extension)) || language2.filenames && language2.filenames.find((name2)=>name2.toLowerCase() === filename));
                if (!language && !filename.includes(".")) {
                    const interpreter = getInterpreter(filepath);
                    language = languages2.find((language2)=>language2.interpreters && language2.interpreters.includes(interpreter));
                }
                return language && language.parsers[0];
            }
            var options$1 = {
                normalize: normalize$1,
                hiddenDefaults,
                inferParser
            };
            function massageAST(ast2, options2, parent) {
                if (Array.isArray(ast2)) {
                    return ast2.map((e)=>massageAST(e, options2, parent)).filter(Boolean);
                }
                if (!ast2 || typeof ast2 !== "object") {
                    return ast2;
                }
                const newObj = {};
                for (const key of Object.keys(ast2)){
                    if (typeof ast2[key] !== "function") {
                        newObj[key] = massageAST(ast2[key], options2, ast2);
                    }
                }
                if (options2.printer.massageAstNode) {
                    const result = options2.printer.massageAstNode(ast2, newObj, parent);
                    if (result === null) {
                        return void 0;
                    }
                    if (result) {
                        return result;
                    }
                }
                return newObj;
            }
            var massageAst = massageAST;
            function assert() {}
            assert.ok = function() {};
            assert.strictEqual = function() {};
            function concat(parts) {
                return {
                    type: "concat",
                    parts
                };
            }
            function indent(contents) {
                return {
                    type: "indent",
                    contents
                };
            }
            function align(n, contents) {
                return {
                    type: "align",
                    contents,
                    n
                };
            }
            function group(contents, opts) {
                opts = opts || {};
                return {
                    type: "group",
                    id: opts.id,
                    contents,
                    break: !!opts.shouldBreak,
                    expandedStates: opts.expandedStates
                };
            }
            function dedentToRoot(contents) {
                return align(-Infinity, contents);
            }
            function markAsRoot(contents) {
                return align({
                    type: "root"
                }, contents);
            }
            function dedent(contents) {
                return align(-1, contents);
            }
            function conditionalGroup(states, opts) {
                return group(states[0], Object.assign({}, opts, {
                    expandedStates: states
                }));
            }
            function fill(parts) {
                return {
                    type: "fill",
                    parts
                };
            }
            function ifBreak(breakContents, flatContents, opts) {
                opts = opts || {};
                return {
                    type: "if-break",
                    breakContents,
                    flatContents,
                    groupId: opts.groupId
                };
            }
            function lineSuffix(contents) {
                return {
                    type: "line-suffix",
                    contents
                };
            }
            const lineSuffixBoundary = {
                type: "line-suffix-boundary"
            };
            const breakParent = {
                type: "break-parent"
            };
            const trim = {
                type: "trim"
            };
            const line = {
                type: "line"
            };
            const softline = {
                type: "line",
                soft: true
            };
            const hardline = concat([
                {
                    type: "line",
                    hard: true
                },
                breakParent
            ]);
            const literalline = concat([
                {
                    type: "line",
                    hard: true,
                    literal: true
                },
                breakParent
            ]);
            const cursor = {
                type: "cursor",
                placeholder: Symbol("cursor")
            };
            function join(sep2, arr2) {
                const res = [];
                for(let i = 0; i < arr2.length; i++){
                    if (i !== 0) {
                        res.push(sep2);
                    }
                    res.push(arr2[i]);
                }
                return concat(res);
            }
            function addAlignmentToDoc(doc2, size, tabWidth) {
                let aligned = doc2;
                if (size > 0) {
                    for(let i = 0; i < Math.floor(size / tabWidth); ++i){
                        aligned = indent(aligned);
                    }
                    aligned = align(size % tabWidth, aligned);
                    aligned = align(-Infinity, aligned);
                }
                return aligned;
            }
            var docBuilders = {
                concat,
                join,
                line,
                softline,
                hardline,
                literalline,
                group,
                conditionalGroup,
                fill,
                lineSuffix,
                lineSuffixBoundary,
                cursor,
                breakParent,
                ifBreak,
                trim,
                indent,
                align,
                addAlignmentToDoc,
                markAsRoot,
                dedentToRoot,
                dedent
            };
            var ansiRegex = ({ onlyFirst =false  } = {})=>{
                const pattern = [
                    "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
                    "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
                ].join("|");
                return new RegExp(pattern, onlyFirst ? void 0 : "g");
            };
            var stripAnsi = (string3)=>typeof string3 === "string" ? string3.replace(ansiRegex(), "") : string3;
            const isFullwidthCodePoint = (codePoint)=>{
                if (Number.isNaN(codePoint)) {
                    return false;
                }
                if (codePoint >= 4352 && (codePoint <= 4447 || // Hangul Jamo
                codePoint === 9001 || // LEFT-POINTING ANGLE BRACKET
                codePoint === 9002 || // RIGHT-POINTING ANGLE BRACKET
                // CJK Radicals Supplement .. Enclosed CJK Letters and Months
                11904 <= codePoint && codePoint <= 12871 && codePoint !== 12351 || // Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A
                12880 <= codePoint && codePoint <= 19903 || // CJK Unified Ideographs .. Yi Radicals
                19968 <= codePoint && codePoint <= 42182 || // Hangul Jamo Extended-A
                43360 <= codePoint && codePoint <= 43388 || // Hangul Syllables
                44032 <= codePoint && codePoint <= 55203 || // CJK Compatibility Ideographs
                63744 <= codePoint && codePoint <= 64255 || // Vertical Forms
                65040 <= codePoint && codePoint <= 65049 || // CJK Compatibility Forms .. Small Form Variants
                65072 <= codePoint && codePoint <= 65131 || // Halfwidth and Fullwidth Forms
                65281 <= codePoint && codePoint <= 65376 || 65504 <= codePoint && codePoint <= 65510 || // Kana Supplement
                110592 <= codePoint && codePoint <= 110593 || // Enclosed Ideographic Supplement
                127488 <= codePoint && codePoint <= 127569 || // CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane
                131072 <= codePoint && codePoint <= 262141)) {
                    return true;
                }
                return false;
            };
            var isFullwidthCodePoint_1 = isFullwidthCodePoint;
            var default_1$1 = isFullwidthCodePoint;
            isFullwidthCodePoint_1.default = default_1$1;
            var emojiRegex = function emojiRegex2() {
                return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F|\uD83D\uDC68(?:\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68\uD83C\uDFFB|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|[\u2695\u2696\u2708]\uFE0F|\uD83D[\uDC66\uDC67]|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708])\uFE0F|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C[\uDFFB-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)\uD83C\uDFFB|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB\uDFFC])|\uD83D\uDC69(?:\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB-\uDFFD])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620)\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF6\uD83C\uDDE6|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDBB\uDDD2-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5\uDEEB\uDEEC\uDEF4-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
            };
            const stringWidth = (string3)=>{
                string3 = string3.replace(emojiRegex(), "  ");
                if (typeof string3 !== "string" || string3.length === 0) {
                    return 0;
                }
                string3 = stripAnsi(string3);
                let width = 0;
                for(let i = 0; i < string3.length; i++){
                    const code2 = string3.codePointAt(i);
                    if (code2 <= 31 || code2 >= 127 && code2 <= 159) {
                        continue;
                    }
                    if (code2 >= 768 && code2 <= 879) {
                        continue;
                    }
                    if (code2 > 65535) {
                        i++;
                    }
                    width += isFullwidthCodePoint_1(code2) ? 2 : 1;
                }
                return width;
            };
            var stringWidth_1 = stringWidth;
            var default_1$2 = stringWidth;
            stringWidth_1.default = default_1$2;
            const matchOperatorsRegex = /[|\\{}()[\]^$+*?.-]/g;
            var escapeStringRegexp$2 = (string3)=>{
                if (typeof string3 !== "string") {
                    throw new TypeError("Expected a string");
                }
                return string3.replace(matchOperatorsRegex, "\\$&");
            };
            const notAsciiRegex = /[^\x20-\x7F]/;
            function getPenultimate(arr2) {
                if (arr2.length > 1) {
                    return arr2[arr2.length - 2];
                }
                return null;
            }
            function skip(chars) {
                return (text, index2, opts)=>{
                    const backwards = opts && opts.backwards;
                    if (index2 === false) {
                        return false;
                    }
                    const { length  } = text;
                    let cursor2 = index2;
                    while(cursor2 >= 0 && cursor2 < length){
                        const c = text.charAt(cursor2);
                        if (chars instanceof RegExp) {
                            if (!chars.test(c)) {
                                return cursor2;
                            }
                        } else if (!chars.includes(c)) {
                            return cursor2;
                        }
                        backwards ? cursor2-- : cursor2++;
                    }
                    if (cursor2 === -1 || cursor2 === length) {
                        return cursor2;
                    }
                    return false;
                };
            }
            const skipWhitespace = skip(/\s/);
            const skipSpaces = skip(" 	");
            const skipToLineEnd = skip(",; 	");
            const skipEverythingButNewLine = skip(/[^\r\n]/);
            function skipInlineComment(text, index2) {
                if (index2 === false) {
                    return false;
                }
                if (text.charAt(index2) === "/" && text.charAt(index2 + 1) === "*") {
                    for(let i = index2 + 2; i < text.length; ++i){
                        if (text.charAt(i) === "*" && text.charAt(i + 1) === "/") {
                            return i + 2;
                        }
                    }
                }
                return index2;
            }
            function skipTrailingComment(text, index2) {
                if (index2 === false) {
                    return false;
                }
                if (text.charAt(index2) === "/" && text.charAt(index2 + 1) === "/") {
                    return skipEverythingButNewLine(text, index2);
                }
                return index2;
            }
            function skipNewline(text, index2, opts) {
                const backwards = opts && opts.backwards;
                if (index2 === false) {
                    return false;
                }
                const atIndex = text.charAt(index2);
                if (backwards) {
                    if (text.charAt(index2 - 1) === "\r" && atIndex === "\n") {
                        return index2 - 2;
                    }
                    if (atIndex === "\n" || atIndex === "\r" || atIndex === "\u2028" || atIndex === "\u2029") {
                        return index2 - 1;
                    }
                } else {
                    if (atIndex === "\r" && text.charAt(index2 + 1) === "\n") {
                        return index2 + 2;
                    }
                    if (atIndex === "\n" || atIndex === "\r" || atIndex === "\u2028" || atIndex === "\u2029") {
                        return index2 + 1;
                    }
                }
                return index2;
            }
            function hasNewline(text, index2, opts) {
                opts = opts || {};
                const idx = skipSpaces(text, opts.backwards ? index2 - 1 : index2, opts);
                const idx2 = skipNewline(text, idx, opts);
                return idx !== idx2;
            }
            function hasNewlineInRange(text, start, end) {
                for(let i = start; i < end; ++i){
                    if (text.charAt(i) === "\n") {
                        return true;
                    }
                }
                return false;
            }
            function isPreviousLineEmpty(text, node, locStart2) {
                let idx = locStart2(node) - 1;
                idx = skipSpaces(text, idx, {
                    backwards: true
                });
                idx = skipNewline(text, idx, {
                    backwards: true
                });
                idx = skipSpaces(text, idx, {
                    backwards: true
                });
                const idx2 = skipNewline(text, idx, {
                    backwards: true
                });
                return idx !== idx2;
            }
            function isNextLineEmptyAfterIndex(text, index2) {
                let oldIdx = null;
                let idx = index2;
                while(idx !== oldIdx){
                    oldIdx = idx;
                    idx = skipToLineEnd(text, idx);
                    idx = skipInlineComment(text, idx);
                    idx = skipSpaces(text, idx);
                }
                idx = skipTrailingComment(text, idx);
                idx = skipNewline(text, idx);
                return idx !== false && hasNewline(text, idx);
            }
            function isNextLineEmpty(text, node, locEnd2) {
                return isNextLineEmptyAfterIndex(text, locEnd2(node));
            }
            function getNextNonSpaceNonCommentCharacterIndexWithStartIndex(text, idx) {
                let oldIdx = null;
                let nextIdx = idx;
                while(nextIdx !== oldIdx){
                    oldIdx = nextIdx;
                    nextIdx = skipSpaces(text, nextIdx);
                    nextIdx = skipInlineComment(text, nextIdx);
                    nextIdx = skipTrailingComment(text, nextIdx);
                    nextIdx = skipNewline(text, nextIdx);
                }
                return nextIdx;
            }
            function getNextNonSpaceNonCommentCharacterIndex(text, node, locEnd2) {
                return getNextNonSpaceNonCommentCharacterIndexWithStartIndex(text, locEnd2(node));
            }
            function getNextNonSpaceNonCommentCharacter(text, node, locEnd2) {
                return text.charAt(// @ts-ignore => TBD: can return false, should we define a fallback?
                getNextNonSpaceNonCommentCharacterIndex(text, node, locEnd2));
            }
            function hasSpaces(text, index2, opts) {
                opts = opts || {};
                const idx = skipSpaces(text, opts.backwards ? index2 - 1 : index2, opts);
                return idx !== index2;
            }
            function setLocStart(node, index2) {
                if (node.range) {
                    node.range[0] = index2;
                } else {
                    node.start = index2;
                }
            }
            function setLocEnd(node, index2) {
                if (node.range) {
                    node.range[1] = index2;
                } else {
                    node.end = index2;
                }
            }
            const PRECEDENCE = {};
            [
                [
                    "|>"
                ],
                [
                    "??"
                ],
                [
                    "||"
                ],
                [
                    "&&"
                ],
                [
                    "|"
                ],
                [
                    "^"
                ],
                [
                    "&"
                ],
                [
                    "==",
                    "===",
                    "!=",
                    "!=="
                ],
                [
                    "<",
                    ">",
                    "<=",
                    ">=",
                    "in",
                    "instanceof"
                ],
                [
                    ">>",
                    "<<",
                    ">>>"
                ],
                [
                    "+",
                    "-"
                ],
                [
                    "*",
                    "/",
                    "%"
                ],
                [
                    "**"
                ]
            ].forEach((tier, i)=>{
                tier.forEach((op)=>{
                    PRECEDENCE[op] = i;
                });
            });
            function getPrecedence(op) {
                return PRECEDENCE[op];
            }
            const equalityOperators = {
                "==": true,
                "!=": true,
                "===": true,
                "!==": true
            };
            const multiplicativeOperators = {
                "*": true,
                "/": true,
                "%": true
            };
            const bitshiftOperators = {
                ">>": true,
                ">>>": true,
                "<<": true
            };
            function shouldFlatten(parentOp, nodeOp) {
                if (getPrecedence(nodeOp) !== getPrecedence(parentOp)) {
                    return false;
                }
                if (parentOp === "**") {
                    return false;
                }
                if (equalityOperators[parentOp] && equalityOperators[nodeOp]) {
                    return false;
                }
                if (nodeOp === "%" && multiplicativeOperators[parentOp] || parentOp === "%" && multiplicativeOperators[nodeOp]) {
                    return false;
                }
                if (nodeOp !== parentOp && multiplicativeOperators[nodeOp] && multiplicativeOperators[parentOp]) {
                    return false;
                }
                if (bitshiftOperators[parentOp] && bitshiftOperators[nodeOp]) {
                    return false;
                }
                return true;
            }
            function isBitwiseOperator(operator) {
                return !!bitshiftOperators[operator] || operator === "|" || operator === "^" || operator === "&";
            }
            function startsWithNoLookaheadToken(node, forbidFunctionClassAndDoExpr) {
                node = getLeftMost(node);
                switch(node.type){
                    case "FunctionExpression":
                    case "ClassExpression":
                    case "DoExpression":
                        return forbidFunctionClassAndDoExpr;
                    case "ObjectExpression":
                        return true;
                    case "MemberExpression":
                    case "OptionalMemberExpression":
                        return startsWithNoLookaheadToken(node.object, forbidFunctionClassAndDoExpr);
                    case "TaggedTemplateExpression":
                        if (node.tag.type === "FunctionExpression") {
                            return false;
                        }
                        return startsWithNoLookaheadToken(node.tag, forbidFunctionClassAndDoExpr);
                    case "CallExpression":
                    case "OptionalCallExpression":
                        if (node.callee.type === "FunctionExpression") {
                            return false;
                        }
                        return startsWithNoLookaheadToken(node.callee, forbidFunctionClassAndDoExpr);
                    case "ConditionalExpression":
                        return startsWithNoLookaheadToken(node.test, forbidFunctionClassAndDoExpr);
                    case "UpdateExpression":
                        return !node.prefix && startsWithNoLookaheadToken(node.argument, forbidFunctionClassAndDoExpr);
                    case "BindExpression":
                        return node.object && startsWithNoLookaheadToken(node.object, forbidFunctionClassAndDoExpr);
                    case "SequenceExpression":
                        return startsWithNoLookaheadToken(node.expressions[0], forbidFunctionClassAndDoExpr);
                    case "TSAsExpression":
                        return startsWithNoLookaheadToken(node.expression, forbidFunctionClassAndDoExpr);
                    default:
                        return false;
                }
            }
            function getLeftMost(node) {
                if (node.left) {
                    return getLeftMost(node.left);
                }
                return node;
            }
            function getAlignmentSize(value1, tabWidth, startIndex) {
                startIndex = startIndex || 0;
                let size = 0;
                for(let i = startIndex; i < value1.length; ++i){
                    if (value1[i] === "	") {
                        size = size + tabWidth - size % tabWidth;
                    } else {
                        size++;
                    }
                }
                return size;
            }
            function getIndentSize(value1, tabWidth) {
                const lastNewlineIndex = value1.lastIndexOf("\n");
                if (lastNewlineIndex === -1) {
                    return 0;
                }
                return getAlignmentSize(// All the leading whitespaces
                value1.slice(lastNewlineIndex + 1).match(/^[ \t]*/)[0], tabWidth);
            }
            function getPreferredQuote(raw, preferredQuote) {
                const rawContent = raw.slice(1, -1);
                const double = {
                    quote: '"',
                    regex: /"/g
                };
                const single = {
                    quote: "'",
                    regex: /'/g
                };
                const preferred = preferredQuote === "'" ? single : double;
                const alternate = preferred === single ? double : single;
                let result = preferred.quote;
                if (rawContent.includes(preferred.quote) || rawContent.includes(alternate.quote)) {
                    const numPreferredQuotes = (rawContent.match(preferred.regex) || []).length;
                    const numAlternateQuotes = (rawContent.match(alternate.regex) || []).length;
                    result = numPreferredQuotes > numAlternateQuotes ? alternate.quote : preferred.quote;
                }
                return result;
            }
            function printString(raw, options2, isDirectiveLiteral) {
                const rawContent = raw.slice(1, -1);
                const canChangeDirectiveQuotes = !rawContent.includes('"') && !rawContent.includes("'");
                const enclosingQuote = options2.parser === "json" ? '"' : options2.__isInHtmlAttribute ? "'" : getPreferredQuote(raw, options2.singleQuote ? "'" : '"');
                if (isDirectiveLiteral) {
                    if (canChangeDirectiveQuotes) {
                        return enclosingQuote + rawContent + enclosingQuote;
                    }
                    return raw;
                }
                return makeString(rawContent, enclosingQuote, !(options2.parser === "css" || options2.parser === "less" || options2.parser === "scss" || options2.embeddedInHtml));
            }
            function makeString(rawContent, enclosingQuote, unescapeUnnecessaryEscapes) {
                const otherQuote = enclosingQuote === '"' ? "'" : '"';
                const regex = /\\([\s\S])|(['"])/g;
                const newContent = rawContent.replace(regex, (match, escaped, quote)=>{
                    if (escaped === otherQuote) {
                        return escaped;
                    }
                    if (quote === enclosingQuote) {
                        return "\\" + quote;
                    }
                    if (quote) {
                        return quote;
                    }
                    return unescapeUnnecessaryEscapes && /^[^\\nrvtbfux\r\n\u2028\u2029"'0-7]$/.test(escaped) ? escaped : "\\" + escaped;
                });
                return enclosingQuote + newContent + enclosingQuote;
            }
            function printNumber(rawNumber) {
                return rawNumber.toLowerCase().replace(/^([+-]?[\d.]+e)(?:\+|(-))?0*(\d)/, "$1$2$3").replace(/^([+-]?[\d.]+)e[+-]?0+$/, "$1").replace(/^([+-])?\./, "$10.").replace(/(\.\d+?)0+(?=e|$)/, "$1").replace(/\.(?=e|$)/, "");
            }
            function getMaxContinuousCount(str, target) {
                const results = str.match(new RegExp("(".concat(escapeStringRegexp$2(target), ")+"), "g"));
                if (results === null) {
                    return 0;
                }
                return results.reduce((maxCount, result)=>Math.max(maxCount, result.length / target.length), 0);
            }
            function getMinNotPresentContinuousCount(str, target) {
                const matches = str.match(new RegExp("(".concat(escapeStringRegexp$2(target), ")+"), "g"));
                if (matches === null) {
                    return 0;
                }
                const countPresent = /* @__PURE__ */ new Map();
                let max = 0;
                for (const match of matches){
                    const count = match.length / target.length;
                    countPresent.set(count, true);
                    if (count > max) {
                        max = count;
                    }
                }
                for(let i = 1; i < max; i++){
                    if (!countPresent.get(i)) {
                        return i;
                    }
                }
                return max + 1;
            }
            function getStringWidth(text) {
                if (!text) {
                    return 0;
                }
                if (!notAsciiRegex.test(text)) {
                    return text.length;
                }
                return stringWidth_1(text);
            }
            function hasIgnoreComment(path6) {
                const node = path6.getValue();
                return hasNodeIgnoreComment(node);
            }
            function hasNodeIgnoreComment(node) {
                return node && (node.comments && node.comments.length > 0 && node.comments.some((comment)=>isNodeIgnoreComment(comment) && !comment.unignore) || node.prettierIgnore);
            }
            function isNodeIgnoreComment(comment) {
                return comment.value.trim() === "prettier-ignore";
            }
            function addCommentHelper(node, comment) {
                const comments2 = node.comments || (node.comments = []);
                comments2.push(comment);
                comment.printed = false;
                if (node.type === "JSXText") {
                    comment.printed = true;
                }
            }
            function addLeadingComment(node, comment) {
                comment.leading = true;
                comment.trailing = false;
                addCommentHelper(node, comment);
            }
            function addDanglingComment(node, comment) {
                comment.leading = false;
                comment.trailing = false;
                addCommentHelper(node, comment);
            }
            function addTrailingComment(node, comment) {
                comment.leading = false;
                comment.trailing = true;
                addCommentHelper(node, comment);
            }
            function isWithinParentArrayProperty(path6, propertyName) {
                const node = path6.getValue();
                const parent = path6.getParentNode();
                if (parent == null) {
                    return false;
                }
                if (!Array.isArray(parent[propertyName])) {
                    return false;
                }
                const key = path6.getName();
                return parent[propertyName][key] === node;
            }
            function replaceEndOfLineWith(text, replacement) {
                const parts = [];
                for (const part of text.split("\n")){
                    if (parts.length !== 0) {
                        parts.push(replacement);
                    }
                    parts.push(part);
                }
                return parts;
            }
            var util$1 = {
                replaceEndOfLineWith,
                getStringWidth,
                getMaxContinuousCount,
                getMinNotPresentContinuousCount,
                getPrecedence,
                shouldFlatten,
                isBitwiseOperator,
                getPenultimate,
                getLast,
                getNextNonSpaceNonCommentCharacterIndexWithStartIndex,
                getNextNonSpaceNonCommentCharacterIndex,
                getNextNonSpaceNonCommentCharacter,
                skip,
                skipWhitespace,
                skipSpaces,
                skipToLineEnd,
                skipEverythingButNewLine,
                skipInlineComment,
                skipTrailingComment,
                skipNewline,
                isNextLineEmptyAfterIndex,
                isNextLineEmpty,
                isPreviousLineEmpty,
                hasNewline,
                hasNewlineInRange,
                hasSpaces,
                setLocStart,
                setLocEnd,
                startsWithNoLookaheadToken,
                getAlignmentSize,
                getIndentSize,
                getPreferredQuote,
                printString,
                printNumber,
                hasIgnoreComment,
                hasNodeIgnoreComment,
                isNodeIgnoreComment,
                makeString,
                addLeadingComment,
                addDanglingComment,
                addTrailingComment,
                isWithinParentArrayProperty
            };
            function guessEndOfLine(text) {
                const index2 = text.indexOf("\r");
                if (index2 >= 0) {
                    return text.charAt(index2 + 1) === "\n" ? "crlf" : "cr";
                }
                return "lf";
            }
            function convertEndOfLineToChars(value1) {
                switch(value1){
                    case "cr":
                        return "\r";
                    case "crlf":
                        return "\r\n";
                    default:
                        return "\n";
                }
            }
            var endOfLine = {
                guessEndOfLine,
                convertEndOfLineToChars
            };
            const { getStringWidth: getStringWidth$1  } = util$1;
            const { convertEndOfLineToChars: convertEndOfLineToChars$1  } = endOfLine;
            const { concat: concat$1 , fill: fill$1 , cursor: cursor$1  } = docBuilders;
            let groupModeMap;
            const MODE_BREAK = 1;
            const MODE_FLAT = 2;
            function rootIndent() {
                return {
                    value: "",
                    length: 0,
                    queue: []
                };
            }
            function makeIndent(ind, options2) {
                return generateInd(ind, {
                    type: "indent"
                }, options2);
            }
            function makeAlign(ind, n, options2) {
                return n === -Infinity ? ind.root || rootIndent() : n < 0 ? generateInd(ind, {
                    type: "dedent"
                }, options2) : !n ? ind : n.type === "root" ? Object.assign({}, ind, {
                    root: ind
                }) : typeof n === "string" ? generateInd(ind, {
                    type: "stringAlign",
                    n
                }, options2) : generateInd(ind, {
                    type: "numberAlign",
                    n
                }, options2);
            }
            function generateInd(ind, newPart, options2) {
                const queue2 = newPart.type === "dedent" ? ind.queue.slice(0, -1) : ind.queue.concat(newPart);
                let value1 = "";
                let length = 0;
                let lastTabs = 0;
                let lastSpaces = 0;
                for (const part of queue2){
                    switch(part.type){
                        case "indent":
                            flush();
                            if (options2.useTabs) {
                                addTabs(1);
                            } else {
                                addSpaces(options2.tabWidth);
                            }
                            break;
                        case "stringAlign":
                            flush();
                            value1 += part.n;
                            length += part.n.length;
                            break;
                        case "numberAlign":
                            lastTabs += 1;
                            lastSpaces += part.n;
                            break;
                        default:
                            throw new Error("Unexpected type '".concat(part.type, "'"));
                    }
                }
                flushSpaces();
                return Object.assign({}, ind, {
                    value: value1,
                    length,
                    queue: queue2
                });
                function addTabs(count) {
                    value1 += "	".repeat(count);
                    length += options2.tabWidth * count;
                }
                function addSpaces(count) {
                    value1 += " ".repeat(count);
                    length += count;
                }
                function flush() {
                    if (options2.useTabs) {
                        flushTabs();
                    } else {
                        flushSpaces();
                    }
                }
                function flushTabs() {
                    if (lastTabs > 0) {
                        addTabs(lastTabs);
                    }
                    resetLast();
                }
                function flushSpaces() {
                    if (lastSpaces > 0) {
                        addSpaces(lastSpaces);
                    }
                    resetLast();
                }
                function resetLast() {
                    lastTabs = 0;
                    lastSpaces = 0;
                }
            }
            function trim$1(out) {
                if (out.length === 0) {
                    return 0;
                }
                let trimCount = 0;
                while(out.length > 0 && typeof out[out.length - 1] === "string" && out[out.length - 1].match(/^[ \t]*$/)){
                    trimCount += out.pop().length;
                }
                if (out.length && typeof out[out.length - 1] === "string") {
                    const trimmed = out[out.length - 1].replace(/[ \t]*$/, "");
                    trimCount += out[out.length - 1].length - trimmed.length;
                    out[out.length - 1] = trimmed;
                }
                return trimCount;
            }
            function fits(next, restCommands, width, options2, mustBeFlat) {
                let restIdx = restCommands.length;
                const cmds = [
                    next
                ];
                const out = [];
                while(width >= 0){
                    if (cmds.length === 0) {
                        if (restIdx === 0) {
                            return true;
                        }
                        cmds.push(restCommands[restIdx - 1]);
                        restIdx--;
                        continue;
                    }
                    const [ind, mode, doc2] = cmds.pop();
                    if (typeof doc2 === "string") {
                        out.push(doc2);
                        width -= getStringWidth$1(doc2);
                    } else {
                        switch(doc2.type){
                            case "concat":
                                for(let i = doc2.parts.length - 1; i >= 0; i--){
                                    cmds.push([
                                        ind,
                                        mode,
                                        doc2.parts[i]
                                    ]);
                                }
                                break;
                            case "indent":
                                cmds.push([
                                    makeIndent(ind, options2),
                                    mode,
                                    doc2.contents
                                ]);
                                break;
                            case "align":
                                cmds.push([
                                    makeAlign(ind, doc2.n, options2),
                                    mode,
                                    doc2.contents
                                ]);
                                break;
                            case "trim":
                                width += trim$1(out);
                                break;
                            case "group":
                                if (mustBeFlat && doc2.break) {
                                    return false;
                                }
                                cmds.push([
                                    ind,
                                    doc2.break ? MODE_BREAK : mode,
                                    doc2.contents
                                ]);
                                if (doc2.id) {
                                    groupModeMap[doc2.id] = cmds[cmds.length - 1][1];
                                }
                                break;
                            case "fill":
                                for(let i = doc2.parts.length - 1; i >= 0; i--){
                                    cmds.push([
                                        ind,
                                        mode,
                                        doc2.parts[i]
                                    ]);
                                }
                                break;
                            case "if-break":
                                {
                                    const groupMode = doc2.groupId ? groupModeMap[doc2.groupId] : mode;
                                    if (groupMode === MODE_BREAK) {
                                        if (doc2.breakContents) {
                                            cmds.push([
                                                ind,
                                                mode,
                                                doc2.breakContents
                                            ]);
                                        }
                                    }
                                    if (groupMode === MODE_FLAT) {
                                        if (doc2.flatContents) {
                                            cmds.push([
                                                ind,
                                                mode,
                                                doc2.flatContents
                                            ]);
                                        }
                                    }
                                    break;
                                }
                            case "line":
                                switch(mode){
                                    case MODE_FLAT:
                                        if (!doc2.hard) {
                                            if (!doc2.soft) {
                                                out.push(" ");
                                                width -= 1;
                                            }
                                            break;
                                        }
                                        return true;
                                    case MODE_BREAK:
                                        return true;
                                }
                                break;
                        }
                    }
                }
                return false;
            }
            function printDocToString(doc2, options2) {
                groupModeMap = {};
                const width = options2.printWidth;
                const newLine = convertEndOfLineToChars$1(options2.endOfLine);
                let pos = 0;
                const cmds = [
                    [
                        rootIndent(),
                        MODE_BREAK,
                        doc2
                    ]
                ];
                const out = [];
                let shouldRemeasure = false;
                let lineSuffix2 = [];
                while(cmds.length !== 0){
                    const [ind, mode, doc3] = cmds.pop();
                    if (typeof doc3 === "string") {
                        const formatted = newLine !== "\n" && doc3.includes("\n") ? doc3.replace(/\n/g, newLine) : doc3;
                        out.push(formatted);
                        pos += getStringWidth$1(formatted);
                    } else {
                        switch(doc3.type){
                            case "cursor":
                                out.push(cursor$1.placeholder);
                                break;
                            case "concat":
                                for(let i = doc3.parts.length - 1; i >= 0; i--){
                                    cmds.push([
                                        ind,
                                        mode,
                                        doc3.parts[i]
                                    ]);
                                }
                                break;
                            case "indent":
                                cmds.push([
                                    makeIndent(ind, options2),
                                    mode,
                                    doc3.contents
                                ]);
                                break;
                            case "align":
                                cmds.push([
                                    makeAlign(ind, doc3.n, options2),
                                    mode,
                                    doc3.contents
                                ]);
                                break;
                            case "trim":
                                pos -= trim$1(out);
                                break;
                            case "group":
                                switch(mode){
                                    case MODE_FLAT:
                                        if (!shouldRemeasure) {
                                            cmds.push([
                                                ind,
                                                doc3.break ? MODE_BREAK : MODE_FLAT,
                                                doc3.contents
                                            ]);
                                            break;
                                        }
                                    case MODE_BREAK:
                                        {
                                            shouldRemeasure = false;
                                            const next = [
                                                ind,
                                                MODE_FLAT,
                                                doc3.contents
                                            ];
                                            const rem = width - pos;
                                            if (!doc3.break && fits(next, cmds, rem, options2)) {
                                                cmds.push(next);
                                            } else {
                                                if (doc3.expandedStates) {
                                                    const mostExpanded = doc3.expandedStates[doc3.expandedStates.length - 1];
                                                    if (doc3.break) {
                                                        cmds.push([
                                                            ind,
                                                            MODE_BREAK,
                                                            mostExpanded
                                                        ]);
                                                        break;
                                                    } else {
                                                        for(let i = 1; i < doc3.expandedStates.length + 1; i++){
                                                            if (i >= doc3.expandedStates.length) {
                                                                cmds.push([
                                                                    ind,
                                                                    MODE_BREAK,
                                                                    mostExpanded
                                                                ]);
                                                                break;
                                                            } else {
                                                                const state = doc3.expandedStates[i];
                                                                const cmd = [
                                                                    ind,
                                                                    MODE_FLAT,
                                                                    state
                                                                ];
                                                                if (fits(cmd, cmds, rem, options2)) {
                                                                    cmds.push(cmd);
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    cmds.push([
                                                        ind,
                                                        MODE_BREAK,
                                                        doc3.contents
                                                    ]);
                                                }
                                            }
                                            break;
                                        }
                                }
                                if (doc3.id) {
                                    groupModeMap[doc3.id] = cmds[cmds.length - 1][1];
                                }
                                break;
                            case "fill":
                                {
                                    const rem = width - pos;
                                    const { parts  } = doc3;
                                    if (parts.length === 0) {
                                        break;
                                    }
                                    const [content, whitespace] = parts;
                                    const contentFlatCmd = [
                                        ind,
                                        MODE_FLAT,
                                        content
                                    ];
                                    const contentBreakCmd = [
                                        ind,
                                        MODE_BREAK,
                                        content
                                    ];
                                    const contentFits = fits(contentFlatCmd, [], rem, options2, true);
                                    if (parts.length === 1) {
                                        if (contentFits) {
                                            cmds.push(contentFlatCmd);
                                        } else {
                                            cmds.push(contentBreakCmd);
                                        }
                                        break;
                                    }
                                    const whitespaceFlatCmd = [
                                        ind,
                                        MODE_FLAT,
                                        whitespace
                                    ];
                                    const whitespaceBreakCmd = [
                                        ind,
                                        MODE_BREAK,
                                        whitespace
                                    ];
                                    if (parts.length === 2) {
                                        if (contentFits) {
                                            cmds.push(whitespaceFlatCmd);
                                            cmds.push(contentFlatCmd);
                                        } else {
                                            cmds.push(whitespaceBreakCmd);
                                            cmds.push(contentBreakCmd);
                                        }
                                        break;
                                    }
                                    parts.splice(0, 2);
                                    const remainingCmd = [
                                        ind,
                                        mode,
                                        fill$1(parts)
                                    ];
                                    const secondContent = parts[0];
                                    const firstAndSecondContentFlatCmd = [
                                        ind,
                                        MODE_FLAT,
                                        concat$1([
                                            content,
                                            whitespace,
                                            secondContent
                                        ])
                                    ];
                                    const firstAndSecondContentFits = fits(firstAndSecondContentFlatCmd, [], rem, options2, true);
                                    if (firstAndSecondContentFits) {
                                        cmds.push(remainingCmd);
                                        cmds.push(whitespaceFlatCmd);
                                        cmds.push(contentFlatCmd);
                                    } else if (contentFits) {
                                        cmds.push(remainingCmd);
                                        cmds.push(whitespaceBreakCmd);
                                        cmds.push(contentFlatCmd);
                                    } else {
                                        cmds.push(remainingCmd);
                                        cmds.push(whitespaceBreakCmd);
                                        cmds.push(contentBreakCmd);
                                    }
                                    break;
                                }
                            case "if-break":
                                {
                                    const groupMode = doc3.groupId ? groupModeMap[doc3.groupId] : mode;
                                    if (groupMode === MODE_BREAK) {
                                        if (doc3.breakContents) {
                                            cmds.push([
                                                ind,
                                                mode,
                                                doc3.breakContents
                                            ]);
                                        }
                                    }
                                    if (groupMode === MODE_FLAT) {
                                        if (doc3.flatContents) {
                                            cmds.push([
                                                ind,
                                                mode,
                                                doc3.flatContents
                                            ]);
                                        }
                                    }
                                    break;
                                }
                            case "line-suffix":
                                lineSuffix2.push([
                                    ind,
                                    mode,
                                    doc3.contents
                                ]);
                                break;
                            case "line-suffix-boundary":
                                if (lineSuffix2.length > 0) {
                                    cmds.push([
                                        ind,
                                        mode,
                                        {
                                            type: "line",
                                            hard: true
                                        }
                                    ]);
                                }
                                break;
                            case "line":
                                switch(mode){
                                    case MODE_FLAT:
                                        if (!doc3.hard) {
                                            if (!doc3.soft) {
                                                out.push(" ");
                                                pos += 1;
                                            }
                                            break;
                                        } else {
                                            shouldRemeasure = true;
                                        }
                                    case MODE_BREAK:
                                        if (lineSuffix2.length) {
                                            cmds.push([
                                                ind,
                                                mode,
                                                doc3
                                            ]);
                                            cmds.push(...lineSuffix2.reverse());
                                            lineSuffix2 = [];
                                            break;
                                        }
                                        if (doc3.literal) {
                                            if (ind.root) {
                                                out.push(newLine, ind.root.value);
                                                pos = ind.root.length;
                                            } else {
                                                out.push(newLine);
                                                pos = 0;
                                            }
                                        } else {
                                            pos -= trim$1(out);
                                            out.push(newLine + ind.value);
                                            pos = ind.length;
                                        }
                                        break;
                                }
                                break;
                        }
                    }
                }
                const cursorPlaceholderIndex = out.indexOf(cursor$1.placeholder);
                if (cursorPlaceholderIndex !== -1) {
                    const otherCursorPlaceholderIndex = out.indexOf(cursor$1.placeholder, cursorPlaceholderIndex + 1);
                    const beforeCursor = out.slice(0, cursorPlaceholderIndex).join("");
                    const aroundCursor = out.slice(cursorPlaceholderIndex + 1, otherCursorPlaceholderIndex).join("");
                    const afterCursor = out.slice(otherCursorPlaceholderIndex + 1).join("");
                    return {
                        formatted: beforeCursor + aroundCursor + afterCursor,
                        cursorNodeStart: beforeCursor.length,
                        cursorNodeText: aroundCursor
                    };
                }
                return {
                    formatted: out.join("")
                };
            }
            var docPrinter = {
                printDocToString
            };
            const traverseDocOnExitStackMarker = {};
            function traverseDoc(doc2, onEnter, onExit, shouldTraverseConditionalGroups) {
                const docsStack = [
                    doc2
                ];
                while(docsStack.length !== 0){
                    const doc3 = docsStack.pop();
                    if (doc3 === traverseDocOnExitStackMarker) {
                        onExit(docsStack.pop());
                        continue;
                    }
                    let shouldRecurse = true;
                    if (onEnter) {
                        if (onEnter(doc3) === false) {
                            shouldRecurse = false;
                        }
                    }
                    if (onExit) {
                        docsStack.push(doc3);
                        docsStack.push(traverseDocOnExitStackMarker);
                    }
                    if (shouldRecurse) {
                        if (doc3.type === "concat" || doc3.type === "fill") {
                            for(let ic = doc3.parts.length, i = ic - 1; i >= 0; --i){
                                docsStack.push(doc3.parts[i]);
                            }
                        } else if (doc3.type === "if-break") {
                            if (doc3.flatContents) {
                                docsStack.push(doc3.flatContents);
                            }
                            if (doc3.breakContents) {
                                docsStack.push(doc3.breakContents);
                            }
                        } else if (doc3.type === "group" && doc3.expandedStates) {
                            if (shouldTraverseConditionalGroups) {
                                for(let ic = doc3.expandedStates.length, i = ic - 1; i >= 0; --i){
                                    docsStack.push(doc3.expandedStates[i]);
                                }
                            } else {
                                docsStack.push(doc3.contents);
                            }
                        } else if (doc3.contents) {
                            docsStack.push(doc3.contents);
                        }
                    }
                }
            }
            function mapDoc(doc2, cb) {
                if (doc2.type === "concat" || doc2.type === "fill") {
                    const parts = doc2.parts.map((part)=>mapDoc(part, cb));
                    return cb(Object.assign({}, doc2, {
                        parts
                    }));
                } else if (doc2.type === "if-break") {
                    const breakContents = doc2.breakContents && mapDoc(doc2.breakContents, cb);
                    const flatContents = doc2.flatContents && mapDoc(doc2.flatContents, cb);
                    return cb(Object.assign({}, doc2, {
                        breakContents,
                        flatContents
                    }));
                } else if (doc2.contents) {
                    const contents = mapDoc(doc2.contents, cb);
                    return cb(Object.assign({}, doc2, {
                        contents
                    }));
                }
                return cb(doc2);
            }
            function findInDoc(doc2, fn, defaultValue) {
                let result = defaultValue;
                let hasStopped = false;
                function findInDocOnEnterFn(doc3) {
                    const maybeResult = fn(doc3);
                    if (maybeResult !== void 0) {
                        hasStopped = true;
                        result = maybeResult;
                    }
                    if (hasStopped) {
                        return false;
                    }
                }
                traverseDoc(doc2, findInDocOnEnterFn);
                return result;
            }
            function isEmpty2(n) {
                return typeof n === "string" && n.length === 0;
            }
            function isLineNextFn(doc2) {
                if (typeof doc2 === "string") {
                    return false;
                }
                if (doc2.type === "line") {
                    return true;
                }
            }
            function isLineNext(doc2) {
                return findInDoc(doc2, isLineNextFn, false);
            }
            function willBreakFn(doc2) {
                if (doc2.type === "group" && doc2.break) {
                    return true;
                }
                if (doc2.type === "line" && doc2.hard) {
                    return true;
                }
                if (doc2.type === "break-parent") {
                    return true;
                }
            }
            function willBreak(doc2) {
                return findInDoc(doc2, willBreakFn, false);
            }
            function breakParentGroup(groupStack) {
                if (groupStack.length > 0) {
                    const parentGroup = groupStack[groupStack.length - 1];
                    if (!parentGroup.expandedStates) {
                        parentGroup.break = true;
                    }
                }
                return null;
            }
            function propagateBreaks(doc2) {
                const alreadyVisitedSet = /* @__PURE__ */ new Set();
                const groupStack = [];
                function propagateBreaksOnEnterFn(doc3) {
                    if (doc3.type === "break-parent") {
                        breakParentGroup(groupStack);
                    }
                    if (doc3.type === "group") {
                        groupStack.push(doc3);
                        if (alreadyVisitedSet.has(doc3)) {
                            return false;
                        }
                        alreadyVisitedSet.add(doc3);
                    }
                }
                function propagateBreaksOnExitFn(doc3) {
                    if (doc3.type === "group") {
                        const group2 = groupStack.pop();
                        if (group2.break) {
                            breakParentGroup(groupStack);
                        }
                    }
                }
                traverseDoc(doc2, propagateBreaksOnEnterFn, propagateBreaksOnExitFn, /* shouldTraverseConditionalGroups */ true);
            }
            function removeLinesFn(doc2) {
                if (doc2.type === "line" && !doc2.hard) {
                    return doc2.soft ? "" : " ";
                } else if (doc2.type === "if-break") {
                    return doc2.flatContents || "";
                }
                return doc2;
            }
            function removeLines(doc2) {
                return mapDoc(doc2, removeLinesFn);
            }
            function stripTrailingHardline(doc2) {
                if (doc2.type === "concat" && doc2.parts.length !== 0) {
                    const lastPart = doc2.parts[doc2.parts.length - 1];
                    if (lastPart.type === "concat") {
                        if (lastPart.parts.length === 2 && lastPart.parts[0].hard && lastPart.parts[1].type === "break-parent") {
                            return {
                                type: "concat",
                                parts: doc2.parts.slice(0, -1)
                            };
                        }
                        return {
                            type: "concat",
                            parts: doc2.parts.slice(0, -1).concat(stripTrailingHardline(lastPart))
                        };
                    }
                }
                return doc2;
            }
            var docUtils = {
                isEmpty: isEmpty2,
                willBreak,
                isLineNext,
                traverseDoc,
                findInDoc,
                mapDoc,
                propagateBreaks,
                removeLines,
                stripTrailingHardline
            };
            function flattenDoc(doc2) {
                if (doc2.type === "concat") {
                    const res = [];
                    for(let i = 0; i < doc2.parts.length; ++i){
                        const doc22 = doc2.parts[i];
                        if (typeof doc22 !== "string" && doc22.type === "concat") {
                            res.push(...flattenDoc(doc22).parts);
                        } else {
                            const flattened = flattenDoc(doc22);
                            if (flattened !== "") {
                                res.push(flattened);
                            }
                        }
                    }
                    return Object.assign({}, doc2, {
                        parts: res
                    });
                } else if (doc2.type === "if-break") {
                    return Object.assign({}, doc2, {
                        breakContents: doc2.breakContents != null ? flattenDoc(doc2.breakContents) : null,
                        flatContents: doc2.flatContents != null ? flattenDoc(doc2.flatContents) : null
                    });
                } else if (doc2.type === "group") {
                    return Object.assign({}, doc2, {
                        contents: flattenDoc(doc2.contents),
                        expandedStates: doc2.expandedStates ? doc2.expandedStates.map(flattenDoc) : doc2.expandedStates
                    });
                } else if (doc2.contents) {
                    return Object.assign({}, doc2, {
                        contents: flattenDoc(doc2.contents)
                    });
                }
                return doc2;
            }
            function printDoc(doc2) {
                if (typeof doc2 === "string") {
                    return JSON.stringify(doc2);
                }
                if (doc2.type === "line") {
                    if (doc2.literal) {
                        return "literalline";
                    }
                    if (doc2.hard) {
                        return "hardline";
                    }
                    if (doc2.soft) {
                        return "softline";
                    }
                    return "line";
                }
                if (doc2.type === "break-parent") {
                    return "breakParent";
                }
                if (doc2.type === "trim") {
                    return "trim";
                }
                if (doc2.type === "concat") {
                    return "[" + doc2.parts.map(printDoc).join(", ") + "]";
                }
                if (doc2.type === "indent") {
                    return "indent(" + printDoc(doc2.contents) + ")";
                }
                if (doc2.type === "align") {
                    return doc2.n === -Infinity ? "dedentToRoot(" + printDoc(doc2.contents) + ")" : doc2.n < 0 ? "dedent(" + printDoc(doc2.contents) + ")" : doc2.n.type === "root" ? "markAsRoot(" + printDoc(doc2.contents) + ")" : "align(" + JSON.stringify(doc2.n) + ", " + printDoc(doc2.contents) + ")";
                }
                if (doc2.type === "if-break") {
                    return "ifBreak(" + printDoc(doc2.breakContents) + (doc2.flatContents ? ", " + printDoc(doc2.flatContents) : "") + ")";
                }
                if (doc2.type === "group") {
                    if (doc2.expandedStates) {
                        return "conditionalGroup([" + doc2.expandedStates.map(printDoc).join(",") + "])";
                    }
                    return (doc2.break ? "wrappedGroup" : "group") + "(" + printDoc(doc2.contents) + ")";
                }
                if (doc2.type === "fill") {
                    return "fill(" + doc2.parts.map(printDoc).join(", ") + ")";
                }
                if (doc2.type === "line-suffix") {
                    return "lineSuffix(" + printDoc(doc2.contents) + ")";
                }
                if (doc2.type === "line-suffix-boundary") {
                    return "lineSuffixBoundary";
                }
                throw new Error("Unknown doc type " + doc2.type);
            }
            var docDebug = {
                printDocToDebug (doc2) {
                    return printDoc(flattenDoc(doc2));
                }
            };
            var document = {
                builders: docBuilders,
                printer: docPrinter,
                utils: docUtils,
                debug: docDebug
            };
            const { getMaxContinuousCount: getMaxContinuousCount$1 , getStringWidth: getStringWidth$2 , getAlignmentSize: getAlignmentSize$1 , getIndentSize: getIndentSize$1 , skip: skip$1 , skipWhitespace: skipWhitespace$1 , skipSpaces: skipSpaces$1 , skipNewline: skipNewline$1 , skipToLineEnd: skipToLineEnd$1 , skipEverythingButNewLine: skipEverythingButNewLine$1 , skipInlineComment: skipInlineComment$1 , skipTrailingComment: skipTrailingComment$1 , hasNewline: hasNewline$1 , hasNewlineInRange: hasNewlineInRange$1 , hasSpaces: hasSpaces$1 , isNextLineEmpty: isNextLineEmpty$1 , isNextLineEmptyAfterIndex: isNextLineEmptyAfterIndex$1 , isPreviousLineEmpty: isPreviousLineEmpty$1 , getNextNonSpaceNonCommentCharacterIndex: getNextNonSpaceNonCommentCharacterIndex$1 , makeString: makeString$1 , addLeadingComment: addLeadingComment$1 , addDanglingComment: addDanglingComment$1 , addTrailingComment: addTrailingComment$1  } = util$1;
            var utilShared = {
                getMaxContinuousCount: getMaxContinuousCount$1,
                getStringWidth: getStringWidth$2,
                getAlignmentSize: getAlignmentSize$1,
                getIndentSize: getIndentSize$1,
                skip: skip$1,
                skipWhitespace: skipWhitespace$1,
                skipSpaces: skipSpaces$1,
                skipNewline: skipNewline$1,
                skipToLineEnd: skipToLineEnd$1,
                skipEverythingButNewLine: skipEverythingButNewLine$1,
                skipInlineComment: skipInlineComment$1,
                skipTrailingComment: skipTrailingComment$1,
                hasNewline: hasNewline$1,
                hasNewlineInRange: hasNewlineInRange$1,
                hasSpaces: hasSpaces$1,
                isNextLineEmpty: isNextLineEmpty$1,
                isNextLineEmptyAfterIndex: isNextLineEmptyAfterIndex$1,
                isPreviousLineEmpty: isPreviousLineEmpty$1,
                getNextNonSpaceNonCommentCharacterIndex: getNextNonSpaceNonCommentCharacterIndex$1,
                makeString: makeString$1,
                addLeadingComment: addLeadingComment$1,
                addDanglingComment: addDanglingComment$1,
                addTrailingComment: addTrailingComment$1
            };
            const { concat: concat$2 , line: line$1 , hardline: hardline$1 , breakParent: breakParent$1 , indent: indent$1 , lineSuffix: lineSuffix$1 , join: join$1 , cursor: cursor$2  } = document.builders;
            const { hasNewline: hasNewline$2 , skipNewline: skipNewline$2 , isPreviousLineEmpty: isPreviousLineEmpty$2  } = util$1;
            const { addLeadingComment: addLeadingComment$2 , addDanglingComment: addDanglingComment$2 , addTrailingComment: addTrailingComment$2  } = utilShared;
            const childNodesCacheKey = Symbol("child-nodes");
            function getSortedChildNodes(node, options2, resultArray) {
                if (!node) {
                    return;
                }
                const { printer , locStart: locStart2 , locEnd: locEnd2  } = options2;
                if (resultArray) {
                    if (printer.canAttachComment && printer.canAttachComment(node)) {
                        let i;
                        for(i = resultArray.length - 1; i >= 0; --i){
                            if (locStart2(resultArray[i]) <= locStart2(node) && locEnd2(resultArray[i]) <= locEnd2(node)) {
                                break;
                            }
                        }
                        resultArray.splice(i + 1, 0, node);
                        return;
                    }
                } else if (node[childNodesCacheKey]) {
                    return node[childNodesCacheKey];
                }
                const childNodes = printer.getCommentChildNodes && printer.getCommentChildNodes(node, options2) || typeof node === "object" && Object.keys(node).filter((n)=>n !== "enclosingNode" && n !== "precedingNode" && n !== "followingNode").map((n)=>node[n]);
                if (!childNodes) {
                    return;
                }
                if (!resultArray) {
                    Object.defineProperty(node, childNodesCacheKey, {
                        value: resultArray = [],
                        enumerable: false
                    });
                }
                childNodes.forEach((childNode)=>{
                    getSortedChildNodes(childNode, options2, resultArray);
                });
                return resultArray;
            }
            function decorateComment(node, comment, options2) {
                const { locStart: locStart2 , locEnd: locEnd2  } = options2;
                const childNodes = getSortedChildNodes(node, options2);
                let precedingNode;
                let followingNode;
                let left = 0;
                let right = childNodes.length;
                while(left < right){
                    const middle = left + right >> 1;
                    const child = childNodes[middle];
                    if (locStart2(child) - locStart2(comment) <= 0 && locEnd2(comment) - locEnd2(child) <= 0) {
                        comment.enclosingNode = child;
                        decorateComment(child, comment, options2);
                        return;
                    }
                    if (locEnd2(child) - locStart2(comment) <= 0) {
                        precedingNode = child;
                        left = middle + 1;
                        continue;
                    }
                    if (locEnd2(comment) - locStart2(child) <= 0) {
                        followingNode = child;
                        right = middle;
                        continue;
                    }
                    throw new Error("Comment location overlaps with node location");
                }
                if (comment.enclosingNode && comment.enclosingNode.type === "TemplateLiteral") {
                    const { quasis  } = comment.enclosingNode;
                    const commentIndex = findExpressionIndexForComment(quasis, comment, options2);
                    if (precedingNode && findExpressionIndexForComment(quasis, precedingNode, options2) !== commentIndex) {
                        precedingNode = null;
                    }
                    if (followingNode && findExpressionIndexForComment(quasis, followingNode, options2) !== commentIndex) {
                        followingNode = null;
                    }
                }
                if (precedingNode) {
                    comment.precedingNode = precedingNode;
                }
                if (followingNode) {
                    comment.followingNode = followingNode;
                }
            }
            function attach(comments2, ast2, text, options2) {
                if (!Array.isArray(comments2)) {
                    return;
                }
                const tiesToBreak = [];
                const { locStart: locStart2 , locEnd: locEnd2  } = options2;
                comments2.forEach((comment, i)=>{
                    if (options2.parser === "json" || options2.parser === "json5" || options2.parser === "__js_expression" || options2.parser === "__vue_expression") {
                        if (locStart2(comment) - locStart2(ast2) <= 0) {
                            addLeadingComment$2(ast2, comment);
                            return;
                        }
                        if (locEnd2(comment) - locEnd2(ast2) >= 0) {
                            addTrailingComment$2(ast2, comment);
                            return;
                        }
                    }
                    decorateComment(ast2, comment, options2);
                    const { precedingNode , enclosingNode , followingNode  } = comment;
                    const pluginHandleOwnLineComment = options2.printer.handleComments && options2.printer.handleComments.ownLine ? options2.printer.handleComments.ownLine : ()=>false;
                    const pluginHandleEndOfLineComment = options2.printer.handleComments && options2.printer.handleComments.endOfLine ? options2.printer.handleComments.endOfLine : ()=>false;
                    const pluginHandleRemainingComment = options2.printer.handleComments && options2.printer.handleComments.remaining ? options2.printer.handleComments.remaining : ()=>false;
                    const isLastComment = comments2.length - 1 === i;
                    if (hasNewline$2(text, locStart2(comment), {
                        backwards: true
                    })) {
                        if (pluginHandleOwnLineComment(comment, text, options2, ast2, isLastComment)) ;
                        else if (followingNode) {
                            addLeadingComment$2(followingNode, comment);
                        } else if (precedingNode) {
                            addTrailingComment$2(precedingNode, comment);
                        } else if (enclosingNode) {
                            addDanglingComment$2(enclosingNode, comment);
                        } else {
                            addDanglingComment$2(ast2, comment);
                        }
                    } else if (hasNewline$2(text, locEnd2(comment))) {
                        if (pluginHandleEndOfLineComment(comment, text, options2, ast2, isLastComment)) ;
                        else if (precedingNode) {
                            addTrailingComment$2(precedingNode, comment);
                        } else if (followingNode) {
                            addLeadingComment$2(followingNode, comment);
                        } else if (enclosingNode) {
                            addDanglingComment$2(enclosingNode, comment);
                        } else {
                            addDanglingComment$2(ast2, comment);
                        }
                    } else {
                        if (pluginHandleRemainingComment(comment, text, options2, ast2, isLastComment)) ;
                        else if (precedingNode && followingNode) {
                            const tieCount = tiesToBreak.length;
                            if (tieCount > 0) {
                                const lastTie = tiesToBreak[tieCount - 1];
                                if (lastTie.followingNode !== comment.followingNode) {
                                    breakTies(tiesToBreak, text, options2);
                                }
                            }
                            tiesToBreak.push(comment);
                        } else if (precedingNode) {
                            addTrailingComment$2(precedingNode, comment);
                        } else if (followingNode) {
                            addLeadingComment$2(followingNode, comment);
                        } else if (enclosingNode) {
                            addDanglingComment$2(enclosingNode, comment);
                        } else {
                            addDanglingComment$2(ast2, comment);
                        }
                    }
                });
                breakTies(tiesToBreak, text, options2);
                comments2.forEach((comment)=>{
                    delete comment.precedingNode;
                    delete comment.enclosingNode;
                    delete comment.followingNode;
                });
            }
            function breakTies(tiesToBreak, text, options2) {
                const tieCount = tiesToBreak.length;
                if (tieCount === 0) {
                    return;
                }
                const { precedingNode , followingNode , enclosingNode  } = tiesToBreak[0];
                const gapRegExp = options2.printer.getGapRegex && options2.printer.getGapRegex(enclosingNode) || /^[\s(]*$/;
                let gapEndPos = options2.locStart(followingNode);
                let indexOfFirstLeadingComment;
                for(indexOfFirstLeadingComment = tieCount; indexOfFirstLeadingComment > 0; --indexOfFirstLeadingComment){
                    const comment = tiesToBreak[indexOfFirstLeadingComment - 1];
                    assert.strictEqual(comment.precedingNode, precedingNode);
                    assert.strictEqual(comment.followingNode, followingNode);
                    const gap = text.slice(options2.locEnd(comment), gapEndPos);
                    if (gapRegExp.test(gap)) {
                        gapEndPos = options2.locStart(comment);
                    } else {
                        break;
                    }
                }
                tiesToBreak.forEach((comment, i)=>{
                    if (i < indexOfFirstLeadingComment) {
                        addTrailingComment$2(precedingNode, comment);
                    } else {
                        addLeadingComment$2(followingNode, comment);
                    }
                });
                tiesToBreak.length = 0;
            }
            function printComment(commentPath, options2) {
                const comment = commentPath.getValue();
                comment.printed = true;
                return options2.printer.printComment(commentPath, options2);
            }
            function findExpressionIndexForComment(quasis, comment, options2) {
                const startPos = options2.locStart(comment) - 1;
                for(let i = 1; i < quasis.length; ++i){
                    if (startPos < getQuasiRange(quasis[i]).start) {
                        return i - 1;
                    }
                }
                return 0;
            }
            function getQuasiRange(expr) {
                if (expr.start !== void 0) {
                    return {
                        start: expr.start,
                        end: expr.end
                    };
                }
                return {
                    start: expr.range[0],
                    end: expr.range[1]
                };
            }
            function printLeadingComment(commentPath, print2, options2) {
                const comment = commentPath.getValue();
                const contents = printComment(commentPath, options2);
                if (!contents) {
                    return "";
                }
                const isBlock2 = options2.printer.isBlockComment && options2.printer.isBlockComment(comment);
                if (isBlock2) {
                    const lineBreak = hasNewline$2(options2.originalText, options2.locEnd(comment)) ? hasNewline$2(options2.originalText, options2.locStart(comment), {
                        backwards: true
                    }) ? hardline$1 : line$1 : " ";
                    return concat$2([
                        contents,
                        lineBreak
                    ]);
                }
                return concat$2([
                    contents,
                    hardline$1
                ]);
            }
            function printTrailingComment(commentPath, print2, options2) {
                const comment = commentPath.getValue();
                const contents = printComment(commentPath, options2);
                if (!contents) {
                    return "";
                }
                const isBlock2 = options2.printer.isBlockComment && options2.printer.isBlockComment(comment);
                const parentNode = commentPath.getNode(1);
                const parentParentNode = commentPath.getNode(2);
                const isParentSuperClass = parentParentNode && (parentParentNode.type === "ClassDeclaration" || parentParentNode.type === "ClassExpression") && parentParentNode.superClass === parentNode;
                if (hasNewline$2(options2.originalText, options2.locStart(comment), {
                    backwards: true
                })) {
                    const isLineBeforeEmpty = isPreviousLineEmpty$2(options2.originalText, comment, options2.locStart);
                    return lineSuffix$1(concat$2([
                        hardline$1,
                        isLineBeforeEmpty ? hardline$1 : "",
                        contents
                    ]));
                } else if (isBlock2 || isParentSuperClass) {
                    return concat$2([
                        " ",
                        contents
                    ]);
                }
                return concat$2([
                    lineSuffix$1(concat$2([
                        " ",
                        contents
                    ])),
                    !isBlock2 ? breakParent$1 : ""
                ]);
            }
            function printDanglingComments(path6, options2, sameIndent, filter) {
                const parts = [];
                const node = path6.getValue();
                if (!node || !node.comments) {
                    return "";
                }
                path6.each((commentPath)=>{
                    const comment = commentPath.getValue();
                    if (comment && !comment.leading && !comment.trailing && (!filter || filter(comment))) {
                        parts.push(printComment(commentPath, options2));
                    }
                }, "comments");
                if (parts.length === 0) {
                    return "";
                }
                if (sameIndent) {
                    return join$1(hardline$1, parts);
                }
                return indent$1(concat$2([
                    hardline$1,
                    join$1(hardline$1, parts)
                ]));
            }
            function prependCursorPlaceholder(path6, options2, printed) {
                if (path6.getNode() === options2.cursorNode && path6.getValue()) {
                    return concat$2([
                        cursor$2,
                        printed,
                        cursor$2
                    ]);
                }
                return printed;
            }
            function printComments(path6, print2, options2, needsSemi) {
                const value1 = path6.getValue();
                const printed = print2(path6);
                const comments2 = value1 && value1.comments;
                if (!comments2 || comments2.length === 0) {
                    return prependCursorPlaceholder(path6, options2, printed);
                }
                const leadingParts = [];
                const trailingParts = [
                    needsSemi ? ";" : "",
                    printed
                ];
                path6.each((commentPath)=>{
                    const comment = commentPath.getValue();
                    const { leading , trailing  } = comment;
                    if (leading) {
                        const contents = printLeadingComment(commentPath, print2, options2);
                        if (!contents) {
                            return;
                        }
                        leadingParts.push(contents);
                        const text = options2.originalText;
                        const index2 = skipNewline$2(text, options2.locEnd(comment));
                        if (index2 !== false && hasNewline$2(text, index2)) {
                            leadingParts.push(hardline$1);
                        }
                    } else if (trailing) {
                        trailingParts.push(printTrailingComment(commentPath, print2, options2));
                    }
                }, "comments");
                return prependCursorPlaceholder(path6, options2, concat$2(leadingParts.concat(trailingParts)));
            }
            var comments = {
                attach,
                printComments,
                printDanglingComments,
                getSortedChildNodes
            };
            function getNodeHelper(path6, count) {
                const stackIndex = getNodeStackIndexHelper(path6.stack, count);
                return stackIndex === -1 ? null : path6.stack[stackIndex];
            }
            function getNodeStackIndexHelper(stack, count) {
                for(let i = stack.length - 1; i >= 0; i -= 2){
                    const value1 = stack[i];
                    if (value1 && !Array.isArray(value1) && --count < 0) {
                        return i;
                    }
                }
                return -1;
            }
            class FastPath {
                // The name of the current property is always the penultimate element of
                // this.stack, and always a String.
                getName() {
                    const { stack  } = this;
                    const { length  } = stack;
                    if (length > 1) {
                        return stack[length - 2];
                    }
                    return null;
                }
                // The value of the current property is always the final element of
                // this.stack.
                getValue() {
                    return getLast(this.stack);
                }
                getNode(count = 0) {
                    return getNodeHelper(this, count);
                }
                getParentNode(count = 0) {
                    return getNodeHelper(this, count + 1);
                }
                // Temporarily push properties named by string arguments given after the
                // callback function onto this.stack, then call the callback with a
                // reference to this (modified) FastPath object. Note that the stack will
                // be restored to its original state after the callback is finished, so it
                // is probably a mistake to retain a reference to the path.
                call(callback, ...names) {
                    const { stack  } = this;
                    const { length  } = stack;
                    let value1 = getLast(stack);
                    for (const name2 of names){
                        value1 = value1[name2];
                        stack.push(name2, value1);
                    }
                    const result = callback(this);
                    stack.length = length;
                    return result;
                }
                callParent(callback, count = 0) {
                    const stackIndex = getNodeStackIndexHelper(this.stack, count + 1);
                    const parentValues = this.stack.splice(stackIndex + 1);
                    const result = callback(this);
                    this.stack.push(...parentValues);
                    return result;
                }
                // Similar to FastPath.prototype.call, except that the value obtained by
                // accessing this.getValue()[name1][name2]... should be array-like. The
                // callback will be called with a reference to this path object for each
                // element of the array.
                each(callback, ...names) {
                    const { stack  } = this;
                    const { length  } = stack;
                    let value1 = getLast(stack);
                    for (const name2 of names){
                        value1 = value1[name2];
                        stack.push(name2, value1);
                    }
                    for(let i = 0; i < value1.length; ++i){
                        if (i in value1) {
                            stack.push(i, value1[i]);
                            callback(this);
                            stack.length -= 2;
                        }
                    }
                    stack.length = length;
                }
                // Similar to FastPath.prototype.each, except that the results of the
                // callback function invocations are stored in an array and returned at
                // the end of the iteration.
                map(callback, ...names) {
                    const { stack  } = this;
                    const { length  } = stack;
                    let value1 = getLast(stack);
                    for (const name2 of names){
                        value1 = value1[name2];
                        stack.push(name2, value1);
                    }
                    const result = new Array(value1.length);
                    for(let i = 0; i < value1.length; ++i){
                        if (i in value1) {
                            stack.push(i, value1[i]);
                            result[i] = callback(this, i);
                            stack.length -= 2;
                        }
                    }
                    stack.length = length;
                    return result;
                }
                /**
         * @param {...(
         *   | ((node: any, name: string | null, number: number | null) => boolean)
         *   | undefined
         * )} predicates
         */ match(...predicates) {
                    let stackPointer = this.stack.length - 1;
                    let name2 = null;
                    let node = this.stack[stackPointer--];
                    for (const predicate of predicates){
                        if (node === void 0) {
                            return false;
                        }
                        let number2 = null;
                        if (typeof name2 === "number") {
                            number2 = name2;
                            name2 = this.stack[stackPointer--];
                            node = this.stack[stackPointer--];
                        }
                        if (predicate && !predicate(node, name2, number2)) {
                            return false;
                        }
                        name2 = this.stack[stackPointer--];
                        node = this.stack[stackPointer--];
                    }
                    return true;
                }
                constructor(value1){
                    this.stack = [
                        value1
                    ];
                }
            }
            var fastPath = FastPath;
            const { normalize: normalize$2  } = options$1;
            function printSubtree(path6, print2, options2, printAstToDoc2) {
                if (options2.printer.embed) {
                    return options2.printer.embed(path6, print2, (text, partialNextOptions)=>textToDoc(text, partialNextOptions, options2, printAstToDoc2), options2);
                }
            }
            function textToDoc(text, partialNextOptions, parentOptions, printAstToDoc2) {
                const nextOptions = normalize$2(Object.assign({}, parentOptions, {}, partialNextOptions, {
                    parentParser: parentOptions.parser,
                    embeddedInHtml: !!(parentOptions.embeddedInHtml || parentOptions.parser === "html" || parentOptions.parser === "vue" || parentOptions.parser === "angular" || parentOptions.parser === "lwc"),
                    originalText: text
                }), {
                    passThrough: true
                });
                const result = parser2.parse(text, nextOptions);
                const { ast: ast2  } = result;
                text = result.text;
                const astComments = ast2.comments;
                delete ast2.comments;
                comments.attach(astComments, ast2, text, nextOptions);
                return printAstToDoc2(ast2, nextOptions);
            }
            var multiparser = {
                printSubtree
            };
            const doc = document;
            const docBuilders$1 = doc.builders;
            const { concat: concat$3 , hardline: hardline$2 , addAlignmentToDoc: addAlignmentToDoc$1  } = docBuilders$1;
            const docUtils$1 = doc.utils;
            function printAstToDoc(ast2, options2, alignmentSize = 0) {
                const { printer  } = options2;
                if (printer.preprocess) {
                    ast2 = printer.preprocess(ast2, options2);
                }
                const cache = /* @__PURE__ */ new Map();
                function printGenerically(path6, args) {
                    const node = path6.getValue();
                    const shouldCache = node && typeof node === "object" && args === void 0;
                    if (shouldCache && cache.has(node)) {
                        return cache.get(node);
                    }
                    let res;
                    if (printer.willPrintOwnComments && printer.willPrintOwnComments(path6, options2)) {
                        res = callPluginPrintFunction(path6, options2, printGenerically, args);
                    } else {
                        res = comments.printComments(path6, (p2)=>callPluginPrintFunction(p2, options2, printGenerically, args), options2, args && args.needsSemi);
                    }
                    if (shouldCache) {
                        cache.set(node, res);
                    }
                    return res;
                }
                let doc2 = printGenerically(new fastPath(ast2));
                if (alignmentSize > 0) {
                    doc2 = addAlignmentToDoc$1(concat$3([
                        hardline$2,
                        doc2
                    ]), alignmentSize, options2.tabWidth);
                }
                docUtils$1.propagateBreaks(doc2);
                return doc2;
            }
            function callPluginPrintFunction(path6, options2, printPath2, args) {
                assert.ok(path6 instanceof fastPath);
                const node = path6.getValue();
                const { printer  } = options2;
                if (printer.hasPrettierIgnore && printer.hasPrettierIgnore(path6)) {
                    return options2.originalText.slice(options2.locStart(node), options2.locEnd(node));
                }
                if (node) {
                    try {
                        const sub = multiparser.printSubtree(path6, printPath2, options2, printAstToDoc);
                        if (sub) {
                            return sub;
                        }
                    } catch (error) {
                        if (commonjsGlobal.PRETTIER_DEBUG) {
                            throw error;
                        }
                    }
                }
                return printer.print(path6, options2, printPath2, args);
            }
            var astToDoc = printAstToDoc;
            function findSiblingAncestors(startNodeAndParents, endNodeAndParents, opts) {
                let resultStartNode = startNodeAndParents.node;
                let resultEndNode = endNodeAndParents.node;
                if (resultStartNode === resultEndNode) {
                    return {
                        startNode: resultStartNode,
                        endNode: resultEndNode
                    };
                }
                for (const endParent of endNodeAndParents.parentNodes){
                    if (endParent.type !== "Program" && endParent.type !== "File" && opts.locStart(endParent) >= opts.locStart(startNodeAndParents.node)) {
                        resultEndNode = endParent;
                    } else {
                        break;
                    }
                }
                for (const startParent of startNodeAndParents.parentNodes){
                    if (startParent.type !== "Program" && startParent.type !== "File" && opts.locEnd(startParent) <= opts.locEnd(endNodeAndParents.node)) {
                        resultStartNode = startParent;
                    } else {
                        break;
                    }
                }
                return {
                    startNode: resultStartNode,
                    endNode: resultEndNode
                };
            }
            function findNodeAtOffset4(node, offset, options2, predicate, parentNodes) {
                predicate = predicate || (()=>true);
                parentNodes = parentNodes || [];
                const start = options2.locStart(node, options2.locStart);
                const end = options2.locEnd(node, options2.locEnd);
                if (start <= offset && offset <= end) {
                    for (const childNode of comments.getSortedChildNodes(node, options2)){
                        const childResult = findNodeAtOffset4(childNode, offset, options2, predicate, [
                            node
                        ].concat(parentNodes));
                        if (childResult) {
                            return childResult;
                        }
                    }
                    if (predicate(node)) {
                        return {
                            node,
                            parentNodes
                        };
                    }
                }
            }
            function isSourceElement(opts, node) {
                if (node == null) {
                    return false;
                }
                const jsSourceElements = [
                    "FunctionDeclaration",
                    "BlockStatement",
                    "BreakStatement",
                    "ContinueStatement",
                    "DebuggerStatement",
                    "DoWhileStatement",
                    "EmptyStatement",
                    "ExpressionStatement",
                    "ForInStatement",
                    "ForStatement",
                    "IfStatement",
                    "LabeledStatement",
                    "ReturnStatement",
                    "SwitchStatement",
                    "ThrowStatement",
                    "TryStatement",
                    "VariableDeclaration",
                    "WhileStatement",
                    "WithStatement",
                    "ClassDeclaration",
                    // ES 2015
                    "ImportDeclaration",
                    // Module
                    "ExportDefaultDeclaration",
                    // Module
                    "ExportNamedDeclaration",
                    // Module
                    "ExportAllDeclaration",
                    // Module
                    "TypeAlias",
                    // Flow
                    "InterfaceDeclaration",
                    // Flow, TypeScript
                    "TypeAliasDeclaration",
                    // TypeScript
                    "ExportAssignment",
                    // TypeScript
                    "ExportDeclaration"
                ];
                const jsonSourceElements = [
                    "ObjectExpression",
                    "ArrayExpression",
                    "StringLiteral",
                    "NumericLiteral",
                    "BooleanLiteral",
                    "NullLiteral"
                ];
                const graphqlSourceElements = [
                    "OperationDefinition",
                    "FragmentDefinition",
                    "VariableDefinition",
                    "TypeExtensionDefinition",
                    "ObjectTypeDefinition",
                    "FieldDefinition",
                    "DirectiveDefinition",
                    "EnumTypeDefinition",
                    "EnumValueDefinition",
                    "InputValueDefinition",
                    "InputObjectTypeDefinition",
                    "SchemaDefinition",
                    "OperationTypeDefinition",
                    "InterfaceTypeDefinition",
                    "UnionTypeDefinition",
                    "ScalarTypeDefinition"
                ];
                switch(opts.parser){
                    case "flow":
                    case "babel":
                    case "babel-flow":
                    case "babel-ts":
                    case "typescript":
                        return jsSourceElements.includes(node.type);
                    case "json":
                        return jsonSourceElements.includes(node.type);
                    case "graphql":
                        return graphqlSourceElements.includes(node.kind);
                    case "vue":
                        return node.tag !== "root";
                }
                return false;
            }
            function calculateRange(text, opts, ast2) {
                const rangeStringOrig = text.slice(opts.rangeStart, opts.rangeEnd);
                const startNonWhitespace = Math.max(opts.rangeStart + rangeStringOrig.search(/\S/), opts.rangeStart);
                let endNonWhitespace;
                for(endNonWhitespace = opts.rangeEnd; endNonWhitespace > opts.rangeStart; --endNonWhitespace){
                    if (text[endNonWhitespace - 1].match(/\S/)) {
                        break;
                    }
                }
                const startNodeAndParents = findNodeAtOffset4(ast2, startNonWhitespace, opts, (node)=>isSourceElement(opts, node));
                const endNodeAndParents = findNodeAtOffset4(ast2, endNonWhitespace, opts, (node)=>isSourceElement(opts, node));
                if (!startNodeAndParents || !endNodeAndParents) {
                    return {
                        rangeStart: 0,
                        rangeEnd: 0
                    };
                }
                const siblingAncestors = findSiblingAncestors(startNodeAndParents, endNodeAndParents, opts);
                const { startNode , endNode  } = siblingAncestors;
                const rangeStart = Math.min(opts.locStart(startNode, opts.locStart), opts.locStart(endNode, opts.locStart));
                const rangeEnd = Math.max(opts.locEnd(startNode, opts.locEnd), opts.locEnd(endNode, opts.locEnd));
                return {
                    rangeStart,
                    rangeEnd
                };
            }
            var rangeUtil = {
                calculateRange,
                findNodeAtOffset: findNodeAtOffset4
            };
            var diff = getCjsExportFromNamespace(index_es6);
            const normalizeOptions$1 = options$1.normalize;
            const { guessEndOfLine: guessEndOfLine$1 , convertEndOfLineToChars: convertEndOfLineToChars$2  } = endOfLine;
            const { printer: { printDocToString: printDocToString$1  } , debug: { printDocToDebug  }  } = document;
            const BOM2 = "\uFEFF";
            const CURSOR = Symbol("cursor");
            const PLACEHOLDERS = {
                cursorOffset: "<<<PRETTIER_CURSOR>>>",
                rangeStart: "<<<PRETTIER_RANGE_START>>>",
                rangeEnd: "<<<PRETTIER_RANGE_END>>>"
            };
            function ensureAllCommentsPrinted(astComments) {
                if (!astComments) {
                    return;
                }
                for(let i = 0; i < astComments.length; ++i){
                    if (util$1.isNodeIgnoreComment(astComments[i])) {
                        return;
                    }
                }
                astComments.forEach((comment)=>{
                    if (!comment.printed) {
                        throw new Error('Comment "' + comment.value.trim() + '" was not printed. Please report this error!');
                    }
                    delete comment.printed;
                });
            }
            function attachComments(text, ast2, opts) {
                const astComments = ast2.comments;
                if (astComments) {
                    delete ast2.comments;
                    comments.attach(astComments, ast2, text, opts);
                }
                ast2.tokens = [];
                opts.originalText = opts.parser === "yaml" ? text : text.trimEnd();
                return astComments;
            }
            function coreFormat(text, opts, addAlignmentSize) {
                if (!text || !text.trim().length) {
                    return {
                        formatted: "",
                        cursorOffset: 0
                    };
                }
                addAlignmentSize = addAlignmentSize || 0;
                const parsed = parser2.parse(text, opts);
                const { ast: ast2  } = parsed;
                text = parsed.text;
                if (opts.cursorOffset >= 0) {
                    const nodeResult = rangeUtil.findNodeAtOffset(ast2, opts.cursorOffset, opts);
                    if (nodeResult && nodeResult.node) {
                        opts.cursorNode = nodeResult.node;
                    }
                }
                const astComments = attachComments(text, ast2, opts);
                const doc2 = astToDoc(ast2, opts, addAlignmentSize);
                const result = printDocToString$1(doc2, opts);
                ensureAllCommentsPrinted(astComments);
                if (addAlignmentSize > 0) {
                    const trimmed = result.formatted.trim();
                    if (result.cursorNodeStart !== void 0) {
                        result.cursorNodeStart -= result.formatted.indexOf(trimmed);
                    }
                    result.formatted = trimmed + convertEndOfLineToChars$2(opts.endOfLine);
                }
                if (opts.cursorOffset >= 0) {
                    let oldCursorNodeStart;
                    let oldCursorNodeText;
                    let cursorOffsetRelativeToOldCursorNode;
                    let newCursorNodeStart;
                    let newCursorNodeText;
                    if (opts.cursorNode && result.cursorNodeText) {
                        oldCursorNodeStart = opts.locStart(opts.cursorNode);
                        oldCursorNodeText = text.slice(oldCursorNodeStart, opts.locEnd(opts.cursorNode));
                        cursorOffsetRelativeToOldCursorNode = opts.cursorOffset - oldCursorNodeStart;
                        newCursorNodeStart = result.cursorNodeStart;
                        newCursorNodeText = result.cursorNodeText;
                    } else {
                        oldCursorNodeStart = 0;
                        oldCursorNodeText = text;
                        cursorOffsetRelativeToOldCursorNode = opts.cursorOffset;
                        newCursorNodeStart = 0;
                        newCursorNodeText = result.formatted;
                    }
                    if (oldCursorNodeText === newCursorNodeText) {
                        return {
                            formatted: result.formatted,
                            cursorOffset: newCursorNodeStart + cursorOffsetRelativeToOldCursorNode
                        };
                    }
                    const oldCursorNodeCharArray = oldCursorNodeText.split("");
                    oldCursorNodeCharArray.splice(cursorOffsetRelativeToOldCursorNode, 0, CURSOR);
                    const newCursorNodeCharArray = newCursorNodeText.split("");
                    const cursorNodeDiff = diff.diffArrays(oldCursorNodeCharArray, newCursorNodeCharArray);
                    let cursorOffset = newCursorNodeStart;
                    for (const entry of cursorNodeDiff){
                        if (entry.removed) {
                            if (entry.value.includes(CURSOR)) {
                                break;
                            }
                        } else {
                            cursorOffset += entry.count;
                        }
                    }
                    return {
                        formatted: result.formatted,
                        cursorOffset
                    };
                }
                return {
                    formatted: result.formatted
                };
            }
            function formatRange(text, opts) {
                const parsed = parser2.parse(text, opts);
                const { ast: ast2  } = parsed;
                text = parsed.text;
                const range = rangeUtil.calculateRange(text, opts, ast2);
                const { rangeStart , rangeEnd  } = range;
                const rangeString = text.slice(rangeStart, rangeEnd);
                const rangeStart2 = Math.min(rangeStart, text.lastIndexOf("\n", rangeStart) + 1);
                const indentString = text.slice(rangeStart2, rangeStart);
                const alignmentSize = util$1.getAlignmentSize(indentString, opts.tabWidth);
                const rangeResult = coreFormat(rangeString, Object.assign({}, opts, {
                    rangeStart: 0,
                    rangeEnd: Infinity,
                    // track the cursor offset only if it's within our range
                    cursorOffset: opts.cursorOffset >= rangeStart && opts.cursorOffset < rangeEnd ? opts.cursorOffset - rangeStart : -1
                }), alignmentSize);
                const rangeTrimmed = rangeResult.formatted.trimEnd();
                const rangeLeft = text.slice(0, rangeStart);
                const rangeRight = text.slice(rangeEnd);
                let { cursorOffset  } = opts;
                if (opts.cursorOffset >= rangeEnd) {
                    cursorOffset = opts.cursorOffset - rangeEnd + (rangeStart + rangeTrimmed.length);
                } else if (rangeResult.cursorOffset !== void 0) {
                    cursorOffset = rangeResult.cursorOffset + rangeStart;
                }
                let formatted;
                if (opts.endOfLine === "lf") {
                    formatted = rangeLeft + rangeTrimmed + rangeRight;
                } else {
                    const eol = convertEndOfLineToChars$2(opts.endOfLine);
                    if (cursorOffset >= 0) {
                        const parts = [
                            rangeLeft,
                            rangeTrimmed,
                            rangeRight
                        ];
                        let partIndex = 0;
                        let partOffset = cursorOffset;
                        while(partIndex < parts.length){
                            const part = parts[partIndex];
                            if (partOffset < part.length) {
                                parts[partIndex] = parts[partIndex].slice(0, partOffset) + PLACEHOLDERS.cursorOffset + parts[partIndex].slice(partOffset);
                                break;
                            }
                            partIndex++;
                            partOffset -= part.length;
                        }
                        const [newRangeLeft, newRangeTrimmed, newRangeRight] = parts;
                        formatted = (newRangeLeft.replace(/\n/g, eol) + newRangeTrimmed + newRangeRight.replace(/\n/g, eol)).replace(PLACEHOLDERS.cursorOffset, (_, index2)=>{
                            cursorOffset = index2;
                            return "";
                        });
                    } else {
                        formatted = rangeLeft.replace(/\n/g, eol) + rangeTrimmed + rangeRight.replace(/\n/g, eol);
                    }
                }
                return {
                    formatted,
                    cursorOffset
                };
            }
            function format5(text, opts) {
                const selectedParser = parser2.resolveParser(opts);
                const hasPragma2 = !selectedParser.hasPragma || selectedParser.hasPragma(text);
                if (opts.requirePragma && !hasPragma2) {
                    return {
                        formatted: text
                    };
                }
                if (opts.endOfLine === "auto") {
                    opts.endOfLine = guessEndOfLine$1(text);
                }
                const hasCursor = opts.cursorOffset >= 0;
                const hasRangeStart = opts.rangeStart > 0;
                const hasRangeEnd = opts.rangeEnd < text.length;
                if (text.includes("\r")) {
                    const offsetKeys = [
                        hasCursor && "cursorOffset",
                        hasRangeStart && "rangeStart",
                        hasRangeEnd && "rangeEnd"
                    ].filter(Boolean).sort((aKey, bKey)=>opts[aKey] - opts[bKey]);
                    for(let i = offsetKeys.length - 1; i >= 0; i--){
                        const key = offsetKeys[i];
                        text = text.slice(0, opts[key]) + PLACEHOLDERS[key] + text.slice(opts[key]);
                    }
                    text = text.replace(/\r\n?/g, "\n");
                    for(let i = 0; i < offsetKeys.length; i++){
                        const key = offsetKeys[i];
                        text = text.replace(PLACEHOLDERS[key], (_, index2)=>{
                            opts[key] = index2;
                            return "";
                        });
                    }
                }
                const hasUnicodeBOM = text.charAt(0) === BOM2;
                if (hasUnicodeBOM) {
                    text = text.slice(1);
                    if (hasCursor) {
                        opts.cursorOffset++;
                    }
                    if (hasRangeStart) {
                        opts.rangeStart++;
                    }
                    if (hasRangeEnd) {
                        opts.rangeEnd++;
                    }
                }
                if (!hasCursor) {
                    opts.cursorOffset = -1;
                }
                if (opts.rangeStart < 0) {
                    opts.rangeStart = 0;
                }
                if (opts.rangeEnd > text.length) {
                    opts.rangeEnd = text.length;
                }
                const result = hasRangeStart || hasRangeEnd ? formatRange(text, opts) : coreFormat(opts.insertPragma && opts.printer.insertPragma && !hasPragma2 ? opts.printer.insertPragma(text) : text, opts);
                if (hasUnicodeBOM) {
                    result.formatted = BOM2 + result.formatted;
                    if (hasCursor) {
                        result.cursorOffset++;
                    }
                }
                return result;
            }
            var core = {
                formatWithCursor (text, opts) {
                    opts = normalizeOptions$1(opts);
                    return format5(text, opts);
                },
                parse (text, opts, massage) {
                    opts = normalizeOptions$1(opts);
                    if (text.includes("\r")) {
                        text = text.replace(/\r\n?/g, "\n");
                    }
                    const parsed = parser2.parse(text, opts);
                    if (massage) {
                        parsed.ast = massageAst(parsed.ast, opts);
                    }
                    return parsed;
                },
                formatAST (ast2, opts) {
                    opts = normalizeOptions$1(opts);
                    const doc2 = astToDoc(ast2, opts);
                    return printDocToString$1(doc2, opts);
                },
                // Doesn't handle shebang for now
                formatDoc (doc2, opts) {
                    const debug2 = printDocToDebug(doc2);
                    opts = normalizeOptions$1(Object.assign({}, opts, {
                        parser: "babel"
                    }));
                    return format5(debug2, opts).formatted;
                },
                printToDoc (text, opts) {
                    opts = normalizeOptions$1(opts);
                    const parsed = parser2.parse(text, opts);
                    const { ast: ast2  } = parsed;
                    text = parsed.text;
                    attachComments(text, ast2, opts);
                    return astToDoc(ast2, opts);
                },
                printDocToString (doc2, opts) {
                    return printDocToString$1(doc2, normalizeOptions$1(opts));
                }
            };
            function clean(ast2, newObj, parent) {
                [
                    "raw",
                    // front-matter
                    "raws",
                    "sourceIndex",
                    "source",
                    "before",
                    "after",
                    "trailingComma"
                ].forEach((name2)=>{
                    delete newObj[name2];
                });
                if (ast2.type === "yaml") {
                    delete newObj.value;
                }
                if (ast2.type === "css-comment" && parent.type === "css-root" && parent.nodes.length !== 0 && // first non-front-matter comment
                (parent.nodes[0] === ast2 || (parent.nodes[0].type === "yaml" || parent.nodes[0].type === "toml") && parent.nodes[1] === ast2)) {
                    delete newObj.text;
                    if (/^\*\s*@(format|prettier)\s*$/.test(ast2.text)) {
                        return null;
                    }
                }
                if (ast2.type === "media-query" || ast2.type === "media-query-list" || ast2.type === "media-feature-expression") {
                    delete newObj.value;
                }
                if (ast2.type === "css-rule") {
                    delete newObj.params;
                }
                if (ast2.type === "selector-combinator") {
                    newObj.value = newObj.value.replace(/\s+/g, " ");
                }
                if (ast2.type === "media-feature") {
                    newObj.value = newObj.value.replace(/ /g, "");
                }
                if (ast2.type === "value-word" && (ast2.isColor && ast2.isHex || [
                    "initial",
                    "inherit",
                    "unset",
                    "revert"
                ].includes(newObj.value.replace().toLowerCase())) || ast2.type === "media-feature" || ast2.type === "selector-root-invalid" || ast2.type === "selector-pseudo") {
                    newObj.value = newObj.value.toLowerCase();
                }
                if (ast2.type === "css-decl") {
                    newObj.prop = newObj.prop.toLowerCase();
                }
                if (ast2.type === "css-atrule" || ast2.type === "css-import") {
                    newObj.name = newObj.name.toLowerCase();
                }
                if (ast2.type === "value-number") {
                    newObj.unit = newObj.unit.toLowerCase();
                }
                if ((ast2.type === "media-feature" || ast2.type === "media-keyword" || ast2.type === "media-type" || ast2.type === "media-unknown" || ast2.type === "media-url" || ast2.type === "media-value" || ast2.type === "selector-attribute" || ast2.type === "selector-string" || ast2.type === "selector-class" || ast2.type === "selector-combinator" || ast2.type === "value-string") && newObj.value) {
                    newObj.value = cleanCSSStrings(newObj.value);
                }
                if (ast2.type === "selector-attribute") {
                    newObj.attribute = newObj.attribute.trim();
                    if (newObj.namespace) {
                        if (typeof newObj.namespace === "string") {
                            newObj.namespace = newObj.namespace.trim();
                            if (newObj.namespace.length === 0) {
                                newObj.namespace = true;
                            }
                        }
                    }
                    if (newObj.value) {
                        newObj.value = newObj.value.trim().replace(/^['"]|['"]$/g, "");
                        delete newObj.quoted;
                    }
                }
                if ((ast2.type === "media-value" || ast2.type === "media-type" || ast2.type === "value-number" || ast2.type === "selector-root-invalid" || ast2.type === "selector-class" || ast2.type === "selector-combinator" || ast2.type === "selector-tag") && newObj.value) {
                    newObj.value = newObj.value.replace(/([\d.eE+-]+)([a-zA-Z]*)/g, (match, numStr, unit)=>{
                        const num = Number(numStr);
                        return isNaN(num) ? match : num + unit.toLowerCase();
                    });
                }
                if (ast2.type === "selector-tag") {
                    const lowercasedValue = ast2.value.toLowerCase();
                    if ([
                        "from",
                        "to"
                    ].includes(lowercasedValue)) {
                        newObj.value = lowercasedValue;
                    }
                }
                if (ast2.type === "css-atrule" && ast2.name.toLowerCase() === "supports") {
                    delete newObj.value;
                }
                if (ast2.type === "selector-unknown") {
                    delete newObj.value;
                }
            }
            function cleanCSSStrings(value1) {
                return value1.replace(/'/g, '"').replace(/\\([^a-fA-F\d])/g, "$1");
            }
            var clean_1 = clean;
            const { builders: { hardline: hardline$3 , literalline: literalline$1 , concat: concat$4 , markAsRoot: markAsRoot$1  } , utils: { mapDoc: mapDoc$1  }  } = document;
            function embed(path6, print2, textToDoc2) {
                const node = path6.getValue();
                if (node.type === "yaml") {
                    return markAsRoot$1(concat$4([
                        "---",
                        hardline$3,
                        node.value.trim() ? replaceNewlinesWithLiterallines(textToDoc2(node.value, {
                            parser: "yaml"
                        })) : "",
                        "---",
                        hardline$3
                    ]));
                }
                return null;
                function replaceNewlinesWithLiterallines(doc2) {
                    return mapDoc$1(doc2, (currentDoc)=>typeof currentDoc === "string" && currentDoc.includes("\n") ? concat$4(currentDoc.split(/(\n)/g).map((v, i)=>i % 2 === 0 ? v : literalline$1)) : currentDoc);
                }
            }
            var embed_1 = embed;
            const detectNewline = (string3)=>{
                if (typeof string3 !== "string") {
                    throw new TypeError("Expected a string");
                }
                const newlines = string3.match(/(?:\r?\n)/g) || [];
                if (newlines.length === 0) {
                    return;
                }
                const crlf = newlines.filter((newline)=>newline === "\r\n").length;
                const lf = newlines.length - crlf;
                return crlf > lf ? "\r\n" : "\n";
            };
            var detectNewline_1 = detectNewline;
            var graceful = (string3)=>typeof string3 === "string" && detectNewline(string3) || "\n";
            detectNewline_1.graceful = graceful;
            var build = createCommonjsModule(function(module2, exports2) {
                Object.defineProperty(exports2, "__esModule", {
                    value: true
                });
                exports2.extract = extract;
                exports2.strip = strip;
                exports2.parse = parse8;
                exports2.parseWithComments = parseWithComments;
                exports2.print = print2;
                function _os() {
                    const data2 = require$$0$1;
                    _os = function _os2() {
                        return data2;
                    };
                    return data2;
                }
                function _detectNewline() {
                    const data2 = _interopRequireDefault(detectNewline_1);
                    _detectNewline = function _detectNewline2() {
                        return data2;
                    };
                    return data2;
                }
                function _interopRequireDefault(obj) {
                    return obj && obj.__esModule ? obj : {
                        default: obj
                    };
                }
                const commentEndRe = /\*\/$/;
                const commentStartRe = /^\/\*\*/;
                const docblockRe = /^\s*(\/\*\*?(.|\r?\n)*?\*\/)/;
                const lineCommentRe = /(^|\s+)\/\/([^\r\n]*)/g;
                const ltrimNewlineRe = /^(\r?\n)+/;
                const multilineRe = /(?:^|\r?\n) *(@[^\r\n]*?) *\r?\n *(?![^@\r\n]*\/\/[^]*)([^@\r\n\s][^@\r\n]+?) *\r?\n/g;
                const propertyRe = /(?:^|\r?\n) *@(\S+) *([^\r\n]*)/g;
                const stringStartRe = /(\r?\n|^) *\* ?/g;
                function extract(contents) {
                    const match = contents.match(docblockRe);
                    return match ? match[0].trimLeft() : "";
                }
                function strip(contents) {
                    const match = contents.match(docblockRe);
                    return match && match[0] ? contents.substring(match[0].length) : contents;
                }
                function parse8(docblock) {
                    return parseWithComments(docblock).pragmas;
                }
                function parseWithComments(docblock) {
                    const line2 = (0, _detectNewline().default)(docblock) || _os().EOL;
                    docblock = docblock.replace(commentStartRe, "").replace(commentEndRe, "").replace(stringStartRe, "$1");
                    let prev = "";
                    while(prev !== docblock){
                        prev = docblock;
                        docblock = docblock.replace(multilineRe, "".concat(line2, "$1 $2").concat(line2));
                    }
                    docblock = docblock.replace(ltrimNewlineRe, "").trimRight();
                    const result = /* @__PURE__ */ Object.create(null);
                    const comments2 = docblock.replace(propertyRe, "").replace(ltrimNewlineRe, "").trimRight();
                    let match;
                    while(match = propertyRe.exec(docblock)){
                        const nextPragma = match[2].replace(lineCommentRe, "");
                        if (typeof result[match[1]] === "string" || Array.isArray(result[match[1]])) {
                            result[match[1]] = [].concat(result[match[1]], nextPragma);
                        } else {
                            result[match[1]] = nextPragma;
                        }
                    }
                    return {
                        comments: comments2,
                        pragmas: result
                    };
                }
                function print2({ comments: comments2 = "" , pragmas: pragmas2 = {}  }) {
                    const line2 = (0, _detectNewline().default)(comments2) || _os().EOL;
                    const head2 = "/**";
                    const start = " *";
                    const tail = " */";
                    const keys = Object.keys(pragmas2);
                    const printedObject = keys.map((key)=>printKeyValues(key, pragmas2[key])).reduce((arr2, next)=>arr2.concat(next), []).map((keyValue)=>start + " " + keyValue + line2).join("");
                    if (!comments2) {
                        if (keys.length === 0) {
                            return "";
                        }
                        if (keys.length === 1 && !Array.isArray(pragmas2[keys[0]])) {
                            const value1 = pragmas2[keys[0]];
                            return "".concat(head2, " ").concat(printKeyValues(keys[0], value1)[0]).concat(tail);
                        }
                    }
                    const printedComments = comments2.split(line2).map((textLine)=>"".concat(start, " ").concat(textLine)).join(line2) + line2;
                    return head2 + line2 + (comments2 ? printedComments : "") + (comments2 && keys.length ? start + line2 : "") + printedObject + tail;
                }
                function printKeyValues(key, valueOrArray) {
                    return [].concat(valueOrArray).map((value1)=>"@".concat(key, " ").concat(value1).trim());
                }
            });
            unwrapExports(build);
            var build_1 = build.extract;
            var build_2 = build.strip;
            var build_3 = build.parse;
            var build_4 = build.parseWithComments;
            var build_5 = build.print;
            function hasPragma(text) {
                const pragmas2 = Object.keys(build.parse(build.extract(text)));
                return pragmas2.includes("prettier") || pragmas2.includes("format");
            }
            function insertPragma(text) {
                const parsedDocblock = build.parseWithComments(build.extract(text));
                const pragmas2 = Object.assign({
                    format: ""
                }, parsedDocblock.pragmas);
                const newDocblock = build.print({
                    pragmas: pragmas2,
                    comments: parsedDocblock.comments.replace(/^(\s+?\r?\n)+/, "")
                }).replace(/(\r\n|\r)/g, "\n");
                const strippedText = build.strip(text);
                const separatingNewlines = strippedText.startsWith("\n") ? "\n" : "\n\n";
                return newDocblock + separatingNewlines + strippedText;
            }
            var pragma = {
                hasPragma,
                insertPragma
            };
            const DELIMITER_MAP = {
                "---": "yaml",
                "+++": "toml"
            };
            function parse$1(text) {
                const delimiterRegex = Object.keys(DELIMITER_MAP).map(escapeStringRegexp$2).join("|");
                const match = text.match(// trailing spaces after delimiters are allowed
                new RegExp("^(".concat(delimiterRegex, ")[^\\n\\S]*\\n(?:([\\s\\S]*?)\\n)?\\1[^\\n\\S]*(\\n|$)")));
                if (match === null) {
                    return {
                        frontMatter: null,
                        content: text
                    };
                }
                const [raw, delimiter, value1] = match;
                return {
                    frontMatter: {
                        type: DELIMITER_MAP[delimiter],
                        value: value1,
                        raw: raw.replace(/\n$/, "")
                    },
                    content: raw.replace(/[^\n]/g, " ") + text.slice(raw.length)
                };
            }
            var frontMatter = parse$1;
            function hasPragma$1(text) {
                return pragma.hasPragma(frontMatter(text).content);
            }
            function insertPragma$1(text) {
                const { frontMatter: frontMatter$1 , content  } = frontMatter(text);
                return (frontMatter$1 ? frontMatter$1.raw + "\n\n" : "") + pragma.insertPragma(content);
            }
            var pragma$1 = {
                hasPragma: hasPragma$1,
                insertPragma: insertPragma$1
            };
            var lineColumnToIndex = function lineColumnToIndex2(lineColumn, text) {
                let index2 = 0;
                for(let i = 0; i < lineColumn.line - 1; ++i){
                    index2 = text.indexOf("\n", index2) + 1;
                    if (index2 === -1) {
                        return -1;
                    }
                }
                return index2 + lineColumn.column;
            };
            const { getLast: getLast$1 , skipEverythingButNewLine: skipEverythingButNewLine$2  } = util$1;
            function calculateLocStart(node, text) {
                if (node.source) {
                    return lineColumnToIndex(node.source.start, text) - 1;
                }
                return null;
            }
            function calculateLocEnd(node, text) {
                if (node.type === "css-comment" && node.inline) {
                    return skipEverythingButNewLine$2(text, node.source.startOffset);
                }
                const endNode = node.nodes && getLast$1(node.nodes);
                if (endNode && node.source && !node.source.end) {
                    node = endNode;
                }
                if (node.source && node.source.end) {
                    return lineColumnToIndex(node.source.end, text);
                }
                return null;
            }
            function calculateLoc(node, text) {
                if (node && typeof node === "object") {
                    if (node.source) {
                        node.source.startOffset = calculateLocStart(node, text);
                        node.source.endOffset = calculateLocEnd(node, text);
                    }
                    for(const key in node){
                        calculateLoc(node[key], text);
                    }
                }
            }
            function replaceQuotesInInlineComments(text) {
                let state = "initial";
                let stateToReturnFromQuotes = "initial";
                let inlineCommentStartIndex;
                let inlineCommentContainsQuotes = false;
                const inlineCommentsToReplace = [];
                for(let i = 0; i < text.length; i++){
                    const c = text[i];
                    switch(state){
                        case "initial":
                            if (c === "'") {
                                state = "single-quotes";
                                continue;
                            }
                            if (c === '"') {
                                state = "double-quotes";
                                continue;
                            }
                            if ((c === "u" || c === "U") && text.slice(i, i + 4).toLowerCase() === "url(") {
                                state = "url";
                                i += 3;
                                continue;
                            }
                            if (c === "*" && text[i - 1] === "/") {
                                state = "comment-block";
                                continue;
                            }
                            if (c === "/" && text[i - 1] === "/") {
                                state = "comment-inline";
                                inlineCommentStartIndex = i - 1;
                                continue;
                            }
                            continue;
                        case "single-quotes":
                            if (c === "'" && text[i - 1] !== "\\") {
                                state = stateToReturnFromQuotes;
                                stateToReturnFromQuotes = "initial";
                            }
                            if (c === "\n" || c === "\r") {
                                return text;
                            }
                            continue;
                        case "double-quotes":
                            if (c === '"' && text[i - 1] !== "\\") {
                                state = stateToReturnFromQuotes;
                                stateToReturnFromQuotes = "initial";
                            }
                            if (c === "\n" || c === "\r") {
                                return text;
                            }
                            continue;
                        case "url":
                            if (c === ")") {
                                state = "initial";
                            }
                            if (c === "\n" || c === "\r") {
                                return text;
                            }
                            if (c === "'") {
                                state = "single-quotes";
                                stateToReturnFromQuotes = "url";
                                continue;
                            }
                            if (c === '"') {
                                state = "double-quotes";
                                stateToReturnFromQuotes = "url";
                                continue;
                            }
                            continue;
                        case "comment-block":
                            if (c === "/" && text[i - 1] === "*") {
                                state = "initial";
                            }
                            continue;
                        case "comment-inline":
                            if (c === '"' || c === "'") {
                                inlineCommentContainsQuotes = true;
                            }
                            if (c === "\n" || c === "\r") {
                                if (inlineCommentContainsQuotes) {
                                    inlineCommentsToReplace.push([
                                        inlineCommentStartIndex,
                                        i
                                    ]);
                                }
                                state = "initial";
                                inlineCommentContainsQuotes = false;
                            }
                            continue;
                    }
                }
                for (const [start, end] of inlineCommentsToReplace){
                    text = text.slice(0, start) + text.slice(start, end).replace(/'/g, "\uFFFE").replace(/"/g, "\uFFFF") + text.slice(end);
                }
                return text;
            }
            function restoreQuotesInInlineComments(text) {
                return text.replace(/\ufffe/g, "'").replace(/\uffff/g, '"');
            }
            var loc$1 = {
                calculateLoc,
                replaceQuotesInInlineComments,
                restoreQuotesInInlineComments
            };
            const colorAdjusterFunctions = [
                "red",
                "green",
                "blue",
                "alpha",
                "a",
                "rgb",
                "hue",
                "h",
                "saturation",
                "s",
                "lightness",
                "l",
                "whiteness",
                "w",
                "blackness",
                "b",
                "tint",
                "shade",
                "blend",
                "blenda",
                "contrast",
                "hsl",
                "hsla",
                "hwb",
                "hwba"
            ];
            function getAncestorCounter(path6, typeOrTypes) {
                const types = [].concat(typeOrTypes);
                let counter = -1;
                let ancestorNode;
                while(ancestorNode = path6.getParentNode(++counter)){
                    if (types.includes(ancestorNode.type)) {
                        return counter;
                    }
                }
                return -1;
            }
            function getAncestorNode(path6, typeOrTypes) {
                const counter = getAncestorCounter(path6, typeOrTypes);
                return counter === -1 ? null : path6.getParentNode(counter);
            }
            function getPropOfDeclNode(path6) {
                const declAncestorNode = getAncestorNode(path6, "css-decl");
                return declAncestorNode && declAncestorNode.prop && declAncestorNode.prop.toLowerCase();
            }
            function isSCSS(parser3, text) {
                const hasExplicitParserChoice = parser3 === "less" || parser3 === "scss";
                const IS_POSSIBLY_SCSS = /(\w\s*:\s*[^}:]+|#){|@import[^\n]+(?:url|,)/;
                return hasExplicitParserChoice ? parser3 === "scss" : IS_POSSIBLY_SCSS.test(text);
            }
            function isWideKeywords(value1) {
                return [
                    "initial",
                    "inherit",
                    "unset",
                    "revert"
                ].includes(value1.toLowerCase());
            }
            function isKeyframeAtRuleKeywords(path6, value1) {
                const atRuleAncestorNode = getAncestorNode(path6, "css-atrule");
                return atRuleAncestorNode && atRuleAncestorNode.name && atRuleAncestorNode.name.toLowerCase().endsWith("keyframes") && [
                    "from",
                    "to"
                ].includes(value1.toLowerCase());
            }
            function maybeToLowerCase(value1) {
                return value1.includes("$") || value1.includes("@") || value1.includes("#") || value1.startsWith("%") || value1.startsWith("--") || value1.startsWith(":--") || value1.includes("(") && value1.includes(")") ? value1 : value1.toLowerCase();
            }
            function insideValueFunctionNode(path6, functionName) {
                const funcAncestorNode = getAncestorNode(path6, "value-func");
                return funcAncestorNode && funcAncestorNode.value && funcAncestorNode.value.toLowerCase() === functionName;
            }
            function insideICSSRuleNode(path6) {
                const ruleAncestorNode = getAncestorNode(path6, "css-rule");
                return ruleAncestorNode && ruleAncestorNode.raws && ruleAncestorNode.raws.selector && (ruleAncestorNode.raws.selector.startsWith(":import") || ruleAncestorNode.raws.selector.startsWith(":export"));
            }
            function insideAtRuleNode(path6, atRuleNameOrAtRuleNames) {
                const atRuleNames = [].concat(atRuleNameOrAtRuleNames);
                const atRuleAncestorNode = getAncestorNode(path6, "css-atrule");
                return atRuleAncestorNode && atRuleNames.includes(atRuleAncestorNode.name.toLowerCase());
            }
            function insideURLFunctionInImportAtRuleNode(path6) {
                const node = path6.getValue();
                const atRuleAncestorNode = getAncestorNode(path6, "css-atrule");
                return atRuleAncestorNode && atRuleAncestorNode.name === "import" && node.groups[0].value === "url" && node.groups.length === 2;
            }
            function isURLFunctionNode(node) {
                return node.type === "value-func" && node.value.toLowerCase() === "url";
            }
            function isLastNode(path6, node) {
                const parentNode = path6.getParentNode();
                if (!parentNode) {
                    return false;
                }
                const { nodes  } = parentNode;
                return nodes && nodes.indexOf(node) === nodes.length - 1;
            }
            function isDetachedRulesetDeclarationNode(node) {
                if (!node.selector) {
                    return false;
                }
                return typeof node.selector === "string" && /^@.+:.*$/.test(node.selector) || node.selector.value && /^@.+:.*$/.test(node.selector.value);
            }
            function isForKeywordNode(node) {
                return node.type === "value-word" && [
                    "from",
                    "through",
                    "end"
                ].includes(node.value);
            }
            function isIfElseKeywordNode(node) {
                return node.type === "value-word" && [
                    "and",
                    "or",
                    "not"
                ].includes(node.value);
            }
            function isEachKeywordNode(node) {
                return node.type === "value-word" && node.value === "in";
            }
            function isMultiplicationNode(node) {
                return node.type === "value-operator" && node.value === "*";
            }
            function isDivisionNode(node) {
                return node.type === "value-operator" && node.value === "/";
            }
            function isAdditionNode(node) {
                return node.type === "value-operator" && node.value === "+";
            }
            function isSubtractionNode(node) {
                return node.type === "value-operator" && node.value === "-";
            }
            function isModuloNode(node) {
                return node.type === "value-operator" && node.value === "%";
            }
            function isMathOperatorNode(node) {
                return isMultiplicationNode(node) || isDivisionNode(node) || isAdditionNode(node) || isSubtractionNode(node) || isModuloNode(node);
            }
            function isEqualityOperatorNode(node) {
                return node.type === "value-word" && [
                    "==",
                    "!="
                ].includes(node.value);
            }
            function isRelationalOperatorNode(node) {
                return node.type === "value-word" && [
                    "<",
                    ">",
                    "<=",
                    ">="
                ].includes(node.value);
            }
            function isSCSSControlDirectiveNode(node) {
                return node.type === "css-atrule" && [
                    "if",
                    "else",
                    "for",
                    "each",
                    "while"
                ].includes(node.name);
            }
            function isSCSSNestedPropertyNode(node) {
                if (!node.selector) {
                    return false;
                }
                return node.selector.replace(/\/\*.*?\*\//, "").replace(/\/\/.*?\n/, "").trim().endsWith(":");
            }
            function isDetachedRulesetCallNode(node) {
                return node.raws && node.raws.params && /^\(\s*\)$/.test(node.raws.params);
            }
            function isTemplatePlaceholderNode(node) {
                return node.name.startsWith("prettier-placeholder");
            }
            function isTemplatePropNode(node) {
                return node.prop.startsWith("@prettier-placeholder");
            }
            function isPostcssSimpleVarNode(currentNode, nextNode) {
                return currentNode.value === "$$" && currentNode.type === "value-func" && nextNode && nextNode.type === "value-word" && !nextNode.raws.before;
            }
            function hasComposesNode(node) {
                return node.value && node.value.type === "value-root" && node.value.group && node.value.group.type === "value-value" && node.prop.toLowerCase() === "composes";
            }
            function hasParensAroundNode(node) {
                return node.value && node.value.group && node.value.group.group && node.value.group.group.type === "value-paren_group" && node.value.group.group.open !== null && node.value.group.group.close !== null;
            }
            function hasEmptyRawBefore(node) {
                return node.raws && node.raws.before === "";
            }
            function isKeyValuePairNode(node) {
                return node.type === "value-comma_group" && node.groups && node.groups[1] && node.groups[1].type === "value-colon";
            }
            function isKeyValuePairInParenGroupNode(node) {
                return node.type === "value-paren_group" && node.groups && node.groups[0] && isKeyValuePairNode(node.groups[0]);
            }
            function isSCSSMapItemNode(path6) {
                const node = path6.getValue();
                if (node.groups.length === 0) {
                    return false;
                }
                const parentParentNode = path6.getParentNode(1);
                if (!isKeyValuePairInParenGroupNode(node) && !(parentParentNode && isKeyValuePairInParenGroupNode(parentParentNode))) {
                    return false;
                }
                const declNode = getAncestorNode(path6, "css-decl");
                if (declNode && declNode.prop && declNode.prop.startsWith("$")) {
                    return true;
                }
                if (isKeyValuePairInParenGroupNode(parentParentNode)) {
                    return true;
                }
                if (parentParentNode.type === "value-func") {
                    return true;
                }
                return false;
            }
            function isInlineValueCommentNode(node) {
                return node.type === "value-comment" && node.inline;
            }
            function isHashNode(node) {
                return node.type === "value-word" && node.value === "#";
            }
            function isLeftCurlyBraceNode(node) {
                return node.type === "value-word" && node.value === "{";
            }
            function isRightCurlyBraceNode(node) {
                return node.type === "value-word" && node.value === "}";
            }
            function isWordNode(node) {
                return [
                    "value-word",
                    "value-atword"
                ].includes(node.type);
            }
            function isColonNode(node) {
                return node.type === "value-colon";
            }
            function isMediaAndSupportsKeywords(node) {
                return node.value && [
                    "not",
                    "and",
                    "or"
                ].includes(node.value.toLowerCase());
            }
            function isColorAdjusterFuncNode(node) {
                if (node.type !== "value-func") {
                    return false;
                }
                return colorAdjusterFunctions.includes(node.value.toLowerCase());
            }
            function isLessParser(options2) {
                return options2.parser === "css" || options2.parser === "less";
            }
            function lastLineHasInlineComment(text) {
                return /\/\//.test(text.split(/[\r\n]/).pop());
            }
            var utils$2 = {
                getAncestorCounter,
                getAncestorNode,
                getPropOfDeclNode,
                maybeToLowerCase,
                insideValueFunctionNode,
                insideICSSRuleNode,
                insideAtRuleNode,
                insideURLFunctionInImportAtRuleNode,
                isKeyframeAtRuleKeywords,
                isWideKeywords,
                isSCSS,
                isLastNode,
                isLessParser,
                isSCSSControlDirectiveNode,
                isDetachedRulesetDeclarationNode,
                isRelationalOperatorNode,
                isEqualityOperatorNode,
                isMultiplicationNode,
                isDivisionNode,
                isAdditionNode,
                isSubtractionNode,
                isModuloNode,
                isMathOperatorNode,
                isEachKeywordNode,
                isForKeywordNode,
                isURLFunctionNode,
                isIfElseKeywordNode,
                hasComposesNode,
                hasParensAroundNode,
                hasEmptyRawBefore,
                isSCSSNestedPropertyNode,
                isDetachedRulesetCallNode,
                isTemplatePlaceholderNode,
                isTemplatePropNode,
                isPostcssSimpleVarNode,
                isKeyValuePairNode,
                isKeyValuePairInParenGroupNode,
                isSCSSMapItemNode,
                isInlineValueCommentNode,
                isHashNode,
                isLeftCurlyBraceNode,
                isRightCurlyBraceNode,
                isWordNode,
                isColonNode,
                isMediaAndSupportsKeywords,
                isColorAdjusterFuncNode,
                lastLineHasInlineComment
            };
            const { insertPragma: insertPragma$2  } = pragma$1;
            const { printNumber: printNumber$1 , printString: printString$1 , hasIgnoreComment: hasIgnoreComment$1 , hasNewline: hasNewline$3  } = util$1;
            const { isNextLineEmpty: isNextLineEmpty$2  } = utilShared;
            const { restoreQuotesInInlineComments: restoreQuotesInInlineComments$1  } = loc$1;
            const { builders: { concat: concat$5 , join: join$2 , line: line$2 , hardline: hardline$4 , softline: softline$1 , group: group$1 , fill: fill$2 , indent: indent$2 , dedent: dedent$1 , ifBreak: ifBreak$1  } , utils: { removeLines: removeLines$1  }  } = document;
            const { getAncestorNode: getAncestorNode$1 , getPropOfDeclNode: getPropOfDeclNode$1 , maybeToLowerCase: maybeToLowerCase$1 , insideValueFunctionNode: insideValueFunctionNode$1 , insideICSSRuleNode: insideICSSRuleNode$1 , insideAtRuleNode: insideAtRuleNode$1 , insideURLFunctionInImportAtRuleNode: insideURLFunctionInImportAtRuleNode$1 , isKeyframeAtRuleKeywords: isKeyframeAtRuleKeywords$1 , isWideKeywords: isWideKeywords$1 , isSCSS: isSCSS$1 , isLastNode: isLastNode$1 , isLessParser: isLessParser$1 , isSCSSControlDirectiveNode: isSCSSControlDirectiveNode$1 , isDetachedRulesetDeclarationNode: isDetachedRulesetDeclarationNode$1 , isRelationalOperatorNode: isRelationalOperatorNode$1 , isEqualityOperatorNode: isEqualityOperatorNode$1 , isMultiplicationNode: isMultiplicationNode$1 , isDivisionNode: isDivisionNode$1 , isAdditionNode: isAdditionNode$1 , isSubtractionNode: isSubtractionNode$1 , isMathOperatorNode: isMathOperatorNode$1 , isEachKeywordNode: isEachKeywordNode$1 , isForKeywordNode: isForKeywordNode$1 , isURLFunctionNode: isURLFunctionNode$1 , isIfElseKeywordNode: isIfElseKeywordNode$1 , hasComposesNode: hasComposesNode$1 , hasParensAroundNode: hasParensAroundNode$1 , hasEmptyRawBefore: hasEmptyRawBefore$1 , isKeyValuePairNode: isKeyValuePairNode$1 , isDetachedRulesetCallNode: isDetachedRulesetCallNode$1 , isTemplatePlaceholderNode: isTemplatePlaceholderNode$1 , isTemplatePropNode: isTemplatePropNode$1 , isPostcssSimpleVarNode: isPostcssSimpleVarNode$1 , isSCSSMapItemNode: isSCSSMapItemNode$1 , isInlineValueCommentNode: isInlineValueCommentNode$1 , isHashNode: isHashNode$1 , isLeftCurlyBraceNode: isLeftCurlyBraceNode$1 , isRightCurlyBraceNode: isRightCurlyBraceNode$1 , isWordNode: isWordNode$1 , isColonNode: isColonNode$1 , isMediaAndSupportsKeywords: isMediaAndSupportsKeywords$1 , isColorAdjusterFuncNode: isColorAdjusterFuncNode$1 , lastLineHasInlineComment: lastLineHasInlineComment$1  } = utils$2;
            function shouldPrintComma(options2) {
                switch(options2.trailingComma){
                    case "all":
                    case "es5":
                        return true;
                    case "none":
                    default:
                        return false;
                }
            }
            function genericPrint(path6, options2, print2) {
                const node = path6.getValue();
                if (!node) {
                    return "";
                }
                if (typeof node === "string") {
                    return node;
                }
                switch(node.type){
                    case "yaml":
                    case "toml":
                        return concat$5([
                            node.raw,
                            hardline$4
                        ]);
                    case "css-root":
                        {
                            const nodes = printNodeSequence(path6, options2, print2);
                            if (nodes.parts.length) {
                                return concat$5([
                                    nodes,
                                    options2.__isHTMLStyleAttribute ? "" : hardline$4
                                ]);
                            }
                            return nodes;
                        }
                    case "css-comment":
                        {
                            const isInlineComment = node.inline || node.raws.inline;
                            const text = options2.originalText.slice(options2.locStart(node), options2.locEnd(node));
                            return isInlineComment ? text.trimEnd() : text;
                        }
                    case "css-rule":
                        {
                            return concat$5([
                                path6.call(print2, "selector"),
                                node.important ? " !important" : "",
                                node.nodes ? concat$5([
                                    node.selector && node.selector.type === "selector-unknown" && lastLineHasInlineComment$1(node.selector.value) ? line$2 : " ",
                                    "{",
                                    node.nodes.length > 0 ? indent$2(concat$5([
                                        hardline$4,
                                        printNodeSequence(path6, options2, print2)
                                    ])) : "",
                                    hardline$4,
                                    "}",
                                    isDetachedRulesetDeclarationNode$1(node) ? ";" : ""
                                ]) : ";"
                            ]);
                        }
                    case "css-decl":
                        {
                            const parentNode = path6.getParentNode();
                            return concat$5([
                                node.raws.before.replace(/[\s;]/g, ""),
                                insideICSSRuleNode$1(path6) ? node.prop : maybeToLowerCase$1(node.prop),
                                node.raws.between.trim() === ":" ? ":" : node.raws.between.trim(),
                                node.extend ? "" : " ",
                                hasComposesNode$1(node) ? removeLines$1(path6.call(print2, "value")) : path6.call(print2, "value"),
                                node.raws.important ? node.raws.important.replace(/\s*!\s*important/i, " !important") : node.important ? " !important" : "",
                                node.raws.scssDefault ? node.raws.scssDefault.replace(/\s*!default/i, " !default") : node.scssDefault ? " !default" : "",
                                node.raws.scssGlobal ? node.raws.scssGlobal.replace(/\s*!global/i, " !global") : node.scssGlobal ? " !global" : "",
                                node.nodes ? concat$5([
                                    " {",
                                    indent$2(concat$5([
                                        softline$1,
                                        printNodeSequence(path6, options2, print2)
                                    ])),
                                    softline$1,
                                    "}"
                                ]) : isTemplatePropNode$1(node) && !parentNode.raws.semicolon && options2.originalText[options2.locEnd(node) - 1] !== ";" ? "" : ";"
                            ]);
                        }
                    case "css-atrule":
                        {
                            const parentNode = path6.getParentNode();
                            const isTemplatePlaceholderNodeWithoutSemiColon = isTemplatePlaceholderNode$1(node) && !parentNode.raws.semicolon && options2.originalText[options2.locEnd(node) - 1] !== ";";
                            if (isLessParser$1(options2)) {
                                if (node.mixin) {
                                    return concat$5([
                                        path6.call(print2, "selector"),
                                        node.important ? " !important" : "",
                                        isTemplatePlaceholderNodeWithoutSemiColon ? "" : ";"
                                    ]);
                                }
                                if (node.function) {
                                    return concat$5([
                                        node.name,
                                        concat$5([
                                            path6.call(print2, "params")
                                        ]),
                                        isTemplatePlaceholderNodeWithoutSemiColon ? "" : ";"
                                    ]);
                                }
                                if (node.variable) {
                                    return concat$5([
                                        "@",
                                        node.name,
                                        ": ",
                                        node.value ? concat$5([
                                            path6.call(print2, "value")
                                        ]) : "",
                                        node.raws.between.trim() ? node.raws.between.trim() + " " : "",
                                        node.nodes ? concat$5([
                                            "{",
                                            indent$2(concat$5([
                                                node.nodes.length > 0 ? softline$1 : "",
                                                printNodeSequence(path6, options2, print2)
                                            ])),
                                            softline$1,
                                            "}"
                                        ]) : "",
                                        isTemplatePlaceholderNodeWithoutSemiColon ? "" : ";"
                                    ]);
                                }
                            }
                            return concat$5([
                                "@",
                                // If a Less file ends up being parsed with the SCSS parser, Less
                                // variable declarations will be parsed as at-rules with names ending
                                // with a colon, so keep the original case then.
                                isDetachedRulesetCallNode$1(node) || node.name.endsWith(":") ? node.name : maybeToLowerCase$1(node.name),
                                node.params ? concat$5([
                                    isDetachedRulesetCallNode$1(node) ? "" : isTemplatePlaceholderNode$1(node) ? node.raws.afterName === "" ? "" : node.name.endsWith(":") ? " " : /^\s*\n\s*\n/.test(node.raws.afterName) ? concat$5([
                                        hardline$4,
                                        hardline$4
                                    ]) : /^\s*\n/.test(node.raws.afterName) ? hardline$4 : " " : " ",
                                    path6.call(print2, "params")
                                ]) : "",
                                node.selector ? indent$2(concat$5([
                                    " ",
                                    path6.call(print2, "selector")
                                ])) : "",
                                node.value ? group$1(concat$5([
                                    " ",
                                    path6.call(print2, "value"),
                                    isSCSSControlDirectiveNode$1(node) ? hasParensAroundNode$1(node) ? " " : line$2 : ""
                                ])) : node.name === "else" ? " " : "",
                                node.nodes ? concat$5([
                                    isSCSSControlDirectiveNode$1(node) ? "" : " ",
                                    "{",
                                    indent$2(concat$5([
                                        node.nodes.length > 0 ? softline$1 : "",
                                        printNodeSequence(path6, options2, print2)
                                    ])),
                                    softline$1,
                                    "}"
                                ]) : isTemplatePlaceholderNodeWithoutSemiColon ? "" : ";"
                            ]);
                        }
                    case "media-query-list":
                        {
                            const parts = [];
                            path6.each((childPath)=>{
                                const node2 = childPath.getValue();
                                if (node2.type === "media-query" && node2.value === "") {
                                    return;
                                }
                                parts.push(childPath.call(print2));
                            }, "nodes");
                            return group$1(indent$2(join$2(line$2, parts)));
                        }
                    case "media-query":
                        {
                            return concat$5([
                                join$2(" ", path6.map(print2, "nodes")),
                                isLastNode$1(path6, node) ? "" : ","
                            ]);
                        }
                    case "media-type":
                        {
                            return adjustNumbers(adjustStrings(node.value, options2));
                        }
                    case "media-feature-expression":
                        {
                            if (!node.nodes) {
                                return node.value;
                            }
                            return concat$5([
                                "(",
                                concat$5(path6.map(print2, "nodes")),
                                ")"
                            ]);
                        }
                    case "media-feature":
                        {
                            return maybeToLowerCase$1(adjustStrings(node.value.replace(/ +/g, " "), options2));
                        }
                    case "media-colon":
                        {
                            return concat$5([
                                node.value,
                                " "
                            ]);
                        }
                    case "media-value":
                        {
                            return adjustNumbers(adjustStrings(node.value, options2));
                        }
                    case "media-keyword":
                        {
                            return adjustStrings(node.value, options2);
                        }
                    case "media-url":
                        {
                            return adjustStrings(node.value.replace(/^url\(\s+/gi, "url(").replace(/\s+\)$/gi, ")"), options2);
                        }
                    case "media-unknown":
                        {
                            return node.value;
                        }
                    case "selector-root":
                        {
                            return group$1(concat$5([
                                insideAtRuleNode$1(path6, "custom-selector") ? concat$5([
                                    getAncestorNode$1(path6, "css-atrule").customSelector,
                                    line$2
                                ]) : "",
                                join$2(concat$5([
                                    ",",
                                    insideAtRuleNode$1(path6, [
                                        "extend",
                                        "custom-selector",
                                        "nest"
                                    ]) ? line$2 : hardline$4
                                ]), path6.map(print2, "nodes"))
                            ]));
                        }
                    case "selector-selector":
                        {
                            return group$1(indent$2(concat$5(path6.map(print2, "nodes"))));
                        }
                    case "selector-comment":
                        {
                            return node.value;
                        }
                    case "selector-string":
                        {
                            return adjustStrings(node.value, options2);
                        }
                    case "selector-tag":
                        {
                            const parentNode = path6.getParentNode();
                            const index2 = parentNode && parentNode.nodes.indexOf(node);
                            const prevNode = index2 && parentNode.nodes[index2 - 1];
                            return concat$5([
                                node.namespace ? concat$5([
                                    node.namespace === true ? "" : node.namespace.trim(),
                                    "|"
                                ]) : "",
                                prevNode.type === "selector-nesting" ? node.value : adjustNumbers(isKeyframeAtRuleKeywords$1(path6, node.value) ? node.value.toLowerCase() : node.value)
                            ]);
                        }
                    case "selector-id":
                        {
                            return concat$5([
                                "#",
                                node.value
                            ]);
                        }
                    case "selector-class":
                        {
                            return concat$5([
                                ".",
                                adjustNumbers(adjustStrings(node.value, options2))
                            ]);
                        }
                    case "selector-attribute":
                        {
                            return concat$5([
                                "[",
                                node.namespace ? concat$5([
                                    node.namespace === true ? "" : node.namespace.trim(),
                                    "|"
                                ]) : "",
                                node.attribute.trim(),
                                node.operator ? node.operator : "",
                                node.value ? quoteAttributeValue(adjustStrings(node.value.trim(), options2), options2) : "",
                                node.insensitive ? " i" : "",
                                "]"
                            ]);
                        }
                    case "selector-combinator":
                        {
                            if (node.value === "+" || node.value === ">" || node.value === "~" || node.value === ">>>") {
                                const parentNode = path6.getParentNode();
                                const leading2 = parentNode.type === "selector-selector" && parentNode.nodes[0] === node ? "" : line$2;
                                return concat$5([
                                    leading2,
                                    node.value,
                                    isLastNode$1(path6, node) ? "" : " "
                                ]);
                            }
                            const leading = node.value.trim().startsWith("(") ? line$2 : "";
                            const value1 = adjustNumbers(adjustStrings(node.value.trim(), options2)) || line$2;
                            return concat$5([
                                leading,
                                value1
                            ]);
                        }
                    case "selector-universal":
                        {
                            return concat$5([
                                node.namespace ? concat$5([
                                    node.namespace === true ? "" : node.namespace.trim(),
                                    "|"
                                ]) : "",
                                node.value
                            ]);
                        }
                    case "selector-pseudo":
                        {
                            return concat$5([
                                maybeToLowerCase$1(node.value),
                                node.nodes && node.nodes.length > 0 ? concat$5([
                                    "(",
                                    join$2(", ", path6.map(print2, "nodes")),
                                    ")"
                                ]) : ""
                            ]);
                        }
                    case "selector-nesting":
                        {
                            return node.value;
                        }
                    case "selector-unknown":
                        {
                            const ruleAncestorNode = getAncestorNode$1(path6, "css-rule");
                            if (ruleAncestorNode && ruleAncestorNode.isSCSSNesterProperty) {
                                return adjustNumbers(adjustStrings(maybeToLowerCase$1(node.value), options2));
                            }
                            const parentNode = path6.getParentNode();
                            if (parentNode.raws && parentNode.raws.selector) {
                                const start = options2.locStart(parentNode);
                                const end = start + parentNode.raws.selector.length;
                                return options2.originalText.slice(start, end).trim();
                            }
                            return node.value;
                        }
                    case "value-value":
                    case "value-root":
                        {
                            return path6.call(print2, "group");
                        }
                    case "value-comment":
                        {
                            return concat$5([
                                node.inline ? "//" : "/*",
                                // see replaceQuotesInInlineComments in loc.js
                                // value-* nodes don't have correct location data, so we have to rely on placeholder characters.
                                restoreQuotesInInlineComments$1(node.value),
                                node.inline ? "" : "*/"
                            ]);
                        }
                    case "value-comma_group":
                        {
                            const parentNode = path6.getParentNode();
                            const parentParentNode = path6.getParentNode(1);
                            const declAncestorProp = getPropOfDeclNode$1(path6);
                            const isGridValue = declAncestorProp && parentNode.type === "value-value" && (declAncestorProp === "grid" || declAncestorProp.startsWith("grid-template"));
                            const atRuleAncestorNode = getAncestorNode$1(path6, "css-atrule");
                            const isControlDirective = atRuleAncestorNode && isSCSSControlDirectiveNode$1(atRuleAncestorNode);
                            const printed = path6.map(print2, "groups");
                            const parts = [];
                            const insideURLFunction = insideValueFunctionNode$1(path6, "url");
                            let insideSCSSInterpolationInString = false;
                            let didBreak = false;
                            for(let i = 0; i < node.groups.length; ++i){
                                parts.push(printed[i]);
                                const iPrevNode = node.groups[i - 1];
                                const iNode = node.groups[i];
                                const iNextNode = node.groups[i + 1];
                                const iNextNextNode = node.groups[i + 2];
                                if (insideURLFunction) {
                                    if (iNextNode && isAdditionNode$1(iNextNode) || isAdditionNode$1(iNode)) {
                                        parts.push(" ");
                                    }
                                    continue;
                                }
                                if (!iNextNode) {
                                    continue;
                                }
                                if (!iPrevNode && iNode.value === "--" && iNextNode.type === "value-atword") {
                                    continue;
                                }
                                const isStartSCSSInterpolationInString = iNode.type === "value-string" && iNode.value.startsWith("#{");
                                const isEndingSCSSInterpolationInString = insideSCSSInterpolationInString && iNextNode.type === "value-string" && iNextNode.value.endsWith("}");
                                if (isStartSCSSInterpolationInString || isEndingSCSSInterpolationInString) {
                                    insideSCSSInterpolationInString = !insideSCSSInterpolationInString;
                                    continue;
                                }
                                if (insideSCSSInterpolationInString) {
                                    continue;
                                }
                                if (isColonNode$1(iNode) || isColonNode$1(iNextNode)) {
                                    continue;
                                }
                                if (iNode.type === "value-atword" && iNode.value === "") {
                                    continue;
                                }
                                if (iNode.value === "~") {
                                    continue;
                                }
                                if (iNode.value && iNode.value.includes("\\") && iNextNode && iNextNode.type !== "value-comment") {
                                    continue;
                                }
                                if (iPrevNode && iPrevNode.value && iPrevNode.value.indexOf("\\") === iPrevNode.value.length - 1 && iNode.type === "value-operator" && iNode.value === "/") {
                                    continue;
                                }
                                if (iNode.value === "\\") {
                                    continue;
                                }
                                if (isPostcssSimpleVarNode$1(iNode, iNextNode)) {
                                    continue;
                                }
                                if (isHashNode$1(iNode) || isLeftCurlyBraceNode$1(iNode) || isRightCurlyBraceNode$1(iNextNode) || isLeftCurlyBraceNode$1(iNextNode) && hasEmptyRawBefore$1(iNextNode) || isRightCurlyBraceNode$1(iNode) && hasEmptyRawBefore$1(iNextNode)) {
                                    continue;
                                }
                                if (iNode.value === "--" && isHashNode$1(iNextNode)) {
                                    continue;
                                }
                                const isMathOperator = isMathOperatorNode$1(iNode);
                                const isNextMathOperator = isMathOperatorNode$1(iNextNode);
                                if ((isMathOperator && isHashNode$1(iNextNode) || isNextMathOperator && isRightCurlyBraceNode$1(iNode)) && hasEmptyRawBefore$1(iNextNode)) {
                                    continue;
                                }
                                if (insideValueFunctionNode$1(path6, "calc") && (isAdditionNode$1(iNode) || isAdditionNode$1(iNextNode) || isSubtractionNode$1(iNode) || isSubtractionNode$1(iNextNode)) && hasEmptyRawBefore$1(iNextNode)) {
                                    continue;
                                }
                                const isColorAdjusterNode = (isAdditionNode$1(iNode) || isSubtractionNode$1(iNode)) && i === 0 && (iNextNode.type === "value-number" || iNextNode.isHex) && parentParentNode && isColorAdjusterFuncNode$1(parentParentNode) && !hasEmptyRawBefore$1(iNextNode);
                                const requireSpaceBeforeOperator = iNextNextNode && iNextNextNode.type === "value-func" || iNextNextNode && isWordNode$1(iNextNextNode) || iNode.type === "value-func" || isWordNode$1(iNode);
                                const requireSpaceAfterOperator = iNextNode.type === "value-func" || isWordNode$1(iNextNode) || iPrevNode && iPrevNode.type === "value-func" || iPrevNode && isWordNode$1(iPrevNode);
                                if (!(isMultiplicationNode$1(iNextNode) || isMultiplicationNode$1(iNode)) && !insideValueFunctionNode$1(path6, "calc") && !isColorAdjusterNode && (isDivisionNode$1(iNextNode) && !requireSpaceBeforeOperator || isDivisionNode$1(iNode) && !requireSpaceAfterOperator || isAdditionNode$1(iNextNode) && !requireSpaceBeforeOperator || isAdditionNode$1(iNode) && !requireSpaceAfterOperator || isSubtractionNode$1(iNextNode) || isSubtractionNode$1(iNode)) && (hasEmptyRawBefore$1(iNextNode) || isMathOperator && (!iPrevNode || iPrevNode && isMathOperatorNode$1(iPrevNode)))) {
                                    continue;
                                }
                                if (isInlineValueCommentNode$1(iNode)) {
                                    parts.push(hardline$4);
                                    continue;
                                }
                                if (isControlDirective && (isEqualityOperatorNode$1(iNextNode) || isRelationalOperatorNode$1(iNextNode) || isIfElseKeywordNode$1(iNextNode) || isEachKeywordNode$1(iNode) || isForKeywordNode$1(iNode))) {
                                    parts.push(" ");
                                    continue;
                                }
                                if (atRuleAncestorNode && atRuleAncestorNode.name.toLowerCase() === "namespace") {
                                    parts.push(" ");
                                    continue;
                                }
                                if (isGridValue) {
                                    if (iNode.source && iNextNode.source && iNode.source.start.line !== iNextNode.source.start.line) {
                                        parts.push(hardline$4);
                                        didBreak = true;
                                    } else {
                                        parts.push(" ");
                                    }
                                    continue;
                                }
                                if (isNextMathOperator) {
                                    parts.push(" ");
                                    continue;
                                }
                                parts.push(line$2);
                            }
                            if (didBreak) {
                                parts.unshift(hardline$4);
                            }
                            if (isControlDirective) {
                                return group$1(indent$2(concat$5(parts)));
                            }
                            if (insideURLFunctionInImportAtRuleNode$1(path6)) {
                                return group$1(fill$2(parts));
                            }
                            return group$1(indent$2(fill$2(parts)));
                        }
                    case "value-paren_group":
                        {
                            const parentNode = path6.getParentNode();
                            if (parentNode && isURLFunctionNode$1(parentNode) && (node.groups.length === 1 || node.groups.length > 0 && node.groups[0].type === "value-comma_group" && node.groups[0].groups.length > 0 && node.groups[0].groups[0].type === "value-word" && node.groups[0].groups[0].value.startsWith("data:"))) {
                                return concat$5([
                                    node.open ? path6.call(print2, "open") : "",
                                    join$2(",", path6.map(print2, "groups")),
                                    node.close ? path6.call(print2, "close") : ""
                                ]);
                            }
                            if (!node.open) {
                                const printed = path6.map(print2, "groups");
                                const res = [];
                                for(let i = 0; i < printed.length; i++){
                                    if (i !== 0) {
                                        res.push(concat$5([
                                            ",",
                                            line$2
                                        ]));
                                    }
                                    res.push(printed[i]);
                                }
                                return group$1(indent$2(fill$2(res)));
                            }
                            const isSCSSMapItem = isSCSSMapItemNode$1(path6);
                            const lastItem = node.groups[node.groups.length - 1];
                            const isLastItemComment = lastItem && lastItem.type === "value-comment";
                            return group$1(concat$5([
                                node.open ? path6.call(print2, "open") : "",
                                indent$2(concat$5([
                                    softline$1,
                                    join$2(concat$5([
                                        ",",
                                        line$2
                                    ]), path6.map((childPath)=>{
                                        const node2 = childPath.getValue();
                                        const printed = print2(childPath);
                                        if (isKeyValuePairNode$1(node2) && node2.type === "value-comma_group" && node2.groups && node2.groups[2] && node2.groups[2].type === "value-paren_group") {
                                            printed.contents.contents.parts[1] = group$1(printed.contents.contents.parts[1]);
                                            return group$1(dedent$1(printed));
                                        }
                                        return printed;
                                    }, "groups"))
                                ])),
                                ifBreak$1(!isLastItemComment && isSCSS$1(options2.parser, options2.originalText) && isSCSSMapItem && shouldPrintComma(options2) ? "," : ""),
                                softline$1,
                                node.close ? path6.call(print2, "close") : ""
                            ]), {
                                shouldBreak: isSCSSMapItem
                            });
                        }
                    case "value-func":
                        {
                            return concat$5([
                                node.value,
                                insideAtRuleNode$1(path6, "supports") && isMediaAndSupportsKeywords$1(node) ? " " : "",
                                path6.call(print2, "group")
                            ]);
                        }
                    case "value-paren":
                        {
                            return node.value;
                        }
                    case "value-number":
                        {
                            return concat$5([
                                printCssNumber(node.value),
                                maybeToLowerCase$1(node.unit)
                            ]);
                        }
                    case "value-operator":
                        {
                            return node.value;
                        }
                    case "value-word":
                        {
                            if (node.isColor && node.isHex || isWideKeywords$1(node.value)) {
                                return node.value.toLowerCase();
                            }
                            return node.value;
                        }
                    case "value-colon":
                        {
                            return concat$5([
                                node.value,
                                // Don't add spaces on `:` in `url` function (i.e. `url(fbglyph: cross-outline, fig-white)`)
                                insideValueFunctionNode$1(path6, "url") ? "" : line$2
                            ]);
                        }
                    case "value-comma":
                        {
                            return concat$5([
                                node.value,
                                " "
                            ]);
                        }
                    case "value-string":
                        {
                            return printString$1(node.raws.quote + node.value + node.raws.quote, options2);
                        }
                    case "value-atword":
                        {
                            return concat$5([
                                "@",
                                node.value
                            ]);
                        }
                    case "value-unicode-range":
                        {
                            return node.value;
                        }
                    case "value-unknown":
                        {
                            return node.value;
                        }
                    default:
                        throw new Error("Unknown postcss type ".concat(JSON.stringify(node.type)));
                }
            }
            function printNodeSequence(path6, options2, print2) {
                const node = path6.getValue();
                const parts = [];
                let i = 0;
                path6.map((pathChild)=>{
                    const prevNode = node.nodes[i - 1];
                    if (prevNode && prevNode.type === "css-comment" && prevNode.text.trim() === "prettier-ignore") {
                        const childNode = pathChild.getValue();
                        parts.push(options2.originalText.slice(options2.locStart(childNode), options2.locEnd(childNode)));
                    } else {
                        parts.push(pathChild.call(print2));
                    }
                    if (i !== node.nodes.length - 1) {
                        if (node.nodes[i + 1].type === "css-comment" && !hasNewline$3(options2.originalText, options2.locStart(node.nodes[i + 1]), {
                            backwards: true
                        }) && node.nodes[i].type !== "yaml" && node.nodes[i].type !== "toml" || node.nodes[i + 1].type === "css-atrule" && node.nodes[i + 1].name === "else" && node.nodes[i].type !== "css-comment") {
                            parts.push(" ");
                        } else {
                            parts.push(options2.__isHTMLStyleAttribute ? line$2 : hardline$4);
                            if (isNextLineEmpty$2(options2.originalText, pathChild.getValue(), options2.locEnd) && node.nodes[i].type !== "yaml" && node.nodes[i].type !== "toml") {
                                parts.push(hardline$4);
                            }
                        }
                    }
                    i++;
                }, "nodes");
                return concat$5(parts);
            }
            const STRING_REGEX$3 = /(['"])(?:(?!\1)[^\\]|\\[\s\S])*\1/g;
            const NUMBER_REGEX = /(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g;
            const STANDARD_UNIT_REGEX = /[a-zA-Z]+/g;
            const WORD_PART_REGEX = /[$@]?[a-zA-Z_\u0080-\uFFFF][\w\-\u0080-\uFFFF]*/g;
            const ADJUST_NUMBERS_REGEX = new RegExp(STRING_REGEX$3.source + "|" + "(".concat(WORD_PART_REGEX.source, ")?") + "(".concat(NUMBER_REGEX.source, ")") + "(".concat(STANDARD_UNIT_REGEX.source, ")?"), "g");
            function adjustStrings(value1, options2) {
                return value1.replace(STRING_REGEX$3, (match)=>printString$1(match, options2));
            }
            function quoteAttributeValue(value1, options2) {
                const quote = options2.singleQuote ? "'" : '"';
                return value1.includes('"') || value1.includes("'") ? value1 : quote + value1 + quote;
            }
            function adjustNumbers(value1) {
                return value1.replace(ADJUST_NUMBERS_REGEX, (match, quote, wordPart, number2, unit)=>!wordPart && number2 ? printCssNumber(number2) + maybeToLowerCase$1(unit || "") : match);
            }
            function printCssNumber(rawNumber) {
                return printNumber$1(rawNumber).replace(/\.0(?=$|e)/, "");
            }
            var printerPostcss = {
                print: genericPrint,
                embed: embed_1,
                insertPragma: insertPragma$2,
                hasPrettierIgnore: hasIgnoreComment$1,
                massageAstNode: clean_1
            };
            const CATEGORY_COMMON = "Common";
            var commonOptions = {
                bracketSpacing: {
                    since: "0.0.0",
                    category: CATEGORY_COMMON,
                    type: "boolean",
                    default: true,
                    description: "Print spaces between brackets.",
                    oppositeDescription: "Do not print spaces between brackets."
                },
                singleQuote: {
                    since: "0.0.0",
                    category: CATEGORY_COMMON,
                    type: "boolean",
                    default: false,
                    description: "Use single quotes instead of double quotes."
                },
                proseWrap: {
                    since: "1.8.2",
                    category: CATEGORY_COMMON,
                    type: "choice",
                    default: [
                        {
                            since: "1.8.2",
                            value: true
                        },
                        {
                            since: "1.9.0",
                            value: "preserve"
                        }
                    ],
                    description: "How to wrap prose.",
                    choices: [
                        {
                            since: "1.9.0",
                            value: "always",
                            description: "Wrap prose if it exceeds the print width."
                        },
                        {
                            since: "1.9.0",
                            value: "never",
                            description: "Do not wrap prose."
                        },
                        {
                            since: "1.9.0",
                            value: "preserve",
                            description: "Wrap prose as-is."
                        }
                    ]
                }
            };
            var options$2 = {
                singleQuote: commonOptions.singleQuote
            };
            var createLanguage = function createLanguage2(linguistData, override) {
                const { languageId: languageId2  } = linguistData, rest = _objectWithoutPropertiesLoose(linguistData, [
                    "languageId"
                ]);
                return Object.assign({
                    linguistLanguageId: languageId2
                }, rest, {}, override(linguistData));
            };
            var name$1 = "CSS";
            var type = "markup";
            var tmScope = "source.css";
            var aceMode = "css";
            var codemirrorMode = "css";
            var codemirrorMimeType = "text/css";
            var color = "#563d7c";
            var extensions = [
                ".css"
            ];
            var languageId = 50;
            var CSS = {
                name: name$1,
                type,
                tmScope,
                aceMode,
                codemirrorMode,
                codemirrorMimeType,
                color,
                extensions,
                languageId
            };
            var CSS$1 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                name: name$1,
                type,
                tmScope,
                aceMode,
                codemirrorMode,
                codemirrorMimeType,
                color,
                extensions,
                languageId,
                "default": CSS
            });
            var name$2 = "PostCSS";
            var type$1 = "markup";
            var tmScope$1 = "source.postcss";
            var group$2 = "CSS";
            var extensions$1 = [
                ".pcss",
                ".postcss"
            ];
            var aceMode$1 = "text";
            var languageId$1 = 262764437;
            var PostCSS = {
                name: name$2,
                type: type$1,
                tmScope: tmScope$1,
                group: group$2,
                extensions: extensions$1,
                aceMode: aceMode$1,
                languageId: languageId$1
            };
            var PostCSS$1 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                name: name$2,
                type: type$1,
                tmScope: tmScope$1,
                group: group$2,
                extensions: extensions$1,
                aceMode: aceMode$1,
                languageId: languageId$1,
                "default": PostCSS
            });
            var name$3 = "Less";
            var type$2 = "markup";
            var group$3 = "CSS";
            var extensions$2 = [
                ".less"
            ];
            var tmScope$2 = "source.css.less";
            var aceMode$2 = "less";
            var codemirrorMode$1 = "css";
            var codemirrorMimeType$1 = "text/css";
            var languageId$2 = 198;
            var Less = {
                name: name$3,
                type: type$2,
                group: group$3,
                extensions: extensions$2,
                tmScope: tmScope$2,
                aceMode: aceMode$2,
                codemirrorMode: codemirrorMode$1,
                codemirrorMimeType: codemirrorMimeType$1,
                languageId: languageId$2
            };
            var Less$1 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                name: name$3,
                type: type$2,
                group: group$3,
                extensions: extensions$2,
                tmScope: tmScope$2,
                aceMode: aceMode$2,
                codemirrorMode: codemirrorMode$1,
                codemirrorMimeType: codemirrorMimeType$1,
                languageId: languageId$2,
                "default": Less
            });
            var name$4 = "SCSS";
            var type$3 = "markup";
            var tmScope$3 = "source.css.scss";
            var group$4 = "CSS";
            var aceMode$3 = "scss";
            var codemirrorMode$2 = "css";
            var codemirrorMimeType$2 = "text/x-scss";
            var extensions$3 = [
                ".scss"
            ];
            var languageId$3 = 329;
            var SCSS = {
                name: name$4,
                type: type$3,
                tmScope: tmScope$3,
                group: group$4,
                aceMode: aceMode$3,
                codemirrorMode: codemirrorMode$2,
                codemirrorMimeType: codemirrorMimeType$2,
                extensions: extensions$3,
                languageId: languageId$3
            };
            var SCSS$1 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                name: name$4,
                type: type$3,
                tmScope: tmScope$3,
                group: group$4,
                aceMode: aceMode$3,
                codemirrorMode: codemirrorMode$2,
                codemirrorMimeType: codemirrorMimeType$2,
                extensions: extensions$3,
                languageId: languageId$3,
                "default": SCSS
            });
            var require$$0$2 = getCjsExportFromNamespace(CSS$1);
            var require$$1 = getCjsExportFromNamespace(PostCSS$1);
            var require$$2 = getCjsExportFromNamespace(Less$1);
            var require$$3 = getCjsExportFromNamespace(SCSS$1);
            const languages = [
                createLanguage(require$$0$2, ()=>({
                        since: "1.4.0",
                        parsers: [
                            "css"
                        ],
                        vscodeLanguageIds: [
                            "css"
                        ]
                    })),
                createLanguage(require$$1, ()=>({
                        since: "1.4.0",
                        parsers: [
                            "css"
                        ],
                        vscodeLanguageIds: [
                            "postcss"
                        ]
                    })),
                createLanguage(require$$2, ()=>({
                        since: "1.4.0",
                        parsers: [
                            "less"
                        ],
                        vscodeLanguageIds: [
                            "less"
                        ]
                    })),
                createLanguage(require$$3, ()=>({
                        since: "1.4.0",
                        parsers: [
                            "scss"
                        ],
                        vscodeLanguageIds: [
                            "scss"
                        ]
                    }))
            ];
            const printers = {
                postcss: printerPostcss
            };
            var languageCss = {
                languages,
                options: options$2,
                printers
            };
            function hasPragma$2(text) {
                return /^\s*#[^\n\S]*@(format|prettier)\s*(\n|$)/.test(text);
            }
            function insertPragma$3(text) {
                return "# @format\n\n" + text;
            }
            var pragma$2 = {
                hasPragma: hasPragma$2,
                insertPragma: insertPragma$3
            };
            const { concat: concat$6 , join: join$3 , hardline: hardline$5 , line: line$3 , softline: softline$2 , group: group$5 , indent: indent$3 , ifBreak: ifBreak$2  } = document.builders;
            const { hasIgnoreComment: hasIgnoreComment$2  } = util$1;
            const { isNextLineEmpty: isNextLineEmpty$3  } = utilShared;
            const { insertPragma: insertPragma$4  } = pragma$2;
            function genericPrint$1(path6, options2, print2) {
                const n = path6.getValue();
                if (!n) {
                    return "";
                }
                if (typeof n === "string") {
                    return n;
                }
                switch(n.kind){
                    case "Document":
                        {
                            const parts = [];
                            path6.map((pathChild, index2)=>{
                                parts.push(concat$6([
                                    pathChild.call(print2)
                                ]));
                                if (index2 !== n.definitions.length - 1) {
                                    parts.push(hardline$5);
                                    if (isNextLineEmpty$3(options2.originalText, pathChild.getValue(), options2.locEnd)) {
                                        parts.push(hardline$5);
                                    }
                                }
                            }, "definitions");
                            return concat$6([
                                concat$6(parts),
                                hardline$5
                            ]);
                        }
                    case "OperationDefinition":
                        {
                            const hasOperation = options2.originalText[options2.locStart(n)] !== "{";
                            const hasName = !!n.name;
                            return concat$6([
                                hasOperation ? n.operation : "",
                                hasOperation && hasName ? concat$6([
                                    " ",
                                    path6.call(print2, "name")
                                ]) : "",
                                n.variableDefinitions && n.variableDefinitions.length ? group$5(concat$6([
                                    "(",
                                    indent$3(concat$6([
                                        softline$2,
                                        join$3(concat$6([
                                            ifBreak$2("", ", "),
                                            softline$2
                                        ]), path6.map(print2, "variableDefinitions"))
                                    ])),
                                    softline$2,
                                    ")"
                                ])) : "",
                                printDirectives(path6, print2, n),
                                n.selectionSet ? !hasOperation && !hasName ? "" : " " : "",
                                path6.call(print2, "selectionSet")
                            ]);
                        }
                    case "FragmentDefinition":
                        {
                            return concat$6([
                                "fragment ",
                                path6.call(print2, "name"),
                                n.variableDefinitions && n.variableDefinitions.length ? group$5(concat$6([
                                    "(",
                                    indent$3(concat$6([
                                        softline$2,
                                        join$3(concat$6([
                                            ifBreak$2("", ", "),
                                            softline$2
                                        ]), path6.map(print2, "variableDefinitions"))
                                    ])),
                                    softline$2,
                                    ")"
                                ])) : "",
                                " on ",
                                path6.call(print2, "typeCondition"),
                                printDirectives(path6, print2, n),
                                " ",
                                path6.call(print2, "selectionSet")
                            ]);
                        }
                    case "SelectionSet":
                        {
                            return concat$6([
                                "{",
                                indent$3(concat$6([
                                    hardline$5,
                                    join$3(hardline$5, path6.call((selectionsPath)=>printSequence(selectionsPath, options2, print2), "selections"))
                                ])),
                                hardline$5,
                                "}"
                            ]);
                        }
                    case "Field":
                        {
                            return group$5(concat$6([
                                n.alias ? concat$6([
                                    path6.call(print2, "alias"),
                                    ": "
                                ]) : "",
                                path6.call(print2, "name"),
                                n.arguments.length > 0 ? group$5(concat$6([
                                    "(",
                                    indent$3(concat$6([
                                        softline$2,
                                        join$3(concat$6([
                                            ifBreak$2("", ", "),
                                            softline$2
                                        ]), path6.call((argsPath)=>printSequence(argsPath, options2, print2), "arguments"))
                                    ])),
                                    softline$2,
                                    ")"
                                ])) : "",
                                printDirectives(path6, print2, n),
                                n.selectionSet ? " " : "",
                                path6.call(print2, "selectionSet")
                            ]));
                        }
                    case "Name":
                        {
                            return n.value;
                        }
                    case "StringValue":
                        {
                            if (n.block) {
                                return concat$6([
                                    '"""',
                                    hardline$5,
                                    join$3(hardline$5, n.value.replace(/"""/g, "\\$&").split("\n")),
                                    hardline$5,
                                    '"""'
                                ]);
                            }
                            return concat$6([
                                '"',
                                n.value.replace(/["\\]/g, "\\$&").replace(/\n/g, "\\n"),
                                '"'
                            ]);
                        }
                    case "IntValue":
                    case "FloatValue":
                    case "EnumValue":
                        {
                            return n.value;
                        }
                    case "BooleanValue":
                        {
                            return n.value ? "true" : "false";
                        }
                    case "NullValue":
                        {
                            return "null";
                        }
                    case "Variable":
                        {
                            return concat$6([
                                "$",
                                path6.call(print2, "name")
                            ]);
                        }
                    case "ListValue":
                        {
                            return group$5(concat$6([
                                "[",
                                indent$3(concat$6([
                                    softline$2,
                                    join$3(concat$6([
                                        ifBreak$2("", ", "),
                                        softline$2
                                    ]), path6.map(print2, "values"))
                                ])),
                                softline$2,
                                "]"
                            ]));
                        }
                    case "ObjectValue":
                        {
                            return group$5(concat$6([
                                "{",
                                options2.bracketSpacing && n.fields.length > 0 ? " " : "",
                                indent$3(concat$6([
                                    softline$2,
                                    join$3(concat$6([
                                        ifBreak$2("", ", "),
                                        softline$2
                                    ]), path6.map(print2, "fields"))
                                ])),
                                softline$2,
                                ifBreak$2("", options2.bracketSpacing && n.fields.length > 0 ? " " : ""),
                                "}"
                            ]));
                        }
                    case "ObjectField":
                    case "Argument":
                        {
                            return concat$6([
                                path6.call(print2, "name"),
                                ": ",
                                path6.call(print2, "value")
                            ]);
                        }
                    case "Directive":
                        {
                            return concat$6([
                                "@",
                                path6.call(print2, "name"),
                                n.arguments.length > 0 ? group$5(concat$6([
                                    "(",
                                    indent$3(concat$6([
                                        softline$2,
                                        join$3(concat$6([
                                            ifBreak$2("", ", "),
                                            softline$2
                                        ]), path6.call((argsPath)=>printSequence(argsPath, options2, print2), "arguments"))
                                    ])),
                                    softline$2,
                                    ")"
                                ])) : ""
                            ]);
                        }
                    case "NamedType":
                        {
                            return path6.call(print2, "name");
                        }
                    case "VariableDefinition":
                        {
                            return concat$6([
                                path6.call(print2, "variable"),
                                ": ",
                                path6.call(print2, "type"),
                                n.defaultValue ? concat$6([
                                    " = ",
                                    path6.call(print2, "defaultValue")
                                ]) : "",
                                printDirectives(path6, print2, n)
                            ]);
                        }
                    case "TypeExtensionDefinition":
                        {
                            return concat$6([
                                "extend ",
                                path6.call(print2, "definition")
                            ]);
                        }
                    case "ObjectTypeExtension":
                    case "ObjectTypeDefinition":
                        {
                            return concat$6([
                                path6.call(print2, "description"),
                                n.description ? hardline$5 : "",
                                n.kind === "ObjectTypeExtension" ? "extend " : "",
                                "type ",
                                path6.call(print2, "name"),
                                n.interfaces.length > 0 ? concat$6([
                                    " implements ",
                                    concat$6(printInterfaces(path6, options2, print2))
                                ]) : "",
                                printDirectives(path6, print2, n),
                                n.fields.length > 0 ? concat$6([
                                    " {",
                                    indent$3(concat$6([
                                        hardline$5,
                                        join$3(hardline$5, path6.call((fieldsPath)=>printSequence(fieldsPath, options2, print2), "fields"))
                                    ])),
                                    hardline$5,
                                    "}"
                                ]) : ""
                            ]);
                        }
                    case "FieldDefinition":
                        {
                            return concat$6([
                                path6.call(print2, "description"),
                                n.description ? hardline$5 : "",
                                path6.call(print2, "name"),
                                n.arguments.length > 0 ? group$5(concat$6([
                                    "(",
                                    indent$3(concat$6([
                                        softline$2,
                                        join$3(concat$6([
                                            ifBreak$2("", ", "),
                                            softline$2
                                        ]), path6.call((argsPath)=>printSequence(argsPath, options2, print2), "arguments"))
                                    ])),
                                    softline$2,
                                    ")"
                                ])) : "",
                                ": ",
                                path6.call(print2, "type"),
                                printDirectives(path6, print2, n)
                            ]);
                        }
                    case "DirectiveDefinition":
                        {
                            return concat$6([
                                path6.call(print2, "description"),
                                n.description ? hardline$5 : "",
                                "directive ",
                                "@",
                                path6.call(print2, "name"),
                                n.arguments.length > 0 ? group$5(concat$6([
                                    "(",
                                    indent$3(concat$6([
                                        softline$2,
                                        join$3(concat$6([
                                            ifBreak$2("", ", "),
                                            softline$2
                                        ]), path6.call((argsPath)=>printSequence(argsPath, options2, print2), "arguments"))
                                    ])),
                                    softline$2,
                                    ")"
                                ])) : "",
                                n.repeatable ? " repeatable" : "",
                                concat$6([
                                    " on ",
                                    join$3(" | ", path6.map(print2, "locations"))
                                ])
                            ]);
                        }
                    case "EnumTypeExtension":
                    case "EnumTypeDefinition":
                        {
                            return concat$6([
                                path6.call(print2, "description"),
                                n.description ? hardline$5 : "",
                                n.kind === "EnumTypeExtension" ? "extend " : "",
                                "enum ",
                                path6.call(print2, "name"),
                                printDirectives(path6, print2, n),
                                n.values.length > 0 ? concat$6([
                                    " {",
                                    indent$3(concat$6([
                                        hardline$5,
                                        join$3(hardline$5, path6.call((valuesPath)=>printSequence(valuesPath, options2, print2), "values"))
                                    ])),
                                    hardline$5,
                                    "}"
                                ]) : ""
                            ]);
                        }
                    case "EnumValueDefinition":
                        {
                            return concat$6([
                                path6.call(print2, "description"),
                                n.description ? hardline$5 : "",
                                path6.call(print2, "name"),
                                printDirectives(path6, print2, n)
                            ]);
                        }
                    case "InputValueDefinition":
                        {
                            return concat$6([
                                path6.call(print2, "description"),
                                n.description ? n.description.block ? hardline$5 : line$3 : "",
                                path6.call(print2, "name"),
                                ": ",
                                path6.call(print2, "type"),
                                n.defaultValue ? concat$6([
                                    " = ",
                                    path6.call(print2, "defaultValue")
                                ]) : "",
                                printDirectives(path6, print2, n)
                            ]);
                        }
                    case "InputObjectTypeExtension":
                    case "InputObjectTypeDefinition":
                        {
                            return concat$6([
                                path6.call(print2, "description"),
                                n.description ? hardline$5 : "",
                                n.kind === "InputObjectTypeExtension" ? "extend " : "",
                                "input ",
                                path6.call(print2, "name"),
                                printDirectives(path6, print2, n),
                                n.fields.length > 0 ? concat$6([
                                    " {",
                                    indent$3(concat$6([
                                        hardline$5,
                                        join$3(hardline$5, path6.call((fieldsPath)=>printSequence(fieldsPath, options2, print2), "fields"))
                                    ])),
                                    hardline$5,
                                    "}"
                                ]) : ""
                            ]);
                        }
                    case "SchemaDefinition":
                        {
                            return concat$6([
                                "schema",
                                printDirectives(path6, print2, n),
                                " {",
                                n.operationTypes.length > 0 ? indent$3(concat$6([
                                    hardline$5,
                                    join$3(hardline$5, path6.call((opsPath)=>printSequence(opsPath, options2, print2), "operationTypes"))
                                ])) : "",
                                hardline$5,
                                "}"
                            ]);
                        }
                    case "OperationTypeDefinition":
                        {
                            return concat$6([
                                path6.call(print2, "operation"),
                                ": ",
                                path6.call(print2, "type")
                            ]);
                        }
                    case "InterfaceTypeExtension":
                    case "InterfaceTypeDefinition":
                        {
                            return concat$6([
                                path6.call(print2, "description"),
                                n.description ? hardline$5 : "",
                                n.kind === "InterfaceTypeExtension" ? "extend " : "",
                                "interface ",
                                path6.call(print2, "name"),
                                printDirectives(path6, print2, n),
                                n.fields.length > 0 ? concat$6([
                                    " {",
                                    indent$3(concat$6([
                                        hardline$5,
                                        join$3(hardline$5, path6.call((fieldsPath)=>printSequence(fieldsPath, options2, print2), "fields"))
                                    ])),
                                    hardline$5,
                                    "}"
                                ]) : ""
                            ]);
                        }
                    case "FragmentSpread":
                        {
                            return concat$6([
                                "...",
                                path6.call(print2, "name"),
                                printDirectives(path6, print2, n)
                            ]);
                        }
                    case "InlineFragment":
                        {
                            return concat$6([
                                "...",
                                n.typeCondition ? concat$6([
                                    " on ",
                                    path6.call(print2, "typeCondition")
                                ]) : "",
                                printDirectives(path6, print2, n),
                                " ",
                                path6.call(print2, "selectionSet")
                            ]);
                        }
                    case "UnionTypeExtension":
                    case "UnionTypeDefinition":
                        {
                            return group$5(concat$6([
                                path6.call(print2, "description"),
                                n.description ? hardline$5 : "",
                                group$5(concat$6([
                                    n.kind === "UnionTypeExtension" ? "extend " : "",
                                    "union ",
                                    path6.call(print2, "name"),
                                    printDirectives(path6, print2, n),
                                    n.types.length > 0 ? concat$6([
                                        " =",
                                        ifBreak$2("", " "),
                                        indent$3(concat$6([
                                            ifBreak$2(concat$6([
                                                line$3,
                                                "  "
                                            ])),
                                            join$3(concat$6([
                                                line$3,
                                                "| "
                                            ]), path6.map(print2, "types"))
                                        ]))
                                    ]) : ""
                                ]))
                            ]));
                        }
                    case "ScalarTypeExtension":
                    case "ScalarTypeDefinition":
                        {
                            return concat$6([
                                path6.call(print2, "description"),
                                n.description ? hardline$5 : "",
                                n.kind === "ScalarTypeExtension" ? "extend " : "",
                                "scalar ",
                                path6.call(print2, "name"),
                                printDirectives(path6, print2, n)
                            ]);
                        }
                    case "NonNullType":
                        {
                            return concat$6([
                                path6.call(print2, "type"),
                                "!"
                            ]);
                        }
                    case "ListType":
                        {
                            return concat$6([
                                "[",
                                path6.call(print2, "type"),
                                "]"
                            ]);
                        }
                    default:
                        throw new Error("unknown graphql type: " + JSON.stringify(n.kind));
                }
            }
            function printDirectives(path6, print2, n) {
                if (n.directives.length === 0) {
                    return "";
                }
                return concat$6([
                    " ",
                    group$5(indent$3(concat$6([
                        softline$2,
                        join$3(concat$6([
                            ifBreak$2("", " "),
                            softline$2
                        ]), path6.map(print2, "directives"))
                    ])))
                ]);
            }
            function printSequence(sequencePath, options2, print2) {
                const count = sequencePath.getValue().length;
                return sequencePath.map((path6, i)=>{
                    const printed = print2(path6);
                    if (isNextLineEmpty$3(options2.originalText, path6.getValue(), options2.locEnd) && i < count - 1) {
                        return concat$6([
                            printed,
                            hardline$5
                        ]);
                    }
                    return printed;
                });
            }
            function canAttachComment(node) {
                return node.kind && node.kind !== "Comment";
            }
            function printComment$1(commentPath) {
                const comment = commentPath.getValue();
                if (comment.kind === "Comment") {
                    return "#" + comment.value.trimEnd();
                }
                throw new Error("Not a comment: " + JSON.stringify(comment));
            }
            function determineInterfaceSeparatorBetween(first, second, options2) {
                const textBetween = options2.originalText.slice(first.loc.end, second.loc.start).replace(/#.*/g, "").trim();
                return textBetween === "," ? ", " : " & ";
            }
            function printInterfaces(path6, options2, print2) {
                const node = path6.getNode();
                const parts = [];
                const { interfaces  } = node;
                const printed = path6.map((node2)=>print2(node2), "interfaces");
                for(let index2 = 0; index2 < interfaces.length; index2++){
                    const interfaceNode = interfaces[index2];
                    if (index2 > 0) {
                        parts.push(determineInterfaceSeparatorBetween(interfaces[index2 - 1], interfaceNode, options2));
                    }
                    parts.push(printed[index2]);
                }
                return parts;
            }
            function clean$1(node, newNode) {
                delete newNode.loc;
                delete newNode.comments;
            }
            var printerGraphql = {
                print: genericPrint$1,
                massageAstNode: clean$1,
                hasPrettierIgnore: hasIgnoreComment$2,
                insertPragma: insertPragma$4,
                printComment: printComment$1,
                canAttachComment
            };
            var options$3 = {
                bracketSpacing: commonOptions.bracketSpacing
            };
            var name$5 = "GraphQL";
            var type$4 = "data";
            var extensions$4 = [
                ".graphql",
                ".gql",
                ".graphqls"
            ];
            var tmScope$4 = "source.graphql";
            var aceMode$4 = "text";
            var languageId$4 = 139;
            var GraphQL = {
                name: name$5,
                type: type$4,
                extensions: extensions$4,
                tmScope: tmScope$4,
                aceMode: aceMode$4,
                languageId: languageId$4
            };
            var GraphQL$1 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                name: name$5,
                type: type$4,
                extensions: extensions$4,
                tmScope: tmScope$4,
                aceMode: aceMode$4,
                languageId: languageId$4,
                "default": GraphQL
            });
            var require$$0$3 = getCjsExportFromNamespace(GraphQL$1);
            const languages$1 = [
                createLanguage(require$$0$3, ()=>({
                        since: "1.5.0",
                        parsers: [
                            "graphql"
                        ],
                        vscodeLanguageIds: [
                            "graphql"
                        ]
                    }))
            ];
            const printers$1 = {
                graphql: printerGraphql
            };
            var languageGraphql = {
                languages: languages$1,
                options: options$3,
                printers: printers$1
            };
            var clean$2 = function clean2(ast2, newNode) {
                delete newNode.loc;
                delete newNode.selfClosing;
                if (ast2.type === "TextNode") {
                    const trimmed = ast2.chars.trim();
                    if (!trimmed) {
                        return null;
                    }
                    newNode.chars = trimmed;
                }
            };
            function isUppercase(string3) {
                return string3.toUpperCase() === string3;
            }
            function isGlimmerComponent(node) {
                return isNodeOfSomeType(node, [
                    "ElementNode"
                ]) && typeof node.tag === "string" && (isUppercase(node.tag[0]) || node.tag.includes("."));
            }
            function isWhitespaceNode(node) {
                return isNodeOfSomeType(node, [
                    "TextNode"
                ]) && !/\S/.test(node.chars);
            }
            function isNodeOfSomeType(node, types) {
                return node && types.some((type2)=>node.type === type2);
            }
            function isParentOfSomeType(path6, types) {
                const parentNode = path6.getParentNode(0);
                return isNodeOfSomeType(parentNode, types);
            }
            function isPreviousNodeOfSomeType(path6, types) {
                const previousNode = getPreviousNode(path6);
                return isNodeOfSomeType(previousNode, types);
            }
            function isNextNodeOfSomeType(path6, types) {
                const nextNode = getNextNode(path6);
                return isNodeOfSomeType(nextNode, types);
            }
            function getSiblingNode(path6, offset) {
                const node = path6.getValue();
                const parentNode = path6.getParentNode(0) || {};
                const children = parentNode.children || parentNode.body || [];
                const index2 = children.indexOf(node);
                return index2 !== -1 && children[index2 + offset];
            }
            function getPreviousNode(path6, lookBack = 1) {
                return getSiblingNode(path6, -lookBack);
            }
            function getNextNode(path6) {
                return getSiblingNode(path6, 1);
            }
            function isPrettierIgnoreNode(node) {
                return isNodeOfSomeType(node, [
                    "MustacheCommentStatement"
                ]) && typeof node.value === "string" && node.value.trim() === "prettier-ignore";
            }
            function hasPrettierIgnore(path6) {
                const node = path6.getValue();
                const previousPreviousNode = getPreviousNode(path6, 2);
                return isPrettierIgnoreNode(node) || isPrettierIgnoreNode(previousPreviousNode);
            }
            var utils$3 = {
                getNextNode,
                getPreviousNode,
                hasPrettierIgnore,
                isGlimmerComponent,
                isNextNodeOfSomeType,
                isNodeOfSomeType,
                isParentOfSomeType,
                isPreviousNodeOfSomeType,
                isWhitespaceNode
            };
            const { concat: concat$7 , join: join$4 , softline: softline$3 , hardline: hardline$6 , line: line$4 , group: group$6 , indent: indent$4 , ifBreak: ifBreak$3  } = document.builders;
            const { getNextNode: getNextNode$1 , getPreviousNode: getPreviousNode$1 , hasPrettierIgnore: hasPrettierIgnore$1 , isGlimmerComponent: isGlimmerComponent$1 , isNextNodeOfSomeType: isNextNodeOfSomeType$1 , isParentOfSomeType: isParentOfSomeType$1 , isPreviousNodeOfSomeType: isPreviousNodeOfSomeType$1 , isWhitespaceNode: isWhitespaceNode$1  } = utils$3;
            const voidTags = [
                "area",
                "base",
                "br",
                "col",
                "embed",
                "hr",
                "img",
                "input",
                "link",
                "meta",
                "param",
                "source",
                "track",
                "wbr"
            ];
            function print(path6, options2, print2) {
                const n = path6.getValue();
                if (!n) {
                    return "";
                }
                if (hasPrettierIgnore$1(path6)) {
                    const startOffset = locationToOffset(options2.originalText, n.loc.start.line - 1, n.loc.start.column);
                    const endOffset = locationToOffset(options2.originalText, n.loc.end.line - 1, n.loc.end.column);
                    const ignoredText = options2.originalText.slice(startOffset, endOffset);
                    return ignoredText;
                }
                switch(n.type){
                    case "Block":
                    case "Program":
                    case "Template":
                        {
                            return group$6(concat$7(path6.map(print2, "body")));
                        }
                    case "ElementNode":
                        {
                            const hasChildren = n.children.length > 0;
                            const hasNonWhitespaceChildren = n.children.some((n2)=>!isWhitespaceNode$1(n2));
                            const isVoid = isGlimmerComponent$1(n) && (!hasChildren || !hasNonWhitespaceChildren) || voidTags.includes(n.tag);
                            const closeTagForNoBreak = isVoid ? concat$7([
                                " />",
                                softline$3
                            ]) : ">";
                            const closeTagForBreak = isVoid ? "/>" : ">";
                            const printParams2 = (path7, print3)=>indent$4(concat$7([
                                    n.attributes.length ? line$4 : "",
                                    join$4(line$4, path7.map(print3, "attributes")),
                                    n.modifiers.length ? line$4 : "",
                                    join$4(line$4, path7.map(print3, "modifiers")),
                                    n.comments.length ? line$4 : "",
                                    join$4(line$4, path7.map(print3, "comments"))
                                ]));
                            const nextNode = getNextNode$1(path6);
                            return concat$7([
                                group$6(concat$7([
                                    "<",
                                    n.tag,
                                    printParams2(path6, print2),
                                    n.blockParams.length ? " as |".concat(n.blockParams.join(" "), "|") : "",
                                    ifBreak$3(softline$3, ""),
                                    ifBreak$3(closeTagForBreak, closeTagForNoBreak)
                                ])),
                                !isVoid ? group$6(concat$7([
                                    hasNonWhitespaceChildren ? indent$4(printChildren(path6, options2, print2)) : "",
                                    ifBreak$3(hasChildren ? hardline$6 : "", ""),
                                    concat$7([
                                        "</",
                                        n.tag,
                                        ">"
                                    ])
                                ])) : "",
                                nextNode && nextNode.type === "ElementNode" ? hardline$6 : ""
                            ]);
                        }
                    case "BlockStatement":
                        {
                            const pp = path6.getParentNode(1);
                            const isElseIf = pp && pp.inverse && pp.inverse.body.length === 1 && pp.inverse.body[0] === n && pp.inverse.body[0].path.parts[0] === "if";
                            const hasElseIf = n.inverse && n.inverse.body.length === 1 && n.inverse.body[0].type === "BlockStatement" && n.inverse.body[0].path.parts[0] === "if";
                            const indentElse = hasElseIf ? (a3)=>a3 : indent$4;
                            const inverseElseStatement = (n.inverseStrip.open ? "{{~" : "{{") + "else" + (n.inverseStrip.close ? "~}}" : "}}");
                            if (n.inverse) {
                                return concat$7([
                                    isElseIf ? concat$7([
                                        n.openStrip.open ? "{{~else " : "{{else ",
                                        printPathParams(path6, print2),
                                        n.openStrip.close ? "~}}" : "}}"
                                    ]) : printOpenBlock(path6, print2, n.openStrip),
                                    indent$4(concat$7([
                                        hardline$6,
                                        path6.call(print2, "program")
                                    ])),
                                    n.inverse && !hasElseIf ? concat$7([
                                        hardline$6,
                                        inverseElseStatement
                                    ]) : "",
                                    n.inverse ? indentElse(concat$7([
                                        hardline$6,
                                        path6.call(print2, "inverse")
                                    ])) : "",
                                    isElseIf ? "" : concat$7([
                                        hardline$6,
                                        printCloseBlock(path6, print2, n.closeStrip)
                                    ])
                                ]);
                            } else if (isElseIf) {
                                return concat$7([
                                    concat$7([
                                        n.openStrip.open ? "{{~else" : "{{else ",
                                        printPathParams(path6, print2),
                                        n.openStrip.close ? "~}}" : "}}"
                                    ]),
                                    indent$4(concat$7([
                                        hardline$6,
                                        path6.call(print2, "program")
                                    ]))
                                ]);
                            }
                            const hasNonWhitespaceChildren = n.program.body.some((n2)=>!isWhitespaceNode$1(n2));
                            return concat$7([
                                printOpenBlock(path6, print2, n.openStrip),
                                group$6(concat$7([
                                    indent$4(concat$7([
                                        softline$3,
                                        path6.call(print2, "program")
                                    ])),
                                    hasNonWhitespaceChildren ? hardline$6 : softline$3,
                                    printCloseBlock(path6, print2, n.closeStrip)
                                ]))
                            ]);
                        }
                    case "ElementModifierStatement":
                        {
                            return group$6(concat$7([
                                "{{",
                                printPathParams(path6, print2),
                                softline$3,
                                "}}"
                            ]));
                        }
                    case "MustacheStatement":
                        {
                            const isEscaped = n.escaped === false;
                            const { open: openStrip , close: closeStrip  } = n.strip;
                            const opening = (isEscaped ? "{{{" : "{{") + (openStrip ? "~" : "");
                            const closing = (closeStrip ? "~" : "") + (isEscaped ? "}}}" : "}}");
                            const leading = isParentOfSomeType$1(path6, [
                                "AttrNode",
                                "ConcatStatement",
                                "ElementNode"
                            ]) ? [
                                opening,
                                indent$4(softline$3)
                            ] : [
                                opening
                            ];
                            return group$6(concat$7([
                                ...leading,
                                printPathParams(path6, print2),
                                softline$3,
                                closing
                            ]));
                        }
                    case "SubExpression":
                        {
                            const params = printParams(path6, print2);
                            const printedParams = params.length > 0 ? indent$4(concat$7([
                                line$4,
                                group$6(join$4(line$4, params))
                            ])) : "";
                            return group$6(concat$7([
                                "(",
                                printPath(path6, print2),
                                printedParams,
                                softline$3,
                                ")"
                            ]));
                        }
                    case "AttrNode":
                        {
                            const isText = n.value.type === "TextNode";
                            const isEmptyText = isText && n.value.chars === "";
                            const isEmptyValue = isEmptyText && n.value.loc.start.column === n.value.loc.end.column;
                            if (isEmptyValue) {
                                return concat$7([
                                    n.name
                                ]);
                            }
                            const value1 = path6.call(print2, "value");
                            const quotedValue = isText ? printStringLiteral(value1.parts.join(), options2) : value1;
                            return concat$7([
                                n.name,
                                "=",
                                quotedValue
                            ]);
                        }
                    case "ConcatStatement":
                        {
                            return concat$7([
                                '"',
                                concat$7(path6.map((partPath)=>print2(partPath), "parts").filter((a3)=>a3 !== "")),
                                '"'
                            ]);
                        }
                    case "Hash":
                        {
                            return concat$7([
                                join$4(line$4, path6.map(print2, "pairs"))
                            ]);
                        }
                    case "HashPair":
                        {
                            return concat$7([
                                n.key,
                                "=",
                                path6.call(print2, "value")
                            ]);
                        }
                    case "TextNode":
                        {
                            const maxLineBreaksToPreserve = 2;
                            const isFirstElement = !getPreviousNode$1(path6);
                            const isLastElement = !getNextNode$1(path6);
                            const isWhitespaceOnly = !/\S/.test(n.chars);
                            const lineBreaksCount = countNewLines(n.chars);
                            const hasBlockParent = path6.getParentNode(0).type === "Block";
                            const hasElementParent = path6.getParentNode(0).type === "ElementNode";
                            const hasTemplateParent = path6.getParentNode(0).type === "Template";
                            let leadingLineBreaksCount = countLeadingNewLines(n.chars);
                            let trailingLineBreaksCount = countTrailingNewLines(n.chars);
                            if ((isFirstElement || isLastElement) && isWhitespaceOnly && (hasBlockParent || hasElementParent || hasTemplateParent)) {
                                return "";
                            }
                            if (isWhitespaceOnly && lineBreaksCount) {
                                leadingLineBreaksCount = Math.min(lineBreaksCount, maxLineBreaksToPreserve);
                                trailingLineBreaksCount = 0;
                            } else {
                                if (isNextNodeOfSomeType$1(path6, [
                                    "BlockStatement",
                                    "ElementNode"
                                ])) {
                                    trailingLineBreaksCount = Math.max(trailingLineBreaksCount, 1);
                                }
                                if (isPreviousNodeOfSomeType$1(path6, [
                                    "ElementNode"
                                ]) || isPreviousNodeOfSomeType$1(path6, [
                                    "BlockStatement"
                                ])) {
                                    leadingLineBreaksCount = Math.max(leadingLineBreaksCount, 1);
                                }
                            }
                            let leadingSpace = "";
                            let trailingSpace = "";
                            const inAttrNode = path6.stack.includes("attributes");
                            if (inAttrNode) {
                                const parentNode = path6.getParentNode(0);
                                const isConcat = parentNode.type === "ConcatStatement";
                                if (isConcat) {
                                    const { parts  } = parentNode;
                                    const partIndex = parts.indexOf(n);
                                    if (partIndex > 0) {
                                        const partType = parts[partIndex - 1].type;
                                        const isMustache = partType === "MustacheStatement";
                                        if (isMustache) {
                                            leadingSpace = " ";
                                        }
                                    }
                                    if (partIndex < parts.length - 1) {
                                        const partType = parts[partIndex + 1].type;
                                        const isMustache = partType === "MustacheStatement";
                                        if (isMustache) {
                                            trailingSpace = " ";
                                        }
                                    }
                                }
                            } else {
                                if (trailingLineBreaksCount === 0 && isNextNodeOfSomeType$1(path6, [
                                    "MustacheStatement"
                                ])) {
                                    trailingSpace = " ";
                                }
                                if (leadingLineBreaksCount === 0 && isPreviousNodeOfSomeType$1(path6, [
                                    "MustacheStatement"
                                ])) {
                                    leadingSpace = " ";
                                }
                                if (isFirstElement) {
                                    leadingLineBreaksCount = 0;
                                    leadingSpace = "";
                                }
                                if (isLastElement) {
                                    trailingLineBreaksCount = 0;
                                    trailingSpace = "";
                                }
                            }
                            return concat$7([
                                ...generateHardlines(leadingLineBreaksCount, maxLineBreaksToPreserve),
                                n.chars.replace(/^[\s ]+/g, leadingSpace).replace(/[\s ]+$/, trailingSpace),
                                ...generateHardlines(trailingLineBreaksCount, maxLineBreaksToPreserve)
                            ].filter(Boolean));
                        }
                    case "MustacheCommentStatement":
                        {
                            const dashes = n.value.includes("}}") ? "--" : "";
                            return concat$7([
                                "{{!",
                                dashes,
                                n.value,
                                dashes,
                                "}}"
                            ]);
                        }
                    case "PathExpression":
                        {
                            return n.original;
                        }
                    case "BooleanLiteral":
                        {
                            return String(n.value);
                        }
                    case "CommentStatement":
                        {
                            return concat$7([
                                "<!--",
                                n.value,
                                "-->"
                            ]);
                        }
                    case "StringLiteral":
                        {
                            return printStringLiteral(n.value, options2);
                        }
                    case "NumberLiteral":
                        {
                            return String(n.value);
                        }
                    case "UndefinedLiteral":
                        {
                            return "undefined";
                        }
                    case "NullLiteral":
                        {
                            return "null";
                        }
                    default:
                        throw new Error("unknown glimmer type: " + JSON.stringify(n.type));
                }
            }
            function printChildren(path6, options2, print2) {
                return concat$7(path6.map((childPath, childIndex)=>{
                    const childNode = path6.getValue();
                    const isFirstNode = childIndex === 0;
                    const isLastNode2 = childIndex === path6.getParentNode(0).children.length - 1;
                    const isLastNodeInMultiNodeList = isLastNode2 && !isFirstNode;
                    const isWhitespace = isWhitespaceNode$1(childNode);
                    if (isWhitespace && isLastNodeInMultiNodeList) {
                        return print2(childPath, options2, print2);
                    } else if (isFirstNode) {
                        return concat$7([
                            softline$3,
                            print2(childPath, options2, print2)
                        ]);
                    }
                    return print2(childPath, options2, print2);
                }, "children"));
            }
            function printStringLiteral(stringLiteral, options2) {
                const double = {
                    quote: '"',
                    regex: /"/g
                };
                const single = {
                    quote: "'",
                    regex: /'/g
                };
                const preferred = options2.singleQuote ? single : double;
                const alternate = preferred === single ? double : single;
                let shouldUseAlternateQuote = false;
                if (stringLiteral.includes(preferred.quote) || stringLiteral.includes(alternate.quote)) {
                    const numPreferredQuotes = (stringLiteral.match(preferred.regex) || []).length;
                    const numAlternateQuotes = (stringLiteral.match(alternate.regex) || []).length;
                    shouldUseAlternateQuote = numPreferredQuotes > numAlternateQuotes;
                }
                const enclosingQuote = shouldUseAlternateQuote ? alternate : preferred;
                const escapedStringLiteral = stringLiteral.replace(enclosingQuote.regex, "\\".concat(enclosingQuote.quote));
                return concat$7([
                    enclosingQuote.quote,
                    escapedStringLiteral,
                    enclosingQuote.quote
                ]);
            }
            function printPath(path6, print2) {
                return path6.call(print2, "path");
            }
            function printParams(path6, print2) {
                const node = path6.getValue();
                let parts = [];
                if (node.params.length > 0) {
                    parts = parts.concat(path6.map(print2, "params"));
                }
                if (node.hash && node.hash.pairs.length > 0) {
                    parts.push(path6.call(print2, "hash"));
                }
                return parts;
            }
            function printPathParams(path6, print2) {
                const printedPath = printPath(path6, print2);
                const printedParams = printParams(path6, print2);
                const parts = [
                    printedPath,
                    ...printedParams
                ];
                return indent$4(group$6(join$4(line$4, parts)));
            }
            function printBlockParams(path6) {
                const block = path6.getValue();
                if (!block.program || !block.program.blockParams.length) {
                    return "";
                }
                return concat$7([
                    " as |",
                    block.program.blockParams.join(" "),
                    "|"
                ]);
            }
            function printOpenBlock(path6, print2, { open: isOpenStrip = false , close: isCloseStrip = false  } = {}) {
                return group$6(concat$7([
                    isOpenStrip ? "{{~#" : "{{#",
                    printPathParams(path6, print2),
                    printBlockParams(path6),
                    softline$3,
                    isCloseStrip ? "~}}" : "}}"
                ]));
            }
            function printCloseBlock(path6, print2, { open: isOpenStrip = false , close: isCloseStrip = false  } = {}) {
                return concat$7([
                    isOpenStrip ? "{{~/" : "{{/",
                    path6.call(print2, "path"),
                    isCloseStrip ? "~}}" : "}}"
                ]);
            }
            function countNewLines(string3) {
                string3 = typeof string3 === "string" ? string3 : "";
                return string3.split("\n").length - 1;
            }
            function countLeadingNewLines(string3) {
                string3 = typeof string3 === "string" ? string3 : "";
                const newLines = (string3.match(/^([^\S\r\n]*[\r\n])+/g) || [])[0] || "";
                return countNewLines(newLines);
            }
            function countTrailingNewLines(string3) {
                string3 = typeof string3 === "string" ? string3 : "";
                const newLines = (string3.match(/([\r\n][^\S\r\n]*)+$/g) || [])[0] || "";
                return countNewLines(newLines);
            }
            function generateHardlines(number2 = 0, max = 0) {
                return new Array(Math.min(number2, max)).fill(hardline$6);
            }
            function locationToOffset(source2, line2, column) {
                let seenLines = 0;
                let seenChars = 0;
                while(true){
                    if (seenChars === source2.length) {
                        return null;
                    }
                    let nextLine = source2.indexOf("\n", seenChars);
                    if (nextLine === -1) {
                        nextLine = source2.length;
                    }
                    if (seenLines === line2) {
                        if (seenChars + column > nextLine) {
                            return null;
                        }
                        return seenChars + column;
                    } else if (nextLine === -1) {
                        return null;
                    }
                    seenLines += 1;
                    seenChars = nextLine + 1;
                }
            }
            var printerGlimmer = {
                print,
                massageAstNode: clean$2
            };
            var name$6 = "Handlebars";
            var type$5 = "markup";
            var group$7 = "HTML";
            var aliases = [
                "hbs",
                "htmlbars"
            ];
            var extensions$5 = [
                ".handlebars",
                ".hbs"
            ];
            var tmScope$5 = "text.html.handlebars";
            var aceMode$5 = "handlebars";
            var languageId$5 = 155;
            var Handlebars = {
                name: name$6,
                type: type$5,
                group: group$7,
                aliases,
                extensions: extensions$5,
                tmScope: tmScope$5,
                aceMode: aceMode$5,
                languageId: languageId$5
            };
            var Handlebars$1 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                name: name$6,
                type: type$5,
                group: group$7,
                aliases,
                extensions: extensions$5,
                tmScope: tmScope$5,
                aceMode: aceMode$5,
                languageId: languageId$5,
                "default": Handlebars
            });
            var require$$0$4 = getCjsExportFromNamespace(Handlebars$1);
            const languages$2 = [
                createLanguage(require$$0$4, ()=>({
                        since: null,
                        // unreleased
                        parsers: [
                            "glimmer"
                        ],
                        vscodeLanguageIds: [
                            "handlebars"
                        ]
                    }))
            ];
            const printers$2 = {
                glimmer: printerGlimmer
            };
            var languageHandlebars = {
                languages: languages$2,
                printers: printers$2
            };
            var clean$3 = function clean2(ast2, newNode) {
                delete newNode.sourceSpan;
                delete newNode.startSourceSpan;
                delete newNode.endSourceSpan;
                delete newNode.nameSpan;
                delete newNode.valueSpan;
                if (ast2.type === "text" || ast2.type === "comment") {
                    return null;
                }
                if (ast2.type === "yaml" || ast2.type === "toml") {
                    return null;
                }
                if (ast2.type === "attribute") {
                    delete newNode.value;
                }
                if (ast2.type === "docType") {
                    delete newNode.value;
                }
            };
            var json = {
                "CSS_DISPLAY_TAGS": {
                    "area": "none",
                    "base": "none",
                    "basefont": "none",
                    "datalist": "none",
                    "head": "none",
                    "link": "none",
                    "meta": "none",
                    "noembed": "none",
                    "noframes": "none",
                    "param": "none",
                    "rp": "none",
                    "script": "block",
                    "source": "block",
                    "style": "none",
                    "template": "inline",
                    "track": "block",
                    "title": "none",
                    "html": "block",
                    "body": "block",
                    "address": "block",
                    "blockquote": "block",
                    "center": "block",
                    "div": "block",
                    "figure": "block",
                    "figcaption": "block",
                    "footer": "block",
                    "form": "block",
                    "header": "block",
                    "hr": "block",
                    "legend": "block",
                    "listing": "block",
                    "main": "block",
                    "p": "block",
                    "plaintext": "block",
                    "pre": "block",
                    "xmp": "block",
                    "slot": "contents",
                    "ruby": "ruby",
                    "rt": "ruby-text",
                    "article": "block",
                    "aside": "block",
                    "h1": "block",
                    "h2": "block",
                    "h3": "block",
                    "h4": "block",
                    "h5": "block",
                    "h6": "block",
                    "hgroup": "block",
                    "nav": "block",
                    "section": "block",
                    "dir": "block",
                    "dd": "block",
                    "dl": "block",
                    "dt": "block",
                    "ol": "block",
                    "ul": "block",
                    "li": "list-item",
                    "table": "table",
                    "caption": "table-caption",
                    "colgroup": "table-column-group",
                    "col": "table-column",
                    "thead": "table-header-group",
                    "tbody": "table-row-group",
                    "tfoot": "table-footer-group",
                    "tr": "table-row",
                    "td": "table-cell",
                    "th": "table-cell",
                    "fieldset": "block",
                    "button": "inline-block",
                    "video": "inline-block",
                    "audio": "inline-block"
                },
                "CSS_DISPLAY_DEFAULT": "inline",
                "CSS_WHITE_SPACE_TAGS": {
                    "listing": "pre",
                    "plaintext": "pre",
                    "pre": "pre",
                    "xmp": "pre",
                    "nobr": "nowrap",
                    "table": "initial",
                    "textarea": "pre-wrap"
                },
                "CSS_WHITE_SPACE_DEFAULT": "normal"
            };
            var index = [
                "a",
                "abbr",
                "acronym",
                "address",
                "applet",
                "area",
                "article",
                "aside",
                "audio",
                "b",
                "base",
                "basefont",
                "bdi",
                "bdo",
                "bgsound",
                "big",
                "blink",
                "blockquote",
                "body",
                "br",
                "button",
                "canvas",
                "caption",
                "center",
                "cite",
                "code",
                "col",
                "colgroup",
                "command",
                "content",
                "data",
                "datalist",
                "dd",
                "del",
                "details",
                "dfn",
                "dialog",
                "dir",
                "div",
                "dl",
                "dt",
                "element",
                "em",
                "embed",
                "fieldset",
                "figcaption",
                "figure",
                "font",
                "footer",
                "form",
                "frame",
                "frameset",
                "h1",
                "h2",
                "h3",
                "h4",
                "h5",
                "h6",
                "head",
                "header",
                "hgroup",
                "hr",
                "html",
                "i",
                "iframe",
                "image",
                "img",
                "input",
                "ins",
                "isindex",
                "kbd",
                "keygen",
                "label",
                "legend",
                "li",
                "link",
                "listing",
                "main",
                "map",
                "mark",
                "marquee",
                "math",
                "menu",
                "menuitem",
                "meta",
                "meter",
                "multicol",
                "nav",
                "nextid",
                "nobr",
                "noembed",
                "noframes",
                "noscript",
                "object",
                "ol",
                "optgroup",
                "option",
                "output",
                "p",
                "param",
                "picture",
                "plaintext",
                "pre",
                "progress",
                "q",
                "rb",
                "rbc",
                "rp",
                "rt",
                "rtc",
                "ruby",
                "s",
                "samp",
                "script",
                "section",
                "select",
                "shadow",
                "slot",
                "small",
                "source",
                "spacer",
                "span",
                "strike",
                "strong",
                "style",
                "sub",
                "summary",
                "sup",
                "svg",
                "table",
                "tbody",
                "td",
                "template",
                "textarea",
                "tfoot",
                "th",
                "thead",
                "time",
                "title",
                "tr",
                "track",
                "tt",
                "u",
                "ul",
                "var",
                "video",
                "wbr",
                "xmp"
            ];
            var htmlTagNames = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                "default": index
            });
            var a2 = [
                "accesskey",
                "charset",
                "coords",
                "download",
                "href",
                "hreflang",
                "name",
                "ping",
                "referrerpolicy",
                "rel",
                "rev",
                "shape",
                "tabindex",
                "target",
                "type"
            ];
            var abbr = [
                "title"
            ];
            var applet = [
                "align",
                "alt",
                "archive",
                "code",
                "codebase",
                "height",
                "hspace",
                "name",
                "object",
                "vspace",
                "width"
            ];
            var area = [
                "accesskey",
                "alt",
                "coords",
                "download",
                "href",
                "hreflang",
                "nohref",
                "ping",
                "referrerpolicy",
                "rel",
                "shape",
                "tabindex",
                "target",
                "type"
            ];
            var audio = [
                "autoplay",
                "controls",
                "crossorigin",
                "loop",
                "muted",
                "preload",
                "src"
            ];
            var base = [
                "href",
                "target"
            ];
            var basefont = [
                "color",
                "face",
                "size"
            ];
            var bdo = [
                "dir"
            ];
            var blockquote = [
                "cite"
            ];
            var body = [
                "alink",
                "background",
                "bgcolor",
                "link",
                "text",
                "vlink"
            ];
            var br = [
                "clear"
            ];
            var button = [
                "accesskey",
                "autofocus",
                "disabled",
                "form",
                "formaction",
                "formenctype",
                "formmethod",
                "formnovalidate",
                "formtarget",
                "name",
                "tabindex",
                "type",
                "value"
            ];
            var canvas = [
                "height",
                "width"
            ];
            var caption = [
                "align"
            ];
            var col = [
                "align",
                "char",
                "charoff",
                "span",
                "valign",
                "width"
            ];
            var colgroup = [
                "align",
                "char",
                "charoff",
                "span",
                "valign",
                "width"
            ];
            var data = [
                "value"
            ];
            var del = [
                "cite",
                "datetime"
            ];
            var details = [
                "open"
            ];
            var dfn = [
                "title"
            ];
            var dialog = [
                "open"
            ];
            var dir = [
                "compact"
            ];
            var div = [
                "align"
            ];
            var dl = [
                "compact"
            ];
            var embed$1 = [
                "height",
                "src",
                "type",
                "width"
            ];
            var fieldset = [
                "disabled",
                "form",
                "name"
            ];
            var font = [
                "color",
                "face",
                "size"
            ];
            var form = [
                "accept",
                "accept-charset",
                "action",
                "autocomplete",
                "enctype",
                "method",
                "name",
                "novalidate",
                "target"
            ];
            var frame = [
                "frameborder",
                "longdesc",
                "marginheight",
                "marginwidth",
                "name",
                "noresize",
                "scrolling",
                "src"
            ];
            var frameset = [
                "cols",
                "rows"
            ];
            var h1 = [
                "align"
            ];
            var h2 = [
                "align"
            ];
            var h3 = [
                "align"
            ];
            var h4 = [
                "align"
            ];
            var h5 = [
                "align"
            ];
            var h6 = [
                "align"
            ];
            var head = [
                "profile"
            ];
            var hr = [
                "align",
                "noshade",
                "size",
                "width"
            ];
            var html = [
                "manifest",
                "version"
            ];
            var iframe = [
                "align",
                "allow",
                "allowfullscreen",
                "allowpaymentrequest",
                "allowusermedia",
                "frameborder",
                "height",
                "longdesc",
                "marginheight",
                "marginwidth",
                "name",
                "referrerpolicy",
                "sandbox",
                "scrolling",
                "src",
                "srcdoc",
                "width"
            ];
            var img = [
                "align",
                "alt",
                "border",
                "crossorigin",
                "decoding",
                "height",
                "hspace",
                "ismap",
                "longdesc",
                "name",
                "referrerpolicy",
                "sizes",
                "src",
                "srcset",
                "usemap",
                "vspace",
                "width"
            ];
            var input = [
                "accept",
                "accesskey",
                "align",
                "alt",
                "autocomplete",
                "autofocus",
                "checked",
                "dirname",
                "disabled",
                "form",
                "formaction",
                "formenctype",
                "formmethod",
                "formnovalidate",
                "formtarget",
                "height",
                "ismap",
                "list",
                "max",
                "maxlength",
                "min",
                "minlength",
                "multiple",
                "name",
                "pattern",
                "placeholder",
                "readonly",
                "required",
                "size",
                "src",
                "step",
                "tabindex",
                "title",
                "type",
                "usemap",
                "value",
                "width"
            ];
            var ins = [
                "cite",
                "datetime"
            ];
            var isindex = [
                "prompt"
            ];
            var label = [
                "accesskey",
                "for",
                "form"
            ];
            var legend = [
                "accesskey",
                "align"
            ];
            var li = [
                "type",
                "value"
            ];
            var link$3 = [
                "as",
                "charset",
                "color",
                "crossorigin",
                "href",
                "hreflang",
                "imagesizes",
                "imagesrcset",
                "integrity",
                "media",
                "nonce",
                "referrerpolicy",
                "rel",
                "rev",
                "sizes",
                "target",
                "title",
                "type"
            ];
            var map2 = [
                "name"
            ];
            var menu = [
                "compact"
            ];
            var meta = [
                "charset",
                "content",
                "http-equiv",
                "name",
                "scheme"
            ];
            var meter = [
                "high",
                "low",
                "max",
                "min",
                "optimum",
                "value"
            ];
            var object = [
                "align",
                "archive",
                "border",
                "classid",
                "codebase",
                "codetype",
                "data",
                "declare",
                "form",
                "height",
                "hspace",
                "name",
                "standby",
                "tabindex",
                "type",
                "typemustmatch",
                "usemap",
                "vspace",
                "width"
            ];
            var ol = [
                "compact",
                "reversed",
                "start",
                "type"
            ];
            var optgroup = [
                "disabled",
                "label"
            ];
            var option = [
                "disabled",
                "label",
                "selected",
                "value"
            ];
            var output = [
                "for",
                "form",
                "name"
            ];
            var p = [
                "align"
            ];
            var param = [
                "name",
                "type",
                "value",
                "valuetype"
            ];
            var pre = [
                "width"
            ];
            var progress = [
                "max",
                "value"
            ];
            var q = [
                "cite"
            ];
            var script = [
                "async",
                "charset",
                "crossorigin",
                "defer",
                "integrity",
                "language",
                "nomodule",
                "nonce",
                "referrerpolicy",
                "src",
                "type"
            ];
            var select = [
                "autocomplete",
                "autofocus",
                "disabled",
                "form",
                "multiple",
                "name",
                "required",
                "size",
                "tabindex"
            ];
            var slot = [
                "name"
            ];
            var source$1 = [
                "media",
                "sizes",
                "src",
                "srcset",
                "type"
            ];
            var style = [
                "media",
                "nonce",
                "title",
                "type"
            ];
            var table = [
                "align",
                "bgcolor",
                "border",
                "cellpadding",
                "cellspacing",
                "frame",
                "rules",
                "summary",
                "width"
            ];
            var tbody = [
                "align",
                "char",
                "charoff",
                "valign"
            ];
            var td = [
                "abbr",
                "align",
                "axis",
                "bgcolor",
                "char",
                "charoff",
                "colspan",
                "headers",
                "height",
                "nowrap",
                "rowspan",
                "scope",
                "valign",
                "width"
            ];
            var textarea = [
                "accesskey",
                "autocomplete",
                "autofocus",
                "cols",
                "dirname",
                "disabled",
                "form",
                "maxlength",
                "minlength",
                "name",
                "placeholder",
                "readonly",
                "required",
                "rows",
                "tabindex",
                "wrap"
            ];
            var tfoot = [
                "align",
                "char",
                "charoff",
                "valign"
            ];
            var th = [
                "abbr",
                "align",
                "axis",
                "bgcolor",
                "char",
                "charoff",
                "colspan",
                "headers",
                "height",
                "nowrap",
                "rowspan",
                "scope",
                "valign",
                "width"
            ];
            var thead = [
                "align",
                "char",
                "charoff",
                "valign"
            ];
            var time = [
                "datetime"
            ];
            var tr = [
                "align",
                "bgcolor",
                "char",
                "charoff",
                "valign"
            ];
            var track = [
                "default",
                "kind",
                "label",
                "src",
                "srclang"
            ];
            var ul = [
                "compact",
                "type"
            ];
            var video = [
                "autoplay",
                "controls",
                "crossorigin",
                "height",
                "loop",
                "muted",
                "playsinline",
                "poster",
                "preload",
                "src",
                "width"
            ];
            var index$1 = {
                "*": [
                    "accesskey",
                    "autocapitalize",
                    "autofocus",
                    "class",
                    "contenteditable",
                    "dir",
                    "draggable",
                    "enterkeyhint",
                    "hidden",
                    "id",
                    "inputmode",
                    "is",
                    "itemid",
                    "itemprop",
                    "itemref",
                    "itemscope",
                    "itemtype",
                    "lang",
                    "nonce",
                    "slot",
                    "spellcheck",
                    "style",
                    "tabindex",
                    "title",
                    "translate"
                ],
                a: a2,
                abbr,
                applet,
                area,
                audio,
                base,
                basefont,
                bdo,
                blockquote,
                body,
                br,
                button,
                canvas,
                caption,
                col,
                colgroup,
                data,
                del,
                details,
                dfn,
                dialog,
                dir,
                div,
                dl,
                embed: embed$1,
                fieldset,
                font,
                form,
                frame,
                frameset,
                h1,
                h2,
                h3,
                h4,
                h5,
                h6,
                head,
                hr,
                html,
                iframe,
                img,
                input,
                ins,
                isindex,
                label,
                legend,
                li,
                link: link$3,
                map: map2,
                menu,
                meta,
                meter,
                object,
                ol,
                optgroup,
                option,
                output,
                p,
                param,
                pre,
                progress,
                q,
                script,
                select,
                slot,
                source: source$1,
                style,
                table,
                tbody,
                td,
                textarea,
                tfoot,
                th,
                thead,
                time,
                tr,
                track,
                ul,
                video
            };
            var htmlElementAttributes = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                a: a2,
                abbr,
                applet,
                area,
                audio,
                base,
                basefont,
                bdo,
                blockquote,
                body,
                br,
                button,
                canvas,
                caption,
                col,
                colgroup,
                data,
                del,
                details,
                dfn,
                dialog,
                dir,
                div,
                dl,
                embed: embed$1,
                fieldset,
                font,
                form,
                frame,
                frameset,
                h1,
                h2,
                h3,
                h4,
                h5,
                h6,
                head,
                hr,
                html,
                iframe,
                img,
                input,
                ins,
                isindex,
                label,
                legend,
                li,
                link: link$3,
                map: map2,
                menu,
                meta,
                meter,
                object,
                ol,
                optgroup,
                option,
                output,
                p,
                param,
                pre,
                progress,
                q,
                script,
                select,
                slot,
                source: source$1,
                style,
                table,
                tbody,
                td,
                textarea,
                tfoot,
                th,
                thead,
                time,
                tr,
                track,
                ul,
                video,
                "default": index$1
            });
            var htmlTagNames$1 = getCjsExportFromNamespace(htmlTagNames);
            var htmlElementAttributes$1 = getCjsExportFromNamespace(htmlElementAttributes);
            const { CSS_DISPLAY_TAGS , CSS_DISPLAY_DEFAULT , CSS_WHITE_SPACE_TAGS , CSS_WHITE_SPACE_DEFAULT  } = json;
            const HTML_TAGS = arrayToMap(htmlTagNames$1);
            const HTML_ELEMENT_ATTRIBUTES = mapObject(htmlElementAttributes$1, arrayToMap);
            function arrayToMap(array2) {
                const map3 = /* @__PURE__ */ Object.create(null);
                for (const value1 of array2){
                    map3[value1] = true;
                }
                return map3;
            }
            function mapObject(object2, fn) {
                const newObject = /* @__PURE__ */ Object.create(null);
                for (const key of Object.keys(object2)){
                    newObject[key] = fn(object2[key], key);
                }
                return newObject;
            }
            function shouldPreserveContent(node, options2) {
                if (!node.endSourceSpan) {
                    return false;
                }
                if (node.type === "element" && node.fullName === "template" && node.attrMap.lang && node.attrMap.lang !== "html") {
                    return true;
                }
                if (node.type === "ieConditionalComment" && node.lastChild && !node.lastChild.isSelfClosing && !node.lastChild.endSourceSpan) {
                    return true;
                }
                if (node.type === "ieConditionalComment" && !node.complete) {
                    return true;
                }
                if (options2.parser === "vue" && node.type === "element" && node.parent.type === "root" && ![
                    "template",
                    "style",
                    "script",
                    // vue parser can be used for vue dom template as well, so we should still format top-level <html>
                    "html"
                ].includes(node.fullName)) {
                    return true;
                }
                if (isPreLikeNode(node) && node.children.some((child)=>child.type !== "text" && child.type !== "interpolation")) {
                    return true;
                }
                return false;
            }
            function hasPrettierIgnore$2(node) {
                if (node.type === "attribute") {
                    return false;
                }
                if (!node.parent) {
                    return false;
                }
                if (typeof node.index !== "number" || node.index === 0) {
                    return false;
                }
                const prevNode = node.parent.children[node.index - 1];
                return isPrettierIgnore(prevNode);
            }
            function isPrettierIgnore(node) {
                return node.type === "comment" && node.value.trim() === "prettier-ignore";
            }
            function getPrettierIgnoreAttributeCommentData(value1) {
                const match = value1.trim().match(/^prettier-ignore-attribute(?:\s+([^]+))?$/);
                if (!match) {
                    return false;
                }
                if (!match[1]) {
                    return true;
                }
                return match[1].split(/\s+/);
            }
            function isTextLikeNode(node) {
                return node.type === "text" || node.type === "comment";
            }
            function isScriptLikeTag(node) {
                return node.type === "element" && (node.fullName === "script" || node.fullName === "style" || node.fullName === "svg:style" || isUnknownNamespace(node) && (node.name === "script" || node.name === "style"));
            }
            function isFrontMatterNode(node) {
                return node.type === "yaml" || node.type === "toml";
            }
            function canHaveInterpolation(node) {
                return node.children && !isScriptLikeTag(node);
            }
            function isWhitespaceSensitiveNode(node) {
                return isScriptLikeTag(node) || node.type === "interpolation" || isIndentationSensitiveNode(node);
            }
            function isIndentationSensitiveNode(node) {
                return getNodeCssStyleWhiteSpace(node).startsWith("pre");
            }
            function isLeadingSpaceSensitiveNode(node) {
                const isLeadingSpaceSensitive = _isLeadingSpaceSensitiveNode();
                if (isLeadingSpaceSensitive && !node.prev && node.parent && node.parent.tagDefinition && node.parent.tagDefinition.ignoreFirstLf) {
                    return node.type === "interpolation";
                }
                return isLeadingSpaceSensitive;
                function _isLeadingSpaceSensitiveNode() {
                    if (isFrontMatterNode(node)) {
                        return false;
                    }
                    if ((node.type === "text" || node.type === "interpolation") && node.prev && (node.prev.type === "text" || node.prev.type === "interpolation")) {
                        return true;
                    }
                    if (!node.parent || node.parent.cssDisplay === "none") {
                        return false;
                    }
                    if (isPreLikeNode(node.parent)) {
                        return true;
                    }
                    if (!node.prev && (node.parent.type === "root" || isPreLikeNode(node) && node.parent || isScriptLikeTag(node.parent) || !isFirstChildLeadingSpaceSensitiveCssDisplay(node.parent.cssDisplay))) {
                        return false;
                    }
                    if (node.prev && !isNextLeadingSpaceSensitiveCssDisplay(node.prev.cssDisplay)) {
                        return false;
                    }
                    return true;
                }
            }
            function isTrailingSpaceSensitiveNode(node) {
                if (isFrontMatterNode(node)) {
                    return false;
                }
                if ((node.type === "text" || node.type === "interpolation") && node.next && (node.next.type === "text" || node.next.type === "interpolation")) {
                    return true;
                }
                if (!node.parent || node.parent.cssDisplay === "none") {
                    return false;
                }
                if (isPreLikeNode(node.parent)) {
                    return true;
                }
                if (!node.next && (node.parent.type === "root" || isPreLikeNode(node) && node.parent || isScriptLikeTag(node.parent) || !isLastChildTrailingSpaceSensitiveCssDisplay(node.parent.cssDisplay))) {
                    return false;
                }
                if (node.next && !isPrevTrailingSpaceSensitiveCssDisplay(node.next.cssDisplay)) {
                    return false;
                }
                return true;
            }
            function isDanglingSpaceSensitiveNode(node) {
                return isDanglingSpaceSensitiveCssDisplay(node.cssDisplay) && !isScriptLikeTag(node);
            }
            function forceNextEmptyLine(node) {
                return isFrontMatterNode(node) || node.next && node.sourceSpan.end.line + 1 < node.next.sourceSpan.start.line;
            }
            function forceBreakContent(node) {
                return forceBreakChildren(node) || node.type === "element" && node.children.length !== 0 && ([
                    "body",
                    "script",
                    "style"
                ].includes(node.name) || node.children.some((child)=>hasNonTextChild(child))) || node.firstChild && node.firstChild === node.lastChild && hasLeadingLineBreak(node.firstChild) && (!node.lastChild.isTrailingSpaceSensitive || hasTrailingLineBreak(node.lastChild));
            }
            function forceBreakChildren(node) {
                return node.type === "element" && node.children.length !== 0 && ([
                    "html",
                    "head",
                    "ul",
                    "ol",
                    "select"
                ].includes(node.name) || node.cssDisplay.startsWith("table") && node.cssDisplay !== "table-cell");
            }
            function preferHardlineAsLeadingSpaces(node) {
                return preferHardlineAsSurroundingSpaces(node) || node.prev && preferHardlineAsTrailingSpaces(node.prev) || hasSurroundingLineBreak(node);
            }
            function preferHardlineAsTrailingSpaces(node) {
                return preferHardlineAsSurroundingSpaces(node) || node.type === "element" && node.fullName === "br" || hasSurroundingLineBreak(node);
            }
            function hasSurroundingLineBreak(node) {
                return hasLeadingLineBreak(node) && hasTrailingLineBreak(node);
            }
            function hasLeadingLineBreak(node) {
                return node.hasLeadingSpaces && (node.prev ? node.prev.sourceSpan.end.line < node.sourceSpan.start.line : node.parent.type === "root" || node.parent.startSourceSpan.end.line < node.sourceSpan.start.line);
            }
            function hasTrailingLineBreak(node) {
                return node.hasTrailingSpaces && (node.next ? node.next.sourceSpan.start.line > node.sourceSpan.end.line : node.parent.type === "root" || node.parent.endSourceSpan && node.parent.endSourceSpan.start.line > node.sourceSpan.end.line);
            }
            function preferHardlineAsSurroundingSpaces(node) {
                switch(node.type){
                    case "ieConditionalComment":
                    case "comment":
                    case "directive":
                        return true;
                    case "element":
                        return [
                            "script",
                            "select"
                        ].includes(node.name);
                }
                return false;
            }
            function getLastDescendant(node) {
                return node.lastChild ? getLastDescendant(node.lastChild) : node;
            }
            function hasNonTextChild(node) {
                return node.children && node.children.some((child)=>child.type !== "text");
            }
            function inferScriptParser(node) {
                if (node.name === "script" && !node.attrMap.src) {
                    if (!node.attrMap.lang && !node.attrMap.type || node.attrMap.type === "module" || node.attrMap.type === "text/javascript" || node.attrMap.type === "text/babel" || node.attrMap.type === "application/javascript" || node.attrMap.lang === "jsx") {
                        return "babel";
                    }
                    if (node.attrMap.type === "application/x-typescript" || node.attrMap.lang === "ts" || node.attrMap.lang === "tsx") {
                        return "typescript";
                    }
                    if (node.attrMap.type === "text/markdown") {
                        return "markdown";
                    }
                    if (node.attrMap.type.endsWith("json") || node.attrMap.type.endsWith("importmap")) {
                        return "json";
                    }
                    if (node.attrMap.type === "text/x-handlebars-template") {
                        return "glimmer";
                    }
                }
                if (node.name === "style") {
                    if (!node.attrMap.lang || node.attrMap.lang === "postcss" || node.attrMap.lang === "css") {
                        return "css";
                    }
                    if (node.attrMap.lang === "scss") {
                        return "scss";
                    }
                    if (node.attrMap.lang === "less") {
                        return "less";
                    }
                }
                return null;
            }
            function isBlockLikeCssDisplay(cssDisplay) {
                return cssDisplay === "block" || cssDisplay === "list-item" || cssDisplay.startsWith("table");
            }
            function isFirstChildLeadingSpaceSensitiveCssDisplay(cssDisplay) {
                return !isBlockLikeCssDisplay(cssDisplay) && cssDisplay !== "inline-block";
            }
            function isLastChildTrailingSpaceSensitiveCssDisplay(cssDisplay) {
                return !isBlockLikeCssDisplay(cssDisplay) && cssDisplay !== "inline-block";
            }
            function isPrevTrailingSpaceSensitiveCssDisplay(cssDisplay) {
                return !isBlockLikeCssDisplay(cssDisplay);
            }
            function isNextLeadingSpaceSensitiveCssDisplay(cssDisplay) {
                return !isBlockLikeCssDisplay(cssDisplay);
            }
            function isDanglingSpaceSensitiveCssDisplay(cssDisplay) {
                return !isBlockLikeCssDisplay(cssDisplay) && cssDisplay !== "inline-block";
            }
            function isPreLikeNode(node) {
                return getNodeCssStyleWhiteSpace(node).startsWith("pre");
            }
            function countParents(path6, predicate = ()=>true) {
                let counter = 0;
                for(let i = path6.stack.length - 1; i >= 0; i--){
                    const value1 = path6.stack[i];
                    if (value1 && typeof value1 === "object" && !Array.isArray(value1) && predicate(value1)) {
                        counter++;
                    }
                }
                return counter;
            }
            function hasParent(node, fn) {
                let current = node;
                while(current){
                    if (fn(current)) {
                        return true;
                    }
                    current = current.parent;
                }
                return false;
            }
            function getNodeCssStyleDisplay(node, options2) {
                if (node.prev && node.prev.type === "comment") {
                    const match = node.prev.value.match(/^\s*display:\s*([a-z]+)\s*$/);
                    if (match) {
                        return match[1];
                    }
                }
                let isInSvgForeignObject = false;
                if (node.type === "element" && node.namespace === "svg") {
                    if (hasParent(node, (parent)=>parent.fullName === "svg:foreignObject")) {
                        isInSvgForeignObject = true;
                    } else {
                        return node.name === "svg" ? "inline-block" : "block";
                    }
                }
                switch(options2.htmlWhitespaceSensitivity){
                    case "strict":
                        return "inline";
                    case "ignore":
                        return "block";
                    default:
                        return node.type === "element" && (!node.namespace || isInSvgForeignObject || isUnknownNamespace(node)) && CSS_DISPLAY_TAGS[node.name] || CSS_DISPLAY_DEFAULT;
                }
            }
            function isUnknownNamespace(node) {
                return node.type === "element" && !node.hasExplicitNamespace && ![
                    "html",
                    "svg"
                ].includes(node.namespace);
            }
            function getNodeCssStyleWhiteSpace(node) {
                return node.type === "element" && (!node.namespace || isUnknownNamespace(node)) && CSS_WHITE_SPACE_TAGS[node.name] || CSS_WHITE_SPACE_DEFAULT;
            }
            function getMinIndentation(text) {
                let minIndentation = Infinity;
                for (const lineText of text.split("\n")){
                    if (lineText.length === 0) {
                        continue;
                    }
                    if (/\S/.test(lineText[0])) {
                        return 0;
                    }
                    const indentation = lineText.match(/^\s*/)[0].length;
                    if (lineText.length === indentation) {
                        continue;
                    }
                    if (indentation < minIndentation) {
                        minIndentation = indentation;
                    }
                }
                return minIndentation === Infinity ? 0 : minIndentation;
            }
            function dedentString(text, minIndent = getMinIndentation(text)) {
                return minIndent === 0 ? text : text.split("\n").map((lineText)=>lineText.slice(minIndent)).join("\n");
            }
            function normalizeParts(parts) {
                const newParts = [];
                const restParts = parts.slice();
                while(restParts.length !== 0){
                    const part = restParts.shift();
                    if (!part) {
                        continue;
                    }
                    if (part.type === "concat") {
                        restParts.unshift(...part.parts);
                        continue;
                    }
                    if (newParts.length !== 0 && typeof newParts[newParts.length - 1] === "string" && typeof part === "string") {
                        newParts.push(newParts.pop() + part);
                        continue;
                    }
                    newParts.push(part);
                }
                return newParts;
            }
            function identity(x) {
                return x;
            }
            function shouldNotPrintClosingTag(node, options2) {
                return !node.isSelfClosing && !node.endSourceSpan && (hasPrettierIgnore$2(node) || shouldPreserveContent(node.parent, options2));
            }
            function countChars(text, char) {
                let counter = 0;
                for(let i = 0; i < text.length; i++){
                    if (text[i] === char) {
                        counter++;
                    }
                }
                return counter;
            }
            function unescapeQuoteEntities(text) {
                return text.replace(/&apos;/g, "'").replace(/&quot;/g, '"');
            }
            var utils$4 = {
                HTML_ELEMENT_ATTRIBUTES,
                HTML_TAGS,
                canHaveInterpolation,
                countChars,
                countParents,
                dedentString,
                forceBreakChildren,
                forceBreakContent,
                forceNextEmptyLine,
                getLastDescendant,
                getNodeCssStyleDisplay,
                getNodeCssStyleWhiteSpace,
                getPrettierIgnoreAttributeCommentData,
                hasPrettierIgnore: hasPrettierIgnore$2,
                identity,
                inferScriptParser,
                isDanglingSpaceSensitiveNode,
                isFrontMatterNode,
                isIndentationSensitiveNode,
                isLeadingSpaceSensitiveNode,
                isPreLikeNode,
                isScriptLikeTag,
                isTextLikeNode,
                isTrailingSpaceSensitiveNode,
                isWhitespaceSensitiveNode,
                isUnknownNamespace,
                normalizeParts,
                preferHardlineAsLeadingSpaces,
                preferHardlineAsTrailingSpaces,
                shouldNotPrintClosingTag,
                shouldPreserveContent,
                unescapeQuoteEntities
            };
            const { canHaveInterpolation: canHaveInterpolation$1 , getNodeCssStyleDisplay: getNodeCssStyleDisplay$1 , isDanglingSpaceSensitiveNode: isDanglingSpaceSensitiveNode$1 , isIndentationSensitiveNode: isIndentationSensitiveNode$1 , isLeadingSpaceSensitiveNode: isLeadingSpaceSensitiveNode$1 , isTrailingSpaceSensitiveNode: isTrailingSpaceSensitiveNode$1 , isWhitespaceSensitiveNode: isWhitespaceSensitiveNode$1  } = utils$4;
            const PREPROCESS_PIPELINE = [
                removeIgnorableFirstLf,
                mergeIeConditonalStartEndCommentIntoElementOpeningTag,
                mergeCdataIntoText,
                extractInterpolation,
                extractWhitespaces,
                addCssDisplay,
                addIsSelfClosing,
                addHasHtmComponentClosingTag,
                addIsSpaceSensitive,
                mergeSimpleElementIntoText
            ];
            function preprocess(ast2, options2) {
                for (const fn of PREPROCESS_PIPELINE){
                    ast2 = fn(ast2, options2);
                }
                return ast2;
            }
            function removeIgnorableFirstLf(ast2) {
                return ast2.map((node)=>{
                    if (node.type === "element" && node.tagDefinition.ignoreFirstLf && node.children.length !== 0 && node.children[0].type === "text" && node.children[0].value[0] === "\n") {
                        const [text, ...rest] = node.children;
                        return node.clone({
                            children: text.value.length === 1 ? rest : [
                                text.clone({
                                    value: text.value.slice(1)
                                }),
                                ...rest
                            ]
                        });
                    }
                    return node;
                });
            }
            function mergeIeConditonalStartEndCommentIntoElementOpeningTag(ast2) {
                const isTarget = (node)=>node.type === "element" && node.prev && node.prev.type === "ieConditionalStartComment" && node.prev.sourceSpan.end.offset === node.startSourceSpan.start.offset && node.firstChild && node.firstChild.type === "ieConditionalEndComment" && node.firstChild.sourceSpan.start.offset === node.startSourceSpan.end.offset;
                return ast2.map((node)=>{
                    if (node.children) {
                        const isTargetResults = node.children.map(isTarget);
                        if (isTargetResults.some(Boolean)) {
                            const newChildren = [];
                            for(let i = 0; i < node.children.length; i++){
                                const child = node.children[i];
                                if (isTargetResults[i + 1]) {
                                    continue;
                                }
                                if (isTargetResults[i]) {
                                    const ieConditionalStartComment = child.prev;
                                    const ieConditionalEndComment = child.firstChild;
                                    const ParseSourceSpan = child.sourceSpan.constructor;
                                    const startSourceSpan = new ParseSourceSpan(ieConditionalStartComment.sourceSpan.start, ieConditionalEndComment.sourceSpan.end);
                                    const sourceSpan = new ParseSourceSpan(startSourceSpan.start, child.sourceSpan.end);
                                    newChildren.push(child.clone({
                                        condition: ieConditionalStartComment.condition,
                                        sourceSpan,
                                        startSourceSpan,
                                        children: child.children.slice(1)
                                    }));
                                    continue;
                                }
                                newChildren.push(child);
                            }
                            return node.clone({
                                children: newChildren
                            });
                        }
                    }
                    return node;
                });
            }
            function mergeNodeIntoText(ast2, shouldMerge, getValue) {
                return ast2.map((node)=>{
                    if (node.children) {
                        const shouldMergeResults = node.children.map(shouldMerge);
                        if (shouldMergeResults.some(Boolean)) {
                            const newChildren = [];
                            for(let i = 0; i < node.children.length; i++){
                                const child = node.children[i];
                                if (child.type !== "text" && !shouldMergeResults[i]) {
                                    newChildren.push(child);
                                    continue;
                                }
                                const newChild = child.type === "text" ? child : child.clone({
                                    type: "text",
                                    value: getValue(child)
                                });
                                if (newChildren.length === 0 || newChildren[newChildren.length - 1].type !== "text") {
                                    newChildren.push(newChild);
                                    continue;
                                }
                                const lastChild = newChildren.pop();
                                const ParseSourceSpan = lastChild.sourceSpan.constructor;
                                newChildren.push(lastChild.clone({
                                    value: lastChild.value + newChild.value,
                                    sourceSpan: new ParseSourceSpan(lastChild.sourceSpan.start, newChild.sourceSpan.end)
                                }));
                            }
                            return node.clone({
                                children: newChildren
                            });
                        }
                    }
                    return node;
                });
            }
            function mergeCdataIntoText(ast2) {
                return mergeNodeIntoText(ast2, (node)=>node.type === "cdata", (node)=>"<![CDATA[".concat(node.value, "]]>"));
            }
            function mergeSimpleElementIntoText(ast2) {
                const isSimpleElement = (node)=>node.type === "element" && node.attrs.length === 0 && node.children.length === 1 && node.firstChild.type === "text" && // \xA0: non-breaking whitespace
                    !/[^\S\xA0]/.test(node.children[0].value) && !node.firstChild.hasLeadingSpaces && !node.firstChild.hasTrailingSpaces && node.isLeadingSpaceSensitive && !node.hasLeadingSpaces && node.isTrailingSpaceSensitive && !node.hasTrailingSpaces && node.prev && node.prev.type === "text" && node.next && node.next.type === "text";
                return ast2.map((node)=>{
                    if (node.children) {
                        const isSimpleElementResults = node.children.map(isSimpleElement);
                        if (isSimpleElementResults.some(Boolean)) {
                            const newChildren = [];
                            for(let i = 0; i < node.children.length; i++){
                                const child = node.children[i];
                                if (isSimpleElementResults[i]) {
                                    const lastChild = newChildren.pop();
                                    const nextChild = node.children[++i];
                                    const ParseSourceSpan = node.sourceSpan.constructor;
                                    const { isTrailingSpaceSensitive , hasTrailingSpaces  } = nextChild;
                                    newChildren.push(lastChild.clone({
                                        value: lastChild.value + "<".concat(child.rawName, ">") + child.firstChild.value + "</".concat(child.rawName, ">") + nextChild.value,
                                        sourceSpan: new ParseSourceSpan(lastChild.sourceSpan.start, nextChild.sourceSpan.end),
                                        isTrailingSpaceSensitive,
                                        hasTrailingSpaces
                                    }));
                                } else {
                                    newChildren.push(child);
                                }
                            }
                            return node.clone({
                                children: newChildren
                            });
                        }
                    }
                    return node;
                });
            }
            function extractInterpolation(ast2, options2) {
                if (options2.parser === "html") {
                    return ast2;
                }
                const interpolationRegex = /\{\{([\s\S]+?)\}\}/g;
                return ast2.map((node)=>{
                    if (!canHaveInterpolation$1(node)) {
                        return node;
                    }
                    const newChildren = [];
                    for (const child of node.children){
                        if (child.type !== "text") {
                            newChildren.push(child);
                            continue;
                        }
                        const ParseSourceSpan = child.sourceSpan.constructor;
                        let startSourceSpan = child.sourceSpan.start;
                        let endSourceSpan = null;
                        const components = child.value.split(interpolationRegex);
                        for(let i = 0; i < components.length; i++, startSourceSpan = endSourceSpan){
                            const value1 = components[i];
                            if (i % 2 === 0) {
                                endSourceSpan = startSourceSpan.moveBy(value1.length);
                                if (value1.length !== 0) {
                                    newChildren.push({
                                        type: "text",
                                        value: value1,
                                        sourceSpan: new ParseSourceSpan(startSourceSpan, endSourceSpan)
                                    });
                                }
                                continue;
                            }
                            endSourceSpan = startSourceSpan.moveBy(value1.length + 4);
                            newChildren.push({
                                type: "interpolation",
                                sourceSpan: new ParseSourceSpan(startSourceSpan, endSourceSpan),
                                children: value1.length === 0 ? [] : [
                                    {
                                        type: "text",
                                        value: value1,
                                        sourceSpan: new ParseSourceSpan(startSourceSpan.moveBy(2), endSourceSpan.moveBy(-2))
                                    }
                                ]
                            });
                        }
                    }
                    return node.clone({
                        children: newChildren
                    });
                });
            }
            function extractWhitespaces(ast2) {
                const TYPE_WHITESPACE = "whitespace";
                return ast2.map((node)=>{
                    if (!node.children) {
                        return node;
                    }
                    if (node.children.length === 0 || node.children.length === 1 && node.children[0].type === "text" && node.children[0].value.trim().length === 0) {
                        return node.clone({
                            children: [],
                            hasDanglingSpaces: node.children.length !== 0
                        });
                    }
                    const isWhitespaceSensitive = isWhitespaceSensitiveNode$1(node);
                    const isIndentationSensitive = isIndentationSensitiveNode$1(node);
                    return node.clone({
                        isWhitespaceSensitive,
                        isIndentationSensitive,
                        children: node.children.reduce((newChildren, child)=>{
                            if (child.type !== "text" || isWhitespaceSensitive) {
                                return newChildren.concat(child);
                            }
                            const localChildren = [];
                            const [, leadingSpaces, text, trailingSpaces] = child.value.match(/^(\s*)([\s\S]*?)(\s*)$/);
                            if (leadingSpaces) {
                                localChildren.push({
                                    type: TYPE_WHITESPACE
                                });
                            }
                            const ParseSourceSpan = child.sourceSpan.constructor;
                            if (text) {
                                localChildren.push({
                                    type: "text",
                                    value: text,
                                    sourceSpan: new ParseSourceSpan(child.sourceSpan.start.moveBy(leadingSpaces.length), child.sourceSpan.end.moveBy(-trailingSpaces.length))
                                });
                            }
                            if (trailingSpaces) {
                                localChildren.push({
                                    type: TYPE_WHITESPACE
                                });
                            }
                            return newChildren.concat(localChildren);
                        }, []).reduce((newChildren, child, i, children)=>{
                            if (child.type === TYPE_WHITESPACE) {
                                return newChildren;
                            }
                            const hasLeadingSpaces = i !== 0 && children[i - 1].type === TYPE_WHITESPACE;
                            const hasTrailingSpaces = i !== children.length - 1 && children[i + 1].type === TYPE_WHITESPACE;
                            return newChildren.concat(Object.assign({}, child, {
                                hasLeadingSpaces,
                                hasTrailingSpaces
                            }));
                        }, [])
                    });
                });
            }
            function addIsSelfClosing(ast2) {
                return ast2.map((node)=>Object.assign(node, {
                        isSelfClosing: !node.children || node.type === "element" && (node.tagDefinition.isVoid || // self-closing
                        node.startSourceSpan === node.endSourceSpan)
                    }));
            }
            function addHasHtmComponentClosingTag(ast2, options2) {
                return ast2.map((node)=>node.type !== "element" ? node : Object.assign(node, {
                        hasHtmComponentClosingTag: node.endSourceSpan && /^<\s*\/\s*\/\s*>$/.test(options2.originalText.slice(node.endSourceSpan.start.offset, node.endSourceSpan.end.offset))
                    }));
            }
            function addCssDisplay(ast2, options2) {
                return ast2.map((node)=>Object.assign(node, {
                        cssDisplay: getNodeCssStyleDisplay$1(node, options2)
                    }));
            }
            function addIsSpaceSensitive(ast2) {
                return ast2.map((node)=>{
                    if (!node.children) {
                        return node;
                    }
                    if (node.children.length === 0) {
                        return node.clone({
                            isDanglingSpaceSensitive: isDanglingSpaceSensitiveNode$1(node)
                        });
                    }
                    return node.clone({
                        children: node.children.map((child)=>{
                            return Object.assign({}, child, {
                                isLeadingSpaceSensitive: isLeadingSpaceSensitiveNode$1(child),
                                isTrailingSpaceSensitive: isTrailingSpaceSensitiveNode$1(child)
                            });
                        }).map((child, index2, children)=>Object.assign({}, child, {
                                isLeadingSpaceSensitive: index2 === 0 ? child.isLeadingSpaceSensitive : children[index2 - 1].isTrailingSpaceSensitive && child.isLeadingSpaceSensitive,
                                isTrailingSpaceSensitive: index2 === children.length - 1 ? child.isTrailingSpaceSensitive : children[index2 + 1].isLeadingSpaceSensitive && child.isTrailingSpaceSensitive
                            }))
                    });
                });
            }
            var preprocess_1 = preprocess;
            function hasPragma$3(text) {
                return /^\s*<!--\s*@(format|prettier)\s*-->/.test(text);
            }
            function insertPragma$5(text) {
                return "<!-- @format -->\n\n" + text.replace(/^\s*\n/, "");
            }
            var pragma$3 = {
                hasPragma: hasPragma$3,
                insertPragma: insertPragma$5
            };
            const { builders: { concat: concat$8 , group: group$8  }  } = document;
            function printVueFor(value1, textToDoc2) {
                const { left , operator , right  } = parseVueFor(value1);
                return concat$8([
                    group$8(textToDoc2("function _(".concat(left, ") {}"), {
                        parser: "babel",
                        __isVueForBindingLeft: true
                    })),
                    " ",
                    operator,
                    " ",
                    textToDoc2(right, {
                        parser: "__js_expression"
                    })
                ]);
            }
            function parseVueFor(value1) {
                const forAliasRE = /([^]*?)\s+(in|of)\s+([^]*)/;
                const forIteratorRE = /,([^,}\]]*)(?:,([^,}\]]*))?$/;
                const stripParensRE = /^\(|\)$/g;
                const inMatch = value1.match(forAliasRE);
                if (!inMatch) {
                    return;
                }
                const res = {};
                res.for = inMatch[3].trim();
                const alias2 = inMatch[1].trim().replace(stripParensRE, "");
                const iteratorMatch = alias2.match(forIteratorRE);
                if (iteratorMatch) {
                    res.alias = alias2.replace(forIteratorRE, "");
                    res.iterator1 = iteratorMatch[1].trim();
                    if (iteratorMatch[2]) {
                        res.iterator2 = iteratorMatch[2].trim();
                    }
                } else {
                    res.alias = alias2;
                }
                return {
                    left: "".concat([
                        res.alias,
                        res.iterator1,
                        res.iterator2
                    ].filter(Boolean).join(",")),
                    operator: inMatch[2],
                    right: res.for
                };
            }
            function printVueSlotScope(value1, textToDoc2) {
                return textToDoc2("function _(".concat(value1, ") {}"), {
                    parser: "babel",
                    __isVueSlotScope: true
                });
            }
            function isVueEventBindingExpression(eventBindingValue) {
                const fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/;
                const simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;
                const value1 = eventBindingValue.trim();
                return fnExpRE.test(value1) || simplePathRE.test(value1);
            }
            var syntaxVue = {
                isVueEventBindingExpression,
                printVueFor,
                printVueSlotScope
            };
            const integerRegex = /^\d+$/;
            function deepUnique(array2) {
                return array2.sort().filter((element, index2)=>{
                    return JSON.stringify(element) !== JSON.stringify(array2[index2 - 1]);
                });
            }
            var parse$2 = (string3)=>{
                return deepUnique(string3.split(",").map((part)=>{
                    const result = {};
                    part.trim().split(/\s+/).forEach((element, index2)=>{
                        if (index2 === 0) {
                            result.url = element;
                            return;
                        }
                        const value1 = element.slice(0, element.length - 1);
                        const postfix = element[element.length - 1];
                        const integerValue = parseInt(value1, 10);
                        const floatValue = parseFloat(value1);
                        if (postfix === "w" && integerRegex.test(value1)) {
                            result.width = integerValue;
                        } else if (postfix === "h" && integerRegex.test(value1)) {
                            result.height = integerValue;
                        } else if (postfix === "x" && !Number.isNaN(floatValue)) {
                            result.density = floatValue;
                        } else {
                            throw new Error("Invalid srcset descriptor: ".concat(element));
                        }
                    });
                    return result;
                }));
            };
            var stringify4 = (array2)=>{
                return [
                    ...new Set(array2.map((element)=>{
                        if (!element.url) {
                            throw new Error("URL is required");
                        }
                        const result = [
                            element.url
                        ];
                        if (element.width) {
                            result.push("".concat(element.width, "w"));
                        }
                        if (element.height) {
                            result.push("".concat(element.height, "h"));
                        }
                        if (element.density) {
                            result.push("".concat(element.density, "x"));
                        }
                        return result.join(" ");
                    }))
                ].join(", ");
            };
            var srcset = {
                parse: parse$2,
                stringify: stringify4
            };
            const { builders: { concat: concat$9 , ifBreak: ifBreak$4 , join: join$5 , line: line$5  }  } = document;
            const parseSrcset = srcset.parse;
            function printImgSrcset(value1) {
                const srcset2 = parseSrcset(value1);
                const hasW = srcset2.some((src)=>src.width);
                const hasH = srcset2.some((src)=>src.height);
                const hasX = srcset2.some((src)=>src.density);
                if (hasW + hasH + hasX > 1) {
                    throw new Error("Mixed descriptor in srcset is not supported");
                }
                const key = hasW ? "width" : hasH ? "height" : "density";
                const unit = hasW ? "w" : hasH ? "h" : "x";
                const getMax = (values)=>Math.max(...values);
                const urls = srcset2.map((src)=>src.url);
                const maxUrlLength = getMax(urls.map((url)=>url.length));
                const descriptors2 = srcset2.map((src)=>src[key]).map((descriptor)=>descriptor ? descriptor.toString() : "");
                const descriptorLeftLengths = descriptors2.map((descriptor)=>{
                    const index2 = descriptor.indexOf(".");
                    return index2 === -1 ? descriptor.length : index2;
                });
                const maxDescriptorLeftLength = getMax(descriptorLeftLengths);
                return join$5(concat$9([
                    ",",
                    line$5
                ]), urls.map((url, index2)=>{
                    const parts = [
                        url
                    ];
                    const descriptor = descriptors2[index2];
                    if (descriptor) {
                        const urlPadding = maxUrlLength - url.length + 1;
                        const descriptorPadding = maxDescriptorLeftLength - descriptorLeftLengths[index2];
                        const alignment = " ".repeat(urlPadding + descriptorPadding);
                        parts.push(ifBreak$4(alignment, " "), descriptor + unit);
                    }
                    return concat$9(parts);
                }));
            }
            function printClassNames(value1) {
                return value1.trim().split(/\s+/).join(" ");
            }
            var syntaxAttribute = {
                printImgSrcset,
                printClassNames
            };
            const { builders , utils: { stripTrailingHardline: stripTrailingHardline$1 , mapDoc: mapDoc$2  }  } = document;
            const { breakParent: breakParent$2 , dedentToRoot: dedentToRoot$1 , fill: fill$3 , group: group$9 , hardline: hardline$7 , ifBreak: ifBreak$5 , indent: indent$5 , join: join$6 , line: line$6 , literalline: literalline$2 , markAsRoot: markAsRoot$2 , softline: softline$4  } = builders;
            const { countChars: countChars$1 , countParents: countParents$1 , dedentString: dedentString$1 , forceBreakChildren: forceBreakChildren$1 , forceBreakContent: forceBreakContent$1 , forceNextEmptyLine: forceNextEmptyLine$1 , getLastDescendant: getLastDescendant$1 , getPrettierIgnoreAttributeCommentData: getPrettierIgnoreAttributeCommentData$1 , hasPrettierIgnore: hasPrettierIgnore$3 , inferScriptParser: inferScriptParser$1 , isScriptLikeTag: isScriptLikeTag$1 , isTextLikeNode: isTextLikeNode$1 , normalizeParts: normalizeParts$1 , preferHardlineAsLeadingSpaces: preferHardlineAsLeadingSpaces$1 , shouldNotPrintClosingTag: shouldNotPrintClosingTag$1 , shouldPreserveContent: shouldPreserveContent$1 , unescapeQuoteEntities: unescapeQuoteEntities$1  } = utils$4;
            const { replaceEndOfLineWith: replaceEndOfLineWith$1  } = util$1;
            const { insertPragma: insertPragma$6  } = pragma$3;
            const { printVueFor: printVueFor$1 , printVueSlotScope: printVueSlotScope$1 , isVueEventBindingExpression: isVueEventBindingExpression$1  } = syntaxVue;
            const { printImgSrcset: printImgSrcset$1 , printClassNames: printClassNames$1  } = syntaxAttribute;
            function concat$a(parts) {
                const newParts = normalizeParts$1(parts);
                return newParts.length === 0 ? "" : newParts.length === 1 ? newParts[0] : builders.concat(newParts);
            }
            function embed$2(path6, print2, textToDoc2, options2) {
                const node = path6.getValue();
                switch(node.type){
                    case "text":
                        {
                            if (isScriptLikeTag$1(node.parent)) {
                                const parser3 = inferScriptParser$1(node.parent);
                                if (parser3) {
                                    const value1 = parser3 === "markdown" ? dedentString$1(node.value.replace(/^[^\S\n]*?\n/, "")) : node.value;
                                    return builders.concat([
                                        concat$a([
                                            breakParent$2,
                                            printOpeningTagPrefix(node, options2),
                                            stripTrailingHardline$1(textToDoc2(value1, {
                                                parser: parser3
                                            })),
                                            printClosingTagSuffix(node, options2)
                                        ])
                                    ]);
                                }
                            } else if (node.parent.type === "interpolation") {
                                return concat$a([
                                    indent$5(concat$a([
                                        line$6,
                                        textToDoc2(node.value, Object.assign({
                                            __isInHtmlInterpolation: true
                                        }, options2.parser === "angular" ? {
                                            parser: "__ng_interpolation",
                                            trailingComma: "none"
                                        } : options2.parser === "vue" ? {
                                            parser: "__vue_expression"
                                        } : {
                                            parser: "__js_expression"
                                        }))
                                    ])),
                                    node.parent.next && needsToBorrowPrevClosingTagEndMarker(node.parent.next) ? " " : line$6
                                ]);
                            }
                            break;
                        }
                    case "attribute":
                        {
                            if (!node.value) {
                                break;
                            }
                            if (/^PRETTIER_HTML_PLACEHOLDER_\d+_\d+_IN_JS$/.test(options2.originalText.slice(node.valueSpan.start.offset, node.valueSpan.end.offset))) {
                                return concat$a([
                                    node.rawName,
                                    "=",
                                    node.value
                                ]);
                            }
                            if (options2.parser === "lwc") {
                                const interpolationRegex = /^\{[\s\S]*\}$/;
                                if (interpolationRegex.test(options2.originalText.slice(node.valueSpan.start.offset, node.valueSpan.end.offset))) {
                                    return concat$a([
                                        node.rawName,
                                        "=",
                                        node.value
                                    ]);
                                }
                            }
                            const embeddedAttributeValueDoc = printEmbeddedAttributeValue(node, (code2, opts)=>// strictly prefer single quote to avoid unnecessary html entity escape
                                textToDoc2(code2, Object.assign({
                                    __isInHtmlAttribute: true
                                }, opts)), options2);
                            if (embeddedAttributeValueDoc) {
                                return concat$a([
                                    node.rawName,
                                    '="',
                                    group$9(mapDoc$2(embeddedAttributeValueDoc, (doc2)=>typeof doc2 === "string" ? doc2.replace(/"/g, "&quot;") : doc2)),
                                    '"'
                                ]);
                            }
                            break;
                        }
                    case "yaml":
                        return markAsRoot$2(concat$a([
                            "---",
                            hardline$7,
                            node.value.trim().length === 0 ? "" : textToDoc2(node.value, {
                                parser: "yaml"
                            }),
                            "---"
                        ]));
                }
            }
            function genericPrint$2(path6, options2, print2) {
                const node = path6.getValue();
                switch(node.type){
                    case "root":
                        if (options2.__onHtmlRoot) {
                            options2.__onHtmlRoot(node);
                        }
                        return builders.concat([
                            group$9(printChildren$1(path6, options2, print2)),
                            hardline$7
                        ]);
                    case "element":
                    case "ieConditionalComment":
                        {
                            const shouldHugContent = node.children.length === 1 && node.firstChild.type === "interpolation" && node.firstChild.isLeadingSpaceSensitive && !node.firstChild.hasLeadingSpaces && node.lastChild.isTrailingSpaceSensitive && !node.lastChild.hasTrailingSpaces;
                            const attrGroupId = Symbol("element-attr-group-id");
                            return concat$a([
                                group$9(concat$a([
                                    group$9(printOpeningTag(path6, options2, print2), {
                                        id: attrGroupId
                                    }),
                                    node.children.length === 0 ? node.hasDanglingSpaces && node.isDanglingSpaceSensitive ? line$6 : "" : concat$a([
                                        forceBreakContent$1(node) ? breakParent$2 : "",
                                        ((childrenDoc)=>shouldHugContent ? ifBreak$5(indent$5(childrenDoc), childrenDoc, {
                                                groupId: attrGroupId
                                            }) : isScriptLikeTag$1(node) && node.parent.type === "root" && options2.parser === "vue" && !options2.vueIndentScriptAndStyle ? childrenDoc : indent$5(childrenDoc))(concat$a([
                                            shouldHugContent ? ifBreak$5(softline$4, "", {
                                                groupId: attrGroupId
                                            }) : node.firstChild.hasLeadingSpaces && node.firstChild.isLeadingSpaceSensitive ? line$6 : node.firstChild.type === "text" && node.isWhitespaceSensitive && node.isIndentationSensitive ? dedentToRoot$1(softline$4) : softline$4,
                                            printChildren$1(path6, options2, print2)
                                        ])),
                                        (node.next ? needsToBorrowPrevClosingTagEndMarker(node.next) : needsToBorrowLastChildClosingTagEndMarker(node.parent)) ? node.lastChild.hasTrailingSpaces && node.lastChild.isTrailingSpaceSensitive ? " " : "" : shouldHugContent ? ifBreak$5(softline$4, "", {
                                            groupId: attrGroupId
                                        }) : node.lastChild.hasTrailingSpaces && node.lastChild.isTrailingSpaceSensitive ? line$6 : (node.lastChild.type === "comment" || node.lastChild.type === "text" && node.isWhitespaceSensitive && node.isIndentationSensitive) && new RegExp("\\n\\s{".concat(options2.tabWidth * countParents$1(path6, (n)=>n.parent && n.parent.type !== "root"), "}$")).test(node.lastChild.value) ? /**
               *     <div>
               *       <pre>
               *         something
               *       </pre>
               *            ~
               *     </div>
               */ "" : softline$4
                                    ])
                                ])),
                                printClosingTag(node, options2)
                            ]);
                        }
                    case "ieConditionalStartComment":
                    case "ieConditionalEndComment":
                        return concat$a([
                            printOpeningTagStart(node),
                            printClosingTagEnd(node)
                        ]);
                    case "interpolation":
                        return concat$a([
                            printOpeningTagStart(node, options2),
                            concat$a(path6.map(print2, "children")),
                            printClosingTagEnd(node, options2)
                        ]);
                    case "text":
                        {
                            if (node.parent.type === "interpolation") {
                                const trailingNewlineRegex = /\n[^\S\n]*?$/;
                                const hasTrailingNewline = trailingNewlineRegex.test(node.value);
                                const value1 = hasTrailingNewline ? node.value.replace(trailingNewlineRegex, "") : node.value;
                                return concat$a([
                                    concat$a(replaceEndOfLineWith$1(value1, literalline$2)),
                                    hasTrailingNewline ? hardline$7 : ""
                                ]);
                            }
                            return fill$3(normalizeParts$1([].concat(printOpeningTagPrefix(node, options2), getTextValueParts(node), printClosingTagSuffix(node, options2))));
                        }
                    case "docType":
                        return concat$a([
                            group$9(concat$a([
                                printOpeningTagStart(node, options2),
                                " ",
                                node.value.replace(/^html\b/i, "html").replace(/\s+/g, " ")
                            ])),
                            printClosingTagEnd(node, options2)
                        ]);
                    case "comment":
                        {
                            return concat$a([
                                printOpeningTagPrefix(node, options2),
                                concat$a(replaceEndOfLineWith$1(options2.originalText.slice(options2.locStart(node), options2.locEnd(node)), literalline$2)),
                                printClosingTagSuffix(node, options2)
                            ]);
                        }
                    case "attribute":
                        {
                            if (node.value === null) {
                                return node.rawName;
                            }
                            const value1 = unescapeQuoteEntities$1(node.value);
                            const singleQuoteCount = countChars$1(value1, "'");
                            const doubleQuoteCount = countChars$1(value1, '"');
                            const quote = singleQuoteCount < doubleQuoteCount ? "'" : '"';
                            return concat$a([
                                node.rawName,
                                concat$a([
                                    "=",
                                    quote,
                                    concat$a(replaceEndOfLineWith$1(quote === '"' ? value1.replace(/"/g, "&quot;") : value1.replace(/'/g, "&apos;"), literalline$2)),
                                    quote
                                ])
                            ]);
                        }
                    case "yaml":
                    case "toml":
                        return concat$a(replaceEndOfLineWith$1(node.raw, literalline$2));
                    default:
                        throw new Error("Unexpected node type ".concat(node.type));
                }
            }
            function printChildren$1(path6, options2, print2) {
                const node = path6.getValue();
                if (forceBreakChildren$1(node)) {
                    return concat$a([
                        breakParent$2,
                        concat$a(path6.map((childPath)=>{
                            const childNode = childPath.getValue();
                            const prevBetweenLine = !childNode.prev ? "" : printBetweenLine(childNode.prev, childNode);
                            return concat$a([
                                !prevBetweenLine ? "" : concat$a([
                                    prevBetweenLine,
                                    forceNextEmptyLine$1(childNode.prev) ? hardline$7 : ""
                                ]),
                                printChild(childPath)
                            ]);
                        }, "children"))
                    ]);
                }
                const groupIds = node.children.map(()=>Symbol(""));
                return concat$a(path6.map((childPath, childIndex)=>{
                    const childNode = childPath.getValue();
                    if (isTextLikeNode$1(childNode)) {
                        if (childNode.prev && isTextLikeNode$1(childNode.prev)) {
                            const prevBetweenLine2 = printBetweenLine(childNode.prev, childNode);
                            if (prevBetweenLine2) {
                                if (forceNextEmptyLine$1(childNode.prev)) {
                                    return concat$a([
                                        hardline$7,
                                        hardline$7,
                                        printChild(childPath)
                                    ]);
                                }
                                return concat$a([
                                    prevBetweenLine2,
                                    printChild(childPath)
                                ]);
                            }
                        }
                        return printChild(childPath);
                    }
                    const prevParts = [];
                    const leadingParts = [];
                    const trailingParts = [];
                    const nextParts = [];
                    const prevBetweenLine = childNode.prev ? printBetweenLine(childNode.prev, childNode) : "";
                    const nextBetweenLine = childNode.next ? printBetweenLine(childNode, childNode.next) : "";
                    if (prevBetweenLine) {
                        if (forceNextEmptyLine$1(childNode.prev)) {
                            prevParts.push(hardline$7, hardline$7);
                        } else if (prevBetweenLine === hardline$7) {
                            prevParts.push(hardline$7);
                        } else {
                            if (isTextLikeNode$1(childNode.prev)) {
                                leadingParts.push(prevBetweenLine);
                            } else {
                                leadingParts.push(ifBreak$5("", softline$4, {
                                    groupId: groupIds[childIndex - 1]
                                }));
                            }
                        }
                    }
                    if (nextBetweenLine) {
                        if (forceNextEmptyLine$1(childNode)) {
                            if (isTextLikeNode$1(childNode.next)) {
                                nextParts.push(hardline$7, hardline$7);
                            }
                        } else if (nextBetweenLine === hardline$7) {
                            if (isTextLikeNode$1(childNode.next)) {
                                nextParts.push(hardline$7);
                            }
                        } else {
                            trailingParts.push(nextBetweenLine);
                        }
                    }
                    return concat$a([].concat(prevParts, group$9(concat$a([
                        concat$a(leadingParts),
                        group$9(concat$a([
                            printChild(childPath),
                            concat$a(trailingParts)
                        ]), {
                            id: groupIds[childIndex]
                        })
                    ])), nextParts));
                }, "children"));
                function printChild(childPath) {
                    const child = childPath.getValue();
                    if (hasPrettierIgnore$3(child)) {
                        return concat$a([].concat(printOpeningTagPrefix(child, options2), replaceEndOfLineWith$1(options2.originalText.slice(options2.locStart(child) + (child.prev && needsToBorrowNextOpeningTagStartMarker(child.prev) ? printOpeningTagStartMarker(child).length : 0), options2.locEnd(child) - (child.next && needsToBorrowPrevClosingTagEndMarker(child.next) ? printClosingTagEndMarker(child, options2).length : 0)), literalline$2), printClosingTagSuffix(child, options2)));
                    }
                    if (shouldPreserveContent$1(child, options2)) {
                        return concat$a([].concat(printOpeningTagPrefix(child, options2), group$9(printOpeningTag(childPath, options2, print2)), replaceEndOfLineWith$1(options2.originalText.slice(child.startSourceSpan.end.offset + (child.firstChild && needsToBorrowParentOpeningTagEndMarker(child.firstChild) ? -printOpeningTagEndMarker(child).length : 0), child.endSourceSpan.start.offset + (child.lastChild && needsToBorrowParentClosingTagStartMarker(child.lastChild) ? printClosingTagStartMarker(child, options2).length : needsToBorrowLastChildClosingTagEndMarker(child) ? -printClosingTagEndMarker(child.lastChild, options2).length : 0)), literalline$2), printClosingTag(child, options2), printClosingTagSuffix(child, options2)));
                    }
                    return print2(childPath);
                }
                function printBetweenLine(prevNode, nextNode) {
                    return isTextLikeNode$1(prevNode) && isTextLikeNode$1(nextNode) ? prevNode.isTrailingSpaceSensitive ? prevNode.hasTrailingSpaces ? preferHardlineAsLeadingSpaces$1(nextNode) ? hardline$7 : line$6 : "" : preferHardlineAsLeadingSpaces$1(nextNode) ? hardline$7 : softline$4 : needsToBorrowNextOpeningTagStartMarker(prevNode) && (hasPrettierIgnore$3(nextNode) || /**
           *     123<a
           *          ~
           *       ><b>
           */ nextNode.firstChild || /**
           *     123<!--
           *            ~
           *     -->
           */ nextNode.isSelfClosing || /**
           *     123<span
           *             ~
           *       attr
           */ nextNode.type === "element" && nextNode.attrs.length !== 0) || /**
           *     <img
           *       src="long"
           *                 ~
           *     />123
           */ prevNode.type === "element" && prevNode.isSelfClosing && needsToBorrowPrevClosingTagEndMarker(nextNode) ? "" : !nextNode.isLeadingSpaceSensitive || preferHardlineAsLeadingSpaces$1(nextNode) || /**
           *       Want to write us a letter? Use our<a
           *         ><b><a>mailing address</a></b></a
           *                                          ~
           *       >.
           */ needsToBorrowPrevClosingTagEndMarker(nextNode) && prevNode.lastChild && needsToBorrowParentClosingTagStartMarker(prevNode.lastChild) && prevNode.lastChild.lastChild && needsToBorrowParentClosingTagStartMarker(prevNode.lastChild.lastChild) ? hardline$7 : nextNode.hasLeadingSpaces ? line$6 : softline$4;
                }
            }
            function printOpeningTag(path6, options2, print2) {
                const node = path6.getValue();
                const forceNotToBreakAttrContent = node.type === "element" && node.fullName === "script" && node.attrs.length === 1 && node.attrs[0].fullName === "src" && node.children.length === 0;
                return concat$a([
                    printOpeningTagStart(node, options2),
                    !node.attrs || node.attrs.length === 0 ? node.isSelfClosing ? /**
           *     <br />
           *        ^
           */ " " : "" : concat$a([
                        indent$5(concat$a([
                            forceNotToBreakAttrContent ? " " : line$6,
                            join$6(line$6, ((ignoreAttributeData)=>{
                                const hasPrettierIgnoreAttribute = typeof ignoreAttributeData === "boolean" ? ()=>ignoreAttributeData : Array.isArray(ignoreAttributeData) ? (attr)=>ignoreAttributeData.includes(attr.rawName) : ()=>false;
                                return path6.map((attrPath)=>{
                                    const attr = attrPath.getValue();
                                    return hasPrettierIgnoreAttribute(attr) ? concat$a(replaceEndOfLineWith$1(options2.originalText.slice(options2.locStart(attr), options2.locEnd(attr)), literalline$2)) : print2(attrPath);
                                }, "attrs");
                            })(node.prev && node.prev.type === "comment" && getPrettierIgnoreAttributeCommentData$1(node.prev.value)))
                        ])),
                        /**
           *     123<a
           *       attr
           *           ~
           *       >456
           */ node.firstChild && needsToBorrowParentOpeningTagEndMarker(node.firstChild) || /**
           *     <span
           *       >123<meta
           *                ~
           *     /></span>
           */ node.isSelfClosing && needsToBorrowLastChildClosingTagEndMarker(node.parent) ? node.isSelfClosing ? " " : "" : node.isSelfClosing ? forceNotToBreakAttrContent ? " " : line$6 : forceNotToBreakAttrContent ? "" : softline$4
                    ]),
                    node.isSelfClosing ? "" : printOpeningTagEnd(node)
                ]);
            }
            function printOpeningTagStart(node, options2) {
                return node.prev && needsToBorrowNextOpeningTagStartMarker(node.prev) ? "" : concat$a([
                    printOpeningTagPrefix(node, options2),
                    printOpeningTagStartMarker(node)
                ]);
            }
            function printOpeningTagEnd(node) {
                return node.firstChild && needsToBorrowParentOpeningTagEndMarker(node.firstChild) ? "" : printOpeningTagEndMarker(node);
            }
            function printClosingTag(node, options2) {
                return concat$a([
                    node.isSelfClosing ? "" : printClosingTagStart(node, options2),
                    printClosingTagEnd(node, options2)
                ]);
            }
            function printClosingTagStart(node, options2) {
                return node.lastChild && needsToBorrowParentClosingTagStartMarker(node.lastChild) ? "" : concat$a([
                    printClosingTagPrefix(node, options2),
                    printClosingTagStartMarker(node, options2)
                ]);
            }
            function printClosingTagEnd(node, options2) {
                return (node.next ? needsToBorrowPrevClosingTagEndMarker(node.next) : needsToBorrowLastChildClosingTagEndMarker(node.parent)) ? "" : concat$a([
                    printClosingTagEndMarker(node, options2),
                    printClosingTagSuffix(node, options2)
                ]);
            }
            function needsToBorrowNextOpeningTagStartMarker(node) {
                return node.next && !isTextLikeNode$1(node.next) && isTextLikeNode$1(node) && node.isTrailingSpaceSensitive && !node.hasTrailingSpaces;
            }
            function needsToBorrowParentOpeningTagEndMarker(node) {
                return !node.prev && node.isLeadingSpaceSensitive && !node.hasLeadingSpaces;
            }
            function needsToBorrowPrevClosingTagEndMarker(node) {
                return node.prev && !isTextLikeNode$1(node.prev) && node.isLeadingSpaceSensitive && !node.hasLeadingSpaces;
            }
            function needsToBorrowLastChildClosingTagEndMarker(node) {
                return node.lastChild && node.lastChild.isTrailingSpaceSensitive && !node.lastChild.hasTrailingSpaces && !isTextLikeNode$1(getLastDescendant$1(node.lastChild));
            }
            function needsToBorrowParentClosingTagStartMarker(node) {
                return !node.next && !node.hasTrailingSpaces && node.isTrailingSpaceSensitive && isTextLikeNode$1(getLastDescendant$1(node));
            }
            function printOpeningTagPrefix(node, options2) {
                return needsToBorrowParentOpeningTagEndMarker(node) ? printOpeningTagEndMarker(node.parent) : needsToBorrowPrevClosingTagEndMarker(node) ? printClosingTagEndMarker(node.prev, options2) : "";
            }
            function printClosingTagPrefix(node, options2) {
                return needsToBorrowLastChildClosingTagEndMarker(node) ? printClosingTagEndMarker(node.lastChild, options2) : "";
            }
            function printClosingTagSuffix(node, options2) {
                return needsToBorrowParentClosingTagStartMarker(node) ? printClosingTagStartMarker(node.parent, options2) : needsToBorrowNextOpeningTagStartMarker(node) ? printOpeningTagStartMarker(node.next) : "";
            }
            function printOpeningTagStartMarker(node) {
                switch(node.type){
                    case "ieConditionalComment":
                    case "ieConditionalStartComment":
                        return "<!--[if ".concat(node.condition);
                    case "ieConditionalEndComment":
                        return "<!--<!";
                    case "interpolation":
                        return "{{";
                    case "docType":
                        return "<!DOCTYPE";
                    case "element":
                        if (node.condition) {
                            return "<!--[if ".concat(node.condition, "]><!--><").concat(node.rawName);
                        }
                    default:
                        return "<".concat(node.rawName);
                }
            }
            function printOpeningTagEndMarker(node) {
                assert(!node.isSelfClosing);
                switch(node.type){
                    case "ieConditionalComment":
                        return "]>";
                    case "element":
                        if (node.condition) {
                            return "><!--<![endif]-->";
                        }
                    default:
                        return ">";
                }
            }
            function printClosingTagStartMarker(node, options2) {
                assert(!node.isSelfClosing);
                if (shouldNotPrintClosingTag$1(node, options2)) {
                    return "";
                }
                switch(node.type){
                    case "ieConditionalComment":
                        return "<!";
                    case "element":
                        if (node.hasHtmComponentClosingTag) {
                            return "<//";
                        }
                    default:
                        return "</".concat(node.rawName);
                }
            }
            function printClosingTagEndMarker(node, options2) {
                if (shouldNotPrintClosingTag$1(node, options2)) {
                    return "";
                }
                switch(node.type){
                    case "ieConditionalComment":
                    case "ieConditionalEndComment":
                        return "[endif]-->";
                    case "ieConditionalStartComment":
                        return "]><!-->";
                    case "interpolation":
                        return "}}";
                    case "element":
                        if (node.isSelfClosing) {
                            return "/>";
                        }
                    default:
                        return ">";
                }
            }
            function getTextValueParts(node, value1 = node.value) {
                return node.parent.isWhitespaceSensitive ? node.parent.isIndentationSensitive ? replaceEndOfLineWith$1(value1, literalline$2) : replaceEndOfLineWith$1(dedentString$1(value1.replace(/^\s*?\n|\n\s*?$/g, "")), hardline$7) : // https://infra.spec.whatwg.org/#ascii-whitespace
                join$6(line$6, value1.split(/[\t\n\f\r ]+/)).parts;
            }
            function printEmbeddedAttributeValue(node, originalTextToDoc, options2) {
                const isKeyMatched = (patterns)=>new RegExp(patterns.join("|")).test(node.fullName);
                const getValue = ()=>unescapeQuoteEntities$1(node.value);
                let shouldHug = false;
                const __onHtmlBindingRoot = (root, options3)=>{
                    const rootNode = root.type === "NGRoot" ? root.node.type === "NGMicrosyntax" && root.node.body.length === 1 && root.node.body[0].type === "NGMicrosyntaxExpression" ? root.node.body[0].expression : root.node : root.type === "JsExpressionRoot" ? root.node : root;
                    if (rootNode && (rootNode.type === "ObjectExpression" || rootNode.type === "ArrayExpression" || options3.parser === "__vue_expression" && (rootNode.type === "TemplateLiteral" || rootNode.type === "StringLiteral"))) {
                        shouldHug = true;
                    }
                };
                const printHug = (doc2)=>group$9(doc2);
                const printExpand = (doc2, canHaveTrailingWhitespace = true)=>group$9(concat$a([
                        indent$5(concat$a([
                            softline$4,
                            doc2
                        ])),
                        canHaveTrailingWhitespace ? softline$4 : ""
                    ]));
                const printMaybeHug = (doc2)=>shouldHug ? printHug(doc2) : printExpand(doc2);
                const textToDoc2 = (code2, opts)=>originalTextToDoc(code2, Object.assign({
                        __onHtmlBindingRoot
                    }, opts));
                if (node.fullName === "srcset" && (node.parent.fullName === "img" || node.parent.fullName === "source")) {
                    return printExpand(printImgSrcset$1(getValue()));
                }
                if (node.fullName === "class" && !options2.parentParser) {
                    const value1 = getValue();
                    if (!value1.includes("{{")) {
                        return printClassNames$1(value1);
                    }
                }
                if (node.fullName === "style" && !options2.parentParser) {
                    const value1 = getValue();
                    if (!value1.includes("{{")) {
                        return printExpand(textToDoc2(value1, {
                            parser: "css",
                            __isHTMLStyleAttribute: true
                        }));
                    }
                }
                if (options2.parser === "vue") {
                    if (node.fullName === "v-for") {
                        return printVueFor$1(getValue(), textToDoc2);
                    }
                    if (node.fullName === "slot-scope") {
                        return printVueSlotScope$1(getValue(), textToDoc2);
                    }
                    const vueEventBindingPatterns = [
                        "^@",
                        "^v-on:"
                    ];
                    const vueExpressionBindingPatterns = [
                        "^:",
                        "^v-bind:"
                    ];
                    const jsExpressionBindingPatterns = [
                        "^v-"
                    ];
                    if (isKeyMatched(vueEventBindingPatterns)) {
                        const value1 = getValue();
                        return printMaybeHug(isVueEventBindingExpression$1(value1) ? textToDoc2(value1, {
                            parser: "__js_expression"
                        }) : stripTrailingHardline$1(textToDoc2(value1, {
                            parser: "__vue_event_binding"
                        })));
                    }
                    if (isKeyMatched(vueExpressionBindingPatterns)) {
                        return printMaybeHug(textToDoc2(getValue(), {
                            parser: "__vue_expression"
                        }));
                    }
                    if (isKeyMatched(jsExpressionBindingPatterns)) {
                        return printMaybeHug(textToDoc2(getValue(), {
                            parser: "__js_expression"
                        }));
                    }
                }
                if (options2.parser === "angular") {
                    const ngTextToDoc = (code2, opts)=>// angular does not allow trailing comma
                        textToDoc2(code2, Object.assign({}, opts, {
                            trailingComma: "none"
                        }));
                    const ngDirectiveBindingPatterns = [
                        "^\\*"
                    ];
                    const ngStatementBindingPatterns = [
                        "^\\(.+\\)$",
                        "^on-"
                    ];
                    const ngExpressionBindingPatterns = [
                        "^\\[.+\\]$",
                        "^bind(on)?-",
                        // Unofficial rudimentary support for some of the most used directives of AngularJS 1.x
                        "^ng-(if|show|hide|class|style)$"
                    ];
                    const ngI18nPatterns = [
                        "^i18n(-.+)?$"
                    ];
                    if (isKeyMatched(ngStatementBindingPatterns)) {
                        return printMaybeHug(ngTextToDoc(getValue(), {
                            parser: "__ng_action"
                        }));
                    }
                    if (isKeyMatched(ngExpressionBindingPatterns)) {
                        return printMaybeHug(ngTextToDoc(getValue(), {
                            parser: "__ng_binding"
                        }));
                    }
                    if (isKeyMatched(ngI18nPatterns)) {
                        const value2 = getValue().trim();
                        return printExpand(fill$3(getTextValueParts(node, value2)), !value2.includes("@@"));
                    }
                    if (isKeyMatched(ngDirectiveBindingPatterns)) {
                        return printMaybeHug(ngTextToDoc(getValue(), {
                            parser: "__ng_directive"
                        }));
                    }
                    const interpolationRegex = /\{\{([\s\S]+?)\}\}/g;
                    const value1 = getValue();
                    if (interpolationRegex.test(value1)) {
                        const parts = [];
                        value1.split(interpolationRegex).forEach((part, index2)=>{
                            if (index2 % 2 === 0) {
                                parts.push(concat$a(replaceEndOfLineWith$1(part, literalline$2)));
                            } else {
                                try {
                                    parts.push(group$9(concat$a([
                                        "{{",
                                        indent$5(concat$a([
                                            line$6,
                                            ngTextToDoc(part, {
                                                parser: "__ng_interpolation",
                                                __isInHtmlInterpolation: true
                                            })
                                        ])),
                                        line$6,
                                        "}}"
                                    ])));
                                } catch (e) {
                                    parts.push("{{", concat$a(replaceEndOfLineWith$1(part, literalline$2)), "}}");
                                }
                            }
                        });
                        return group$9(concat$a(parts));
                    }
                }
                return null;
            }
            var printerHtml = {
                preprocess: preprocess_1,
                print: genericPrint$2,
                insertPragma: insertPragma$6,
                massageAstNode: clean$3,
                embed: embed$2
            };
            const CATEGORY_HTML = "HTML";
            var options$4 = {
                htmlWhitespaceSensitivity: {
                    since: "1.15.0",
                    category: CATEGORY_HTML,
                    type: "choice",
                    default: "css",
                    description: "How to handle whitespaces in HTML.",
                    choices: [
                        {
                            value: "css",
                            description: "Respect the default value of CSS display property."
                        },
                        {
                            value: "strict",
                            description: "Whitespaces are considered sensitive."
                        },
                        {
                            value: "ignore",
                            description: "Whitespaces are considered insensitive."
                        }
                    ]
                },
                vueIndentScriptAndStyle: {
                    since: "1.19.0",
                    category: CATEGORY_HTML,
                    type: "boolean",
                    default: false,
                    description: "Indent script and style tags in Vue files."
                }
            };
            var name$7 = "HTML";
            var type$6 = "markup";
            var tmScope$6 = "text.html.basic";
            var aceMode$6 = "html";
            var codemirrorMode$3 = "htmlmixed";
            var codemirrorMimeType$3 = "text/html";
            var color$1 = "#e34c26";
            var aliases$1 = [
                "xhtml"
            ];
            var extensions$6 = [
                ".html",
                ".htm",
                ".html.hl",
                ".inc",
                ".st",
                ".xht",
                ".xhtml"
            ];
            var languageId$6 = 146;
            var HTML = {
                name: name$7,
                type: type$6,
                tmScope: tmScope$6,
                aceMode: aceMode$6,
                codemirrorMode: codemirrorMode$3,
                codemirrorMimeType: codemirrorMimeType$3,
                color: color$1,
                aliases: aliases$1,
                extensions: extensions$6,
                languageId: languageId$6
            };
            var HTML$1 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                name: name$7,
                type: type$6,
                tmScope: tmScope$6,
                aceMode: aceMode$6,
                codemirrorMode: codemirrorMode$3,
                codemirrorMimeType: codemirrorMimeType$3,
                color: color$1,
                aliases: aliases$1,
                extensions: extensions$6,
                languageId: languageId$6,
                "default": HTML
            });
            var name$8 = "Vue";
            var type$7 = "markup";
            var color$2 = "#2c3e50";
            var extensions$7 = [
                ".vue"
            ];
            var tmScope$7 = "text.html.vue";
            var aceMode$7 = "html";
            var languageId$7 = 391;
            var Vue = {
                name: name$8,
                type: type$7,
                color: color$2,
                extensions: extensions$7,
                tmScope: tmScope$7,
                aceMode: aceMode$7,
                languageId: languageId$7
            };
            var Vue$1 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                name: name$8,
                type: type$7,
                color: color$2,
                extensions: extensions$7,
                tmScope: tmScope$7,
                aceMode: aceMode$7,
                languageId: languageId$7,
                "default": Vue
            });
            var require$$0$5 = getCjsExportFromNamespace(HTML$1);
            var require$$1$1 = getCjsExportFromNamespace(Vue$1);
            const languages$3 = [
                createLanguage(require$$0$5, ()=>({
                        name: "Angular",
                        since: "1.15.0",
                        parsers: [
                            "angular"
                        ],
                        vscodeLanguageIds: [
                            "html"
                        ],
                        extensions: [
                            ".component.html"
                        ],
                        filenames: []
                    })),
                createLanguage(require$$0$5, (data2)=>({
                        since: "1.15.0",
                        parsers: [
                            "html"
                        ],
                        vscodeLanguageIds: [
                            "html"
                        ],
                        extensions: data2.extensions.concat([
                            ".mjml"
                        ])
                    })),
                createLanguage(require$$0$5, ()=>({
                        name: "Lightning Web Components",
                        since: "1.17.0",
                        parsers: [
                            "lwc"
                        ],
                        vscodeLanguageIds: [
                            "html"
                        ],
                        extensions: [],
                        filenames: []
                    })),
                createLanguage(require$$1$1, ()=>({
                        since: "1.10.0",
                        parsers: [
                            "vue"
                        ],
                        vscodeLanguageIds: [
                            "vue"
                        ]
                    }))
            ];
            const printers$3 = {
                html: printerHtml
            };
            var languageHtml = {
                languages: languages$3,
                printers: printers$3,
                options: options$4
            };
            const { addLeadingComment: addLeadingComment$3 , addTrailingComment: addTrailingComment$3 , addDanglingComment: addDanglingComment$3 , getNextNonSpaceNonCommentCharacterIndex: getNextNonSpaceNonCommentCharacterIndex$2  } = utilShared;
            function handleOwnLineComment(comment, text, options2, ast2, isLastComment) {
                const { precedingNode , enclosingNode , followingNode  } = comment;
                return handleLastFunctionArgComments(text, precedingNode, enclosingNode, followingNode, comment, options2) || handleMemberExpressionComments(enclosingNode, followingNode, comment) || handleIfStatementComments(text, precedingNode, enclosingNode, followingNode, comment, options2) || handleWhileComments(text, precedingNode, enclosingNode, followingNode, comment, options2) || handleTryStatementComments(enclosingNode, precedingNode, followingNode, comment) || handleClassComments(enclosingNode, precedingNode, followingNode, comment) || handleImportSpecifierComments(enclosingNode, comment) || handleForComments(enclosingNode, precedingNode, comment) || handleUnionTypeComments(precedingNode, enclosingNode, followingNode, comment) || handleOnlyComments(enclosingNode, ast2, comment, isLastComment) || handleImportDeclarationComments(text, enclosingNode, precedingNode, comment, options2) || handleAssignmentPatternComments(enclosingNode, comment) || handleMethodNameComments(text, enclosingNode, precedingNode, comment, options2) || handleLabeledStatementComments(enclosingNode, comment);
            }
            function handleEndOfLineComment(comment, text, options2, ast2, isLastComment) {
                const { precedingNode , enclosingNode , followingNode  } = comment;
                return handleClosureTypeCastComments(followingNode, comment) || handleLastFunctionArgComments(text, precedingNode, enclosingNode, followingNode, comment, options2) || handleConditionalExpressionComments(enclosingNode, precedingNode, followingNode, comment, text, options2) || handleImportSpecifierComments(enclosingNode, comment) || handleIfStatementComments(text, precedingNode, enclosingNode, followingNode, comment, options2) || handleWhileComments(text, precedingNode, enclosingNode, followingNode, comment, options2) || handleTryStatementComments(enclosingNode, precedingNode, followingNode, comment) || handleClassComments(enclosingNode, precedingNode, followingNode, comment) || handleLabeledStatementComments(enclosingNode, comment) || handleCallExpressionComments(precedingNode, enclosingNode, comment) || handlePropertyComments(enclosingNode, comment) || handleOnlyComments(enclosingNode, ast2, comment, isLastComment) || handleTypeAliasComments(enclosingNode, followingNode, comment) || handleVariableDeclaratorComments(enclosingNode, followingNode, comment);
            }
            function handleRemainingComment(comment, text, options2, ast2, isLastComment) {
                const { precedingNode , enclosingNode , followingNode  } = comment;
                if (handleIfStatementComments(text, precedingNode, enclosingNode, followingNode, comment, options2) || handleWhileComments(text, precedingNode, enclosingNode, followingNode, comment, options2) || handleObjectPropertyAssignment(enclosingNode, precedingNode, comment) || handleCommentInEmptyParens(text, enclosingNode, comment, options2) || handleMethodNameComments(text, enclosingNode, precedingNode, comment, options2) || handleOnlyComments(enclosingNode, ast2, comment, isLastComment) || handleCommentAfterArrowParams(text, enclosingNode, comment, options2) || handleFunctionNameComments(text, enclosingNode, precedingNode, comment, options2) || handleTSMappedTypeComments(text, enclosingNode, precedingNode, followingNode, comment) || handleBreakAndContinueStatementComments(enclosingNode, comment) || handleTSFunctionTrailingComments(text, enclosingNode, followingNode, comment, options2)) {
                    return true;
                }
                return false;
            }
            function addBlockStatementFirstComment(node, comment) {
                const body2 = node.body.filter((n)=>n.type !== "EmptyStatement");
                if (body2.length === 0) {
                    addDanglingComment$3(node, comment);
                } else {
                    addLeadingComment$3(body2[0], comment);
                }
            }
            function addBlockOrNotComment(node, comment) {
                if (node.type === "BlockStatement") {
                    addBlockStatementFirstComment(node, comment);
                } else {
                    addLeadingComment$3(node, comment);
                }
            }
            function handleClosureTypeCastComments(followingNode, comment) {
                if (followingNode && isTypeCastComment(comment)) {
                    addLeadingComment$3(followingNode, comment);
                    return true;
                }
                return false;
            }
            function handleIfStatementComments(text, precedingNode, enclosingNode, followingNode, comment, options2) {
                if (!enclosingNode || enclosingNode.type !== "IfStatement" || !followingNode) {
                    return false;
                }
                const nextCharacter = util$1.getNextNonSpaceNonCommentCharacter(text, comment, options2.locEnd);
                if (nextCharacter === ")") {
                    addTrailingComment$3(precedingNode, comment);
                    return true;
                }
                if (precedingNode === enclosingNode.consequent && followingNode === enclosingNode.alternate) {
                    if (precedingNode.type === "BlockStatement") {
                        addTrailingComment$3(precedingNode, comment);
                    } else {
                        addDanglingComment$3(enclosingNode, comment);
                    }
                    return true;
                }
                if (followingNode.type === "BlockStatement") {
                    addBlockStatementFirstComment(followingNode, comment);
                    return true;
                }
                if (followingNode.type === "IfStatement") {
                    addBlockOrNotComment(followingNode.consequent, comment);
                    return true;
                }
                if (enclosingNode.consequent === followingNode) {
                    addLeadingComment$3(followingNode, comment);
                    return true;
                }
                return false;
            }
            function handleWhileComments(text, precedingNode, enclosingNode, followingNode, comment, options2) {
                if (!enclosingNode || enclosingNode.type !== "WhileStatement" || !followingNode) {
                    return false;
                }
                const nextCharacter = util$1.getNextNonSpaceNonCommentCharacter(text, comment, options2.locEnd);
                if (nextCharacter === ")") {
                    addTrailingComment$3(precedingNode, comment);
                    return true;
                }
                if (followingNode.type === "BlockStatement") {
                    addBlockStatementFirstComment(followingNode, comment);
                    return true;
                }
                return false;
            }
            function handleTryStatementComments(enclosingNode, precedingNode, followingNode, comment) {
                if (!enclosingNode || enclosingNode.type !== "TryStatement" && enclosingNode.type !== "CatchClause" || !followingNode) {
                    return false;
                }
                if (enclosingNode.type === "CatchClause" && precedingNode) {
                    addTrailingComment$3(precedingNode, comment);
                    return true;
                }
                if (followingNode.type === "BlockStatement") {
                    addBlockStatementFirstComment(followingNode, comment);
                    return true;
                }
                if (followingNode.type === "TryStatement") {
                    addBlockOrNotComment(followingNode.finalizer, comment);
                    return true;
                }
                if (followingNode.type === "CatchClause") {
                    addBlockOrNotComment(followingNode.body, comment);
                    return true;
                }
                return false;
            }
            function handleMemberExpressionComments(enclosingNode, followingNode, comment) {
                if (enclosingNode && (enclosingNode.type === "MemberExpression" || enclosingNode.type === "OptionalMemberExpression") && followingNode && followingNode.type === "Identifier") {
                    addLeadingComment$3(enclosingNode, comment);
                    return true;
                }
                return false;
            }
            function handleConditionalExpressionComments(enclosingNode, precedingNode, followingNode, comment, text, options2) {
                const isSameLineAsPrecedingNode = precedingNode && !util$1.hasNewlineInRange(text, options2.locEnd(precedingNode), options2.locStart(comment));
                if ((!precedingNode || !isSameLineAsPrecedingNode) && enclosingNode && enclosingNode.type === "ConditionalExpression" && followingNode) {
                    addLeadingComment$3(followingNode, comment);
                    return true;
                }
                return false;
            }
            function handleObjectPropertyAssignment(enclosingNode, precedingNode, comment) {
                if (enclosingNode && (enclosingNode.type === "ObjectProperty" || enclosingNode.type === "Property") && enclosingNode.shorthand && enclosingNode.key === precedingNode && enclosingNode.value.type === "AssignmentPattern") {
                    addTrailingComment$3(enclosingNode.value.left, comment);
                    return true;
                }
                return false;
            }
            function handleClassComments(enclosingNode, precedingNode, followingNode, comment) {
                if (enclosingNode && (enclosingNode.type === "ClassDeclaration" || enclosingNode.type === "ClassExpression") && enclosingNode.decorators && enclosingNode.decorators.length > 0 && !(followingNode && followingNode.type === "Decorator")) {
                    if (!enclosingNode.decorators || enclosingNode.decorators.length === 0) {
                        addLeadingComment$3(enclosingNode, comment);
                    } else {
                        addTrailingComment$3(enclosingNode.decorators[enclosingNode.decorators.length - 1], comment);
                    }
                    return true;
                }
                return false;
            }
            function handleMethodNameComments(text, enclosingNode, precedingNode, comment, options2) {
                if (enclosingNode && precedingNode && // "MethodDefinition" is handled in getCommentChildNodes
                (enclosingNode.type === "Property" || enclosingNode.type === "TSDeclareMethod" || enclosingNode.type === "TSAbstractMethodDefinition") && precedingNode.type === "Identifier" && enclosingNode.key === precedingNode && // special Property case: { key: /*comment*/(value) };
                // comment should be attached to value instead of key
                util$1.getNextNonSpaceNonCommentCharacter(text, precedingNode, options2.locEnd) !== ":") {
                    addTrailingComment$3(precedingNode, comment);
                    return true;
                }
                if (precedingNode && enclosingNode && precedingNode.type === "Decorator" && (enclosingNode.type === "ClassMethod" || enclosingNode.type === "ClassProperty" || enclosingNode.type === "TSAbstractClassProperty" || enclosingNode.type === "TSAbstractMethodDefinition" || enclosingNode.type === "TSDeclareMethod" || enclosingNode.type === "MethodDefinition")) {
                    addTrailingComment$3(precedingNode, comment);
                    return true;
                }
                return false;
            }
            function handleFunctionNameComments(text, enclosingNode, precedingNode, comment, options2) {
                if (util$1.getNextNonSpaceNonCommentCharacter(text, comment, options2.locEnd) !== "(") {
                    return false;
                }
                if (precedingNode && enclosingNode && (enclosingNode.type === "FunctionDeclaration" || enclosingNode.type === "FunctionExpression" || enclosingNode.type === "ClassMethod" || enclosingNode.type === "MethodDefinition" || enclosingNode.type === "ObjectMethod")) {
                    addTrailingComment$3(precedingNode, comment);
                    return true;
                }
                return false;
            }
            function handleCommentAfterArrowParams(text, enclosingNode, comment, options2) {
                if (!(enclosingNode && enclosingNode.type === "ArrowFunctionExpression")) {
                    return false;
                }
                const index2 = getNextNonSpaceNonCommentCharacterIndex$2(text, comment, options2.locEnd);
                if (text.slice(index2, index2 + 2) === "=>") {
                    addDanglingComment$3(enclosingNode, comment);
                    return true;
                }
                return false;
            }
            function handleCommentInEmptyParens(text, enclosingNode, comment, options2) {
                if (util$1.getNextNonSpaceNonCommentCharacter(text, comment, options2.locEnd) !== ")") {
                    return false;
                }
                if (enclosingNode && (isRealFunctionLikeNode(enclosingNode) && // `params` vs `parameters` - see https://github.com/babel/babel/issues/9231
                (enclosingNode.params || enclosingNode.parameters).length === 0 || (enclosingNode.type === "CallExpression" || enclosingNode.type === "OptionalCallExpression" || enclosingNode.type === "NewExpression") && enclosingNode.arguments.length === 0)) {
                    addDanglingComment$3(enclosingNode, comment);
                    return true;
                }
                if (enclosingNode && enclosingNode.type === "MethodDefinition" && enclosingNode.value.params.length === 0) {
                    addDanglingComment$3(enclosingNode.value, comment);
                    return true;
                }
                return false;
            }
            function handleLastFunctionArgComments(text, precedingNode, enclosingNode, followingNode, comment, options2) {
                if (precedingNode && precedingNode.type === "FunctionTypeParam" && enclosingNode && enclosingNode.type === "FunctionTypeAnnotation" && followingNode && followingNode.type !== "FunctionTypeParam") {
                    addTrailingComment$3(precedingNode, comment);
                    return true;
                }
                if (precedingNode && (precedingNode.type === "Identifier" || precedingNode.type === "AssignmentPattern") && enclosingNode && isRealFunctionLikeNode(enclosingNode) && util$1.getNextNonSpaceNonCommentCharacter(text, comment, options2.locEnd) === ")") {
                    addTrailingComment$3(precedingNode, comment);
                    return true;
                }
                if (enclosingNode && enclosingNode.type === "FunctionDeclaration" && followingNode && followingNode.type === "BlockStatement") {
                    const functionParamRightParenIndex = (()=>{
                        if ((enclosingNode.params || enclosingNode.parameters).length !== 0) {
                            return util$1.getNextNonSpaceNonCommentCharacterIndexWithStartIndex(text, options2.locEnd(util$1.getLast(enclosingNode.params || enclosingNode.parameters)));
                        }
                        const functionParamLeftParenIndex = util$1.getNextNonSpaceNonCommentCharacterIndexWithStartIndex(text, options2.locEnd(enclosingNode.id));
                        return util$1.getNextNonSpaceNonCommentCharacterIndexWithStartIndex(text, functionParamLeftParenIndex + 1);
                    })();
                    if (options2.locStart(comment) > functionParamRightParenIndex) {
                        addBlockStatementFirstComment(followingNode, comment);
                        return true;
                    }
                }
                return false;
            }
            function handleImportSpecifierComments(enclosingNode, comment) {
                if (enclosingNode && enclosingNode.type === "ImportSpecifier") {
                    addLeadingComment$3(enclosingNode, comment);
                    return true;
                }
                return false;
            }
            function handleLabeledStatementComments(enclosingNode, comment) {
                if (enclosingNode && enclosingNode.type === "LabeledStatement") {
                    addLeadingComment$3(enclosingNode, comment);
                    return true;
                }
                return false;
            }
            function handleBreakAndContinueStatementComments(enclosingNode, comment) {
                if (enclosingNode && (enclosingNode.type === "ContinueStatement" || enclosingNode.type === "BreakStatement") && !enclosingNode.label) {
                    addTrailingComment$3(enclosingNode, comment);
                    return true;
                }
                return false;
            }
            function handleCallExpressionComments(precedingNode, enclosingNode, comment) {
                if (enclosingNode && (enclosingNode.type === "CallExpression" || enclosingNode.type === "OptionalCallExpression") && precedingNode && enclosingNode.callee === precedingNode && enclosingNode.arguments.length > 0) {
                    addLeadingComment$3(enclosingNode.arguments[0], comment);
                    return true;
                }
                return false;
            }
            function handleUnionTypeComments(precedingNode, enclosingNode, followingNode, comment) {
                if (enclosingNode && (enclosingNode.type === "UnionTypeAnnotation" || enclosingNode.type === "TSUnionType")) {
                    if (util$1.isNodeIgnoreComment(comment)) {
                        followingNode.prettierIgnore = true;
                        comment.unignore = true;
                    }
                    if (precedingNode) {
                        addTrailingComment$3(precedingNode, comment);
                        return true;
                    }
                    return false;
                }
                if (followingNode && (followingNode.type === "UnionTypeAnnotation" || followingNode.type === "TSUnionType") && util$1.isNodeIgnoreComment(comment)) {
                    followingNode.types[0].prettierIgnore = true;
                    comment.unignore = true;
                }
                return false;
            }
            function handlePropertyComments(enclosingNode, comment) {
                if (enclosingNode && (enclosingNode.type === "Property" || enclosingNode.type === "ObjectProperty")) {
                    addLeadingComment$3(enclosingNode, comment);
                    return true;
                }
                return false;
            }
            function handleOnlyComments(enclosingNode, ast2, comment, isLastComment) {
                if (ast2 && ast2.body && ast2.body.length === 0) {
                    if (isLastComment) {
                        addDanglingComment$3(ast2, comment);
                    } else {
                        addLeadingComment$3(ast2, comment);
                    }
                    return true;
                } else if (enclosingNode && enclosingNode.type === "Program" && enclosingNode.body.length === 0 && enclosingNode.directives && enclosingNode.directives.length === 0) {
                    if (isLastComment) {
                        addDanglingComment$3(enclosingNode, comment);
                    } else {
                        addLeadingComment$3(enclosingNode, comment);
                    }
                    return true;
                }
                return false;
            }
            function handleForComments(enclosingNode, precedingNode, comment) {
                if (enclosingNode && (enclosingNode.type === "ForInStatement" || enclosingNode.type === "ForOfStatement")) {
                    addLeadingComment$3(enclosingNode, comment);
                    return true;
                }
                return false;
            }
            function handleImportDeclarationComments(text, enclosingNode, precedingNode, comment, options2) {
                if (precedingNode && precedingNode.type === "ImportSpecifier" && enclosingNode && enclosingNode.type === "ImportDeclaration" && util$1.hasNewline(text, options2.locEnd(comment))) {
                    addTrailingComment$3(precedingNode, comment);
                    return true;
                }
                return false;
            }
            function handleAssignmentPatternComments(enclosingNode, comment) {
                if (enclosingNode && enclosingNode.type === "AssignmentPattern") {
                    addLeadingComment$3(enclosingNode, comment);
                    return true;
                }
                return false;
            }
            function handleTypeAliasComments(enclosingNode, followingNode, comment) {
                if (enclosingNode && enclosingNode.type === "TypeAlias") {
                    addLeadingComment$3(enclosingNode, comment);
                    return true;
                }
                return false;
            }
            function handleVariableDeclaratorComments(enclosingNode, followingNode, comment) {
                if (enclosingNode && (enclosingNode.type === "VariableDeclarator" || enclosingNode.type === "AssignmentExpression") && followingNode && (followingNode.type === "ObjectExpression" || followingNode.type === "ArrayExpression" || followingNode.type === "TemplateLiteral" || followingNode.type === "TaggedTemplateExpression" || isBlockComment(comment))) {
                    addLeadingComment$3(followingNode, comment);
                    return true;
                }
                return false;
            }
            function handleTSFunctionTrailingComments(text, enclosingNode, followingNode, comment, options2) {
                if (!followingNode && enclosingNode && (enclosingNode.type === "TSMethodSignature" || enclosingNode.type === "TSDeclareFunction" || enclosingNode.type === "TSAbstractMethodDefinition") && util$1.getNextNonSpaceNonCommentCharacter(text, comment, options2.locEnd) === ";") {
                    addTrailingComment$3(enclosingNode, comment);
                    return true;
                }
                return false;
            }
            function handleTSMappedTypeComments(text, enclosingNode, precedingNode, followingNode, comment) {
                if (!enclosingNode || enclosingNode.type !== "TSMappedType") {
                    return false;
                }
                if (followingNode && followingNode.type === "TSTypeParameter" && followingNode.name) {
                    addLeadingComment$3(followingNode.name, comment);
                    return true;
                }
                if (precedingNode && precedingNode.type === "TSTypeParameter" && precedingNode.constraint) {
                    addTrailingComment$3(precedingNode.constraint, comment);
                    return true;
                }
                return false;
            }
            function isBlockComment(comment) {
                return comment.type === "Block" || comment.type === "CommentBlock";
            }
            function hasLeadingComment(node, fn = ()=>true) {
                if (node.leadingComments) {
                    return node.leadingComments.some(fn);
                }
                if (node.comments) {
                    return node.comments.some((comment)=>comment.leading && fn(comment));
                }
                return false;
            }
            function isRealFunctionLikeNode(node) {
                return node.type === "ArrowFunctionExpression" || node.type === "FunctionExpression" || node.type === "FunctionDeclaration" || node.type === "ObjectMethod" || node.type === "ClassMethod" || node.type === "TSDeclareFunction" || node.type === "TSCallSignatureDeclaration" || node.type === "TSConstructSignatureDeclaration" || node.type === "TSConstructSignatureDeclaration" || node.type === "TSMethodSignature" || node.type === "TSConstructorType" || node.type === "TSFunctionType" || node.type === "TSDeclareMethod";
            }
            function getGapRegex(enclosingNode) {
                if (enclosingNode && enclosingNode.type !== "BinaryExpression" && enclosingNode.type !== "LogicalExpression") {
                    return /^[\s(&|]*$/;
                }
            }
            function getCommentChildNodes(node, options2) {
                if ((options2.parser === "typescript" || options2.parser === "flow") && node.type === "MethodDefinition" && node.value && node.value.type === "FunctionExpression" && node.value.params.length === 0 && !node.value.returnType && (!node.value.typeParameters || node.value.typeParameters.length === 0) && node.value.body) {
                    return [
                        ...node.decorators || [],
                        node.key,
                        node.value.body
                    ];
                }
            }
            function isTypeCastComment(comment) {
                return isBlockComment(comment) && comment.value[0] === "*" && // TypeScript expects the type to be enclosed in curly brackets, however
                // Closure Compiler accepts types in parens and even without any delimiters at all.
                // That's why we just search for "@type".
                /@type\b/.test(comment.value);
            }
            var comments$1 = {
                handleOwnLineComment,
                handleEndOfLineComment,
                handleRemainingComment,
                hasLeadingComment,
                isBlockComment,
                isTypeCastComment,
                getGapRegex,
                getCommentChildNodes
            };
            const { isBlockComment: isBlockComment$1 , hasLeadingComment: hasLeadingComment$1  } = comments$1;
            const { builders: { indent: indent$6 , join: join$7 , line: line$7 , hardline: hardline$8 , softline: softline$5 , literalline: literalline$3 , concat: concat$b , group: group$a , dedentToRoot: dedentToRoot$2  } , utils: { mapDoc: mapDoc$3 , stripTrailingHardline: stripTrailingHardline$2  }  } = document;
            function embed$3(path6, print2, textToDoc2, options2) {
                const node = path6.getValue();
                const parent = path6.getParentNode();
                const parentParent = path6.getParentNode(1);
                switch(node.type){
                    case "TemplateLiteral":
                        {
                            const isCss = [
                                isStyledJsx,
                                isStyledComponents,
                                isCssProp,
                                isAngularComponentStyles
                            ].some((isIt)=>isIt(path6));
                            if (isCss) {
                                const rawQuasis = node.quasis.map((q2)=>q2.value.raw);
                                let placeholderID = 0;
                                const text = rawQuasis.reduce((prevVal, currVal, idx)=>{
                                    return idx === 0 ? currVal : prevVal + "@prettier-placeholder-" + placeholderID++ + "-id" + currVal;
                                }, "");
                                const doc2 = textToDoc2(text, {
                                    parser: "scss"
                                });
                                return transformCssDoc(doc2, path6, print2);
                            }
                            if (isGraphQL(path6)) {
                                const expressionDocs = node.expressions ? path6.map(print2, "expressions") : [];
                                const numQuasis = node.quasis.length;
                                if (numQuasis === 1 && node.quasis[0].value.raw.trim() === "") {
                                    return "``";
                                }
                                const parts = [];
                                for(let i = 0; i < numQuasis; i++){
                                    const templateElement = node.quasis[i];
                                    const isFirst = i === 0;
                                    const isLast = i === numQuasis - 1;
                                    const text = templateElement.value.cooked;
                                    if (typeof text !== "string") {
                                        return null;
                                    }
                                    const lines = text.split("\n");
                                    const numLines = lines.length;
                                    const expressionDoc = expressionDocs[i];
                                    const startsWithBlankLine = numLines > 2 && lines[0].trim() === "" && lines[1].trim() === "";
                                    const endsWithBlankLine = numLines > 2 && lines[numLines - 1].trim() === "" && lines[numLines - 2].trim() === "";
                                    const commentsAndWhitespaceOnly = lines.every((line2)=>/^\s*(?:#[^\r\n]*)?$/.test(line2));
                                    if (!isLast && /#[^\r\n]*$/.test(lines[numLines - 1])) {
                                        return null;
                                    }
                                    let doc2 = null;
                                    if (commentsAndWhitespaceOnly) {
                                        doc2 = printGraphqlComments(lines);
                                    } else {
                                        doc2 = stripTrailingHardline$2(textToDoc2(text, {
                                            parser: "graphql"
                                        }));
                                    }
                                    if (doc2) {
                                        doc2 = escapeTemplateCharacters(doc2, false);
                                        if (!isFirst && startsWithBlankLine) {
                                            parts.push("");
                                        }
                                        parts.push(doc2);
                                        if (!isLast && endsWithBlankLine) {
                                            parts.push("");
                                        }
                                    } else if (!isFirst && !isLast && startsWithBlankLine) {
                                        parts.push("");
                                    }
                                    if (expressionDoc) {
                                        parts.push(concat$b([
                                            "${",
                                            expressionDoc,
                                            "}"
                                        ]));
                                    }
                                }
                                return concat$b([
                                    "`",
                                    indent$6(concat$b([
                                        hardline$8,
                                        join$7(hardline$8, parts)
                                    ])),
                                    hardline$8,
                                    "`"
                                ]);
                            }
                            const htmlParser = isHtml(path6) ? "html" : isAngularComponentTemplate(path6) ? "angular" : void 0;
                            if (htmlParser) {
                                return printHtmlTemplateLiteral(path6, print2, textToDoc2, htmlParser, options2);
                            }
                            break;
                        }
                    case "TemplateElement":
                        {
                            if (parentParent && parentParent.type === "TaggedTemplateExpression" && parent.quasis.length === 1 && parentParent.tag.type === "Identifier" && (parentParent.tag.name === "md" || parentParent.tag.name === "markdown")) {
                                const text = parent.quasis[0].value.raw.replace(/((?:\\\\)*)\\`/g, (_, backslashes)=>"\\".repeat(backslashes.length / 2) + "`");
                                const indentation = getIndentation2(text);
                                const hasIndent = indentation !== "";
                                return concat$b([
                                    hasIndent ? indent$6(concat$b([
                                        softline$5,
                                        printMarkdown(text.replace(new RegExp("^".concat(indentation), "gm"), ""))
                                    ])) : concat$b([
                                        literalline$3,
                                        dedentToRoot$2(printMarkdown(text))
                                    ]),
                                    softline$5
                                ]);
                            }
                            break;
                        }
                }
                function printMarkdown(text) {
                    const doc2 = textToDoc2(text, {
                        parser: "markdown",
                        __inJsTemplate: true
                    });
                    return stripTrailingHardline$2(escapeTemplateCharacters(doc2, true));
                }
            }
            function getIndentation2(str) {
                const firstMatchedIndent = str.match(/^([^\S\n]*)\S/m);
                return firstMatchedIndent === null ? "" : firstMatchedIndent[1];
            }
            function uncook(cookedValue) {
                return cookedValue.replace(/([\\`]|\$\{)/g, "\\$1");
            }
            function escapeTemplateCharacters(doc2, raw) {
                return mapDoc$3(doc2, (currentDoc)=>{
                    if (!currentDoc.parts) {
                        return currentDoc;
                    }
                    const parts = [];
                    currentDoc.parts.forEach((part)=>{
                        if (typeof part === "string") {
                            parts.push(raw ? part.replace(/(\\*)`/g, "$1$1\\`") : uncook(part));
                        } else {
                            parts.push(part);
                        }
                    });
                    return Object.assign({}, currentDoc, {
                        parts
                    });
                });
            }
            function transformCssDoc(quasisDoc, path6, print2) {
                const parentNode = path6.getValue();
                const isEmpty3 = parentNode.quasis.length === 1 && !parentNode.quasis[0].value.raw.trim();
                if (isEmpty3) {
                    return "``";
                }
                const expressionDocs = parentNode.expressions ? path6.map(print2, "expressions") : [];
                const newDoc = replacePlaceholders(quasisDoc, expressionDocs);
                if (!newDoc) {
                    throw new Error("Couldn't insert all the expressions");
                }
                return concat$b([
                    "`",
                    indent$6(concat$b([
                        hardline$8,
                        stripTrailingHardline$2(newDoc)
                    ])),
                    softline$5,
                    "`"
                ]);
            }
            function replacePlaceholders(quasisDoc, expressionDocs) {
                if (!expressionDocs || !expressionDocs.length) {
                    return quasisDoc;
                }
                const expressions = expressionDocs.slice();
                let replaceCounter = 0;
                const newDoc = mapDoc$3(quasisDoc, (doc2)=>{
                    if (!doc2 || !doc2.parts || !doc2.parts.length) {
                        return doc2;
                    }
                    let { parts  } = doc2;
                    const atIndex = parts.indexOf("@");
                    const placeholderIndex = atIndex + 1;
                    if (atIndex > -1 && typeof parts[placeholderIndex] === "string" && parts[placeholderIndex].startsWith("prettier-placeholder")) {
                        const at = parts[atIndex];
                        const placeholder = parts[placeholderIndex];
                        const rest = parts.slice(placeholderIndex + 1);
                        parts = parts.slice(0, atIndex).concat([
                            at + placeholder
                        ]).concat(rest);
                    }
                    const atPlaceholderIndex = parts.findIndex((part)=>typeof part === "string" && part.startsWith("@prettier-placeholder"));
                    if (atPlaceholderIndex > -1) {
                        const placeholder = parts[atPlaceholderIndex];
                        const rest = parts.slice(atPlaceholderIndex + 1);
                        const placeholderMatch = placeholder.match(/@prettier-placeholder-(.+)-id([\s\S]*)/);
                        const placeholderID = placeholderMatch[1];
                        const suffix = placeholderMatch[2];
                        const expression = expressions[placeholderID];
                        replaceCounter++;
                        parts = parts.slice(0, atPlaceholderIndex).concat([
                            "${",
                            expression,
                            "}" + suffix
                        ]).concat(rest);
                    }
                    return Object.assign({}, doc2, {
                        parts
                    });
                });
                return expressions.length === replaceCounter ? newDoc : null;
            }
            function printGraphqlComments(lines) {
                const parts = [];
                let seenComment = false;
                lines.map((textLine)=>textLine.trim()).forEach((textLine, i, array2)=>{
                    if (textLine === "") {
                        return;
                    }
                    if (array2[i - 1] === "" && seenComment) {
                        parts.push(concat$b([
                            hardline$8,
                            textLine
                        ]));
                    } else {
                        parts.push(textLine);
                    }
                    seenComment = true;
                });
                return parts.length === 0 ? null : join$7(hardline$8, parts);
            }
            function isStyledJsx(path6) {
                const node = path6.getValue();
                const parent = path6.getParentNode();
                const parentParent = path6.getParentNode(1);
                return parentParent && node.quasis && parent.type === "JSXExpressionContainer" && parentParent.type === "JSXElement" && parentParent.openingElement.name.name === "style" && parentParent.openingElement.attributes.some((attribute)=>attribute.name.name === "jsx") || parent && parent.type === "TaggedTemplateExpression" && parent.tag.type === "Identifier" && parent.tag.name === "css" || parent && parent.type === "TaggedTemplateExpression" && parent.tag.type === "MemberExpression" && parent.tag.object.name === "css" && (parent.tag.property.name === "global" || parent.tag.property.name === "resolve");
            }
            function isAngularComponentStyles(path6) {
                return path6.match((node)=>node.type === "TemplateLiteral", (node, name2)=>node.type === "ArrayExpression" && name2 === "elements", (node, name2)=>(node.type === "Property" || node.type === "ObjectProperty") && node.key.type === "Identifier" && node.key.name === "styles" && name2 === "value", ...angularComponentObjectExpressionPredicates);
            }
            function isAngularComponentTemplate(path6) {
                return path6.match((node)=>node.type === "TemplateLiteral", (node, name2)=>(node.type === "Property" || node.type === "ObjectProperty") && node.key.type === "Identifier" && node.key.name === "template" && name2 === "value", ...angularComponentObjectExpressionPredicates);
            }
            const angularComponentObjectExpressionPredicates = [
                (node, name2)=>node.type === "ObjectExpression" && name2 === "properties",
                (node, name2)=>node.type === "CallExpression" && node.callee.type === "Identifier" && node.callee.name === "Component" && name2 === "arguments",
                (node, name2)=>node.type === "Decorator" && name2 === "expression"
            ];
            function isStyledComponents(path6) {
                const parent = path6.getParentNode();
                if (!parent || parent.type !== "TaggedTemplateExpression") {
                    return false;
                }
                const { tag  } = parent;
                switch(tag.type){
                    case "MemberExpression":
                        return(// styled.foo``
                        isStyledIdentifier(tag.object) || // Component.extend``
                        isStyledExtend(tag));
                    case "CallExpression":
                        return(// styled(Component)``
                        isStyledIdentifier(tag.callee) || tag.callee.type === "MemberExpression" && (tag.callee.object.type === "MemberExpression" && // styled.foo.attrs({})``
                        (isStyledIdentifier(tag.callee.object.object) || // Component.extend.attrs({})``
                        isStyledExtend(tag.callee.object)) || // styled(Component).attrs({})``
                        tag.callee.object.type === "CallExpression" && isStyledIdentifier(tag.callee.object.callee)));
                    case "Identifier":
                        return tag.name === "css";
                    default:
                        return false;
                }
            }
            function isCssProp(path6) {
                const parent = path6.getParentNode();
                const parentParent = path6.getParentNode(1);
                return parentParent && parent.type === "JSXExpressionContainer" && parentParent.type === "JSXAttribute" && parentParent.name.type === "JSXIdentifier" && parentParent.name.name === "css";
            }
            function isStyledIdentifier(node) {
                return node.type === "Identifier" && node.name === "styled";
            }
            function isStyledExtend(node) {
                return /^[A-Z]/.test(node.object.name) && node.property.name === "extend";
            }
            function isGraphQL(path6) {
                const node = path6.getValue();
                const parent = path6.getParentNode();
                return hasLanguageComment(node, "GraphQL") || parent && (parent.type === "TaggedTemplateExpression" && (parent.tag.type === "MemberExpression" && parent.tag.object.name === "graphql" && parent.tag.property.name === "experimental" || parent.tag.type === "Identifier" && (parent.tag.name === "gql" || parent.tag.name === "graphql")) || parent.type === "CallExpression" && parent.callee.type === "Identifier" && parent.callee.name === "graphql");
            }
            function hasLanguageComment(node, languageName) {
                return hasLeadingComment$1(node, (comment)=>isBlockComment$1(comment) && comment.value === " ".concat(languageName, " "));
            }
            function isHtml(path6) {
                return hasLanguageComment(path6.getValue(), "HTML") || path6.match((node)=>node.type === "TemplateLiteral", (node, name2)=>node.type === "TaggedTemplateExpression" && node.tag.type === "Identifier" && node.tag.name === "html" && name2 === "quasi");
            }
            let htmlTemplateLiteralCounter = 0;
            function printHtmlTemplateLiteral(path6, print2, textToDoc2, parser3, options2) {
                const node = path6.getValue();
                const counter = htmlTemplateLiteralCounter;
                htmlTemplateLiteralCounter = htmlTemplateLiteralCounter + 1 >>> 0;
                const composePlaceholder = (index2)=>"PRETTIER_HTML_PLACEHOLDER_".concat(index2, "_").concat(counter, "_IN_JS");
                const text = node.quasis.map((quasi, index2, quasis)=>index2 === quasis.length - 1 ? quasi.value.cooked : quasi.value.cooked + composePlaceholder(index2)).join("");
                const expressionDocs = path6.map(print2, "expressions");
                if (expressionDocs.length === 0 && text.trim().length === 0) {
                    return "``";
                }
                const placeholderRegex = new RegExp(composePlaceholder("(\\d+)"), "g");
                let topLevelCount = 0;
                const contentDoc = mapDoc$3(stripTrailingHardline$2(textToDoc2(text, {
                    parser: parser3,
                    __onHtmlRoot (root) {
                        topLevelCount = root.children.length;
                    }
                })), (doc2)=>{
                    if (typeof doc2 !== "string") {
                        return doc2;
                    }
                    const parts = [];
                    const components = doc2.split(placeholderRegex);
                    for(let i = 0; i < components.length; i++){
                        let component = components[i];
                        if (i % 2 === 0) {
                            if (component) {
                                component = uncook(component);
                                if (options2.embeddedInHtml) {
                                    component = component.replace(/<\/(script)\b/gi, "<\\/$1");
                                }
                                parts.push(component);
                            }
                            continue;
                        }
                        const placeholderIndex = +component;
                        parts.push(concat$b([
                            "${",
                            group$a(expressionDocs[placeholderIndex]),
                            "}"
                        ]));
                    }
                    return concat$b(parts);
                });
                const leadingWhitespace = /^\s/.test(text) ? " " : "";
                const trailingWhitespace = /\s$/.test(text) ? " " : "";
                const linebreak = options2.htmlWhitespaceSensitivity === "ignore" ? hardline$8 : leadingWhitespace && trailingWhitespace ? line$7 : null;
                if (linebreak) {
                    return group$a(concat$b([
                        "`",
                        indent$6(concat$b([
                            linebreak,
                            group$a(contentDoc)
                        ])),
                        linebreak,
                        "`"
                    ]));
                }
                return group$a(concat$b([
                    "`",
                    leadingWhitespace,
                    topLevelCount > 1 ? indent$6(group$a(contentDoc)) : group$a(contentDoc),
                    trailingWhitespace,
                    "`"
                ]));
            }
            var embed_1$1 = embed$3;
            function clean$4(ast2, newObj, parent) {
                [
                    "range",
                    "raw",
                    "comments",
                    "leadingComments",
                    "trailingComments",
                    "innerComments",
                    "extra",
                    "start",
                    "end",
                    "flags",
                    "errors"
                ].forEach((name2)=>{
                    delete newObj[name2];
                });
                if (ast2.loc && ast2.loc.source === null) {
                    delete newObj.loc.source;
                }
                if (ast2.type === "BigIntLiteral") {
                    newObj.value = newObj.value.toLowerCase();
                }
                if (ast2.type === "EmptyStatement") {
                    return null;
                }
                if (ast2.type === "JSXText") {
                    return null;
                }
                if (ast2.type === "JSXExpressionContainer" && ast2.expression.type === "Literal" && ast2.expression.value === " ") {
                    return null;
                }
                if (ast2.type === "TSParameterProperty" && ast2.accessibility === null && !ast2.readonly) {
                    return {
                        type: "Identifier",
                        name: ast2.parameter.name,
                        typeAnnotation: newObj.parameter.typeAnnotation,
                        decorators: newObj.decorators
                    };
                }
                if (ast2.type === "TSNamespaceExportDeclaration" && ast2.specifiers && ast2.specifiers.length === 0) {
                    delete newObj.specifiers;
                }
                if (ast2.type === "JSXOpeningElement") {
                    delete newObj.selfClosing;
                }
                if (ast2.type === "JSXElement") {
                    delete newObj.closingElement;
                }
                if ((ast2.type === "Property" || ast2.type === "ObjectProperty" || ast2.type === "MethodDefinition" || ast2.type === "ClassProperty" || ast2.type === "TSPropertySignature" || ast2.type === "ObjectTypeProperty") && typeof ast2.key === "object" && ast2.key && (ast2.key.type === "Literal" || ast2.key.type === "StringLiteral" || ast2.key.type === "Identifier")) {
                    delete newObj.key;
                }
                if (ast2.type === "OptionalMemberExpression" && ast2.optional === false) {
                    newObj.type = "MemberExpression";
                    delete newObj.optional;
                }
                if (ast2.type === "JSXElement" && ast2.openingElement.name.name === "style" && ast2.openingElement.attributes.some((attr)=>attr.name.name === "jsx")) {
                    const templateLiterals = newObj.children.filter((child)=>child.type === "JSXExpressionContainer" && child.expression.type === "TemplateLiteral").map((container)=>container.expression);
                    const quasis = templateLiterals.reduce((quasis2, templateLiteral)=>quasis2.concat(templateLiteral.quasis), []);
                    quasis.forEach((q2)=>delete q2.value);
                }
                if (ast2.type === "JSXAttribute" && ast2.name.name === "css" && ast2.value.type === "JSXExpressionContainer" && ast2.value.expression.type === "TemplateLiteral") {
                    newObj.value.expression.quasis.forEach((q2)=>delete q2.value);
                }
                const expression = ast2.expression || ast2.callee;
                if (ast2.type === "Decorator" && expression.type === "CallExpression" && expression.callee.name === "Component" && expression.arguments.length === 1) {
                    const astProps = ast2.expression.arguments[0].properties;
                    newObj.expression.arguments[0].properties.forEach((prop, index2)=>{
                        let templateLiteral = null;
                        switch(astProps[index2].key.name){
                            case "styles":
                                if (prop.value.type === "ArrayExpression") {
                                    templateLiteral = prop.value.elements[0];
                                }
                                break;
                            case "template":
                                if (prop.value.type === "TemplateLiteral") {
                                    templateLiteral = prop.value;
                                }
                                break;
                        }
                        if (templateLiteral) {
                            templateLiteral.quasis.forEach((q2)=>delete q2.value);
                        }
                    });
                }
                if (ast2.type === "TaggedTemplateExpression" && (ast2.tag.type === "MemberExpression" || ast2.tag.type === "Identifier" && (ast2.tag.name === "gql" || ast2.tag.name === "graphql" || ast2.tag.name === "css" || ast2.tag.name === "md" || ast2.tag.name === "markdown" || ast2.tag.name === "html") || ast2.tag.type === "CallExpression")) {
                    newObj.quasi.quasis.forEach((quasi)=>delete quasi.value);
                }
                if (ast2.type === "TemplateLiteral") {
                    const hasLanguageComment2 = ast2.leadingComments && ast2.leadingComments.some((comment)=>comment.type === "CommentBlock" && [
                            "GraphQL",
                            "HTML"
                        ].some((languageName)=>comment.value === " ".concat(languageName, " ")));
                    if (hasLanguageComment2 || parent.type === "CallExpression" && parent.callee.name === "graphql") {
                        newObj.quasis.forEach((quasi)=>delete quasi.value);
                    }
                }
            }
            var clean_1$1 = clean$4;
            const { getLast: getLast$2 , hasNewline: hasNewline$4 , hasNewlineInRange: hasNewlineInRange$2 , hasIgnoreComment: hasIgnoreComment$3 , hasNodeIgnoreComment: hasNodeIgnoreComment$1 , skipWhitespace: skipWhitespace$2  } = util$1;
            const isIdentifierName = utils$1.keyword.isIdentifierNameES5;
            const NON_LINE_TERMINATING_WHITE_SPACE = "(?:(?=.)\\s)";
            const FLOW_SHORTHAND_ANNOTATION = new RegExp("^".concat(NON_LINE_TERMINATING_WHITE_SPACE, "*:"));
            const FLOW_ANNOTATION = new RegExp("^".concat(NON_LINE_TERMINATING_WHITE_SPACE, "*::"));
            function hasFlowShorthandAnnotationComment(node) {
                return node.extra && node.extra.parenthesized && node.trailingComments && node.trailingComments[0].value.match(FLOW_SHORTHAND_ANNOTATION);
            }
            function hasFlowAnnotationComment(comments2) {
                return comments2 && comments2[0].value.match(FLOW_ANNOTATION);
            }
            function hasNode(node, fn) {
                if (!node || typeof node !== "object") {
                    return false;
                }
                if (Array.isArray(node)) {
                    return node.some((value1)=>hasNode(value1, fn));
                }
                const result = fn(node);
                return typeof result === "boolean" ? result : Object.keys(node).some((key)=>hasNode(node[key], fn));
            }
            function hasNakedLeftSide(node) {
                return node.type === "AssignmentExpression" || node.type === "BinaryExpression" || node.type === "LogicalExpression" || node.type === "NGPipeExpression" || node.type === "ConditionalExpression" || node.type === "CallExpression" || node.type === "OptionalCallExpression" || node.type === "MemberExpression" || node.type === "OptionalMemberExpression" || node.type === "SequenceExpression" || node.type === "TaggedTemplateExpression" || node.type === "BindExpression" || node.type === "UpdateExpression" && !node.prefix || node.type === "TSAsExpression" || node.type === "TSNonNullExpression";
            }
            function getLeftSide(node) {
                if (node.expressions) {
                    return node.expressions[0];
                }
                return node.left || node.test || node.callee || node.object || node.tag || node.argument || node.expression;
            }
            function getLeftSidePathName(path6, node) {
                if (node.expressions) {
                    return [
                        "expressions",
                        0
                    ];
                }
                if (node.left) {
                    return [
                        "left"
                    ];
                }
                if (node.test) {
                    return [
                        "test"
                    ];
                }
                if (node.object) {
                    return [
                        "object"
                    ];
                }
                if (node.callee) {
                    return [
                        "callee"
                    ];
                }
                if (node.tag) {
                    return [
                        "tag"
                    ];
                }
                if (node.argument) {
                    return [
                        "argument"
                    ];
                }
                if (node.expression) {
                    return [
                        "expression"
                    ];
                }
                throw new Error("Unexpected node has no left side", node);
            }
            const exportDeclarationTypes = /* @__PURE__ */ new Set([
                "ExportDefaultDeclaration",
                "ExportDefaultSpecifier",
                "DeclareExportDeclaration",
                "ExportNamedDeclaration",
                "ExportAllDeclaration"
            ]);
            function isExportDeclaration(node) {
                return node && exportDeclarationTypes.has(node.type);
            }
            function getParentExportDeclaration(path6) {
                const parentNode = path6.getParentNode();
                if (path6.getName() === "declaration" && isExportDeclaration(parentNode)) {
                    return parentNode;
                }
                return null;
            }
            function isLiteral(node) {
                return node.type === "BooleanLiteral" || node.type === "DirectiveLiteral" || node.type === "Literal" || node.type === "NullLiteral" || node.type === "NumericLiteral" || node.type === "RegExpLiteral" || node.type === "StringLiteral" || node.type === "TemplateLiteral" || node.type === "TSTypeLiteral" || node.type === "JSXText";
            }
            function isNumericLiteral(node) {
                return node.type === "NumericLiteral" || node.type === "Literal" && typeof node.value === "number";
            }
            function isStringLiteral(node) {
                return node.type === "StringLiteral" || node.type === "Literal" && typeof node.value === "string";
            }
            function isObjectType(n) {
                return n.type === "ObjectTypeAnnotation" || n.type === "TSTypeLiteral";
            }
            function isFunctionOrArrowExpression(node) {
                return node.type === "FunctionExpression" || node.type === "ArrowFunctionExpression";
            }
            function isFunctionOrArrowExpressionWithBody(node) {
                return node.type === "FunctionExpression" || node.type === "ArrowFunctionExpression" && node.body.type === "BlockStatement";
            }
            function isTemplateLiteral(node) {
                return node.type === "TemplateLiteral";
            }
            function isAngularTestWrapper(node) {
                return (node.type === "CallExpression" || node.type === "OptionalCallExpression") && node.callee.type === "Identifier" && (node.callee.name === "async" || node.callee.name === "inject" || node.callee.name === "fakeAsync");
            }
            function isJSXNode(node) {
                return node.type === "JSXElement" || node.type === "JSXFragment";
            }
            function isTheOnlyJSXElementInMarkdown(options2, path6) {
                if (options2.parentParser !== "markdown" && options2.parentParser !== "mdx") {
                    return false;
                }
                const node = path6.getNode();
                if (!node.expression || !isJSXNode(node.expression)) {
                    return false;
                }
                const parent = path6.getParentNode();
                return parent.type === "Program" && parent.body.length === 1;
            }
            function isJSXWhitespaceExpression(node) {
                return node.type === "JSXExpressionContainer" && isLiteral(node.expression) && node.expression.value === " " && !node.expression.comments;
            }
            function isMemberExpressionChain(node) {
                if (node.type !== "MemberExpression" && node.type !== "OptionalMemberExpression") {
                    return false;
                }
                if (node.object.type === "Identifier") {
                    return true;
                }
                return isMemberExpressionChain(node.object);
            }
            function isGetterOrSetter(node) {
                return node.kind === "get" || node.kind === "set";
            }
            function sameLocStart(nodeA, nodeB, options2) {
                return options2.locStart(nodeA) === options2.locStart(nodeB);
            }
            function isFunctionNotation(node, options2) {
                return isGetterOrSetter(node) || sameLocStart(node, node.value, options2);
            }
            function isObjectTypePropertyAFunction(node, options2) {
                return (node.type === "ObjectTypeProperty" || node.type === "ObjectTypeInternalSlot") && node.value.type === "FunctionTypeAnnotation" && !node.static && !isFunctionNotation(node, options2);
            }
            function isTypeAnnotationAFunction(node, options2) {
                return (node.type === "TypeAnnotation" || node.type === "TSTypeAnnotation") && node.typeAnnotation.type === "FunctionTypeAnnotation" && !node.static && !sameLocStart(node, node.typeAnnotation, options2);
            }
            const binaryishNodeTypes = /* @__PURE__ */ new Set([
                "BinaryExpression",
                "LogicalExpression",
                "NGPipeExpression"
            ]);
            function isBinaryish(node) {
                return binaryishNodeTypes.has(node.type);
            }
            function isMemberish(node) {
                return node.type === "MemberExpression" || node.type === "OptionalMemberExpression" || node.type === "BindExpression" && node.object;
            }
            function isSimpleFlowType(node) {
                const flowTypeAnnotations = [
                    "AnyTypeAnnotation",
                    "NullLiteralTypeAnnotation",
                    "GenericTypeAnnotation",
                    "ThisTypeAnnotation",
                    "NumberTypeAnnotation",
                    "VoidTypeAnnotation",
                    "EmptyTypeAnnotation",
                    "MixedTypeAnnotation",
                    "BooleanTypeAnnotation",
                    "BooleanLiteralTypeAnnotation",
                    "StringTypeAnnotation"
                ];
                return node && flowTypeAnnotations.includes(node.type) && !(node.type === "GenericTypeAnnotation" && node.typeParameters);
            }
            const unitTestRe = /^(skip|[fx]?(it|describe|test))$/;
            function isSkipOrOnlyBlock(node) {
                return (node.callee.type === "MemberExpression" || node.callee.type === "OptionalMemberExpression") && node.callee.object.type === "Identifier" && node.callee.property.type === "Identifier" && unitTestRe.test(node.callee.object.name) && (node.callee.property.name === "only" || node.callee.property.name === "skip");
            }
            function isUnitTestSetUp(n) {
                const unitTestSetUpRe = /^(before|after)(Each|All)$/;
                return n.callee.type === "Identifier" && unitTestSetUpRe.test(n.callee.name) && n.arguments.length === 1;
            }
            function isTestCall(n, parent) {
                if (n.type !== "CallExpression") {
                    return false;
                }
                if (n.arguments.length === 1) {
                    if (isAngularTestWrapper(n) && parent && isTestCall(parent)) {
                        return isFunctionOrArrowExpression(n.arguments[0]);
                    }
                    if (isUnitTestSetUp(n)) {
                        return isAngularTestWrapper(n.arguments[0]);
                    }
                } else if (n.arguments.length === 2 || n.arguments.length === 3) {
                    if ((n.callee.type === "Identifier" && unitTestRe.test(n.callee.name) || isSkipOrOnlyBlock(n)) && (isTemplateLiteral(n.arguments[0]) || isStringLiteral(n.arguments[0]))) {
                        if (n.arguments[2] && !isNumericLiteral(n.arguments[2])) {
                            return false;
                        }
                        return (n.arguments.length === 2 ? isFunctionOrArrowExpression(n.arguments[1]) : isFunctionOrArrowExpressionWithBody(n.arguments[1]) && n.arguments[1].params.length <= 1) || isAngularTestWrapper(n.arguments[1]);
                    }
                }
                return false;
            }
            function hasLeadingComment$2(node) {
                return node.comments && node.comments.some((comment)=>comment.leading);
            }
            function hasTrailingComment(node) {
                return node.comments && node.comments.some((comment)=>comment.trailing);
            }
            function isCallOrOptionalCallExpression(node) {
                return node.type === "CallExpression" || node.type === "OptionalCallExpression";
            }
            function hasDanglingComments(node) {
                return node.comments && node.comments.some((comment)=>!comment.leading && !comment.trailing);
            }
            function hasNgSideEffect(path6) {
                return hasNode(path6.getValue(), (node)=>{
                    switch(node.type){
                        case void 0:
                            return false;
                        case "CallExpression":
                        case "OptionalCallExpression":
                        case "AssignmentExpression":
                            return true;
                    }
                });
            }
            function isNgForOf(node, index2, parentNode) {
                return node.type === "NGMicrosyntaxKeyedExpression" && node.key.name === "of" && index2 === 1 && parentNode.body[0].type === "NGMicrosyntaxLet" && parentNode.body[0].value === null;
            }
            function isSimpleTemplateLiteral(node) {
                if (node.expressions.length === 0) {
                    return false;
                }
                return node.expressions.every((expr)=>{
                    if (expr.comments) {
                        return false;
                    }
                    if (expr.type === "Identifier" || expr.type === "ThisExpression") {
                        return true;
                    }
                    if (expr.type === "MemberExpression" || expr.type === "OptionalMemberExpression") {
                        let head2 = expr;
                        while(head2.type === "MemberExpression" || head2.type === "OptionalMemberExpression"){
                            if (head2.property.type !== "Identifier" && head2.property.type !== "Literal" && head2.property.type !== "StringLiteral" && head2.property.type !== "NumericLiteral") {
                                return false;
                            }
                            head2 = head2.object;
                            if (head2.comments) {
                                return false;
                            }
                        }
                        if (head2.type === "Identifier" || head2.type === "ThisExpression") {
                            return true;
                        }
                        return false;
                    }
                    return false;
                });
            }
            function getFlowVariance(path6) {
                if (!path6.variance) {
                    return null;
                }
                const variance = path6.variance.kind || path6.variance;
                switch(variance){
                    case "plus":
                        return "+";
                    case "minus":
                        return "-";
                    default:
                        return variance;
                }
            }
            function classPropMayCauseASIProblems(path6) {
                const node = path6.getNode();
                if (node.type !== "ClassProperty") {
                    return false;
                }
                const name2 = node.key && node.key.name;
                if ((name2 === "static" || name2 === "get" || name2 === "set") && !node.value && !node.typeAnnotation) {
                    return true;
                }
            }
            function classChildNeedsASIProtection(node) {
                if (!node) {
                    return;
                }
                if (node.static || node.accessibility) {
                    return false;
                }
                if (!node.computed) {
                    const name2 = node.key && node.key.name;
                    if (name2 === "in" || name2 === "instanceof") {
                        return true;
                    }
                }
                switch(node.type){
                    case "ClassProperty":
                    case "TSAbstractClassProperty":
                        return node.computed;
                    case "MethodDefinition":
                    case "TSAbstractMethodDefinition":
                    case "ClassMethod":
                    case "ClassPrivateMethod":
                        {
                            const isAsync = node.value ? node.value.async : node.async;
                            const isGenerator = node.value ? node.value.generator : node.generator;
                            if (isAsync || node.kind === "get" || node.kind === "set") {
                                return false;
                            }
                            if (node.computed || isGenerator) {
                                return true;
                            }
                            return false;
                        }
                    case "TSIndexSignature":
                        return true;
                    default:
                        return false;
                }
            }
            function getTypeScriptMappedTypeModifier(tokenNode, keyword2) {
                if (tokenNode === "+") {
                    return "+" + keyword2;
                } else if (tokenNode === "-") {
                    return "-" + keyword2;
                }
                return keyword2;
            }
            function hasNewlineBetweenOrAfterDecorators(node, options2) {
                return hasNewlineInRange$2(options2.originalText, options2.locStart(node.decorators[0]), options2.locEnd(getLast$2(node.decorators))) || hasNewline$4(options2.originalText, options2.locEnd(getLast$2(node.decorators)));
            }
            const jsxWhitespaceChars = " \n\r	";
            const matchJsxWhitespaceRegex = new RegExp("([" + jsxWhitespaceChars + "]+)");
            const containsNonJsxWhitespaceRegex = new RegExp("[^" + jsxWhitespaceChars + "]");
            function isMeaningfulJSXText(node) {
                return isLiteral(node) && (containsNonJsxWhitespaceRegex.test(rawText(node)) || !/\n/.test(rawText(node)));
            }
            function hasJsxIgnoreComment(path6) {
                const node = path6.getValue();
                const parent = path6.getParentNode();
                if (!parent || !node || !isJSXNode(node) || !isJSXNode(parent)) {
                    return false;
                }
                const index2 = parent.children.indexOf(node);
                let prevSibling = null;
                for(let i = index2; i > 0; i--){
                    const candidate = parent.children[i - 1];
                    if (candidate.type === "JSXText" && !isMeaningfulJSXText(candidate)) {
                        continue;
                    }
                    prevSibling = candidate;
                    break;
                }
                return prevSibling && prevSibling.type === "JSXExpressionContainer" && prevSibling.expression.type === "JSXEmptyExpression" && prevSibling.expression.comments && prevSibling.expression.comments.find((comment)=>comment.value.trim() === "prettier-ignore");
            }
            function isEmptyJSXElement(node) {
                if (node.children.length === 0) {
                    return true;
                }
                if (node.children.length > 1) {
                    return false;
                }
                const child = node.children[0];
                return isLiteral(child) && !isMeaningfulJSXText(child);
            }
            function hasPrettierIgnore$4(path6) {
                return hasIgnoreComment$3(path6) || hasJsxIgnoreComment(path6);
            }
            function isLastStatement(path6) {
                const parent = path6.getParentNode();
                if (!parent) {
                    return true;
                }
                const node = path6.getValue();
                const body2 = (parent.body || parent.consequent).filter((stmt)=>stmt.type !== "EmptyStatement");
                return body2 && body2[body2.length - 1] === node;
            }
            function isFlowAnnotationComment(text, typeAnnotation, options2) {
                const start = options2.locStart(typeAnnotation);
                const end = skipWhitespace$2(text, options2.locEnd(typeAnnotation));
                return text.slice(start, start + 2) === "/*" && text.slice(end, end + 2) === "*/";
            }
            function hasLeadingOwnLineComment(text, node, options2) {
                if (isJSXNode(node)) {
                    return hasNodeIgnoreComment$1(node);
                }
                const res = node.comments && node.comments.some((comment)=>comment.leading && hasNewline$4(text, options2.locEnd(comment)));
                return res;
            }
            function returnArgumentHasLeadingComment(options2, argument) {
                if (hasLeadingOwnLineComment(options2.originalText, argument, options2)) {
                    return true;
                }
                if (hasNakedLeftSide(argument)) {
                    let leftMost = argument;
                    let newLeftMost;
                    while(newLeftMost = getLeftSide(leftMost)){
                        leftMost = newLeftMost;
                        if (hasLeadingOwnLineComment(options2.originalText, leftMost, options2)) {
                            return true;
                        }
                    }
                }
                return false;
            }
            function isStringPropSafeToCoerceToIdentifier(node, options2) {
                return isStringLiteral(node.key) && isIdentifierName(node.key.value) && options2.parser !== "json" && // With `--strictPropertyInitialization`, TS treats properties with quoted names differently than unquoted ones.
                // See https://github.com/microsoft/TypeScript/pull/20075
                !((options2.parser === "typescript" || options2.parser === "babel-ts") && node.type === "ClassProperty");
            }
            function isJestEachTemplateLiteral(node, parentNode) {
                const jestEachTriggerRegex = /^[xf]?(describe|it|test)$/;
                return parentNode.type === "TaggedTemplateExpression" && parentNode.quasi === node && parentNode.tag.type === "MemberExpression" && parentNode.tag.property.type === "Identifier" && parentNode.tag.property.name === "each" && (parentNode.tag.object.type === "Identifier" && jestEachTriggerRegex.test(parentNode.tag.object.name) || parentNode.tag.object.type === "MemberExpression" && parentNode.tag.object.property.type === "Identifier" && (parentNode.tag.object.property.name === "only" || parentNode.tag.object.property.name === "skip") && parentNode.tag.object.object.type === "Identifier" && jestEachTriggerRegex.test(parentNode.tag.object.object.name));
            }
            function templateLiteralHasNewLines(template2) {
                return template2.quasis.some((quasi)=>quasi.value.raw.includes("\n"));
            }
            function isTemplateOnItsOwnLine(n, text, options2) {
                return (n.type === "TemplateLiteral" && templateLiteralHasNewLines(n) || n.type === "TaggedTemplateExpression" && templateLiteralHasNewLines(n.quasi)) && !hasNewline$4(text, options2.locStart(n), {
                    backwards: true
                });
            }
            function needsHardlineAfterDanglingComment(node) {
                if (!node.comments) {
                    return false;
                }
                const lastDanglingComment = getLast$2(node.comments.filter((comment)=>!comment.leading && !comment.trailing));
                return lastDanglingComment && !comments$1.isBlockComment(lastDanglingComment);
            }
            function getConditionalChainContents(node) {
                const nonConditionalExpressions = [];
                function recurse(node2) {
                    if (node2.type === "ConditionalExpression") {
                        recurse(node2.test);
                        recurse(node2.consequent);
                        recurse(node2.alternate);
                    } else {
                        nonConditionalExpressions.push(node2);
                    }
                }
                recurse(node);
                return nonConditionalExpressions;
            }
            function conditionalExpressionChainContainsJSX(node) {
                return Boolean(getConditionalChainContents(node).find(isJSXNode));
            }
            function isFunctionCompositionArgs(args) {
                if (args.length <= 1) {
                    return false;
                }
                let count = 0;
                for (const arg of args){
                    if (isFunctionOrArrowExpression(arg)) {
                        count += 1;
                        if (count > 1) {
                            return true;
                        }
                    } else if (isCallOrOptionalCallExpression(arg)) {
                        for (const childArg of arg.arguments){
                            if (isFunctionOrArrowExpression(childArg)) {
                                return true;
                            }
                        }
                    }
                }
                return false;
            }
            function isLongCurriedCallExpression(path6) {
                const node = path6.getValue();
                const parent = path6.getParentNode();
                return isCallOrOptionalCallExpression(node) && isCallOrOptionalCallExpression(parent) && parent.callee === node && node.arguments.length > parent.arguments.length && parent.arguments.length > 0;
            }
            function isSimpleCallArgument(node, depth) {
                if (depth >= 2) {
                    return false;
                }
                const isChildSimple = (child)=>isSimpleCallArgument(child, depth + 1);
                const regexpPattern = node.type === "Literal" && node.regex && node.regex.pattern || node.type === "RegExpLiteral" && node.pattern;
                if (regexpPattern && regexpPattern.length > 5) {
                    return false;
                }
                if (node.type === "Literal" || node.type === "BooleanLiteral" || node.type === "NullLiteral" || node.type === "NumericLiteral" || node.type === "StringLiteral" || node.type === "Identifier" || node.type === "ThisExpression" || node.type === "Super" || node.type === "BigIntLiteral" || node.type === "PrivateName" || node.type === "ArgumentPlaceholder" || node.type === "RegExpLiteral" || node.type === "Import") {
                    return true;
                }
                if (node.type === "TemplateLiteral") {
                    return node.expressions.every(isChildSimple);
                }
                if (node.type === "ObjectExpression") {
                    return node.properties.every((p2)=>!p2.computed && (p2.shorthand || p2.value && isChildSimple(p2.value)));
                }
                if (node.type === "ArrayExpression") {
                    return node.elements.every((x)=>x == null || isChildSimple(x));
                }
                if (node.type === "CallExpression" || node.type === "OptionalCallExpression" || node.type === "NewExpression") {
                    return isSimpleCallArgument(node.callee, depth) && node.arguments.every(isChildSimple);
                }
                if (node.type === "MemberExpression" || node.type === "OptionalMemberExpression") {
                    return isSimpleCallArgument(node.object, depth) && isSimpleCallArgument(node.property, depth);
                }
                if (node.type === "UnaryExpression" && (node.operator === "!" || node.operator === "-")) {
                    return isSimpleCallArgument(node.argument, depth);
                }
                if (node.type === "TSNonNullExpression") {
                    return isSimpleCallArgument(node.expression, depth);
                }
                return false;
            }
            function rawText(node) {
                return node.extra ? node.extra.raw : node.raw;
            }
            function identity$1(x) {
                return x;
            }
            function isTSXFile(options2) {
                return options2.filepath && /\.tsx$/i.test(options2.filepath);
            }
            var utils$5 = {
                classChildNeedsASIProtection,
                classPropMayCauseASIProblems,
                conditionalExpressionChainContainsJSX,
                getFlowVariance,
                getLeftSidePathName,
                getParentExportDeclaration,
                getTypeScriptMappedTypeModifier,
                hasDanglingComments,
                hasFlowAnnotationComment,
                hasFlowShorthandAnnotationComment,
                hasLeadingComment: hasLeadingComment$2,
                hasLeadingOwnLineComment,
                hasNakedLeftSide,
                hasNewlineBetweenOrAfterDecorators,
                hasNgSideEffect,
                hasNode,
                hasPrettierIgnore: hasPrettierIgnore$4,
                hasTrailingComment,
                identity: identity$1,
                isBinaryish,
                isCallOrOptionalCallExpression,
                isEmptyJSXElement,
                isExportDeclaration,
                isFlowAnnotationComment,
                isFunctionCompositionArgs,
                isFunctionNotation,
                isFunctionOrArrowExpression,
                isGetterOrSetter,
                isJestEachTemplateLiteral,
                isJSXNode,
                isJSXWhitespaceExpression,
                isLastStatement,
                isLiteral,
                isLongCurriedCallExpression,
                isSimpleCallArgument,
                isMeaningfulJSXText,
                isMemberExpressionChain,
                isMemberish,
                isNgForOf,
                isNumericLiteral,
                isObjectType,
                isObjectTypePropertyAFunction,
                isSimpleFlowType,
                isSimpleTemplateLiteral,
                isStringLiteral,
                isStringPropSafeToCoerceToIdentifier,
                isTemplateOnItsOwnLine,
                isTestCall,
                isTheOnlyJSXElementInMarkdown,
                isTSXFile,
                isTypeAnnotationAFunction,
                matchJsxWhitespaceRegex,
                needsHardlineAfterDanglingComment,
                rawText,
                returnArgumentHasLeadingComment
            };
            const { getLeftSidePathName: getLeftSidePathName$1 , hasFlowShorthandAnnotationComment: hasFlowShorthandAnnotationComment$1 , hasNakedLeftSide: hasNakedLeftSide$1 , hasNode: hasNode$1  } = utils$5;
            function needsParens(path6, options2) {
                const parent = path6.getParentNode();
                if (!parent) {
                    return false;
                }
                const name2 = path6.getName();
                const node = path6.getNode();
                if (path6.getValue() !== node) {
                    return false;
                }
                if (options2.__isInHtmlInterpolation && !options2.bracketSpacing && endsWithRightBracket(node) && isFollowedByRightBracket(path6)) {
                    return true;
                }
                if (isStatement(node)) {
                    return false;
                }
                if (// Preserve parens if we have a Flow annotation comment, unless we're using the Flow
                // parser. The Flow parser turns Flow comments into type annotation nodes in its
                // AST, which we handle separately.
                options2.parser !== "flow" && hasFlowShorthandAnnotationComment$1(path6.getValue())) {
                    return true;
                }
                if (node.type === "Identifier") {
                    if (node.extra && node.extra.parenthesized && /^PRETTIER_HTML_PLACEHOLDER_\d+_\d+_IN_JS$/.test(node.name)) {
                        return true;
                    }
                    return false;
                }
                if (parent.type === "ParenthesizedExpression") {
                    return false;
                }
                if ((parent.type === "ClassDeclaration" || parent.type === "ClassExpression") && parent.superClass === node && (node.type === "ArrowFunctionExpression" || node.type === "AssignmentExpression" || node.type === "AwaitExpression" || node.type === "BinaryExpression" || node.type === "ConditionalExpression" || node.type === "LogicalExpression" || node.type === "NewExpression" || node.type === "ObjectExpression" || node.type === "ParenthesizedExpression" || node.type === "SequenceExpression" || node.type === "TaggedTemplateExpression" || node.type === "UnaryExpression" || node.type === "UpdateExpression" || node.type === "YieldExpression")) {
                    return true;
                }
                if (parent.type === "ExportDefaultDeclaration") {
                    return(// `export default function` or `export default class` can't be followed by
                    // anything after. So an expression like `export default (function(){}).toString()`
                    // needs to be followed by a parentheses
                    shouldWrapFunctionForExportDefault(path6, options2) || // `export default (foo, bar)` also needs parentheses
                    node.type === "SequenceExpression");
                }
                if (parent.type === "Decorator" && parent.expression === node) {
                    let hasCallExpression = false;
                    let hasMemberExpression = false;
                    let current = node;
                    while(current){
                        switch(current.type){
                            case "MemberExpression":
                                hasMemberExpression = true;
                                current = current.object;
                                break;
                            case "CallExpression":
                                if (/** @(x().y) */ hasMemberExpression || /** @(x().y()) */ hasCallExpression) {
                                    return true;
                                }
                                hasCallExpression = true;
                                current = current.callee;
                                break;
                            case "Identifier":
                                return false;
                            default:
                                return true;
                        }
                    }
                    return true;
                }
                if (parent.type === "ArrowFunctionExpression" && parent.body === node && node.type !== "SequenceExpression" && // these have parens added anyway
                util$1.startsWithNoLookaheadToken(node, /* forbidFunctionClassAndDoExpr */ false) || parent.type === "ExpressionStatement" && util$1.startsWithNoLookaheadToken(node, /* forbidFunctionClassAndDoExpr */ true)) {
                    return true;
                }
                switch(node.type){
                    case "SpreadElement":
                    case "SpreadProperty":
                        return parent.type === "MemberExpression" && name2 === "object" && parent.object === node;
                    case "UpdateExpression":
                        if (parent.type === "UnaryExpression") {
                            return node.prefix && (node.operator === "++" && parent.operator === "+" || node.operator === "--" && parent.operator === "-");
                        }
                    case "UnaryExpression":
                        switch(parent.type){
                            case "UnaryExpression":
                                return node.operator === parent.operator && (node.operator === "+" || node.operator === "-");
                            case "BindExpression":
                                return true;
                            case "MemberExpression":
                            case "OptionalMemberExpression":
                                return name2 === "object";
                            case "TaggedTemplateExpression":
                                return true;
                            case "NewExpression":
                            case "CallExpression":
                            case "OptionalCallExpression":
                                return name2 === "callee";
                            case "BinaryExpression":
                                return parent.operator === "**" && name2 === "left";
                            case "TSNonNullExpression":
                                return true;
                            default:
                                return false;
                        }
                    case "BinaryExpression":
                        {
                            if (parent.type === "UpdateExpression") {
                                return true;
                            }
                            const isLeftOfAForStatement = (node2)=>{
                                let i = 0;
                                while(node2){
                                    const parent2 = path6.getParentNode(i++);
                                    if (!parent2) {
                                        return false;
                                    }
                                    if (parent2.type === "ForStatement" && parent2.init === node2) {
                                        return true;
                                    }
                                    node2 = parent2;
                                }
                                return false;
                            };
                            if (node.operator === "in" && isLeftOfAForStatement(node)) {
                                return true;
                            }
                        }
                    case "TSTypeAssertion":
                    case "TSAsExpression":
                    case "LogicalExpression":
                        switch(parent.type){
                            case "ConditionalExpression":
                                return node.type === "TSAsExpression";
                            case "CallExpression":
                            case "NewExpression":
                            case "OptionalCallExpression":
                                return name2 === "callee";
                            case "ClassExpression":
                            case "ClassDeclaration":
                                return name2 === "superClass" && parent.superClass === node;
                            case "TSTypeAssertion":
                            case "TaggedTemplateExpression":
                            case "UnaryExpression":
                            case "JSXSpreadAttribute":
                            case "SpreadElement":
                            case "SpreadProperty":
                            case "BindExpression":
                            case "AwaitExpression":
                            case "TSAsExpression":
                            case "TSNonNullExpression":
                            case "UpdateExpression":
                                return true;
                            case "MemberExpression":
                            case "OptionalMemberExpression":
                                return name2 === "object";
                            case "AssignmentExpression":
                                return parent.left === node && (node.type === "TSTypeAssertion" || node.type === "TSAsExpression");
                            case "LogicalExpression":
                                if (node.type === "LogicalExpression") {
                                    return parent.operator !== node.operator;
                                }
                            case "BinaryExpression":
                                {
                                    if (!node.operator && node.type !== "TSTypeAssertion") {
                                        return true;
                                    }
                                    const po = parent.operator;
                                    const pp = util$1.getPrecedence(po);
                                    const no = node.operator;
                                    const np = util$1.getPrecedence(no);
                                    if (pp > np) {
                                        return true;
                                    }
                                    if (pp === np && name2 === "right") {
                                        assert.strictEqual(parent.right, node);
                                        return true;
                                    }
                                    if (pp === np && !util$1.shouldFlatten(po, no)) {
                                        return true;
                                    }
                                    if (pp < np && no === "%") {
                                        return po === "+" || po === "-";
                                    }
                                    if (util$1.isBitwiseOperator(po)) {
                                        return true;
                                    }
                                    return false;
                                }
                            default:
                                return false;
                        }
                    case "SequenceExpression":
                        switch(parent.type){
                            case "ReturnStatement":
                                return false;
                            case "ForStatement":
                                return false;
                            case "ExpressionStatement":
                                return name2 !== "expression";
                            case "ArrowFunctionExpression":
                                return name2 !== "body";
                            default:
                                return true;
                        }
                    case "YieldExpression":
                        if (parent.type === "UnaryExpression" || parent.type === "AwaitExpression" || parent.type === "TSAsExpression" || parent.type === "TSNonNullExpression") {
                            return true;
                        }
                    case "AwaitExpression":
                        switch(parent.type){
                            case "TaggedTemplateExpression":
                            case "UnaryExpression":
                            case "BinaryExpression":
                            case "LogicalExpression":
                            case "SpreadElement":
                            case "SpreadProperty":
                            case "TSAsExpression":
                            case "TSNonNullExpression":
                            case "BindExpression":
                                return true;
                            case "MemberExpression":
                            case "OptionalMemberExpression":
                                return name2 === "object";
                            case "NewExpression":
                            case "CallExpression":
                            case "OptionalCallExpression":
                                return name2 === "callee";
                            case "ConditionalExpression":
                                return parent.test === node;
                            default:
                                return false;
                        }
                    case "TSJSDocFunctionType":
                    case "TSConditionalType":
                        if (parent.type === "TSConditionalType" && node === parent.extendsType) {
                            return true;
                        }
                    case "TSFunctionType":
                    case "TSConstructorType":
                        if (parent.type === "TSConditionalType" && node === parent.checkType) {
                            return true;
                        }
                    case "TSUnionType":
                    case "TSIntersectionType":
                        if (parent.type === "TSUnionType" || parent.type === "TSIntersectionType") {
                            return true;
                        }
                    case "TSTypeOperator":
                    case "TSInferType":
                        return parent.type === "TSArrayType" || parent.type === "TSOptionalType" || parent.type === "TSRestType" || parent.type === "TSIndexedAccessType" && node === parent.objectType || parent.type === "TSTypeOperator" || parent.type === "TSTypeAnnotation" && /^TSJSDoc/.test(path6.getParentNode(1).type);
                    case "ArrayTypeAnnotation":
                        return parent.type === "NullableTypeAnnotation";
                    case "IntersectionTypeAnnotation":
                    case "UnionTypeAnnotation":
                        return parent.type === "ArrayTypeAnnotation" || parent.type === "NullableTypeAnnotation" || parent.type === "IntersectionTypeAnnotation" || parent.type === "UnionTypeAnnotation";
                    case "NullableTypeAnnotation":
                        return parent.type === "ArrayTypeAnnotation";
                    case "FunctionTypeAnnotation":
                        {
                            const ancestor = parent.type === "NullableTypeAnnotation" ? path6.getParentNode(1) : parent;
                            return ancestor.type === "UnionTypeAnnotation" || ancestor.type === "IntersectionTypeAnnotation" || ancestor.type === "ArrayTypeAnnotation" || // We should check ancestor's parent to know whether the parentheses
                            // are really needed, but since ??T doesn't make sense this check
                            // will almost never be true.
                            ancestor.type === "NullableTypeAnnotation";
                        }
                    case "StringLiteral":
                    case "NumericLiteral":
                    case "Literal":
                        if (typeof node.value === "string" && parent.type === "ExpressionStatement" && // TypeScript workaround for https://github.com/JamesHenry/typescript-estree/issues/2
                        // See corresponding workaround in printer.js case: "Literal"
                        (options2.parser !== "typescript" && !parent.directive || options2.parser === "typescript" && options2.originalText.charAt(options2.locStart(node) - 1) === "(")) {
                            const grandParent = path6.getParentNode(1);
                            return grandParent.type === "Program" || grandParent.type === "BlockStatement";
                        }
                        return parent.type === "MemberExpression" && typeof node.value === "number" && name2 === "object" && parent.object === node;
                    case "AssignmentExpression":
                        {
                            const grandParent = path6.getParentNode(1);
                            if (parent.type === "ArrowFunctionExpression" && parent.body === node) {
                                return true;
                            } else if (parent.type === "ClassProperty" && parent.key === node && parent.computed) {
                                return false;
                            } else if (parent.type === "TSPropertySignature" && parent.name === node) {
                                return false;
                            } else if (parent.type === "ForStatement" && (parent.init === node || parent.update === node)) {
                                return false;
                            } else if (parent.type === "ExpressionStatement") {
                                return node.left.type === "ObjectPattern";
                            } else if (parent.type === "TSPropertySignature" && parent.key === node) {
                                return false;
                            } else if (parent.type === "AssignmentExpression") {
                                return false;
                            } else if (parent.type === "SequenceExpression" && grandParent && grandParent.type === "ForStatement" && (grandParent.init === parent || grandParent.update === parent)) {
                                return false;
                            } else if (parent.type === "Property" && parent.value === node) {
                                return false;
                            } else if (parent.type === "NGChainedExpression") {
                                return false;
                            }
                            return true;
                        }
                    case "ConditionalExpression":
                        switch(parent.type){
                            case "TaggedTemplateExpression":
                            case "UnaryExpression":
                            case "SpreadElement":
                            case "SpreadProperty":
                            case "BinaryExpression":
                            case "LogicalExpression":
                            case "NGPipeExpression":
                            case "ExportDefaultDeclaration":
                            case "AwaitExpression":
                            case "JSXSpreadAttribute":
                            case "TSTypeAssertion":
                            case "TypeCastExpression":
                            case "TSAsExpression":
                            case "TSNonNullExpression":
                                return true;
                            case "NewExpression":
                            case "CallExpression":
                            case "OptionalCallExpression":
                                return name2 === "callee";
                            case "ConditionalExpression":
                                return name2 === "test" && parent.test === node;
                            case "MemberExpression":
                            case "OptionalMemberExpression":
                                return name2 === "object";
                            default:
                                return false;
                        }
                    case "FunctionExpression":
                        switch(parent.type){
                            case "NewExpression":
                            case "CallExpression":
                            case "OptionalCallExpression":
                                return name2 === "callee";
                            case "TaggedTemplateExpression":
                                return true;
                            default:
                                return false;
                        }
                    case "ArrowFunctionExpression":
                        switch(parent.type){
                            case "NewExpression":
                            case "CallExpression":
                            case "OptionalCallExpression":
                                return name2 === "callee";
                            case "MemberExpression":
                            case "OptionalMemberExpression":
                                return name2 === "object";
                            case "TSAsExpression":
                            case "BindExpression":
                            case "TaggedTemplateExpression":
                            case "UnaryExpression":
                            case "LogicalExpression":
                            case "BinaryExpression":
                            case "AwaitExpression":
                            case "TSTypeAssertion":
                                return true;
                            case "ConditionalExpression":
                                return name2 === "test";
                            default:
                                return false;
                        }
                    case "ClassExpression":
                        switch(parent.type){
                            case "NewExpression":
                                return name2 === "callee" && parent.callee === node;
                            default:
                                return false;
                        }
                    case "OptionalMemberExpression":
                    case "OptionalCallExpression":
                        if (parent.type === "MemberExpression" && name2 === "object" || (parent.type === "CallExpression" || parent.type === "NewExpression") && name2 === "callee") {
                            return true;
                        }
                    case "CallExpression":
                    case "MemberExpression":
                    case "TaggedTemplateExpression":
                    case "TSNonNullExpression":
                        if ((parent.type === "BindExpression" || parent.type === "NewExpression") && name2 === "callee") {
                            let object2 = node;
                            while(object2){
                                switch(object2.type){
                                    case "CallExpression":
                                    case "OptionalCallExpression":
                                        return true;
                                    case "MemberExpression":
                                    case "OptionalMemberExpression":
                                    case "BindExpression":
                                        object2 = object2.object;
                                        break;
                                    case "TaggedTemplateExpression":
                                        object2 = object2.tag;
                                        break;
                                    case "TSNonNullExpression":
                                        object2 = object2.expression;
                                        break;
                                    default:
                                        return false;
                                }
                            }
                        }
                        return false;
                    case "BindExpression":
                        return (parent.type === "BindExpression" || parent.type === "NewExpression") && name2 === "callee" || (parent.type === "MemberExpression" || parent.type === "OptionalMemberExpression") && name2 === "object";
                    case "NGPipeExpression":
                        if (parent.type === "NGRoot" || parent.type === "NGMicrosyntaxExpression" || parent.type === "ObjectProperty" || parent.type === "ArrayExpression" || (parent.type === "CallExpression" || parent.type === "OptionalCallExpression") && parent.arguments[name2] === node || parent.type === "NGPipeExpression" && name2 === "right" || parent.type === "MemberExpression" && name2 === "property" || parent.type === "AssignmentExpression") {
                            return false;
                        }
                        return true;
                    case "JSXFragment":
                    case "JSXElement":
                        return name2 === "callee" || parent.type !== "ArrayExpression" && parent.type !== "ArrowFunctionExpression" && parent.type !== "AssignmentExpression" && parent.type !== "AssignmentPattern" && parent.type !== "BinaryExpression" && parent.type !== "CallExpression" && parent.type !== "NewExpression" && parent.type !== "ConditionalExpression" && parent.type !== "ExpressionStatement" && parent.type !== "JsExpressionRoot" && parent.type !== "JSXAttribute" && parent.type !== "JSXElement" && parent.type !== "JSXExpressionContainer" && parent.type !== "JSXFragment" && parent.type !== "LogicalExpression" && parent.type !== "ObjectProperty" && parent.type !== "OptionalCallExpression" && parent.type !== "Property" && parent.type !== "ReturnStatement" && parent.type !== "ThrowStatement" && parent.type !== "TypeCastExpression" && parent.type !== "VariableDeclarator" && parent.type !== "YieldExpression";
                    case "TypeAnnotation":
                        return name2 === "returnType" && parent.type === "ArrowFunctionExpression" && includesFunctionTypeInObjectType(node);
                }
                return false;
            }
            function isStatement(node) {
                return node.type === "BlockStatement" || node.type === "BreakStatement" || node.type === "ClassBody" || node.type === "ClassDeclaration" || node.type === "ClassMethod" || node.type === "ClassProperty" || node.type === "ClassPrivateProperty" || node.type === "ContinueStatement" || node.type === "DebuggerStatement" || node.type === "DeclareClass" || node.type === "DeclareExportAllDeclaration" || node.type === "DeclareExportDeclaration" || node.type === "DeclareFunction" || node.type === "DeclareInterface" || node.type === "DeclareModule" || node.type === "DeclareModuleExports" || node.type === "DeclareVariable" || node.type === "DoWhileStatement" || node.type === "EnumDeclaration" || node.type === "ExportAllDeclaration" || node.type === "ExportDefaultDeclaration" || node.type === "ExportNamedDeclaration" || node.type === "ExpressionStatement" || node.type === "ForInStatement" || node.type === "ForOfStatement" || node.type === "ForStatement" || node.type === "FunctionDeclaration" || node.type === "IfStatement" || node.type === "ImportDeclaration" || node.type === "InterfaceDeclaration" || node.type === "LabeledStatement" || node.type === "MethodDefinition" || node.type === "ReturnStatement" || node.type === "SwitchStatement" || node.type === "ThrowStatement" || node.type === "TryStatement" || node.type === "TSDeclareFunction" || node.type === "TSEnumDeclaration" || node.type === "TSImportEqualsDeclaration" || node.type === "TSInterfaceDeclaration" || node.type === "TSModuleDeclaration" || node.type === "TSNamespaceExportDeclaration" || node.type === "TypeAlias" || node.type === "VariableDeclaration" || node.type === "WhileStatement" || node.type === "WithStatement";
            }
            function includesFunctionTypeInObjectType(node) {
                return hasNode$1(node, (n1)=>n1.type === "ObjectTypeAnnotation" && hasNode$1(n1, (n2)=>n2.type === "FunctionTypeAnnotation" || void 0) || void 0);
            }
            function endsWithRightBracket(node) {
                switch(node.type){
                    case "ObjectExpression":
                        return true;
                    default:
                        return false;
                }
            }
            function isFollowedByRightBracket(path6) {
                const node = path6.getValue();
                const parent = path6.getParentNode();
                const name2 = path6.getName();
                switch(parent.type){
                    case "NGPipeExpression":
                        if (typeof name2 === "number" && parent.arguments[name2] === node && parent.arguments.length - 1 === name2) {
                            return path6.callParent(isFollowedByRightBracket);
                        }
                        break;
                    case "ObjectProperty":
                        if (name2 === "value") {
                            const parentParent = path6.getParentNode(1);
                            return parentParent.properties[parentParent.properties.length - 1] === parent;
                        }
                        break;
                    case "BinaryExpression":
                    case "LogicalExpression":
                        if (name2 === "right") {
                            return path6.callParent(isFollowedByRightBracket);
                        }
                        break;
                    case "ConditionalExpression":
                        if (name2 === "alternate") {
                            return path6.callParent(isFollowedByRightBracket);
                        }
                        break;
                    case "UnaryExpression":
                        if (parent.prefix) {
                            return path6.callParent(isFollowedByRightBracket);
                        }
                        break;
                }
                return false;
            }
            function shouldWrapFunctionForExportDefault(path6, options2) {
                const node = path6.getValue();
                const parent = path6.getParentNode();
                if (node.type === "FunctionExpression" || node.type === "ClassExpression") {
                    return parent.type === "ExportDefaultDeclaration" || // in some cases the function is already wrapped
                    // (e.g. `export default (function() {})();`)
                    // in this case we don't need to add extra parens
                    !needsParens(path6, options2);
                }
                if (!hasNakedLeftSide$1(node) || parent.type !== "ExportDefaultDeclaration" && needsParens(path6, options2)) {
                    return false;
                }
                return path6.call((childPath)=>shouldWrapFunctionForExportDefault(childPath, options2), ...getLeftSidePathName$1(path6, node));
            }
            var needsParens_1 = needsParens;
            const { builders: { concat: concat$c , join: join$8 , line: line$8  }  } = document;
            function printHtmlBinding(path6, options2, print2) {
                const node = path6.getValue();
                if (options2.__onHtmlBindingRoot && path6.getName() === null) {
                    options2.__onHtmlBindingRoot(node, options2);
                }
                if (node.type !== "File") {
                    return;
                }
                if (options2.__isVueForBindingLeft) {
                    return path6.call((functionDeclarationPath)=>{
                        const { params  } = functionDeclarationPath.getValue();
                        return concat$c([
                            params.length > 1 ? "(" : "",
                            join$8(concat$c([
                                ",",
                                line$8
                            ]), functionDeclarationPath.map(print2, "params")),
                            params.length > 1 ? ")" : ""
                        ]);
                    }, "program", "body", 0);
                }
                if (options2.__isVueSlotScope) {
                    return path6.call((functionDeclarationPath)=>join$8(concat$c([
                            ",",
                            line$8
                        ]), functionDeclarationPath.map(print2, "params")), "program", "body", 0);
                }
            }
            function isVueEventBindingExpression$2(node) {
                switch(node.type){
                    case "MemberExpression":
                        switch(node.property.type){
                            case "Identifier":
                            case "NumericLiteral":
                            case "StringLiteral":
                                return isVueEventBindingExpression$2(node.object);
                        }
                        return false;
                    case "Identifier":
                        return true;
                    default:
                        return false;
                }
            }
            var htmlBinding = {
                isVueEventBindingExpression: isVueEventBindingExpression$2,
                printHtmlBinding
            };
            function preprocess$1(ast2, options2) {
                switch(options2.parser){
                    case "json":
                    case "json5":
                    case "json-stringify":
                    case "__js_expression":
                    case "__vue_expression":
                        return Object.assign({}, ast2, {
                            type: options2.parser.startsWith("__") ? "JsExpressionRoot" : "JsonRoot",
                            node: ast2,
                            comments: [],
                            rootMarker: options2.rootMarker
                        });
                    default:
                        return ast2;
                }
            }
            var preprocess_1$1 = preprocess$1;
            const { shouldFlatten: shouldFlatten$1 , getNextNonSpaceNonCommentCharacter: getNextNonSpaceNonCommentCharacter$1 , hasNewline: hasNewline$5 , hasNewlineInRange: hasNewlineInRange$3 , getLast: getLast$3 , getStringWidth: getStringWidth$3 , printString: printString$2 , printNumber: printNumber$2 , hasIgnoreComment: hasIgnoreComment$4 , hasNodeIgnoreComment: hasNodeIgnoreComment$2 , getPenultimate: getPenultimate$1 , startsWithNoLookaheadToken: startsWithNoLookaheadToken$1 , getIndentSize: getIndentSize$2 , getPreferredQuote: getPreferredQuote$1  } = util$1;
            const { isNextLineEmpty: isNextLineEmpty$4 , isNextLineEmptyAfterIndex: isNextLineEmptyAfterIndex$2 , getNextNonSpaceNonCommentCharacterIndex: getNextNonSpaceNonCommentCharacterIndex$3  } = utilShared;
            const { insertPragma: insertPragma$7  } = pragma;
            const { printHtmlBinding: printHtmlBinding$1 , isVueEventBindingExpression: isVueEventBindingExpression$3  } = htmlBinding;
            const { classChildNeedsASIProtection: classChildNeedsASIProtection$1 , classPropMayCauseASIProblems: classPropMayCauseASIProblems$1 , conditionalExpressionChainContainsJSX: conditionalExpressionChainContainsJSX$1 , getFlowVariance: getFlowVariance$1 , getLeftSidePathName: getLeftSidePathName$2 , getParentExportDeclaration: getParentExportDeclaration$1 , getTypeScriptMappedTypeModifier: getTypeScriptMappedTypeModifier$1 , hasDanglingComments: hasDanglingComments$1 , hasFlowAnnotationComment: hasFlowAnnotationComment$1 , hasFlowShorthandAnnotationComment: hasFlowShorthandAnnotationComment$2 , hasLeadingComment: hasLeadingComment$3 , hasLeadingOwnLineComment: hasLeadingOwnLineComment$1 , hasNakedLeftSide: hasNakedLeftSide$2 , hasNewlineBetweenOrAfterDecorators: hasNewlineBetweenOrAfterDecorators$1 , hasNgSideEffect: hasNgSideEffect$1 , hasPrettierIgnore: hasPrettierIgnore$5 , hasTrailingComment: hasTrailingComment$1 , identity: identity$2 , isBinaryish: isBinaryish$1 , isCallOrOptionalCallExpression: isCallOrOptionalCallExpression$1 , isEmptyJSXElement: isEmptyJSXElement$1 , isExportDeclaration: isExportDeclaration$1 , isFlowAnnotationComment: isFlowAnnotationComment$1 , isFunctionCompositionArgs: isFunctionCompositionArgs$1 , isFunctionNotation: isFunctionNotation$1 , isFunctionOrArrowExpression: isFunctionOrArrowExpression$1 , isGetterOrSetter: isGetterOrSetter$1 , isJestEachTemplateLiteral: isJestEachTemplateLiteral$1 , isJSXNode: isJSXNode$1 , isJSXWhitespaceExpression: isJSXWhitespaceExpression$1 , isLastStatement: isLastStatement$1 , isLiteral: isLiteral$1 , isLongCurriedCallExpression: isLongCurriedCallExpression$1 , isMeaningfulJSXText: isMeaningfulJSXText$1 , isMemberExpressionChain: isMemberExpressionChain$1 , isMemberish: isMemberish$1 , isNgForOf: isNgForOf$1 , isNumericLiteral: isNumericLiteral$1 , isObjectType: isObjectType$1 , isObjectTypePropertyAFunction: isObjectTypePropertyAFunction$1 , isSimpleCallArgument: isSimpleCallArgument$1 , isSimpleFlowType: isSimpleFlowType$1 , isSimpleTemplateLiteral: isSimpleTemplateLiteral$1 , isStringLiteral: isStringLiteral$1 , isStringPropSafeToCoerceToIdentifier: isStringPropSafeToCoerceToIdentifier$1 , isTemplateOnItsOwnLine: isTemplateOnItsOwnLine$1 , isTestCall: isTestCall$1 , isTheOnlyJSXElementInMarkdown: isTheOnlyJSXElementInMarkdown$1 , isTSXFile: isTSXFile$1 , isTypeAnnotationAFunction: isTypeAnnotationAFunction$1 , matchJsxWhitespaceRegex: matchJsxWhitespaceRegex$1 , needsHardlineAfterDanglingComment: needsHardlineAfterDanglingComment$1 , rawText: rawText$1 , returnArgumentHasLeadingComment: returnArgumentHasLeadingComment$1  } = utils$5;
            const needsQuoteProps = /* @__PURE__ */ new WeakMap();
            const { builders: { concat: concat$d , join: join$9 , line: line$9 , hardline: hardline$9 , softline: softline$6 , literalline: literalline$4 , group: group$b , indent: indent$7 , align: align$1 , conditionalGroup: conditionalGroup$1 , fill: fill$4 , ifBreak: ifBreak$6 , breakParent: breakParent$3 , lineSuffixBoundary: lineSuffixBoundary$1 , addAlignmentToDoc: addAlignmentToDoc$2 , dedent: dedent$2  } , utils: { willBreak: willBreak$1 , isLineNext: isLineNext$1 , isEmpty: isEmpty$1 , removeLines: removeLines$2  } , printer: { printDocToString: printDocToString$2  }  } = document;
            let uid = 0;
            function shouldPrintComma$1(options2, level) {
                level = level || "es5";
                switch(options2.trailingComma){
                    case "all":
                        if (level === "all") {
                            return true;
                        }
                    case "es5":
                        if (level === "es5") {
                            return true;
                        }
                    case "none":
                    default:
                        return false;
                }
            }
            function genericPrint$3(path6, options2, printPath2, args) {
                const node = path6.getValue();
                let needsParens2 = false;
                const linesWithoutParens = printPathNoParens(path6, options2, printPath2, args);
                if (!node || isEmpty$1(linesWithoutParens)) {
                    return linesWithoutParens;
                }
                const parentExportDecl = getParentExportDeclaration$1(path6);
                const decorators = [];
                if (node.type === "ClassMethod" || node.type === "ClassPrivateMethod" || node.type === "ClassProperty" || node.type === "TSAbstractClassProperty" || node.type === "ClassPrivateProperty" || node.type === "MethodDefinition" || node.type === "TSAbstractMethodDefinition" || node.type === "TSDeclareMethod") ;
                else if (node.decorators && node.decorators.length > 0 && // If the parent node is an export declaration and the decorator
                // was written before the export, the export will be responsible
                // for printing the decorators.
                !(parentExportDecl && options2.locStart(parentExportDecl, {
                    ignoreDecorators: true
                }) > options2.locStart(node.decorators[0]))) {
                    const shouldBreak = node.type === "ClassExpression" || node.type === "ClassDeclaration" || hasNewlineBetweenOrAfterDecorators$1(node, options2);
                    const separator = shouldBreak ? hardline$9 : line$9;
                    path6.each((decoratorPath)=>{
                        let decorator = decoratorPath.getValue();
                        if (decorator.expression) {
                            decorator = decorator.expression;
                        } else {
                            decorator = decorator.callee;
                        }
                        decorators.push(printPath2(decoratorPath), separator);
                    }, "decorators");
                    if (parentExportDecl) {
                        decorators.unshift(hardline$9);
                    }
                } else if (isExportDeclaration$1(node) && node.declaration && node.declaration.decorators && node.declaration.decorators.length > 0 && // Only print decorators here if they were written before the export,
                // otherwise they are printed by the node.declaration
                options2.locStart(node, {
                    ignoreDecorators: true
                }) > options2.locStart(node.declaration.decorators[0])) {
                    path6.each((decoratorPath)=>{
                        const decorator = decoratorPath.getValue();
                        const prefix = decorator.type === "Decorator" ? "" : "@";
                        decorators.push(prefix, printPath2(decoratorPath), hardline$9);
                    }, "declaration", "decorators");
                } else {
                    needsParens2 = needsParens_1(path6, options2);
                }
                const parts = [];
                if (needsParens2) {
                    parts.unshift("(");
                }
                parts.push(linesWithoutParens);
                if (needsParens2) {
                    const node2 = path6.getValue();
                    if (hasFlowShorthandAnnotationComment$2(node2)) {
                        parts.push(" /*");
                        parts.push(node2.trailingComments[0].value.trimStart());
                        parts.push("*/");
                        node2.trailingComments[0].printed = true;
                    }
                    parts.push(")");
                }
                if (decorators.length > 0) {
                    return group$b(concat$d(decorators.concat(parts)));
                }
                return concat$d(parts);
            }
            function printDecorators(path6, options2, print2) {
                const node = path6.getValue();
                return group$b(concat$d([
                    join$9(line$9, path6.map(print2, "decorators")),
                    hasNewlineBetweenOrAfterDecorators$1(node, options2) ? hardline$9 : line$9
                ]));
            }
            function printTernaryOperator(path6, options2, print2, operatorOptions) {
                const node = path6.getValue();
                const consequentNode = node[operatorOptions.consequentNodePropertyName];
                const alternateNode = node[operatorOptions.alternateNodePropertyName];
                const parts = [];
                let jsxMode = false;
                const parent = path6.getParentNode();
                const isParentTest = parent.type === operatorOptions.conditionalNodeType && operatorOptions.testNodePropertyNames.some((prop)=>parent[prop] === node);
                let forceNoIndent = parent.type === operatorOptions.conditionalNodeType && !isParentTest;
                let currentParent;
                let previousParent;
                let i = 0;
                do {
                    previousParent = currentParent || node;
                    currentParent = path6.getParentNode(i);
                    i++;
                }while (currentParent && currentParent.type === operatorOptions.conditionalNodeType && operatorOptions.testNodePropertyNames.every((prop)=>currentParent[prop] !== previousParent))
                const firstNonConditionalParent = currentParent || parent;
                const lastConditionalParent = previousParent;
                if (operatorOptions.shouldCheckJsx && (isJSXNode$1(node[operatorOptions.testNodePropertyNames[0]]) || isJSXNode$1(consequentNode) || isJSXNode$1(alternateNode) || conditionalExpressionChainContainsJSX$1(lastConditionalParent))) {
                    jsxMode = true;
                    forceNoIndent = true;
                    const wrap2 = (doc2)=>concat$d([
                            ifBreak$6("(", ""),
                            indent$7(concat$d([
                                softline$6,
                                doc2
                            ])),
                            softline$6,
                            ifBreak$6(")", "")
                        ]);
                    const isNil = (node2)=>node2.type === "NullLiteral" || node2.type === "Literal" && node2.value === null || node2.type === "Identifier" && node2.name === "undefined";
                    parts.push(" ? ", isNil(consequentNode) ? path6.call(print2, operatorOptions.consequentNodePropertyName) : wrap2(path6.call(print2, operatorOptions.consequentNodePropertyName)), " : ", alternateNode.type === operatorOptions.conditionalNodeType || isNil(alternateNode) ? path6.call(print2, operatorOptions.alternateNodePropertyName) : wrap2(path6.call(print2, operatorOptions.alternateNodePropertyName)));
                } else {
                    const part = concat$d([
                        line$9,
                        "? ",
                        consequentNode.type === operatorOptions.conditionalNodeType ? ifBreak$6("", "(") : "",
                        align$1(2, path6.call(print2, operatorOptions.consequentNodePropertyName)),
                        consequentNode.type === operatorOptions.conditionalNodeType ? ifBreak$6("", ")") : "",
                        line$9,
                        ": ",
                        alternateNode.type === operatorOptions.conditionalNodeType ? path6.call(print2, operatorOptions.alternateNodePropertyName) : align$1(2, path6.call(print2, operatorOptions.alternateNodePropertyName))
                    ]);
                    parts.push(parent.type !== operatorOptions.conditionalNodeType || parent[operatorOptions.alternateNodePropertyName] === node || isParentTest ? part : options2.useTabs ? dedent$2(indent$7(part)) : align$1(Math.max(0, options2.tabWidth - 2), part));
                }
                const maybeGroup = (doc2)=>parent === firstNonConditionalParent ? group$b(doc2) : doc2;
                const breakClosingParen = !jsxMode && (parent.type === "MemberExpression" || parent.type === "OptionalMemberExpression" || parent.type === "NGPipeExpression" && parent.left === node) && !parent.computed;
                const result = maybeGroup(concat$d([].concat(((testDoc)=>/**
           *     a
           *       ? b
           *       : multiline
           *         test
           *         node
           *       ^^ align(2)
           *       ? d
           *       : e
           */ parent.type === operatorOptions.conditionalNodeType && parent[operatorOptions.alternateNodePropertyName] === node ? align$1(2, testDoc) : testDoc)(concat$d(operatorOptions.beforeParts())), forceNoIndent ? concat$d(parts) : indent$7(concat$d(parts)), operatorOptions.afterParts(breakClosingParen))));
                return isParentTest ? group$b(concat$d([
                    indent$7(concat$d([
                        softline$6,
                        result
                    ])),
                    softline$6
                ])) : result;
            }
            function printPathNoParens(path6, options2, print2, args) {
                const n = path6.getValue();
                const semi = options2.semi ? ";" : "";
                if (!n) {
                    return "";
                }
                if (typeof n === "string") {
                    return n;
                }
                const htmlBinding2 = printHtmlBinding$1(path6, options2, print2);
                if (htmlBinding2) {
                    return htmlBinding2;
                }
                let parts = [];
                switch(n.type){
                    case "JsExpressionRoot":
                        return path6.call(print2, "node");
                    case "JsonRoot":
                        return concat$d([
                            path6.call(print2, "node"),
                            hardline$9
                        ]);
                    case "File":
                        if (n.program && n.program.interpreter) {
                            parts.push(path6.call((programPath)=>programPath.call(print2, "interpreter"), "program"));
                        }
                        parts.push(path6.call(print2, "program"));
                        return concat$d(parts);
                    case "Program":
                        if (n.directives) {
                            path6.each((childPath)=>{
                                parts.push(print2(childPath), semi, hardline$9);
                                if (isNextLineEmpty$4(options2.originalText, childPath.getValue(), options2.locEnd)) {
                                    parts.push(hardline$9);
                                }
                            }, "directives");
                        }
                        parts.push(path6.call((bodyPath)=>{
                            return printStatementSequence(bodyPath, options2, print2);
                        }, "body"));
                        parts.push(comments.printDanglingComments(path6, options2, /* sameIndent */ true));
                        if (!n.body.every(({ type: type2  })=>type2 === "EmptyStatement") || n.comments) {
                            parts.push(hardline$9);
                        }
                        return concat$d(parts);
                    case "EmptyStatement":
                        return "";
                    case "ExpressionStatement":
                        if (n.directive) {
                            return concat$d([
                                nodeStr(n.expression, options2, true),
                                semi
                            ]);
                        }
                        if (options2.parser === "__vue_event_binding") {
                            const parent = path6.getParentNode();
                            if (parent.type === "Program" && parent.body.length === 1 && parent.body[0] === n) {
                                return concat$d([
                                    path6.call(print2, "expression"),
                                    isVueEventBindingExpression$3(n.expression) ? ";" : ""
                                ]);
                            }
                        }
                        return concat$d([
                            path6.call(print2, "expression"),
                            isTheOnlyJSXElementInMarkdown$1(options2, path6) ? "" : semi
                        ]);
                    case "ParenthesizedExpression":
                        {
                            const shouldHug = !n.expression.comments;
                            if (shouldHug) {
                                return concat$d([
                                    "(",
                                    path6.call(print2, "expression"),
                                    ")"
                                ]);
                            }
                            return group$b(concat$d([
                                "(",
                                indent$7(concat$d([
                                    softline$6,
                                    path6.call(print2, "expression")
                                ])),
                                softline$6,
                                ")"
                            ]));
                        }
                    case "AssignmentExpression":
                        return printAssignment(n.left, path6.call(print2, "left"), concat$d([
                            " ",
                            n.operator
                        ]), n.right, path6.call(print2, "right"), options2);
                    case "BinaryExpression":
                    case "LogicalExpression":
                    case "NGPipeExpression":
                        {
                            const parent = path6.getParentNode();
                            const parentParent = path6.getParentNode(1);
                            const isInsideParenthesis = n !== parent.body && (parent.type === "IfStatement" || parent.type === "WhileStatement" || parent.type === "SwitchStatement" || parent.type === "DoWhileStatement");
                            const parts2 = printBinaryishExpressions(path6, print2, options2, /* isNested */ false, isInsideParenthesis);
                            if (isInsideParenthesis) {
                                return concat$d(parts2);
                            }
                            if ((parent.type === "CallExpression" || parent.type === "OptionalCallExpression") && parent.callee === n || parent.type === "UnaryExpression" || (parent.type === "MemberExpression" || parent.type === "OptionalMemberExpression") && !parent.computed) {
                                return group$b(concat$d([
                                    indent$7(concat$d([
                                        softline$6,
                                        concat$d(parts2)
                                    ])),
                                    softline$6
                                ]));
                            }
                            const shouldNotIndent = parent.type === "ReturnStatement" || parent.type === "ThrowStatement" || parent.type === "JSXExpressionContainer" && parentParent.type === "JSXAttribute" || n.operator !== "|" && parent.type === "JsExpressionRoot" || n.type !== "NGPipeExpression" && (parent.type === "NGRoot" && options2.parser === "__ng_binding" || parent.type === "NGMicrosyntaxExpression" && parentParent.type === "NGMicrosyntax" && parentParent.body.length === 1) || n === parent.body && parent.type === "ArrowFunctionExpression" || n !== parent.body && parent.type === "ForStatement" || parent.type === "ConditionalExpression" && parentParent.type !== "ReturnStatement" && parentParent.type !== "ThrowStatement" && parentParent.type !== "CallExpression" && parentParent.type !== "OptionalCallExpression" || parent.type === "TemplateLiteral";
                            const shouldIndentIfInlining = parent.type === "AssignmentExpression" || parent.type === "VariableDeclarator" || parent.type === "ClassProperty" || parent.type === "TSAbstractClassProperty" || parent.type === "ClassPrivateProperty" || parent.type === "ObjectProperty" || parent.type === "Property";
                            const samePrecedenceSubExpression = isBinaryish$1(n.left) && shouldFlatten$1(n.operator, n.left.operator);
                            if (shouldNotIndent || shouldInlineLogicalExpression(n) && !samePrecedenceSubExpression || !shouldInlineLogicalExpression(n) && shouldIndentIfInlining) {
                                return group$b(concat$d(parts2));
                            }
                            if (parts2.length === 0) {
                                return "";
                            }
                            const hasJSX = isJSXNode$1(n.right);
                            const rest = concat$d(hasJSX ? parts2.slice(1, -1) : parts2.slice(1));
                            const groupId = Symbol("logicalChain-" + ++uid);
                            const chain = group$b(concat$d([
                                // Don't include the initial expression in the indentation
                                // level. The first item is guaranteed to be the first
                                // left-most expression.
                                parts2.length > 0 ? parts2[0] : "",
                                indent$7(rest)
                            ]), {
                                id: groupId
                            });
                            if (!hasJSX) {
                                return chain;
                            }
                            const jsxPart = getLast$3(parts2);
                            return group$b(concat$d([
                                chain,
                                ifBreak$6(indent$7(jsxPart), jsxPart, {
                                    groupId
                                })
                            ]));
                        }
                    case "AssignmentPattern":
                        return concat$d([
                            path6.call(print2, "left"),
                            " = ",
                            path6.call(print2, "right")
                        ]);
                    case "TSTypeAssertion":
                        {
                            const shouldBreakAfterCast = !(n.expression.type === "ArrayExpression" || n.expression.type === "ObjectExpression");
                            const castGroup = group$b(concat$d([
                                "<",
                                indent$7(concat$d([
                                    softline$6,
                                    path6.call(print2, "typeAnnotation")
                                ])),
                                softline$6,
                                ">"
                            ]));
                            const exprContents = concat$d([
                                ifBreak$6("("),
                                indent$7(concat$d([
                                    softline$6,
                                    path6.call(print2, "expression")
                                ])),
                                softline$6,
                                ifBreak$6(")")
                            ]);
                            if (shouldBreakAfterCast) {
                                return conditionalGroup$1([
                                    concat$d([
                                        castGroup,
                                        path6.call(print2, "expression")
                                    ]),
                                    concat$d([
                                        castGroup,
                                        group$b(exprContents, {
                                            shouldBreak: true
                                        })
                                    ]),
                                    concat$d([
                                        castGroup,
                                        path6.call(print2, "expression")
                                    ])
                                ]);
                            }
                            return group$b(concat$d([
                                castGroup,
                                path6.call(print2, "expression")
                            ]));
                        }
                    case "OptionalMemberExpression":
                    case "MemberExpression":
                        {
                            const parent = path6.getParentNode();
                            let firstNonMemberParent;
                            let i = 0;
                            do {
                                firstNonMemberParent = path6.getParentNode(i);
                                i++;
                            }while (firstNonMemberParent && (firstNonMemberParent.type === "MemberExpression" || firstNonMemberParent.type === "OptionalMemberExpression" || firstNonMemberParent.type === "TSNonNullExpression"))
                            const shouldInline = firstNonMemberParent && (firstNonMemberParent.type === "NewExpression" || firstNonMemberParent.type === "BindExpression" || firstNonMemberParent.type === "VariableDeclarator" && firstNonMemberParent.id.type !== "Identifier" || firstNonMemberParent.type === "AssignmentExpression" && firstNonMemberParent.left.type !== "Identifier") || n.computed || n.object.type === "Identifier" && n.property.type === "Identifier" && parent.type !== "MemberExpression" && parent.type !== "OptionalMemberExpression";
                            return concat$d([
                                path6.call(print2, "object"),
                                shouldInline ? printMemberLookup(path6, options2, print2) : group$b(indent$7(concat$d([
                                    softline$6,
                                    printMemberLookup(path6, options2, print2)
                                ])))
                            ]);
                        }
                    case "MetaProperty":
                        return concat$d([
                            path6.call(print2, "meta"),
                            ".",
                            path6.call(print2, "property")
                        ]);
                    case "BindExpression":
                        if (n.object) {
                            parts.push(path6.call(print2, "object"));
                        }
                        parts.push(group$b(indent$7(concat$d([
                            softline$6,
                            printBindExpressionCallee(path6, options2, print2)
                        ]))));
                        return concat$d(parts);
                    case "Identifier":
                        {
                            return concat$d([
                                n.name,
                                printOptionalToken(path6),
                                printTypeAnnotation(path6, options2, print2)
                            ]);
                        }
                    case "V8IntrinsicIdentifier":
                        return concat$d([
                            "%",
                            n.name
                        ]);
                    case "SpreadElement":
                    case "SpreadElementPattern":
                    case "SpreadProperty":
                    case "SpreadPropertyPattern":
                    case "RestElement":
                    case "ObjectTypeSpreadProperty":
                        return concat$d([
                            "...",
                            path6.call(print2, "argument"),
                            printTypeAnnotation(path6, options2, print2)
                        ]);
                    case "FunctionDeclaration":
                    case "FunctionExpression":
                        parts.push(printFunctionDeclaration(path6, print2, options2));
                        if (!n.body) {
                            parts.push(semi);
                        }
                        return concat$d(parts);
                    case "ArrowFunctionExpression":
                        {
                            if (n.async) {
                                parts.push("async ");
                            }
                            if (shouldPrintParamsWithoutParens(path6, options2)) {
                                parts.push(path6.call(print2, "params", 0));
                            } else {
                                parts.push(group$b(concat$d([
                                    printFunctionParams(path6, print2, options2, /* expandLast */ args && (args.expandLastArg || args.expandFirstArg), /* printTypeParams */ true),
                                    printReturnType(path6, print2, options2)
                                ])));
                            }
                            const dangling = comments.printDanglingComments(path6, options2, /* sameIndent */ true, (comment)=>{
                                const nextCharacter = getNextNonSpaceNonCommentCharacterIndex$3(options2.originalText, comment, options2.locEnd);
                                return options2.originalText.slice(nextCharacter, nextCharacter + 2) === "=>";
                            });
                            if (dangling) {
                                parts.push(" ", dangling);
                            }
                            parts.push(" =>");
                            const body2 = path6.call((bodyPath)=>print2(bodyPath, args), "body");
                            if (!hasLeadingOwnLineComment$1(options2.originalText, n.body, options2) && (n.body.type === "ArrayExpression" || n.body.type === "ObjectExpression" || n.body.type === "BlockStatement" || isJSXNode$1(n.body) || isTemplateOnItsOwnLine$1(n.body, options2.originalText, options2) || n.body.type === "ArrowFunctionExpression" || n.body.type === "DoExpression")) {
                                return group$b(concat$d([
                                    concat$d(parts),
                                    " ",
                                    body2
                                ]));
                            }
                            if (n.body.type === "SequenceExpression") {
                                return group$b(concat$d([
                                    concat$d(parts),
                                    group$b(concat$d([
                                        " (",
                                        indent$7(concat$d([
                                            softline$6,
                                            body2
                                        ])),
                                        softline$6,
                                        ")"
                                    ]))
                                ]));
                            }
                            const shouldAddSoftLine = (args && args.expandLastArg || path6.getParentNode().type === "JSXExpressionContainer") && !(n.comments && n.comments.length);
                            const printTrailingComma = args && args.expandLastArg && shouldPrintComma$1(options2, "all");
                            const shouldAddParens = n.body.type === "ConditionalExpression" && !startsWithNoLookaheadToken$1(n.body, /* forbidFunctionAndClass */ false);
                            return group$b(concat$d([
                                concat$d(parts),
                                group$b(concat$d([
                                    indent$7(concat$d([
                                        line$9,
                                        shouldAddParens ? ifBreak$6("", "(") : "",
                                        body2,
                                        shouldAddParens ? ifBreak$6("", ")") : ""
                                    ])),
                                    shouldAddSoftLine ? concat$d([
                                        ifBreak$6(printTrailingComma ? "," : ""),
                                        softline$6
                                    ]) : ""
                                ]))
                            ]));
                        }
                    case "YieldExpression":
                        parts.push("yield");
                        if (n.delegate) {
                            parts.push("*");
                        }
                        if (n.argument) {
                            parts.push(" ", path6.call(print2, "argument"));
                        }
                        return concat$d(parts);
                    case "AwaitExpression":
                        {
                            parts.push("await ", path6.call(print2, "argument"));
                            const parent = path6.getParentNode();
                            if ((parent.type === "CallExpression" || parent.type === "OptionalCallExpression") && parent.callee === n || (parent.type === "MemberExpression" || parent.type === "OptionalMemberExpression") && parent.object === n) {
                                return group$b(concat$d([
                                    indent$7(concat$d([
                                        softline$6,
                                        concat$d(parts)
                                    ])),
                                    softline$6
                                ]));
                            }
                            return concat$d(parts);
                        }
                    case "ImportSpecifier":
                        if (n.importKind) {
                            parts.push(path6.call(print2, "importKind"), " ");
                        }
                        parts.push(path6.call(print2, "imported"));
                        if (n.local && n.local.name !== n.imported.name) {
                            parts.push(" as ", path6.call(print2, "local"));
                        }
                        return concat$d(parts);
                    case "ExportSpecifier":
                        parts.push(path6.call(print2, "local"));
                        if (n.exported && n.exported.name !== n.local.name) {
                            parts.push(" as ", path6.call(print2, "exported"));
                        }
                        return concat$d(parts);
                    case "ImportNamespaceSpecifier":
                        parts.push("* as ");
                        parts.push(path6.call(print2, "local"));
                        return concat$d(parts);
                    case "ImportDefaultSpecifier":
                        return path6.call(print2, "local");
                    case "TSExportAssignment":
                        return concat$d([
                            "export = ",
                            path6.call(print2, "expression"),
                            semi
                        ]);
                    case "ExportDefaultDeclaration":
                    case "ExportNamedDeclaration":
                        return printExportDeclaration(path6, options2, print2);
                    case "ExportAllDeclaration":
                        parts.push("export ");
                        if (n.exportKind === "type") {
                            parts.push("type ");
                        }
                        parts.push("* ");
                        if (n.exported) {
                            parts.push("as ", path6.call(print2, "exported"), " ");
                        }
                        parts.push("from ", path6.call(print2, "source"), semi);
                        return concat$d(parts);
                    case "ExportNamespaceSpecifier":
                    case "ExportDefaultSpecifier":
                        return path6.call(print2, "exported");
                    case "ImportDeclaration":
                        {
                            parts.push("import ");
                            if (n.importKind && n.importKind !== "value") {
                                parts.push(n.importKind + " ");
                            }
                            const standalones = [];
                            const grouped = [];
                            if (n.specifiers && n.specifiers.length > 0) {
                                path6.each((specifierPath)=>{
                                    const value1 = specifierPath.getValue();
                                    if (value1.type === "ImportDefaultSpecifier" || value1.type === "ImportNamespaceSpecifier") {
                                        standalones.push(print2(specifierPath));
                                    } else {
                                        grouped.push(print2(specifierPath));
                                    }
                                }, "specifiers");
                                if (standalones.length > 0) {
                                    parts.push(join$9(", ", standalones));
                                }
                                if (standalones.length > 0 && grouped.length > 0) {
                                    parts.push(", ");
                                }
                                if (grouped.length === 1 && standalones.length === 0 && n.specifiers && !n.specifiers.some((node)=>node.comments)) {
                                    parts.push(concat$d([
                                        "{",
                                        options2.bracketSpacing ? " " : "",
                                        concat$d(grouped),
                                        options2.bracketSpacing ? " " : "",
                                        "}"
                                    ]));
                                } else if (grouped.length >= 1) {
                                    parts.push(group$b(concat$d([
                                        "{",
                                        indent$7(concat$d([
                                            options2.bracketSpacing ? line$9 : softline$6,
                                            join$9(concat$d([
                                                ",",
                                                line$9
                                            ]), grouped)
                                        ])),
                                        ifBreak$6(shouldPrintComma$1(options2) ? "," : ""),
                                        options2.bracketSpacing ? line$9 : softline$6,
                                        "}"
                                    ])));
                                }
                                parts.push(" from ");
                            } else if (n.importKind && n.importKind === "type" || // import {} from 'x'
                            /{\s*}/.test(options2.originalText.slice(options2.locStart(n), options2.locStart(n.source)))) {
                                parts.push("{} from ");
                            }
                            parts.push(path6.call(print2, "source"), semi);
                            return concat$d(parts);
                        }
                    case "Import":
                        return "import";
                    case "TSModuleBlock":
                    case "BlockStatement":
                        {
                            const naked = path6.call((bodyPath)=>{
                                return printStatementSequence(bodyPath, options2, print2);
                            }, "body");
                            const hasContent = n.body.find((node)=>node.type !== "EmptyStatement");
                            const hasDirectives = n.directives && n.directives.length > 0;
                            const parent = path6.getParentNode();
                            const parentParent = path6.getParentNode(1);
                            if (!hasContent && !hasDirectives && !hasDanglingComments$1(n) && (parent.type === "ArrowFunctionExpression" || parent.type === "FunctionExpression" || parent.type === "FunctionDeclaration" || parent.type === "ObjectMethod" || parent.type === "ClassMethod" || parent.type === "ClassPrivateMethod" || parent.type === "ForStatement" || parent.type === "WhileStatement" || parent.type === "DoWhileStatement" || parent.type === "DoExpression" || parent.type === "CatchClause" && !parentParent.finalizer || parent.type === "TSModuleDeclaration")) {
                                return "{}";
                            }
                            parts.push("{");
                            if (hasDirectives) {
                                path6.each((childPath)=>{
                                    parts.push(indent$7(concat$d([
                                        hardline$9,
                                        print2(childPath),
                                        semi
                                    ])));
                                    if (isNextLineEmpty$4(options2.originalText, childPath.getValue(), options2.locEnd)) {
                                        parts.push(hardline$9);
                                    }
                                }, "directives");
                            }
                            if (hasContent) {
                                parts.push(indent$7(concat$d([
                                    hardline$9,
                                    naked
                                ])));
                            }
                            parts.push(comments.printDanglingComments(path6, options2));
                            parts.push(hardline$9, "}");
                            return concat$d(parts);
                        }
                    case "ReturnStatement":
                        return concat$d([
                            "return",
                            printReturnAndThrowArgument(path6, options2, print2)
                        ]);
                    case "NewExpression":
                    case "OptionalCallExpression":
                    case "CallExpression":
                        {
                            const isNew = n.type === "NewExpression";
                            const optional = printOptionalToken(path6);
                            if (// We want to keep CommonJS- and AMD-style require calls, and AMD-style
                            // define calls, as a unit.
                            // e.g. `define(["some/lib", (lib) => {`
                            !isNew && n.callee.type === "Identifier" && (n.callee.name === "require" || n.callee.name === "define") || // Template literals as single arguments
                            n.arguments.length === 1 && isTemplateOnItsOwnLine$1(n.arguments[0], options2.originalText, options2) || // Keep test declarations on a single line
                            // e.g. `it('long name', () => {`
                            !isNew && isTestCall$1(n, path6.getParentNode())) {
                                return concat$d([
                                    isNew ? "new " : "",
                                    path6.call(print2, "callee"),
                                    optional,
                                    printFunctionTypeParameters(path6, options2, print2),
                                    concat$d([
                                        "(",
                                        join$9(", ", path6.map(print2, "arguments")),
                                        ")"
                                    ])
                                ]);
                            }
                            const isIdentifierWithFlowAnnotation = n.callee.type === "Identifier" && hasFlowAnnotationComment$1(n.callee.trailingComments);
                            if (isIdentifierWithFlowAnnotation) {
                                n.callee.trailingComments[0].printed = true;
                            }
                            if (!isNew && isMemberish$1(n.callee) && !path6.call((path7)=>needsParens_1(path7, options2), "callee")) {
                                return printMemberChain(path6, options2, print2);
                            }
                            const contents = concat$d([
                                isNew ? "new " : "",
                                path6.call(print2, "callee"),
                                optional,
                                isIdentifierWithFlowAnnotation ? "/*:: ".concat(n.callee.trailingComments[0].value.slice(2).trim(), " */") : "",
                                printFunctionTypeParameters(path6, options2, print2),
                                printArgumentsList(path6, options2, print2)
                            ]);
                            if (isCallOrOptionalCallExpression$1(n.callee)) {
                                return group$b(contents);
                            }
                            return contents;
                        }
                    case "TSInterfaceDeclaration":
                        if (n.declare) {
                            parts.push("declare ");
                        }
                        parts.push(n.abstract ? "abstract " : "", printTypeScriptModifiers(path6, options2, print2), "interface ", path6.call(print2, "id"), n.typeParameters ? path6.call(print2, "typeParameters") : "", " ");
                        if (n.extends && n.extends.length) {
                            parts.push(group$b(indent$7(concat$d([
                                softline$6,
                                "extends ",
                                (n.extends.length === 1 ? identity$2 : indent$7)(join$9(concat$d([
                                    ",",
                                    line$9
                                ]), path6.map(print2, "extends"))),
                                " "
                            ]))));
                        }
                        parts.push(path6.call(print2, "body"));
                        return concat$d(parts);
                    case "ObjectTypeInternalSlot":
                        return concat$d([
                            n.static ? "static " : "",
                            "[[",
                            path6.call(print2, "id"),
                            "]]",
                            printOptionalToken(path6),
                            n.method ? "" : ": ",
                            path6.call(print2, "value")
                        ]);
                    case "ObjectExpression":
                    case "ObjectPattern":
                    case "ObjectTypeAnnotation":
                    case "TSInterfaceBody":
                    case "TSTypeLiteral":
                        {
                            let propertiesField;
                            if (n.type === "TSTypeLiteral") {
                                propertiesField = "members";
                            } else if (n.type === "TSInterfaceBody") {
                                propertiesField = "body";
                            } else {
                                propertiesField = "properties";
                            }
                            const isTypeAnnotation = n.type === "ObjectTypeAnnotation";
                            const fields = [];
                            if (isTypeAnnotation) {
                                fields.push("indexers", "callProperties", "internalSlots");
                            }
                            fields.push(propertiesField);
                            const firstProperty = fields.map((field)=>n[field][0]).sort((a3, b)=>options2.locStart(a3) - options2.locStart(b))[0];
                            const parent = path6.getParentNode(0);
                            const isFlowInterfaceLikeBody = isTypeAnnotation && parent && (parent.type === "InterfaceDeclaration" || parent.type === "DeclareInterface" || parent.type === "DeclareClass") && path6.getName() === "body";
                            const shouldBreak = n.type === "TSInterfaceBody" || isFlowInterfaceLikeBody || n.type === "ObjectPattern" && parent.type !== "FunctionDeclaration" && parent.type !== "FunctionExpression" && parent.type !== "ArrowFunctionExpression" && parent.type !== "ObjectMethod" && parent.type !== "ClassMethod" && parent.type !== "ClassPrivateMethod" && parent.type !== "AssignmentPattern" && parent.type !== "CatchClause" && n.properties.some((property)=>property.value && (property.value.type === "ObjectPattern" || property.value.type === "ArrayPattern")) || n.type !== "ObjectPattern" && firstProperty && hasNewlineInRange$3(options2.originalText, options2.locStart(n), options2.locStart(firstProperty));
                            const separator = isFlowInterfaceLikeBody ? ";" : n.type === "TSInterfaceBody" || n.type === "TSTypeLiteral" ? ifBreak$6(semi, ";") : ",";
                            const leftBrace = n.exact ? "{|" : "{";
                            const rightBrace = n.exact ? "|}" : "}";
                            const propsAndLoc = [];
                            fields.forEach((field)=>{
                                path6.each((childPath)=>{
                                    const node = childPath.getValue();
                                    propsAndLoc.push({
                                        node,
                                        printed: print2(childPath),
                                        loc: options2.locStart(node)
                                    });
                                }, field);
                            });
                            let separatorParts = [];
                            const props = propsAndLoc.sort((a3, b)=>a3.loc - b.loc).map((prop)=>{
                                const result = concat$d(separatorParts.concat(group$b(prop.printed)));
                                separatorParts = [
                                    separator,
                                    line$9
                                ];
                                if ((prop.node.type === "TSPropertySignature" || prop.node.type === "TSMethodSignature" || prop.node.type === "TSConstructSignatureDeclaration") && hasNodeIgnoreComment$2(prop.node)) {
                                    separatorParts.shift();
                                }
                                if (isNextLineEmpty$4(options2.originalText, prop.node, options2.locEnd)) {
                                    separatorParts.push(hardline$9);
                                }
                                return result;
                            });
                            if (n.inexact) {
                                let printed;
                                if (hasDanglingComments$1(n)) {
                                    const hasLineComments = !n.comments.every(comments$1.isBlockComment);
                                    const printedDanglingComments = comments.printDanglingComments(path6, options2, /* sameIndent */ true);
                                    printed = concat$d([
                                        printedDanglingComments,
                                        hasLineComments || hasNewline$5(options2.originalText, options2.locEnd(n.comments[n.comments.length - 1])) ? hardline$9 : line$9,
                                        "..."
                                    ]);
                                } else {
                                    printed = "...";
                                }
                                props.push(concat$d(separatorParts.concat(printed)));
                            }
                            const lastElem = getLast$3(n[propertiesField]);
                            const canHaveTrailingSeparator = !(n.inexact || lastElem && (lastElem.type === "RestElement" || hasNodeIgnoreComment$2(lastElem)));
                            let content;
                            if (props.length === 0) {
                                if (!hasDanglingComments$1(n)) {
                                    return concat$d([
                                        leftBrace,
                                        rightBrace,
                                        printTypeAnnotation(path6, options2, print2)
                                    ]);
                                }
                                content = group$b(concat$d([
                                    leftBrace,
                                    comments.printDanglingComments(path6, options2),
                                    softline$6,
                                    rightBrace,
                                    printOptionalToken(path6),
                                    printTypeAnnotation(path6, options2, print2)
                                ]));
                            } else {
                                content = concat$d([
                                    leftBrace,
                                    indent$7(concat$d([
                                        options2.bracketSpacing ? line$9 : softline$6,
                                        concat$d(props)
                                    ])),
                                    ifBreak$6(canHaveTrailingSeparator && (separator !== "," || shouldPrintComma$1(options2)) ? separator : ""),
                                    concat$d([
                                        options2.bracketSpacing ? line$9 : softline$6,
                                        rightBrace
                                    ]),
                                    printOptionalToken(path6),
                                    printTypeAnnotation(path6, options2, print2)
                                ]);
                            }
                            if (path6.match((node)=>node.type === "ObjectPattern" && !node.decorators, (node, name2, number2)=>shouldHugArguments(node) && (name2 === "params" || name2 === "parameters") && number2 === 0) || path6.match(shouldHugType, (node, name2)=>name2 === "typeAnnotation", (node, name2)=>name2 === "typeAnnotation", (node, name2, number2)=>shouldHugArguments(node) && (name2 === "params" || name2 === "parameters") && number2 === 0)) {
                                return content;
                            }
                            return group$b(content, {
                                shouldBreak
                            });
                        }
                    case "ObjectProperty":
                    case "Property":
                        if (n.method || n.kind === "get" || n.kind === "set") {
                            return printMethod(path6, options2, print2);
                        }
                        if (n.shorthand) {
                            parts.push(path6.call(print2, "value"));
                        } else {
                            parts.push(printAssignment(n.key, printPropertyKey(path6, options2, print2), ":", n.value, path6.call(print2, "value"), options2));
                        }
                        return concat$d(parts);
                    case "ClassMethod":
                    case "ClassPrivateMethod":
                    case "MethodDefinition":
                    case "TSAbstractMethodDefinition":
                    case "TSDeclareMethod":
                        if (n.decorators && n.decorators.length !== 0) {
                            parts.push(printDecorators(path6, options2, print2));
                        }
                        if (n.accessibility) {
                            parts.push(n.accessibility + " ");
                        }
                        if (n.static) {
                            parts.push("static ");
                        }
                        if (n.type === "TSAbstractMethodDefinition" || n.abstract) {
                            parts.push("abstract ");
                        }
                        parts.push(printMethod(path6, options2, print2));
                        return concat$d(parts);
                    case "ObjectMethod":
                        return printMethod(path6, options2, print2);
                    case "Decorator":
                        return concat$d([
                            "@",
                            path6.call(print2, "expression"),
                            path6.call(print2, "callee")
                        ]);
                    case "ArrayExpression":
                    case "ArrayPattern":
                        if (n.elements.length === 0) {
                            if (!hasDanglingComments$1(n)) {
                                parts.push("[]");
                            } else {
                                parts.push(group$b(concat$d([
                                    "[",
                                    comments.printDanglingComments(path6, options2),
                                    softline$6,
                                    "]"
                                ])));
                            }
                        } else {
                            const lastElem = getLast$3(n.elements);
                            const canHaveTrailingComma = !(lastElem && lastElem.type === "RestElement");
                            const needsForcedTrailingComma = canHaveTrailingComma && lastElem === null;
                            const shouldBreak = n.elements.length > 1 && n.elements.every((element, i, elements)=>{
                                const elementType = element && element.type;
                                if (elementType !== "ArrayExpression" && elementType !== "ObjectExpression") {
                                    return false;
                                }
                                const nextElement = elements[i + 1];
                                if (nextElement && elementType !== nextElement.type) {
                                    return false;
                                }
                                const itemsKey = elementType === "ArrayExpression" ? "elements" : "properties";
                                return element[itemsKey] && element[itemsKey].length > 1;
                            });
                            parts.push(group$b(concat$d([
                                "[",
                                indent$7(concat$d([
                                    softline$6,
                                    printArrayItems(path6, options2, "elements", print2)
                                ])),
                                needsForcedTrailingComma ? "," : "",
                                ifBreak$6(canHaveTrailingComma && !needsForcedTrailingComma && shouldPrintComma$1(options2) ? "," : ""),
                                comments.printDanglingComments(path6, options2, /* sameIndent */ true),
                                softline$6,
                                "]"
                            ]), {
                                shouldBreak
                            }));
                        }
                        parts.push(printOptionalToken(path6), printTypeAnnotation(path6, options2, print2));
                        return concat$d(parts);
                    case "SequenceExpression":
                        {
                            const parent = path6.getParentNode(0);
                            if (parent.type === "ExpressionStatement" || parent.type === "ForStatement") {
                                const parts2 = [];
                                path6.each((p2)=>{
                                    if (p2.getName() === 0) {
                                        parts2.push(print2(p2));
                                    } else {
                                        parts2.push(",", indent$7(concat$d([
                                            line$9,
                                            print2(p2)
                                        ])));
                                    }
                                }, "expressions");
                                return group$b(concat$d(parts2));
                            }
                            return group$b(concat$d([
                                join$9(concat$d([
                                    ",",
                                    line$9
                                ]), path6.map(print2, "expressions"))
                            ]));
                        }
                    case "ThisExpression":
                        return "this";
                    case "Super":
                        return "super";
                    case "NullLiteral":
                        return "null";
                    case "RegExpLiteral":
                        return printRegex(n);
                    case "NumericLiteral":
                        return printNumber$2(n.extra.raw);
                    case "BigIntLiteral":
                        return (n.bigint || (n.extra ? n.extra.raw : n.raw)).toLowerCase();
                    case "BooleanLiteral":
                    case "StringLiteral":
                    case "Literal":
                        {
                            if (n.regex) {
                                return printRegex(n.regex);
                            }
                            if (typeof n.value === "number") {
                                return printNumber$2(n.raw);
                            }
                            if (typeof n.value !== "string") {
                                return "" + n.value;
                            }
                            const grandParent = path6.getParentNode(1);
                            const isTypeScriptDirective = options2.parser === "typescript" && typeof n.value === "string" && grandParent && (grandParent.type === "Program" || grandParent.type === "BlockStatement");
                            return nodeStr(n, options2, isTypeScriptDirective);
                        }
                    case "Directive":
                        return path6.call(print2, "value");
                    case "DirectiveLiteral":
                        return nodeStr(n, options2);
                    case "UnaryExpression":
                        parts.push(n.operator);
                        if (/[a-z]$/.test(n.operator)) {
                            parts.push(" ");
                        }
                        if (n.argument.comments && n.argument.comments.length > 0) {
                            parts.push(group$b(concat$d([
                                "(",
                                indent$7(concat$d([
                                    softline$6,
                                    path6.call(print2, "argument")
                                ])),
                                softline$6,
                                ")"
                            ])));
                        } else {
                            parts.push(path6.call(print2, "argument"));
                        }
                        return concat$d(parts);
                    case "UpdateExpression":
                        parts.push(path6.call(print2, "argument"), n.operator);
                        if (n.prefix) {
                            parts.reverse();
                        }
                        return concat$d(parts);
                    case "ConditionalExpression":
                        return printTernaryOperator(path6, options2, print2, {
                            beforeParts: ()=>[
                                    path6.call(print2, "test")
                                ],
                            afterParts: (breakClosingParen)=>[
                                    breakClosingParen ? softline$6 : ""
                                ],
                            shouldCheckJsx: true,
                            conditionalNodeType: "ConditionalExpression",
                            consequentNodePropertyName: "consequent",
                            alternateNodePropertyName: "alternate",
                            testNodePropertyNames: [
                                "test"
                            ]
                        });
                    case "VariableDeclaration":
                        {
                            const printed = path6.map((childPath)=>{
                                return print2(childPath);
                            }, "declarations");
                            const parentNode = path6.getParentNode();
                            const isParentForLoop = parentNode.type === "ForStatement" || parentNode.type === "ForInStatement" || parentNode.type === "ForOfStatement";
                            const hasValue = n.declarations.some((decl)=>decl.init);
                            let firstVariable;
                            if (printed.length === 1 && !n.declarations[0].comments) {
                                firstVariable = printed[0];
                            } else if (printed.length > 0) {
                                firstVariable = indent$7(printed[0]);
                            }
                            parts = [
                                n.declare ? "declare " : "",
                                n.kind,
                                firstVariable ? concat$d([
                                    " ",
                                    firstVariable
                                ]) : "",
                                indent$7(concat$d(printed.slice(1).map((p2)=>concat$d([
                                        ",",
                                        hasValue && !isParentForLoop ? hardline$9 : line$9,
                                        p2
                                    ]))))
                            ];
                            if (!(isParentForLoop && parentNode.body !== n)) {
                                parts.push(semi);
                            }
                            return group$b(concat$d(parts));
                        }
                    case "TSTypeAliasDeclaration":
                        {
                            if (n.declare) {
                                parts.push("declare ");
                            }
                            const printed = printAssignmentRight(n.id, n.typeAnnotation, n.typeAnnotation && path6.call(print2, "typeAnnotation"), options2);
                            parts.push("type ", path6.call(print2, "id"), path6.call(print2, "typeParameters"), " =", printed, semi);
                            return group$b(concat$d(parts));
                        }
                    case "VariableDeclarator":
                        return printAssignment(n.id, path6.call(print2, "id"), " =", n.init, n.init && path6.call(print2, "init"), options2);
                    case "WithStatement":
                        return group$b(concat$d([
                            "with (",
                            path6.call(print2, "object"),
                            ")",
                            adjustClause(n.body, path6.call(print2, "body"))
                        ]));
                    case "IfStatement":
                        {
                            const con = adjustClause(n.consequent, path6.call(print2, "consequent"));
                            const opening = group$b(concat$d([
                                "if (",
                                group$b(concat$d([
                                    indent$7(concat$d([
                                        softline$6,
                                        path6.call(print2, "test")
                                    ])),
                                    softline$6
                                ])),
                                ")",
                                con
                            ]));
                            parts.push(opening);
                            if (n.alternate) {
                                const commentOnOwnLine = hasTrailingComment$1(n.consequent) && n.consequent.comments.some((comment)=>comment.trailing && !comments$1.isBlockComment(comment)) || needsHardlineAfterDanglingComment$1(n);
                                const elseOnSameLine = n.consequent.type === "BlockStatement" && !commentOnOwnLine;
                                parts.push(elseOnSameLine ? " " : hardline$9);
                                if (hasDanglingComments$1(n)) {
                                    parts.push(comments.printDanglingComments(path6, options2, true), commentOnOwnLine ? hardline$9 : " ");
                                }
                                parts.push("else", group$b(adjustClause(n.alternate, path6.call(print2, "alternate"), n.alternate.type === "IfStatement")));
                            }
                            return concat$d(parts);
                        }
                    case "ForStatement":
                        {
                            const body2 = adjustClause(n.body, path6.call(print2, "body"));
                            const dangling = comments.printDanglingComments(path6, options2, /* sameLine */ true);
                            const printedComments = dangling ? concat$d([
                                dangling,
                                softline$6
                            ]) : "";
                            if (!n.init && !n.test && !n.update) {
                                return concat$d([
                                    printedComments,
                                    group$b(concat$d([
                                        "for (;;)",
                                        body2
                                    ]))
                                ]);
                            }
                            return concat$d([
                                printedComments,
                                group$b(concat$d([
                                    "for (",
                                    group$b(concat$d([
                                        indent$7(concat$d([
                                            softline$6,
                                            path6.call(print2, "init"),
                                            ";",
                                            line$9,
                                            path6.call(print2, "test"),
                                            ";",
                                            line$9,
                                            path6.call(print2, "update")
                                        ])),
                                        softline$6
                                    ])),
                                    ")",
                                    body2
                                ]))
                            ]);
                        }
                    case "WhileStatement":
                        return group$b(concat$d([
                            "while (",
                            group$b(concat$d([
                                indent$7(concat$d([
                                    softline$6,
                                    path6.call(print2, "test")
                                ])),
                                softline$6
                            ])),
                            ")",
                            adjustClause(n.body, path6.call(print2, "body"))
                        ]));
                    case "ForInStatement":
                        return group$b(concat$d([
                            n.each ? "for each (" : "for (",
                            path6.call(print2, "left"),
                            " in ",
                            path6.call(print2, "right"),
                            ")",
                            adjustClause(n.body, path6.call(print2, "body"))
                        ]));
                    case "ForOfStatement":
                        return group$b(concat$d([
                            "for",
                            n.await ? " await" : "",
                            " (",
                            path6.call(print2, "left"),
                            " of ",
                            path6.call(print2, "right"),
                            ")",
                            adjustClause(n.body, path6.call(print2, "body"))
                        ]));
                    case "DoWhileStatement":
                        {
                            const clause = adjustClause(n.body, path6.call(print2, "body"));
                            const doBody = group$b(concat$d([
                                "do",
                                clause
                            ]));
                            parts = [
                                doBody
                            ];
                            if (n.body.type === "BlockStatement") {
                                parts.push(" ");
                            } else {
                                parts.push(hardline$9);
                            }
                            parts.push("while (");
                            parts.push(group$b(concat$d([
                                indent$7(concat$d([
                                    softline$6,
                                    path6.call(print2, "test")
                                ])),
                                softline$6
                            ])), ")", semi);
                            return concat$d(parts);
                        }
                    case "DoExpression":
                        return concat$d([
                            "do ",
                            path6.call(print2, "body")
                        ]);
                    case "BreakStatement":
                        parts.push("break");
                        if (n.label) {
                            parts.push(" ", path6.call(print2, "label"));
                        }
                        parts.push(semi);
                        return concat$d(parts);
                    case "ContinueStatement":
                        parts.push("continue");
                        if (n.label) {
                            parts.push(" ", path6.call(print2, "label"));
                        }
                        parts.push(semi);
                        return concat$d(parts);
                    case "LabeledStatement":
                        if (n.body.type === "EmptyStatement") {
                            return concat$d([
                                path6.call(print2, "label"),
                                ":;"
                            ]);
                        }
                        return concat$d([
                            path6.call(print2, "label"),
                            ": ",
                            path6.call(print2, "body")
                        ]);
                    case "TryStatement":
                        return concat$d([
                            "try ",
                            path6.call(print2, "block"),
                            n.handler ? concat$d([
                                " ",
                                path6.call(print2, "handler")
                            ]) : "",
                            n.finalizer ? concat$d([
                                " finally ",
                                path6.call(print2, "finalizer")
                            ]) : ""
                        ]);
                    case "CatchClause":
                        if (n.param) {
                            const hasComments2 = n.param.comments && n.param.comments.some((comment)=>!comments$1.isBlockComment(comment) || comment.leading && hasNewline$5(options2.originalText, options2.locEnd(comment)) || comment.trailing && hasNewline$5(options2.originalText, options2.locStart(comment), {
                                    backwards: true
                                }));
                            const param2 = path6.call(print2, "param");
                            return concat$d([
                                "catch ",
                                hasComments2 ? concat$d([
                                    "(",
                                    indent$7(concat$d([
                                        softline$6,
                                        param2
                                    ])),
                                    softline$6,
                                    ") "
                                ]) : concat$d([
                                    "(",
                                    param2,
                                    ") "
                                ]),
                                path6.call(print2, "body")
                            ]);
                        }
                        return concat$d([
                            "catch ",
                            path6.call(print2, "body")
                        ]);
                    case "ThrowStatement":
                        return concat$d([
                            "throw",
                            printReturnAndThrowArgument(path6, options2, print2)
                        ]);
                    case "SwitchStatement":
                        return concat$d([
                            group$b(concat$d([
                                "switch (",
                                indent$7(concat$d([
                                    softline$6,
                                    path6.call(print2, "discriminant")
                                ])),
                                softline$6,
                                ")"
                            ])),
                            " {",
                            n.cases.length > 0 ? indent$7(concat$d([
                                hardline$9,
                                join$9(hardline$9, path6.map((casePath)=>{
                                    const caseNode = casePath.getValue();
                                    return concat$d([
                                        casePath.call(print2),
                                        n.cases.indexOf(caseNode) !== n.cases.length - 1 && isNextLineEmpty$4(options2.originalText, caseNode, options2.locEnd) ? hardline$9 : ""
                                    ]);
                                }, "cases"))
                            ])) : "",
                            hardline$9,
                            "}"
                        ]);
                    case "SwitchCase":
                        {
                            if (n.test) {
                                parts.push("case ", path6.call(print2, "test"), ":");
                            } else {
                                parts.push("default:");
                            }
                            const consequent = n.consequent.filter((node)=>node.type !== "EmptyStatement");
                            if (consequent.length > 0) {
                                const cons = path6.call((consequentPath)=>{
                                    return printStatementSequence(consequentPath, options2, print2);
                                }, "consequent");
                                parts.push(consequent.length === 1 && consequent[0].type === "BlockStatement" ? concat$d([
                                    " ",
                                    cons
                                ]) : indent$7(concat$d([
                                    hardline$9,
                                    cons
                                ])));
                            }
                            return concat$d(parts);
                        }
                    case "DebuggerStatement":
                        return concat$d([
                            "debugger",
                            semi
                        ]);
                    case "JSXAttribute":
                        parts.push(path6.call(print2, "name"));
                        if (n.value) {
                            let res;
                            if (isStringLiteral$1(n.value)) {
                                const raw = rawText$1(n.value);
                                let final = raw.replace(/&apos;/g, "'").replace(/&quot;/g, '"');
                                const quote = getPreferredQuote$1(final, options2.jsxSingleQuote ? "'" : '"');
                                const escape = quote === "'" ? "&apos;" : "&quot;";
                                final = final.slice(1, -1).replace(new RegExp(quote, "g"), escape);
                                res = concat$d([
                                    quote,
                                    final,
                                    quote
                                ]);
                            } else {
                                res = path6.call(print2, "value");
                            }
                            parts.push("=", res);
                        }
                        return concat$d(parts);
                    case "JSXIdentifier":
                        return "" + n.name;
                    case "JSXNamespacedName":
                        return join$9(":", [
                            path6.call(print2, "namespace"),
                            path6.call(print2, "name")
                        ]);
                    case "JSXMemberExpression":
                        return join$9(".", [
                            path6.call(print2, "object"),
                            path6.call(print2, "property")
                        ]);
                    case "TSQualifiedName":
                        return join$9(".", [
                            path6.call(print2, "left"),
                            path6.call(print2, "right")
                        ]);
                    case "JSXSpreadAttribute":
                    case "JSXSpreadChild":
                        {
                            return concat$d([
                                "{",
                                path6.call((p2)=>{
                                    const printed = concat$d([
                                        "...",
                                        print2(p2)
                                    ]);
                                    const n2 = p2.getValue();
                                    if (!n2.comments || !n2.comments.length) {
                                        return printed;
                                    }
                                    return concat$d([
                                        indent$7(concat$d([
                                            softline$6,
                                            comments.printComments(p2, ()=>printed, options2)
                                        ])),
                                        softline$6
                                    ]);
                                }, n.type === "JSXSpreadAttribute" ? "argument" : "expression"),
                                "}"
                            ]);
                        }
                    case "JSXExpressionContainer":
                        {
                            const parent = path6.getParentNode(0);
                            const hasComments2 = n.expression.comments && n.expression.comments.length > 0;
                            const shouldInline = n.expression.type === "JSXEmptyExpression" || !hasComments2 && (n.expression.type === "ArrayExpression" || n.expression.type === "ObjectExpression" || n.expression.type === "ArrowFunctionExpression" || n.expression.type === "CallExpression" || n.expression.type === "OptionalCallExpression" || n.expression.type === "FunctionExpression" || n.expression.type === "TemplateLiteral" || n.expression.type === "TaggedTemplateExpression" || n.expression.type === "DoExpression" || isJSXNode$1(parent) && (n.expression.type === "ConditionalExpression" || isBinaryish$1(n.expression)));
                            if (shouldInline) {
                                return group$b(concat$d([
                                    "{",
                                    path6.call(print2, "expression"),
                                    lineSuffixBoundary$1,
                                    "}"
                                ]));
                            }
                            return group$b(concat$d([
                                "{",
                                indent$7(concat$d([
                                    softline$6,
                                    path6.call(print2, "expression")
                                ])),
                                softline$6,
                                lineSuffixBoundary$1,
                                "}"
                            ]));
                        }
                    case "JSXFragment":
                    case "JSXElement":
                        {
                            const elem = comments.printComments(path6, ()=>printJSXElement(path6, options2, print2), options2);
                            return maybeWrapJSXElementInParens(path6, elem, options2);
                        }
                    case "JSXOpeningElement":
                        {
                            const n2 = path6.getValue();
                            const nameHasComments = n2.name && n2.name.comments && n2.name.comments.length > 0 || n2.typeParameters && n2.typeParameters.comments && n2.typeParameters.comments.length > 0;
                            if (n2.selfClosing && !n2.attributes.length && !nameHasComments) {
                                return concat$d([
                                    "<",
                                    path6.call(print2, "name"),
                                    path6.call(print2, "typeParameters"),
                                    " />"
                                ]);
                            }
                            if (n2.attributes && n2.attributes.length === 1 && n2.attributes[0].value && isStringLiteral$1(n2.attributes[0].value) && !n2.attributes[0].value.value.includes("\n") && // We should break for the following cases:
                            // <div
                            //   // comment
                            //   attr="value"
                            // >
                            // <div
                            //   attr="value"
                            //   // comment
                            // >
                            !nameHasComments && (!n2.attributes[0].comments || !n2.attributes[0].comments.length)) {
                                return group$b(concat$d([
                                    "<",
                                    path6.call(print2, "name"),
                                    path6.call(print2, "typeParameters"),
                                    " ",
                                    concat$d(path6.map(print2, "attributes")),
                                    n2.selfClosing ? " />" : ">"
                                ]));
                            }
                            const lastAttrHasTrailingComments = n2.attributes.length && hasTrailingComment$1(getLast$3(n2.attributes));
                            const bracketSameLine = // Simple tags (no attributes and no comment in tag name) should be
                            // kept unbroken regardless of `jsxBracketSameLine`
                            !n2.attributes.length && !nameHasComments || options2.jsxBracketSameLine && // We should print the bracket in a new line for the following cases:
                            // <div
                            //   // comment
                            // >
                            // <div
                            //   attr // comment
                            // >
                            (!nameHasComments || n2.attributes.length) && !lastAttrHasTrailingComments;
                            const shouldBreak = n2.attributes && n2.attributes.some((attr)=>attr.value && isStringLiteral$1(attr.value) && attr.value.value.includes("\n"));
                            return group$b(concat$d([
                                "<",
                                path6.call(print2, "name"),
                                path6.call(print2, "typeParameters"),
                                concat$d([
                                    indent$7(concat$d(path6.map((attr)=>concat$d([
                                            line$9,
                                            print2(attr)
                                        ]), "attributes"))),
                                    n2.selfClosing ? line$9 : bracketSameLine ? ">" : softline$6
                                ]),
                                n2.selfClosing ? "/>" : bracketSameLine ? "" : ">"
                            ]), {
                                shouldBreak
                            });
                        }
                    case "JSXClosingElement":
                        return concat$d([
                            "</",
                            path6.call(print2, "name"),
                            ">"
                        ]);
                    case "JSXOpeningFragment":
                    case "JSXClosingFragment":
                        {
                            const hasComment = n.comments && n.comments.length;
                            const hasOwnLineComment = hasComment && !n.comments.every(comments$1.isBlockComment);
                            const isOpeningFragment = n.type === "JSXOpeningFragment";
                            return concat$d([
                                isOpeningFragment ? "<" : "</",
                                indent$7(concat$d([
                                    hasOwnLineComment ? hardline$9 : hasComment && !isOpeningFragment ? " " : "",
                                    comments.printDanglingComments(path6, options2, true)
                                ])),
                                hasOwnLineComment ? hardline$9 : "",
                                ">"
                            ]);
                        }
                    case "JSXText":
                        throw new Error("JSXTest should be handled by JSXElement");
                    case "JSXEmptyExpression":
                        {
                            const requiresHardline = n.comments && !n.comments.every(comments$1.isBlockComment);
                            return concat$d([
                                comments.printDanglingComments(path6, options2, /* sameIndent */ !requiresHardline),
                                requiresHardline ? hardline$9 : ""
                            ]);
                        }
                    case "ClassBody":
                        if (!n.comments && n.body.length === 0) {
                            return "{}";
                        }
                        return concat$d([
                            "{",
                            n.body.length > 0 ? indent$7(concat$d([
                                hardline$9,
                                path6.call((bodyPath)=>{
                                    return printStatementSequence(bodyPath, options2, print2);
                                }, "body")
                            ])) : comments.printDanglingComments(path6, options2),
                            hardline$9,
                            "}"
                        ]);
                    case "ClassProperty":
                    case "TSAbstractClassProperty":
                    case "ClassPrivateProperty":
                        {
                            if (n.decorators && n.decorators.length !== 0) {
                                parts.push(printDecorators(path6, options2, print2));
                            }
                            if (n.accessibility) {
                                parts.push(n.accessibility + " ");
                            }
                            if (n.declare) {
                                parts.push("declare ");
                            }
                            if (n.static) {
                                parts.push("static ");
                            }
                            if (n.type === "TSAbstractClassProperty" || n.abstract) {
                                parts.push("abstract ");
                            }
                            if (n.readonly) {
                                parts.push("readonly ");
                            }
                            const variance = getFlowVariance$1(n);
                            if (variance) {
                                parts.push(variance);
                            }
                            parts.push(printPropertyKey(path6, options2, print2), printOptionalToken(path6), printTypeAnnotation(path6, options2, print2));
                            if (n.value) {
                                parts.push(" =", printAssignmentRight(n.key, n.value, path6.call(print2, "value"), options2));
                            }
                            parts.push(semi);
                            return group$b(concat$d(parts));
                        }
                    case "ClassDeclaration":
                    case "ClassExpression":
                        if (n.declare) {
                            parts.push("declare ");
                        }
                        parts.push(concat$d(printClass(path6, options2, print2)));
                        return concat$d(parts);
                    case "TSInterfaceHeritage":
                    case "TSExpressionWithTypeArguments":
                        parts.push(path6.call(print2, "expression"));
                        if (n.typeParameters) {
                            parts.push(path6.call(print2, "typeParameters"));
                        }
                        return concat$d(parts);
                    case "TemplateElement":
                        return join$9(literalline$4, n.value.raw.split(/\r?\n/g));
                    case "TemplateLiteral":
                        {
                            let expressions = path6.map(print2, "expressions");
                            const parentNode = path6.getParentNode();
                            if (isJestEachTemplateLiteral$1(n, parentNode)) {
                                const printed = printJestEachTemplateLiteral(n, expressions, options2);
                                if (printed) {
                                    return printed;
                                }
                            }
                            const isSimple = isSimpleTemplateLiteral$1(n);
                            if (isSimple) {
                                expressions = expressions.map((doc2)=>printDocToString$2(doc2, Object.assign({}, options2, {
                                        printWidth: Infinity
                                    })).formatted);
                            }
                            parts.push(lineSuffixBoundary$1, "`");
                            path6.each((childPath)=>{
                                const i = childPath.getName();
                                parts.push(print2(childPath));
                                if (i < expressions.length) {
                                    const { tabWidth  } = options2;
                                    const quasi = childPath.getValue();
                                    const indentSize = getIndentSize$2(quasi.value.raw, tabWidth);
                                    let printed = expressions[i];
                                    if (!isSimple) {
                                        if (n.expressions[i].comments && n.expressions[i].comments.length || n.expressions[i].type === "MemberExpression" || n.expressions[i].type === "OptionalMemberExpression" || n.expressions[i].type === "ConditionalExpression" || n.expressions[i].type === "SequenceExpression" || n.expressions[i].type === "TSAsExpression" || isBinaryish$1(n.expressions[i])) {
                                            printed = concat$d([
                                                indent$7(concat$d([
                                                    softline$6,
                                                    printed
                                                ])),
                                                softline$6
                                            ]);
                                        }
                                    }
                                    const aligned = indentSize === 0 && quasi.value.raw.endsWith("\n") ? align$1(-Infinity, printed) : addAlignmentToDoc$2(printed, indentSize, tabWidth);
                                    parts.push(group$b(concat$d([
                                        "${",
                                        aligned,
                                        lineSuffixBoundary$1,
                                        "}"
                                    ])));
                                }
                            }, "quasis");
                            parts.push("`");
                            return concat$d(parts);
                        }
                    case "TaggedTemplateExpression":
                        return concat$d([
                            path6.call(print2, "tag"),
                            path6.call(print2, "typeParameters"),
                            path6.call(print2, "quasi")
                        ]);
                    case "Node":
                    case "Printable":
                    case "SourceLocation":
                    case "Position":
                    case "Statement":
                    case "Function":
                    case "Pattern":
                    case "Expression":
                    case "Declaration":
                    case "Specifier":
                    case "NamedSpecifier":
                    case "Comment":
                    case "MemberTypeAnnotation":
                    case "Type":
                        throw new Error("unprintable type: " + JSON.stringify(n.type));
                    case "TypeAnnotation":
                    case "TSTypeAnnotation":
                        if (n.typeAnnotation) {
                            return path6.call(print2, "typeAnnotation");
                        }
                        return "";
                    case "TSTupleType":
                    case "TupleTypeAnnotation":
                        {
                            const typesField = n.type === "TSTupleType" ? "elementTypes" : "types";
                            const hasRest = n[typesField].length > 0 && getLast$3(n[typesField]).type === "TSRestType";
                            return group$b(concat$d([
                                "[",
                                indent$7(concat$d([
                                    softline$6,
                                    printArrayItems(path6, options2, typesField, print2)
                                ])),
                                ifBreak$6(shouldPrintComma$1(options2, "all") && !hasRest ? "," : ""),
                                comments.printDanglingComments(path6, options2, /* sameIndent */ true),
                                softline$6,
                                "]"
                            ]));
                        }
                    case "ExistsTypeAnnotation":
                        return "*";
                    case "EmptyTypeAnnotation":
                        return "empty";
                    case "AnyTypeAnnotation":
                        return "any";
                    case "MixedTypeAnnotation":
                        return "mixed";
                    case "ArrayTypeAnnotation":
                        return concat$d([
                            path6.call(print2, "elementType"),
                            "[]"
                        ]);
                    case "BooleanTypeAnnotation":
                        return "boolean";
                    case "BooleanLiteralTypeAnnotation":
                        return "" + n.value;
                    case "DeclareClass":
                        return printFlowDeclaration(path6, printClass(path6, options2, print2));
                    case "TSDeclareFunction":
                        return concat$d([
                            n.declare ? "declare " : "",
                            printFunctionDeclaration(path6, print2, options2),
                            semi
                        ]);
                    case "DeclareFunction":
                        return printFlowDeclaration(path6, [
                            "function ",
                            path6.call(print2, "id"),
                            n.predicate ? " " : "",
                            path6.call(print2, "predicate"),
                            semi
                        ]);
                    case "DeclareModule":
                        return printFlowDeclaration(path6, [
                            "module ",
                            path6.call(print2, "id"),
                            " ",
                            path6.call(print2, "body")
                        ]);
                    case "DeclareModuleExports":
                        return printFlowDeclaration(path6, [
                            "module.exports",
                            ": ",
                            path6.call(print2, "typeAnnotation"),
                            semi
                        ]);
                    case "DeclareVariable":
                        return printFlowDeclaration(path6, [
                            "var ",
                            path6.call(print2, "id"),
                            semi
                        ]);
                    case "DeclareExportAllDeclaration":
                        return concat$d([
                            "declare export * from ",
                            path6.call(print2, "source")
                        ]);
                    case "DeclareExportDeclaration":
                        return concat$d([
                            "declare ",
                            printExportDeclaration(path6, options2, print2)
                        ]);
                    case "DeclareOpaqueType":
                    case "OpaqueType":
                        {
                            parts.push("opaque type ", path6.call(print2, "id"), path6.call(print2, "typeParameters"));
                            if (n.supertype) {
                                parts.push(": ", path6.call(print2, "supertype"));
                            }
                            if (n.impltype) {
                                parts.push(" = ", path6.call(print2, "impltype"));
                            }
                            parts.push(semi);
                            if (n.type === "DeclareOpaqueType") {
                                return printFlowDeclaration(path6, parts);
                            }
                            return concat$d(parts);
                        }
                    case "EnumDeclaration":
                        return concat$d([
                            "enum ",
                            path6.call(print2, "id"),
                            " ",
                            path6.call(print2, "body")
                        ]);
                    case "EnumBooleanBody":
                    case "EnumNumberBody":
                    case "EnumStringBody":
                    case "EnumSymbolBody":
                        {
                            if (n.type === "EnumSymbolBody" || n.explicitType) {
                                let type2 = null;
                                switch(n.type){
                                    case "EnumBooleanBody":
                                        type2 = "boolean";
                                        break;
                                    case "EnumNumberBody":
                                        type2 = "number";
                                        break;
                                    case "EnumStringBody":
                                        type2 = "string";
                                        break;
                                    case "EnumSymbolBody":
                                        type2 = "symbol";
                                        break;
                                }
                                parts.push("of ", type2, " ");
                            }
                            if (n.members.length === 0) {
                                parts.push(group$b(concat$d([
                                    "{",
                                    comments.printDanglingComments(path6, options2),
                                    softline$6,
                                    "}"
                                ])));
                            } else {
                                parts.push(group$b(concat$d([
                                    "{",
                                    indent$7(concat$d([
                                        hardline$9,
                                        printArrayItems(path6, options2, "members", print2),
                                        shouldPrintComma$1(options2) ? "," : ""
                                    ])),
                                    comments.printDanglingComments(path6, options2, /* sameIndent */ true),
                                    hardline$9,
                                    "}"
                                ])));
                            }
                            return concat$d(parts);
                        }
                    case "EnumBooleanMember":
                    case "EnumNumberMember":
                    case "EnumStringMember":
                        return concat$d([
                            path6.call(print2, "id"),
                            " = ",
                            typeof n.init === "object" ? path6.call(print2, "init") : String(n.init)
                        ]);
                    case "EnumDefaultedMember":
                        return path6.call(print2, "id");
                    case "FunctionTypeAnnotation":
                    case "TSFunctionType":
                        {
                            const parent = path6.getParentNode(0);
                            const parentParent = path6.getParentNode(1);
                            const parentParentParent = path6.getParentNode(2);
                            let isArrowFunctionTypeAnnotation = n.type === "TSFunctionType" || !((parent.type === "ObjectTypeProperty" || parent.type === "ObjectTypeInternalSlot") && !getFlowVariance$1(parent) && !parent.optional && options2.locStart(parent) === options2.locStart(n) || parent.type === "ObjectTypeCallProperty" || parentParentParent && parentParentParent.type === "DeclareFunction");
                            let needsColon = isArrowFunctionTypeAnnotation && (parent.type === "TypeAnnotation" || parent.type === "TSTypeAnnotation");
                            const needsParens2 = needsColon && isArrowFunctionTypeAnnotation && (parent.type === "TypeAnnotation" || parent.type === "TSTypeAnnotation") && parentParent.type === "ArrowFunctionExpression";
                            if (isObjectTypePropertyAFunction$1(parent, options2)) {
                                isArrowFunctionTypeAnnotation = true;
                                needsColon = true;
                            }
                            if (needsParens2) {
                                parts.push("(");
                            }
                            parts.push(printFunctionParams(path6, print2, options2, /* expandArg */ false, /* printTypeParams */ true));
                            if (n.returnType || n.predicate || n.typeAnnotation) {
                                parts.push(isArrowFunctionTypeAnnotation ? " => " : ": ", path6.call(print2, "returnType"), path6.call(print2, "predicate"), path6.call(print2, "typeAnnotation"));
                            }
                            if (needsParens2) {
                                parts.push(")");
                            }
                            return group$b(concat$d(parts));
                        }
                    case "TSRestType":
                        return concat$d([
                            "...",
                            path6.call(print2, "typeAnnotation")
                        ]);
                    case "TSOptionalType":
                        return concat$d([
                            path6.call(print2, "typeAnnotation"),
                            "?"
                        ]);
                    case "FunctionTypeParam":
                        return concat$d([
                            path6.call(print2, "name"),
                            printOptionalToken(path6),
                            n.name ? ": " : "",
                            path6.call(print2, "typeAnnotation")
                        ]);
                    case "GenericTypeAnnotation":
                        return concat$d([
                            path6.call(print2, "id"),
                            path6.call(print2, "typeParameters")
                        ]);
                    case "DeclareInterface":
                    case "InterfaceDeclaration":
                    case "InterfaceTypeAnnotation":
                        {
                            if (n.type === "DeclareInterface" || n.declare) {
                                parts.push("declare ");
                            }
                            parts.push("interface");
                            if (n.type === "DeclareInterface" || n.type === "InterfaceDeclaration") {
                                parts.push(" ", path6.call(print2, "id"), path6.call(print2, "typeParameters"));
                            }
                            if (n.extends.length > 0) {
                                parts.push(group$b(indent$7(concat$d([
                                    line$9,
                                    "extends ",
                                    (n.extends.length === 1 ? identity$2 : indent$7)(join$9(concat$d([
                                        ",",
                                        line$9
                                    ]), path6.map(print2, "extends")))
                                ]))));
                            }
                            parts.push(" ", path6.call(print2, "body"));
                            return group$b(concat$d(parts));
                        }
                    case "ClassImplements":
                    case "InterfaceExtends":
                        return concat$d([
                            path6.call(print2, "id"),
                            path6.call(print2, "typeParameters")
                        ]);
                    case "TSClassImplements":
                        return concat$d([
                            path6.call(print2, "expression"),
                            path6.call(print2, "typeParameters")
                        ]);
                    case "TSIntersectionType":
                    case "IntersectionTypeAnnotation":
                        {
                            const types = path6.map(print2, "types");
                            const result = [];
                            let wasIndented = false;
                            for(let i = 0; i < types.length; ++i){
                                if (i === 0) {
                                    result.push(types[i]);
                                } else if (isObjectType$1(n.types[i - 1]) && isObjectType$1(n.types[i])) {
                                    result.push(concat$d([
                                        " & ",
                                        wasIndented ? indent$7(types[i]) : types[i]
                                    ]));
                                } else if (!isObjectType$1(n.types[i - 1]) && !isObjectType$1(n.types[i])) {
                                    result.push(indent$7(concat$d([
                                        " &",
                                        line$9,
                                        types[i]
                                    ])));
                                } else {
                                    if (i > 1) {
                                        wasIndented = true;
                                    }
                                    result.push(" & ", i > 1 ? indent$7(types[i]) : types[i]);
                                }
                            }
                            return group$b(concat$d(result));
                        }
                    case "TSUnionType":
                    case "UnionTypeAnnotation":
                        {
                            const parent = path6.getParentNode();
                            const shouldIndent = parent.type !== "TypeParameterInstantiation" && parent.type !== "TSTypeParameterInstantiation" && parent.type !== "GenericTypeAnnotation" && parent.type !== "TSTypeReference" && parent.type !== "TSTypeAssertion" && parent.type !== "TupleTypeAnnotation" && parent.type !== "TSTupleType" && !(parent.type === "FunctionTypeParam" && !parent.name) && !((parent.type === "TypeAlias" || parent.type === "VariableDeclarator" || parent.type === "TSTypeAliasDeclaration") && hasLeadingOwnLineComment$1(options2.originalText, n, options2));
                            const shouldHug = shouldHugType(n);
                            const printed = path6.map((typePath)=>{
                                let printedType = typePath.call(print2);
                                if (!shouldHug) {
                                    printedType = align$1(2, printedType);
                                }
                                return comments.printComments(typePath, ()=>printedType, options2);
                            }, "types");
                            if (shouldHug) {
                                return join$9(" | ", printed);
                            }
                            const shouldAddStartLine = shouldIndent && !hasLeadingOwnLineComment$1(options2.originalText, n, options2);
                            const code2 = concat$d([
                                ifBreak$6(concat$d([
                                    shouldAddStartLine ? line$9 : "",
                                    "| "
                                ])),
                                join$9(concat$d([
                                    line$9,
                                    "| "
                                ]), printed)
                            ]);
                            if (needsParens_1(path6, options2)) {
                                return group$b(concat$d([
                                    indent$7(code2),
                                    softline$6
                                ]));
                            }
                            if (parent.type === "TupleTypeAnnotation" && parent.types.length > 1 || parent.type === "TSTupleType" && parent.elementTypes.length > 1) {
                                return group$b(concat$d([
                                    indent$7(concat$d([
                                        ifBreak$6(concat$d([
                                            "(",
                                            softline$6
                                        ])),
                                        code2
                                    ])),
                                    softline$6,
                                    ifBreak$6(")")
                                ]));
                            }
                            return group$b(shouldIndent ? indent$7(code2) : code2);
                        }
                    case "NullableTypeAnnotation":
                        return concat$d([
                            "?",
                            path6.call(print2, "typeAnnotation")
                        ]);
                    case "TSNullKeyword":
                    case "NullLiteralTypeAnnotation":
                        return "null";
                    case "ThisTypeAnnotation":
                        return "this";
                    case "NumberTypeAnnotation":
                        return "number";
                    case "SymbolTypeAnnotation":
                        return "symbol";
                    case "ObjectTypeCallProperty":
                        if (n.static) {
                            parts.push("static ");
                        }
                        parts.push(path6.call(print2, "value"));
                        return concat$d(parts);
                    case "ObjectTypeIndexer":
                        {
                            const variance = getFlowVariance$1(n);
                            return concat$d([
                                variance || "",
                                "[",
                                path6.call(print2, "id"),
                                n.id ? ": " : "",
                                path6.call(print2, "key"),
                                "]: ",
                                path6.call(print2, "value")
                            ]);
                        }
                    case "ObjectTypeProperty":
                        {
                            const variance = getFlowVariance$1(n);
                            let modifier = "";
                            if (n.proto) {
                                modifier = "proto ";
                            } else if (n.static) {
                                modifier = "static ";
                            }
                            return concat$d([
                                modifier,
                                isGetterOrSetter$1(n) ? n.kind + " " : "",
                                variance || "",
                                printPropertyKey(path6, options2, print2),
                                printOptionalToken(path6),
                                isFunctionNotation$1(n, options2) ? "" : ": ",
                                path6.call(print2, "value")
                            ]);
                        }
                    case "QualifiedTypeIdentifier":
                        return concat$d([
                            path6.call(print2, "qualification"),
                            ".",
                            path6.call(print2, "id")
                        ]);
                    case "StringLiteralTypeAnnotation":
                        return nodeStr(n, options2);
                    case "NumberLiteralTypeAnnotation":
                        assert.strictEqual(typeof n.value, "number");
                        if (n.extra != null) {
                            return printNumber$2(n.extra.raw);
                        }
                        return printNumber$2(n.raw);
                    case "StringTypeAnnotation":
                        return "string";
                    case "DeclareTypeAlias":
                    case "TypeAlias":
                        {
                            if (n.type === "DeclareTypeAlias" || n.declare) {
                                parts.push("declare ");
                            }
                            const printed = printAssignmentRight(n.id, n.right, path6.call(print2, "right"), options2);
                            parts.push("type ", path6.call(print2, "id"), path6.call(print2, "typeParameters"), " =", printed, semi);
                            return group$b(concat$d(parts));
                        }
                    case "TypeCastExpression":
                        {
                            return concat$d([
                                "(",
                                path6.call(print2, "expression"),
                                printTypeAnnotation(path6, options2, print2),
                                ")"
                            ]);
                        }
                    case "TypeParameterDeclaration":
                    case "TypeParameterInstantiation":
                        {
                            const value1 = path6.getValue();
                            const commentStart = value1.range ? options2.originalText.slice(0, value1.range[0]).lastIndexOf("/*") : -1;
                            const commentSyntax = commentStart >= 0 && options2.originalText.slice(commentStart).match(/^\/\*\s*::/);
                            if (commentSyntax) {
                                return concat$d([
                                    "/*:: ",
                                    printTypeParameters(path6, options2, print2, "params"),
                                    " */"
                                ]);
                            }
                            return printTypeParameters(path6, options2, print2, "params");
                        }
                    case "TSTypeParameterDeclaration":
                    case "TSTypeParameterInstantiation":
                        return printTypeParameters(path6, options2, print2, "params");
                    case "TSTypeParameter":
                    case "TypeParameter":
                        {
                            const parent = path6.getParentNode();
                            if (parent.type === "TSMappedType") {
                                parts.push("[", path6.call(print2, "name"));
                                if (n.constraint) {
                                    parts.push(" in ", path6.call(print2, "constraint"));
                                }
                                parts.push("]");
                                return concat$d(parts);
                            }
                            const variance = getFlowVariance$1(n);
                            if (variance) {
                                parts.push(variance);
                            }
                            parts.push(path6.call(print2, "name"));
                            if (n.bound) {
                                parts.push(": ");
                                parts.push(path6.call(print2, "bound"));
                            }
                            if (n.constraint) {
                                parts.push(" extends ", path6.call(print2, "constraint"));
                            }
                            if (n.default) {
                                parts.push(" = ", path6.call(print2, "default"));
                            }
                            const grandParent = path6.getNode(2);
                            if (parent.params && parent.params.length === 1 && isTSXFile$1(options2) && !n.constraint && grandParent.type === "ArrowFunctionExpression") {
                                parts.push(",");
                            }
                            return concat$d(parts);
                        }
                    case "TypeofTypeAnnotation":
                        return concat$d([
                            "typeof ",
                            path6.call(print2, "argument")
                        ]);
                    case "VoidTypeAnnotation":
                        return "void";
                    case "InferredPredicate":
                        return "%checks";
                    case "DeclaredPredicate":
                        return concat$d([
                            "%checks(",
                            path6.call(print2, "value"),
                            ")"
                        ]);
                    case "TSAbstractKeyword":
                        return "abstract";
                    case "TSAnyKeyword":
                        return "any";
                    case "TSAsyncKeyword":
                        return "async";
                    case "TSBooleanKeyword":
                        return "boolean";
                    case "TSBigIntKeyword":
                        return "bigint";
                    case "TSConstKeyword":
                        return "const";
                    case "TSDeclareKeyword":
                        return "declare";
                    case "TSExportKeyword":
                        return "export";
                    case "TSNeverKeyword":
                        return "never";
                    case "TSNumberKeyword":
                        return "number";
                    case "TSObjectKeyword":
                        return "object";
                    case "TSProtectedKeyword":
                        return "protected";
                    case "TSPrivateKeyword":
                        return "private";
                    case "TSPublicKeyword":
                        return "public";
                    case "TSReadonlyKeyword":
                        return "readonly";
                    case "TSSymbolKeyword":
                        return "symbol";
                    case "TSStaticKeyword":
                        return "static";
                    case "TSStringKeyword":
                        return "string";
                    case "TSUndefinedKeyword":
                        return "undefined";
                    case "TSUnknownKeyword":
                        return "unknown";
                    case "TSVoidKeyword":
                        return "void";
                    case "TSAsExpression":
                        return concat$d([
                            path6.call(print2, "expression"),
                            " as ",
                            path6.call(print2, "typeAnnotation")
                        ]);
                    case "TSArrayType":
                        return concat$d([
                            path6.call(print2, "elementType"),
                            "[]"
                        ]);
                    case "TSPropertySignature":
                        {
                            if (n.export) {
                                parts.push("export ");
                            }
                            if (n.accessibility) {
                                parts.push(n.accessibility + " ");
                            }
                            if (n.static) {
                                parts.push("static ");
                            }
                            if (n.readonly) {
                                parts.push("readonly ");
                            }
                            parts.push(printPropertyKey(path6, options2, print2), printOptionalToken(path6));
                            if (n.typeAnnotation) {
                                parts.push(": ");
                                parts.push(path6.call(print2, "typeAnnotation"));
                            }
                            if (n.initializer) {
                                parts.push(" = ", path6.call(print2, "initializer"));
                            }
                            return concat$d(parts);
                        }
                    case "TSParameterProperty":
                        if (n.accessibility) {
                            parts.push(n.accessibility + " ");
                        }
                        if (n.export) {
                            parts.push("export ");
                        }
                        if (n.static) {
                            parts.push("static ");
                        }
                        if (n.readonly) {
                            parts.push("readonly ");
                        }
                        parts.push(path6.call(print2, "parameter"));
                        return concat$d(parts);
                    case "TSTypeReference":
                        return concat$d([
                            path6.call(print2, "typeName"),
                            printTypeParameters(path6, options2, print2, "typeParameters")
                        ]);
                    case "TSTypeQuery":
                        return concat$d([
                            "typeof ",
                            path6.call(print2, "exprName")
                        ]);
                    case "TSIndexSignature":
                        {
                            const parent = path6.getParentNode();
                            const trailingComma = n.parameters.length > 1 ? ifBreak$6(shouldPrintComma$1(options2) ? "," : "") : "";
                            const parametersGroup = group$b(concat$d([
                                indent$7(concat$d([
                                    softline$6,
                                    join$9(concat$d([
                                        ", ",
                                        softline$6
                                    ]), path6.map(print2, "parameters"))
                                ])),
                                trailingComma,
                                softline$6
                            ]));
                            return concat$d([
                                n.export ? "export " : "",
                                n.accessibility ? concat$d([
                                    n.accessibility,
                                    " "
                                ]) : "",
                                n.static ? "static " : "",
                                n.readonly ? "readonly " : "",
                                "[",
                                n.parameters ? parametersGroup : "",
                                n.typeAnnotation ? "]: " : "]",
                                n.typeAnnotation ? path6.call(print2, "typeAnnotation") : "",
                                parent.type === "ClassBody" ? semi : ""
                            ]);
                        }
                    case "TSTypePredicate":
                        return concat$d([
                            n.asserts ? "asserts " : "",
                            path6.call(print2, "parameterName"),
                            n.typeAnnotation ? concat$d([
                                " is ",
                                path6.call(print2, "typeAnnotation")
                            ]) : ""
                        ]);
                    case "TSNonNullExpression":
                        return concat$d([
                            path6.call(print2, "expression"),
                            "!"
                        ]);
                    case "TSThisType":
                        return "this";
                    case "TSImportType":
                        return concat$d([
                            !n.isTypeOf ? "" : "typeof ",
                            "import(",
                            path6.call(print2, n.parameter ? "parameter" : "argument"),
                            ")",
                            !n.qualifier ? "" : concat$d([
                                ".",
                                path6.call(print2, "qualifier")
                            ]),
                            printTypeParameters(path6, options2, print2, "typeParameters")
                        ]);
                    case "TSLiteralType":
                        return path6.call(print2, "literal");
                    case "TSIndexedAccessType":
                        return concat$d([
                            path6.call(print2, "objectType"),
                            "[",
                            path6.call(print2, "indexType"),
                            "]"
                        ]);
                    case "TSConstructSignatureDeclaration":
                    case "TSCallSignatureDeclaration":
                    case "TSConstructorType":
                        {
                            if (n.type !== "TSCallSignatureDeclaration") {
                                parts.push("new ");
                            }
                            parts.push(group$b(printFunctionParams(path6, print2, options2, /* expandArg */ false, /* printTypeParams */ true)));
                            if (n.returnType || n.typeAnnotation) {
                                const isType = n.type === "TSConstructorType";
                                parts.push(isType ? " => " : ": ", path6.call(print2, "returnType"), path6.call(print2, "typeAnnotation"));
                            }
                            return concat$d(parts);
                        }
                    case "TSTypeOperator":
                        return concat$d([
                            n.operator,
                            " ",
                            path6.call(print2, "typeAnnotation")
                        ]);
                    case "TSMappedType":
                        {
                            const shouldBreak = hasNewlineInRange$3(options2.originalText, options2.locStart(n), options2.locEnd(n));
                            return group$b(concat$d([
                                "{",
                                indent$7(concat$d([
                                    options2.bracketSpacing ? line$9 : softline$6,
                                    n.readonly ? concat$d([
                                        getTypeScriptMappedTypeModifier$1(n.readonly, "readonly"),
                                        " "
                                    ]) : "",
                                    printTypeScriptModifiers(path6, options2, print2),
                                    path6.call(print2, "typeParameter"),
                                    n.optional ? getTypeScriptMappedTypeModifier$1(n.optional, "?") : "",
                                    n.typeAnnotation ? ": " : "",
                                    path6.call(print2, "typeAnnotation"),
                                    ifBreak$6(semi, "")
                                ])),
                                comments.printDanglingComments(path6, options2, /* sameIndent */ true),
                                options2.bracketSpacing ? line$9 : softline$6,
                                "}"
                            ]), {
                                shouldBreak
                            });
                        }
                    case "TSMethodSignature":
                        parts.push(n.accessibility ? concat$d([
                            n.accessibility,
                            " "
                        ]) : "", n.export ? "export " : "", n.static ? "static " : "", n.readonly ? "readonly " : "", n.computed ? "[" : "", path6.call(print2, "key"), n.computed ? "]" : "", printOptionalToken(path6), printFunctionParams(path6, print2, options2, /* expandArg */ false, /* printTypeParams */ true));
                        if (n.returnType || n.typeAnnotation) {
                            parts.push(": ", path6.call(print2, "returnType"), path6.call(print2, "typeAnnotation"));
                        }
                        return group$b(concat$d(parts));
                    case "TSNamespaceExportDeclaration":
                        parts.push("export as namespace ", path6.call(print2, "id"));
                        if (options2.semi) {
                            parts.push(";");
                        }
                        return group$b(concat$d(parts));
                    case "TSEnumDeclaration":
                        if (n.declare) {
                            parts.push("declare ");
                        }
                        if (n.modifiers) {
                            parts.push(printTypeScriptModifiers(path6, options2, print2));
                        }
                        if (n.const) {
                            parts.push("const ");
                        }
                        parts.push("enum ", path6.call(print2, "id"), " ");
                        if (n.members.length === 0) {
                            parts.push(group$b(concat$d([
                                "{",
                                comments.printDanglingComments(path6, options2),
                                softline$6,
                                "}"
                            ])));
                        } else {
                            parts.push(group$b(concat$d([
                                "{",
                                indent$7(concat$d([
                                    hardline$9,
                                    printArrayItems(path6, options2, "members", print2),
                                    shouldPrintComma$1(options2, "es5") ? "," : ""
                                ])),
                                comments.printDanglingComments(path6, options2, /* sameIndent */ true),
                                hardline$9,
                                "}"
                            ])));
                        }
                        return concat$d(parts);
                    case "TSEnumMember":
                        parts.push(path6.call(print2, "id"));
                        if (n.initializer) {
                            parts.push(" = ", path6.call(print2, "initializer"));
                        }
                        return concat$d(parts);
                    case "TSImportEqualsDeclaration":
                        if (n.isExport) {
                            parts.push("export ");
                        }
                        parts.push("import ", path6.call(print2, "id"), " = ", path6.call(print2, "moduleReference"));
                        if (options2.semi) {
                            parts.push(";");
                        }
                        return group$b(concat$d(parts));
                    case "TSExternalModuleReference":
                        return concat$d([
                            "require(",
                            path6.call(print2, "expression"),
                            ")"
                        ]);
                    case "TSModuleDeclaration":
                        {
                            const parent = path6.getParentNode();
                            const isExternalModule = isLiteral$1(n.id);
                            const parentIsDeclaration = parent.type === "TSModuleDeclaration";
                            const bodyIsDeclaration = n.body && n.body.type === "TSModuleDeclaration";
                            if (parentIsDeclaration) {
                                parts.push(".");
                            } else {
                                if (n.declare) {
                                    parts.push("declare ");
                                }
                                parts.push(printTypeScriptModifiers(path6, options2, print2));
                                const textBetweenNodeAndItsId = options2.originalText.slice(options2.locStart(n), options2.locStart(n.id));
                                const isGlobalDeclaration = n.id.type === "Identifier" && n.id.name === "global" && !/namespace|module/.test(textBetweenNodeAndItsId);
                                if (!isGlobalDeclaration) {
                                    parts.push(isExternalModule || /(^|\s)module(\s|$)/.test(textBetweenNodeAndItsId) ? "module " : "namespace ");
                                }
                            }
                            parts.push(path6.call(print2, "id"));
                            if (bodyIsDeclaration) {
                                parts.push(path6.call(print2, "body"));
                            } else if (n.body) {
                                parts.push(" ", group$b(path6.call(print2, "body")));
                            } else {
                                parts.push(semi);
                            }
                            return concat$d(parts);
                        }
                    case "PrivateName":
                        return concat$d([
                            "#",
                            path6.call(print2, "id")
                        ]);
                    case "TSPrivateIdentifier":
                        return n.escapedText;
                    case "TSConditionalType":
                        return printTernaryOperator(path6, options2, print2, {
                            beforeParts: ()=>[
                                    path6.call(print2, "checkType"),
                                    " ",
                                    "extends",
                                    " ",
                                    path6.call(print2, "extendsType")
                                ],
                            afterParts: ()=>[],
                            shouldCheckJsx: false,
                            conditionalNodeType: "TSConditionalType",
                            consequentNodePropertyName: "trueType",
                            alternateNodePropertyName: "falseType",
                            testNodePropertyNames: [
                                "checkType",
                                "extendsType"
                            ]
                        });
                    case "TSInferType":
                        return concat$d([
                            "infer",
                            " ",
                            path6.call(print2, "typeParameter")
                        ]);
                    case "InterpreterDirective":
                        parts.push("#!", n.value, hardline$9);
                        if (isNextLineEmpty$4(options2.originalText, n, options2.locEnd)) {
                            parts.push(hardline$9);
                        }
                        return concat$d(parts);
                    case "NGRoot":
                        return concat$d([].concat(path6.call(print2, "node"), !n.node.comments || n.node.comments.length === 0 ? [] : concat$d([
                            " //",
                            n.node.comments[0].value.trimEnd()
                        ])));
                    case "NGChainedExpression":
                        return group$b(join$9(concat$d([
                            ";",
                            line$9
                        ]), path6.map((childPath)=>hasNgSideEffect$1(childPath) ? print2(childPath) : concat$d([
                                "(",
                                print2(childPath),
                                ")"
                            ]), "expressions")));
                    case "NGEmptyExpression":
                        return "";
                    case "NGQuotedExpression":
                        return concat$d([
                            n.prefix,
                            ": ",
                            n.value.trim()
                        ]);
                    case "NGMicrosyntax":
                        return concat$d(path6.map((childPath, index2)=>concat$d([
                                index2 === 0 ? "" : isNgForOf$1(childPath.getValue(), index2, n) ? " " : concat$d([
                                    ";",
                                    line$9
                                ]),
                                print2(childPath)
                            ]), "body"));
                    case "NGMicrosyntaxKey":
                        return /^[a-z_$][a-z0-9_$]*(-[a-z_$][a-z0-9_$])*$/i.test(n.name) ? n.name : JSON.stringify(n.name);
                    case "NGMicrosyntaxExpression":
                        return concat$d([
                            path6.call(print2, "expression"),
                            n.alias === null ? "" : concat$d([
                                " as ",
                                path6.call(print2, "alias")
                            ])
                        ]);
                    case "NGMicrosyntaxKeyedExpression":
                        {
                            const index2 = path6.getName();
                            const parentNode = path6.getParentNode();
                            const shouldNotPrintColon = isNgForOf$1(n, index2, parentNode) || (index2 === 1 && (n.key.name === "then" || n.key.name === "else") || index2 === 2 && n.key.name === "else" && parentNode.body[index2 - 1].type === "NGMicrosyntaxKeyedExpression" && parentNode.body[index2 - 1].key.name === "then") && parentNode.body[0].type === "NGMicrosyntaxExpression";
                            return concat$d([
                                path6.call(print2, "key"),
                                shouldNotPrintColon ? " " : ": ",
                                path6.call(print2, "expression")
                            ]);
                        }
                    case "NGMicrosyntaxLet":
                        return concat$d([
                            "let ",
                            path6.call(print2, "key"),
                            n.value === null ? "" : concat$d([
                                " = ",
                                path6.call(print2, "value")
                            ])
                        ]);
                    case "NGMicrosyntaxAs":
                        return concat$d([
                            path6.call(print2, "key"),
                            " as ",
                            path6.call(print2, "alias")
                        ]);
                    case "ArgumentPlaceholder":
                        return "?";
                    case "TSJSDocAllType":
                        return "*";
                    case "TSJSDocUnknownType":
                        return "?";
                    case "TSJSDocNullableType":
                        return concat$d([
                            "?",
                            path6.call(print2, "typeAnnotation")
                        ]);
                    case "TSJSDocNonNullableType":
                        return concat$d([
                            "!",
                            path6.call(print2, "typeAnnotation")
                        ]);
                    case "TSJSDocFunctionType":
                        return concat$d([
                            "function(",
                            // The parameters could be here, but typescript-estree doesn't convert them anyway (throws an error).
                            "): ",
                            path6.call(print2, "typeAnnotation")
                        ]);
                    default:
                        throw new Error("unknown type: " + JSON.stringify(n.type));
                }
            }
            function printStatementSequence(path6, options2, print2) {
                const printed = [];
                const bodyNode = path6.getNode();
                const isClass = bodyNode.type === "ClassBody";
                path6.map((stmtPath, i)=>{
                    const stmt = stmtPath.getValue();
                    if (!stmt) {
                        return;
                    }
                    if (stmt.type === "EmptyStatement") {
                        return;
                    }
                    const stmtPrinted = print2(stmtPath);
                    const text = options2.originalText;
                    const parts = [];
                    if (!options2.semi && !isClass && !isTheOnlyJSXElementInMarkdown$1(options2, stmtPath) && stmtNeedsASIProtection(stmtPath, options2)) {
                        if (stmt.comments && stmt.comments.some((comment)=>comment.leading)) {
                            parts.push(print2(stmtPath, {
                                needsSemi: true
                            }));
                        } else {
                            parts.push(";", stmtPrinted);
                        }
                    } else {
                        parts.push(stmtPrinted);
                    }
                    if (!options2.semi && isClass) {
                        if (classPropMayCauseASIProblems$1(stmtPath)) {
                            parts.push(";");
                        } else if (stmt.type === "ClassProperty") {
                            const nextChild = bodyNode.body[i + 1];
                            if (classChildNeedsASIProtection$1(nextChild)) {
                                parts.push(";");
                            }
                        }
                    }
                    if (isNextLineEmpty$4(text, stmt, options2.locEnd) && !isLastStatement$1(stmtPath)) {
                        parts.push(hardline$9);
                    }
                    printed.push(concat$d(parts));
                });
                return join$9(hardline$9, printed);
            }
            function printPropertyKey(path6, options2, print2) {
                const node = path6.getNode();
                if (node.computed) {
                    return concat$d([
                        "[",
                        path6.call(print2, "key"),
                        "]"
                    ]);
                }
                const parent = path6.getParentNode();
                const { key  } = node;
                if (node.type === "ClassPrivateProperty" && // flow has `Identifier` key, and babel has `PrivateName` key
                key.type === "Identifier") {
                    return concat$d([
                        "#",
                        path6.call(print2, "key")
                    ]);
                }
                if (options2.quoteProps === "consistent" && !needsQuoteProps.has(parent)) {
                    const objectHasStringProp = (parent.properties || parent.body || parent.members).some((prop)=>!prop.computed && prop.key && isStringLiteral$1(prop.key) && !isStringPropSafeToCoerceToIdentifier$1(prop, options2));
                    needsQuoteProps.set(parent, objectHasStringProp);
                }
                if (key.type === "Identifier" && (options2.parser === "json" || options2.quoteProps === "consistent" && needsQuoteProps.get(parent))) {
                    const prop = printString$2(JSON.stringify(key.name), options2);
                    return path6.call((keyPath)=>comments.printComments(keyPath, ()=>prop, options2), "key");
                }
                if (isStringPropSafeToCoerceToIdentifier$1(node, options2) && (options2.quoteProps === "as-needed" || options2.quoteProps === "consistent" && !needsQuoteProps.get(parent))) {
                    return path6.call((keyPath)=>comments.printComments(keyPath, ()=>key.value, options2), "key");
                }
                return path6.call(print2, "key");
            }
            function printMethod(path6, options2, print2) {
                const node = path6.getNode();
                const { kind  } = node;
                const value1 = node.value || node;
                const parts = [];
                if (!kind || kind === "init" || kind === "method" || kind === "constructor") {
                    if (value1.async) {
                        parts.push("async ");
                    }
                    if (value1.generator) {
                        parts.push("*");
                    }
                } else {
                    assert.ok(kind === "get" || kind === "set");
                    parts.push(kind, " ");
                }
                parts.push(printPropertyKey(path6, options2, print2), node.optional || node.key.optional ? "?" : "", node === value1 ? printMethodInternal(path6, options2, print2) : path6.call((path7)=>printMethodInternal(path7, options2, print2), "value"));
                return concat$d(parts);
            }
            function printMethodInternal(path6, options2, print2) {
                const parts = [
                    printFunctionTypeParameters(path6, options2, print2),
                    group$b(concat$d([
                        printFunctionParams(path6, print2, options2),
                        printReturnType(path6, print2, options2)
                    ]))
                ];
                if (path6.getNode().body) {
                    parts.push(" ", path6.call(print2, "body"));
                } else {
                    parts.push(options2.semi ? ";" : "");
                }
                return concat$d(parts);
            }
            function couldGroupArg(arg) {
                return arg.type === "ObjectExpression" && (arg.properties.length > 0 || arg.comments) || arg.type === "ArrayExpression" && (arg.elements.length > 0 || arg.comments) || arg.type === "TSTypeAssertion" && couldGroupArg(arg.expression) || arg.type === "TSAsExpression" && couldGroupArg(arg.expression) || arg.type === "FunctionExpression" || arg.type === "ArrowFunctionExpression" && // we want to avoid breaking inside composite return types but not simple keywords
                // https://github.com/prettier/prettier/issues/4070
                // export class Thing implements OtherThing {
                //   do: (type: Type) => Provider<Prop> = memoize(
                //     (type: ObjectType): Provider<Opts> => {}
                //   );
                // }
                // https://github.com/prettier/prettier/issues/6099
                // app.get("/", (req, res): void => {
                //   res.send("Hello World!");
                // });
                (!arg.returnType || !arg.returnType.typeAnnotation || arg.returnType.typeAnnotation.type !== "TSTypeReference") && (arg.body.type === "BlockStatement" || arg.body.type === "ArrowFunctionExpression" || arg.body.type === "ObjectExpression" || arg.body.type === "ArrayExpression" || arg.body.type === "CallExpression" || arg.body.type === "OptionalCallExpression" || arg.body.type === "ConditionalExpression" || isJSXNode$1(arg.body));
            }
            function shouldGroupLastArg(args) {
                const lastArg = getLast$3(args);
                const penultimateArg = getPenultimate$1(args);
                return !hasLeadingComment$3(lastArg) && !hasTrailingComment$1(lastArg) && couldGroupArg(lastArg) && // If the last two arguments are of the same type,
                // disable last element expansion.
                (!penultimateArg || penultimateArg.type !== lastArg.type);
            }
            function shouldGroupFirstArg(args) {
                if (args.length !== 2) {
                    return false;
                }
                const [firstArg, secondArg] = args;
                return (!firstArg.comments || !firstArg.comments.length) && (firstArg.type === "FunctionExpression" || firstArg.type === "ArrowFunctionExpression" && firstArg.body.type === "BlockStatement") && secondArg.type !== "FunctionExpression" && secondArg.type !== "ArrowFunctionExpression" && secondArg.type !== "ConditionalExpression" && !couldGroupArg(secondArg);
            }
            function printJestEachTemplateLiteral(node, expressions, options2) {
                const headerNames = node.quasis[0].value.raw.trim().split(/\s*\|\s*/);
                if (headerNames.length > 1 || headerNames.some((headerName)=>headerName.length !== 0)) {
                    const parts = [];
                    const stringifiedExpressions = expressions.map((doc2)=>"${" + printDocToString$2(doc2, Object.assign({}, options2, {
                            printWidth: Infinity,
                            endOfLine: "lf"
                        })).formatted + "}");
                    const tableBody = [
                        {
                            hasLineBreak: false,
                            cells: []
                        }
                    ];
                    for(let i = 1; i < node.quasis.length; i++){
                        const row = tableBody[tableBody.length - 1];
                        const correspondingExpression = stringifiedExpressions[i - 1];
                        row.cells.push(correspondingExpression);
                        if (correspondingExpression.includes("\n")) {
                            row.hasLineBreak = true;
                        }
                        if (node.quasis[i].value.raw.includes("\n")) {
                            tableBody.push({
                                hasLineBreak: false,
                                cells: []
                            });
                        }
                    }
                    const maxColumnCount = Math.max(headerNames.length, ...tableBody.map((row)=>row.cells.length));
                    const maxColumnWidths = Array.from({
                        length: maxColumnCount
                    }).fill(0);
                    const table2 = [
                        {
                            cells: headerNames
                        },
                        ...tableBody.filter((row)=>row.cells.length !== 0)
                    ];
                    for (const { cells  } of table2.filter((row)=>!row.hasLineBreak)){
                        cells.forEach((cell, index2)=>{
                            maxColumnWidths[index2] = Math.max(maxColumnWidths[index2], getStringWidth$3(cell));
                        });
                    }
                    parts.push(lineSuffixBoundary$1, "`", indent$7(concat$d([
                        hardline$9,
                        join$9(hardline$9, table2.map((row)=>join$9(" | ", row.cells.map((cell, index2)=>row.hasLineBreak ? cell : cell + " ".repeat(maxColumnWidths[index2] - getStringWidth$3(cell))))))
                    ])), hardline$9, "`");
                    return concat$d(parts);
                }
            }
            function printArgumentsList(path6, options2, print2) {
                const node = path6.getValue();
                const args = node.arguments;
                if (args.length === 0) {
                    return concat$d([
                        "(",
                        comments.printDanglingComments(path6, options2, /* sameIndent */ true),
                        ")"
                    ]);
                }
                if (args.length === 2 && args[0].type === "ArrowFunctionExpression" && args[0].params.length === 0 && args[0].body.type === "BlockStatement" && args[1].type === "ArrayExpression" && !args.find((arg)=>arg.comments)) {
                    return concat$d([
                        "(",
                        path6.call(print2, "arguments", 0),
                        ", ",
                        path6.call(print2, "arguments", 1),
                        ")"
                    ]);
                }
                function shouldBreakForArrowFunctionInArguments(arg, argPath) {
                    if (!arg || arg.type !== "ArrowFunctionExpression" || !arg.body || arg.body.type !== "BlockStatement" || !arg.params || arg.params.length < 1) {
                        return false;
                    }
                    let shouldBreak = false;
                    argPath.each((paramPath)=>{
                        const printed = concat$d([
                            print2(paramPath)
                        ]);
                        shouldBreak = shouldBreak || willBreak$1(printed);
                    }, "params");
                    return shouldBreak;
                }
                let anyArgEmptyLine = false;
                let shouldBreakForArrowFunction = false;
                let hasEmptyLineFollowingFirstArg = false;
                const lastArgIndex = args.length - 1;
                const printedArguments = path6.map((argPath, index2)=>{
                    const arg = argPath.getNode();
                    const parts = [
                        print2(argPath)
                    ];
                    if (index2 === lastArgIndex) ;
                    else if (isNextLineEmpty$4(options2.originalText, arg, options2.locEnd)) {
                        if (index2 === 0) {
                            hasEmptyLineFollowingFirstArg = true;
                        }
                        anyArgEmptyLine = true;
                        parts.push(",", hardline$9, hardline$9);
                    } else {
                        parts.push(",", line$9);
                    }
                    shouldBreakForArrowFunction = shouldBreakForArrowFunctionInArguments(arg, argPath);
                    return concat$d(parts);
                }, "arguments");
                const maybeTrailingComma = // Dynamic imports cannot have trailing commas
                !(node.callee && node.callee.type === "Import") && shouldPrintComma$1(options2, "all") ? "," : "";
                function allArgsBrokenOut() {
                    return group$b(concat$d([
                        "(",
                        indent$7(concat$d([
                            line$9,
                            concat$d(printedArguments)
                        ])),
                        maybeTrailingComma,
                        line$9,
                        ")"
                    ]), {
                        shouldBreak: true
                    });
                }
                if (path6.getParentNode().type !== "Decorator" && isFunctionCompositionArgs$1(args)) {
                    return allArgsBrokenOut();
                }
                const shouldGroupFirst = shouldGroupFirstArg(args);
                const shouldGroupLast = shouldGroupLastArg(args);
                if (shouldGroupFirst || shouldGroupLast) {
                    const shouldBreak = (shouldGroupFirst ? printedArguments.slice(1).some(willBreak$1) : printedArguments.slice(0, -1).some(willBreak$1)) || anyArgEmptyLine || shouldBreakForArrowFunction;
                    let printedExpanded;
                    let i = 0;
                    path6.each((argPath)=>{
                        if (shouldGroupFirst && i === 0) {
                            printedExpanded = [
                                concat$d([
                                    argPath.call((p2)=>print2(p2, {
                                            expandFirstArg: true
                                        })),
                                    printedArguments.length > 1 ? "," : "",
                                    hasEmptyLineFollowingFirstArg ? hardline$9 : line$9,
                                    hasEmptyLineFollowingFirstArg ? hardline$9 : ""
                                ])
                            ].concat(printedArguments.slice(1));
                        }
                        if (shouldGroupLast && i === args.length - 1) {
                            printedExpanded = printedArguments.slice(0, -1).concat(argPath.call((p2)=>print2(p2, {
                                    expandLastArg: true
                                })));
                        }
                        i++;
                    }, "arguments");
                    const somePrintedArgumentsWillBreak = printedArguments.some(willBreak$1);
                    const simpleConcat = concat$d([
                        "(",
                        concat$d(printedExpanded),
                        ")"
                    ]);
                    return concat$d([
                        somePrintedArgumentsWillBreak ? breakParent$3 : "",
                        conditionalGroup$1([
                            !somePrintedArgumentsWillBreak && !node.typeArguments && !node.typeParameters ? simpleConcat : ifBreak$6(allArgsBrokenOut(), simpleConcat),
                            shouldGroupFirst ? concat$d([
                                "(",
                                group$b(printedExpanded[0], {
                                    shouldBreak: true
                                }),
                                concat$d(printedExpanded.slice(1)),
                                ")"
                            ]) : concat$d([
                                "(",
                                concat$d(printedArguments.slice(0, -1)),
                                group$b(getLast$3(printedExpanded), {
                                    shouldBreak: true
                                }),
                                ")"
                            ]),
                            allArgsBrokenOut()
                        ], {
                            shouldBreak
                        })
                    ]);
                }
                const contents = concat$d([
                    "(",
                    indent$7(concat$d([
                        softline$6,
                        concat$d(printedArguments)
                    ])),
                    ifBreak$6(maybeTrailingComma),
                    softline$6,
                    ")"
                ]);
                if (isLongCurriedCallExpression$1(path6)) {
                    return contents;
                }
                return group$b(contents, {
                    shouldBreak: printedArguments.some(willBreak$1) || anyArgEmptyLine
                });
            }
            function printTypeAnnotation(path6, options2, print2) {
                const node = path6.getValue();
                if (!node.typeAnnotation) {
                    return "";
                }
                const parentNode = path6.getParentNode();
                const isDefinite = node.definite || parentNode && parentNode.type === "VariableDeclarator" && parentNode.definite;
                const isFunctionDeclarationIdentifier = parentNode.type === "DeclareFunction" && parentNode.id === node;
                if (isFlowAnnotationComment$1(options2.originalText, node.typeAnnotation, options2)) {
                    return concat$d([
                        " /*: ",
                        path6.call(print2, "typeAnnotation"),
                        " */"
                    ]);
                }
                return concat$d([
                    isFunctionDeclarationIdentifier ? "" : isDefinite ? "!: " : ": ",
                    path6.call(print2, "typeAnnotation")
                ]);
            }
            function printFunctionTypeParameters(path6, options2, print2) {
                const fun = path6.getValue();
                if (fun.typeArguments) {
                    return path6.call(print2, "typeArguments");
                }
                if (fun.typeParameters) {
                    return path6.call(print2, "typeParameters");
                }
                return "";
            }
            function printFunctionParams(path6, print2, options2, expandArg, printTypeParams) {
                const fun = path6.getValue();
                const parent = path6.getParentNode();
                const paramsField = fun.parameters ? "parameters" : "params";
                const isParametersInTestCall = isTestCall$1(parent);
                const shouldHugParameters = shouldHugArguments(fun);
                const shouldExpandParameters = expandArg && !(fun[paramsField] && fun[paramsField].some((n)=>n.comments));
                const typeParams = printTypeParams ? printFunctionTypeParameters(path6, options2, print2) : "";
                let printed = [];
                if (fun[paramsField]) {
                    const lastArgIndex = fun[paramsField].length - 1;
                    printed = path6.map((childPath, index2)=>{
                        const parts = [];
                        const param2 = childPath.getValue();
                        parts.push(print2(childPath));
                        if (index2 === lastArgIndex) {
                            if (fun.rest) {
                                parts.push(",", line$9);
                            }
                        } else if (isParametersInTestCall || shouldHugParameters || shouldExpandParameters) {
                            parts.push(", ");
                        } else if (isNextLineEmpty$4(options2.originalText, param2, options2.locEnd)) {
                            parts.push(",", hardline$9, hardline$9);
                        } else {
                            parts.push(",", line$9);
                        }
                        return concat$d(parts);
                    }, paramsField);
                }
                if (fun.rest) {
                    printed.push(concat$d([
                        "...",
                        path6.call(print2, "rest")
                    ]));
                }
                if (printed.length === 0) {
                    return concat$d([
                        typeParams,
                        "(",
                        comments.printDanglingComments(path6, options2, /* sameIndent */ true, (comment)=>getNextNonSpaceNonCommentCharacter$1(options2.originalText, comment, options2.locEnd) === ")"),
                        ")"
                    ]);
                }
                const lastParam = getLast$3(fun[paramsField]);
                if (shouldExpandParameters) {
                    return group$b(concat$d([
                        removeLines$2(typeParams),
                        "(",
                        concat$d(printed.map(removeLines$2)),
                        ")"
                    ]));
                }
                const hasNotParameterDecorator = fun[paramsField].every((param2)=>!param2.decorators);
                if (shouldHugParameters && hasNotParameterDecorator) {
                    return concat$d([
                        typeParams,
                        "(",
                        concat$d(printed),
                        ")"
                    ]);
                }
                if (isParametersInTestCall) {
                    return concat$d([
                        typeParams,
                        "(",
                        concat$d(printed),
                        ")"
                    ]);
                }
                const isFlowShorthandWithOneArg = (isObjectTypePropertyAFunction$1(parent, options2) || isTypeAnnotationAFunction$1(parent, options2) || parent.type === "TypeAlias" || parent.type === "UnionTypeAnnotation" || parent.type === "TSUnionType" || parent.type === "IntersectionTypeAnnotation" || parent.type === "FunctionTypeAnnotation" && parent.returnType === fun) && fun[paramsField].length === 1 && fun[paramsField][0].name === null && fun[paramsField][0].typeAnnotation && fun.typeParameters === null && isSimpleFlowType$1(fun[paramsField][0].typeAnnotation) && !fun.rest;
                if (isFlowShorthandWithOneArg) {
                    if (options2.arrowParens === "always") {
                        return concat$d([
                            "(",
                            concat$d(printed),
                            ")"
                        ]);
                    }
                    return concat$d(printed);
                }
                const canHaveTrailingComma = !(lastParam && lastParam.type === "RestElement") && !fun.rest;
                return concat$d([
                    typeParams,
                    "(",
                    indent$7(concat$d([
                        softline$6,
                        concat$d(printed)
                    ])),
                    ifBreak$6(canHaveTrailingComma && shouldPrintComma$1(options2, "all") ? "," : ""),
                    softline$6,
                    ")"
                ]);
            }
            function shouldPrintParamsWithoutParens(path6, options2) {
                if (options2.arrowParens === "always") {
                    return false;
                }
                if (options2.arrowParens === "avoid") {
                    const node = path6.getValue();
                    return canPrintParamsWithoutParens(node);
                }
                return false;
            }
            function canPrintParamsWithoutParens(node) {
                return node.params.length === 1 && !node.rest && !node.typeParameters && !hasDanglingComments$1(node) && node.params[0].type === "Identifier" && !node.params[0].typeAnnotation && !node.params[0].comments && !node.params[0].optional && !node.predicate && !node.returnType;
            }
            function printFunctionDeclaration(path6, print2, options2) {
                const n = path6.getValue();
                const parts = [];
                if (n.async) {
                    parts.push("async ");
                }
                if (n.generator) {
                    parts.push("function* ");
                } else {
                    parts.push("function ");
                }
                if (n.id) {
                    parts.push(path6.call(print2, "id"));
                }
                parts.push(printFunctionTypeParameters(path6, options2, print2), group$b(concat$d([
                    printFunctionParams(path6, print2, options2),
                    printReturnType(path6, print2, options2)
                ])), n.body ? " " : "", path6.call(print2, "body"));
                return concat$d(parts);
            }
            function printReturnType(path6, print2, options2) {
                const n = path6.getValue();
                const returnType = path6.call(print2, "returnType");
                if (n.returnType && isFlowAnnotationComment$1(options2.originalText, n.returnType, options2)) {
                    return concat$d([
                        " /*: ",
                        returnType,
                        " */"
                    ]);
                }
                const parts = [
                    returnType
                ];
                if (n.returnType && n.returnType.typeAnnotation) {
                    parts.unshift(": ");
                }
                if (n.predicate) {
                    parts.push(n.returnType ? " " : ": ", path6.call(print2, "predicate"));
                }
                return concat$d(parts);
            }
            function printExportDeclaration(path6, options2, print2) {
                const decl = path6.getValue();
                const semi = options2.semi ? ";" : "";
                const parts = [
                    "export "
                ];
                const isDefault = decl.default || decl.type === "ExportDefaultDeclaration";
                if (isDefault) {
                    parts.push("default ");
                }
                parts.push(comments.printDanglingComments(path6, options2, /* sameIndent */ true));
                if (needsHardlineAfterDanglingComment$1(decl)) {
                    parts.push(hardline$9);
                }
                if (decl.declaration) {
                    parts.push(path6.call(print2, "declaration"));
                    if (isDefault && decl.declaration.type !== "ClassDeclaration" && decl.declaration.type !== "FunctionDeclaration" && decl.declaration.type !== "TSInterfaceDeclaration" && decl.declaration.type !== "DeclareClass" && decl.declaration.type !== "DeclareFunction" && decl.declaration.type !== "TSDeclareFunction") {
                        parts.push(semi);
                    }
                } else {
                    if (decl.specifiers && decl.specifiers.length > 0) {
                        const specifiers = [];
                        const defaultSpecifiers = [];
                        const namespaceSpecifiers = [];
                        path6.each((specifierPath)=>{
                            const specifierType = path6.getValue().type;
                            if (specifierType === "ExportSpecifier") {
                                specifiers.push(print2(specifierPath));
                            } else if (specifierType === "ExportDefaultSpecifier") {
                                defaultSpecifiers.push(print2(specifierPath));
                            } else if (specifierType === "ExportNamespaceSpecifier") {
                                namespaceSpecifiers.push(concat$d([
                                    "* as ",
                                    print2(specifierPath)
                                ]));
                            }
                        }, "specifiers");
                        const isNamespaceFollowed = namespaceSpecifiers.length !== 0 && specifiers.length !== 0;
                        const isDefaultFollowed = defaultSpecifiers.length !== 0 && (namespaceSpecifiers.length !== 0 || specifiers.length !== 0);
                        const canBreak = specifiers.length > 1 || defaultSpecifiers.length > 0 || decl.specifiers && decl.specifiers.some((node)=>node.comments);
                        let printed = "";
                        if (specifiers.length !== 0) {
                            if (canBreak) {
                                printed = group$b(concat$d([
                                    "{",
                                    indent$7(concat$d([
                                        options2.bracketSpacing ? line$9 : softline$6,
                                        join$9(concat$d([
                                            ",",
                                            line$9
                                        ]), specifiers)
                                    ])),
                                    ifBreak$6(shouldPrintComma$1(options2) ? "," : ""),
                                    options2.bracketSpacing ? line$9 : softline$6,
                                    "}"
                                ]));
                            } else {
                                printed = concat$d([
                                    "{",
                                    options2.bracketSpacing ? " " : "",
                                    concat$d(specifiers),
                                    options2.bracketSpacing ? " " : "",
                                    "}"
                                ]);
                            }
                        }
                        parts.push(decl.exportKind === "type" ? "type " : "", concat$d(defaultSpecifiers), concat$d([
                            isDefaultFollowed ? ", " : ""
                        ]), concat$d(namespaceSpecifiers), concat$d([
                            isNamespaceFollowed ? ", " : ""
                        ]), printed);
                    } else {
                        parts.push("{}");
                    }
                    if (decl.source) {
                        parts.push(" from ", path6.call(print2, "source"));
                    }
                    parts.push(semi);
                }
                return concat$d(parts);
            }
            function printFlowDeclaration(path6, parts) {
                const parentExportDecl = getParentExportDeclaration$1(path6);
                if (parentExportDecl) {
                    assert.strictEqual(parentExportDecl.type, "DeclareExportDeclaration");
                } else {
                    parts.unshift("declare ");
                }
                return concat$d(parts);
            }
            function printTypeScriptModifiers(path6, options2, print2) {
                const n = path6.getValue();
                if (!n.modifiers || !n.modifiers.length) {
                    return "";
                }
                return concat$d([
                    join$9(" ", path6.map(print2, "modifiers")),
                    " "
                ]);
            }
            function printTypeParameters(path6, options2, print2, paramsKey) {
                const n = path6.getValue();
                if (!n[paramsKey]) {
                    return "";
                }
                if (!Array.isArray(n[paramsKey])) {
                    return path6.call(print2, paramsKey);
                }
                const grandparent = path6.getNode(2);
                const greatGrandParent = path6.getNode(3);
                const greatGreatGrandParent = path6.getNode(4);
                const isParameterInTestCall = grandparent != null && isTestCall$1(grandparent);
                const shouldInline = isParameterInTestCall || n[paramsKey].length === 0 || n[paramsKey].length === 1 && (shouldHugType(n[paramsKey][0]) || n[paramsKey][0].type === "GenericTypeAnnotation" && shouldHugType(n[paramsKey][0].id) || n[paramsKey][0].type === "TSTypeReference" && shouldHugType(n[paramsKey][0].typeName) || n[paramsKey][0].type === "NullableTypeAnnotation" || // See https://github.com/prettier/prettier/pull/6467 for the context.
                greatGreatGrandParent && greatGreatGrandParent.type === "VariableDeclarator" && grandparent.type === "TSTypeAnnotation" && greatGrandParent.type !== "ArrowFunctionExpression" && n[paramsKey][0].type !== "TSUnionType" && n[paramsKey][0].type !== "UnionTypeAnnotation" && n[paramsKey][0].type !== "TSIntersectionType" && n[paramsKey][0].type !== "IntersectionTypeAnnotation" && n[paramsKey][0].type !== "TSConditionalType" && n[paramsKey][0].type !== "TSMappedType" && n[paramsKey][0].type !== "TSTypeOperator" && n[paramsKey][0].type !== "TSIndexedAccessType" && n[paramsKey][0].type !== "TSArrayType");
                function printDanglingCommentsForInline(n2) {
                    if (!hasDanglingComments$1(n2)) {
                        return "";
                    }
                    const hasOnlyBlockComments = n2.comments.every(comments$1.isBlockComment);
                    const printed = comments.printDanglingComments(path6, options2, /* sameIndent */ hasOnlyBlockComments);
                    if (hasOnlyBlockComments) {
                        return printed;
                    }
                    return concat$d([
                        printed,
                        hardline$9
                    ]);
                }
                if (shouldInline) {
                    return concat$d([
                        "<",
                        join$9(", ", path6.map(print2, paramsKey)),
                        printDanglingCommentsForInline(n),
                        ">"
                    ]);
                }
                return group$b(concat$d([
                    "<",
                    indent$7(concat$d([
                        softline$6,
                        join$9(concat$d([
                            ",",
                            line$9
                        ]), path6.map(print2, paramsKey))
                    ])),
                    ifBreak$6(options2.parser !== "typescript" && options2.parser !== "babel-ts" && shouldPrintComma$1(options2, "all") ? "," : ""),
                    softline$6,
                    ">"
                ]));
            }
            function printClass(path6, options2, print2) {
                const n = path6.getValue();
                const parts = [];
                if (n.abstract) {
                    parts.push("abstract ");
                }
                parts.push("class");
                if (n.id) {
                    parts.push(" ", path6.call(print2, "id"));
                }
                parts.push(path6.call(print2, "typeParameters"));
                const partsGroup = [];
                if (n.superClass) {
                    const printed = concat$d([
                        "extends ",
                        path6.call(print2, "superClass"),
                        path6.call(print2, "superTypeParameters")
                    ]);
                    if ((!n.implements || n.implements.length === 0) && (!n.superClass.comments || n.superClass.comments.length === 0)) {
                        parts.push(concat$d([
                            " ",
                            path6.call((superClass)=>comments.printComments(superClass, ()=>printed, options2), "superClass")
                        ]));
                    } else {
                        partsGroup.push(group$b(concat$d([
                            line$9,
                            path6.call((superClass)=>comments.printComments(superClass, ()=>printed, options2), "superClass")
                        ])));
                    }
                } else if (n.extends && n.extends.length > 0) {
                    parts.push(" extends ", join$9(", ", path6.map(print2, "extends")));
                }
                if (n.mixins && n.mixins.length > 0) {
                    partsGroup.push(line$9, "mixins ", group$b(indent$7(join$9(concat$d([
                        ",",
                        line$9
                    ]), path6.map(print2, "mixins")))));
                }
                if (n.implements && n.implements.length > 0) {
                    partsGroup.push(line$9, "implements", group$b(indent$7(concat$d([
                        line$9,
                        join$9(concat$d([
                            ",",
                            line$9
                        ]), path6.map(print2, "implements"))
                    ]))));
                }
                if (partsGroup.length > 0) {
                    parts.push(group$b(indent$7(concat$d(partsGroup))));
                }
                if (n.body && n.body.comments && hasLeadingOwnLineComment$1(options2.originalText, n.body, options2)) {
                    parts.push(hardline$9);
                } else {
                    parts.push(" ");
                }
                parts.push(path6.call(print2, "body"));
                return parts;
            }
            function printOptionalToken(path6) {
                const node = path6.getValue();
                if (!node.optional || // It's an optional computed method parsed by typescript-estree.
                // "?" is printed in `printMethod`.
                node.type === "Identifier" && node === path6.getParentNode().key) {
                    return "";
                }
                if (node.type === "OptionalCallExpression" || node.type === "OptionalMemberExpression" && node.computed) {
                    return "?.";
                }
                return "?";
            }
            function printMemberLookup(path6, options2, print2) {
                const property = path6.call(print2, "property");
                const n = path6.getValue();
                const optional = printOptionalToken(path6);
                if (!n.computed) {
                    return concat$d([
                        optional,
                        ".",
                        property
                    ]);
                }
                if (!n.property || isNumericLiteral$1(n.property)) {
                    return concat$d([
                        optional,
                        "[",
                        property,
                        "]"
                    ]);
                }
                return group$b(concat$d([
                    optional,
                    "[",
                    indent$7(concat$d([
                        softline$6,
                        property
                    ])),
                    softline$6,
                    "]"
                ]));
            }
            function printBindExpressionCallee(path6, options2, print2) {
                return concat$d([
                    "::",
                    path6.call(print2, "callee")
                ]);
            }
            function printMemberChain(path6, options2, print2) {
                const printedNodes = [];
                function shouldInsertEmptyLineAfter(node2) {
                    const { originalText  } = options2;
                    const nextCharIndex = getNextNonSpaceNonCommentCharacterIndex$3(originalText, node2, options2.locEnd);
                    const nextChar = originalText.charAt(nextCharIndex);
                    if (nextChar === ")") {
                        return isNextLineEmptyAfterIndex$2(originalText, nextCharIndex + 1, options2.locEnd);
                    }
                    return isNextLineEmpty$4(originalText, node2, options2.locEnd);
                }
                function rec(path7) {
                    const node2 = path7.getValue();
                    if ((node2.type === "CallExpression" || node2.type === "OptionalCallExpression") && (isMemberish$1(node2.callee) || node2.callee.type === "CallExpression" || node2.callee.type === "OptionalCallExpression")) {
                        printedNodes.unshift({
                            node: node2,
                            printed: concat$d([
                                comments.printComments(path7, ()=>concat$d([
                                        printOptionalToken(path7),
                                        printFunctionTypeParameters(path7, options2, print2),
                                        printArgumentsList(path7, options2, print2)
                                    ]), options2),
                                shouldInsertEmptyLineAfter(node2) ? hardline$9 : ""
                            ])
                        });
                        path7.call((callee)=>rec(callee), "callee");
                    } else if (isMemberish$1(node2)) {
                        printedNodes.unshift({
                            node: node2,
                            needsParens: needsParens_1(path7, options2),
                            printed: comments.printComments(path7, ()=>node2.type === "OptionalMemberExpression" || node2.type === "MemberExpression" ? printMemberLookup(path7, options2, print2) : printBindExpressionCallee(path7, options2, print2), options2)
                        });
                        path7.call((object2)=>rec(object2), "object");
                    } else if (node2.type === "TSNonNullExpression") {
                        printedNodes.unshift({
                            node: node2,
                            printed: comments.printComments(path7, ()=>"!", options2)
                        });
                        path7.call((expression)=>rec(expression), "expression");
                    } else {
                        printedNodes.unshift({
                            node: node2,
                            printed: path7.call(print2)
                        });
                    }
                }
                const node = path6.getValue();
                printedNodes.unshift({
                    node,
                    printed: concat$d([
                        printOptionalToken(path6),
                        printFunctionTypeParameters(path6, options2, print2),
                        printArgumentsList(path6, options2, print2)
                    ])
                });
                path6.call((callee)=>rec(callee), "callee");
                const groups = [];
                let currentGroup = [
                    printedNodes[0]
                ];
                let i = 1;
                for(; i < printedNodes.length; ++i){
                    if (printedNodes[i].node.type === "TSNonNullExpression" || printedNodes[i].node.type === "OptionalCallExpression" || printedNodes[i].node.type === "CallExpression" || (printedNodes[i].node.type === "MemberExpression" || printedNodes[i].node.type === "OptionalMemberExpression") && printedNodes[i].node.computed && isNumericLiteral$1(printedNodes[i].node.property)) {
                        currentGroup.push(printedNodes[i]);
                    } else {
                        break;
                    }
                }
                if (printedNodes[0].node.type !== "CallExpression" && printedNodes[0].node.type !== "OptionalCallExpression") {
                    for(; i + 1 < printedNodes.length; ++i){
                        if (isMemberish$1(printedNodes[i].node) && isMemberish$1(printedNodes[i + 1].node)) {
                            currentGroup.push(printedNodes[i]);
                        } else {
                            break;
                        }
                    }
                }
                groups.push(currentGroup);
                currentGroup = [];
                let hasSeenCallExpression = false;
                for(; i < printedNodes.length; ++i){
                    if (hasSeenCallExpression && isMemberish$1(printedNodes[i].node)) {
                        if (printedNodes[i].node.computed && isNumericLiteral$1(printedNodes[i].node.property)) {
                            currentGroup.push(printedNodes[i]);
                            continue;
                        }
                        groups.push(currentGroup);
                        currentGroup = [];
                        hasSeenCallExpression = false;
                    }
                    if (printedNodes[i].node.type === "CallExpression" || printedNodes[i].node.type === "OptionalCallExpression") {
                        hasSeenCallExpression = true;
                    }
                    currentGroup.push(printedNodes[i]);
                    if (printedNodes[i].node.comments && printedNodes[i].node.comments.some((comment)=>comment.trailing)) {
                        groups.push(currentGroup);
                        currentGroup = [];
                        hasSeenCallExpression = false;
                    }
                }
                if (currentGroup.length > 0) {
                    groups.push(currentGroup);
                }
                function isFactory(name2) {
                    return /^[A-Z]|^[_$]+$/.test(name2);
                }
                function isShort(name2) {
                    return name2.length <= options2.tabWidth;
                }
                function shouldNotWrap(groups2) {
                    const parent = path6.getParentNode();
                    const isExpression = parent && parent.type === "ExpressionStatement";
                    const hasComputed = groups2[1].length && groups2[1][0].node.computed;
                    if (groups2[0].length === 1) {
                        const firstNode = groups2[0][0].node;
                        return firstNode.type === "ThisExpression" || firstNode.type === "Identifier" && (isFactory(firstNode.name) || isExpression && isShort(firstNode.name) || hasComputed);
                    }
                    const lastNode = getLast$3(groups2[0]).node;
                    return (lastNode.type === "MemberExpression" || lastNode.type === "OptionalMemberExpression") && lastNode.property.type === "Identifier" && (isFactory(lastNode.property.name) || hasComputed);
                }
                const shouldMerge = groups.length >= 2 && !groups[1][0].node.comments && shouldNotWrap(groups);
                function printGroup(printedGroup) {
                    const printed = printedGroup.map((tuple)=>tuple.printed);
                    if (printedGroup.length > 0 && printedGroup[printedGroup.length - 1].needsParens) {
                        return concat$d([
                            "(",
                            ...printed,
                            ")"
                        ]);
                    }
                    return concat$d(printed);
                }
                function printIndentedGroup(groups2) {
                    if (groups2.length === 0) {
                        return "";
                    }
                    return indent$7(group$b(concat$d([
                        hardline$9,
                        join$9(hardline$9, groups2.map(printGroup))
                    ])));
                }
                const printedGroups = groups.map(printGroup);
                const oneLine = concat$d(printedGroups);
                const cutoff = shouldMerge ? 3 : 2;
                const flatGroups = groups.reduce((res, group2)=>res.concat(group2), []);
                const hasComment = flatGroups.slice(1, -1).some((node2)=>hasLeadingComment$3(node2.node)) || flatGroups.slice(0, -1).some((node2)=>hasTrailingComment$1(node2.node)) || groups[cutoff] && hasLeadingComment$3(groups[cutoff][0].node);
                if (groups.length <= cutoff && !hasComment) {
                    if (isLongCurriedCallExpression$1(path6)) {
                        return oneLine;
                    }
                    return group$b(oneLine);
                }
                const lastNodeBeforeIndent = getLast$3(shouldMerge ? groups.slice(1, 2)[0] : groups[0]).node;
                const shouldHaveEmptyLineBeforeIndent = lastNodeBeforeIndent.type !== "CallExpression" && lastNodeBeforeIndent.type !== "OptionalCallExpression" && shouldInsertEmptyLineAfter(lastNodeBeforeIndent);
                const expanded = concat$d([
                    printGroup(groups[0]),
                    shouldMerge ? concat$d(groups.slice(1, 2).map(printGroup)) : "",
                    shouldHaveEmptyLineBeforeIndent ? hardline$9 : "",
                    printIndentedGroup(groups.slice(shouldMerge ? 2 : 1))
                ]);
                const callExpressions = printedNodes.map(({ node: node2  })=>node2).filter(isCallOrOptionalCallExpression$1);
                if (hasComment || callExpressions.length > 2 && callExpressions.some((expr)=>!expr.arguments.every((arg)=>isSimpleCallArgument$1(arg, 0))) || printedGroups.slice(0, -1).some(willBreak$1) || /**
         *     scopes.filter(scope => scope.value !== '').map((scope, i) => {
         *       // multi line content
         *     })
         */ ((lastGroupDoc, lastGroupNode)=>isCallOrOptionalCallExpression$1(lastGroupNode) && willBreak$1(lastGroupDoc))(getLast$3(printedGroups), getLast$3(getLast$3(groups)).node) && callExpressions.slice(0, -1).some((n)=>n.arguments.some(isFunctionOrArrowExpression$1))) {
                    return group$b(expanded);
                }
                return concat$d([
                    // We only need to check `oneLine` because if `expanded` is chosen
                    // that means that the parent group has already been broken
                    // naturally
                    willBreak$1(oneLine) || shouldHaveEmptyLineBeforeIndent ? breakParent$3 : "",
                    conditionalGroup$1([
                        oneLine,
                        expanded
                    ])
                ]);
            }
            function separatorNoWhitespace(isFacebookTranslationTag, child, childNode, nextNode) {
                if (isFacebookTranslationTag) {
                    return "";
                }
                if (childNode.type === "JSXElement" && !childNode.closingElement || nextNode && nextNode.type === "JSXElement" && !nextNode.closingElement) {
                    return child.length === 1 ? softline$6 : hardline$9;
                }
                return softline$6;
            }
            function separatorWithWhitespace(isFacebookTranslationTag, child, childNode, nextNode) {
                if (isFacebookTranslationTag) {
                    return hardline$9;
                }
                if (child.length === 1) {
                    return childNode.type === "JSXElement" && !childNode.closingElement || nextNode && nextNode.type === "JSXElement" && !nextNode.closingElement ? hardline$9 : softline$6;
                }
                return hardline$9;
            }
            function printJSXChildren(path6, options2, print2, jsxWhitespace, isFacebookTranslationTag) {
                const n = path6.getValue();
                const children = [];
                path6.map((childPath, i)=>{
                    const child = childPath.getValue();
                    if (isLiteral$1(child)) {
                        const text = rawText$1(child);
                        if (isMeaningfulJSXText$1(child)) {
                            const words = text.split(matchJsxWhitespaceRegex$1);
                            if (words[0] === "") {
                                children.push("");
                                words.shift();
                                if (/\n/.test(words[0])) {
                                    const next = n.children[i + 1];
                                    children.push(separatorWithWhitespace(isFacebookTranslationTag, words[1], child, next));
                                } else {
                                    children.push(jsxWhitespace);
                                }
                                words.shift();
                            }
                            let endWhitespace;
                            if (getLast$3(words) === "") {
                                words.pop();
                                endWhitespace = words.pop();
                            }
                            if (words.length === 0) {
                                return;
                            }
                            words.forEach((word, i2)=>{
                                if (i2 % 2 === 1) {
                                    children.push(line$9);
                                } else {
                                    children.push(word);
                                }
                            });
                            if (endWhitespace !== void 0) {
                                if (/\n/.test(endWhitespace)) {
                                    const next = n.children[i + 1];
                                    children.push(separatorWithWhitespace(isFacebookTranslationTag, getLast$3(children), child, next));
                                } else {
                                    children.push(jsxWhitespace);
                                }
                            } else {
                                const next = n.children[i + 1];
                                children.push(separatorNoWhitespace(isFacebookTranslationTag, getLast$3(children), child, next));
                            }
                        } else if (/\n/.test(text)) {
                            if (text.match(/\n/g).length > 1) {
                                children.push("");
                                children.push(hardline$9);
                            }
                        } else {
                            children.push("");
                            children.push(jsxWhitespace);
                        }
                    } else {
                        const printedChild = print2(childPath);
                        children.push(printedChild);
                        const next = n.children[i + 1];
                        const directlyFollowedByMeaningfulText = next && isMeaningfulJSXText$1(next);
                        if (directlyFollowedByMeaningfulText) {
                            const firstWord = rawText$1(next).trim().split(matchJsxWhitespaceRegex$1)[0];
                            children.push(separatorNoWhitespace(isFacebookTranslationTag, firstWord, child, next));
                        } else {
                            children.push(hardline$9);
                        }
                    }
                }, "children");
                return children;
            }
            function printJSXElement(path6, options2, print2) {
                const n = path6.getValue();
                if (n.type === "JSXElement" && isEmptyJSXElement$1(n)) {
                    return concat$d([
                        path6.call(print2, "openingElement"),
                        path6.call(print2, "closingElement")
                    ]);
                }
                const openingLines = n.type === "JSXElement" ? path6.call(print2, "openingElement") : path6.call(print2, "openingFragment");
                const closingLines = n.type === "JSXElement" ? path6.call(print2, "closingElement") : path6.call(print2, "closingFragment");
                if (n.children.length === 1 && n.children[0].type === "JSXExpressionContainer" && (n.children[0].expression.type === "TemplateLiteral" || n.children[0].expression.type === "TaggedTemplateExpression")) {
                    return concat$d([
                        openingLines,
                        concat$d(path6.map(print2, "children")),
                        closingLines
                    ]);
                }
                n.children = n.children.map((child)=>{
                    if (isJSXWhitespaceExpression$1(child)) {
                        return {
                            type: "JSXText",
                            value: " ",
                            raw: " "
                        };
                    }
                    return child;
                });
                const containsTag = n.children.filter(isJSXNode$1).length > 0;
                const containsMultipleExpressions = n.children.filter((child)=>child.type === "JSXExpressionContainer").length > 1;
                const containsMultipleAttributes = n.type === "JSXElement" && n.openingElement.attributes.length > 1;
                let forcedBreak = willBreak$1(openingLines) || containsTag || containsMultipleAttributes || containsMultipleExpressions;
                const isMdxBlock = path6.getParentNode().rootMarker === "mdx";
                const rawJsxWhitespace = options2.singleQuote ? "{' '}" : '{" "}';
                const jsxWhitespace = isMdxBlock ? concat$d([
                    " "
                ]) : ifBreak$6(concat$d([
                    rawJsxWhitespace,
                    softline$6
                ]), " ");
                const isFacebookTranslationTag = n.openingElement && n.openingElement.name && n.openingElement.name.name === "fbt";
                const children = printJSXChildren(path6, options2, print2, jsxWhitespace, isFacebookTranslationTag);
                const containsText = n.children.some((child)=>isMeaningfulJSXText$1(child));
                for(let i = children.length - 2; i >= 0; i--){
                    const isPairOfEmptyStrings = children[i] === "" && children[i + 1] === "";
                    const isPairOfHardlines = children[i] === hardline$9 && children[i + 1] === "" && children[i + 2] === hardline$9;
                    const isLineFollowedByJSXWhitespace = (children[i] === softline$6 || children[i] === hardline$9) && children[i + 1] === "" && children[i + 2] === jsxWhitespace;
                    const isJSXWhitespaceFollowedByLine = children[i] === jsxWhitespace && children[i + 1] === "" && (children[i + 2] === softline$6 || children[i + 2] === hardline$9);
                    const isDoubleJSXWhitespace = children[i] === jsxWhitespace && children[i + 1] === "" && children[i + 2] === jsxWhitespace;
                    const isPairOfHardOrSoftLines = children[i] === softline$6 && children[i + 1] === "" && children[i + 2] === hardline$9 || children[i] === hardline$9 && children[i + 1] === "" && children[i + 2] === softline$6;
                    if (isPairOfHardlines && containsText || isPairOfEmptyStrings || isLineFollowedByJSXWhitespace || isDoubleJSXWhitespace || isPairOfHardOrSoftLines) {
                        children.splice(i, 2);
                    } else if (isJSXWhitespaceFollowedByLine) {
                        children.splice(i + 1, 2);
                    }
                }
                while(children.length && (isLineNext$1(getLast$3(children)) || isEmpty$1(getLast$3(children)))){
                    children.pop();
                }
                while(children.length && (isLineNext$1(children[0]) || isEmpty$1(children[0])) && (isLineNext$1(children[1]) || isEmpty$1(children[1]))){
                    children.shift();
                    children.shift();
                }
                const multilineChildren = [];
                children.forEach((child, i)=>{
                    if (child === jsxWhitespace) {
                        if (i === 1 && children[i - 1] === "") {
                            if (children.length === 2) {
                                multilineChildren.push(rawJsxWhitespace);
                                return;
                            }
                            multilineChildren.push(concat$d([
                                rawJsxWhitespace,
                                hardline$9
                            ]));
                            return;
                        } else if (i === children.length - 1) {
                            multilineChildren.push(rawJsxWhitespace);
                            return;
                        } else if (children[i - 1] === "" && children[i - 2] === hardline$9) {
                            multilineChildren.push(rawJsxWhitespace);
                            return;
                        }
                    }
                    multilineChildren.push(child);
                    if (willBreak$1(child)) {
                        forcedBreak = true;
                    }
                });
                const content = containsText ? fill$4(multilineChildren) : group$b(concat$d(multilineChildren), {
                    shouldBreak: true
                });
                if (isMdxBlock) {
                    return content;
                }
                const multiLineElem = group$b(concat$d([
                    openingLines,
                    indent$7(concat$d([
                        hardline$9,
                        content
                    ])),
                    hardline$9,
                    closingLines
                ]));
                if (forcedBreak) {
                    return multiLineElem;
                }
                return conditionalGroup$1([
                    group$b(concat$d([
                        openingLines,
                        concat$d(children),
                        closingLines
                    ])),
                    multiLineElem
                ]);
            }
            function maybeWrapJSXElementInParens(path6, elem, options2) {
                const parent = path6.getParentNode();
                if (!parent) {
                    return elem;
                }
                const NO_WRAP_PARENTS = {
                    ArrayExpression: true,
                    JSXAttribute: true,
                    JSXElement: true,
                    JSXExpressionContainer: true,
                    JSXFragment: true,
                    ExpressionStatement: true,
                    CallExpression: true,
                    OptionalCallExpression: true,
                    ConditionalExpression: true,
                    JsExpressionRoot: true
                };
                if (NO_WRAP_PARENTS[parent.type]) {
                    return elem;
                }
                const shouldBreak = path6.match(void 0, (node)=>node.type === "ArrowFunctionExpression", isCallOrOptionalCallExpression$1, (node)=>node.type === "JSXExpressionContainer");
                const needsParens2 = needsParens_1(path6, options2);
                return group$b(concat$d([
                    needsParens2 ? "" : ifBreak$6("("),
                    indent$7(concat$d([
                        softline$6,
                        elem
                    ])),
                    softline$6,
                    needsParens2 ? "" : ifBreak$6(")")
                ]), {
                    shouldBreak
                });
            }
            function shouldInlineLogicalExpression(node) {
                if (node.type !== "LogicalExpression") {
                    return false;
                }
                if (node.right.type === "ObjectExpression" && node.right.properties.length !== 0) {
                    return true;
                }
                if (node.right.type === "ArrayExpression" && node.right.elements.length !== 0) {
                    return true;
                }
                if (isJSXNode$1(node.right)) {
                    return true;
                }
                return false;
            }
            function printBinaryishExpressions(path6, print2, options2, isNested, isInsideParenthesis) {
                let parts = [];
                const node = path6.getValue();
                if (isBinaryish$1(node)) {
                    if (shouldFlatten$1(node.operator, node.left.operator)) {
                        parts = parts.concat(path6.call((left)=>printBinaryishExpressions(left, print2, options2, /* isNested */ true, isInsideParenthesis), "left"));
                    } else {
                        parts.push(path6.call(print2, "left"));
                    }
                    const shouldInline = shouldInlineLogicalExpression(node);
                    const lineBeforeOperator = (node.operator === "|>" || node.type === "NGPipeExpression" || node.operator === "|" && options2.parser === "__vue_expression") && !hasLeadingOwnLineComment$1(options2.originalText, node.right, options2);
                    const operator = node.type === "NGPipeExpression" ? "|" : node.operator;
                    const rightSuffix = node.type === "NGPipeExpression" && node.arguments.length !== 0 ? group$b(indent$7(concat$d([
                        softline$6,
                        ": ",
                        join$9(concat$d([
                            softline$6,
                            ":",
                            ifBreak$6(" ")
                        ]), path6.map(print2, "arguments").map((arg)=>align$1(2, group$b(arg))))
                    ]))) : "";
                    const right = shouldInline ? concat$d([
                        operator,
                        " ",
                        path6.call(print2, "right"),
                        rightSuffix
                    ]) : concat$d([
                        lineBeforeOperator ? softline$6 : "",
                        operator,
                        lineBeforeOperator ? " " : line$9,
                        path6.call(print2, "right"),
                        rightSuffix
                    ]);
                    const parent = path6.getParentNode();
                    const shouldGroup = !(isInsideParenthesis && node.type === "LogicalExpression") && parent.type !== node.type && node.left.type !== node.type && node.right.type !== node.type;
                    parts.push(" ", shouldGroup ? group$b(right) : right);
                    if (isNested && node.comments) {
                        parts = comments.printComments(path6, ()=>concat$d(parts), options2);
                    }
                } else {
                    parts.push(path6.call(print2));
                }
                return parts;
            }
            function printAssignmentRight(leftNode, rightNode, printedRight, options2) {
                if (hasLeadingOwnLineComment$1(options2.originalText, rightNode, options2)) {
                    return indent$7(concat$d([
                        line$9,
                        printedRight
                    ]));
                }
                const canBreak = isBinaryish$1(rightNode) && !shouldInlineLogicalExpression(rightNode) || rightNode.type === "ConditionalExpression" && isBinaryish$1(rightNode.test) && !shouldInlineLogicalExpression(rightNode.test) || rightNode.type === "StringLiteralTypeAnnotation" || rightNode.type === "ClassExpression" && rightNode.decorators && rightNode.decorators.length || (leftNode.type === "Identifier" || isStringLiteral$1(leftNode) || leftNode.type === "MemberExpression") && (isStringLiteral$1(rightNode) || isMemberExpressionChain$1(rightNode)) && // do not put values on a separate line from the key in json
                options2.parser !== "json" && options2.parser !== "json5" || rightNode.type === "SequenceExpression";
                if (canBreak) {
                    return group$b(indent$7(concat$d([
                        line$9,
                        printedRight
                    ])));
                }
                return concat$d([
                    " ",
                    printedRight
                ]);
            }
            function printAssignment(leftNode, printedLeft, operator, rightNode, printedRight, options2) {
                if (!rightNode) {
                    return printedLeft;
                }
                const printed = printAssignmentRight(leftNode, rightNode, printedRight, options2);
                return group$b(concat$d([
                    printedLeft,
                    operator,
                    printed
                ]));
            }
            function adjustClause(node, clause, forceSpace) {
                if (node.type === "EmptyStatement") {
                    return ";";
                }
                if (node.type === "BlockStatement" || forceSpace) {
                    return concat$d([
                        " ",
                        clause
                    ]);
                }
                return indent$7(concat$d([
                    line$9,
                    clause
                ]));
            }
            function nodeStr(node, options2, isFlowOrTypeScriptDirectiveLiteral) {
                const raw = rawText$1(node);
                const isDirectiveLiteral = isFlowOrTypeScriptDirectiveLiteral || node.type === "DirectiveLiteral";
                return printString$2(raw, options2, isDirectiveLiteral);
            }
            function printRegex(node) {
                const flags = node.flags.split("").sort().join("");
                return "/".concat(node.pattern, "/").concat(flags);
            }
            function exprNeedsASIProtection(path6, options2) {
                const node = path6.getValue();
                const maybeASIProblem = needsParens_1(path6, options2) || node.type === "ParenthesizedExpression" || node.type === "TypeCastExpression" || node.type === "ArrowFunctionExpression" && !shouldPrintParamsWithoutParens(path6, options2) || node.type === "ArrayExpression" || node.type === "ArrayPattern" || node.type === "UnaryExpression" && node.prefix && (node.operator === "+" || node.operator === "-") || node.type === "TemplateLiteral" || node.type === "TemplateElement" || isJSXNode$1(node) || node.type === "BindExpression" && !node.object || node.type === "RegExpLiteral" || node.type === "Literal" && node.pattern || node.type === "Literal" && node.regex;
                if (maybeASIProblem) {
                    return true;
                }
                if (!hasNakedLeftSide$2(node)) {
                    return false;
                }
                return path6.call((childPath)=>exprNeedsASIProtection(childPath, options2), ...getLeftSidePathName$2(path6, node));
            }
            function stmtNeedsASIProtection(path6, options2) {
                const node = path6.getNode();
                if (node.type !== "ExpressionStatement") {
                    return false;
                }
                return path6.call((childPath)=>exprNeedsASIProtection(childPath, options2), "expression");
            }
            function shouldHugType(node) {
                if (isSimpleFlowType$1(node) || isObjectType$1(node)) {
                    return true;
                }
                if (node.type === "UnionTypeAnnotation" || node.type === "TSUnionType") {
                    const voidCount = node.types.filter((n)=>n.type === "VoidTypeAnnotation" || n.type === "TSVoidKeyword" || n.type === "NullLiteralTypeAnnotation" || n.type === "TSNullKeyword").length;
                    const hasObject = node.types.some((n)=>n.type === "ObjectTypeAnnotation" || n.type === "TSTypeLiteral" || // This is a bit aggressive but captures Array<{x}>
                        n.type === "GenericTypeAnnotation" || n.type === "TSTypeReference");
                    if (node.types.length - 1 === voidCount && hasObject) {
                        return true;
                    }
                }
                return false;
            }
            function shouldHugArguments(fun) {
                if (!fun || fun.rest) {
                    return false;
                }
                const params = fun.params || fun.parameters;
                if (!params || params.length !== 1) {
                    return false;
                }
                const param2 = params[0];
                return !param2.comments && (param2.type === "ObjectPattern" || param2.type === "ArrayPattern" || param2.type === "Identifier" && param2.typeAnnotation && (param2.typeAnnotation.type === "TypeAnnotation" || param2.typeAnnotation.type === "TSTypeAnnotation") && isObjectType$1(param2.typeAnnotation.typeAnnotation) || param2.type === "FunctionTypeParam" && isObjectType$1(param2.typeAnnotation) || param2.type === "AssignmentPattern" && (param2.left.type === "ObjectPattern" || param2.left.type === "ArrayPattern") && (param2.right.type === "Identifier" || param2.right.type === "ObjectExpression" && param2.right.properties.length === 0 || param2.right.type === "ArrayExpression" && param2.right.elements.length === 0));
            }
            function printArrayItems(path6, options2, printPath2, print2) {
                const printedElements = [];
                let separatorParts = [];
                path6.each((childPath)=>{
                    printedElements.push(concat$d(separatorParts));
                    printedElements.push(group$b(print2(childPath)));
                    separatorParts = [
                        ",",
                        line$9
                    ];
                    if (childPath.getValue() && isNextLineEmpty$4(options2.originalText, childPath.getValue(), options2.locEnd)) {
                        separatorParts.push(softline$6);
                    }
                }, printPath2);
                return concat$d(printedElements);
            }
            function printReturnAndThrowArgument(path6, options2, print2) {
                const node = path6.getValue();
                const semi = options2.semi ? ";" : "";
                const parts = [];
                if (node.argument) {
                    if (returnArgumentHasLeadingComment$1(options2, node.argument)) {
                        parts.push(concat$d([
                            " (",
                            indent$7(concat$d([
                                hardline$9,
                                path6.call(print2, "argument")
                            ])),
                            hardline$9,
                            ")"
                        ]));
                    } else if (isBinaryish$1(node.argument) || node.argument.type === "SequenceExpression") {
                        parts.push(group$b(concat$d([
                            ifBreak$6(" (", " "),
                            indent$7(concat$d([
                                softline$6,
                                path6.call(print2, "argument")
                            ])),
                            softline$6,
                            ifBreak$6(")")
                        ])));
                    } else {
                        parts.push(" ", path6.call(print2, "argument"));
                    }
                }
                const lastComment = Array.isArray(node.comments) && node.comments[node.comments.length - 1];
                const isLastCommentLine = lastComment && (lastComment.type === "CommentLine" || lastComment.type === "Line");
                if (isLastCommentLine) {
                    parts.push(semi);
                }
                if (hasDanglingComments$1(node)) {
                    parts.push(" ", comments.printDanglingComments(path6, options2, /* sameIndent */ true));
                }
                if (!isLastCommentLine) {
                    parts.push(semi);
                }
                return concat$d(parts);
            }
            function willPrintOwnComments(path6) {
                const node = path6.getValue();
                const parent = path6.getParentNode();
                return (node && (isJSXNode$1(node) || hasFlowShorthandAnnotationComment$2(node) || parent && (parent.type === "CallExpression" || parent.type === "OptionalCallExpression") && (hasFlowAnnotationComment$1(node.leadingComments) || hasFlowAnnotationComment$1(node.trailingComments))) || parent && (parent.type === "JSXSpreadAttribute" || parent.type === "JSXSpreadChild" || parent.type === "UnionTypeAnnotation" || parent.type === "TSUnionType" || (parent.type === "ClassDeclaration" || parent.type === "ClassExpression") && parent.superClass === node)) && (!hasIgnoreComment$4(path6) || parent.type === "UnionTypeAnnotation" || parent.type === "TSUnionType");
            }
            function canAttachComment$1(node) {
                return node.type && node.type !== "CommentBlock" && node.type !== "CommentLine" && node.type !== "Line" && node.type !== "Block" && node.type !== "EmptyStatement" && node.type !== "TemplateElement" && node.type !== "Import";
            }
            function printComment$2(commentPath, options2) {
                const comment = commentPath.getValue();
                switch(comment.type){
                    case "CommentBlock":
                    case "Block":
                        {
                            if (isIndentableBlockComment(comment)) {
                                const printed = printIndentableBlockComment(comment);
                                if (comment.trailing && !hasNewline$5(options2.originalText, options2.locStart(comment), {
                                    backwards: true
                                })) {
                                    return concat$d([
                                        hardline$9,
                                        printed
                                    ]);
                                }
                                return printed;
                            }
                            const commentEnd = options2.locEnd(comment);
                            const isInsideFlowComment = options2.originalText.slice(commentEnd - 3, commentEnd) === "*-/";
                            return "/*" + comment.value + (isInsideFlowComment ? "*-/" : "*/");
                        }
                    case "CommentLine":
                    case "Line":
                        if (options2.originalText.slice(options2.locStart(comment)).startsWith("#!")) {
                            return "#!" + comment.value.trimEnd();
                        }
                        return "//" + comment.value.trimEnd();
                    default:
                        throw new Error("Not a comment: " + JSON.stringify(comment));
                }
            }
            function isIndentableBlockComment(comment) {
                const lines = "*".concat(comment.value, "*").split("\n");
                return lines.length > 1 && lines.every((line2)=>line2.trim()[0] === "*");
            }
            function printIndentableBlockComment(comment) {
                const lines = comment.value.split("\n");
                return concat$d([
                    "/*",
                    join$9(hardline$9, lines.map((line2, index2)=>index2 === 0 ? line2.trimEnd() : " " + (index2 < lines.length - 1 ? line2.trim() : line2.trimStart()))),
                    "*/"
                ]);
            }
            var printerEstree = {
                preprocess: preprocess_1$1,
                print: genericPrint$3,
                embed: embed_1$1,
                insertPragma: insertPragma$7,
                massageAstNode: clean_1$1,
                hasPrettierIgnore: hasPrettierIgnore$5,
                willPrintOwnComments,
                canAttachComment: canAttachComment$1,
                printComment: printComment$2,
                isBlockComment: comments$1.isBlockComment,
                handleComments: {
                    ownLine: comments$1.handleOwnLineComment,
                    endOfLine: comments$1.handleEndOfLineComment,
                    remaining: comments$1.handleRemainingComment
                },
                getGapRegex: comments$1.getGapRegex,
                getCommentChildNodes: comments$1.getCommentChildNodes
            };
            const { concat: concat$e , hardline: hardline$a , indent: indent$8 , join: join$a  } = document.builders;
            function genericPrint$4(path6, options2, print2) {
                const node = path6.getValue();
                switch(node.type){
                    case "JsonRoot":
                        return concat$e([
                            path6.call(print2, "node"),
                            hardline$a
                        ]);
                    case "ArrayExpression":
                        return node.elements.length === 0 ? "[]" : concat$e([
                            "[",
                            indent$8(concat$e([
                                hardline$a,
                                join$a(concat$e([
                                    ",",
                                    hardline$a
                                ]), path6.map(print2, "elements"))
                            ])),
                            hardline$a,
                            "]"
                        ]);
                    case "ObjectExpression":
                        return node.properties.length === 0 ? "{}" : concat$e([
                            "{",
                            indent$8(concat$e([
                                hardline$a,
                                join$a(concat$e([
                                    ",",
                                    hardline$a
                                ]), path6.map(print2, "properties"))
                            ])),
                            hardline$a,
                            "}"
                        ]);
                    case "ObjectProperty":
                        return concat$e([
                            path6.call(print2, "key"),
                            ": ",
                            path6.call(print2, "value")
                        ]);
                    case "UnaryExpression":
                        return concat$e([
                            node.operator === "+" ? "" : node.operator,
                            path6.call(print2, "argument")
                        ]);
                    case "NullLiteral":
                        return "null";
                    case "BooleanLiteral":
                        return node.value ? "true" : "false";
                    case "StringLiteral":
                    case "NumericLiteral":
                        return JSON.stringify(node.value);
                    case "Identifier":
                        return JSON.stringify(node.name);
                    default:
                        throw new Error("unknown type: " + JSON.stringify(node.type));
                }
            }
            function clean$5(node, newNode) {
                delete newNode.start;
                delete newNode.end;
                delete newNode.extra;
                delete newNode.loc;
                delete newNode.comments;
                delete newNode.errors;
                if (node.type === "Identifier") {
                    return {
                        type: "StringLiteral",
                        value: node.name
                    };
                }
                if (node.type === "UnaryExpression" && node.operator === "+") {
                    return newNode.argument;
                }
            }
            var printerEstreeJson = {
                preprocess: preprocess_1$1,
                print: genericPrint$4,
                massageAstNode: clean$5
            };
            const CATEGORY_JAVASCRIPT = "JavaScript";
            var options$5 = {
                arrowParens: {
                    since: "1.9.0",
                    category: CATEGORY_JAVASCRIPT,
                    type: "choice",
                    default: [
                        {
                            since: "1.9.0",
                            value: "avoid"
                        },
                        {
                            since: "2.0.0",
                            value: "always"
                        }
                    ],
                    description: "Include parentheses around a sole arrow function parameter.",
                    choices: [
                        {
                            value: "always",
                            description: "Always include parens. Example: `(x) => x`"
                        },
                        {
                            value: "avoid",
                            description: "Omit parens when possible. Example: `x => x`"
                        }
                    ]
                },
                bracketSpacing: commonOptions.bracketSpacing,
                jsxBracketSameLine: {
                    since: "0.17.0",
                    category: CATEGORY_JAVASCRIPT,
                    type: "boolean",
                    default: false,
                    description: "Put > on the last line instead of at a new line."
                },
                semi: {
                    since: "1.0.0",
                    category: CATEGORY_JAVASCRIPT,
                    type: "boolean",
                    default: true,
                    description: "Print semicolons.",
                    oppositeDescription: "Do not print semicolons, except at the beginning of lines which may need them."
                },
                singleQuote: commonOptions.singleQuote,
                jsxSingleQuote: {
                    since: "1.15.0",
                    category: CATEGORY_JAVASCRIPT,
                    type: "boolean",
                    default: false,
                    description: "Use single quotes in JSX."
                },
                quoteProps: {
                    since: "1.17.0",
                    category: CATEGORY_JAVASCRIPT,
                    type: "choice",
                    default: "as-needed",
                    description: "Change when properties in objects are quoted.",
                    choices: [
                        {
                            value: "as-needed",
                            description: "Only add quotes around object properties where required."
                        },
                        {
                            value: "consistent",
                            description: "If at least one property in an object requires quotes, quote all properties."
                        },
                        {
                            value: "preserve",
                            description: "Respect the input use of quotes in object properties."
                        }
                    ]
                },
                trailingComma: {
                    since: "0.0.0",
                    category: CATEGORY_JAVASCRIPT,
                    type: "choice",
                    default: [
                        {
                            since: "0.0.0",
                            value: false
                        },
                        {
                            since: "0.19.0",
                            value: "none"
                        },
                        {
                            since: "2.0.0",
                            value: "es5"
                        }
                    ],
                    description: "Print trailing commas wherever possible when multi-line.",
                    choices: [
                        {
                            value: "es5",
                            description: "Trailing commas where valid in ES5 (objects, arrays, etc.)"
                        },
                        {
                            value: "none",
                            description: "No trailing commas."
                        },
                        {
                            value: "all",
                            description: "Trailing commas wherever possible (including function arguments)."
                        }
                    ]
                }
            };
            var name$9 = "JavaScript";
            var type$8 = "programming";
            var tmScope$8 = "source.js";
            var aceMode$8 = "javascript";
            var codemirrorMode$4 = "javascript";
            var codemirrorMimeType$4 = "text/javascript";
            var color$3 = "#f1e05a";
            var aliases$2 = [
                "js",
                "node"
            ];
            var extensions$8 = [
                ".js",
                "._js",
                ".bones",
                ".cjs",
                ".es",
                ".es6",
                ".frag",
                ".gs",
                ".jake",
                ".jsb",
                ".jscad",
                ".jsfl",
                ".jsm",
                ".jss",
                ".mjs",
                ".njs",
                ".pac",
                ".sjs",
                ".ssjs",
                ".xsjs",
                ".xsjslib"
            ];
            var filenames = [
                "Jakefile"
            ];
            var interpreters = [
                "chakra",
                "d8",
                "gjs",
                "js",
                "node",
                "qjs",
                "rhino",
                "v8",
                "v8-shell"
            ];
            var languageId$8 = 183;
            var JavaScript = {
                name: name$9,
                type: type$8,
                tmScope: tmScope$8,
                aceMode: aceMode$8,
                codemirrorMode: codemirrorMode$4,
                codemirrorMimeType: codemirrorMimeType$4,
                color: color$3,
                aliases: aliases$2,
                extensions: extensions$8,
                filenames,
                interpreters,
                languageId: languageId$8
            };
            var JavaScript$1 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                name: name$9,
                type: type$8,
                tmScope: tmScope$8,
                aceMode: aceMode$8,
                codemirrorMode: codemirrorMode$4,
                codemirrorMimeType: codemirrorMimeType$4,
                color: color$3,
                aliases: aliases$2,
                extensions: extensions$8,
                filenames,
                interpreters,
                languageId: languageId$8,
                "default": JavaScript
            });
            var name$a = "JSX";
            var type$9 = "programming";
            var group$c = "JavaScript";
            var extensions$9 = [
                ".jsx"
            ];
            var tmScope$9 = "source.js.jsx";
            var aceMode$9 = "javascript";
            var codemirrorMode$5 = "jsx";
            var codemirrorMimeType$5 = "text/jsx";
            var languageId$9 = 178;
            var JSX = {
                name: name$a,
                type: type$9,
                group: group$c,
                extensions: extensions$9,
                tmScope: tmScope$9,
                aceMode: aceMode$9,
                codemirrorMode: codemirrorMode$5,
                codemirrorMimeType: codemirrorMimeType$5,
                languageId: languageId$9
            };
            var JSX$1 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                name: name$a,
                type: type$9,
                group: group$c,
                extensions: extensions$9,
                tmScope: tmScope$9,
                aceMode: aceMode$9,
                codemirrorMode: codemirrorMode$5,
                codemirrorMimeType: codemirrorMimeType$5,
                languageId: languageId$9,
                "default": JSX
            });
            var name$b = "TypeScript";
            var type$a = "programming";
            var color$4 = "#2b7489";
            var aliases$3 = [
                "ts"
            ];
            var interpreters$1 = [
                "deno",
                "ts-node"
            ];
            var extensions$a = [
                ".ts"
            ];
            var tmScope$a = "source.ts";
            var aceMode$a = "typescript";
            var codemirrorMode$6 = "javascript";
            var codemirrorMimeType$6 = "application/typescript";
            var languageId$a = 378;
            var TypeScript = {
                name: name$b,
                type: type$a,
                color: color$4,
                aliases: aliases$3,
                interpreters: interpreters$1,
                extensions: extensions$a,
                tmScope: tmScope$a,
                aceMode: aceMode$a,
                codemirrorMode: codemirrorMode$6,
                codemirrorMimeType: codemirrorMimeType$6,
                languageId: languageId$a
            };
            var TypeScript$1 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                name: name$b,
                type: type$a,
                color: color$4,
                aliases: aliases$3,
                interpreters: interpreters$1,
                extensions: extensions$a,
                tmScope: tmScope$a,
                aceMode: aceMode$a,
                codemirrorMode: codemirrorMode$6,
                codemirrorMimeType: codemirrorMimeType$6,
                languageId: languageId$a,
                "default": TypeScript
            });
            var name$c = "TSX";
            var type$b = "programming";
            var group$d = "TypeScript";
            var extensions$b = [
                ".tsx"
            ];
            var tmScope$b = "source.tsx";
            var aceMode$b = "javascript";
            var codemirrorMode$7 = "jsx";
            var codemirrorMimeType$7 = "text/jsx";
            var languageId$b = 94901924;
            var TSX = {
                name: name$c,
                type: type$b,
                group: group$d,
                extensions: extensions$b,
                tmScope: tmScope$b,
                aceMode: aceMode$b,
                codemirrorMode: codemirrorMode$7,
                codemirrorMimeType: codemirrorMimeType$7,
                languageId: languageId$b
            };
            var TSX$1 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                name: name$c,
                type: type$b,
                group: group$d,
                extensions: extensions$b,
                tmScope: tmScope$b,
                aceMode: aceMode$b,
                codemirrorMode: codemirrorMode$7,
                codemirrorMimeType: codemirrorMimeType$7,
                languageId: languageId$b,
                "default": TSX
            });
            var name$d = "JSON";
            var type$c = "data";
            var tmScope$c = "source.json";
            var aceMode$c = "json";
            var codemirrorMode$8 = "javascript";
            var codemirrorMimeType$8 = "application/json";
            var searchable = false;
            var extensions$c = [
                ".json",
                ".avsc",
                ".geojson",
                ".gltf",
                ".har",
                ".ice",
                ".JSON-tmLanguage",
                ".jsonl",
                ".mcmeta",
                ".tfstate",
                ".tfstate.backup",
                ".topojson",
                ".webapp",
                ".webmanifest",
                ".yy",
                ".yyp"
            ];
            var filenames$1 = [
                ".arcconfig",
                ".htmlhintrc",
                ".tern-config",
                ".tern-project",
                ".watchmanconfig",
                "composer.lock",
                "mcmod.info"
            ];
            var languageId$c = 174;
            var _JSON = {
                name: name$d,
                type: type$c,
                tmScope: tmScope$c,
                aceMode: aceMode$c,
                codemirrorMode: codemirrorMode$8,
                codemirrorMimeType: codemirrorMimeType$8,
                searchable,
                extensions: extensions$c,
                filenames: filenames$1,
                languageId: languageId$c
            };
            var _JSON$1 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                name: name$d,
                type: type$c,
                tmScope: tmScope$c,
                aceMode: aceMode$c,
                codemirrorMode: codemirrorMode$8,
                codemirrorMimeType: codemirrorMimeType$8,
                searchable,
                extensions: extensions$c,
                filenames: filenames$1,
                languageId: languageId$c,
                "default": _JSON
            });
            var name$e = "JSON with Comments";
            var type$d = "data";
            var group$e = "JSON";
            var tmScope$d = "source.js";
            var aceMode$d = "javascript";
            var codemirrorMode$9 = "javascript";
            var codemirrorMimeType$9 = "text/javascript";
            var aliases$4 = [
                "jsonc"
            ];
            var extensions$d = [
                ".jsonc",
                ".sublime-build",
                ".sublime-commands",
                ".sublime-completions",
                ".sublime-keymap",
                ".sublime-macro",
                ".sublime-menu",
                ".sublime-mousemap",
                ".sublime-project",
                ".sublime-settings",
                ".sublime-theme",
                ".sublime-workspace",
                ".sublime_metrics",
                ".sublime_session"
            ];
            var filenames$2 = [
                ".babelrc",
                ".eslintrc.json",
                ".jscsrc",
                ".jshintrc",
                ".jslintrc",
                "jsconfig.json",
                "language-configuration.json",
                "tsconfig.json"
            ];
            var languageId$d = 423;
            var JSON_with_Comments = {
                name: name$e,
                type: type$d,
                group: group$e,
                tmScope: tmScope$d,
                aceMode: aceMode$d,
                codemirrorMode: codemirrorMode$9,
                codemirrorMimeType: codemirrorMimeType$9,
                aliases: aliases$4,
                extensions: extensions$d,
                filenames: filenames$2,
                languageId: languageId$d
            };
            var JSON_with_Comments$1 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                name: name$e,
                type: type$d,
                group: group$e,
                tmScope: tmScope$d,
                aceMode: aceMode$d,
                codemirrorMode: codemirrorMode$9,
                codemirrorMimeType: codemirrorMimeType$9,
                aliases: aliases$4,
                extensions: extensions$d,
                filenames: filenames$2,
                languageId: languageId$d,
                "default": JSON_with_Comments
            });
            var name$f = "JSON5";
            var type$e = "data";
            var extensions$e = [
                ".json5"
            ];
            var tmScope$e = "source.js";
            var aceMode$e = "javascript";
            var codemirrorMode$a = "javascript";
            var codemirrorMimeType$a = "application/json";
            var languageId$e = 175;
            var JSON5 = {
                name: name$f,
                type: type$e,
                extensions: extensions$e,
                tmScope: tmScope$e,
                aceMode: aceMode$e,
                codemirrorMode: codemirrorMode$a,
                codemirrorMimeType: codemirrorMimeType$a,
                languageId: languageId$e
            };
            var JSON5$1 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                name: name$f,
                type: type$e,
                extensions: extensions$e,
                tmScope: tmScope$e,
                aceMode: aceMode$e,
                codemirrorMode: codemirrorMode$a,
                codemirrorMimeType: codemirrorMimeType$a,
                languageId: languageId$e,
                "default": JSON5
            });
            var require$$0$6 = getCjsExportFromNamespace(JavaScript$1);
            var require$$1$2 = getCjsExportFromNamespace(JSX$1);
            var require$$2$1 = getCjsExportFromNamespace(TypeScript$1);
            var require$$3$1 = getCjsExportFromNamespace(TSX$1);
            var require$$4 = getCjsExportFromNamespace(_JSON$1);
            var require$$5 = getCjsExportFromNamespace(JSON_with_Comments$1);
            var require$$6 = getCjsExportFromNamespace(JSON5$1);
            const languages$4 = [
                createLanguage(require$$0$6, (data2)=>({
                        since: "0.0.0",
                        parsers: [
                            "babel",
                            "flow"
                        ],
                        vscodeLanguageIds: [
                            "javascript",
                            "mongo"
                        ],
                        interpreters: data2.interpreters.concat([
                            "nodejs"
                        ])
                    })),
                createLanguage(require$$0$6, ()=>({
                        name: "Flow",
                        since: "0.0.0",
                        parsers: [
                            "babel",
                            "flow"
                        ],
                        vscodeLanguageIds: [
                            "javascript"
                        ],
                        aliases: [],
                        filenames: [],
                        extensions: [
                            ".js.flow"
                        ]
                    })),
                createLanguage(require$$1$2, ()=>({
                        since: "0.0.0",
                        parsers: [
                            "babel",
                            "flow"
                        ],
                        vscodeLanguageIds: [
                            "javascriptreact"
                        ]
                    })),
                createLanguage(require$$2$1, ()=>({
                        since: "1.4.0",
                        parsers: [
                            "typescript",
                            "babel-ts"
                        ],
                        vscodeLanguageIds: [
                            "typescript"
                        ]
                    })),
                createLanguage(require$$3$1, ()=>({
                        since: "1.4.0",
                        parsers: [
                            "typescript",
                            "babel-ts"
                        ],
                        vscodeLanguageIds: [
                            "typescriptreact"
                        ]
                    })),
                createLanguage(require$$4, ()=>({
                        name: "JSON.stringify",
                        since: "1.13.0",
                        parsers: [
                            "json-stringify"
                        ],
                        vscodeLanguageIds: [
                            "json"
                        ],
                        extensions: [],
                        // .json file defaults to json instead of json-stringify
                        filenames: [
                            "package.json",
                            "package-lock.json",
                            "composer.json"
                        ]
                    })),
                createLanguage(require$$4, (data2)=>({
                        since: "1.5.0",
                        parsers: [
                            "json"
                        ],
                        vscodeLanguageIds: [
                            "json"
                        ],
                        filenames: data2.filenames.concat([
                            ".prettierrc"
                        ])
                    })),
                createLanguage(require$$5, (data2)=>({
                        since: "1.5.0",
                        parsers: [
                            "json"
                        ],
                        vscodeLanguageIds: [
                            "jsonc"
                        ],
                        filenames: data2.filenames.concat([
                            ".eslintrc"
                        ])
                    })),
                createLanguage(require$$6, ()=>({
                        since: "1.13.0",
                        parsers: [
                            "json5"
                        ],
                        vscodeLanguageIds: [
                            "json5"
                        ]
                    }))
            ];
            const printers$4 = {
                estree: printerEstree,
                "estree-json": printerEstreeJson
            };
            var languageJs = {
                languages: languages$4,
                options: options$5,
                printers: printers$4
            };
            var json$1 = {
                "cjkPattern": "[\\u02ea-\\u02eb\\u1100-\\u11ff\\u2e80-\\u2e99\\u2e9b-\\u2ef3\\u2f00-\\u2fd5\\u3000-\\u303f\\u3041-\\u3096\\u3099-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u3190-\\u3191\\u3196-\\u31ba\\u31c0-\\u31e3\\u31f0-\\u321e\\u322a-\\u3247\\u3260-\\u327e\\u328a-\\u32b0\\u32c0-\\u32cb\\u32d0-\\u3370\\u337b-\\u337f\\u33e0-\\u33fe\\u3400-\\u4db5\\u4e00-\\u9fef\\ua960-\\ua97c\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufe10-\\ufe1f\\ufe30-\\ufe6f\\uff00-\\uffef]|[\\ud840-\\ud868\\ud86a-\\ud86c\\ud86f-\\ud872\\ud874-\\ud879][\\udc00-\\udfff]|\\ud82c[\\udc00-\\udd1e\\udd50-\\udd52\\udd64-\\udd67]|\\ud83c[\\ude00\\ude50-\\ude51]|\\ud869[\\udc00-\\uded6\\udf00-\\udfff]|\\ud86d[\\udc00-\\udf34\\udf40-\\udfff]|\\ud86e[\\udc00-\\udc1d\\udc20-\\udfff]|\\ud873[\\udc00-\\udea1\\udeb0-\\udfff]|\\ud87a[\\udc00-\\udfe0]|\\ud87e[\\udc00-\\ude1d]",
                "kPattern": "[\\u1100-\\u11ff\\u3001-\\u3003\\u3008-\\u3011\\u3013-\\u301f\\u302e-\\u3030\\u3037\\u30fb\\u3131-\\u318e\\u3200-\\u321e\\u3260-\\u327e\\ua960-\\ua97c\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\ufe45-\\ufe46\\uff61-\\uff65\\uffa0-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]",
                "punctuationPattern": "[\\u0021-\\u002f\\u003a-\\u0040\\u005b-\\u0060\\u007b-\\u007e\\u00a1\\u00a7\\u00ab\\u00b6-\\u00b7\\u00bb\\u00bf\\u037e\\u0387\\u055a-\\u055f\\u0589-\\u058a\\u05be\\u05c0\\u05c3\\u05c6\\u05f3-\\u05f4\\u0609-\\u060a\\u060c-\\u060d\\u061b\\u061e-\\u061f\\u066a-\\u066d\\u06d4\\u0700-\\u070d\\u07f7-\\u07f9\\u0830-\\u083e\\u085e\\u0964-\\u0965\\u0970\\u09fd\\u0a76\\u0af0\\u0c77\\u0c84\\u0df4\\u0e4f\\u0e5a-\\u0e5b\\u0f04-\\u0f12\\u0f14\\u0f3a-\\u0f3d\\u0f85\\u0fd0-\\u0fd4\\u0fd9-\\u0fda\\u104a-\\u104f\\u10fb\\u1360-\\u1368\\u1400\\u166e\\u169b-\\u169c\\u16eb-\\u16ed\\u1735-\\u1736\\u17d4-\\u17d6\\u17d8-\\u17da\\u1800-\\u180a\\u1944-\\u1945\\u1a1e-\\u1a1f\\u1aa0-\\u1aa6\\u1aa8-\\u1aad\\u1b5a-\\u1b60\\u1bfc-\\u1bff\\u1c3b-\\u1c3f\\u1c7e-\\u1c7f\\u1cc0-\\u1cc7\\u1cd3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205e\\u207d-\\u207e\\u208d-\\u208e\\u2308-\\u230b\\u2329-\\u232a\\u2768-\\u2775\\u27c5-\\u27c6\\u27e6-\\u27ef\\u2983-\\u2998\\u29d8-\\u29db\\u29fc-\\u29fd\\u2cf9-\\u2cfc\\u2cfe-\\u2cff\\u2d70\\u2e00-\\u2e2e\\u2e30-\\u2e4f\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301f\\u3030\\u303d\\u30a0\\u30fb\\ua4fe-\\ua4ff\\ua60d-\\ua60f\\ua673\\ua67e\\ua6f2-\\ua6f7\\ua874-\\ua877\\ua8ce-\\ua8cf\\ua8f8-\\ua8fa\\ua8fc\\ua92e-\\ua92f\\ua95f\\ua9c1-\\ua9cd\\ua9de-\\ua9df\\uaa5c-\\uaa5f\\uaade-\\uaadf\\uaaf0-\\uaaf1\\uabeb\\ufd3e-\\ufd3f\\ufe10-\\ufe19\\ufe30-\\ufe52\\ufe54-\\ufe61\\ufe63\\ufe68\\ufe6a-\\ufe6b\\uff01-\\uff03\\uff05-\\uff0a\\uff0c-\\uff0f\\uff1a-\\uff1b\\uff1f-\\uff20\\uff3b-\\uff3d\\uff3f\\uff5b\\uff5d\\uff5f-\\uff65]|\\ud800[\\udd00-\\udd02\\udf9f\\udfd0]|\\ud801[\\udd6f]|\\ud802[\\udc57\\udd1f\\udd3f\\ude50-\\ude58\\ude7f\\udef0-\\udef6\\udf39-\\udf3f\\udf99-\\udf9c]|\\ud803[\\udf55-\\udf59]|\\ud804[\\udc47-\\udc4d\\udcbb-\\udcbc\\udcbe-\\udcc1\\udd40-\\udd43\\udd74-\\udd75\\uddc5-\\uddc8\\uddcd\\udddb\\udddd-\\udddf\\ude38-\\ude3d\\udea9]|\\ud805[\\udc4b-\\udc4f\\udc5b\\udc5d\\udcc6\\uddc1-\\uddd7\\ude41-\\ude43\\ude60-\\ude6c\\udf3c-\\udf3e]|\\ud806[\\udc3b\\udde2\\ude3f-\\ude46\\ude9a-\\ude9c\\ude9e-\\udea2]|\\ud807[\\udc41-\\udc45\\udc70-\\udc71\\udef7-\\udef8\\udfff]|\\ud809[\\udc70-\\udc74]|\\ud81a[\\ude6e-\\ude6f\\udef5\\udf37-\\udf3b\\udf44]|\\ud81b[\\ude97-\\ude9a\\udfe2]|\\ud82f[\\udc9f]|\\ud836[\\ude87-\\ude8b]|\\ud83a[\\udd5e-\\udd5f]"
            };
            const { cjkPattern , kPattern , punctuationPattern  } = json$1;
            const { getLast: getLast$4  } = util$1;
            const INLINE_NODE_TYPES = [
                "liquidNode",
                "inlineCode",
                "emphasis",
                "strong",
                "delete",
                "link",
                "linkReference",
                "image",
                "imageReference",
                "footnote",
                "footnoteReference",
                "sentence",
                "whitespace",
                "word",
                "break",
                "inlineMath"
            ];
            const INLINE_NODE_WRAPPER_TYPES = INLINE_NODE_TYPES.concat([
                "tableCell",
                "paragraph",
                "heading"
            ]);
            const kRegex = new RegExp(kPattern);
            const punctuationRegex = new RegExp(punctuationPattern);
            function splitText(text, options2) {
                const KIND_NON_CJK = "non-cjk";
                const KIND_CJ_LETTER = "cj-letter";
                const KIND_K_LETTER = "k-letter";
                const KIND_CJK_PUNCTUATION = "cjk-punctuation";
                const nodes = [];
                (options2.proseWrap === "preserve" ? text : text.replace(new RegExp("(".concat(cjkPattern, ")\n(").concat(cjkPattern, ")"), "g"), "$1$2")).split(/([ \t\n]+)/).forEach((token, index2, tokens)=>{
                    if (index2 % 2 === 1) {
                        nodes.push({
                            type: "whitespace",
                            value: /\n/.test(token) ? "\n" : " "
                        });
                        return;
                    }
                    if ((index2 === 0 || index2 === tokens.length - 1) && token === "") {
                        return;
                    }
                    token.split(new RegExp("(".concat(cjkPattern, ")"))).forEach((innerToken, innerIndex, innerTokens)=>{
                        if ((innerIndex === 0 || innerIndex === innerTokens.length - 1) && innerToken === "") {
                            return;
                        }
                        if (innerIndex % 2 === 0) {
                            if (innerToken !== "") {
                                appendNode({
                                    type: "word",
                                    value: innerToken,
                                    kind: KIND_NON_CJK,
                                    hasLeadingPunctuation: punctuationRegex.test(innerToken[0]),
                                    hasTrailingPunctuation: punctuationRegex.test(getLast$4(innerToken))
                                });
                            }
                            return;
                        }
                        appendNode(punctuationRegex.test(innerToken) ? {
                            type: "word",
                            value: innerToken,
                            kind: KIND_CJK_PUNCTUATION,
                            hasLeadingPunctuation: true,
                            hasTrailingPunctuation: true
                        } : {
                            type: "word",
                            value: innerToken,
                            kind: kRegex.test(innerToken) ? KIND_K_LETTER : KIND_CJ_LETTER,
                            hasLeadingPunctuation: false,
                            hasTrailingPunctuation: false
                        });
                    });
                });
                return nodes;
                function appendNode(node) {
                    const lastNode = getLast$4(nodes);
                    if (lastNode && lastNode.type === "word") {
                        if (lastNode.kind === KIND_NON_CJK && node.kind === KIND_CJ_LETTER && !lastNode.hasTrailingPunctuation || lastNode.kind === KIND_CJ_LETTER && node.kind === KIND_NON_CJK && !node.hasLeadingPunctuation) {
                            nodes.push({
                                type: "whitespace",
                                value: " "
                            });
                        } else if (!isBetween(KIND_NON_CJK, KIND_CJK_PUNCTUATION) && // disallow leading/trailing full-width whitespace
                        ![
                            lastNode.value,
                            node.value
                        ].some((value1)=>/\u3000/.test(value1))) {
                            nodes.push({
                                type: "whitespace",
                                value: ""
                            });
                        }
                    }
                    nodes.push(node);
                    function isBetween(kind1, kind2) {
                        return lastNode.kind === kind1 && node.kind === kind2 || lastNode.kind === kind2 && node.kind === kind1;
                    }
                }
            }
            function getOrderedListItemInfo(orderListItem, originalText) {
                const [, numberText, marker, leadingSpaces] = originalText.slice(orderListItem.position.start.offset, orderListItem.position.end.offset).match(/^\s*(\d+)(\.|\))(\s*)/);
                return {
                    numberText,
                    marker,
                    leadingSpaces
                };
            }
            function hasGitDiffFriendlyOrderedList(node, options2) {
                if (!node.ordered) {
                    return false;
                }
                if (node.children.length < 2) {
                    return false;
                }
                const firstNumber = Number(getOrderedListItemInfo(node.children[0], options2.originalText).numberText);
                const secondNumber = Number(getOrderedListItemInfo(node.children[1], options2.originalText).numberText);
                if (firstNumber === 0 && node.children.length > 2) {
                    const thirdNumber = Number(getOrderedListItemInfo(node.children[2], options2.originalText).numberText);
                    return secondNumber === 1 && thirdNumber === 1;
                }
                return secondNumber === 1;
            }
            function getFencedCodeBlockValue(node, originalText) {
                const text = originalText.slice(node.position.start.offset, node.position.end.offset);
                const leadingSpaceCount = text.match(/^\s*/)[0].length;
                const replaceRegex = new RegExp("^\\s{0,".concat(leadingSpaceCount, "}"));
                const lineContents = text.split("\n");
                const markerStyle = text[leadingSpaceCount];
                const marker = text.slice(leadingSpaceCount).match(new RegExp("^[".concat(markerStyle, "]+")))[0];
                const hasEndMarker = new RegExp("^\\s{0,3}".concat(marker)).test(lineContents[lineContents.length - 1].slice(getIndent(lineContents.length - 1)));
                return lineContents.slice(1, hasEndMarker ? -1 : void 0).map((x, i)=>x.slice(getIndent(i + 1)).replace(replaceRegex, "")).join("\n");
                function getIndent(lineIndex) {
                    return node.position.indent[lineIndex - 1] - 1;
                }
            }
            function mapAst(ast2, handler) {
                return function preorder(node, index2, parentStack) {
                    parentStack = parentStack || [];
                    const newNode = Object.assign({}, handler(node, index2, parentStack));
                    if (newNode.children) {
                        newNode.children = newNode.children.map((child, index3)=>{
                            return preorder(child, index3, [
                                newNode
                            ].concat(parentStack));
                        });
                    }
                    return newNode;
                }(ast2, null, null);
            }
            var utils$6 = {
                mapAst,
                splitText,
                punctuationPattern,
                getFencedCodeBlockValue,
                getOrderedListItemInfo,
                hasGitDiffFriendlyOrderedList,
                INLINE_NODE_TYPES,
                INLINE_NODE_WRAPPER_TYPES
            };
            const { builders: { hardline: hardline$b , literalline: literalline$5 , concat: concat$f , markAsRoot: markAsRoot$3  } , utils: { mapDoc: mapDoc$4  }  } = document;
            const { getFencedCodeBlockValue: getFencedCodeBlockValue$1  } = utils$6;
            function embed$4(path6, print2, textToDoc2, options2) {
                const node = path6.getValue();
                if (node.type === "code" && node.lang !== null) {
                    const langMatch = node.lang.match(/^[A-Za-z0-9_-]+/);
                    const lang = langMatch ? langMatch[0] : "";
                    const parser3 = getParserName(lang);
                    if (parser3) {
                        const styleUnit = options2.__inJsTemplate ? "~" : "`";
                        const style2 = styleUnit.repeat(Math.max(3, util$1.getMaxContinuousCount(node.value, styleUnit) + 1));
                        const doc2 = textToDoc2(getFencedCodeBlockValue$1(node, options2.originalText), {
                            parser: parser3
                        });
                        return markAsRoot$3(concat$f([
                            style2,
                            node.lang,
                            hardline$b,
                            replaceNewlinesWithLiterallines(doc2),
                            style2
                        ]));
                    }
                }
                if (node.type === "yaml") {
                    return markAsRoot$3(concat$f([
                        "---",
                        hardline$b,
                        node.value && node.value.trim() ? replaceNewlinesWithLiterallines(textToDoc2(node.value, {
                            parser: "yaml"
                        })) : "",
                        "---"
                    ]));
                }
                switch(node.type){
                    case "importExport":
                        return textToDoc2(node.value, {
                            parser: "babel"
                        });
                    case "jsx":
                        return textToDoc2("<$>".concat(node.value, "</$>"), {
                            parser: "__js_expression",
                            rootMarker: "mdx"
                        });
                }
                return null;
                function getParserName(lang) {
                    const supportInfo = support.getSupportInfo({
                        plugins: options2.plugins
                    });
                    const language = supportInfo.languages.find((language2)=>language2.name.toLowerCase() === lang || language2.aliases && language2.aliases.includes(lang) || language2.extensions && language2.extensions.find((ext)=>ext === ".".concat(lang)));
                    if (language) {
                        return language.parsers[0];
                    }
                    return null;
                }
                function replaceNewlinesWithLiterallines(doc2) {
                    return mapDoc$4(doc2, (currentDoc)=>typeof currentDoc === "string" && currentDoc.includes("\n") ? concat$f(currentDoc.split(/(\n)/g).map((v, i)=>i % 2 === 0 ? v : literalline$5)) : currentDoc);
                }
            }
            var embed_1$2 = embed$4;
            const pragmas = [
                "format",
                "prettier"
            ];
            function startWithPragma(text) {
                const pragma2 = "@(".concat(pragmas.join("|"), ")");
                const regex = new RegExp([
                    "<!--\\s*".concat(pragma2, "\\s*-->"),
                    "<!--.*\r?\n[\\s\\S]*(^|\n)[^\\S\n]*".concat(pragma2, "[^\\S\n]*($|\n)[\\s\\S]*\n.*-->")
                ].join("|"), "m");
                const matched = text.match(regex);
                return matched && matched.index === 0;
            }
            var pragma$4 = {
                startWithPragma,
                hasPragma: (text)=>startWithPragma(frontMatter(text).content.trimStart()),
                insertPragma: (text)=>{
                    const extracted = frontMatter(text);
                    const pragma2 = "<!-- @".concat(pragmas[0], " -->");
                    return extracted.frontMatter ? "".concat(extracted.frontMatter.raw, "\n\n").concat(pragma2, "\n\n").concat(extracted.content) : "".concat(pragma2, "\n\n").concat(extracted.content);
                }
            };
            const { getOrderedListItemInfo: getOrderedListItemInfo$1 , mapAst: mapAst$1 , splitText: splitText$1  } = utils$6;
            const isSingleCharRegex = /^([\u0000-\uffff]|[\ud800-\udbff][\udc00-\udfff])$/;
            function preprocess$2(ast2, options2) {
                ast2 = restoreUnescapedCharacter(ast2, options2);
                ast2 = mergeContinuousTexts(ast2);
                ast2 = transformInlineCode(ast2);
                ast2 = transformIndentedCodeblockAndMarkItsParentList(ast2, options2);
                ast2 = markAlignedList(ast2, options2);
                ast2 = splitTextIntoSentences(ast2, options2);
                ast2 = transformImportExport(ast2);
                ast2 = mergeContinuousImportExport(ast2);
                return ast2;
            }
            function transformImportExport(ast2) {
                return mapAst$1(ast2, (node)=>{
                    if (node.type !== "import" && node.type !== "export") {
                        return node;
                    }
                    return Object.assign({}, node, {
                        type: "importExport"
                    });
                });
            }
            function transformInlineCode(ast2) {
                return mapAst$1(ast2, (node)=>{
                    if (node.type !== "inlineCode") {
                        return node;
                    }
                    return Object.assign({}, node, {
                        value: node.value.replace(/\s+/g, " ")
                    });
                });
            }
            function restoreUnescapedCharacter(ast2, options2) {
                return mapAst$1(ast2, (node)=>{
                    return node.type !== "text" ? node : Object.assign({}, node, {
                        value: node.value !== "*" && node.value !== "_" && node.value !== "$" && // handle these cases in printer
                        isSingleCharRegex.test(node.value) && node.position.end.offset - node.position.start.offset !== node.value.length ? options2.originalText.slice(node.position.start.offset, node.position.end.offset) : node.value
                    });
                });
            }
            function mergeContinuousImportExport(ast2) {
                return mergeChildren(ast2, (prevNode, node)=>prevNode.type === "importExport" && node.type === "importExport", (prevNode, node)=>({
                        type: "importExport",
                        value: prevNode.value + "\n\n" + node.value,
                        position: {
                            start: prevNode.position.start,
                            end: node.position.end
                        }
                    }));
            }
            function mergeChildren(ast2, shouldMerge, mergeNode) {
                return mapAst$1(ast2, (node)=>{
                    if (!node.children) {
                        return node;
                    }
                    const children = node.children.reduce((current, child)=>{
                        const lastChild = current[current.length - 1];
                        if (lastChild && shouldMerge(lastChild, child)) {
                            current.splice(-1, 1, mergeNode(lastChild, child));
                        } else {
                            current.push(child);
                        }
                        return current;
                    }, []);
                    return Object.assign({}, node, {
                        children
                    });
                });
            }
            function mergeContinuousTexts(ast2) {
                return mergeChildren(ast2, (prevNode, node)=>prevNode.type === "text" && node.type === "text", (prevNode, node)=>({
                        type: "text",
                        value: prevNode.value + node.value,
                        position: {
                            start: prevNode.position.start,
                            end: node.position.end
                        }
                    }));
            }
            function splitTextIntoSentences(ast2, options2) {
                return mapAst$1(ast2, (node, index2, [parentNode])=>{
                    if (node.type !== "text") {
                        return node;
                    }
                    let { value: value1  } = node;
                    if (parentNode.type === "paragraph") {
                        if (index2 === 0) {
                            value1 = value1.trimStart();
                        }
                        if (index2 === parentNode.children.length - 1) {
                            value1 = value1.trimEnd();
                        }
                    }
                    return {
                        type: "sentence",
                        position: node.position,
                        children: splitText$1(value1, options2)
                    };
                });
            }
            function transformIndentedCodeblockAndMarkItsParentList(ast2, options2) {
                return mapAst$1(ast2, (node, index2, parentStack)=>{
                    if (node.type === "code") {
                        const isIndented = /^\n?( {4,}|\t)/.test(options2.originalText.slice(node.position.start.offset, node.position.end.offset));
                        node.isIndented = isIndented;
                        if (isIndented) {
                            for(let i = 0; i < parentStack.length; i++){
                                const parent = parentStack[i];
                                if (parent.hasIndentedCodeblock) {
                                    break;
                                }
                                if (parent.type === "list") {
                                    parent.hasIndentedCodeblock = true;
                                }
                            }
                        }
                    }
                    return node;
                });
            }
            function markAlignedList(ast2, options2) {
                return mapAst$1(ast2, (node, index2, parentStack)=>{
                    if (node.type === "list" && node.children.length !== 0) {
                        for(let i = 0; i < parentStack.length; i++){
                            const parent = parentStack[i];
                            if (parent.type === "list" && !parent.isAligned) {
                                node.isAligned = false;
                                return node;
                            }
                        }
                        node.isAligned = isAligned(node);
                    }
                    return node;
                });
                function getListItemStart(listItem) {
                    return listItem.children.length === 0 ? -1 : listItem.children[0].position.start.column - 1;
                }
                function isAligned(list) {
                    if (!list.ordered) {
                        return true;
                    }
                    const [firstItem, secondItem] = list.children;
                    const firstInfo = getOrderedListItemInfo$1(firstItem, options2.originalText);
                    if (firstInfo.leadingSpaces.length > 1) {
                        return true;
                    }
                    const firstStart = getListItemStart(firstItem);
                    if (firstStart === -1) {
                        return false;
                    }
                    if (list.children.length === 1) {
                        return firstStart % options2.tabWidth === 0;
                    }
                    const secondStart = getListItemStart(secondItem);
                    if (firstStart !== secondStart) {
                        return false;
                    }
                    if (firstStart % options2.tabWidth === 0) {
                        return true;
                    }
                    const secondInfo = getOrderedListItemInfo$1(secondItem, options2.originalText);
                    return secondInfo.leadingSpaces.length > 1;
                }
            }
            var preprocess_1$2 = preprocess$2;
            const { builders: { breakParent: breakParent$4 , concat: concat$g , join: join$b , line: line$a , literalline: literalline$6 , markAsRoot: markAsRoot$4 , hardline: hardline$c , softline: softline$7 , ifBreak: ifBreak$7 , fill: fill$5 , align: align$2 , indent: indent$9 , group: group$f  } , utils: { mapDoc: mapDoc$5  } , printer: { printDocToString: printDocToString$3  }  } = document;
            const { getFencedCodeBlockValue: getFencedCodeBlockValue$2 , hasGitDiffFriendlyOrderedList: hasGitDiffFriendlyOrderedList$1 , splitText: splitText$2 , punctuationPattern: punctuationPattern$1 , INLINE_NODE_TYPES: INLINE_NODE_TYPES$1 , INLINE_NODE_WRAPPER_TYPES: INLINE_NODE_WRAPPER_TYPES$1  } = utils$6;
            const { replaceEndOfLineWith: replaceEndOfLineWith$2  } = util$1;
            const TRAILING_HARDLINE_NODES = [
                "importExport"
            ];
            const SINGLE_LINE_NODE_TYPES = [
                "heading",
                "tableCell",
                "link"
            ];
            const SIBLING_NODE_TYPES = [
                "listItem",
                "definition",
                "footnoteDefinition"
            ];
            function genericPrint$5(path6, options2, print2) {
                const node = path6.getValue();
                if (shouldRemainTheSameContent(path6)) {
                    return concat$g(splitText$2(options2.originalText.slice(node.position.start.offset, node.position.end.offset), options2).map((node2)=>node2.type === "word" ? node2.value : node2.value === "" ? "" : printLine(path6, node2.value, options2)));
                }
                switch(node.type){
                    case "root":
                        if (node.children.length === 0) {
                            return "";
                        }
                        return concat$g([
                            normalizeDoc(printRoot(path6, options2, print2)),
                            !TRAILING_HARDLINE_NODES.includes(getLastDescendantNode(node).type) ? hardline$c : ""
                        ]);
                    case "paragraph":
                        return printChildren$2(path6, options2, print2, {
                            postprocessor: fill$5
                        });
                    case "sentence":
                        return printChildren$2(path6, options2, print2);
                    case "word":
                        return node.value.replace(/[*$]/g, "\\$&").replace(new RegExp([
                            "(^|".concat(punctuationPattern$1, ")(_+)"),
                            "(_+)(".concat(punctuationPattern$1, "|$)")
                        ].join("|"), "g"), (_, text1, underscore1, underscore2, text2)=>(underscore1 ? "".concat(text1).concat(underscore1) : "".concat(underscore2).concat(text2)).replace(/_/g, "\\_"));
                    case "whitespace":
                        {
                            const parentNode = path6.getParentNode();
                            const index2 = parentNode.children.indexOf(node);
                            const nextNode = parentNode.children[index2 + 1];
                            const proseWrap = // leading char that may cause different syntax
                            nextNode && /^>|^([-+*]|#{1,6}|[0-9]+[.)])$/.test(nextNode.value) ? "never" : options2.proseWrap;
                            return printLine(path6, node.value, {
                                proseWrap
                            });
                        }
                    case "emphasis":
                        {
                            const parentNode = path6.getParentNode();
                            const index2 = parentNode.children.indexOf(node);
                            const prevNode = parentNode.children[index2 - 1];
                            const nextNode = parentNode.children[index2 + 1];
                            const hasPrevOrNextWord = // `1*2*3` is considered emphasis but `1_2_3` is not
                            prevNode && prevNode.type === "sentence" && prevNode.children.length > 0 && util$1.getLast(prevNode.children).type === "word" && !util$1.getLast(prevNode.children).hasTrailingPunctuation || nextNode && nextNode.type === "sentence" && nextNode.children.length > 0 && nextNode.children[0].type === "word" && !nextNode.children[0].hasLeadingPunctuation;
                            const style2 = hasPrevOrNextWord || getAncestorNode$2(path6, "emphasis") ? "*" : "_";
                            return concat$g([
                                style2,
                                printChildren$2(path6, options2, print2),
                                style2
                            ]);
                        }
                    case "strong":
                        return concat$g([
                            "**",
                            printChildren$2(path6, options2, print2),
                            "**"
                        ]);
                    case "delete":
                        return concat$g([
                            "~~",
                            printChildren$2(path6, options2, print2),
                            "~~"
                        ]);
                    case "inlineCode":
                        {
                            const backtickCount = util$1.getMinNotPresentContinuousCount(node.value, "`");
                            const style2 = "`".repeat(backtickCount || 1);
                            const gap = backtickCount ? " " : "";
                            return concat$g([
                                style2,
                                gap,
                                node.value,
                                gap,
                                style2
                            ]);
                        }
                    case "link":
                        switch(options2.originalText[node.position.start.offset]){
                            case "<":
                                {
                                    const mailto = "mailto:";
                                    const url = // <hello@example.com> is parsed as { url: "mailto:hello@example.com" }
                                    node.url.startsWith(mailto) && options2.originalText.slice(node.position.start.offset + 1, node.position.start.offset + 1 + mailto.length) !== mailto ? node.url.slice(mailto.length) : node.url;
                                    return concat$g([
                                        "<",
                                        url,
                                        ">"
                                    ]);
                                }
                            case "[":
                                return concat$g([
                                    "[",
                                    printChildren$2(path6, options2, print2),
                                    "](",
                                    printUrl(node.url, ")"),
                                    printTitle(node.title, options2),
                                    ")"
                                ]);
                            default:
                                return options2.originalText.slice(node.position.start.offset, node.position.end.offset);
                        }
                    case "image":
                        return concat$g([
                            "![",
                            node.alt || "",
                            "](",
                            printUrl(node.url, ")"),
                            printTitle(node.title, options2),
                            ")"
                        ]);
                    case "blockquote":
                        return concat$g([
                            "> ",
                            align$2("> ", printChildren$2(path6, options2, print2))
                        ]);
                    case "heading":
                        return concat$g([
                            "#".repeat(node.depth) + " ",
                            printChildren$2(path6, options2, print2)
                        ]);
                    case "code":
                        {
                            if (node.isIndented) {
                                const alignment = " ".repeat(4);
                                return align$2(alignment, concat$g([
                                    alignment,
                                    concat$g(replaceEndOfLineWith$2(node.value, hardline$c))
                                ]));
                            }
                            const styleUnit = options2.__inJsTemplate ? "~" : "`";
                            const style2 = styleUnit.repeat(Math.max(3, util$1.getMaxContinuousCount(node.value, styleUnit) + 1));
                            return concat$g([
                                style2,
                                node.lang || "",
                                hardline$c,
                                concat$g(replaceEndOfLineWith$2(getFencedCodeBlockValue$2(node, options2.originalText), hardline$c)),
                                hardline$c,
                                style2
                            ]);
                        }
                    case "yaml":
                    case "toml":
                        return options2.originalText.slice(node.position.start.offset, node.position.end.offset);
                    case "html":
                        {
                            const parentNode = path6.getParentNode();
                            const value1 = parentNode.type === "root" && util$1.getLast(parentNode.children) === node ? node.value.trimEnd() : node.value;
                            const isHtmlComment = /^<!--[\s\S]*-->$/.test(value1);
                            return concat$g(replaceEndOfLineWith$2(value1, isHtmlComment ? hardline$c : markAsRoot$4(literalline$6)));
                        }
                    case "list":
                        {
                            const nthSiblingIndex = getNthListSiblingIndex(node, path6.getParentNode());
                            const isGitDiffFriendlyOrderedList = hasGitDiffFriendlyOrderedList$1(node, options2);
                            return printChildren$2(path6, options2, print2, {
                                processor: (childPath, index2)=>{
                                    const prefix = getPrefix();
                                    const childNode = childPath.getValue();
                                    if (childNode.children.length === 2 && childNode.children[1].type === "html" && childNode.children[0].position.start.column !== childNode.children[1].position.start.column) {
                                        return concat$g([
                                            prefix,
                                            printListItem(childPath, options2, print2, prefix)
                                        ]);
                                    }
                                    return concat$g([
                                        prefix,
                                        align$2(" ".repeat(prefix.length), printListItem(childPath, options2, print2, prefix))
                                    ]);
                                    function getPrefix() {
                                        const rawPrefix = node.ordered ? (index2 === 0 ? node.start : isGitDiffFriendlyOrderedList ? 1 : node.start + index2) + (nthSiblingIndex % 2 === 0 ? ". " : ") ") : nthSiblingIndex % 2 === 0 ? "- " : "* ";
                                        return node.isAligned || /* workaround for https://github.com/remarkjs/remark/issues/315 */ node.hasIndentedCodeblock ? alignListPrefix(rawPrefix, options2) : rawPrefix;
                                    }
                                }
                            });
                        }
                    case "thematicBreak":
                        {
                            const counter = getAncestorCounter$1(path6, "list");
                            if (counter === -1) {
                                return "---";
                            }
                            const nthSiblingIndex = getNthListSiblingIndex(path6.getParentNode(counter), path6.getParentNode(counter + 1));
                            return nthSiblingIndex % 2 === 0 ? "***" : "---";
                        }
                    case "linkReference":
                        return concat$g([
                            "[",
                            printChildren$2(path6, options2, print2),
                            "]",
                            node.referenceType === "full" ? concat$g([
                                "[",
                                node.identifier,
                                "]"
                            ]) : node.referenceType === "collapsed" ? "[]" : ""
                        ]);
                    case "imageReference":
                        switch(node.referenceType){
                            case "full":
                                return concat$g([
                                    "![",
                                    node.alt || "",
                                    "][",
                                    node.identifier,
                                    "]"
                                ]);
                            default:
                                return concat$g([
                                    "![",
                                    node.alt,
                                    "]",
                                    node.referenceType === "collapsed" ? "[]" : ""
                                ]);
                        }
                    case "definition":
                        {
                            const lineOrSpace = options2.proseWrap === "always" ? line$a : " ";
                            return group$f(concat$g([
                                concat$g([
                                    "[",
                                    node.identifier,
                                    "]:"
                                ]),
                                indent$9(concat$g([
                                    lineOrSpace,
                                    printUrl(node.url),
                                    node.title === null ? "" : concat$g([
                                        lineOrSpace,
                                        printTitle(node.title, options2, false)
                                    ])
                                ]))
                            ]));
                        }
                    case "footnote":
                        return concat$g([
                            "[^",
                            printChildren$2(path6, options2, print2),
                            "]"
                        ]);
                    case "footnoteReference":
                        return concat$g([
                            "[^",
                            node.identifier,
                            "]"
                        ]);
                    case "footnoteDefinition":
                        {
                            const nextNode = path6.getParentNode().children[path6.getName() + 1];
                            const shouldInlineFootnote = node.children.length === 1 && node.children[0].type === "paragraph" && (options2.proseWrap === "never" || options2.proseWrap === "preserve" && node.children[0].position.start.line === node.children[0].position.end.line);
                            return concat$g([
                                "[^",
                                node.identifier,
                                "]: ",
                                shouldInlineFootnote ? printChildren$2(path6, options2, print2) : group$f(concat$g([
                                    align$2(" ".repeat(options2.tabWidth), printChildren$2(path6, options2, print2, {
                                        processor: (childPath, index2)=>{
                                            return index2 === 0 ? group$f(concat$g([
                                                softline$7,
                                                childPath.call(print2)
                                            ])) : childPath.call(print2);
                                        }
                                    })),
                                    nextNode && nextNode.type === "footnoteDefinition" ? softline$7 : ""
                                ]))
                            ]);
                        }
                    case "table":
                        return printTable(path6, options2, print2);
                    case "tableCell":
                        return printChildren$2(path6, options2, print2);
                    case "break":
                        return /\s/.test(options2.originalText[node.position.start.offset]) ? concat$g([
                            "  ",
                            markAsRoot$4(literalline$6)
                        ]) : concat$g([
                            "\\",
                            hardline$c
                        ]);
                    case "liquidNode":
                        return concat$g(replaceEndOfLineWith$2(node.value, hardline$c));
                    case "importExport":
                    case "jsx":
                        return node.value;
                    case "math":
                        return concat$g([
                            "$$",
                            hardline$c,
                            node.value ? concat$g([
                                concat$g(replaceEndOfLineWith$2(node.value, hardline$c)),
                                hardline$c
                            ]) : "",
                            "$$"
                        ]);
                    case "inlineMath":
                        {
                            return options2.originalText.slice(options2.locStart(node), options2.locEnd(node));
                        }
                    case "tableRow":
                    case "listItem":
                    default:
                        throw new Error("Unknown markdown type ".concat(JSON.stringify(node.type)));
                }
            }
            function printListItem(path6, options2, print2, listPrefix) {
                const node = path6.getValue();
                const prefix = node.checked === null ? "" : node.checked ? "[x] " : "[ ] ";
                return concat$g([
                    prefix,
                    printChildren$2(path6, options2, print2, {
                        processor: (childPath, index2)=>{
                            if (index2 === 0 && childPath.getValue().type !== "list") {
                                return align$2(" ".repeat(prefix.length), childPath.call(print2));
                            }
                            const alignment = " ".repeat(clamp(options2.tabWidth - listPrefix.length, 0, 3));
                            return concat$g([
                                alignment,
                                align$2(alignment, childPath.call(print2))
                            ]);
                        }
                    })
                ]);
            }
            function alignListPrefix(prefix, options2) {
                const additionalSpaces = getAdditionalSpaces();
                return prefix + " ".repeat(additionalSpaces >= 4 ? 0 : additionalSpaces);
                function getAdditionalSpaces() {
                    const restSpaces = prefix.length % options2.tabWidth;
                    return restSpaces === 0 ? 0 : options2.tabWidth - restSpaces;
                }
            }
            function getNthListSiblingIndex(node, parentNode) {
                return getNthSiblingIndex(node, parentNode, (siblingNode)=>siblingNode.ordered === node.ordered);
            }
            function getNthSiblingIndex(node, parentNode, condition) {
                condition = condition || (()=>true);
                let index2 = -1;
                for (const childNode of parentNode.children){
                    if (childNode.type === node.type && condition(childNode)) {
                        index2++;
                    } else {
                        index2 = -1;
                    }
                    if (childNode === node) {
                        return index2;
                    }
                }
            }
            function getAncestorCounter$1(path6, typeOrTypes) {
                const types = [].concat(typeOrTypes);
                let counter = -1;
                let ancestorNode;
                while(ancestorNode = path6.getParentNode(++counter)){
                    if (types.includes(ancestorNode.type)) {
                        return counter;
                    }
                }
                return -1;
            }
            function getAncestorNode$2(path6, typeOrTypes) {
                const counter = getAncestorCounter$1(path6, typeOrTypes);
                return counter === -1 ? null : path6.getParentNode(counter);
            }
            function printLine(path6, value1, options2) {
                if (options2.proseWrap === "preserve" && value1 === "\n") {
                    return hardline$c;
                }
                const isBreakable = options2.proseWrap === "always" && !getAncestorNode$2(path6, SINGLE_LINE_NODE_TYPES);
                return value1 !== "" ? isBreakable ? line$a : " " : isBreakable ? softline$7 : "";
            }
            function printTable(path6, options2, print2) {
                const hardlineWithoutBreakParent = hardline$c.parts[0];
                const node = path6.getValue();
                const contents = [];
                path6.map((rowPath)=>{
                    const rowContents = [];
                    rowPath.map((cellPath)=>{
                        rowContents.push(printDocToString$3(cellPath.call(print2), options2).formatted);
                    }, "children");
                    contents.push(rowContents);
                }, "children");
                const columnMaxWidths = contents.reduce((currentWidths, rowContents)=>currentWidths.map((width, columnIndex)=>Math.max(width, util$1.getStringWidth(rowContents[columnIndex]))), contents[0].map(()=>3));
                const alignedTable = join$b(hardlineWithoutBreakParent, [
                    printRow(contents[0]),
                    printSeparator(),
                    join$b(hardlineWithoutBreakParent, contents.slice(1).map((rowContents)=>printRow(rowContents)))
                ]);
                if (options2.proseWrap !== "never") {
                    return concat$g([
                        breakParent$4,
                        alignedTable
                    ]);
                }
                const compactTable = join$b(hardlineWithoutBreakParent, [
                    printRow(contents[0], /* isCompact */ true),
                    printSeparator(/* isCompact */ true),
                    join$b(hardlineWithoutBreakParent, contents.slice(1).map((rowContents)=>printRow(rowContents, /* isCompact */ true)))
                ]);
                return concat$g([
                    breakParent$4,
                    group$f(ifBreak$7(compactTable, alignedTable))
                ]);
                function printSeparator(isCompact) {
                    return concat$g([
                        "| ",
                        join$b(" | ", columnMaxWidths.map((width, index2)=>{
                            const spaces = isCompact ? 3 : width;
                            switch(node.align[index2]){
                                case "left":
                                    return ":" + "-".repeat(spaces - 1);
                                case "right":
                                    return "-".repeat(spaces - 1) + ":";
                                case "center":
                                    return ":" + "-".repeat(spaces - 2) + ":";
                                default:
                                    return "-".repeat(spaces);
                            }
                        })),
                        " |"
                    ]);
                }
                function printRow(rowContents, isCompact) {
                    return concat$g([
                        "| ",
                        join$b(" | ", isCompact ? rowContents : rowContents.map((rowContent, columnIndex)=>{
                            switch(node.align[columnIndex]){
                                case "right":
                                    return alignRight(rowContent, columnMaxWidths[columnIndex]);
                                case "center":
                                    return alignCenter(rowContent, columnMaxWidths[columnIndex]);
                                default:
                                    return alignLeft(rowContent, columnMaxWidths[columnIndex]);
                            }
                        })),
                        " |"
                    ]);
                }
                function alignLeft(text, width) {
                    const spaces = width - util$1.getStringWidth(text);
                    return concat$g([
                        text,
                        " ".repeat(spaces)
                    ]);
                }
                function alignRight(text, width) {
                    const spaces = width - util$1.getStringWidth(text);
                    return concat$g([
                        " ".repeat(spaces),
                        text
                    ]);
                }
                function alignCenter(text, width) {
                    const spaces = width - util$1.getStringWidth(text);
                    const left = Math.floor(spaces / 2);
                    const right = spaces - left;
                    return concat$g([
                        " ".repeat(left),
                        text,
                        " ".repeat(right)
                    ]);
                }
            }
            function printRoot(path6, options2, print2) {
                const ignoreRanges = [];
                let ignoreStart = null;
                const { children  } = path6.getValue();
                children.forEach((childNode, index2)=>{
                    switch(isPrettierIgnore$1(childNode)){
                        case "start":
                            if (ignoreStart === null) {
                                ignoreStart = {
                                    index: index2,
                                    offset: childNode.position.end.offset
                                };
                            }
                            break;
                        case "end":
                            if (ignoreStart !== null) {
                                ignoreRanges.push({
                                    start: ignoreStart,
                                    end: {
                                        index: index2,
                                        offset: childNode.position.start.offset
                                    }
                                });
                                ignoreStart = null;
                            }
                            break;
                    }
                });
                return printChildren$2(path6, options2, print2, {
                    processor: (childPath, index2)=>{
                        if (ignoreRanges.length !== 0) {
                            const ignoreRange = ignoreRanges[0];
                            if (index2 === ignoreRange.start.index) {
                                return concat$g([
                                    children[ignoreRange.start.index].value,
                                    options2.originalText.slice(ignoreRange.start.offset, ignoreRange.end.offset),
                                    children[ignoreRange.end.index].value
                                ]);
                            }
                            if (ignoreRange.start.index < index2 && index2 < ignoreRange.end.index) {
                                return false;
                            }
                            if (index2 === ignoreRange.end.index) {
                                ignoreRanges.shift();
                                return false;
                            }
                        }
                        return childPath.call(print2);
                    }
                });
            }
            function printChildren$2(path6, options2, print2, events) {
                events = events || {};
                const postprocessor = events.postprocessor || concat$g;
                const processor = events.processor || ((childPath)=>childPath.call(print2));
                const node = path6.getValue();
                const parts = [];
                let lastChildNode;
                path6.map((childPath, index2)=>{
                    const childNode = childPath.getValue();
                    const result = processor(childPath, index2);
                    if (result !== false) {
                        const data2 = {
                            parts,
                            prevNode: lastChildNode,
                            parentNode: node,
                            options: options2
                        };
                        if (!shouldNotPrePrintHardline(childNode, data2)) {
                            parts.push(hardline$c);
                            if (lastChildNode && TRAILING_HARDLINE_NODES.includes(lastChildNode.type)) {
                                if (shouldPrePrintTripleHardline(childNode, data2)) {
                                    parts.push(hardline$c);
                                }
                            } else {
                                if (shouldPrePrintDoubleHardline(childNode, data2) || shouldPrePrintTripleHardline(childNode, data2)) {
                                    parts.push(hardline$c);
                                }
                                if (shouldPrePrintTripleHardline(childNode, data2)) {
                                    parts.push(hardline$c);
                                }
                            }
                        }
                        parts.push(result);
                        lastChildNode = childNode;
                    }
                }, "children");
                return postprocessor(parts);
            }
            function getLastDescendantNode(node) {
                let current = node;
                while(current.children && current.children.length !== 0){
                    current = current.children[current.children.length - 1];
                }
                return current;
            }
            function isPrettierIgnore$1(node) {
                if (node.type !== "html") {
                    return false;
                }
                const match = node.value.match(/^<!--\s*prettier-ignore(?:-(start|end))?\s*-->$/);
                return match === null ? false : match[1] ? match[1] : "next";
            }
            function shouldNotPrePrintHardline(node, data2) {
                const isFirstNode = data2.parts.length === 0;
                const isInlineNode2 = INLINE_NODE_TYPES$1.includes(node.type);
                const isInlineHTML = node.type === "html" && INLINE_NODE_WRAPPER_TYPES$1.includes(data2.parentNode.type);
                return isFirstNode || isInlineNode2 || isInlineHTML;
            }
            function shouldPrePrintDoubleHardline(node, data2) {
                const isSequence = (data2.prevNode && data2.prevNode.type) === node.type;
                const isSiblingNode = isSequence && SIBLING_NODE_TYPES.includes(node.type);
                const isInTightListItem = data2.parentNode.type === "listItem" && !data2.parentNode.loose;
                const isPrevNodeLooseListItem = data2.prevNode && data2.prevNode.type === "listItem" && data2.prevNode.loose;
                const isPrevNodePrettierIgnore = isPrettierIgnore$1(data2.prevNode) === "next";
                const isBlockHtmlWithoutBlankLineBetweenPrevHtml = node.type === "html" && data2.prevNode && data2.prevNode.type === "html" && data2.prevNode.position.end.line + 1 === node.position.start.line;
                const isHtmlDirectAfterListItem = node.type === "html" && data2.parentNode.type === "listItem" && data2.prevNode && data2.prevNode.type === "paragraph" && data2.prevNode.position.end.line + 1 === node.position.start.line;
                return isPrevNodeLooseListItem || !(isSiblingNode || isInTightListItem || isPrevNodePrettierIgnore || isBlockHtmlWithoutBlankLineBetweenPrevHtml || isHtmlDirectAfterListItem);
            }
            function shouldPrePrintTripleHardline(node, data2) {
                const isPrevNodeList = data2.prevNode && data2.prevNode.type === "list";
                const isIndentedCode = node.type === "code" && node.isIndented;
                return isPrevNodeList && isIndentedCode;
            }
            function shouldRemainTheSameContent(path6) {
                const ancestorNode = getAncestorNode$2(path6, [
                    "linkReference",
                    "imageReference"
                ]);
                return ancestorNode && (ancestorNode.type !== "linkReference" || ancestorNode.referenceType !== "full");
            }
            function normalizeDoc(doc2) {
                return mapDoc$5(doc2, (currentDoc)=>{
                    if (!currentDoc.parts) {
                        return currentDoc;
                    }
                    if (currentDoc.type === "concat" && currentDoc.parts.length === 1) {
                        return currentDoc.parts[0];
                    }
                    const parts = currentDoc.parts.reduce((parts2, part)=>{
                        if (part.type === "concat") {
                            parts2.push(...part.parts);
                        } else if (part !== "") {
                            parts2.push(part);
                        }
                        return parts2;
                    }, []);
                    return Object.assign({}, currentDoc, {
                        parts: normalizeParts$2(parts)
                    });
                });
            }
            function printUrl(url, dangerousCharOrChars) {
                const dangerousChars = [
                    " "
                ].concat(dangerousCharOrChars || []);
                return new RegExp(dangerousChars.map((x)=>"\\".concat(x)).join("|")).test(url) ? "<".concat(url, ">") : url;
            }
            function printTitle(title2, options2, printSpace) {
                if (printSpace == null) {
                    printSpace = true;
                }
                if (!title2) {
                    return "";
                }
                if (printSpace) {
                    return " " + printTitle(title2, options2, false);
                }
                if (title2.includes('"') && title2.includes("'") && !title2.includes(")")) {
                    return "(".concat(title2, ")");
                }
                const singleCount = title2.split("'").length - 1;
                const doubleCount = title2.split('"').length - 1;
                const quote = singleCount > doubleCount ? '"' : doubleCount > singleCount ? "'" : options2.singleQuote ? "'" : '"';
                title2 = title2.replace(new RegExp("(".concat(quote, ")"), "g"), "\\$1");
                return "".concat(quote).concat(title2).concat(quote);
            }
            function normalizeParts$2(parts) {
                return parts.reduce((current, part)=>{
                    const lastPart = util$1.getLast(current);
                    if (typeof lastPart === "string" && typeof part === "string") {
                        current.splice(-1, 1, lastPart + part);
                    } else {
                        current.push(part);
                    }
                    return current;
                }, []);
            }
            function clamp(value1, min, max) {
                return value1 < min ? min : value1 > max ? max : value1;
            }
            function clean$6(ast2, newObj, parent) {
                delete newObj.position;
                delete newObj.raw;
                if (ast2.type === "code" || ast2.type === "yaml" || ast2.type === "import" || ast2.type === "export" || ast2.type === "jsx") {
                    delete newObj.value;
                }
                if (ast2.type === "list") {
                    delete newObj.isAligned;
                }
                if (ast2.type === "text") {
                    return null;
                }
                if (ast2.type === "inlineCode") {
                    newObj.value = ast2.value.replace(/[ \t\n]+/g, " ");
                }
                if (parent && parent.type === "root" && parent.children.length > 0 && (parent.children[0] === ast2 || (parent.children[0].type === "yaml" || parent.children[0].type === "toml") && parent.children[1] === ast2) && ast2.type === "html" && pragma$4.startWithPragma(ast2.value)) {
                    return null;
                }
            }
            function hasPrettierIgnore$6(path6) {
                const index2 = +path6.getName();
                if (index2 === 0) {
                    return false;
                }
                const prevNode = path6.getParentNode().children[index2 - 1];
                return isPrettierIgnore$1(prevNode) === "next";
            }
            var printerMarkdown = {
                preprocess: preprocess_1$2,
                print: genericPrint$5,
                embed: embed_1$2,
                massageAstNode: clean$6,
                hasPrettierIgnore: hasPrettierIgnore$6,
                insertPragma: pragma$4.insertPragma
            };
            var options$6 = {
                proseWrap: commonOptions.proseWrap,
                singleQuote: commonOptions.singleQuote
            };
            var name$g = "Markdown";
            var type$f = "prose";
            var aliases$5 = [
                "pandoc"
            ];
            var aceMode$f = "markdown";
            var codemirrorMode$b = "gfm";
            var codemirrorMimeType$b = "text/x-gfm";
            var wrap = true;
            var extensions$f = [
                ".md",
                ".markdown",
                ".mdown",
                ".mdwn",
                ".mdx",
                ".mkd",
                ".mkdn",
                ".mkdown",
                ".ronn",
                ".workbook"
            ];
            var filenames$3 = [
                "contents.lr"
            ];
            var tmScope$f = "source.gfm";
            var languageId$f = 222;
            var Markdown = {
                name: name$g,
                type: type$f,
                aliases: aliases$5,
                aceMode: aceMode$f,
                codemirrorMode: codemirrorMode$b,
                codemirrorMimeType: codemirrorMimeType$b,
                wrap,
                extensions: extensions$f,
                filenames: filenames$3,
                tmScope: tmScope$f,
                languageId: languageId$f
            };
            var Markdown$1 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                name: name$g,
                type: type$f,
                aliases: aliases$5,
                aceMode: aceMode$f,
                codemirrorMode: codemirrorMode$b,
                codemirrorMimeType: codemirrorMimeType$b,
                wrap,
                extensions: extensions$f,
                filenames: filenames$3,
                tmScope: tmScope$f,
                languageId: languageId$f,
                "default": Markdown
            });
            var require$$0$7 = getCjsExportFromNamespace(Markdown$1);
            const languages$5 = [
                createLanguage(require$$0$7, (data2)=>({
                        since: "1.8.0",
                        parsers: [
                            "markdown"
                        ],
                        vscodeLanguageIds: [
                            "markdown"
                        ],
                        filenames: data2.filenames.concat([
                            "README"
                        ]),
                        extensions: data2.extensions.filter((extension)=>extension !== ".mdx")
                    })),
                createLanguage(require$$0$7, ()=>({
                        name: "MDX",
                        since: "1.15.0",
                        parsers: [
                            "mdx"
                        ],
                        vscodeLanguageIds: [
                            "mdx"
                        ],
                        filenames: [],
                        extensions: [
                            ".mdx"
                        ]
                    }))
            ];
            const printers$5 = {
                mdast: printerMarkdown
            };
            var languageMarkdown = {
                languages: languages$5,
                options: options$6,
                printers: printers$5
            };
            function isPragma(text) {
                return /^\s*@(prettier|format)\s*$/.test(text);
            }
            function hasPragma$4(text) {
                return /^\s*#[^\n\S]*@(prettier|format)\s*?(\n|$)/.test(text);
            }
            function insertPragma$8(text) {
                return "# @format\n\n".concat(text);
            }
            var pragma$5 = {
                isPragma,
                hasPragma: hasPragma$4,
                insertPragma: insertPragma$8
            };
            const { getLast: getLast$5  } = util$1;
            function getAncestorCount(path6, filter) {
                let counter = 0;
                const pathStackLength = path6.stack.length - 1;
                for(let i = 0; i < pathStackLength; i++){
                    const value1 = path6.stack[i];
                    if (isNode2(value1) && filter(value1)) {
                        counter++;
                    }
                }
                return counter;
            }
            function isNode2(value1, types) {
                return value1 && typeof value1.type === "string" && (!types || types.includes(value1.type));
            }
            function mapNode(node, callback, parent) {
                return callback("children" in node ? Object.assign({}, node, {
                    children: node.children.map((childNode)=>mapNode(childNode, callback, node))
                }) : node, parent);
            }
            function defineShortcut(x, key, getter) {
                Object.defineProperty(x, key, {
                    get: getter,
                    enumerable: false
                });
            }
            function isNextLineEmpty$5(node, text) {
                let newlineCount = 0;
                const textLength = text.length;
                for(let i = node.position.end.offset - 1; i < textLength; i++){
                    const char = text[i];
                    if (char === "\n") {
                        newlineCount++;
                    }
                    if (newlineCount === 1 && /\S/.test(char)) {
                        return false;
                    }
                    if (newlineCount === 2) {
                        return true;
                    }
                }
                return false;
            }
            function isLastDescendantNode(path6) {
                const node = path6.getValue();
                switch(node.type){
                    case "tag":
                    case "anchor":
                    case "comment":
                        return false;
                }
                const pathStackLength = path6.stack.length;
                for(let i = 1; i < pathStackLength; i++){
                    const item = path6.stack[i];
                    const parentItem = path6.stack[i - 1];
                    if (Array.isArray(parentItem) && typeof item === "number" && item !== parentItem.length - 1) {
                        return false;
                    }
                }
                return true;
            }
            function getLastDescendantNode$1(node) {
                return "children" in node && node.children.length !== 0 ? getLastDescendantNode$1(getLast$5(node.children)) : node;
            }
            function isPrettierIgnore$2(comment) {
                return comment.value.trim() === "prettier-ignore";
            }
            function hasPrettierIgnore$7(path6) {
                const node = path6.getValue();
                if (node.type === "documentBody") {
                    const document2 = path6.getParentNode();
                    return hasEndComments(document2.head) && isPrettierIgnore$2(getLast$5(document2.head.endComments));
                }
                return hasLeadingComments(node) && isPrettierIgnore$2(getLast$5(node.leadingComments));
            }
            function isEmptyNode(node) {
                return (!node.children || node.children.length === 0) && !hasComments(node);
            }
            function hasComments(node) {
                return hasLeadingComments(node) || hasMiddleComments(node) || hasIndicatorComment(node) || hasTrailingComment$2(node) || hasEndComments(node);
            }
            function hasLeadingComments(node) {
                return node && node.leadingComments && node.leadingComments.length !== 0;
            }
            function hasMiddleComments(node) {
                return node && node.middleComments && node.middleComments.length !== 0;
            }
            function hasIndicatorComment(node) {
                return node && node.indicatorComment;
            }
            function hasTrailingComment$2(node) {
                return node && node.trailingComment;
            }
            function hasEndComments(node) {
                return node && node.endComments && node.endComments.length !== 0;
            }
            function splitWithSingleSpace(text) {
                const parts = [];
                let lastPart = void 0;
                for (const part of text.split(/( +)/g)){
                    if (part !== " ") {
                        if (lastPart === " ") {
                            parts.push(part);
                        } else {
                            parts.push((parts.pop() || "") + part);
                        }
                    } else if (lastPart === void 0) {
                        parts.unshift("");
                    }
                    lastPart = part;
                }
                if (lastPart === " ") {
                    parts.push((parts.pop() || "") + " ");
                }
                if (parts[0] === "") {
                    parts.shift();
                    parts.unshift(" " + (parts.shift() || ""));
                }
                return parts;
            }
            function getFlowScalarLineContents(nodeType, content, options2) {
                const rawLineContents = content.split("\n").map((lineContent, index2, lineContents)=>index2 === 0 && index2 === lineContents.length - 1 ? lineContent : index2 !== 0 && index2 !== lineContents.length - 1 ? lineContent.trim() : index2 === 0 ? lineContent.trimEnd() : lineContent.trimStart());
                if (options2.proseWrap === "preserve") {
                    return rawLineContents.map((lineContent)=>lineContent.length === 0 ? [] : [
                            lineContent
                        ]);
                }
                return rawLineContents.map((lineContent)=>lineContent.length === 0 ? [] : splitWithSingleSpace(lineContent)).reduce((reduced, lineContentWords, index2)=>index2 !== 0 && rawLineContents[index2 - 1].length !== 0 && lineContentWords.length !== 0 && !(nodeType === "quoteDouble" && getLast$5(getLast$5(reduced)).endsWith("\\")) ? reduced.concat([
                        reduced.pop().concat(lineContentWords)
                    ]) : reduced.concat([
                        lineContentWords
                    ]), []).map((lineContentWords)=>options2.proseWrap === "never" ? [
                        lineContentWords.join(" ")
                    ] : lineContentWords);
            }
            function getBlockValueLineContents(node, { parentIndent , isLastDescendant , options: options2  }) {
                const content = node.position.start.line === node.position.end.line ? "" : options2.originalText.slice(node.position.start.offset, node.position.end.offset).match(/^[^\n]*?\n([\s\S]*)$/)[1];
                const leadingSpaceCount = node.indent === null ? ((match)=>match ? match[1].length : Infinity)(content.match(/^( *)\S/m)) : node.indent - 1 + parentIndent;
                const rawLineContents = content.split("\n").map((lineContent)=>lineContent.slice(leadingSpaceCount));
                if (options2.proseWrap === "preserve" || node.type === "blockLiteral") {
                    return removeUnnecessaryTrailingNewlines(rawLineContents.map((lineContent)=>lineContent.length === 0 ? [] : [
                            lineContent
                        ]));
                }
                return removeUnnecessaryTrailingNewlines(rawLineContents.map((lineContent)=>lineContent.length === 0 ? [] : splitWithSingleSpace(lineContent)).reduce((reduced, lineContentWords, index2)=>index2 !== 0 && rawLineContents[index2 - 1].length !== 0 && lineContentWords.length !== 0 && !/^\s/.test(lineContentWords[0]) && !/^\s|\s$/.test(getLast$5(reduced)) ? reduced.concat([
                        reduced.pop().concat(lineContentWords)
                    ]) : reduced.concat([
                        lineContentWords
                    ]), []).map((lineContentWords)=>lineContentWords.reduce((reduced, word)=>// disallow trailing spaces
                        reduced.length !== 0 && /\s$/.test(getLast$5(reduced)) ? reduced.concat(reduced.pop() + " " + word) : reduced.concat(word), [])).map((lineContentWords)=>options2.proseWrap === "never" ? [
                        lineContentWords.join(" ")
                    ] : lineContentWords));
                function removeUnnecessaryTrailingNewlines(lineContents) {
                    if (node.chomping === "keep") {
                        return getLast$5(lineContents).length === 0 ? lineContents.slice(0, -1) : lineContents;
                    }
                    let trailingNewlineCount = 0;
                    for(let i = lineContents.length - 1; i >= 0; i--){
                        if (lineContents[i].length === 0) {
                            trailingNewlineCount++;
                        } else {
                            break;
                        }
                    }
                    return trailingNewlineCount === 0 ? lineContents : trailingNewlineCount >= 2 && !isLastDescendant ? // next empty line
                    lineContents.slice(0, -(trailingNewlineCount - 1)) : lineContents.slice(0, -trailingNewlineCount);
                }
            }
            var utils$7 = {
                getLast: getLast$5,
                getAncestorCount,
                isNode: isNode2,
                isEmptyNode,
                mapNode,
                defineShortcut,
                isNextLineEmpty: isNextLineEmpty$5,
                isLastDescendantNode,
                getBlockValueLineContents,
                getFlowScalarLineContents,
                getLastDescendantNode: getLastDescendantNode$1,
                hasPrettierIgnore: hasPrettierIgnore$7,
                hasLeadingComments,
                hasMiddleComments,
                hasIndicatorComment,
                hasTrailingComment: hasTrailingComment$2,
                hasEndComments
            };
            const { insertPragma: insertPragma$9 , isPragma: isPragma$1  } = pragma$5;
            const { getAncestorCount: getAncestorCount$1 , getBlockValueLineContents: getBlockValueLineContents$1 , getFlowScalarLineContents: getFlowScalarLineContents$1 , getLast: getLast$6 , getLastDescendantNode: getLastDescendantNode$2 , hasLeadingComments: hasLeadingComments$1 , hasMiddleComments: hasMiddleComments$1 , hasIndicatorComment: hasIndicatorComment$1 , hasTrailingComment: hasTrailingComment$3 , hasEndComments: hasEndComments$1 , hasPrettierIgnore: hasPrettierIgnore$8 , isLastDescendantNode: isLastDescendantNode$1 , isNextLineEmpty: isNextLineEmpty$6 , isNode: isNode$1 , isEmptyNode: isEmptyNode$1 , defineShortcut: defineShortcut$1 , mapNode: mapNode$1  } = utils$7;
            const docBuilders$2 = document.builders;
            const { conditionalGroup: conditionalGroup$2 , breakParent: breakParent$5 , concat: concat$h , dedent: dedent$3 , dedentToRoot: dedentToRoot$3 , fill: fill$6 , group: group$g , hardline: hardline$d , ifBreak: ifBreak$8 , join: join$c , line: line$b , lineSuffix: lineSuffix$2 , literalline: literalline$7 , markAsRoot: markAsRoot$5 , softline: softline$8  } = docBuilders$2;
            const { replaceEndOfLineWith: replaceEndOfLineWith$3  } = util$1;
            function preprocess$3(ast2) {
                return mapNode$1(ast2, defineShortcuts);
            }
            function defineShortcuts(node) {
                switch(node.type){
                    case "document":
                        defineShortcut$1(node, "head", ()=>node.children[0]);
                        defineShortcut$1(node, "body", ()=>node.children[1]);
                        break;
                    case "documentBody":
                    case "sequenceItem":
                    case "flowSequenceItem":
                    case "mappingKey":
                    case "mappingValue":
                        defineShortcut$1(node, "content", ()=>node.children[0]);
                        break;
                    case "mappingItem":
                    case "flowMappingItem":
                        defineShortcut$1(node, "key", ()=>node.children[0]);
                        defineShortcut$1(node, "value", ()=>node.children[1]);
                        break;
                }
                return node;
            }
            function genericPrint$6(path6, options2, print2) {
                const node = path6.getValue();
                const parentNode = path6.getParentNode();
                const tag = !node.tag ? "" : path6.call(print2, "tag");
                const anchor = !node.anchor ? "" : path6.call(print2, "anchor");
                const nextEmptyLine = isNode$1(node, [
                    "mapping",
                    "sequence",
                    "comment",
                    "directive",
                    "mappingItem",
                    "sequenceItem"
                ]) && !isLastDescendantNode$1(path6) ? printNextEmptyLine(path6, options2.originalText) : "";
                return concat$h([
                    node.type !== "mappingValue" && hasLeadingComments$1(node) ? concat$h([
                        join$c(hardline$d, path6.map(print2, "leadingComments")),
                        hardline$d
                    ]) : "",
                    tag,
                    tag && anchor ? " " : "",
                    anchor,
                    tag || anchor ? isNode$1(node, [
                        "sequence",
                        "mapping"
                    ]) && !hasMiddleComments$1(node) ? hardline$d : " " : "",
                    hasMiddleComments$1(node) ? concat$h([
                        node.middleComments.length === 1 ? "" : hardline$d,
                        join$c(hardline$d, path6.map(print2, "middleComments")),
                        hardline$d
                    ]) : "",
                    hasPrettierIgnore$8(path6) ? concat$h(replaceEndOfLineWith$3(options2.originalText.slice(node.position.start.offset, node.position.end.offset), literalline$7)) : group$g(_print(node, parentNode, path6, options2, print2)),
                    hasTrailingComment$3(node) && !isNode$1(node, [
                        "document",
                        "documentHead"
                    ]) ? lineSuffix$2(concat$h([
                        node.type === "mappingValue" && !node.content ? "" : " ",
                        parentNode.type === "mappingKey" && path6.getParentNode(2).type === "mapping" && isInlineNode(node) ? "" : breakParent$5,
                        path6.call(print2, "trailingComment")
                    ])) : "",
                    nextEmptyLine,
                    hasEndComments$1(node) && !isNode$1(node, [
                        "documentHead",
                        "documentBody"
                    ]) ? align$3(node.type === "sequenceItem" ? 2 : 0, concat$h([
                        hardline$d,
                        join$c(hardline$d, path6.map(print2, "endComments"))
                    ])) : ""
                ]);
            }
            function _print(node, parentNode, path6, options2, print2) {
                switch(node.type){
                    case "root":
                        return concat$h([
                            join$c(hardline$d, path6.map((childPath, index2)=>{
                                const document2 = node.children[index2];
                                const nextDocument = node.children[index2 + 1];
                                return concat$h([
                                    print2(childPath),
                                    shouldPrintDocumentEndMarker(document2, nextDocument) ? concat$h([
                                        hardline$d,
                                        "...",
                                        hasTrailingComment$3(document2) ? concat$h([
                                            " ",
                                            path6.call(print2, "trailingComment")
                                        ]) : ""
                                    ]) : !nextDocument || hasTrailingComment$3(nextDocument.head) ? "" : concat$h([
                                        hardline$d,
                                        "---"
                                    ])
                                ]);
                            }, "children")),
                            node.children.length === 0 || ((lastDescendantNode)=>isNode$1(lastDescendantNode, [
                                    "blockLiteral",
                                    "blockFolded"
                                ]) && lastDescendantNode.chomping === "keep")(getLastDescendantNode$2(node)) ? "" : hardline$d
                        ]);
                    case "document":
                        {
                            const nextDocument = parentNode.children[path6.getName() + 1];
                            return join$c(hardline$d, [
                                shouldPrintDocumentHeadEndMarker(node, nextDocument, parentNode, options2) === "head" ? join$c(hardline$d, [
                                    node.head.children.length === 0 && node.head.endComments.length === 0 ? "" : path6.call(print2, "head"),
                                    concat$h([
                                        "---",
                                        hasTrailingComment$3(node.head) ? concat$h([
                                            " ",
                                            path6.call(print2, "head", "trailingComment")
                                        ]) : ""
                                    ])
                                ].filter(Boolean)) : "",
                                shouldPrintDocumentBody(node) ? path6.call(print2, "body") : ""
                            ].filter(Boolean));
                        }
                    case "documentHead":
                        return join$c(hardline$d, [].concat(path6.map(print2, "children"), path6.map(print2, "endComments")));
                    case "documentBody":
                        {
                            const children = join$c(hardline$d, path6.map(print2, "children")).parts;
                            const endComments = join$c(hardline$d, path6.map(print2, "endComments")).parts;
                            const separator = children.length === 0 || endComments.length === 0 ? "" : ((lastDescendantNode)=>isNode$1(lastDescendantNode, [
                                    "blockFolded",
                                    "blockLiteral"
                                ]) ? lastDescendantNode.chomping === "keep" ? // there's already a newline printed at the end of blockValue (chomping=keep, lastDescendant=true)
                                "" : // an extra newline for better readability
                                concat$h([
                                    hardline$d,
                                    hardline$d
                                ]) : hardline$d)(getLastDescendantNode$2(node));
                            return concat$h([].concat(children, separator, endComments));
                        }
                    case "directive":
                        return concat$h([
                            "%",
                            join$c(" ", [
                                node.name
                            ].concat(node.parameters))
                        ]);
                    case "comment":
                        return concat$h([
                            "#",
                            node.value
                        ]);
                    case "alias":
                        return concat$h([
                            "*",
                            node.value
                        ]);
                    case "tag":
                        return options2.originalText.slice(node.position.start.offset, node.position.end.offset);
                    case "anchor":
                        return concat$h([
                            "&",
                            node.value
                        ]);
                    case "plain":
                        return printFlowScalarContent(node.type, options2.originalText.slice(node.position.start.offset, node.position.end.offset), options2);
                    case "quoteDouble":
                    case "quoteSingle":
                        {
                            const singleQuote = "'";
                            const doubleQuote = '"';
                            const raw = options2.originalText.slice(node.position.start.offset + 1, node.position.end.offset - 1);
                            if (node.type === "quoteSingle" && raw.includes("\\") || node.type === "quoteDouble" && /\\[^"]/.test(raw)) {
                                const originalQuote = node.type === "quoteDouble" ? doubleQuote : singleQuote;
                                return concat$h([
                                    originalQuote,
                                    printFlowScalarContent(node.type, raw, options2),
                                    originalQuote
                                ]);
                            } else if (raw.includes(doubleQuote)) {
                                return concat$h([
                                    singleQuote,
                                    printFlowScalarContent(node.type, node.type === "quoteDouble" ? raw.replace(/\\"/g, doubleQuote).replace(/'/g, singleQuote.repeat(2)) : raw, options2),
                                    singleQuote
                                ]);
                            }
                            if (raw.includes(singleQuote)) {
                                return concat$h([
                                    doubleQuote,
                                    printFlowScalarContent(node.type, node.type === "quoteSingle" ? // single quote needs to be escaped by 2 single quotes in quoteSingle
                                    raw.replace(/''/g, singleQuote) : raw, options2),
                                    doubleQuote
                                ]);
                            }
                            const quote = options2.singleQuote ? singleQuote : doubleQuote;
                            return concat$h([
                                quote,
                                printFlowScalarContent(node.type, raw, options2),
                                quote
                            ]);
                        }
                    case "blockFolded":
                    case "blockLiteral":
                        {
                            const parentIndent = getAncestorCount$1(path6, (ancestorNode)=>isNode$1(ancestorNode, [
                                    "sequence",
                                    "mapping"
                                ]));
                            const isLastDescendant = isLastDescendantNode$1(path6);
                            return concat$h([
                                node.type === "blockFolded" ? ">" : "|",
                                node.indent === null ? "" : node.indent.toString(),
                                node.chomping === "clip" ? "" : node.chomping === "keep" ? "+" : "-",
                                hasIndicatorComment$1(node) ? concat$h([
                                    " ",
                                    path6.call(print2, "indicatorComment")
                                ]) : "",
                                (node.indent === null ? dedent$3 : dedentToRoot$3)(align$3(node.indent === null ? options2.tabWidth : node.indent - 1 + parentIndent, concat$h(getBlockValueLineContents$1(node, {
                                    parentIndent,
                                    isLastDescendant,
                                    options: options2
                                }).reduce((reduced, lineWords, index2, lineContents)=>reduced.concat(index2 === 0 ? hardline$d : "", fill$6(join$c(line$b, lineWords).parts), index2 !== lineContents.length - 1 ? lineWords.length === 0 ? hardline$d : markAsRoot$5(literalline$7) : node.chomping === "keep" && isLastDescendant ? lineWords.length === 0 ? dedentToRoot$3(hardline$d) : dedentToRoot$3(literalline$7) : ""), []))))
                            ]);
                        }
                    case "sequence":
                        return join$c(hardline$d, path6.map(print2, "children"));
                    case "sequenceItem":
                        return concat$h([
                            "- ",
                            align$3(2, !node.content ? "" : path6.call(print2, "content"))
                        ]);
                    case "mappingKey":
                        return !node.content ? "" : path6.call(print2, "content");
                    case "mappingValue":
                        return !node.content ? "" : path6.call(print2, "content");
                    case "mapping":
                        return join$c(hardline$d, path6.map(print2, "children"));
                    case "mappingItem":
                    case "flowMappingItem":
                        {
                            const isEmptyMappingKey = isEmptyNode$1(node.key);
                            const isEmptyMappingValue = isEmptyNode$1(node.value);
                            if (isEmptyMappingKey && isEmptyMappingValue) {
                                return concat$h([
                                    ": "
                                ]);
                            }
                            const key = path6.call(print2, "key");
                            const value1 = path6.call(print2, "value");
                            if (isEmptyMappingValue) {
                                return node.type === "flowMappingItem" && parentNode.type === "flowMapping" ? key : node.type === "mappingItem" && isAbsolutelyPrintedAsSingleLineNode(node.key.content, options2) && !hasTrailingComment$3(node.key.content) && (!parentNode.tag || parentNode.tag.value !== "tag:yaml.org,2002:set") ? concat$h([
                                    key,
                                    needsSpaceInFrontOfMappingValue(node) ? " " : "",
                                    ":"
                                ]) : concat$h([
                                    "? ",
                                    align$3(2, key)
                                ]);
                            }
                            if (isEmptyMappingKey) {
                                return concat$h([
                                    ": ",
                                    align$3(2, value1)
                                ]);
                            }
                            const groupId = Symbol("mappingKey");
                            const forceExplicitKey = hasLeadingComments$1(node.value) || !isInlineNode(node.key.content);
                            return forceExplicitKey ? concat$h([
                                "? ",
                                align$3(2, key),
                                hardline$d,
                                join$c("", path6.map(print2, "value", "leadingComments").map((comment)=>concat$h([
                                        comment,
                                        hardline$d
                                    ]))),
                                ": ",
                                align$3(2, value1)
                            ]) : // force singleline
                            isSingleLineNode(node.key.content) && !hasLeadingComments$1(node.key.content) && !hasMiddleComments$1(node.key.content) && !hasTrailingComment$3(node.key.content) && !hasEndComments$1(node.key) && !hasLeadingComments$1(node.value.content) && !hasMiddleComments$1(node.value.content) && !hasEndComments$1(node.value) && isAbsolutelyPrintedAsSingleLineNode(node.value.content, options2) ? concat$h([
                                key,
                                needsSpaceInFrontOfMappingValue(node) ? " " : "",
                                ": ",
                                value1
                            ]) : conditionalGroup$2([
                                concat$h([
                                    group$g(concat$h([
                                        ifBreak$8("? "),
                                        group$g(align$3(2, key), {
                                            id: groupId
                                        })
                                    ])),
                                    ifBreak$8(concat$h([
                                        hardline$d,
                                        ": ",
                                        align$3(2, value1)
                                    ]), indent2(concat$h([
                                        needsSpaceInFrontOfMappingValue(node) ? " " : "",
                                        ":",
                                        hasLeadingComments$1(node.value.content) || hasEndComments$1(node.value) && node.value.content && !isNode$1(node.value.content, [
                                            "mapping",
                                            "sequence"
                                        ]) || parentNode.type === "mapping" && hasTrailingComment$3(node.key.content) && isInlineNode(node.value.content) || isNode$1(node.value.content, [
                                            "mapping",
                                            "sequence"
                                        ]) && node.value.content.tag === null && node.value.content.anchor === null ? hardline$d : !node.value.content ? "" : line$b,
                                        value1
                                    ])), {
                                        groupId
                                    })
                                ])
                            ]);
                        }
                    case "flowMapping":
                    case "flowSequence":
                        {
                            const openMarker = node.type === "flowMapping" ? "{" : "[";
                            const closeMarker = node.type === "flowMapping" ? "}" : "]";
                            const bracketSpacing = node.type === "flowMapping" && node.children.length !== 0 && options2.bracketSpacing ? line$b : softline$8;
                            const isLastItemEmptyMappingItem = node.children.length !== 0 && ((lastItem)=>lastItem.type === "flowMappingItem" && isEmptyNode$1(lastItem.key) && isEmptyNode$1(lastItem.value))(getLast$6(node.children));
                            return concat$h([
                                openMarker,
                                indent2(concat$h([
                                    bracketSpacing,
                                    concat$h(path6.map((childPath, index2)=>concat$h([
                                            print2(childPath),
                                            index2 === node.children.length - 1 ? "" : concat$h([
                                                ",",
                                                line$b,
                                                node.children[index2].position.start.line !== node.children[index2 + 1].position.start.line ? printNextEmptyLine(childPath, options2.originalText) : ""
                                            ])
                                        ]), "children")),
                                    ifBreak$8(",", "")
                                ])),
                                isLastItemEmptyMappingItem ? "" : bracketSpacing,
                                closeMarker
                            ]);
                        }
                    case "flowSequenceItem":
                        return path6.call(print2, "content");
                    default:
                        throw new Error("Unexpected node type ".concat(node.type));
                }
                function indent2(doc2) {
                    return docBuilders$2.align(" ".repeat(options2.tabWidth), doc2);
                }
            }
            function align$3(n, doc2) {
                return typeof n === "number" && n > 0 ? docBuilders$2.align(" ".repeat(n), doc2) : docBuilders$2.align(n, doc2);
            }
            function isInlineNode(node) {
                if (!node) {
                    return true;
                }
                switch(node.type){
                    case "plain":
                    case "quoteDouble":
                    case "quoteSingle":
                    case "alias":
                    case "flowMapping":
                    case "flowSequence":
                        return true;
                    default:
                        return false;
                }
            }
            function isSingleLineNode(node) {
                if (!node) {
                    return true;
                }
                switch(node.type){
                    case "plain":
                    case "quoteDouble":
                    case "quoteSingle":
                        return node.position.start.line === node.position.end.line;
                    case "alias":
                        return true;
                    default:
                        return false;
                }
            }
            function shouldPrintDocumentBody(document2) {
                return document2.body.children.length !== 0 || hasEndComments$1(document2.body);
            }
            function shouldPrintDocumentEndMarker(document2, nextDocument) {
                return(/**
           *... # trailingComment
           */ hasTrailingComment$3(document2) || nextDocument && /**
           * ...
           * %DIRECTIVE
           * ---
           */ (nextDocument.head.children.length !== 0 || /**
           * ...
           * # endComment
           * ---
           */ hasEndComments$1(nextDocument.head)));
            }
            function shouldPrintDocumentHeadEndMarker(document2, nextDocument, root, options2) {
                if (/**
           * ---
           * preserve the first document head end marker
           */ root.children[0] === document2 && /---(\s|$)/.test(options2.originalText.slice(options2.locStart(document2), options2.locStart(document2) + 4)) || /**
           * %DIRECTIVE
           * ---
           */ document2.head.children.length !== 0 || /**
           * # end comment
           * ---
           */ hasEndComments$1(document2.head) || /**
           * --- # trailing comment
           */ hasTrailingComment$3(document2.head)) {
                    return "head";
                }
                if (shouldPrintDocumentEndMarker(document2, nextDocument)) {
                    return false;
                }
                return nextDocument ? "root" : false;
            }
            function isAbsolutelyPrintedAsSingleLineNode(node, options2) {
                if (!node) {
                    return true;
                }
                switch(node.type){
                    case "plain":
                    case "quoteSingle":
                    case "quoteDouble":
                        break;
                    case "alias":
                        return true;
                    default:
                        return false;
                }
                if (options2.proseWrap === "preserve") {
                    return node.position.start.line === node.position.end.line;
                }
                if (// backslash-newline
                /\\$/m.test(options2.originalText.slice(node.position.start.offset, node.position.end.offset))) {
                    return false;
                }
                switch(options2.proseWrap){
                    case "never":
                        return !node.value.includes("\n");
                    case "always":
                        return !/[\n ]/.test(node.value);
                    default:
                        return false;
                }
            }
            function needsSpaceInFrontOfMappingValue(node) {
                return node.key.content && node.key.content.type === "alias";
            }
            function printNextEmptyLine(path6, originalText) {
                const node = path6.getValue();
                const root = path6.stack[0];
                root.isNextEmptyLinePrintedChecklist = root.isNextEmptyLinePrintedChecklist || [];
                if (!root.isNextEmptyLinePrintedChecklist[node.position.end.line]) {
                    if (isNextLineEmpty$6(node, originalText)) {
                        root.isNextEmptyLinePrintedChecklist[node.position.end.line] = true;
                        return softline$8;
                    }
                }
                return "";
            }
            function printFlowScalarContent(nodeType, content, options2) {
                const lineContents = getFlowScalarLineContents$1(nodeType, content, options2);
                return join$c(hardline$d, lineContents.map((lineContentWords)=>fill$6(join$c(line$b, lineContentWords).parts)));
            }
            function clean$7(node, newNode) {
                if (isNode$1(newNode)) {
                    delete newNode.position;
                    switch(newNode.type){
                        case "comment":
                            if (isPragma$1(newNode.value)) {
                                return null;
                            }
                            break;
                        case "quoteDouble":
                        case "quoteSingle":
                            newNode.type = "quote";
                            break;
                    }
                }
            }
            var printerYaml = {
                preprocess: preprocess$3,
                print: genericPrint$6,
                massageAstNode: clean$7,
                insertPragma: insertPragma$9
            };
            var options$7 = {
                bracketSpacing: commonOptions.bracketSpacing,
                singleQuote: commonOptions.singleQuote,
                proseWrap: commonOptions.proseWrap
            };
            var name$h = "YAML";
            var type$g = "data";
            var tmScope$g = "source.yaml";
            var aliases$6 = [
                "yml"
            ];
            var extensions$g = [
                ".yml",
                ".mir",
                ".reek",
                ".rviz",
                ".sublime-syntax",
                ".syntax",
                ".yaml",
                ".yaml-tmlanguage",
                ".yaml.sed",
                ".yml.mysql"
            ];
            var filenames$4 = [
                ".clang-format",
                ".clang-tidy",
                ".gemrc",
                "glide.lock",
                "yarn.lock"
            ];
            var aceMode$g = "yaml";
            var codemirrorMode$c = "yaml";
            var codemirrorMimeType$c = "text/x-yaml";
            var languageId$g = 407;
            var YAML = {
                name: name$h,
                type: type$g,
                tmScope: tmScope$g,
                aliases: aliases$6,
                extensions: extensions$g,
                filenames: filenames$4,
                aceMode: aceMode$g,
                codemirrorMode: codemirrorMode$c,
                codemirrorMimeType: codemirrorMimeType$c,
                languageId: languageId$g
            };
            var YAML$1 = /* @__PURE__ */ Object.freeze({
                __proto__: null,
                name: name$h,
                type: type$g,
                tmScope: tmScope$g,
                aliases: aliases$6,
                extensions: extensions$g,
                filenames: filenames$4,
                aceMode: aceMode$g,
                codemirrorMode: codemirrorMode$c,
                codemirrorMimeType: codemirrorMimeType$c,
                languageId: languageId$g,
                "default": YAML
            });
            var require$$0$8 = getCjsExportFromNamespace(YAML$1);
            const languages$6 = [
                createLanguage(require$$0$8, (data2)=>({
                        since: "1.14.0",
                        parsers: [
                            "yaml"
                        ],
                        vscodeLanguageIds: [
                            "yaml"
                        ],
                        // yarn.lock is not YAML: https://github.com/yarnpkg/yarn/issues/5629
                        filenames: data2.filenames.filter((filename)=>filename !== "yarn.lock")
                    }))
            ];
            var languageYaml = {
                languages: languages$6,
                printers: {
                    yaml: printerYaml
                },
                options: options$7
            };
            const { version: version$2  } = require$$0;
            const { getSupportInfo: getSupportInfo$2  } = support;
            const internalPlugins = [
                languageCss,
                languageGraphql,
                languageHandlebars,
                languageHtml,
                languageJs,
                languageMarkdown,
                languageYaml
            ];
            function withPlugins(fn, optsArgIdx = 1) {
                return (...args)=>{
                    const opts = args[optsArgIdx] || {};
                    const plugins = opts.plugins || [];
                    args[optsArgIdx] = Object.assign({}, opts, {
                        plugins: [
                            ...internalPlugins,
                            ...Array.isArray(plugins) ? plugins : Object.values(plugins)
                        ]
                    });
                    return fn(...args);
                };
            }
            const formatWithCursor = withPlugins(core.formatWithCursor);
            var standalone = {
                formatWithCursor,
                format (text, opts) {
                    return formatWithCursor(text, opts).formatted;
                },
                check (text, opts) {
                    const { formatted  } = formatWithCursor(text, opts);
                    return formatted === text;
                },
                doc: document,
                getSupportInfo: withPlugins(getSupportInfo$2, 0),
                version: version$2,
                util: utilShared,
                __debug: {
                    parse: withPlugins(core.parse),
                    formatAST: withPlugins(core.formatAST),
                    formatDoc: withPlugins(core.formatDoc),
                    printToDoc: withPlugins(core.printToDoc),
                    printDocToString: withPlugins(core.printDocToString)
                }
            };
            var standalone$1 = standalone;
            return standalone$1;
        });
    }
});
// ../../node_modules/prettier/parser-yaml.js
var require_parser_yaml = __commonJS({
    "../../node_modules/prettier/parser-yaml.js" (exports, module) {
        !function(e, t) {
            "object" == typeof exports && "undefined" != typeof module ? t(exports) : "function" == typeof define && __webpack_require__.amdO ? define([
                "exports"
            ], t) : t(((e = e || self).prettierPlugins = e.prettierPlugins || {}, e.prettierPlugins.yaml = {}));
        }(exports, function(e) {
            "use strict";
            var t = function(e2, t2) {
                const n2 = new SyntaxError(e2 + " (" + t2.start.line + ":" + t2.start.column + ")");
                return n2.loc = t2, n2;
            };
            var n = {
                isPragma: function(e2) {
                    return /^\s*@(prettier|format)\s*$/.test(e2);
                },
                hasPragma: function(e2) {
                    return /^\s*#[^\n\S]*@(prettier|format)\s*?(\n|$)/.test(e2);
                },
                insertPragma: function(e2) {
                    return "# @format\n\n".concat(e2);
                }
            }, r = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof __webpack_require__.g ? __webpack_require__.g : "undefined" != typeof self ? self : {};
            function o(e2) {
                return e2 && e2.__esModule && Object.prototype.hasOwnProperty.call(e2, "default") ? e2.default : e2;
            }
            function a2(e2, t2) {
                return e2(t2 = {
                    exports: {}
                }, t2.exports), t2.exports;
            }
            var s = function(e2, t2) {
                return (s = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(e3, t3) {
                    e3.__proto__ = t3;
                } || function(e3, t3) {
                    for(var n2 in t3)t3.hasOwnProperty(n2) && (e3[n2] = t3[n2]);
                })(e2, t2);
            };
            var i = function() {
                return (i = Object.assign || function(e2) {
                    for(var t2, n2 = 1, r2 = arguments.length; n2 < r2; n2++)for(var o2 in t2 = arguments[n2])Object.prototype.hasOwnProperty.call(t2, o2) && (e2[o2] = t2[o2]);
                    return e2;
                }).apply(this, arguments);
            };
            function c(e2) {
                var t2 = "function" == typeof Symbol && e2[Symbol.iterator], n2 = 0;
                return t2 ? t2.call(e2) : {
                    next: function() {
                        return e2 && n2 >= e2.length && (e2 = void 0), {
                            value: e2 && e2[n2++],
                            done: !e2
                        };
                    }
                };
            }
            function u(e2, t2) {
                var n2 = "function" == typeof Symbol && e2[Symbol.iterator];
                if (!n2) return e2;
                var r2, o2, a3 = n2.call(e2), s2 = [];
                try {
                    for(; (void 0 === t2 || t2-- > 0) && !(r2 = a3.next()).done;)s2.push(r2.value);
                } catch (e3) {
                    o2 = {
                        error: e3
                    };
                } finally{
                    try {
                        r2 && !r2.done && (n2 = a3.return) && n2.call(a3);
                    } finally{
                        if (o2) throw o2.error;
                    }
                }
                return s2;
            }
            function l(e2) {
                return this instanceof l ? (this.v = e2, this) : new l(e2);
            }
            var f2 = Object.freeze({
                __proto__: null,
                __extends: function(e2, t2) {
                    function n2() {
                        this.constructor = e2;
                    }
                    s(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (n2.prototype = t2.prototype, new n2());
                },
                get __assign () {
                    return i;
                },
                __rest: function(e2, t2) {
                    var n2 = {};
                    for(var r2 in e2)Object.prototype.hasOwnProperty.call(e2, r2) && t2.indexOf(r2) < 0 && (n2[r2] = e2[r2]);
                    if (null != e2 && "function" == typeof Object.getOwnPropertySymbols) {
                        var o2 = 0;
                        for(r2 = Object.getOwnPropertySymbols(e2); o2 < r2.length; o2++)t2.indexOf(r2[o2]) < 0 && Object.prototype.propertyIsEnumerable.call(e2, r2[o2]) && (n2[r2[o2]] = e2[r2[o2]]);
                    }
                    return n2;
                },
                __decorate: function(e2, t2, n2, r2) {
                    var o2, a3 = arguments.length, s2 = a3 < 3 ? t2 : null === r2 ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) s2 = Reflect.decorate(e2, t2, n2, r2);
                    else for(var i2 = e2.length - 1; i2 >= 0; i2--)(o2 = e2[i2]) && (s2 = (a3 < 3 ? o2(s2) : a3 > 3 ? o2(t2, n2, s2) : o2(t2, n2)) || s2);
                    return a3 > 3 && s2 && Object.defineProperty(t2, n2, s2), s2;
                },
                __param: function(e2, t2) {
                    return function(n2, r2) {
                        t2(n2, r2, e2);
                    };
                },
                __metadata: function(e2, t2) {
                    if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(e2, t2);
                },
                __awaiter: function(e2, t2, n2, r2) {
                    return new (n2 || (n2 = Promise))(function(o2, a3) {
                        function s2(e3) {
                            try {
                                c2(r2.next(e3));
                            } catch (e4) {
                                a3(e4);
                            }
                        }
                        function i2(e3) {
                            try {
                                c2(r2.throw(e3));
                            } catch (e4) {
                                a3(e4);
                            }
                        }
                        function c2(e3) {
                            e3.done ? o2(e3.value) : new n2(function(t3) {
                                t3(e3.value);
                            }).then(s2, i2);
                        }
                        c2((r2 = r2.apply(e2, t2 || [])).next());
                    });
                },
                __generator: function(e2, t2) {
                    var n2, r2, o2, a3, s2 = {
                        label: 0,
                        sent: function() {
                            if (1 & o2[0]) throw o2[1];
                            return o2[1];
                        },
                        trys: [],
                        ops: []
                    };
                    return a3 = {
                        next: i2(0),
                        throw: i2(1),
                        return: i2(2)
                    }, "function" == typeof Symbol && (a3[Symbol.iterator] = function() {
                        return this;
                    }), a3;
                    function i2(a4) {
                        return function(i3) {
                            return function(a5) {
                                if (n2) throw new TypeError("Generator is already executing.");
                                for(; s2;)try {
                                    if (n2 = 1, r2 && (o2 = 2 & a5[0] ? r2.return : a5[0] ? r2.throw || ((o2 = r2.return) && o2.call(r2), 0) : r2.next) && !(o2 = o2.call(r2, a5[1])).done) return o2;
                                    switch(r2 = 0, o2 && (a5 = [
                                        2 & a5[0],
                                        o2.value
                                    ]), a5[0]){
                                        case 0:
                                        case 1:
                                            o2 = a5;
                                            break;
                                        case 4:
                                            return s2.label++, {
                                                value: a5[1],
                                                done: false
                                            };
                                        case 5:
                                            s2.label++, r2 = a5[1], a5 = [
                                                0
                                            ];
                                            continue;
                                        case 7:
                                            a5 = s2.ops.pop(), s2.trys.pop();
                                            continue;
                                        default:
                                            if (!(o2 = (o2 = s2.trys).length > 0 && o2[o2.length - 1]) && (6 === a5[0] || 2 === a5[0])) {
                                                s2 = 0;
                                                continue;
                                            }
                                            if (3 === a5[0] && (!o2 || a5[1] > o2[0] && a5[1] < o2[3])) {
                                                s2.label = a5[1];
                                                break;
                                            }
                                            if (6 === a5[0] && s2.label < o2[1]) {
                                                s2.label = o2[1], o2 = a5;
                                                break;
                                            }
                                            if (o2 && s2.label < o2[2]) {
                                                s2.label = o2[2], s2.ops.push(a5);
                                                break;
                                            }
                                            o2[2] && s2.ops.pop(), s2.trys.pop();
                                            continue;
                                    }
                                    a5 = t2.call(e2, s2);
                                } catch (e3) {
                                    a5 = [
                                        6,
                                        e3
                                    ], r2 = 0;
                                } finally{
                                    n2 = o2 = 0;
                                }
                                if (5 & a5[0]) throw a5[1];
                                return {
                                    value: a5[0] ? a5[1] : void 0,
                                    done: true
                                };
                            }([
                                a4,
                                i3
                            ]);
                        };
                    }
                },
                __exportStar: function(e2, t2) {
                    for(var n2 in e2)t2.hasOwnProperty(n2) || (t2[n2] = e2[n2]);
                },
                __values: c,
                __read: u,
                __spread: function() {
                    for(var e2 = [], t2 = 0; t2 < arguments.length; t2++)e2 = e2.concat(u(arguments[t2]));
                    return e2;
                },
                __spreadArrays: function() {
                    for(var e2 = 0, t2 = 0, n2 = arguments.length; t2 < n2; t2++)e2 += arguments[t2].length;
                    var r2 = Array(e2), o2 = 0;
                    for(t2 = 0; t2 < n2; t2++)for(var a3 = arguments[t2], s2 = 0, i2 = a3.length; s2 < i2; s2++, o2++)r2[o2] = a3[s2];
                    return r2;
                },
                __await: l,
                __asyncGenerator: function(e2, t2, n2) {
                    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                    var r2, o2 = n2.apply(e2, t2 || []), a3 = [];
                    return r2 = {}, s2("next"), s2("throw"), s2("return"), r2[Symbol.asyncIterator] = function() {
                        return this;
                    }, r2;
                    function s2(e3) {
                        o2[e3] && (r2[e3] = function(t3) {
                            return new Promise(function(n3, r3) {
                                a3.push([
                                    e3,
                                    t3,
                                    n3,
                                    r3
                                ]) > 1 || i2(e3, t3);
                            });
                        });
                    }
                    function i2(e3, t3) {
                        try {
                            (n3 = o2[e3](t3)).value instanceof l ? Promise.resolve(n3.value.v).then(c2, u2) : f3(a3[0][2], n3);
                        } catch (e4) {
                            f3(a3[0][3], e4);
                        }
                        var n3;
                    }
                    function c2(e3) {
                        i2("next", e3);
                    }
                    function u2(e3) {
                        i2("throw", e3);
                    }
                    function f3(e3, t3) {
                        e3(t3), a3.shift(), a3.length && i2(a3[0][0], a3[0][1]);
                    }
                },
                __asyncDelegator: function(e2) {
                    var t2, n2;
                    return t2 = {}, r2("next"), r2("throw", function(e3) {
                        throw e3;
                    }), r2("return"), t2[Symbol.iterator] = function() {
                        return this;
                    }, t2;
                    function r2(r3, o2) {
                        t2[r3] = e2[r3] ? function(t3) {
                            return (n2 = !n2) ? {
                                value: l(e2[r3](t3)),
                                done: "return" === r3
                            } : o2 ? o2(t3) : t3;
                        } : o2;
                    }
                },
                __asyncValues: function(e2) {
                    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                    var t2, n2 = e2[Symbol.asyncIterator];
                    return n2 ? n2.call(e2) : (e2 = c(e2), t2 = {}, r2("next"), r2("throw"), r2("return"), t2[Symbol.asyncIterator] = function() {
                        return this;
                    }, t2);
                    function r2(n3) {
                        t2[n3] = e2[n3] && function(t3) {
                            return new Promise(function(r3, o2) {
                                (function(e3, t4, n4, r4) {
                                    Promise.resolve(r4).then(function(t5) {
                                        e3({
                                            value: t5,
                                            done: n4
                                        });
                                    }, t4);
                                })(r3, o2, (t3 = e2[n3](t3)).done, t3.value);
                            });
                        };
                    }
                },
                __makeTemplateObject: function(e2, t2) {
                    return Object.defineProperty ? Object.defineProperty(e2, "raw", {
                        value: t2
                    }) : e2.raw = t2, e2;
                },
                __importStar: function(e2) {
                    if (e2 && e2.__esModule) return e2;
                    var t2 = {};
                    if (null != e2) for(var n2 in e2)Object.hasOwnProperty.call(e2, n2) && (t2[n2] = e2[n2]);
                    return t2.default = e2, t2;
                },
                __importDefault: function(e2) {
                    return e2 && e2.__esModule ? e2 : {
                        default: e2
                    };
                }
            }), d = a2(function(e2, t2) {
                var n2 = function() {
                    function e3(e4) {
                        this.string = e4;
                        for(var t3 = [
                            0
                        ], n3 = 0; n3 < e4.length;)switch(e4[n3]){
                            case "\n":
                                n3 += "\n".length, t3.push(n3);
                                break;
                            case "\r":
                                "\n" === e4[n3 += "\r".length] && (n3 += "\n".length), t3.push(n3);
                                break;
                            default:
                                n3++;
                        }
                        this.offsets = t3;
                    }
                    return e3.prototype.locationForIndex = function(e4) {
                        if (e4 < 0 || e4 > this.string.length) return null;
                        for(var t3 = 0, n3 = this.offsets; n3[t3 + 1] <= e4;)t3++;
                        return {
                            line: t3,
                            column: e4 - n3[t3]
                        };
                    }, e3.prototype.indexForLocation = function(e4) {
                        var t3 = e4.line, n3 = e4.column;
                        return t3 < 0 || t3 >= this.offsets.length ? null : n3 < 0 || n3 > this.lengthOfLine(t3) ? null : this.offsets[t3] + n3;
                    }, e3.prototype.lengthOfLine = function(e4) {
                        var t3 = this.offsets[e4];
                        return (e4 === this.offsets.length - 1 ? this.string.length : this.offsets[e4 + 1]) - t3;
                    }, e3;
                }();
                t2.__esModule = true, t2.default = n2;
            });
            o(d);
            var h = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.Type = t2.Char = void 0;
                t2.Char = {
                    ANCHOR: "&",
                    COMMENT: "#",
                    TAG: "!",
                    DIRECTIVES_END: "-",
                    DOCUMENT_END: "."
                };
                t2.Type = {
                    ALIAS: "ALIAS",
                    BLANK_LINE: "BLANK_LINE",
                    BLOCK_FOLDED: "BLOCK_FOLDED",
                    BLOCK_LITERAL: "BLOCK_LITERAL",
                    COMMENT: "COMMENT",
                    DIRECTIVE: "DIRECTIVE",
                    DOCUMENT: "DOCUMENT",
                    FLOW_MAP: "FLOW_MAP",
                    FLOW_SEQ: "FLOW_SEQ",
                    MAP: "MAP",
                    MAP_KEY: "MAP_KEY",
                    MAP_VALUE: "MAP_VALUE",
                    PLAIN: "PLAIN",
                    QUOTE_DOUBLE: "QUOTE_DOUBLE",
                    QUOTE_SINGLE: "QUOTE_SINGLE",
                    SEQ: "SEQ",
                    SEQ_ITEM: "SEQ_ITEM"
                };
            });
            o(h);
            h.Type, h.Char;
            var p = a2(function(e2, t2) {
                function n2(e3) {
                    const t3 = [
                        0
                    ];
                    let n3 = e3.indexOf("\n");
                    for(; -1 !== n3;)n3 += 1, t3.push(n3), n3 = e3.indexOf("\n", n3);
                    return t3;
                }
                function r2(e3) {
                    let t3, r3;
                    return "string" == typeof e3 ? (t3 = n2(e3), r3 = e3) : (Array.isArray(e3) && (e3 = e3[0]), e3 && e3.context && (e3.lineStarts || (e3.lineStarts = n2(e3.context.src)), t3 = e3.lineStarts, r3 = e3.context.src)), {
                        lineStarts: t3,
                        src: r3
                    };
                }
                function o2(e3, t3) {
                    const { lineStarts: n3 , src: o3  } = r2(t3);
                    if (!n3 || !(e3 >= 1) || e3 > n3.length) return null;
                    const a3 = n3[e3 - 1];
                    let s2 = n3[e3];
                    for(; s2 && s2 > a3 && "\n" === o3[s2 - 1];)--s2;
                    return o3.slice(a3, s2);
                }
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.getLinePos = function(e3, t3) {
                    if ("number" != typeof e3 || e3 < 0) return null;
                    const { lineStarts: n3 , src: o3  } = r2(t3);
                    if (!n3 || !o3 || e3 > o3.length) return null;
                    for(let t4 = 0; t4 < n3.length; ++t4){
                        const r3 = n3[t4];
                        if (e3 < r3) return {
                            line: t4,
                            col: e3 - n3[t4 - 1] + 1
                        };
                        if (e3 === r3) return {
                            line: t4 + 1,
                            col: 1
                        };
                    }
                    const a3 = n3.length;
                    return {
                        line: a3,
                        col: e3 - n3[a3 - 1] + 1
                    };
                }, t2.getLine = o2, t2.getPrettyContext = function({ start: e3 , end: t3  }, n3, r3 = 80) {
                    let a3 = o2(e3.line, n3);
                    if (!a3) return null;
                    let { col: s2  } = e3;
                    if (a3.length > r3) if (s2 <= r3 - 10) a3 = a3.substr(0, r3 - 1) + "\u2026";
                    else {
                        const e4 = Math.round(r3 / 2);
                        a3.length > s2 + e4 && (a3 = a3.substr(0, s2 + e4 - 1) + "\u2026"), s2 -= a3.length - r3, a3 = "\u2026" + a3.substr(1 - r3);
                    }
                    let i2 = 1, c2 = "";
                    t3 && (t3.line === e3.line && s2 + (t3.col - e3.col) <= r3 + 1 ? i2 = t3.col - e3.col : (i2 = Math.min(a3.length + 1, r3) - s2, c2 = "\u2026"));
                    const u2 = s2 > 1 ? " ".repeat(s2 - 1) : "", l2 = "^".repeat(i2);
                    return "".concat(a3, "\n").concat(u2).concat(l2).concat(c2);
                };
            });
            o(p);
            p.getLinePos, p.getLine, p.getPrettyContext;
            var g = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                class n2 {
                    static copy(e3) {
                        return new n2(e3.start, e3.end);
                    }
                    isEmpty() {
                        return "number" != typeof this.start || !this.end || this.end <= this.start;
                    }
                    setOrigRange(e3, t3) {
                        const { start: n3 , end: r2  } = this;
                        if (0 === e3.length || r2 <= e3[0]) return this.origStart = n3, this.origEnd = r2, t3;
                        let o2 = t3;
                        for(; o2 < e3.length && !(e3[o2] > n3);)++o2;
                        this.origStart = n3 + o2;
                        const a3 = o2;
                        for(; o2 < e3.length && !(e3[o2] >= r2);)++o2;
                        return this.origEnd = r2 + o2, a3;
                    }
                    constructor(e3, t3){
                        this.start = e3, this.end = t3 || e3;
                    }
                }
                t2.default = n2;
            });
            o(g);
            var m = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2, r2 = (n2 = g) && n2.__esModule ? n2 : {
                    default: n2
                };
                class o2 {
                    static addStringTerminator(e3, t3, n3) {
                        if ("\n" === n3[n3.length - 1]) return n3;
                        const r3 = o2.endOfWhiteSpace(e3, t3);
                        return r3 >= e3.length || "\n" === e3[r3] ? n3 + "\n" : n3;
                    }
                    static atDocumentBoundary(e3, t3, n3) {
                        const r3 = e3[t3];
                        if (!r3) return true;
                        const o3 = e3[t3 - 1];
                        if (o3 && "\n" !== o3) return false;
                        if (n3) {
                            if (r3 !== n3) return false;
                        } else if (r3 !== h.Char.DIRECTIVES_END && r3 !== h.Char.DOCUMENT_END) return false;
                        const a3 = e3[t3 + 1], s2 = e3[t3 + 2];
                        if (a3 !== r3 || s2 !== r3) return false;
                        const i2 = e3[t3 + 3];
                        return !i2 || "\n" === i2 || "	" === i2 || " " === i2;
                    }
                    static endOfIdentifier(e3, t3) {
                        let n3 = e3[t3];
                        const r3 = "<" === n3, o3 = r3 ? [
                            "\n",
                            "	",
                            " ",
                            ">"
                        ] : [
                            "\n",
                            "	",
                            " ",
                            "[",
                            "]",
                            "{",
                            "}",
                            ","
                        ];
                        for(; n3 && -1 === o3.indexOf(n3);)n3 = e3[t3 += 1];
                        return r3 && ">" === n3 && (t3 += 1), t3;
                    }
                    static endOfIndent(e3, t3) {
                        let n3 = e3[t3];
                        for(; " " === n3;)n3 = e3[t3 += 1];
                        return t3;
                    }
                    static endOfLine(e3, t3) {
                        let n3 = e3[t3];
                        for(; n3 && "\n" !== n3;)n3 = e3[t3 += 1];
                        return t3;
                    }
                    static endOfWhiteSpace(e3, t3) {
                        let n3 = e3[t3];
                        for(; "	" === n3 || " " === n3;)n3 = e3[t3 += 1];
                        return t3;
                    }
                    static startOfLine(e3, t3) {
                        let n3 = e3[t3 - 1];
                        if ("\n" === n3) return t3;
                        for(; n3 && "\n" !== n3;)n3 = e3[t3 -= 1];
                        return t3 + 1;
                    }
                    static endOfBlockIndent(e3, t3, n3) {
                        const r3 = o2.endOfIndent(e3, n3);
                        if (r3 > n3 + t3) return r3;
                        {
                            const t4 = o2.endOfWhiteSpace(e3, r3), n4 = e3[t4];
                            if (!n4 || "\n" === n4) return t4;
                        }
                        return null;
                    }
                    static atBlank(e3, t3, n3) {
                        const r3 = e3[t3];
                        return "\n" === r3 || "	" === r3 || " " === r3 || n3 && !r3;
                    }
                    static nextNodeIsIndented(e3, t3, n3) {
                        return !(!e3 || t3 < 0) && (t3 > 0 || n3 && "-" === e3);
                    }
                    static normalizeOffset(e3, t3) {
                        const n3 = e3[t3];
                        return n3 ? "\n" !== n3 && "\n" === e3[t3 - 1] ? t3 - 1 : o2.endOfWhiteSpace(e3, t3) : t3;
                    }
                    static foldNewline(e3, t3, n3) {
                        let r3 = 0, a3 = false, s2 = "", i2 = e3[t3 + 1];
                        for(; " " === i2 || "	" === i2 || "\n" === i2;){
                            switch(i2){
                                case "\n":
                                    r3 = 0, t3 += 1, s2 += "\n";
                                    break;
                                case "	":
                                    r3 <= n3 && (a3 = true), t3 = o2.endOfWhiteSpace(e3, t3 + 2) - 1;
                                    break;
                                case " ":
                                    r3 += 1, t3 += 1;
                            }
                            i2 = e3[t3 + 1];
                        }
                        return s2 || (s2 = " "), i2 && r3 <= n3 && (a3 = true), {
                            fold: s2,
                            offset: t3,
                            error: a3
                        };
                    }
                    getPropValue(e3, t3, n3) {
                        if (!this.context) return null;
                        const { src: r3  } = this.context, o3 = this.props[e3];
                        return o3 && r3[o3.start] === t3 ? r3.slice(o3.start + (n3 ? 1 : 0), o3.end) : null;
                    }
                    get anchor() {
                        for(let e3 = 0; e3 < this.props.length; ++e3){
                            const t3 = this.getPropValue(e3, h.Char.ANCHOR, true);
                            if (null != t3) return t3;
                        }
                        return null;
                    }
                    get comment() {
                        const e3 = [];
                        for(let t3 = 0; t3 < this.props.length; ++t3){
                            const n3 = this.getPropValue(t3, h.Char.COMMENT, true);
                            null != n3 && e3.push(n3);
                        }
                        return e3.length > 0 ? e3.join("\n") : null;
                    }
                    commentHasRequiredWhitespace(e3) {
                        const { src: t3  } = this.context;
                        if (this.header && e3 === this.header.end) return false;
                        if (!this.valueRange) return false;
                        const { end: n3  } = this.valueRange;
                        return e3 !== n3 || o2.atBlank(t3, n3 - 1);
                    }
                    get hasComment() {
                        if (this.context) {
                            const { src: e3  } = this.context;
                            for(let t3 = 0; t3 < this.props.length; ++t3)if (e3[this.props[t3].start] === h.Char.COMMENT) return true;
                        }
                        return false;
                    }
                    get hasProps() {
                        if (this.context) {
                            const { src: e3  } = this.context;
                            for(let t3 = 0; t3 < this.props.length; ++t3)if (e3[this.props[t3].start] !== h.Char.COMMENT) return true;
                        }
                        return false;
                    }
                    get includesTrailingLines() {
                        return false;
                    }
                    get jsonLike() {
                        return -1 !== [
                            h.Type.FLOW_MAP,
                            h.Type.FLOW_SEQ,
                            h.Type.QUOTE_DOUBLE,
                            h.Type.QUOTE_SINGLE
                        ].indexOf(this.type);
                    }
                    get rangeAsLinePos() {
                        if (!this.range || !this.context) return;
                        const e3 = (0, p.getLinePos)(this.range.start, this.context.root);
                        return e3 ? {
                            start: e3,
                            end: (0, p.getLinePos)(this.range.end, this.context.root)
                        } : void 0;
                    }
                    get rawValue() {
                        if (!this.valueRange || !this.context) return null;
                        const { start: e3 , end: t3  } = this.valueRange;
                        return this.context.src.slice(e3, t3);
                    }
                    get tag() {
                        for(let e3 = 0; e3 < this.props.length; ++e3){
                            const t3 = this.getPropValue(e3, h.Char.TAG, false);
                            if (null != t3) {
                                if ("<" === t3[1]) return {
                                    verbatim: t3.slice(2, -1)
                                };
                                {
                                    const [e4, n3, r3] = t3.match(/^(.*!)([^!]*)$/);
                                    return {
                                        handle: n3,
                                        suffix: r3
                                    };
                                }
                            }
                        }
                        return null;
                    }
                    get valueRangeContainsNewline() {
                        if (!this.valueRange || !this.context) return false;
                        const { start: e3 , end: t3  } = this.valueRange, { src: n3  } = this.context;
                        for(let r3 = e3; r3 < t3; ++r3)if ("\n" === n3[r3]) return true;
                        return false;
                    }
                    parseComment(e3) {
                        const { src: t3  } = this.context;
                        if (t3[e3] === h.Char.COMMENT) {
                            const n3 = o2.endOfLine(t3, e3 + 1), a3 = new r2.default(e3, n3);
                            return this.props.push(a3), n3;
                        }
                        return e3;
                    }
                    setOrigRanges(e3, t3) {
                        return this.range && (t3 = this.range.setOrigRange(e3, t3)), this.valueRange && this.valueRange.setOrigRange(e3, t3), this.props.forEach((n3)=>n3.setOrigRange(e3, t3)), t3;
                    }
                    toString() {
                        const { context: { src: e3  } , range: t3 , value: n3  } = this;
                        if (null != n3) return n3;
                        const r3 = e3.slice(t3.start, t3.end);
                        return o2.addStringTerminator(e3, t3.end, r3);
                    }
                    constructor(e3, t3, n3){
                        Object.defineProperty(this, "context", {
                            value: n3 || null,
                            writable: true
                        }), this.error = null, this.range = null, this.valueRange = null, this.props = t3 || [], this.type = e3, this.value = null;
                    }
                }
                t2.default = o2;
            });
            o(m);
            var y = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.YAMLWarning = t2.YAMLSyntaxError = t2.YAMLSemanticError = t2.YAMLReferenceError = t2.YAMLError = void 0;
                var n2 = o2(m), r2 = o2(g);
                function o2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                class a3 extends Error {
                    makePretty() {
                        if (!this.source) return;
                        this.nodeType = this.source.type;
                        const e3 = this.source.context && this.source.context.root;
                        if ("number" == typeof this.offset) {
                            this.range = new r2.default(this.offset, this.offset + 1);
                            const t3 = e3 && (0, p.getLinePos)(this.offset, e3);
                            if (t3) {
                                const e4 = {
                                    line: t3.line,
                                    col: t3.col + 1
                                };
                                this.linePos = {
                                    start: t3,
                                    end: e4
                                };
                            }
                            delete this.offset;
                        } else this.range = this.source.range, this.linePos = this.source.rangeAsLinePos;
                        if (this.linePos) {
                            const { line: t3 , col: n3  } = this.linePos.start;
                            this.message += " at line ".concat(t3, ", column ").concat(n3);
                            const r3 = e3 && (0, p.getPrettyContext)(this.linePos, e3);
                            r3 && (this.message += ":\n\n".concat(r3, "\n"));
                        }
                        delete this.source;
                    }
                    constructor(e3, t3, r3){
                        if (!(r3 && t3 instanceof n2.default)) throw new Error("Invalid arguments for new ".concat(e3));
                        super(), this.name = e3, this.message = r3, this.source = t3;
                    }
                }
                t2.YAMLError = a3;
                t2.YAMLReferenceError = class extends a3 {
                    constructor(e3, t3){
                        super("YAMLReferenceError", e3, t3);
                    }
                };
                t2.YAMLSemanticError = class extends a3 {
                    constructor(e3, t3){
                        super("YAMLSemanticError", e3, t3);
                    }
                };
                t2.YAMLSyntaxError = class extends a3 {
                    constructor(e3, t3){
                        super("YAMLSyntaxError", e3, t3);
                    }
                };
                t2.YAMLWarning = class extends a3 {
                    constructor(e3, t3){
                        super("YAMLWarning", e3, t3);
                    }
                };
            });
            o(y);
            y.YAMLWarning, y.YAMLSyntaxError, y.YAMLSemanticError, y.YAMLReferenceError, y.YAMLError;
            var v = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = o2(m), r2 = o2(g);
                function o2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                class a3 extends n2.default {
                    get includesTrailingLines() {
                        return true;
                    }
                    parse(e3, t3) {
                        this.context = e3;
                        const { src: o3  } = e3;
                        let a4 = t3 + 1;
                        for(; n2.default.atBlank(o3, a4);){
                            const e4 = n2.default.endOfWhiteSpace(o3, a4);
                            if ("\n" !== e4) break;
                            a4 = e4 + 1;
                        }
                        return this.range = new r2.default(t3, a4), a4;
                    }
                    constructor(){
                        super(h.Type.BLANK_LINE);
                    }
                }
                t2.default = a3;
            });
            o(v);
            var _ = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = a3(v), r2 = a3(m), o2 = a3(g);
                function a3(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                class s2 extends r2.default {
                    get includesTrailingLines() {
                        return !!this.node && this.node.includesTrailingLines;
                    }
                    parse(e3, t3) {
                        this.context = e3;
                        const { parseNode: a4 , src: s3  } = e3;
                        let { atLineStart: i2 , lineStart: c2  } = e3;
                        i2 || this.type !== h.Type.SEQ_ITEM || (this.error = new y.YAMLSemanticError(this, "Sequence items must not have preceding content on the same line"));
                        const u2 = i2 ? t3 - c2 : e3.indent;
                        let l2 = r2.default.endOfWhiteSpace(s3, t3 + 1), f3 = s3[l2];
                        const d2 = "#" === f3, p2 = [];
                        let g2 = null;
                        for(; "\n" === f3 || "#" === f3;){
                            if ("#" === f3) {
                                const e4 = r2.default.endOfLine(s3, l2 + 1);
                                p2.push(new o2.default(l2, e4)), l2 = e4;
                            } else {
                                i2 = true, c2 = l2 + 1, "\n" === s3[r2.default.endOfWhiteSpace(s3, c2)] && 0 === p2.length && (g2 = new n2.default(), c2 = g2.parse({
                                    src: s3
                                }, c2)), l2 = r2.default.endOfIndent(s3, c2);
                            }
                            f3 = s3[l2];
                        }
                        if (r2.default.nextNodeIsIndented(f3, l2 - (c2 + u2), this.type !== h.Type.SEQ_ITEM) ? this.node = a4({
                            atLineStart: i2,
                            inCollection: false,
                            indent: u2,
                            lineStart: c2,
                            parent: this
                        }, l2) : f3 && c2 > t3 + 1 && (l2 = c2 - 1), this.node) {
                            if (g2) {
                                const t4 = e3.parent.items || e3.parent.contents;
                                t4 && t4.push(g2);
                            }
                            p2.length && Array.prototype.push.apply(this.props, p2), l2 = this.node.range.end;
                        } else if (d2) {
                            const e4 = p2[0];
                            this.props.push(e4), l2 = e4.end;
                        } else l2 = r2.default.endOfLine(s3, t3 + 1);
                        const m2 = this.node ? this.node.valueRange.end : l2;
                        return this.valueRange = new o2.default(t3, m2), l2;
                    }
                    setOrigRanges(e3, t3) {
                        return t3 = super.setOrigRanges(e3, t3), this.node ? this.node.setOrigRanges(e3, t3) : t3;
                    }
                    toString() {
                        const { context: { src: e3  } , node: t3 , range: n3 , value: o3  } = this;
                        if (null != o3) return o3;
                        const a4 = t3 ? e3.slice(n3.start, t3.range.start) + String(t3) : e3.slice(n3.start, n3.end);
                        return r2.default.addStringTerminator(e3, n3.end, a4);
                    }
                    constructor(e3, t3){
                        super(e3, t3), this.node = null;
                    }
                }
                t2.default = s2;
            });
            o(_);
            var b = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = o2(m), r2 = o2(g);
                function o2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                class a3 extends n2.default {
                    parse(e3, t3) {
                        this.context = e3;
                        const n3 = this.parseComment(t3);
                        return this.range = new r2.default(t3, n3), n3;
                    }
                    constructor(){
                        super(h.Type.COMMENT);
                    }
                }
                t2.default = a3;
            });
            o(b);
            var w = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.grabCollectionEndComments = c2, t2.default = void 0;
                var n2 = i2(v), r2 = i2(_), o2 = i2(b), a3 = i2(m), s2 = i2(g);
                function i2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                function c2(e3) {
                    let t3 = e3;
                    for(; t3 instanceof r2.default;)t3 = t3.node;
                    if (!(t3 instanceof u2)) return null;
                    const n3 = t3.items.length;
                    let o3 = -1;
                    for(let e4 = n3 - 1; e4 >= 0; --e4){
                        const n4 = t3.items[e4];
                        if (n4.type === h.Type.COMMENT) {
                            const { indent: t4 , lineStart: r3  } = n4.context;
                            if (t4 > 0 && n4.range.start >= r3 + t4) break;
                            o3 = e4;
                        } else {
                            if (n4.type !== h.Type.BLANK_LINE) break;
                            o3 = e4;
                        }
                    }
                    if (-1 === o3) return null;
                    const a4 = t3.items.splice(o3, n3 - o3), s3 = a4[0].range.start;
                    for(; t3.range.end = s3, t3.valueRange && t3.valueRange.end > s3 && (t3.valueRange.end = s3), t3 !== e3;)t3 = t3.context.parent;
                    return a4;
                }
                class u2 extends a3.default {
                    static nextContentHasIndent(e3, t3, n3) {
                        const r3 = a3.default.endOfLine(e3, t3) + 1, o3 = e3[t3 = a3.default.endOfWhiteSpace(e3, r3)];
                        return !!o3 && (t3 >= r3 + n3 || ("#" === o3 || "\n" === o3) && u2.nextContentHasIndent(e3, t3, n3));
                    }
                    get includesTrailingLines() {
                        return this.items.length > 0;
                    }
                    parse(e3, t3) {
                        this.context = e3;
                        const { parseNode: r3 , src: i3  } = e3;
                        let l2 = a3.default.startOfLine(i3, t3);
                        const f3 = this.items[0];
                        f3.context.parent = this, this.valueRange = s2.default.copy(f3.valueRange);
                        const d2 = f3.range.start - f3.context.lineStart;
                        let p2 = t3;
                        p2 = a3.default.normalizeOffset(i3, p2);
                        let g2 = i3[p2], m2 = a3.default.endOfWhiteSpace(i3, l2) === p2, y2 = false;
                        for(; g2;){
                            for(; "\n" === g2 || "#" === g2;){
                                if (m2 && "\n" === g2 && !y2) {
                                    const e5 = new n2.default();
                                    if (p2 = e5.parse({
                                        src: i3
                                    }, p2), this.valueRange.end = p2, p2 >= i3.length) {
                                        g2 = null;
                                        break;
                                    }
                                    this.items.push(e5), p2 -= 1;
                                } else if ("#" === g2) {
                                    if (p2 < l2 + d2 && !u2.nextContentHasIndent(i3, p2, d2)) return p2;
                                    const e5 = new o2.default();
                                    if (p2 = e5.parse({
                                        indent: d2,
                                        lineStart: l2,
                                        src: i3
                                    }, p2), this.items.push(e5), this.valueRange.end = p2, p2 >= i3.length) {
                                        g2 = null;
                                        break;
                                    }
                                }
                                if (l2 = p2 + 1, p2 = a3.default.endOfIndent(i3, l2), a3.default.atBlank(i3, p2)) {
                                    const e5 = a3.default.endOfWhiteSpace(i3, p2), t4 = i3[e5];
                                    t4 && "\n" !== t4 && "#" !== t4 || (p2 = e5);
                                }
                                g2 = i3[p2], m2 = true;
                            }
                            if (!g2) break;
                            if (p2 !== l2 + d2 && (m2 || ":" !== g2)) {
                                l2 > t3 && (p2 = l2);
                                break;
                            }
                            if (f3.type === h.Type.SEQ_ITEM != ("-" === g2)) {
                                let e5 = true;
                                if ("-" === g2) {
                                    const t4 = i3[p2 + 1];
                                    e5 = !t4 || "\n" === t4 || "	" === t4 || " " === t4;
                                }
                                if (e5) {
                                    l2 > t3 && (p2 = l2);
                                    break;
                                }
                            }
                            const e4 = r3({
                                atLineStart: m2,
                                inCollection: true,
                                indent: d2,
                                lineStart: l2,
                                parent: this
                            }, p2);
                            if (!e4) return p2;
                            if (this.items.push(e4), this.valueRange.end = e4.valueRange.end, p2 = a3.default.normalizeOffset(i3, e4.range.end), g2 = i3[p2], m2 = false, y2 = e4.includesTrailingLines, g2) {
                                let e5 = p2 - 1, t4 = i3[e5];
                                for(; " " === t4 || "	" === t4;)t4 = i3[--e5];
                                "\n" === t4 && (l2 = e5 + 1, m2 = true);
                            }
                            const s3 = c2(e4);
                            s3 && Array.prototype.push.apply(this.items, s3);
                        }
                        return p2;
                    }
                    setOrigRanges(e3, t3) {
                        return t3 = super.setOrigRanges(e3, t3), this.items.forEach((n3)=>{
                            t3 = n3.setOrigRanges(e3, t3);
                        }), t3;
                    }
                    toString() {
                        const { context: { src: e3  } , items: t3 , range: n3 , value: r3  } = this;
                        if (null != r3) return r3;
                        let o3 = e3.slice(n3.start, t3[0].range.start) + String(t3[0]);
                        for(let e4 = 1; e4 < t3.length; ++e4){
                            const n4 = t3[e4], { atLineStart: r4 , indent: a4  } = n4.context;
                            if (r4) for(let e5 = 0; e5 < a4; ++e5)o3 += " ";
                            o3 += String(n4);
                        }
                        return a3.default.addStringTerminator(e3, n3.end, o3);
                    }
                    constructor(e3){
                        super(e3.type === h.Type.SEQ_ITEM ? h.Type.SEQ : h.Type.MAP);
                        for(let t4 = e3.props.length - 1; t4 >= 0; --t4)if (e3.props[t4].start < e3.context.lineStart) {
                            this.props = e3.props.slice(0, t4 + 1), e3.props = e3.props.slice(t4 + 1);
                            const n3 = e3.props[0] || e3.valueRange;
                            e3.range.start = n3.start;
                            break;
                        }
                        this.items = [
                            e3
                        ];
                        const t3 = c2(e3);
                        t3 && Array.prototype.push.apply(this.items, t3);
                    }
                }
                t2.default = u2;
            });
            o(w);
            w.grabCollectionEndComments;
            var E = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = o2(m), r2 = o2(g);
                function o2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                class a3 extends n2.default {
                    get parameters() {
                        const e3 = this.rawValue;
                        return e3 ? e3.trim().split(/[ \t]+/) : [];
                    }
                    parseName(e3) {
                        const { src: t3  } = this.context;
                        let n3 = e3, r3 = t3[n3];
                        for(; r3 && "\n" !== r3 && "	" !== r3 && " " !== r3;)r3 = t3[n3 += 1];
                        return this.name = t3.slice(e3, n3), n3;
                    }
                    parseParameters(e3) {
                        const { src: t3  } = this.context;
                        let n3 = e3, o3 = t3[n3];
                        for(; o3 && "\n" !== o3 && "#" !== o3;)o3 = t3[n3 += 1];
                        return this.valueRange = new r2.default(e3, n3), n3;
                    }
                    parse(e3, t3) {
                        this.context = e3;
                        let n3 = this.parseName(t3 + 1);
                        return n3 = this.parseParameters(n3), n3 = this.parseComment(n3), this.range = new r2.default(t3, n3), n3;
                    }
                    constructor(){
                        super(h.Type.DIRECTIVE), this.name = null;
                    }
                }
                t2.default = a3;
            });
            o(E);
            var O = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = i2(v), r2 = i2(b), o2 = i2(E), a3 = i2(m), s2 = i2(g);
                function i2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                class c2 extends a3.default {
                    static startCommentOrEndBlankLine(e3, t3) {
                        const n3 = a3.default.endOfWhiteSpace(e3, t3), r3 = e3[n3];
                        return "#" === r3 || "\n" === r3 ? n3 : t3;
                    }
                    parseDirectives(e3) {
                        const { src: t3  } = this.context;
                        this.directives = [];
                        let i3 = true, u2 = false, l2 = e3;
                        for(; !a3.default.atDocumentBoundary(t3, l2, h.Char.DIRECTIVES_END);)switch(l2 = c2.startCommentOrEndBlankLine(t3, l2), t3[l2]){
                            case "\n":
                                if (i3) {
                                    const e4 = new n2.default();
                                    l2 = e4.parse({
                                        src: t3
                                    }, l2), l2 < t3.length && this.directives.push(e4);
                                } else l2 += 1, i3 = true;
                                break;
                            case "#":
                                {
                                    const e4 = new r2.default();
                                    l2 = e4.parse({
                                        src: t3
                                    }, l2), this.directives.push(e4), i3 = false;
                                }
                                break;
                            case "%":
                                {
                                    const e4 = new o2.default();
                                    l2 = e4.parse({
                                        parent: this,
                                        src: t3
                                    }, l2), this.directives.push(e4), u2 = true, i3 = false;
                                }
                                break;
                            default:
                                return u2 ? this.error = new y.YAMLSemanticError(this, "Missing directives-end indicator line") : this.directives.length > 0 && (this.contents = this.directives, this.directives = []), l2;
                        }
                        return t3[l2] ? (this.directivesEndMarker = new s2.default(l2, l2 + 3), l2 + 3) : (u2 ? this.error = new y.YAMLSemanticError(this, "Missing directives-end indicator line") : this.directives.length > 0 && (this.contents = this.directives, this.directives = []), l2);
                    }
                    parseContents(e3) {
                        const { parseNode: t3 , src: o3  } = this.context;
                        this.contents || (this.contents = []);
                        let i3 = e3;
                        for(; "-" === o3[i3 - 1];)i3 -= 1;
                        let u2 = a3.default.endOfWhiteSpace(o3, e3), l2 = i3 === e3;
                        for(this.valueRange = new s2.default(u2); !a3.default.atDocumentBoundary(o3, u2, h.Char.DOCUMENT_END);){
                            switch(o3[u2]){
                                case "\n":
                                    if (l2) {
                                        const e4 = new n2.default();
                                        u2 = e4.parse({
                                            src: o3
                                        }, u2), u2 < o3.length && this.contents.push(e4);
                                    } else u2 += 1, l2 = true;
                                    i3 = u2;
                                    break;
                                case "#":
                                    {
                                        const e4 = new r2.default();
                                        u2 = e4.parse({
                                            src: o3
                                        }, u2), this.contents.push(e4), l2 = false;
                                    }
                                    break;
                                default:
                                    {
                                        const e4 = a3.default.endOfIndent(o3, u2), n3 = t3({
                                            atLineStart: l2,
                                            indent: -1,
                                            inFlow: false,
                                            inCollection: false,
                                            lineStart: i3,
                                            parent: this
                                        }, e4);
                                        if (!n3) return this.valueRange.end = e4;
                                        this.contents.push(n3), u2 = n3.range.end, l2 = false;
                                        const r3 = (0, w.grabCollectionEndComments)(n3);
                                        r3 && Array.prototype.push.apply(this.contents, r3);
                                    }
                            }
                            u2 = c2.startCommentOrEndBlankLine(o3, u2);
                        }
                        if (this.valueRange.end = u2, o3[u2] && (this.documentEndMarker = new s2.default(u2, u2 + 3), u2 += 3, o3[u2])) {
                            if (u2 = a3.default.endOfWhiteSpace(o3, u2), "#" === o3[u2]) {
                                const e4 = new r2.default();
                                u2 = e4.parse({
                                    src: o3
                                }, u2), this.contents.push(e4);
                            }
                            switch(o3[u2]){
                                case "\n":
                                    u2 += 1;
                                    break;
                                case void 0:
                                    break;
                                default:
                                    this.error = new y.YAMLSyntaxError(this, "Document end marker line cannot have a non-comment suffix");
                            }
                        }
                        return u2;
                    }
                    parse(e3, t3) {
                        e3.root = this, this.context = e3;
                        const { src: n3  } = e3;
                        let r3 = 65279 === n3.charCodeAt(t3) ? t3 + 1 : t3;
                        return r3 = this.parseDirectives(r3), r3 = this.parseContents(r3), r3;
                    }
                    setOrigRanges(e3, t3) {
                        return t3 = super.setOrigRanges(e3, t3), this.directives.forEach((n3)=>{
                            t3 = n3.setOrigRanges(e3, t3);
                        }), this.directivesEndMarker && (t3 = this.directivesEndMarker.setOrigRange(e3, t3)), this.contents.forEach((n3)=>{
                            t3 = n3.setOrigRanges(e3, t3);
                        }), this.documentEndMarker && (t3 = this.documentEndMarker.setOrigRange(e3, t3)), t3;
                    }
                    toString() {
                        const { contents: e3 , directives: t3 , value: n3  } = this;
                        if (null != n3) return n3;
                        let r3 = t3.join("");
                        return e3.length > 0 && ((t3.length > 0 || e3[0].type === h.Type.COMMENT) && (r3 += "---\n"), r3 += e3.join("")), "\n" !== r3[r3.length - 1] && (r3 += "\n"), r3;
                    }
                    constructor(){
                        super(h.Type.DOCUMENT), this.directives = null, this.contents = null, this.directivesEndMarker = null, this.documentEndMarker = null;
                    }
                }
                t2.default = c2;
            });
            o(O);
            var M = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = o2(m), r2 = o2(g);
                function o2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                class a3 extends n2.default {
                    parse(e3, t3) {
                        this.context = e3;
                        const { src: o3  } = e3;
                        let a4 = n2.default.endOfIdentifier(o3, t3 + 1);
                        return this.valueRange = new r2.default(t3 + 1, a4), a4 = n2.default.endOfWhiteSpace(o3, a4), a4 = this.parseComment(a4), a4;
                    }
                }
                t2.default = a3;
            });
            o(M);
            var S = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = t2.Chomp = void 0;
                var n2 = o2(m), r2 = o2(g);
                function o2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                const a3 = {
                    CLIP: "CLIP",
                    KEEP: "KEEP",
                    STRIP: "STRIP"
                };
                t2.Chomp = a3;
                class s2 extends n2.default {
                    get includesTrailingLines() {
                        return this.chomping === a3.KEEP;
                    }
                    get strValue() {
                        if (!this.valueRange || !this.context) return null;
                        let { start: e3 , end: t3  } = this.valueRange;
                        const { indent: r3 , src: o3  } = this.context;
                        if (this.valueRange.isEmpty()) return "";
                        let s3 = null, i2 = o3[t3 - 1];
                        for(; "\n" === i2 || "	" === i2 || " " === i2;){
                            if (t3 -= 1, t3 <= e3) {
                                if (this.chomping === a3.KEEP) break;
                                return "";
                            }
                            "\n" === i2 && (s3 = t3), i2 = o3[t3 - 1];
                        }
                        let c2 = t3 + 1;
                        s3 && (this.chomping === a3.KEEP ? (c2 = s3, t3 = this.valueRange.end) : t3 = s3);
                        const u2 = r3 + this.blockIndent, l2 = this.type === h.Type.BLOCK_FOLDED;
                        let f3 = true, d2 = "", p2 = "", g2 = false;
                        for(let r4 = e3; r4 < t3; ++r4){
                            for(let e5 = 0; e5 < u2 && " " === o3[r4]; ++e5)r4 += 1;
                            const e4 = o3[r4];
                            if ("\n" === e4) "\n" === p2 ? d2 += "\n" : p2 = "\n";
                            else {
                                const a4 = n2.default.endOfLine(o3, r4), s4 = o3.slice(r4, a4);
                                r4 = a4, l2 && (" " === e4 || "	" === e4) && r4 < c2 ? (" " === p2 ? p2 = "\n" : g2 || f3 || "\n" !== p2 || (p2 = "\n\n"), d2 += p2 + s4, p2 = a4 < t3 && o3[a4] || "", g2 = true) : (d2 += p2 + s4, p2 = l2 && r4 < c2 ? " " : "\n", g2 = false), f3 && "" !== s4 && (f3 = false);
                            }
                        }
                        return this.chomping === a3.STRIP ? d2 : d2 + "\n";
                    }
                    parseBlockHeader(e3) {
                        const { src: t3  } = this.context;
                        let n3 = e3 + 1, o3 = "";
                        for(;;){
                            const s3 = t3[n3];
                            switch(s3){
                                case "-":
                                    this.chomping = a3.STRIP;
                                    break;
                                case "+":
                                    this.chomping = a3.KEEP;
                                    break;
                                case "0":
                                case "1":
                                case "2":
                                case "3":
                                case "4":
                                case "5":
                                case "6":
                                case "7":
                                case "8":
                                case "9":
                                    o3 += s3;
                                    break;
                                default:
                                    return this.blockIndent = Number(o3) || null, this.header = new r2.default(e3, n3), n3;
                            }
                            n3 += 1;
                        }
                    }
                    parseBlockValue(e3) {
                        const { indent: t3 , src: o3  } = this.context;
                        let s3 = e3, i2 = e3, c2 = this.blockIndent ? t3 + this.blockIndent - 1 : t3, u2 = 1;
                        for(let e4 = o3[s3]; "\n" === e4 && (s3 += 1, !n2.default.atDocumentBoundary(o3, s3)); e4 = o3[s3]){
                            const e5 = n2.default.endOfBlockIndent(o3, c2, s3);
                            if (null === e5) break;
                            if (!this.blockIndent) {
                                const n3 = e5 - (s3 + t3);
                                if ("\n" !== o3[e5]) {
                                    if (n3 < u2) {
                                        s3 -= 1;
                                        break;
                                    }
                                    this.blockIndent = n3, c2 = t3 + this.blockIndent - 1;
                                } else n3 > u2 && (u2 = n3);
                            }
                            s3 = "\n" === o3[e5] ? e5 : i2 = n2.default.endOfLine(o3, e5);
                        }
                        return this.chomping !== a3.KEEP && (s3 = o3[i2] ? i2 + 1 : i2), this.valueRange = new r2.default(e3 + 1, s3), s3;
                    }
                    parse(e3, t3) {
                        this.context = e3;
                        const { src: r3  } = e3;
                        let o3 = this.parseBlockHeader(t3);
                        return o3 = n2.default.endOfWhiteSpace(r3, o3), o3 = this.parseComment(o3), o3 = this.parseBlockValue(o3), o3;
                    }
                    setOrigRanges(e3, t3) {
                        return t3 = super.setOrigRanges(e3, t3), this.header ? this.header.setOrigRange(e3, t3) : t3;
                    }
                    constructor(e3, t3){
                        super(e3, t3), this.blockIndent = null, this.chomping = a3.CLIP, this.header = null;
                    }
                }
                t2.default = s2;
            });
            o(S);
            S.Chomp;
            var A2 = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = s2(v), r2 = s2(b), o2 = s2(m), a3 = s2(g);
                function s2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                class i2 extends o2.default {
                    prevNodeIsJsonLike(e3 = this.items.length) {
                        const t3 = this.items[e3 - 1];
                        return !!t3 && (t3.jsonLike || t3.type === h.Type.COMMENT && this.nodeIsJsonLike(e3 - 1));
                    }
                    parse(e3, t3) {
                        this.context = e3;
                        const { parseNode: s3 , src: i3  } = e3;
                        let { indent: c2 , lineStart: u2  } = e3, l2 = i3[t3];
                        this.items = [
                            {
                                char: l2,
                                offset: t3
                            }
                        ];
                        let f3 = o2.default.endOfWhiteSpace(i3, t3 + 1);
                        for(l2 = i3[f3]; l2 && "]" !== l2 && "}" !== l2;){
                            switch(l2){
                                case "\n":
                                    if (u2 = f3 + 1, "\n" === i3[o2.default.endOfWhiteSpace(i3, u2)]) {
                                        const e4 = new n2.default();
                                        u2 = e4.parse({
                                            src: i3
                                        }, u2), this.items.push(e4);
                                    }
                                    if (f3 = o2.default.endOfIndent(i3, u2), f3 <= u2 + c2 && (l2 = i3[f3], f3 < u2 + c2 || "]" !== l2 && "}" !== l2)) {
                                        const e4 = "Insufficient indentation in flow collection";
                                        this.error = new y.YAMLSemanticError(this, e4);
                                    }
                                    break;
                                case ",":
                                    this.items.push({
                                        char: l2,
                                        offset: f3
                                    }), f3 += 1;
                                    break;
                                case "#":
                                    {
                                        const e4 = new r2.default();
                                        f3 = e4.parse({
                                            src: i3
                                        }, f3), this.items.push(e4);
                                    }
                                    break;
                                case "?":
                                case ":":
                                    {
                                        const e4 = i3[f3 + 1];
                                        if ("\n" === e4 || "	" === e4 || " " === e4 || "," === e4 || ":" === l2 && this.prevNodeIsJsonLike()) {
                                            this.items.push({
                                                char: l2,
                                                offset: f3
                                            }), f3 += 1;
                                            break;
                                        }
                                    }
                                default:
                                    {
                                        const e4 = s3({
                                            atLineStart: false,
                                            inCollection: false,
                                            inFlow: true,
                                            indent: -1,
                                            lineStart: u2,
                                            parent: this
                                        }, f3);
                                        if (!e4) return this.valueRange = new a3.default(t3, f3), f3;
                                        this.items.push(e4), f3 = o2.default.normalizeOffset(i3, e4.range.end);
                                    }
                            }
                            f3 = o2.default.endOfWhiteSpace(i3, f3), l2 = i3[f3];
                        }
                        return this.valueRange = new a3.default(t3, f3 + 1), l2 && (this.items.push({
                            char: l2,
                            offset: f3
                        }), f3 = o2.default.endOfWhiteSpace(i3, f3 + 1), f3 = this.parseComment(f3)), f3;
                    }
                    setOrigRanges(e3, t3) {
                        return t3 = super.setOrigRanges(e3, t3), this.items.forEach((n3)=>{
                            if (n3 instanceof o2.default) t3 = n3.setOrigRanges(e3, t3);
                            else if (0 === e3.length) n3.origOffset = n3.offset;
                            else {
                                let r3 = t3;
                                for(; r3 < e3.length && !(e3[r3] > n3.offset);)++r3;
                                n3.origOffset = n3.offset + r3, t3 = r3;
                            }
                        }), t3;
                    }
                    toString() {
                        const { context: { src: e3  } , items: t3 , range: n3 , value: r3  } = this;
                        if (null != r3) return r3;
                        const a4 = t3.filter((e4)=>e4 instanceof o2.default);
                        let s3 = "", i3 = n3.start;
                        return a4.forEach((t4)=>{
                            const n4 = e3.slice(i3, t4.range.start);
                            i3 = t4.range.end, s3 += n4 + String(t4), "\n" === s3[s3.length - 1] && "\n" !== e3[i3 - 1] && "\n" === e3[i3] && (i3 += 1);
                        }), s3 += e3.slice(i3, n3.end), o2.default.addStringTerminator(e3, n3.end, s3);
                    }
                    constructor(e3, t3){
                        super(e3, t3), this.items = null;
                    }
                }
                t2.default = i2;
            });
            o(A2);
            var L = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = o2(m), r2 = o2(g);
                function o2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                class a3 extends n2.default {
                    static endOfLine(e3, t3, n3) {
                        let r3 = e3[t3], o3 = t3;
                        for(; r3 && "\n" !== r3 && (!n3 || "[" !== r3 && "]" !== r3 && "{" !== r3 && "}" !== r3 && "," !== r3);){
                            const t4 = e3[o3 + 1];
                            if (":" === r3 && (!t4 || "\n" === t4 || "	" === t4 || " " === t4 || n3 && "," === t4)) break;
                            if ((" " === r3 || "	" === r3) && "#" === t4) break;
                            o3 += 1, r3 = t4;
                        }
                        return o3;
                    }
                    get strValue() {
                        if (!this.valueRange || !this.context) return null;
                        let { start: e3 , end: t3  } = this.valueRange;
                        const { src: r3  } = this.context;
                        let o3 = r3[t3 - 1];
                        for(; e3 < t3 && ("\n" === o3 || "	" === o3 || " " === o3);)o3 = r3[--t3 - 1];
                        for(o3 = r3[e3]; e3 < t3 && ("\n" === o3 || "	" === o3 || " " === o3);)o3 = r3[++e3];
                        let a4 = "";
                        for(let o4 = e3; o4 < t3; ++o4){
                            const e4 = r3[o4];
                            if ("\n" === e4) {
                                const { fold: e5 , offset: t4  } = n2.default.foldNewline(r3, o4, -1);
                                a4 += e5, o4 = t4;
                            } else if (" " === e4 || "	" === e4) {
                                const n3 = o4;
                                let s2 = r3[o4 + 1];
                                for(; o4 < t3 && (" " === s2 || "	" === s2);)o4 += 1, s2 = r3[o4 + 1];
                                "\n" !== s2 && (a4 += o4 > n3 ? r3.slice(n3, o4 + 1) : e4);
                            } else a4 += e4;
                        }
                        return a4;
                    }
                    parseBlockValue(e3) {
                        const { indent: t3 , inFlow: r3 , src: o3  } = this.context;
                        let s2 = e3, i2 = e3;
                        for(let e4 = o3[s2]; "\n" === e4 && !n2.default.atDocumentBoundary(o3, s2 + 1); e4 = o3[s2]){
                            const e5 = n2.default.endOfBlockIndent(o3, t3, s2 + 1);
                            if (null === e5 || "#" === o3[e5]) break;
                            "\n" === o3[e5] ? s2 = e5 : (i2 = a3.endOfLine(o3, e5, r3), s2 = i2);
                        }
                        return this.valueRange.isEmpty() && (this.valueRange.start = e3), this.valueRange.end = i2, i2;
                    }
                    parse(e3, t3) {
                        this.context = e3;
                        const { inFlow: o3 , src: s2  } = e3;
                        let i2 = t3;
                        const c2 = s2[i2];
                        return c2 && "#" !== c2 && "\n" !== c2 && (i2 = a3.endOfLine(s2, t3, o3)), this.valueRange = new r2.default(t3, i2), i2 = n2.default.endOfWhiteSpace(s2, i2), i2 = this.parseComment(i2), this.hasComment && !this.valueRange.isEmpty() || (i2 = this.parseBlockValue(i2)), i2;
                    }
                }
                t2.default = a3;
            });
            o(L);
            var T = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = o2(m), r2 = o2(g);
                function o2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                class a3 extends n2.default {
                    static endOfQuote(e3, t3) {
                        let n3 = e3[t3];
                        for(; n3 && '"' !== n3;)n3 = e3[t3 += "\\" === n3 ? 2 : 1];
                        return t3 + 1;
                    }
                    get strValue() {
                        if (!this.valueRange || !this.context) return null;
                        const e3 = [], { start: t3 , end: r3  } = this.valueRange, { indent: o3 , src: a4  } = this.context;
                        '"' !== a4[r3 - 1] && e3.push(new y.YAMLSyntaxError(this, 'Missing closing "quote'));
                        let s2 = "";
                        for(let i2 = t3 + 1; i2 < r3 - 1; ++i2){
                            const t4 = a4[i2];
                            if ("\n" === t4) {
                                n2.default.atDocumentBoundary(a4, i2 + 1) && e3.push(new y.YAMLSemanticError(this, "Document boundary indicators are not allowed within string values"));
                                const { fold: t5 , offset: r4 , error: c2  } = n2.default.foldNewline(a4, i2, o3);
                                s2 += t5, i2 = r4, c2 && e3.push(new y.YAMLSemanticError(this, "Multi-line double-quoted string needs to be sufficiently indented"));
                            } else if ("\\" === t4) switch(i2 += 1, a4[i2]){
                                case "0":
                                    s2 += "\0";
                                    break;
                                case "a":
                                    s2 += "\x07";
                                    break;
                                case "b":
                                    s2 += "\b";
                                    break;
                                case "e":
                                    s2 += "\x1B";
                                    break;
                                case "f":
                                    s2 += "\f";
                                    break;
                                case "n":
                                    s2 += "\n";
                                    break;
                                case "r":
                                    s2 += "\r";
                                    break;
                                case "t":
                                    s2 += "	";
                                    break;
                                case "v":
                                    s2 += "\v";
                                    break;
                                case "N":
                                    s2 += "\x85";
                                    break;
                                case "_":
                                    s2 += "\xA0";
                                    break;
                                case "L":
                                    s2 += "\u2028";
                                    break;
                                case "P":
                                    s2 += "\u2029";
                                    break;
                                case " ":
                                    s2 += " ";
                                    break;
                                case '"':
                                    s2 += '"';
                                    break;
                                case "/":
                                    s2 += "/";
                                    break;
                                case "\\":
                                    s2 += "\\";
                                    break;
                                case "	":
                                    s2 += "	";
                                    break;
                                case "x":
                                    s2 += this.parseCharCode(i2 + 1, 2, e3), i2 += 2;
                                    break;
                                case "u":
                                    s2 += this.parseCharCode(i2 + 1, 4, e3), i2 += 4;
                                    break;
                                case "U":
                                    s2 += this.parseCharCode(i2 + 1, 8, e3), i2 += 8;
                                    break;
                                case "\n":
                                    for(; " " === a4[i2 + 1] || "	" === a4[i2 + 1];)i2 += 1;
                                    break;
                                default:
                                    e3.push(new y.YAMLSyntaxError(this, "Invalid escape sequence ".concat(a4.substr(i2 - 1, 2)))), s2 += "\\" + a4[i2];
                            }
                            else if (" " === t4 || "	" === t4) {
                                const e4 = i2;
                                let n3 = a4[i2 + 1];
                                for(; " " === n3 || "	" === n3;)i2 += 1, n3 = a4[i2 + 1];
                                "\n" !== n3 && (s2 += i2 > e4 ? a4.slice(e4, i2 + 1) : t4);
                            } else s2 += t4;
                        }
                        return e3.length > 0 ? {
                            errors: e3,
                            str: s2
                        } : s2;
                    }
                    parseCharCode(e3, t3, n3) {
                        const { src: r3  } = this.context, o3 = r3.substr(e3, t3), a4 = o3.length === t3 && /^[0-9a-fA-F]+$/.test(o3) ? parseInt(o3, 16) : NaN;
                        return isNaN(a4) ? (n3.push(new y.YAMLSyntaxError(this, "Invalid escape sequence ".concat(r3.substr(e3 - 2, t3 + 2)))), r3.substr(e3 - 2, t3 + 2)) : String.fromCodePoint(a4);
                    }
                    parse(e3, t3) {
                        this.context = e3;
                        const { src: o3  } = e3;
                        let s2 = a3.endOfQuote(o3, t3 + 1);
                        return this.valueRange = new r2.default(t3, s2), s2 = n2.default.endOfWhiteSpace(o3, s2), s2 = this.parseComment(s2), s2;
                    }
                }
                t2.default = a3;
            });
            o(T);
            var P = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = o2(m), r2 = o2(g);
                function o2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                class a3 extends n2.default {
                    static endOfQuote(e3, t3) {
                        let n3 = e3[t3];
                        for(; n3;)if ("'" === n3) {
                            if ("'" !== e3[t3 + 1]) break;
                            n3 = e3[t3 += 2];
                        } else n3 = e3[t3 += 1];
                        return t3 + 1;
                    }
                    get strValue() {
                        if (!this.valueRange || !this.context) return null;
                        const e3 = [], { start: t3 , end: r3  } = this.valueRange, { indent: o3 , src: a4  } = this.context;
                        "'" !== a4[r3 - 1] && e3.push(new y.YAMLSyntaxError(this, "Missing closing 'quote"));
                        let s2 = "";
                        for(let i2 = t3 + 1; i2 < r3 - 1; ++i2){
                            const t4 = a4[i2];
                            if ("\n" === t4) {
                                n2.default.atDocumentBoundary(a4, i2 + 1) && e3.push(new y.YAMLSemanticError(this, "Document boundary indicators are not allowed within string values"));
                                const { fold: t5 , offset: r4 , error: c2  } = n2.default.foldNewline(a4, i2, o3);
                                s2 += t5, i2 = r4, c2 && e3.push(new y.YAMLSemanticError(this, "Multi-line single-quoted string needs to be sufficiently indented"));
                            } else if ("'" === t4) s2 += t4, i2 += 1, "'" !== a4[i2] && e3.push(new y.YAMLSyntaxError(this, "Unescaped single quote? This should not happen."));
                            else if (" " === t4 || "	" === t4) {
                                const e4 = i2;
                                let n3 = a4[i2 + 1];
                                for(; " " === n3 || "	" === n3;)i2 += 1, n3 = a4[i2 + 1];
                                "\n" !== n3 && (s2 += i2 > e4 ? a4.slice(e4, i2 + 1) : t4);
                            } else s2 += t4;
                        }
                        return e3.length > 0 ? {
                            errors: e3,
                            str: s2
                        } : s2;
                    }
                    parse(e3, t3) {
                        this.context = e3;
                        const { src: o3  } = e3;
                        let s2 = a3.endOfQuote(o3, t3 + 1);
                        return this.valueRange = new r2.default(t3, s2), s2 = n2.default.endOfWhiteSpace(o3, s2), s2 = this.parseComment(s2), s2;
                    }
                }
                t2.default = a3;
            });
            o(P);
            var C = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = d2(M), r2 = d2(S), o2 = d2(w), a3 = d2(_), s2 = d2(A2), i2 = d2(m), c2 = d2(L), u2 = d2(T), l2 = d2(P), f3 = d2(g);
                function d2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                class p2 {
                    static parseType(e3, t3, n3) {
                        switch(e3[t3]){
                            case "*":
                                return h.Type.ALIAS;
                            case ">":
                                return h.Type.BLOCK_FOLDED;
                            case "|":
                                return h.Type.BLOCK_LITERAL;
                            case "{":
                                return h.Type.FLOW_MAP;
                            case "[":
                                return h.Type.FLOW_SEQ;
                            case "?":
                                return !n3 && i2.default.atBlank(e3, t3 + 1, true) ? h.Type.MAP_KEY : h.Type.PLAIN;
                            case ":":
                                return !n3 && i2.default.atBlank(e3, t3 + 1, true) ? h.Type.MAP_VALUE : h.Type.PLAIN;
                            case "-":
                                return !n3 && i2.default.atBlank(e3, t3 + 1, true) ? h.Type.SEQ_ITEM : h.Type.PLAIN;
                            case '"':
                                return h.Type.QUOTE_DOUBLE;
                            case "'":
                                return h.Type.QUOTE_SINGLE;
                            default:
                                return h.Type.PLAIN;
                        }
                    }
                    nodeStartsCollection(e3) {
                        const { inCollection: t3 , inFlow: n3 , src: r3  } = this;
                        if (t3 || n3) return false;
                        if (e3 instanceof a3.default) return true;
                        let o3 = e3.range.end;
                        return "\n" !== r3[o3] && "\n" !== r3[o3 - 1] && (o3 = i2.default.endOfWhiteSpace(r3, o3), ":" === r3[o3]);
                    }
                    parseProps(e3) {
                        const { inFlow: t3 , parent: n3 , src: r3  } = this, o3 = [];
                        let a4 = false, s3 = r3[e3 = i2.default.endOfWhiteSpace(r3, e3)];
                        for(; s3 === h.Char.ANCHOR || s3 === h.Char.COMMENT || s3 === h.Char.TAG || "\n" === s3;){
                            if ("\n" === s3) {
                                const t4 = e3 + 1, o4 = i2.default.endOfIndent(r3, t4), s4 = o4 - (t4 + this.indent), c3 = n3.type === h.Type.SEQ_ITEM && n3.context.atLineStart;
                                if (!i2.default.nextNodeIsIndented(r3[o4], s4, !c3)) break;
                                this.atLineStart = true, this.lineStart = t4, a4 = false, e3 = o4;
                            } else if (s3 === h.Char.COMMENT) {
                                const t4 = i2.default.endOfLine(r3, e3 + 1);
                                o3.push(new f3.default(e3, t4)), e3 = t4;
                            } else {
                                let t4 = i2.default.endOfIdentifier(r3, e3 + 1);
                                s3 === h.Char.TAG && "," === r3[t4] && /^[a-zA-Z0-9-]+\.[a-zA-Z0-9-]+,\d\d\d\d(-\d\d){0,2}\/\S/.test(r3.slice(e3 + 1, t4 + 13)) && (t4 = i2.default.endOfIdentifier(r3, t4 + 5)), o3.push(new f3.default(e3, t4)), a4 = true, e3 = i2.default.endOfWhiteSpace(r3, t4);
                            }
                            s3 = r3[e3];
                        }
                        return a4 && ":" === s3 && i2.default.atBlank(r3, e3 + 1, true) && (e3 -= 1), {
                            props: o3,
                            type: p2.parseType(r3, e3, t3),
                            valueStart: e3
                        };
                    }
                    constructor(e3 = {}, { atLineStart: t3 , inCollection: d3 , inFlow: g2 , indent: m2 , lineStart: v2 , parent: _2  } = {}){
                        var b2, w2, E2;
                        E2 = (e4, t4)=>{
                            if (i2.default.atDocumentBoundary(this.src, t4)) return null;
                            const d4 = new p2(this, e4), { props: g3 , type: m3 , valueStart: v3  } = d4.parseProps(t4), _3 = function(e5, t5) {
                                switch(e5){
                                    case h.Type.ALIAS:
                                        return new n2.default(e5, t5);
                                    case h.Type.BLOCK_FOLDED:
                                    case h.Type.BLOCK_LITERAL:
                                        return new r2.default(e5, t5);
                                    case h.Type.FLOW_MAP:
                                    case h.Type.FLOW_SEQ:
                                        return new s2.default(e5, t5);
                                    case h.Type.MAP_KEY:
                                    case h.Type.MAP_VALUE:
                                    case h.Type.SEQ_ITEM:
                                        return new a3.default(e5, t5);
                                    case h.Type.COMMENT:
                                    case h.Type.PLAIN:
                                        return new c2.default(e5, t5);
                                    case h.Type.QUOTE_DOUBLE:
                                        return new u2.default(e5, t5);
                                    case h.Type.QUOTE_SINGLE:
                                        return new l2.default(e5, t5);
                                    default:
                                        return null;
                                }
                            }(m3, g3);
                            let b3 = _3.parse(d4, v3);
                            if (_3.range = new f3.default(t4, b3), b3 <= t4 && (_3.error = new Error("Node#parse consumed no characters"), _3.error.parseEnd = b3, _3.error.source = _3, _3.range.end = t4 + 1), d4.nodeStartsCollection(_3)) {
                                _3.error || d4.atLineStart || d4.parent.type !== h.Type.DOCUMENT || (_3.error = new y.YAMLSyntaxError(_3, "Block collection must not have preceding content here (e.g. directives-end indicator)"));
                                const e5 = new o2.default(_3);
                                return b3 = e5.parse(new p2(d4), b3), e5.range = new f3.default(t4, b3), e5;
                            }
                            return _3;
                        }, (w2 = "parseNode") in (b2 = this) ? Object.defineProperty(b2, w2, {
                            value: E2,
                            enumerable: true,
                            configurable: true,
                            writable: true
                        }) : b2[w2] = E2, this.atLineStart = null != t3 ? t3 : e3.atLineStart || false, this.inCollection = null != d3 ? d3 : e3.inCollection || false, this.inFlow = null != g2 ? g2 : e3.inFlow || false, this.indent = null != m2 ? m2 : e3.indent, this.lineStart = null != v2 ? v2 : e3.lineStart, this.parent = null != _2 ? _2 : e3.parent || {}, this.root = e3.root, this.src = e3.src;
                    }
                }
                t2.default = p2;
            });
            o(C);
            var N = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = function(e3) {
                    const t3 = [];
                    -1 !== e3.indexOf("\r") && (e3 = e3.replace(/\r\n?/g, (e4, n3)=>(e4.length > 1 && t3.push(n3), "\n")));
                    const o3 = [];
                    let a3 = 0;
                    do {
                        const t4 = new n2.default(), s2 = new r2.default({
                            src: e3
                        });
                        a3 = t4.parse(s2, a3), o3.push(t4);
                    }while (a3 < e3.length)
                    return o3.setOrigRanges = ()=>{
                        if (0 === t3.length) return false;
                        for(let e5 = 1; e5 < t3.length; ++e5)t3[e5] -= e5;
                        let e4 = 0;
                        for(let n3 = 0; n3 < o3.length; ++n3)e4 = o3[n3].setOrigRanges(t3, e4);
                        return t3.splice(0, t3.length), true;
                    }, o3.toString = ()=>o3.join("...\n"), o3;
                };
                var n2 = o2(O), r2 = o2(C);
                function o2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
            });
            o(N);
            var x = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.addCommentBefore = function(e3, t3, n2) {
                    if (!n2) return e3;
                    const r2 = n2.replace(/[\s\S]^/gm, "$&".concat(t3, "#"));
                    return "#".concat(r2, "\n").concat(t3).concat(e3);
                }, t2.default = function(e3, t3, n2) {
                    return n2 ? -1 === n2.indexOf("\n") ? "".concat(e3, " #").concat(n2) : "".concat(e3, "\n") + n2.replace(/^/gm, "".concat(t3 || "", "#")) : e3;
                };
            });
            o(x);
            x.addCommentBefore;
            var k = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = function e3(t3, n2, r2) {
                    if (Array.isArray(t3)) return t3.map((t4, n3)=>e3(t4, String(n3), r2));
                    if (t3 && "function" == typeof t3.toJSON) {
                        const e4 = r2 && r2.anchors && r2.anchors.find((e5)=>e5.node === t3);
                        e4 && (r2.onCreate = (t4)=>{
                            e4.res = t4, delete r2.onCreate;
                        });
                        const o2 = t3.toJSON(n2, r2);
                        return e4 && r2.onCreate && r2.onCreate(o2), o2;
                    }
                    return t3;
                };
            });
            o(k);
            var I = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                t2.default = class {
                };
            });
            o(I);
            var R = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = o2(k), r2 = o2(I);
                function o2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                class a3 extends r2.default {
                    toJSON(e3, t3) {
                        return t3 && t3.keep ? this.value : (0, n2.default)(this.value, e3, t3);
                    }
                    toString() {
                        return String(this.value);
                    }
                    constructor(e3){
                        super(), this.value = e3;
                    }
                }
                t2.default = a3;
            });
            o(R);
            var j = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = i2(x), r2 = i2(k), o2 = i2(B), a3 = i2(I), s2 = i2(R);
                function i2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                class c2 extends a3.default {
                    get commentBefore() {
                        return this.key && this.key.commentBefore;
                    }
                    set commentBefore(e3) {
                        null == this.key && (this.key = new s2.default(null)), this.key.commentBefore = e3;
                    }
                    addToJSMap(e3, t3) {
                        const n3 = (0, r2.default)(this.key, "", e3);
                        if (t3 instanceof Map) {
                            const o3 = (0, r2.default)(this.value, n3, e3);
                            t3.set(n3, o3);
                        } else if (t3 instanceof Set) t3.add(n3);
                        else {
                            const o3 = ((e4, t4, n4)=>null === t4 ? "" : "object" != typeof t4 ? String(t4) : e4 instanceof a3.default && n4 && n4.doc ? e4.toString({
                                    anchors: {},
                                    doc: n4.doc,
                                    indent: "",
                                    inFlow: true,
                                    inStringifyKey: true
                                }) : JSON.stringify(t4))(this.key, n3, e3);
                            t3[o3] = (0, r2.default)(this.value, o3, e3);
                        }
                        return t3;
                    }
                    toJSON(e3, t3) {
                        const n3 = t3 && t3.mapAsMap ? /* @__PURE__ */ new Map() : {};
                        return this.addToJSMap(t3, n3);
                    }
                    toString(e3, t3, r3) {
                        if (!e3 || !e3.doc) return JSON.stringify(this);
                        const { simpleKeys: i3  } = e3.doc.options;
                        let { key: c3 , value: u2  } = this, l2 = c3 instanceof a3.default && c3.comment;
                        if (i3) {
                            if (l2) throw new Error("With simple keys, key nodes cannot have comments");
                            if (c3 instanceof o2.default) {
                                throw new Error("With simple keys, collection cannot be used as a key value");
                            }
                        }
                        const f3 = !i3 && (!c3 || l2 || c3 instanceof o2.default || c3.type === h.Type.BLOCK_FOLDED || c3.type === h.Type.BLOCK_LITERAL), { doc: d2 , indent: p2  } = e3;
                        e3 = Object.assign({}, e3, {
                            implicitKey: !f3,
                            indent: p2 + "  "
                        });
                        let g2 = false, m2 = d2.schema.stringify(c3, e3, ()=>l2 = null, ()=>g2 = true);
                        if (m2 = (0, n2.default)(m2, e3.indent, l2), e3.allNullValues && !i3) return this.comment ? (m2 = (0, n2.default)(m2, e3.indent, this.comment), t3 && t3()) : g2 && !l2 && r3 && r3(), e3.inFlow ? m2 : "? ".concat(m2);
                        m2 = f3 ? "? ".concat(m2, "\n").concat(p2, ":") : "".concat(m2, ":"), this.comment && (m2 = (0, n2.default)(m2, e3.indent, this.comment), t3 && t3());
                        let y2 = "", v2 = null;
                        if (u2 instanceof a3.default) {
                            if (u2.spaceBefore && (y2 = "\n"), u2.commentBefore) {
                                const t4 = u2.commentBefore.replace(/^/gm, "".concat(e3.indent, "#"));
                                y2 += "\n".concat(t4);
                            }
                            v2 = u2.comment;
                        } else u2 && "object" == typeof u2 && (u2 = d2.schema.createNode(u2, true));
                        e3.implicitKey = false, !f3 && !this.comment && u2 instanceof s2.default && (e3.indentAtStart = m2.length + 1), g2 = false;
                        const _2 = d2.schema.stringify(u2, e3, ()=>v2 = null, ()=>g2 = true);
                        let b2 = " ";
                        if (y2 || this.comment) b2 = "".concat(y2, "\n").concat(e3.indent);
                        else if (!f3 && u2 instanceof o2.default) {
                            ("[" === _2[0] || "{" === _2[0]) && !_2.includes("\n") || (b2 = "\n".concat(e3.indent));
                        }
                        return g2 && !v2 && r3 && r3(), (0, n2.default)(m2 + b2 + _2, e3.indent, v2);
                    }
                    constructor(e3, t3 = null){
                        super(), this.key = e3, this.value = t3, this.type = "PAIR";
                    }
                }
                t2.default = c2;
            });
            o(j);
            var B = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = t2.isEmptyPath = void 0;
                var n2 = s2(x), r2 = s2(I), o2 = s2(j), a3 = s2(R);
                function s2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                function i2(e3, t3, n3) {
                    return t3 in e3 ? Object.defineProperty(e3, t3, {
                        value: n3,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    }) : e3[t3] = n3, e3;
                }
                function c2(e3, t3, n3) {
                    let r3 = n3;
                    for(let e4 = t3.length - 1; e4 >= 0; --e4){
                        const n4 = t3[e4], o3 = Number.isInteger(n4) && n4 >= 0 ? [] : {};
                        o3[n4] = r3, r3 = o3;
                    }
                    return e3.createNode(r3, false);
                }
                const u2 = (e3)=>null == e3 || "object" == typeof e3 && e3[Symbol.iterator]().next().done;
                t2.isEmptyPath = u2;
                class l2 extends r2.default {
                    addIn(e3, t3) {
                        if (u2(e3)) this.add(t3);
                        else {
                            const [n3, ...r3] = e3, o3 = this.get(n3, true);
                            if (o3 instanceof l2) o3.addIn(r3, t3);
                            else {
                                if (void 0 !== o3 || !this.schema) throw new Error("Expected YAML collection at ".concat(n3, ". Remaining path: ").concat(r3));
                                this.set(n3, c2(this.schema, r3, t3));
                            }
                        }
                    }
                    deleteIn([e3, ...t3]) {
                        if (0 === t3.length) return this.delete(e3);
                        const n3 = this.get(e3, true);
                        if (n3 instanceof l2) return n3.deleteIn(t3);
                        throw new Error("Expected YAML collection at ".concat(e3, ". Remaining path: ").concat(t3));
                    }
                    getIn([e3, ...t3], n3) {
                        const r3 = this.get(e3, true);
                        return 0 === t3.length ? !n3 && r3 instanceof a3.default ? r3.value : r3 : r3 instanceof l2 ? r3.getIn(t3, n3) : void 0;
                    }
                    hasAllNullValues() {
                        return this.items.every((e3)=>{
                            if (!(e3 instanceof o2.default)) return false;
                            const t3 = e3.value;
                            return null == t3 || t3 instanceof a3.default && null == t3.value && !t3.commentBefore && !t3.comment && !t3.tag;
                        });
                    }
                    hasIn([e3, ...t3]) {
                        if (0 === t3.length) return this.has(e3);
                        const n3 = this.get(e3, true);
                        return n3 instanceof l2 && n3.hasIn(t3);
                    }
                    setIn([e3, ...t3], n3) {
                        if (0 === t3.length) this.set(e3, n3);
                        else {
                            const r3 = this.get(e3, true);
                            if (r3 instanceof l2) r3.setIn(t3, n3);
                            else {
                                if (void 0 !== r3 || !this.schema) throw new Error("Expected YAML collection at ".concat(e3, ". Remaining path: ").concat(t3));
                                this.set(e3, c2(this.schema, t3, n3));
                            }
                        }
                    }
                    toJSON() {
                        return null;
                    }
                    toString(e3, { blockItem: t3 , flowChars: r3 , isMap: o3 , itemIndent: a4  }, s3, i3) {
                        const { doc: c3 , indent: u3  } = e3, f3 = this.type && "FLOW" === this.type.substr(0, 4) || e3.inFlow;
                        f3 && (a4 += "  ");
                        const d2 = o3 && this.hasAllNullValues();
                        e3 = Object.assign({}, e3, {
                            allNullValues: d2,
                            indent: a4,
                            inFlow: f3,
                            type: null
                        });
                        let h2 = false, p2 = false;
                        const g2 = this.items.reduce((t4, r4, o4)=>{
                            let s4;
                            r4 && (!h2 && r4.spaceBefore && t4.push({
                                type: "comment",
                                str: ""
                            }), r4.commentBefore && r4.commentBefore.match(/^.*$/gm).forEach((e4)=>{
                                t4.push({
                                    type: "comment",
                                    str: "#".concat(e4)
                                });
                            }), r4.comment && (s4 = r4.comment), f3 && (!h2 && r4.spaceBefore || r4.commentBefore || r4.comment || r4.key && (r4.key.commentBefore || r4.key.comment) || r4.value && (r4.value.commentBefore || r4.value.comment)) && (p2 = true)), h2 = false;
                            let i4 = c3.schema.stringify(r4, e3, ()=>s4 = null, ()=>h2 = true);
                            return f3 && !p2 && i4.includes("\n") && (p2 = true), f3 && o4 < this.items.length - 1 && (i4 += ","), i4 = (0, n2.default)(i4, a4, s4), h2 && (s4 || f3) && (h2 = false), t4.push({
                                type: "item",
                                str: i4
                            }), t4;
                        }, []);
                        let m2;
                        if (0 === g2.length) m2 = r3.start + r3.end;
                        else if (f3) {
                            const { start: e4 , end: t4  } = r3, n3 = g2.map((e5)=>e5.str);
                            if (p2 || n3.reduce((e5, t5)=>e5 + t5.length + 2, 2) > l2.maxFlowStringSingleLineLength) {
                                m2 = e4;
                                for (const e5 of n3)m2 += e5 ? "\n  ".concat(u3).concat(e5) : "\n";
                                m2 += "\n".concat(u3).concat(t4);
                            } else m2 = "".concat(e4, " ").concat(n3.join(" "), " ").concat(t4);
                        } else {
                            const e4 = g2.map(t3);
                            m2 = e4.shift();
                            for (const t4 of e4)m2 += t4 ? "\n".concat(u3).concat(t4) : "\n";
                        }
                        return this.comment ? (m2 += "\n" + this.comment.replace(/^/gm, "".concat(u3, "#")), s3 && s3()) : h2 && i3 && i3(), m2;
                    }
                    constructor(e3){
                        super(), i2(this, "items", []), this.schema = e3;
                    }
                }
                t2.default = l2, i2(l2, "maxFlowStringSingleLineLength", 60);
            });
            o(B);
            B.isEmptyPath;
            var D = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = s2(k), r2 = s2(B), o2 = s2(I), a3 = s2(j);
                function s2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                const i2 = (e3, t3)=>{
                    if (e3 instanceof c2) {
                        const n3 = t3.find((t4)=>t4.node === e3.source);
                        return n3.count * n3.aliasCount;
                    }
                    if (e3 instanceof r2.default) {
                        let n3 = 0;
                        for (const r3 of e3.items){
                            const e4 = i2(r3, t3);
                            e4 > n3 && (n3 = e4);
                        }
                        return n3;
                    }
                    if (e3 instanceof a3.default) {
                        const n3 = i2(e3.key, t3), r3 = i2(e3.value, t3);
                        return Math.max(n3, r3);
                    }
                    return 1;
                };
                class c2 extends o2.default {
                    static stringify({ range: e3 , source: t3  }, { anchors: n3 , doc: r3 , implicitKey: o3 , inStringifyKey: a4  }) {
                        let s3 = Object.keys(n3).find((e4)=>n3[e4] === t3);
                        if (!s3 && a4 && (s3 = r3.anchors.getName(t3) || r3.anchors.newName()), s3) return "*".concat(s3).concat(o3 ? " " : "");
                        const i3 = r3.anchors.getName(t3) ? "Alias node must be after source node" : "Source node not found for alias node";
                        throw new Error("".concat(i3, " [").concat(e3, "]"));
                    }
                    set tag(e3) {
                        throw new Error("Alias nodes cannot have tags");
                    }
                    toJSON(e3, t3) {
                        if (!t3) return (0, n2.default)(this.source, e3, t3);
                        const { anchors: r3 , maxAliasCount: o3  } = t3, a4 = r3.find((e4)=>e4.node === this.source);
                        if (!a4 || void 0 === a4.res) {
                            const e4 = "This should not happen: Alias anchor was not resolved?";
                            throw this.cstNode ? new y.YAMLReferenceError(this.cstNode, e4) : new ReferenceError(e4);
                        }
                        if (o3 >= 0 && (a4.count += 1, 0 === a4.aliasCount && (a4.aliasCount = i2(this.source, r3)), a4.count * a4.aliasCount > o3)) {
                            const e4 = "Excessive alias count indicates a resource exhaustion attack";
                            throw this.cstNode ? new y.YAMLReferenceError(this.cstNode, e4) : new ReferenceError(e4);
                        }
                        return a4.res;
                    }
                    toString(e3) {
                        return c2.stringify(this, e3);
                    }
                    constructor(e3){
                        super(), this.source = e3, this.type = h.Type.ALIAS;
                    }
                }
                var u2, l2, f3;
                t2.default = c2, f3 = true, (l2 = "default") in (u2 = c2) ? Object.defineProperty(u2, l2, {
                    value: f3,
                    enumerable: true,
                    configurable: true,
                    writable: true
                }) : u2[l2] = f3;
            });
            o(D);
            var Y = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.findPair = s2, t2.default = void 0;
                var n2 = a3(B), r2 = a3(j), o2 = a3(R);
                function a3(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                function s2(e3, t3) {
                    const n3 = t3 instanceof o2.default ? t3.value : t3;
                    for (const o3 of e3)if (o3 instanceof r2.default) {
                        if (o3.key === t3 || o3.key === n3) return o3;
                        if (o3.key && o3.key.value === n3) return o3;
                    }
                }
                class i2 extends n2.default {
                    add(e3, t3) {
                        e3 ? e3 instanceof r2.default || (e3 = new r2.default(e3.key || e3, e3.value)) : e3 = new r2.default(e3);
                        const n3 = s2(this.items, e3.key), o3 = this.schema && this.schema.sortMapEntries;
                        if (n3) {
                            if (!t3) throw new Error("Key ".concat(e3.key, " already set"));
                            n3.value = e3.value;
                        } else if (o3) {
                            const t4 = this.items.findIndex((t5)=>o3(e3, t5) < 0);
                            -1 === t4 ? this.items.push(e3) : this.items.splice(t4, 0, e3);
                        } else this.items.push(e3);
                    }
                    delete(e3) {
                        const t3 = s2(this.items, e3);
                        return !!t3 && this.items.splice(this.items.indexOf(t3), 1).length > 0;
                    }
                    get(e3, t3) {
                        const n3 = s2(this.items, e3), r3 = n3 && n3.value;
                        return !t3 && r3 instanceof o2.default ? r3.value : r3;
                    }
                    has(e3) {
                        return !!s2(this.items, e3);
                    }
                    set(e3, t3) {
                        this.add(new r2.default(e3, t3), true);
                    }
                    toJSON(e3, t3, n3) {
                        const r3 = n3 ? new n3() : t3 && t3.mapAsMap ? /* @__PURE__ */ new Map() : {};
                        t3 && t3.onCreate && t3.onCreate(r3);
                        for (const e4 of this.items)e4.addToJSMap(t3, r3);
                        return r3;
                    }
                    toString(e3, t3, n3) {
                        if (!e3) return JSON.stringify(this);
                        for (const e4 of this.items)if (!(e4 instanceof r2.default)) throw new Error("Map items must all be pairs; found ".concat(JSON.stringify(e4), " instead"));
                        return super.toString(e3, {
                            blockItem: (e4)=>e4.str,
                            flowChars: {
                                start: "{",
                                end: "}"
                            },
                            isMap: true,
                            itemIndent: e3.indent || ""
                        }, t3, n3);
                    }
                }
                t2.default = i2;
            });
            o(Y);
            Y.findPair;
            var F = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = a3(k), r2 = a3(B), o2 = a3(R);
                function a3(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                function s2(e3) {
                    let t3 = e3 instanceof o2.default ? e3.value : e3;
                    return t3 && "string" == typeof t3 && (t3 = Number(t3)), Number.isInteger(t3) && t3 >= 0 ? t3 : null;
                }
                class i2 extends r2.default {
                    add(e3) {
                        this.items.push(e3);
                    }
                    delete(e3) {
                        const t3 = s2(e3);
                        return "number" == typeof t3 && this.items.splice(t3, 1).length > 0;
                    }
                    get(e3, t3) {
                        const n3 = s2(e3);
                        if ("number" != typeof n3) return;
                        const r3 = this.items[n3];
                        return !t3 && r3 instanceof o2.default ? r3.value : r3;
                    }
                    has(e3) {
                        const t3 = s2(e3);
                        return "number" == typeof t3 && t3 < this.items.length;
                    }
                    set(e3, t3) {
                        const n3 = s2(e3);
                        if ("number" != typeof n3) throw new Error("Expected a valid index, not ".concat(e3, "."));
                        this.items[n3] = t3;
                    }
                    toJSON(e3, t3) {
                        const r3 = [];
                        t3 && t3.onCreate && t3.onCreate(r3);
                        let o3 = 0;
                        for (const e4 of this.items)r3.push((0, n2.default)(e4, String(o3++), t3));
                        return r3;
                    }
                    toString(e3, t3, n3) {
                        return e3 ? super.toString(e3, {
                            blockItem: (e4)=>"comment" === e4.type ? e4.str : "- ".concat(e4.str),
                            flowChars: {
                                start: "[",
                                end: "]"
                            },
                            isMap: false,
                            itemIndent: (e3.indent || "") + "  "
                        }, t3, n3) : JSON.stringify(this);
                    }
                }
                t2.default = i2;
            });
            o(F);
            var U = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = t2.MERGE_KEY = void 0;
                var n2 = s2(Y), r2 = s2(j), o2 = s2(R), a3 = s2(F);
                function s2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                t2.MERGE_KEY = "<<";
                class i2 extends r2.default {
                    addToJSMap(e3, t3) {
                        for (const { source: r3  } of this.value.items){
                            if (!(r3 instanceof n2.default)) throw new Error("Merge sources must be maps");
                            const o3 = r3.toJSON(null, e3, Map);
                            for (const [e4, n3] of o3)t3 instanceof Map ? t3.has(e4) || t3.set(e4, n3) : t3 instanceof Set ? t3.add(e4) : Object.prototype.hasOwnProperty.call(t3, e4) || (t3[e4] = n3);
                        }
                        return t3;
                    }
                    toString(e3, t3) {
                        const n3 = this.value;
                        if (n3.items.length > 1) return super.toString(e3, t3);
                        this.value = n3.items[0];
                        const r3 = super.toString(e3, t3);
                        return this.value = n3, r3;
                    }
                    constructor(e3){
                        if (e3 instanceof r2.default) {
                            let t3 = e3.value;
                            t3 instanceof a3.default || (t3 = new a3.default(), t3.items.push(e3.value), t3.range = e3.value.range), super(e3.key, t3), this.range = e3.range;
                        } else super(new o2.default("<<"), new a3.default());
                        this.type = "MERGE_PAIR";
                    }
                }
                t2.default = i2;
            });
            o(U);
            U.MERGE_KEY;
            var W = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = i2(D), r2 = i2(Y), o2 = i2(U), a3 = i2(R), s2 = i2(F);
                function i2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                class c2 {
                    static validAnchorNode(e3) {
                        return e3 instanceof a3.default || e3 instanceof s2.default || e3 instanceof r2.default;
                    }
                    createAlias(e3, t3) {
                        return this.setAnchor(e3, t3), new n2.default(e3);
                    }
                    createMergePair(...e3) {
                        const t3 = new o2.default();
                        return t3.value.items = e3.map((e4)=>{
                            if (e4 instanceof n2.default) {
                                if (e4.source instanceof r2.default) return e4;
                            } else if (e4 instanceof r2.default) return this.createAlias(e4);
                            throw new Error("Merge sources must be Map nodes or their Aliases");
                        }), t3;
                    }
                    getName(e3) {
                        const { map: t3  } = this;
                        return Object.keys(t3).find((n3)=>t3[n3] === e3);
                    }
                    getNode(e3) {
                        return this.map[e3];
                    }
                    newName(e3) {
                        e3 || (e3 = this.prefix);
                        const t3 = Object.keys(this.map);
                        for(let n3 = 1;; ++n3){
                            const r3 = "".concat(e3).concat(n3);
                            if (!t3.includes(r3)) return r3;
                        }
                    }
                    resolveNodes() {
                        const { map: e3 , _cstAliases: t3  } = this;
                        Object.keys(e3).forEach((t4)=>{
                            e3[t4] = e3[t4].resolved;
                        }), t3.forEach((e4)=>{
                            e4.source = e4.source.resolved;
                        }), delete this._cstAliases;
                    }
                    setAnchor(e3, t3) {
                        if (null != e3 && !c2.validAnchorNode(e3)) throw new Error("Anchors may only be set for Scalar, Seq and Map nodes");
                        if (t3 && /[\x00-\x19\s,[\]{}]/.test(t3)) throw new Error("Anchor names must not contain whitespace or control characters");
                        const { map: n3  } = this, r3 = e3 && Object.keys(n3).find((t4)=>n3[t4] === e3);
                        if (r3) {
                            if (!t3) return r3;
                            r3 !== t3 && (delete n3[r3], n3[t3] = e3);
                        } else {
                            if (!t3) {
                                if (!e3) return null;
                                t3 = this.newName();
                            }
                            n3[t3] = e3;
                        }
                        return t3;
                    }
                    constructor(e3){
                        var t3, n3, r3;
                        r3 = {}, (n3 = "map") in (t3 = this) ? Object.defineProperty(t3, n3, {
                            value: r3,
                            enumerable: true,
                            configurable: true,
                            writable: true
                        }) : t3[n3] = r3, this.prefix = e3;
                    }
                }
                t2.default = c2;
            });
            o(W);
            var K = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = a3(B), r2 = a3(j), o2 = a3(R);
                function a3(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                const s2 = (e3, t3)=>{
                    if (e3 && "object" == typeof e3) {
                        const { tag: a4  } = e3;
                        e3 instanceof n2.default ? (a4 && (t3[a4] = true), e3.items.forEach((e4)=>s2(e4, t3))) : e3 instanceof r2.default ? (s2(e3.key, t3), s2(e3.value, t3)) : e3 instanceof o2.default && a4 && (t3[a4] = true);
                    }
                    return t3;
                };
                t2.default = (e3)=>Object.keys(s2(e3, {}));
            });
            o(K);
            var Q = a2(function(e2, t2) {
                function n2(e3, t3) {
                    if (r && r._YAML_SILENCE_WARNINGS) return;
                    const { emitWarning: n3  } = r && r.process;
                    n3 ? n3(e3, t3) : console.warn(t3 ? "".concat(t3, ": ").concat(e3) : e3);
                }
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.warn = n2, t2.warnFileDeprecation = function(e3) {
                    if (r && r._YAML_SILENCE_DEPRECATION_WARNINGS) return;
                    const t3 = e3.replace(/.*yaml[/\\]/i, "").replace(/\.js$/, "").replace(/\\/g, "/");
                    n2("The endpoint 'yaml/".concat(t3, "' will be removed in a future release."), "DeprecationWarning");
                }, t2.warnOptionDeprecation = function(e3, t3) {
                    if (r && r._YAML_SILENCE_DEPRECATION_WARNINGS) return;
                    if (o2[e3]) return;
                    o2[e3] = true;
                    let a3 = "The option '".concat(e3, "' will be removed in a future release");
                    a3 += t3 ? ", use '".concat(t3, "' instead.") : ".", n2(a3, "DeprecationWarning");
                };
                const o2 = {};
            });
            o(Q);
            Q.warn, Q.warnFileDeprecation, Q.warnOptionDeprecation;
            var V = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = function(e3, t3, r2, { indentAtStart: o2 , lineWidth: a3 = 80 , minContentWidth: s2 = 20 , onFold: i2 , onOverflow: c2  }) {
                    if (!a3 || a3 < 0) return e3;
                    const u2 = Math.max(1 + s2, 1 + a3 - t3.length);
                    if (e3.length <= u2) return e3;
                    const l2 = [], f3 = {};
                    let d2, h2 = a3 - ("number" == typeof o2 ? o2 : t3.length), p2 = void 0, g2 = void 0, m2 = false, y2 = -1;
                    "block" === r2 && (y2 = n2(e3, y2), -1 !== y2 && (h2 = y2 + u2));
                    for(; d2 = e3[y2 += 1];){
                        if ("quoted" === r2 && "\\" === d2) switch(e3[y2 + 1]){
                            case "x":
                                y2 += 3;
                                break;
                            case "u":
                                y2 += 5;
                                break;
                            case "U":
                                y2 += 9;
                                break;
                            default:
                                y2 += 1;
                        }
                        if ("\n" === d2) "block" === r2 && (y2 = n2(e3, y2)), h2 = y2 + u2, p2 = void 0;
                        else {
                            if (" " === d2 && g2 && " " !== g2 && "\n" !== g2 && "	" !== g2) {
                                const t4 = e3[y2 + 1];
                                t4 && " " !== t4 && "\n" !== t4 && "	" !== t4 && (p2 = y2);
                            }
                            if (y2 >= h2) if (p2) l2.push(p2), h2 = p2 + u2, p2 = void 0;
                            else if ("quoted" === r2) {
                                for(; " " === g2 || "	" === g2;)g2 = d2, d2 = e3[y2 += 1], m2 = true;
                                l2.push(y2 - 2), f3[y2 - 2] = true, h2 = y2 - 2 + u2, p2 = void 0;
                            } else m2 = true;
                        }
                        g2 = d2;
                    }
                    m2 && c2 && c2();
                    if (0 === l2.length) return e3;
                    i2 && i2();
                    let v2 = e3.slice(0, l2[0]);
                    for(let n3 = 0; n3 < l2.length; ++n3){
                        const o3 = l2[n3], a4 = l2[n3 + 1] || e3.length;
                        "quoted" === r2 && f3[o3] && (v2 += "".concat(e3[o3], "\\")), v2 += "\n".concat(t3).concat(e3.slice(o3 + 1, a4));
                    }
                    return v2;
                }, t2.FOLD_QUOTED = t2.FOLD_BLOCK = t2.FOLD_FLOW = void 0;
                t2.FOLD_FLOW = "flow";
                t2.FOLD_BLOCK = "block";
                t2.FOLD_QUOTED = "quoted";
                const n2 = (e3, t3)=>{
                    let n3 = e3[t3 + 1];
                    for(; " " === n3 || "	" === n3;){
                        do {
                            n3 = e3[t3 += 1];
                        }while (n3 && "\n" !== n3)
                        n3 = e3[t3 + 1];
                    }
                    return t3;
                };
            });
            o(V);
            V.FOLD_QUOTED, V.FOLD_BLOCK, V.FOLD_FLOW;
            var q = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.strOptions = t2.nullOptions = t2.boolOptions = t2.binaryOptions = void 0;
                const n2 = {
                    defaultType: h.Type.BLOCK_LITERAL,
                    lineWidth: 76
                };
                t2.binaryOptions = n2;
                t2.boolOptions = {
                    trueStr: "true",
                    falseStr: "false"
                };
                t2.nullOptions = {
                    nullStr: "null"
                };
                const r2 = {
                    defaultType: h.Type.PLAIN,
                    doubleQuoted: {
                        jsonEncoding: false,
                        minMultiLineLength: 40
                    },
                    fold: {
                        lineWidth: 80,
                        minContentWidth: 20
                    }
                };
                t2.strOptions = r2;
            });
            o(q);
            q.strOptions, q.nullOptions, q.boolOptions, q.binaryOptions;
            var $ = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.stringifyNumber = function({ format: e3 , minFractionDigits: t3 , tag: n3 , value: r3  }) {
                    if (!isFinite(r3)) return isNaN(r3) ? ".nan" : r3 < 0 ? "-.inf" : ".inf";
                    let o3 = JSON.stringify(r3);
                    if (!e3 && t3 && (!n3 || "tag:yaml.org,2002:float" === n3) && /^\d/.test(o3)) {
                        let e4 = o3.indexOf(".");
                        e4 < 0 && (e4 = o3.length, o3 += ".");
                        let n4 = t3 - (o3.length - e4 - 1);
                        for(; n4-- > 0;)o3 += "0";
                    }
                    return o3;
                }, t2.stringifyString = function(e3, t3, r3, c2) {
                    const { defaultType: u2  } = q.strOptions, { implicitKey: l2 , inFlow: f3  } = t3;
                    let { type: d2 , value: p2  } = e3;
                    "string" != typeof p2 && (p2 = String(p2), e3 = Object.assign({}, e3, {
                        value: p2
                    }));
                    const g2 = (u3)=>{
                        switch(u3){
                            case h.Type.BLOCK_FOLDED:
                            case h.Type.BLOCK_LITERAL:
                                return i2(e3, t3, r3, c2);
                            case h.Type.QUOTE_DOUBLE:
                                return a3(p2, t3);
                            case h.Type.QUOTE_SINGLE:
                                return s2(p2, t3);
                            case h.Type.PLAIN:
                                return function(e4, t4, r4, c3) {
                                    const { comment: u4 , type: l3 , value: f4  } = e4, { actualString: d3 , implicitKey: p3 , indent: g3 , inFlow: m3 , tags: y2  } = t4;
                                    if (p3 && /[\n[\]{},]/.test(f4) || m3 && /[[\]{},]/.test(f4)) return a3(f4, t4);
                                    if (!f4 || /^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(f4)) return p3 || m3 || -1 === f4.indexOf("\n") ? -1 !== f4.indexOf('"') && -1 === f4.indexOf("'") ? s2(f4, t4) : a3(f4, t4) : i2(e4, t4, r4, c3);
                                    if (!p3 && !m3 && l3 !== h.Type.PLAIN && -1 !== f4.indexOf("\n")) return i2(e4, t4, r4, c3);
                                    const v2 = f4.replace(/\n+/g, "$&\n".concat(g3));
                                    if (d3 && "string" != typeof y2.resolveScalar(v2).value) return a3(f4, t4);
                                    const _2 = p3 ? v2 : (0, n2.default)(v2, g3, n2.FOLD_FLOW, o2(t4));
                                    if (u4 && !m3 && (-1 !== _2.indexOf("\n") || -1 !== u4.indexOf("\n"))) return r4 && r4(), (0, x.addCommentBefore)(_2, g3, u4);
                                    return _2;
                                }(e3, t3, r3, c2);
                            default:
                                return null;
                        }
                    };
                    d2 !== h.Type.QUOTE_DOUBLE && /[\x00-\x08\x0b-\x1f\x7f-\x9f]/.test(p2) ? d2 = h.Type.QUOTE_DOUBLE : !l2 && !f3 || d2 !== h.Type.BLOCK_FOLDED && d2 !== h.Type.BLOCK_LITERAL || (d2 = h.Type.QUOTE_DOUBLE);
                    let m2 = g2(d2);
                    if (null === m2 && (m2 = g2(u2), null === m2)) throw new Error("Unsupported default string type ".concat(u2));
                    return m2;
                };
                var n2 = function(e3) {
                    if (e3 && e3.__esModule) return e3;
                    if (null === e3 || "object" != typeof e3 && "function" != typeof e3) return {
                        default: e3
                    };
                    var t3 = r2();
                    if (t3 && t3.has(e3)) return t3.get(e3);
                    var n3 = {}, o3 = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var a4 in e3)if (Object.prototype.hasOwnProperty.call(e3, a4)) {
                        var s3 = o3 ? Object.getOwnPropertyDescriptor(e3, a4) : null;
                        s3 && (s3.get || s3.set) ? Object.defineProperty(n3, a4, s3) : n3[a4] = e3[a4];
                    }
                    n3.default = e3, t3 && t3.set(e3, n3);
                    return n3;
                }(V);
                function r2() {
                    if ("function" != typeof WeakMap) return null;
                    var e3 = /* @__PURE__ */ new WeakMap();
                    return r2 = function() {
                        return e3;
                    }, e3;
                }
                const o2 = ({ indentAtStart: e3  })=>e3 ? Object.assign({
                        indentAtStart: e3
                    }, q.strOptions.fold) : q.strOptions.fold;
                function a3(e3, t3) {
                    const { implicitKey: r3 , indent: a4  } = t3, { jsonEncoding: s3 , minMultiLineLength: i3  } = q.strOptions.doubleQuoted, c2 = JSON.stringify(e3);
                    if (s3) return c2;
                    let u2 = "", l2 = 0;
                    for(let e4 = 0, t4 = c2[e4]; t4; t4 = c2[++e4])if (" " === t4 && "\\" === c2[e4 + 1] && "n" === c2[e4 + 2] && (u2 += c2.slice(l2, e4) + "\\ ", e4 += 1, l2 = e4, t4 = "\\"), "\\" === t4) switch(c2[e4 + 1]){
                        case "u":
                            {
                                u2 += c2.slice(l2, e4);
                                const t5 = c2.substr(e4 + 2, 4);
                                switch(t5){
                                    case "0000":
                                        u2 += "\\0";
                                        break;
                                    case "0007":
                                        u2 += "\\a";
                                        break;
                                    case "000b":
                                        u2 += "\\v";
                                        break;
                                    case "001b":
                                        u2 += "\\e";
                                        break;
                                    case "0085":
                                        u2 += "\\N";
                                        break;
                                    case "00a0":
                                        u2 += "\\_";
                                        break;
                                    case "2028":
                                        u2 += "\\L";
                                        break;
                                    case "2029":
                                        u2 += "\\P";
                                        break;
                                    default:
                                        "00" === t5.substr(0, 2) ? u2 += "\\x" + t5.substr(2) : u2 += c2.substr(e4, 6);
                                }
                                e4 += 5, l2 = e4 + 1;
                            }
                            break;
                        case "n":
                            if (r3 || '"' === c2[e4 + 2] || c2.length < i3) e4 += 1;
                            else {
                                for(u2 += c2.slice(l2, e4) + "\n\n"; "\\" === c2[e4 + 2] && "n" === c2[e4 + 3] && '"' !== c2[e4 + 4];)u2 += "\n", e4 += 2;
                                u2 += a4, " " === c2[e4 + 2] && (u2 += "\\"), e4 += 1, l2 = e4 + 1;
                            }
                            break;
                        default:
                            e4 += 1;
                    }
                    return u2 = l2 ? u2 + c2.slice(l2) : c2, r3 ? u2 : (0, n2.default)(u2, a4, n2.FOLD_QUOTED, o2(t3));
                }
                function s2(e3, t3) {
                    const { indent: r3 , implicitKey: s3  } = t3;
                    if (s3) {
                        if (/\n/.test(e3)) return a3(e3, t3);
                    } else if (/[ \t]\n|\n[ \t]/.test(e3)) return a3(e3, t3);
                    const i3 = "'" + e3.replace(/'/g, "''").replace(/\n+/g, "$&\n".concat(r3)) + "'";
                    return s3 ? i3 : (0, n2.default)(i3, r3, n2.FOLD_FLOW, o2(t3));
                }
                function i2({ comment: e3 , type: t3 , value: r3  }, o3, s3, i3) {
                    if (/\n[\t ]+$/.test(r3) || /^\s*$/.test(r3)) return a3(r3, o3);
                    const c2 = o3.indent || (o3.forceBlockIndent ? " " : ""), u2 = c2 ? "2" : "1", l2 = t3 !== h.Type.BLOCK_FOLDED && (t3 === h.Type.BLOCK_LITERAL || !function(e4, t4) {
                        const n3 = e4.length;
                        if (n3 <= t4) return false;
                        for(let r4 = 0, o4 = 0; r4 < n3; ++r4)if ("\n" === e4[r4]) {
                            if (r4 - o4 > t4) return true;
                            if (o4 = r4 + 1, n3 - o4 <= t4) return false;
                        }
                        return true;
                    }(r3, q.strOptions.fold.lineWidth - c2.length));
                    let f3 = l2 ? "|" : ">";
                    if (!r3) return f3 + "\n";
                    let d2 = "", p2 = "";
                    if (r3 = r3.replace(/[\n\t ]*$/, (e4)=>{
                        const t4 = e4.indexOf("\n");
                        return -1 === t4 ? f3 += "-" : r3 !== e4 && t4 === e4.length - 1 || (f3 += "+", i3 && i3()), p2 = e4.replace(/\n$/, ""), "";
                    }).replace(/^[\n ]*/, (e4)=>{
                        -1 !== e4.indexOf(" ") && (f3 += u2);
                        const t4 = e4.match(/ +$/);
                        return t4 ? (d2 = e4.slice(0, -t4[0].length), t4[0]) : (d2 = e4, "");
                    }), p2 && (p2 = p2.replace(/\n+(?!\n|$)/g, "$&".concat(c2))), d2 && (d2 = d2.replace(/\n+/g, "$&".concat(c2))), e3 && (f3 += " #" + e3.replace(/ ?[\r\n]+/g, " "), s3 && s3()), !r3) return "".concat(f3).concat(u2, "\n").concat(c2).concat(p2);
                    if (l2) return r3 = r3.replace(/\n+/g, "$&".concat(c2)), "".concat(f3, "\n").concat(c2).concat(d2).concat(r3).concat(p2);
                    r3 = r3.replace(/\n+/g, "\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, "$1$2").replace(/\n+/g, "$&".concat(c2));
                    const g2 = (0, n2.default)("".concat(d2).concat(r3).concat(p2), c2, n2.FOLD_BLOCK, q.strOptions.fold);
                    return "".concat(f3, "\n").concat(c2).concat(g2);
                }
            });
            o($);
            $.stringifyNumber, $.stringifyString;
            var J = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.checkFlowCollectionEnd = function(e3, t3) {
                    let n2, r2, o2;
                    switch(t3.type){
                        case h.Type.FLOW_MAP:
                            n2 = "}", r2 = "flow map";
                            break;
                        case h.Type.FLOW_SEQ:
                            n2 = "]", r2 = "flow sequence";
                            break;
                        default:
                            return void e3.push(new y.YAMLSemanticError(t3, "Not a flow collection!?"));
                    }
                    for(let e4 = t3.items.length - 1; e4 >= 0; --e4){
                        const n3 = t3.items[e4];
                        if (!n3 || n3.type !== h.Type.COMMENT) {
                            o2 = n3;
                            break;
                        }
                    }
                    if (o2 && o2.char !== n2) {
                        const a3 = "Expected ".concat(r2, " to end with ").concat(n2);
                        let s2;
                        "number" == typeof o2.offset ? (s2 = new y.YAMLSemanticError(t3, a3), s2.offset = o2.offset + 1) : (s2 = new y.YAMLSemanticError(o2, a3), o2.range && o2.range.end && (s2.offset = o2.range.end - o2.range.start)), e3.push(s2);
                    }
                }, t2.checkKeyLength = function(e3, t3, n2, r2, o2) {
                    if (!r2 || "number" != typeof o2) return;
                    const a3 = t3.items[n2];
                    let s2 = a3 && a3.range && a3.range.start;
                    if (!s2) for(let e4 = n2 - 1; e4 >= 0; --e4){
                        const r3 = t3.items[e4];
                        if (r3 && r3.range) {
                            s2 = r3.range.end + 2 * (n2 - e4);
                            break;
                        }
                    }
                    if (s2 > o2 + 1024) {
                        const n3 = String(r2).substr(0, 8) + "..." + String(r2).substr(-8);
                        e3.push(new y.YAMLSemanticError(t3, 'The "'.concat(n3, '" key is too long')));
                    }
                }, t2.resolveComments = function(e3, t3) {
                    for (const { afterKey: n2 , before: r2 , comment: o2  } of t3){
                        let t4 = e3.items[r2];
                        t4 ? (n2 && t4.value && (t4 = t4.value), void 0 === o2 ? !n2 && t4.commentBefore || (t4.spaceBefore = true) : t4.commentBefore ? t4.commentBefore += "\n" + o2 : t4.commentBefore = o2) : void 0 !== o2 && (e3.comment ? e3.comment += "\n" + o2 : e3.comment = o2);
                    }
                };
            });
            o(J);
            J.checkFlowCollectionEnd, J.checkKeyLength, J.resolveComments;
            var H = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = function(e3, t3) {
                    if (t3.type !== h.Type.MAP && t3.type !== h.Type.FLOW_MAP) {
                        const n3 = "A ".concat(t3.type, " node cannot be resolved as a mapping");
                        return e3.errors.push(new y.YAMLSyntaxError(t3, n3)), null;
                    }
                    const { comments: c3 , items: u3  } = t3.type === h.Type.FLOW_MAP ? function(e4, t4) {
                        const n3 = [], r3 = [];
                        let o3 = void 0, s3 = null, i3 = false, c4 = "{";
                        for(let u4 = 0; u4 < t4.items.length; ++u4){
                            (0, J.checkKeyLength)(e4.errors, t4, u4, o3, s3);
                            const l3 = t4.items[u4];
                            if ("string" == typeof l3.char) {
                                const { char: n4 , offset: f4  } = l3;
                                if ("?" === n4 && void 0 === o3 && !i3) {
                                    i3 = true, c4 = ":";
                                    continue;
                                }
                                if (":" === n4) {
                                    if (void 0 === o3 && (o3 = null), ":" === c4) {
                                        c4 = ",";
                                        continue;
                                    }
                                } else if (i3 && (void 0 === o3 && "," !== n4 && (o3 = null), i3 = false), void 0 !== o3 && (r3.push(new a3.default(o3)), o3 = void 0, s3 = null, "," === n4)) {
                                    c4 = ":";
                                    continue;
                                }
                                if ("}" === n4) {
                                    if (u4 === t4.items.length - 1) continue;
                                } else if (n4 === c4) {
                                    c4 = ":";
                                    continue;
                                }
                                const d3 = "Flow map contains an unexpected ".concat(n4), h2 = new y.YAMLSyntaxError(t4, d3);
                                h2.offset = f4, e4.errors.push(h2);
                            } else l3.type === h.Type.BLANK_LINE ? n3.push({
                                afterKey: !!o3,
                                before: r3.length
                            }) : l3.type === h.Type.COMMENT ? n3.push({
                                afterKey: !!o3,
                                before: r3.length,
                                comment: l3.comment
                            }) : void 0 === o3 ? ("," === c4 && e4.errors.push(new y.YAMLSemanticError(l3, "Separator , missing in flow map")), o3 = e4.resolveNode(l3), s3 = i3 ? null : l3.range.start) : ("," !== c4 && e4.errors.push(new y.YAMLSemanticError(l3, "Indicator : missing in flow map entry")), r3.push(new a3.default(o3, e4.resolveNode(l3))), o3 = void 0, i3 = false);
                        }
                        (0, J.checkFlowCollectionEnd)(e4.errors, t4), void 0 !== o3 && r3.push(new a3.default(o3));
                        return {
                            comments: n3,
                            items: r3
                        };
                    }(e3, t3) : function(e4, t4) {
                        const r3 = [], o3 = [];
                        let s3 = void 0, i3 = null;
                        for(let c4 = 0; c4 < t4.items.length; ++c4){
                            const u4 = t4.items[c4];
                            switch(u4.type){
                                case h.Type.BLANK_LINE:
                                    r3.push({
                                        afterKey: !!s3,
                                        before: o3.length
                                    });
                                    break;
                                case h.Type.COMMENT:
                                    r3.push({
                                        afterKey: !!s3,
                                        before: o3.length,
                                        comment: u4.comment
                                    });
                                    break;
                                case h.Type.MAP_KEY:
                                    void 0 !== s3 && o3.push(new a3.default(s3)), u4.error && e4.errors.push(u4.error), s3 = e4.resolveNode(u4.node), i3 = null;
                                    break;
                                case h.Type.MAP_VALUE:
                                    {
                                        if (void 0 === s3 && (s3 = null), u4.error && e4.errors.push(u4.error), !u4.context.atLineStart && u4.node && u4.node.type === h.Type.MAP && !u4.node.context.atLineStart) {
                                            const t5 = "Nested mappings are not allowed in compact mappings";
                                            e4.errors.push(new y.YAMLSemanticError(u4.node, t5));
                                        }
                                        let r4 = u4.node;
                                        if (!r4 && u4.props.length > 0) {
                                            r4 = new n2.default(h.Type.PLAIN, []), r4.context = {
                                                parent: u4,
                                                src: u4.context.src
                                            };
                                            const e5 = u4.range.start + 1;
                                            if (r4.range = {
                                                start: e5,
                                                end: e5
                                            }, r4.valueRange = {
                                                start: e5,
                                                end: e5
                                            }, "number" == typeof u4.range.origStart) {
                                                const e6 = u4.range.origStart + 1;
                                                r4.range.origStart = r4.range.origEnd = e6, r4.valueRange.origStart = r4.valueRange.origEnd = e6;
                                            }
                                        }
                                        const f4 = new a3.default(s3, e4.resolveNode(r4));
                                        l2(u4, f4), o3.push(f4), (0, J.checkKeyLength)(e4.errors, t4, c4, s3, i3), s3 = void 0, i3 = null;
                                    }
                                    break;
                                default:
                                    void 0 !== s3 && o3.push(new a3.default(s3)), s3 = e4.resolveNode(u4), i3 = u4.range.start, u4.error && e4.errors.push(u4.error);
                                    e: for(let n3 = c4 + 1;; ++n3){
                                        const r4 = t4.items[n3];
                                        switch(r4 && r4.type){
                                            case h.Type.BLANK_LINE:
                                            case h.Type.COMMENT:
                                                continue e;
                                            case h.Type.MAP_VALUE:
                                                break e;
                                            default:
                                                e4.errors.push(new y.YAMLSemanticError(u4, "Implicit map keys need to be followed by map values"));
                                                break e;
                                        }
                                    }
                                    if (u4.valueRangeContainsNewline) {
                                        const t5 = "Implicit map keys need to be on a single line";
                                        e4.errors.push(new y.YAMLSemanticError(u4, t5));
                                    }
                            }
                        }
                        void 0 !== s3 && o3.push(new a3.default(s3));
                        return {
                            comments: r3,
                            items: o3
                        };
                    }(e3, t3), f3 = new r2.default();
                    f3.items = u3, (0, J.resolveComments)(f3, c3);
                    let d2 = false;
                    for(let n3 = 0; n3 < u3.length; ++n3){
                        const { key: r3  } = u3[n3];
                        if (r3 instanceof i2.default && (d2 = true), e3.schema.merge && r3 && r3.value === o2.MERGE_KEY) {
                            u3[n3] = new o2.default(u3[n3]);
                            const r4 = u3[n3].value.items;
                            let a4 = null;
                            r4.some((e4)=>{
                                if (e4 instanceof s2.default) {
                                    const { type: t4  } = e4.source;
                                    return t4 !== h.Type.MAP && t4 !== h.Type.FLOW_MAP && (a4 = "Merge nodes aliases can only point to maps");
                                }
                                return a4 = "Merge nodes can only have Alias nodes as values";
                            }), a4 && e3.errors.push(new y.YAMLSemanticError(t3, a4));
                        } else for(let o3 = n3 + 1; o3 < u3.length; ++o3){
                            const { key: n4  } = u3[o3];
                            if (r3 === n4 || r3 && n4 && Object.prototype.hasOwnProperty.call(r3, "value") && r3.value === n4.value) {
                                const n5 = 'Map keys must be unique; "'.concat(r3, '" is repeated');
                                e3.errors.push(new y.YAMLSemanticError(t3, n5));
                                break;
                            }
                        }
                    }
                    if (d2 && !e3.options.mapAsMap) {
                        const n3 = "Keys with collection values will be stringified as YAML due to JS Object restrictions. Use mapAsMap: true to avoid this.";
                        e3.warnings.push(new y.YAMLWarning(t3, n3));
                    }
                    return t3.resolved = f3, f3;
                };
                var n2 = u2(L), r2 = u2(Y), o2 = function(e3) {
                    if (e3 && e3.__esModule) return e3;
                    if (null === e3 || "object" != typeof e3 && "function" != typeof e3) return {
                        default: e3
                    };
                    var t3 = c2();
                    if (t3 && t3.has(e3)) return t3.get(e3);
                    var n3 = {}, r3 = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o3 in e3)if (Object.prototype.hasOwnProperty.call(e3, o3)) {
                        var a4 = r3 ? Object.getOwnPropertyDescriptor(e3, o3) : null;
                        a4 && (a4.get || a4.set) ? Object.defineProperty(n3, o3, a4) : n3[o3] = e3[o3];
                    }
                    n3.default = e3, t3 && t3.set(e3, n3);
                    return n3;
                }(U), a3 = u2(j), s2 = u2(D), i2 = u2(B);
                function c2() {
                    if ("function" != typeof WeakMap) return null;
                    var e3 = /* @__PURE__ */ new WeakMap();
                    return c2 = function() {
                        return e3;
                    }, e3;
                }
                function u2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                function l2(e3, t3) {
                    if (!(({ context: { lineStart: e4 , node: t4 , src: n4  } , props: r4  })=>{
                        if (0 === r4.length) return false;
                        const { start: o4  } = r4[0];
                        if (t4 && o4 > t4.valueRange.start) return false;
                        if (n4[o4] !== h.Char.COMMENT) return false;
                        for(let t5 = e4; t5 < o4; ++t5)if ("\n" === n4[t5]) return false;
                        return true;
                    })(e3)) return;
                    const n3 = e3.getPropValue(0, h.Char.COMMENT, true);
                    let r3 = false;
                    const o3 = t3.value.commentBefore;
                    if (o3 && o3.startsWith(n3)) t3.value.commentBefore = o3.substr(n3.length + 1), r3 = true;
                    else {
                        const o4 = t3.value.comment;
                        !e3.node && o4 && o4.startsWith(n3) && (t3.value.comment = o4.substr(n3.length + 1), r3 = true);
                    }
                    r3 && (t3.comment = n3);
                }
            });
            o(H);
            var G = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = o2(Y), r2 = o2(H);
                function o2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                var a3 = {
                    createNode: function(e3, t3, r3) {
                        const o3 = new n2.default(e3);
                        if (t3 instanceof Map) for (const [n3, a4] of t3)o3.items.push(e3.createPair(n3, a4, r3));
                        else if (t3 && "object" == typeof t3) for (const n3 of Object.keys(t3))o3.items.push(e3.createPair(n3, t3[n3], r3));
                        return "function" == typeof e3.sortMapEntries && o3.items.sort(e3.sortMapEntries), o3;
                    },
                    default: true,
                    nodeClass: n2.default,
                    tag: "tag:yaml.org,2002:map",
                    resolve: r2.default
                };
                t2.default = a3;
            });
            o(G);
            var z = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = function(e3, t3) {
                    if (t3.type !== h.Type.SEQ && t3.type !== h.Type.FLOW_SEQ) {
                        const n3 = "A ".concat(t3.type, " node cannot be resolved as a sequence");
                        return e3.errors.push(new y.YAMLSyntaxError(t3, n3)), null;
                    }
                    const { comments: a4 , items: s2  } = t3.type === h.Type.FLOW_SEQ ? function(e4, t4) {
                        const r3 = [], o3 = [];
                        let a5 = false, s3 = void 0, i3 = null, c2 = "[";
                        for(let u2 = 0; u2 < t4.items.length; ++u2){
                            const l2 = t4.items[u2];
                            if ("string" == typeof l2.char) {
                                const { char: r4 , offset: f3  } = l2;
                                if (":" === r4 || !a5 && void 0 === s3 || (a5 && void 0 === s3 && (s3 = c2 ? o3.pop() : null), o3.push(new n2.default(s3)), a5 = false, s3 = void 0, i3 = null), r4 === c2) c2 = null;
                                else if (c2 || "?" !== r4) {
                                    if ("[" !== c2 && ":" === r4 && void 0 === s3) {
                                        if ("," === c2) {
                                            if (s3 = o3.pop(), s3 instanceof n2.default) {
                                                const n3 = "Chaining flow sequence pairs is invalid", r5 = new y.YAMLSemanticError(t4, n3);
                                                r5.offset = f3, e4.errors.push(r5);
                                            }
                                            a5 || (0, J.checkKeyLength)(e4.errors, t4, u2, s3, i3);
                                        } else s3 = null;
                                        i3 = null, a5 = false, c2 = null;
                                    } else if ("[" === c2 || "]" !== r4 || u2 < t4.items.length - 1) {
                                        const n3 = "Flow sequence contains an unexpected ".concat(r4), o4 = new y.YAMLSyntaxError(t4, n3);
                                        o4.offset = f3, e4.errors.push(o4);
                                    }
                                } else a5 = true;
                            } else if (l2.type === h.Type.BLANK_LINE) r3.push({
                                before: o3.length
                            });
                            else if (l2.type === h.Type.COMMENT) r3.push({
                                comment: l2.comment,
                                before: o3.length
                            });
                            else {
                                if (c2) {
                                    const t6 = "Expected a ".concat(c2, " in flow sequence");
                                    e4.errors.push(new y.YAMLSemanticError(l2, t6));
                                }
                                const t5 = e4.resolveNode(l2);
                                void 0 === s3 ? o3.push(t5) : (o3.push(new n2.default(s3, t5)), s3 = void 0), i3 = l2.range.start, c2 = ",";
                            }
                        }
                        (0, J.checkFlowCollectionEnd)(e4.errors, t4), void 0 !== s3 && o3.push(new n2.default(s3));
                        return {
                            comments: r3,
                            items: o3
                        };
                    }(e3, t3) : function(e4, t4) {
                        const n3 = [], r3 = [];
                        for(let o3 = 0; o3 < t4.items.length; ++o3){
                            const a5 = t4.items[o3];
                            switch(a5.type){
                                case h.Type.BLANK_LINE:
                                    n3.push({
                                        before: r3.length
                                    });
                                    break;
                                case h.Type.COMMENT:
                                    n3.push({
                                        comment: a5.comment,
                                        before: r3.length
                                    });
                                    break;
                                case h.Type.SEQ_ITEM:
                                    if (a5.error && e4.errors.push(a5.error), r3.push(e4.resolveNode(a5.node)), a5.hasProps) {
                                        const t5 = "Sequence items cannot have tags or anchors before the - indicator";
                                        e4.errors.push(new y.YAMLSemanticError(a5, t5));
                                    }
                                    break;
                                default:
                                    a5.error && e4.errors.push(a5.error), e4.errors.push(new y.YAMLSyntaxError(a5, "Unexpected ".concat(a5.type, " node in sequence")));
                            }
                        }
                        return {
                            comments: n3,
                            items: r3
                        };
                    }(e3, t3), i2 = new r2.default();
                    if (i2.items = s2, (0, J.resolveComments)(i2, a4), !e3.options.mapAsMap && s2.some((e4)=>e4 instanceof n2.default && e4.key instanceof o2.default)) {
                        const n3 = "Keys with collection values will be stringified as YAML due to JS Object restrictions. Use mapAsMap: true to avoid this.";
                        e3.warnings.push(new y.YAMLWarning(t3, n3));
                    }
                    return t3.resolved = i2, i2;
                };
                var n2 = a3(j), r2 = a3(F), o2 = a3(B);
                function a3(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
            });
            o(z);
            var Z = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = o2(z), r2 = o2(F);
                function o2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                var a3 = {
                    createNode: function(e3, t3, n3) {
                        const o3 = new r2.default(e3);
                        if (t3 && t3[Symbol.iterator]) for (const r3 of t3){
                            const t4 = e3.createNode(r3, n3.wrapScalars, null, n3);
                            o3.items.push(t4);
                        }
                        return o3;
                    },
                    default: true,
                    nodeClass: r2.default,
                    tag: "tag:yaml.org,2002:seq",
                    resolve: n2.default
                };
                t2.default = a3;
            });
            o(Z);
            var X = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = t2.resolveString = void 0;
                const n2 = (e3, t3)=>{
                    const n3 = t3.strValue;
                    return n3 ? "string" == typeof n3 ? n3 : (n3.errors.forEach((n4)=>{
                        n4.source || (n4.source = t3), e3.errors.push(n4);
                    }), n3.str) : "";
                };
                t2.resolveString = n2;
                var r2 = {
                    identify: (e3)=>"string" == typeof e3,
                    default: true,
                    tag: "tag:yaml.org,2002:str",
                    resolve: n2,
                    stringify: (e3, t3, n3, r3)=>(t3 = Object.assign({
                            actualString: true
                        }, t3), (0, $.stringifyString)(e3, t3, n3, r3)),
                    options: q.strOptions
                };
                t2.default = r2;
            });
            o(X);
            X.resolveString;
            var ee = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = a3(G), r2 = a3(Z), o2 = a3(X);
                function a3(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                var s2 = [
                    n2.default,
                    r2.default,
                    o2.default
                ];
                t2.default = s2;
            });
            o(ee);
            var te = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = t2.floatObj = t2.expObj = t2.nanObj = t2.hexObj = t2.intObj = t2.octObj = t2.boolObj = t2.nullObj = void 0;
                var n2 = o2(R), r2 = o2(ee);
                function o2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                const a3 = {
                    identify: (e3)=>null == e3,
                    createNode: (e3, t3, r3)=>r3.wrapScalars ? new n2.default(null) : null,
                    default: true,
                    tag: "tag:yaml.org,2002:null",
                    test: /^(?:~|[Nn]ull|NULL)?$/,
                    resolve: ()=>null,
                    options: q.nullOptions,
                    stringify: ()=>q.nullOptions.nullStr
                };
                t2.nullObj = a3;
                const s2 = {
                    identify: (e3)=>"boolean" == typeof e3,
                    default: true,
                    tag: "tag:yaml.org,2002:bool",
                    test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,
                    resolve: (e3)=>"t" === e3[0] || "T" === e3[0],
                    options: q.boolOptions,
                    stringify: ({ value: e3  })=>e3 ? q.boolOptions.trueStr : q.boolOptions.falseStr
                };
                t2.boolObj = s2;
                const i2 = {
                    identify: (e3)=>"number" == typeof e3,
                    default: true,
                    tag: "tag:yaml.org,2002:int",
                    format: "OCT",
                    test: /^0o([0-7]+)$/,
                    resolve: (e3, t3)=>parseInt(t3, 8),
                    stringify: ({ value: e3  })=>"0o" + e3.toString(8)
                };
                t2.octObj = i2;
                const c2 = {
                    identify: (e3)=>"number" == typeof e3,
                    default: true,
                    tag: "tag:yaml.org,2002:int",
                    test: /^[-+]?[0-9]+$/,
                    resolve: (e3)=>parseInt(e3, 10),
                    stringify: $.stringifyNumber
                };
                t2.intObj = c2;
                const u2 = {
                    identify: (e3)=>"number" == typeof e3,
                    default: true,
                    tag: "tag:yaml.org,2002:int",
                    format: "HEX",
                    test: /^0x([0-9a-fA-F]+)$/,
                    resolve: (e3, t3)=>parseInt(t3, 16),
                    stringify: ({ value: e3  })=>"0x" + e3.toString(16)
                };
                t2.hexObj = u2;
                const l2 = {
                    identify: (e3)=>"number" == typeof e3,
                    default: true,
                    tag: "tag:yaml.org,2002:float",
                    test: /^(?:[-+]?\.inf|(\.nan))$/i,
                    resolve: (e3, t3)=>t3 ? NaN : "-" === e3[0] ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
                    stringify: $.stringifyNumber
                };
                t2.nanObj = l2;
                const f3 = {
                    identify: (e3)=>"number" == typeof e3,
                    default: true,
                    tag: "tag:yaml.org,2002:float",
                    format: "EXP",
                    test: /^[-+]?(?:0|[1-9][0-9]*)(\.[0-9]*)?[eE][-+]?[0-9]+$/,
                    resolve: (e3)=>parseFloat(e3),
                    stringify: ({ value: e3  })=>Number(e3).toExponential()
                };
                t2.expObj = f3;
                const d2 = {
                    identify: (e3)=>"number" == typeof e3,
                    default: true,
                    tag: "tag:yaml.org,2002:float",
                    test: /^[-+]?(?:0|[1-9][0-9]*)\.([0-9]*)$/,
                    resolve (e3, t3) {
                        const r3 = new n2.default(parseFloat(e3));
                        return t3 && "0" === t3[t3.length - 1] && (r3.minFractionDigits = t3.length), r3;
                    },
                    stringify: $.stringifyNumber
                };
                t2.floatObj = d2;
                var h2 = r2.default.concat([
                    a3,
                    s2,
                    i2,
                    c2,
                    u2,
                    l2,
                    f3,
                    d2
                ]);
                t2.default = h2;
            });
            o(te);
            te.floatObj, te.expObj, te.nanObj, te.hexObj, te.intObj, te.octObj, te.boolObj, te.nullObj;
            var ne = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = a3(G), r2 = a3(Z), o2 = a3(R);
                function a3(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                const s2 = [
                    n2.default,
                    r2.default,
                    {
                        identify: (e3)=>"string" == typeof e3,
                        default: true,
                        tag: "tag:yaml.org,2002:str",
                        resolve: X.resolveString,
                        stringify: (e3)=>JSON.stringify(e3)
                    },
                    {
                        identify: (e3)=>null == e3,
                        createNode: (e3, t3, n3)=>n3.wrapScalars ? new o2.default(null) : null,
                        default: true,
                        tag: "tag:yaml.org,2002:null",
                        test: /^null$/,
                        resolve: ()=>null,
                        stringify: (e3)=>JSON.stringify(e3)
                    },
                    {
                        identify: (e3)=>"boolean" == typeof e3,
                        default: true,
                        tag: "tag:yaml.org,2002:bool",
                        test: /^true|false$/,
                        resolve: (e3)=>"true" === e3,
                        stringify: (e3)=>JSON.stringify(e3)
                    },
                    {
                        identify: (e3)=>"number" == typeof e3,
                        default: true,
                        tag: "tag:yaml.org,2002:int",
                        test: /^-?(?:0|[1-9][0-9]*)$/,
                        resolve: (e3)=>parseInt(e3, 10),
                        stringify: (e3)=>JSON.stringify(e3)
                    },
                    {
                        identify: (e3)=>"number" == typeof e3,
                        default: true,
                        tag: "tag:yaml.org,2002:float",
                        test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
                        resolve: (e3)=>parseFloat(e3),
                        stringify: (e3)=>JSON.stringify(e3)
                    }
                ];
                s2.scalarFallback = (e3)=>{
                    throw new SyntaxError("Unresolved plain scalar ".concat(JSON.stringify(e3)));
                };
                var i2 = s2;
                t2.default = i2;
            });
            o(ne);
            var re = "undefined" != typeof __webpack_require__.g ? __webpack_require__.g : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, oe = [], ae = [], se = "undefined" != typeof Uint8Array ? Uint8Array : Array, ie = false;
            function ce() {
                ie = true;
                for(var e2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", t2 = 0, n2 = e2.length; t2 < n2; ++t2)oe[t2] = e2[t2], ae[e2.charCodeAt(t2)] = t2;
                ae["-".charCodeAt(0)] = 62, ae["_".charCodeAt(0)] = 63;
            }
            function ue(e2, t2, n2) {
                for(var r2, o2, a3 = [], s2 = t2; s2 < n2; s2 += 3)r2 = (e2[s2] << 16) + (e2[s2 + 1] << 8) + e2[s2 + 2], a3.push(oe[(o2 = r2) >> 18 & 63] + oe[o2 >> 12 & 63] + oe[o2 >> 6 & 63] + oe[63 & o2]);
                return a3.join("");
            }
            function le(e2) {
                var t2;
                ie || ce();
                for(var n2 = e2.length, r2 = n2 % 3, o2 = "", a3 = [], s2 = 0, i2 = n2 - r2; s2 < i2; s2 += 16383)a3.push(ue(e2, s2, s2 + 16383 > i2 ? i2 : s2 + 16383));
                return 1 === r2 ? (t2 = e2[n2 - 1], o2 += oe[t2 >> 2], o2 += oe[t2 << 4 & 63], o2 += "==") : 2 === r2 && (t2 = (e2[n2 - 2] << 8) + e2[n2 - 1], o2 += oe[t2 >> 10], o2 += oe[t2 >> 4 & 63], o2 += oe[t2 << 2 & 63], o2 += "="), a3.push(o2), a3.join("");
            }
            function fe(e2, t2, n2, r2, o2) {
                var a3, s2, i2 = 8 * o2 - r2 - 1, c2 = (1 << i2) - 1, u2 = c2 >> 1, l2 = -7, f3 = n2 ? o2 - 1 : 0, d2 = n2 ? -1 : 1, h2 = e2[t2 + f3];
                for(f3 += d2, a3 = h2 & (1 << -l2) - 1, h2 >>= -l2, l2 += i2; l2 > 0; a3 = 256 * a3 + e2[t2 + f3], f3 += d2, l2 -= 8);
                for(s2 = a3 & (1 << -l2) - 1, a3 >>= -l2, l2 += r2; l2 > 0; s2 = 256 * s2 + e2[t2 + f3], f3 += d2, l2 -= 8);
                if (0 === a3) a3 = 1 - u2;
                else {
                    if (a3 === c2) return s2 ? NaN : 1 / 0 * (h2 ? -1 : 1);
                    s2 += Math.pow(2, r2), a3 -= u2;
                }
                return (h2 ? -1 : 1) * s2 * Math.pow(2, a3 - r2);
            }
            function de(e2, t2, n2, r2, o2, a3) {
                var s2, i2, c2, u2 = 8 * a3 - o2 - 1, l2 = (1 << u2) - 1, f3 = l2 >> 1, d2 = 23 === o2 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, h2 = r2 ? 0 : a3 - 1, p2 = r2 ? 1 : -1, g2 = t2 < 0 || 0 === t2 && 1 / t2 < 0 ? 1 : 0;
                for(t2 = Math.abs(t2), isNaN(t2) || t2 === 1 / 0 ? (i2 = isNaN(t2) ? 1 : 0, s2 = l2) : (s2 = Math.floor(Math.log(t2) / Math.LN2), t2 * (c2 = Math.pow(2, -s2)) < 1 && (s2--, c2 *= 2), (t2 += s2 + f3 >= 1 ? d2 / c2 : d2 * Math.pow(2, 1 - f3)) * c2 >= 2 && (s2++, c2 /= 2), s2 + f3 >= l2 ? (i2 = 0, s2 = l2) : s2 + f3 >= 1 ? (i2 = (t2 * c2 - 1) * Math.pow(2, o2), s2 += f3) : (i2 = t2 * Math.pow(2, f3 - 1) * Math.pow(2, o2), s2 = 0)); o2 >= 8; e2[n2 + h2] = 255 & i2, h2 += p2, i2 /= 256, o2 -= 8);
                for(s2 = s2 << o2 | i2, u2 += o2; u2 > 0; e2[n2 + h2] = 255 & s2, h2 += p2, s2 /= 256, u2 -= 8);
                e2[n2 + h2 - p2] |= 128 * g2;
            }
            var he = {}.toString, pe = Array.isArray || function(e2) {
                return "[object Array]" == he.call(e2);
            };
            function ge() {
                return ye.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
            }
            function me(e2, t2) {
                if (ge() < t2) throw new RangeError("Invalid typed array length");
                return ye.TYPED_ARRAY_SUPPORT ? (e2 = new Uint8Array(t2)).__proto__ = ye.prototype : (null === e2 && (e2 = new ye(t2)), e2.length = t2), e2;
            }
            function ye(e2, t2, n2) {
                if (!(ye.TYPED_ARRAY_SUPPORT || this instanceof ye)) return new ye(e2, t2, n2);
                if ("number" == typeof e2) {
                    if ("string" == typeof t2) throw new Error("If encoding is specified then the first argument must be a string");
                    return be(this, e2);
                }
                return ve(this, e2, t2, n2);
            }
            function ve(e2, t2, n2, r2) {
                if ("number" == typeof t2) throw new TypeError('"value" argument must not be a number');
                return "undefined" != typeof ArrayBuffer && t2 instanceof ArrayBuffer ? function(e3, t3, n3, r3) {
                    if (t3.byteLength, n3 < 0 || t3.byteLength < n3) throw new RangeError("'offset' is out of bounds");
                    if (t3.byteLength < n3 + (r3 || 0)) throw new RangeError("'length' is out of bounds");
                    t3 = void 0 === n3 && void 0 === r3 ? new Uint8Array(t3) : void 0 === r3 ? new Uint8Array(t3, n3) : new Uint8Array(t3, n3, r3);
                    ye.TYPED_ARRAY_SUPPORT ? (e3 = t3).__proto__ = ye.prototype : e3 = we(e3, t3);
                    return e3;
                }(e2, t2, n2, r2) : "string" == typeof t2 ? function(e3, t3, n3) {
                    "string" == typeof n3 && "" !== n3 || (n3 = "utf8");
                    if (!ye.isEncoding(n3)) throw new TypeError('"encoding" must be a valid string encoding');
                    var r3 = 0 | Me(t3, n3), o2 = (e3 = me(e3, r3)).write(t3, n3);
                    o2 !== r3 && (e3 = e3.slice(0, o2));
                    return e3;
                }(e2, t2, n2) : function(e3, t3) {
                    if (Oe(t3)) {
                        var n3 = 0 | Ee(t3.length);
                        return 0 === (e3 = me(e3, n3)).length ? e3 : (t3.copy(e3, 0, 0, n3), e3);
                    }
                    if (t3) {
                        if ("undefined" != typeof ArrayBuffer && t3.buffer instanceof ArrayBuffer || "length" in t3) return "number" != typeof t3.length || (r3 = t3.length) != r3 ? me(e3, 0) : we(e3, t3);
                        if ("Buffer" === t3.type && pe(t3.data)) return we(e3, t3.data);
                    }
                    var r3;
                    throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
                }(e2, t2);
            }
            function _e(e2) {
                if ("number" != typeof e2) throw new TypeError('"size" argument must be a number');
                if (e2 < 0) throw new RangeError('"size" argument must not be negative');
            }
            function be(e2, t2) {
                if (_e(t2), e2 = me(e2, t2 < 0 ? 0 : 0 | Ee(t2)), !ye.TYPED_ARRAY_SUPPORT) for(var n2 = 0; n2 < t2; ++n2)e2[n2] = 0;
                return e2;
            }
            function we(e2, t2) {
                var n2 = t2.length < 0 ? 0 : 0 | Ee(t2.length);
                e2 = me(e2, n2);
                for(var r2 = 0; r2 < n2; r2 += 1)e2[r2] = 255 & t2[r2];
                return e2;
            }
            function Ee(e2) {
                if (e2 >= ge()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + ge().toString(16) + " bytes");
                return 0 | e2;
            }
            function Oe(e2) {
                return !(null == e2 || !e2._isBuffer);
            }
            function Me(e2, t2) {
                if (Oe(e2)) return e2.length;
                if ("undefined" != typeof ArrayBuffer && "function" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(e2) || e2 instanceof ArrayBuffer)) return e2.byteLength;
                "string" != typeof e2 && (e2 = "" + e2);
                var n2 = e2.length;
                if (0 === n2) return 0;
                for(var r2 = false;;)switch(t2){
                    case "ascii":
                    case "latin1":
                    case "binary":
                        return n2;
                    case "utf8":
                    case "utf-8":
                    case void 0:
                        return Ge(e2).length;
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                        return 2 * n2;
                    case "hex":
                        return n2 >>> 1;
                    case "base64":
                        return ze(e2).length;
                    default:
                        if (r2) return Ge(e2).length;
                        t2 = ("" + t2).toLowerCase(), r2 = true;
                }
            }
            function Se(e2, t2, n2) {
                var r2 = false;
                if ((void 0 === t2 || t2 < 0) && (t2 = 0), t2 > this.length) return "";
                if ((void 0 === n2 || n2 > this.length) && (n2 = this.length), n2 <= 0) return "";
                if ((n2 >>>= 0) <= (t2 >>>= 0)) return "";
                for(e2 || (e2 = "utf8");;)switch(e2){
                    case "hex":
                        return Ye(this, t2, n2);
                    case "utf8":
                    case "utf-8":
                        return je(this, t2, n2);
                    case "ascii":
                        return Be(this, t2, n2);
                    case "latin1":
                    case "binary":
                        return De(this, t2, n2);
                    case "base64":
                        return Re(this, t2, n2);
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                        return Fe(this, t2, n2);
                    default:
                        if (r2) throw new TypeError("Unknown encoding: " + e2);
                        e2 = (e2 + "").toLowerCase(), r2 = true;
                }
            }
            function Ae(e2, t2, n2) {
                var r2 = e2[t2];
                e2[t2] = e2[n2], e2[n2] = r2;
            }
            function Le(e2, t2, n2, r2, o2) {
                if (0 === e2.length) return -1;
                if ("string" == typeof n2 ? (r2 = n2, n2 = 0) : n2 > 2147483647 ? n2 = 2147483647 : n2 < -2147483648 && (n2 = -2147483648), n2 = +n2, isNaN(n2) && (n2 = o2 ? 0 : e2.length - 1), n2 < 0 && (n2 = e2.length + n2), n2 >= e2.length) {
                    if (o2) return -1;
                    n2 = e2.length - 1;
                } else if (n2 < 0) {
                    if (!o2) return -1;
                    n2 = 0;
                }
                if ("string" == typeof t2 && (t2 = ye.from(t2, r2)), Oe(t2)) return 0 === t2.length ? -1 : Te(e2, t2, n2, r2, o2);
                if ("number" == typeof t2) return t2 &= 255, ye.TYPED_ARRAY_SUPPORT && "function" == typeof Uint8Array.prototype.indexOf ? o2 ? Uint8Array.prototype.indexOf.call(e2, t2, n2) : Uint8Array.prototype.lastIndexOf.call(e2, t2, n2) : Te(e2, [
                    t2
                ], n2, r2, o2);
                throw new TypeError("val must be string, number or Buffer");
            }
            function Te(e2, t2, n2, r2, o2) {
                var a3, s2 = 1, i2 = e2.length, c2 = t2.length;
                if (void 0 !== r2 && ("ucs2" === (r2 = String(r2).toLowerCase()) || "ucs-2" === r2 || "utf16le" === r2 || "utf-16le" === r2)) {
                    if (e2.length < 2 || t2.length < 2) return -1;
                    s2 = 2, i2 /= 2, c2 /= 2, n2 /= 2;
                }
                function u2(e3, t3) {
                    return 1 === s2 ? e3[t3] : e3.readUInt16BE(t3 * s2);
                }
                if (o2) {
                    var l2 = -1;
                    for(a3 = n2; a3 < i2; a3++)if (u2(e2, a3) === u2(t2, -1 === l2 ? 0 : a3 - l2)) {
                        if (-1 === l2 && (l2 = a3), a3 - l2 + 1 === c2) return l2 * s2;
                    } else -1 !== l2 && (a3 -= a3 - l2), l2 = -1;
                } else for(n2 + c2 > i2 && (n2 = i2 - c2), a3 = n2; a3 >= 0; a3--){
                    for(var f3 = true, d2 = 0; d2 < c2; d2++)if (u2(e2, a3 + d2) !== u2(t2, d2)) {
                        f3 = false;
                        break;
                    }
                    if (f3) return a3;
                }
                return -1;
            }
            function Pe(e2, t2, n2, r2) {
                n2 = Number(n2) || 0;
                var o2 = e2.length - n2;
                r2 ? (r2 = Number(r2)) > o2 && (r2 = o2) : r2 = o2;
                var a3 = t2.length;
                if (a3 % 2 != 0) throw new TypeError("Invalid hex string");
                r2 > a3 / 2 && (r2 = a3 / 2);
                for(var s2 = 0; s2 < r2; ++s2){
                    var i2 = parseInt(t2.substr(2 * s2, 2), 16);
                    if (isNaN(i2)) return s2;
                    e2[n2 + s2] = i2;
                }
                return s2;
            }
            function Ce(e2, t2, n2, r2) {
                return Ze(Ge(t2, e2.length - n2), e2, n2, r2);
            }
            function Ne(e2, t2, n2, r2) {
                return Ze(function(e3) {
                    for(var t3 = [], n3 = 0; n3 < e3.length; ++n3)t3.push(255 & e3.charCodeAt(n3));
                    return t3;
                }(t2), e2, n2, r2);
            }
            function xe(e2, t2, n2, r2) {
                return Ne(e2, t2, n2, r2);
            }
            function ke(e2, t2, n2, r2) {
                return Ze(ze(t2), e2, n2, r2);
            }
            function Ie(e2, t2, n2, r2) {
                return Ze(function(e3, t3) {
                    for(var n3, r3, o2, a3 = [], s2 = 0; s2 < e3.length && !((t3 -= 2) < 0); ++s2)n3 = e3.charCodeAt(s2), r3 = n3 >> 8, o2 = n3 % 256, a3.push(o2), a3.push(r3);
                    return a3;
                }(t2, e2.length - n2), e2, n2, r2);
            }
            function Re(e2, t2, n2) {
                return 0 === t2 && n2 === e2.length ? le(e2) : le(e2.slice(t2, n2));
            }
            function je(e2, t2, n2) {
                n2 = Math.min(e2.length, n2);
                for(var r2 = [], o2 = t2; o2 < n2;){
                    var a3, s2, i2, c2, u2 = e2[o2], l2 = null, f3 = u2 > 239 ? 4 : u2 > 223 ? 3 : u2 > 191 ? 2 : 1;
                    if (o2 + f3 <= n2) switch(f3){
                        case 1:
                            u2 < 128 && (l2 = u2);
                            break;
                        case 2:
                            128 == (192 & (a3 = e2[o2 + 1])) && (c2 = (31 & u2) << 6 | 63 & a3) > 127 && (l2 = c2);
                            break;
                        case 3:
                            a3 = e2[o2 + 1], s2 = e2[o2 + 2], 128 == (192 & a3) && 128 == (192 & s2) && (c2 = (15 & u2) << 12 | (63 & a3) << 6 | 63 & s2) > 2047 && (c2 < 55296 || c2 > 57343) && (l2 = c2);
                            break;
                        case 4:
                            a3 = e2[o2 + 1], s2 = e2[o2 + 2], i2 = e2[o2 + 3], 128 == (192 & a3) && 128 == (192 & s2) && 128 == (192 & i2) && (c2 = (15 & u2) << 18 | (63 & a3) << 12 | (63 & s2) << 6 | 63 & i2) > 65535 && c2 < 1114112 && (l2 = c2);
                    }
                    null === l2 ? (l2 = 65533, f3 = 1) : l2 > 65535 && (l2 -= 65536, r2.push(l2 >>> 10 & 1023 | 55296), l2 = 56320 | 1023 & l2), r2.push(l2), o2 += f3;
                }
                return function(e3) {
                    var t3 = e3.length;
                    if (t3 <= 4096) return String.fromCharCode.apply(String, e3);
                    var n3 = "", r3 = 0;
                    for(; r3 < t3;)n3 += String.fromCharCode.apply(String, e3.slice(r3, r3 += 4096));
                    return n3;
                }(r2);
            }
            ye.TYPED_ARRAY_SUPPORT = void 0 === re.TYPED_ARRAY_SUPPORT || re.TYPED_ARRAY_SUPPORT, ye.poolSize = 8192, ye._augment = function(e2) {
                return e2.__proto__ = ye.prototype, e2;
            }, ye.from = function(e2, t2, n2) {
                return ve(null, e2, t2, n2);
            }, ye.TYPED_ARRAY_SUPPORT && (ye.prototype.__proto__ = Uint8Array.prototype, ye.__proto__ = Uint8Array), ye.alloc = function(e2, t2, n2) {
                return function(e3, t3, n3, r2) {
                    return _e(t3), t3 <= 0 ? me(e3, t3) : void 0 !== n3 ? "string" == typeof r2 ? me(e3, t3).fill(n3, r2) : me(e3, t3).fill(n3) : me(e3, t3);
                }(null, e2, t2, n2);
            }, ye.allocUnsafe = function(e2) {
                return be(null, e2);
            }, ye.allocUnsafeSlow = function(e2) {
                return be(null, e2);
            }, ye.isBuffer = function(e2) {
                return null != e2 && (!!e2._isBuffer || Xe(e2) || function(e3) {
                    return "function" == typeof e3.readFloatLE && "function" == typeof e3.slice && Xe(e3.slice(0, 0));
                }(e2));
            }, ye.compare = function(e2, t2) {
                if (!Oe(e2) || !Oe(t2)) throw new TypeError("Arguments must be Buffers");
                if (e2 === t2) return 0;
                for(var n2 = e2.length, r2 = t2.length, o2 = 0, a3 = Math.min(n2, r2); o2 < a3; ++o2)if (e2[o2] !== t2[o2]) {
                    n2 = e2[o2], r2 = t2[o2];
                    break;
                }
                return n2 < r2 ? -1 : r2 < n2 ? 1 : 0;
            }, ye.isEncoding = function(e2) {
                switch(String(e2).toLowerCase()){
                    case "hex":
                    case "utf8":
                    case "utf-8":
                    case "ascii":
                    case "latin1":
                    case "binary":
                    case "base64":
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                        return true;
                    default:
                        return false;
                }
            }, ye.concat = function(e2, t2) {
                if (!pe(e2)) throw new TypeError('"list" argument must be an Array of Buffers');
                if (0 === e2.length) return ye.alloc(0);
                var n2;
                if (void 0 === t2) for(t2 = 0, n2 = 0; n2 < e2.length; ++n2)t2 += e2[n2].length;
                var r2 = ye.allocUnsafe(t2), o2 = 0;
                for(n2 = 0; n2 < e2.length; ++n2){
                    var a3 = e2[n2];
                    if (!Oe(a3)) throw new TypeError('"list" argument must be an Array of Buffers');
                    a3.copy(r2, o2), o2 += a3.length;
                }
                return r2;
            }, ye.byteLength = Me, ye.prototype._isBuffer = true, ye.prototype.swap16 = function() {
                var e2 = this.length;
                if (e2 % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
                for(var t2 = 0; t2 < e2; t2 += 2)Ae(this, t2, t2 + 1);
                return this;
            }, ye.prototype.swap32 = function() {
                var e2 = this.length;
                if (e2 % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
                for(var t2 = 0; t2 < e2; t2 += 4)Ae(this, t2, t2 + 3), Ae(this, t2 + 1, t2 + 2);
                return this;
            }, ye.prototype.swap64 = function() {
                var e2 = this.length;
                if (e2 % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
                for(var t2 = 0; t2 < e2; t2 += 8)Ae(this, t2, t2 + 7), Ae(this, t2 + 1, t2 + 6), Ae(this, t2 + 2, t2 + 5), Ae(this, t2 + 3, t2 + 4);
                return this;
            }, ye.prototype.toString = function() {
                var e2 = 0 | this.length;
                return 0 === e2 ? "" : 0 === arguments.length ? je(this, 0, e2) : Se.apply(this, arguments);
            }, ye.prototype.equals = function(e2) {
                if (!Oe(e2)) throw new TypeError("Argument must be a Buffer");
                return this === e2 || 0 === ye.compare(this, e2);
            }, ye.prototype.inspect = function() {
                var e2 = "";
                return this.length > 0 && (e2 = this.toString("hex", 0, 50).match(/.{2}/g).join(" "), this.length > 50 && (e2 += " ... ")), "<Buffer " + e2 + ">";
            }, ye.prototype.compare = function(e2, t2, n2, r2, o2) {
                if (!Oe(e2)) throw new TypeError("Argument must be a Buffer");
                if (void 0 === t2 && (t2 = 0), void 0 === n2 && (n2 = e2 ? e2.length : 0), void 0 === r2 && (r2 = 0), void 0 === o2 && (o2 = this.length), t2 < 0 || n2 > e2.length || r2 < 0 || o2 > this.length) throw new RangeError("out of range index");
                if (r2 >= o2 && t2 >= n2) return 0;
                if (r2 >= o2) return -1;
                if (t2 >= n2) return 1;
                if (this === e2) return 0;
                for(var a3 = (o2 >>>= 0) - (r2 >>>= 0), s2 = (n2 >>>= 0) - (t2 >>>= 0), i2 = Math.min(a3, s2), c2 = this.slice(r2, o2), u2 = e2.slice(t2, n2), l2 = 0; l2 < i2; ++l2)if (c2[l2] !== u2[l2]) {
                    a3 = c2[l2], s2 = u2[l2];
                    break;
                }
                return a3 < s2 ? -1 : s2 < a3 ? 1 : 0;
            }, ye.prototype.includes = function(e2, t2, n2) {
                return -1 !== this.indexOf(e2, t2, n2);
            }, ye.prototype.indexOf = function(e2, t2, n2) {
                return Le(this, e2, t2, n2, true);
            }, ye.prototype.lastIndexOf = function(e2, t2, n2) {
                return Le(this, e2, t2, n2, false);
            }, ye.prototype.write = function(e2, t2, n2, r2) {
                if (void 0 === t2) r2 = "utf8", n2 = this.length, t2 = 0;
                else if (void 0 === n2 && "string" == typeof t2) r2 = t2, n2 = this.length, t2 = 0;
                else {
                    if (!isFinite(t2)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                    t2 |= 0, isFinite(n2) ? (n2 |= 0, void 0 === r2 && (r2 = "utf8")) : (r2 = n2, n2 = void 0);
                }
                var o2 = this.length - t2;
                if ((void 0 === n2 || n2 > o2) && (n2 = o2), e2.length > 0 && (n2 < 0 || t2 < 0) || t2 > this.length) throw new RangeError("Attempt to write outside buffer bounds");
                r2 || (r2 = "utf8");
                for(var a3 = false;;)switch(r2){
                    case "hex":
                        return Pe(this, e2, t2, n2);
                    case "utf8":
                    case "utf-8":
                        return Ce(this, e2, t2, n2);
                    case "ascii":
                        return Ne(this, e2, t2, n2);
                    case "latin1":
                    case "binary":
                        return xe(this, e2, t2, n2);
                    case "base64":
                        return ke(this, e2, t2, n2);
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                        return Ie(this, e2, t2, n2);
                    default:
                        if (a3) throw new TypeError("Unknown encoding: " + r2);
                        r2 = ("" + r2).toLowerCase(), a3 = true;
                }
            }, ye.prototype.toJSON = function() {
                return {
                    type: "Buffer",
                    data: Array.prototype.slice.call(this._arr || this, 0)
                };
            };
            function Be(e2, t2, n2) {
                var r2 = "";
                n2 = Math.min(e2.length, n2);
                for(var o2 = t2; o2 < n2; ++o2)r2 += String.fromCharCode(127 & e2[o2]);
                return r2;
            }
            function De(e2, t2, n2) {
                var r2 = "";
                n2 = Math.min(e2.length, n2);
                for(var o2 = t2; o2 < n2; ++o2)r2 += String.fromCharCode(e2[o2]);
                return r2;
            }
            function Ye(e2, t2, n2) {
                var r2 = e2.length;
                (!t2 || t2 < 0) && (t2 = 0), (!n2 || n2 < 0 || n2 > r2) && (n2 = r2);
                for(var o2 = "", a3 = t2; a3 < n2; ++a3)o2 += He(e2[a3]);
                return o2;
            }
            function Fe(e2, t2, n2) {
                for(var r2 = e2.slice(t2, n2), o2 = "", a3 = 0; a3 < r2.length; a3 += 2)o2 += String.fromCharCode(r2[a3] + 256 * r2[a3 + 1]);
                return o2;
            }
            function Ue(e2, t2, n2) {
                if (e2 % 1 != 0 || e2 < 0) throw new RangeError("offset is not uint");
                if (e2 + t2 > n2) throw new RangeError("Trying to access beyond buffer length");
            }
            function We(e2, t2, n2, r2, o2, a3) {
                if (!Oe(e2)) throw new TypeError('"buffer" argument must be a Buffer instance');
                if (t2 > o2 || t2 < a3) throw new RangeError('"value" argument is out of bounds');
                if (n2 + r2 > e2.length) throw new RangeError("Index out of range");
            }
            function Ke(e2, t2, n2, r2) {
                t2 < 0 && (t2 = 65535 + t2 + 1);
                for(var o2 = 0, a3 = Math.min(e2.length - n2, 2); o2 < a3; ++o2)e2[n2 + o2] = (t2 & 255 << 8 * (r2 ? o2 : 1 - o2)) >>> 8 * (r2 ? o2 : 1 - o2);
            }
            function Qe(e2, t2, n2, r2) {
                t2 < 0 && (t2 = 4294967295 + t2 + 1);
                for(var o2 = 0, a3 = Math.min(e2.length - n2, 4); o2 < a3; ++o2)e2[n2 + o2] = t2 >>> 8 * (r2 ? o2 : 3 - o2) & 255;
            }
            function Ve(e2, t2, n2, r2, o2, a3) {
                if (n2 + r2 > e2.length) throw new RangeError("Index out of range");
                if (n2 < 0) throw new RangeError("Index out of range");
            }
            function qe(e2, t2, n2, r2, o2) {
                return o2 || Ve(e2, 0, n2, 4), de(e2, t2, n2, r2, 23, 4), n2 + 4;
            }
            function $e(e2, t2, n2, r2, o2) {
                return o2 || Ve(e2, 0, n2, 8), de(e2, t2, n2, r2, 52, 8), n2 + 8;
            }
            ye.prototype.slice = function(e2, t2) {
                var n2, r2 = this.length;
                if ((e2 = ~~e2) < 0 ? (e2 += r2) < 0 && (e2 = 0) : e2 > r2 && (e2 = r2), (t2 = void 0 === t2 ? r2 : ~~t2) < 0 ? (t2 += r2) < 0 && (t2 = 0) : t2 > r2 && (t2 = r2), t2 < e2 && (t2 = e2), ye.TYPED_ARRAY_SUPPORT) (n2 = this.subarray(e2, t2)).__proto__ = ye.prototype;
                else {
                    var o2 = t2 - e2;
                    n2 = new ye(o2, void 0);
                    for(var a3 = 0; a3 < o2; ++a3)n2[a3] = this[a3 + e2];
                }
                return n2;
            }, ye.prototype.readUIntLE = function(e2, t2, n2) {
                e2 |= 0, t2 |= 0, n2 || Ue(e2, t2, this.length);
                for(var r2 = this[e2], o2 = 1, a3 = 0; ++a3 < t2 && (o2 *= 256);)r2 += this[e2 + a3] * o2;
                return r2;
            }, ye.prototype.readUIntBE = function(e2, t2, n2) {
                e2 |= 0, t2 |= 0, n2 || Ue(e2, t2, this.length);
                for(var r2 = this[e2 + --t2], o2 = 1; t2 > 0 && (o2 *= 256);)r2 += this[e2 + --t2] * o2;
                return r2;
            }, ye.prototype.readUInt8 = function(e2, t2) {
                return t2 || Ue(e2, 1, this.length), this[e2];
            }, ye.prototype.readUInt16LE = function(e2, t2) {
                return t2 || Ue(e2, 2, this.length), this[e2] | this[e2 + 1] << 8;
            }, ye.prototype.readUInt16BE = function(e2, t2) {
                return t2 || Ue(e2, 2, this.length), this[e2] << 8 | this[e2 + 1];
            }, ye.prototype.readUInt32LE = function(e2, t2) {
                return t2 || Ue(e2, 4, this.length), (this[e2] | this[e2 + 1] << 8 | this[e2 + 2] << 16) + 16777216 * this[e2 + 3];
            }, ye.prototype.readUInt32BE = function(e2, t2) {
                return t2 || Ue(e2, 4, this.length), 16777216 * this[e2] + (this[e2 + 1] << 16 | this[e2 + 2] << 8 | this[e2 + 3]);
            }, ye.prototype.readIntLE = function(e2, t2, n2) {
                e2 |= 0, t2 |= 0, n2 || Ue(e2, t2, this.length);
                for(var r2 = this[e2], o2 = 1, a3 = 0; ++a3 < t2 && (o2 *= 256);)r2 += this[e2 + a3] * o2;
                return r2 >= (o2 *= 128) && (r2 -= Math.pow(2, 8 * t2)), r2;
            }, ye.prototype.readIntBE = function(e2, t2, n2) {
                e2 |= 0, t2 |= 0, n2 || Ue(e2, t2, this.length);
                for(var r2 = t2, o2 = 1, a3 = this[e2 + --r2]; r2 > 0 && (o2 *= 256);)a3 += this[e2 + --r2] * o2;
                return a3 >= (o2 *= 128) && (a3 -= Math.pow(2, 8 * t2)), a3;
            }, ye.prototype.readInt8 = function(e2, t2) {
                return t2 || Ue(e2, 1, this.length), 128 & this[e2] ? -1 * (255 - this[e2] + 1) : this[e2];
            }, ye.prototype.readInt16LE = function(e2, t2) {
                t2 || Ue(e2, 2, this.length);
                var n2 = this[e2] | this[e2 + 1] << 8;
                return 32768 & n2 ? 4294901760 | n2 : n2;
            }, ye.prototype.readInt16BE = function(e2, t2) {
                t2 || Ue(e2, 2, this.length);
                var n2 = this[e2 + 1] | this[e2] << 8;
                return 32768 & n2 ? 4294901760 | n2 : n2;
            }, ye.prototype.readInt32LE = function(e2, t2) {
                return t2 || Ue(e2, 4, this.length), this[e2] | this[e2 + 1] << 8 | this[e2 + 2] << 16 | this[e2 + 3] << 24;
            }, ye.prototype.readInt32BE = function(e2, t2) {
                return t2 || Ue(e2, 4, this.length), this[e2] << 24 | this[e2 + 1] << 16 | this[e2 + 2] << 8 | this[e2 + 3];
            }, ye.prototype.readFloatLE = function(e2, t2) {
                return t2 || Ue(e2, 4, this.length), fe(this, e2, true, 23, 4);
            }, ye.prototype.readFloatBE = function(e2, t2) {
                return t2 || Ue(e2, 4, this.length), fe(this, e2, false, 23, 4);
            }, ye.prototype.readDoubleLE = function(e2, t2) {
                return t2 || Ue(e2, 8, this.length), fe(this, e2, true, 52, 8);
            }, ye.prototype.readDoubleBE = function(e2, t2) {
                return t2 || Ue(e2, 8, this.length), fe(this, e2, false, 52, 8);
            }, ye.prototype.writeUIntLE = function(e2, t2, n2, r2) {
                (e2 = +e2, t2 |= 0, n2 |= 0, r2) || We(this, e2, t2, n2, Math.pow(2, 8 * n2) - 1, 0);
                var o2 = 1, a3 = 0;
                for(this[t2] = 255 & e2; ++a3 < n2 && (o2 *= 256);)this[t2 + a3] = e2 / o2 & 255;
                return t2 + n2;
            }, ye.prototype.writeUIntBE = function(e2, t2, n2, r2) {
                (e2 = +e2, t2 |= 0, n2 |= 0, r2) || We(this, e2, t2, n2, Math.pow(2, 8 * n2) - 1, 0);
                var o2 = n2 - 1, a3 = 1;
                for(this[t2 + o2] = 255 & e2; --o2 >= 0 && (a3 *= 256);)this[t2 + o2] = e2 / a3 & 255;
                return t2 + n2;
            }, ye.prototype.writeUInt8 = function(e2, t2, n2) {
                return e2 = +e2, t2 |= 0, n2 || We(this, e2, t2, 1, 255, 0), ye.TYPED_ARRAY_SUPPORT || (e2 = Math.floor(e2)), this[t2] = 255 & e2, t2 + 1;
            }, ye.prototype.writeUInt16LE = function(e2, t2, n2) {
                return e2 = +e2, t2 |= 0, n2 || We(this, e2, t2, 2, 65535, 0), ye.TYPED_ARRAY_SUPPORT ? (this[t2] = 255 & e2, this[t2 + 1] = e2 >>> 8) : Ke(this, e2, t2, true), t2 + 2;
            }, ye.prototype.writeUInt16BE = function(e2, t2, n2) {
                return e2 = +e2, t2 |= 0, n2 || We(this, e2, t2, 2, 65535, 0), ye.TYPED_ARRAY_SUPPORT ? (this[t2] = e2 >>> 8, this[t2 + 1] = 255 & e2) : Ke(this, e2, t2, false), t2 + 2;
            }, ye.prototype.writeUInt32LE = function(e2, t2, n2) {
                return e2 = +e2, t2 |= 0, n2 || We(this, e2, t2, 4, 4294967295, 0), ye.TYPED_ARRAY_SUPPORT ? (this[t2 + 3] = e2 >>> 24, this[t2 + 2] = e2 >>> 16, this[t2 + 1] = e2 >>> 8, this[t2] = 255 & e2) : Qe(this, e2, t2, true), t2 + 4;
            }, ye.prototype.writeUInt32BE = function(e2, t2, n2) {
                return e2 = +e2, t2 |= 0, n2 || We(this, e2, t2, 4, 4294967295, 0), ye.TYPED_ARRAY_SUPPORT ? (this[t2] = e2 >>> 24, this[t2 + 1] = e2 >>> 16, this[t2 + 2] = e2 >>> 8, this[t2 + 3] = 255 & e2) : Qe(this, e2, t2, false), t2 + 4;
            }, ye.prototype.writeIntLE = function(e2, t2, n2, r2) {
                if (e2 = +e2, t2 |= 0, !r2) {
                    var o2 = Math.pow(2, 8 * n2 - 1);
                    We(this, e2, t2, n2, o2 - 1, -o2);
                }
                var a3 = 0, s2 = 1, i2 = 0;
                for(this[t2] = 255 & e2; ++a3 < n2 && (s2 *= 256);)e2 < 0 && 0 === i2 && 0 !== this[t2 + a3 - 1] && (i2 = 1), this[t2 + a3] = (e2 / s2 >> 0) - i2 & 255;
                return t2 + n2;
            }, ye.prototype.writeIntBE = function(e2, t2, n2, r2) {
                if (e2 = +e2, t2 |= 0, !r2) {
                    var o2 = Math.pow(2, 8 * n2 - 1);
                    We(this, e2, t2, n2, o2 - 1, -o2);
                }
                var a3 = n2 - 1, s2 = 1, i2 = 0;
                for(this[t2 + a3] = 255 & e2; --a3 >= 0 && (s2 *= 256);)e2 < 0 && 0 === i2 && 0 !== this[t2 + a3 + 1] && (i2 = 1), this[t2 + a3] = (e2 / s2 >> 0) - i2 & 255;
                return t2 + n2;
            }, ye.prototype.writeInt8 = function(e2, t2, n2) {
                return e2 = +e2, t2 |= 0, n2 || We(this, e2, t2, 1, 127, -128), ye.TYPED_ARRAY_SUPPORT || (e2 = Math.floor(e2)), e2 < 0 && (e2 = 255 + e2 + 1), this[t2] = 255 & e2, t2 + 1;
            }, ye.prototype.writeInt16LE = function(e2, t2, n2) {
                return e2 = +e2, t2 |= 0, n2 || We(this, e2, t2, 2, 32767, -32768), ye.TYPED_ARRAY_SUPPORT ? (this[t2] = 255 & e2, this[t2 + 1] = e2 >>> 8) : Ke(this, e2, t2, true), t2 + 2;
            }, ye.prototype.writeInt16BE = function(e2, t2, n2) {
                return e2 = +e2, t2 |= 0, n2 || We(this, e2, t2, 2, 32767, -32768), ye.TYPED_ARRAY_SUPPORT ? (this[t2] = e2 >>> 8, this[t2 + 1] = 255 & e2) : Ke(this, e2, t2, false), t2 + 2;
            }, ye.prototype.writeInt32LE = function(e2, t2, n2) {
                return e2 = +e2, t2 |= 0, n2 || We(this, e2, t2, 4, 2147483647, -2147483648), ye.TYPED_ARRAY_SUPPORT ? (this[t2] = 255 & e2, this[t2 + 1] = e2 >>> 8, this[t2 + 2] = e2 >>> 16, this[t2 + 3] = e2 >>> 24) : Qe(this, e2, t2, true), t2 + 4;
            }, ye.prototype.writeInt32BE = function(e2, t2, n2) {
                return e2 = +e2, t2 |= 0, n2 || We(this, e2, t2, 4, 2147483647, -2147483648), e2 < 0 && (e2 = 4294967295 + e2 + 1), ye.TYPED_ARRAY_SUPPORT ? (this[t2] = e2 >>> 24, this[t2 + 1] = e2 >>> 16, this[t2 + 2] = e2 >>> 8, this[t2 + 3] = 255 & e2) : Qe(this, e2, t2, false), t2 + 4;
            }, ye.prototype.writeFloatLE = function(e2, t2, n2) {
                return qe(this, e2, t2, true, n2);
            }, ye.prototype.writeFloatBE = function(e2, t2, n2) {
                return qe(this, e2, t2, false, n2);
            }, ye.prototype.writeDoubleLE = function(e2, t2, n2) {
                return $e(this, e2, t2, true, n2);
            }, ye.prototype.writeDoubleBE = function(e2, t2, n2) {
                return $e(this, e2, t2, false, n2);
            }, ye.prototype.copy = function(e2, t2, n2, r2) {
                if (n2 || (n2 = 0), r2 || 0 === r2 || (r2 = this.length), t2 >= e2.length && (t2 = e2.length), t2 || (t2 = 0), r2 > 0 && r2 < n2 && (r2 = n2), r2 === n2) return 0;
                if (0 === e2.length || 0 === this.length) return 0;
                if (t2 < 0) throw new RangeError("targetStart out of bounds");
                if (n2 < 0 || n2 >= this.length) throw new RangeError("sourceStart out of bounds");
                if (r2 < 0) throw new RangeError("sourceEnd out of bounds");
                r2 > this.length && (r2 = this.length), e2.length - t2 < r2 - n2 && (r2 = e2.length - t2 + n2);
                var o2, a3 = r2 - n2;
                if (this === e2 && n2 < t2 && t2 < r2) for(o2 = a3 - 1; o2 >= 0; --o2)e2[o2 + t2] = this[o2 + n2];
                else if (a3 < 1e3 || !ye.TYPED_ARRAY_SUPPORT) for(o2 = 0; o2 < a3; ++o2)e2[o2 + t2] = this[o2 + n2];
                else Uint8Array.prototype.set.call(e2, this.subarray(n2, n2 + a3), t2);
                return a3;
            }, ye.prototype.fill = function(e2, t2, n2, r2) {
                if ("string" == typeof e2) {
                    if ("string" == typeof t2 ? (r2 = t2, t2 = 0, n2 = this.length) : "string" == typeof n2 && (r2 = n2, n2 = this.length), 1 === e2.length) {
                        var o2 = e2.charCodeAt(0);
                        o2 < 256 && (e2 = o2);
                    }
                    if (void 0 !== r2 && "string" != typeof r2) throw new TypeError("encoding must be a string");
                    if ("string" == typeof r2 && !ye.isEncoding(r2)) throw new TypeError("Unknown encoding: " + r2);
                } else "number" == typeof e2 && (e2 &= 255);
                if (t2 < 0 || this.length < t2 || this.length < n2) throw new RangeError("Out of range index");
                if (n2 <= t2) return this;
                var a3;
                if (t2 >>>= 0, n2 = void 0 === n2 ? this.length : n2 >>> 0, e2 || (e2 = 0), "number" == typeof e2) for(a3 = t2; a3 < n2; ++a3)this[a3] = e2;
                else {
                    var s2 = Oe(e2) ? e2 : Ge(new ye(e2, r2).toString()), i2 = s2.length;
                    for(a3 = 0; a3 < n2 - t2; ++a3)this[a3 + t2] = s2[a3 % i2];
                }
                return this;
            };
            var Je = /[^+\/0-9A-Za-z-_]/g;
            function He(e2) {
                return e2 < 16 ? "0" + e2.toString(16) : e2.toString(16);
            }
            function Ge(e2, t2) {
                var n2;
                t2 = t2 || 1 / 0;
                for(var r2 = e2.length, o2 = null, a3 = [], s2 = 0; s2 < r2; ++s2){
                    if ((n2 = e2.charCodeAt(s2)) > 55295 && n2 < 57344) {
                        if (!o2) {
                            if (n2 > 56319) {
                                (t2 -= 3) > -1 && a3.push(239, 191, 189);
                                continue;
                            }
                            if (s2 + 1 === r2) {
                                (t2 -= 3) > -1 && a3.push(239, 191, 189);
                                continue;
                            }
                            o2 = n2;
                            continue;
                        }
                        if (n2 < 56320) {
                            (t2 -= 3) > -1 && a3.push(239, 191, 189), o2 = n2;
                            continue;
                        }
                        n2 = 65536 + (o2 - 55296 << 10 | n2 - 56320);
                    } else o2 && (t2 -= 3) > -1 && a3.push(239, 191, 189);
                    if (o2 = null, n2 < 128) {
                        if ((t2 -= 1) < 0) break;
                        a3.push(n2);
                    } else if (n2 < 2048) {
                        if ((t2 -= 2) < 0) break;
                        a3.push(n2 >> 6 | 192, 63 & n2 | 128);
                    } else if (n2 < 65536) {
                        if ((t2 -= 3) < 0) break;
                        a3.push(n2 >> 12 | 224, n2 >> 6 & 63 | 128, 63 & n2 | 128);
                    } else {
                        if (!(n2 < 1114112)) throw new Error("Invalid code point");
                        if ((t2 -= 4) < 0) break;
                        a3.push(n2 >> 18 | 240, n2 >> 12 & 63 | 128, n2 >> 6 & 63 | 128, 63 & n2 | 128);
                    }
                }
                return a3;
            }
            function ze(e2) {
                return function(e3) {
                    var t2, n2, r2, o2, a3, s2;
                    ie || ce();
                    var i2 = e3.length;
                    if (i2 % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
                    a3 = "=" === e3[i2 - 2] ? 2 : "=" === e3[i2 - 1] ? 1 : 0, s2 = new se(3 * i2 / 4 - a3), r2 = a3 > 0 ? i2 - 4 : i2;
                    var c2 = 0;
                    for(t2 = 0, n2 = 0; t2 < r2; t2 += 4, n2 += 3)o2 = ae[e3.charCodeAt(t2)] << 18 | ae[e3.charCodeAt(t2 + 1)] << 12 | ae[e3.charCodeAt(t2 + 2)] << 6 | ae[e3.charCodeAt(t2 + 3)], s2[c2++] = o2 >> 16 & 255, s2[c2++] = o2 >> 8 & 255, s2[c2++] = 255 & o2;
                    return 2 === a3 ? (o2 = ae[e3.charCodeAt(t2)] << 2 | ae[e3.charCodeAt(t2 + 1)] >> 4, s2[c2++] = 255 & o2) : 1 === a3 && (o2 = ae[e3.charCodeAt(t2)] << 10 | ae[e3.charCodeAt(t2 + 1)] << 4 | ae[e3.charCodeAt(t2 + 2)] >> 2, s2[c2++] = o2 >> 8 & 255, s2[c2++] = 255 & o2), s2;
                }(function(e3) {
                    if ((e3 = (function(e4) {
                        return e4.trim ? e4.trim() : e4.replace(/^\s+|\s+$/g, "");
                    })(e3).replace(Je, "")).length < 2) return "";
                    for(; e3.length % 4 != 0;)e3 += "=";
                    return e3;
                }(e2));
            }
            function Ze(e2, t2, n2, r2) {
                for(var o2 = 0; o2 < r2 && !(o2 + n2 >= t2.length || o2 >= e2.length); ++o2)t2[o2 + n2] = e2[o2];
                return o2;
            }
            function Xe(e2) {
                return !!e2.constructor && "function" == typeof e2.constructor.isBuffer && e2.constructor.isBuffer(e2);
            }
            var et = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = {
                    identify: (e3)=>e3 instanceof Uint8Array,
                    default: false,
                    tag: "tag:yaml.org,2002:binary",
                    resolve: (e3, t3)=>{
                        {
                            const n3 = (0, X.resolveString)(e3, t3);
                            return ye.from(n3, "base64");
                        }
                    },
                    options: q.binaryOptions,
                    stringify: ({ comment: e3 , type: t3 , value: n3  }, r2, o2, a3)=>{
                        let s2;
                        if (s2 = n3 instanceof ye ? n3.toString("base64") : ye.from(n3.buffer).toString("base64"), t3 || (t3 = q.binaryOptions.defaultType), t3 === h.Type.QUOTE_DOUBLE) n3 = s2;
                        else {
                            const { lineWidth: e4  } = q.binaryOptions, r3 = Math.ceil(s2.length / e4), o3 = new Array(r3);
                            for(let t4 = 0, n4 = 0; t4 < r3; ++t4, n4 += e4)o3[t4] = s2.substr(n4, e4);
                            n3 = o3.join(t3 === h.Type.BLOCK_LITERAL ? "\n" : " ");
                        }
                        return (0, $.stringifyString)({
                            comment: e3,
                            type: t3,
                            value: n3
                        }, r2, o2, a3);
                    }
                };
                t2.default = n2;
            });
            o(et);
            var tt = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.parsePairs = i2, t2.createPairs = c2, t2.default = void 0;
                var n2 = s2(Y), r2 = s2(j), o2 = s2(z), a3 = s2(F);
                function s2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                function i2(e3, t3) {
                    const a4 = (0, o2.default)(e3, t3);
                    for(let e4 = 0; e4 < a4.items.length; ++e4){
                        let o3 = a4.items[e4];
                        if (!(o3 instanceof r2.default)) {
                            if (o3 instanceof n2.default) {
                                if (o3.items.length > 1) {
                                    const e6 = "Each pair must have its own sequence indicator";
                                    throw new y.YAMLSemanticError(t3, e6);
                                }
                                const e5 = o3.items[0] || new r2.default();
                                o3.commentBefore && (e5.commentBefore = e5.commentBefore ? "".concat(o3.commentBefore, "\n").concat(e5.commentBefore) : o3.commentBefore), o3.comment && (e5.comment = e5.comment ? "".concat(o3.comment, "\n").concat(e5.comment) : o3.comment), o3 = e5;
                            }
                            a4.items[e4] = o3 instanceof r2.default ? o3 : new r2.default(o3);
                        }
                    }
                    return a4;
                }
                function c2(e3, t3, n3) {
                    const r3 = new a3.default(e3);
                    r3.tag = "tag:yaml.org,2002:pairs";
                    for (const o3 of t3){
                        let t4, a4;
                        if (Array.isArray(o3)) {
                            if (2 !== o3.length) throw new TypeError("Expected [key, value] tuple: ".concat(o3));
                            t4 = o3[0], a4 = o3[1];
                        } else if (o3 && o3 instanceof Object) {
                            const e4 = Object.keys(o3);
                            if (1 !== e4.length) throw new TypeError("Expected { key: value } tuple: ".concat(o3));
                            t4 = e4[0], a4 = o3[t4];
                        } else t4 = o3;
                        const s3 = e3.createPair(t4, a4, n3);
                        r3.items.push(s3);
                    }
                    return r3;
                }
                var u2 = {
                    default: false,
                    tag: "tag:yaml.org,2002:pairs",
                    resolve: i2,
                    createNode: c2
                };
                t2.default = u2;
            });
            o(tt);
            tt.parsePairs, tt.createPairs;
            var nt = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = t2.YAMLOMap = void 0;
                var n2 = i2(k), r2 = i2(Y), o2 = i2(j), a3 = i2(R), s2 = i2(F);
                function i2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                function c2(e3, t3, n3) {
                    return t3 in e3 ? Object.defineProperty(e3, t3, {
                        value: n3,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    }) : e3[t3] = n3, e3;
                }
                class u2 extends s2.default {
                    toJSON(e3, t3) {
                        const r3 = /* @__PURE__ */ new Map();
                        t3 && t3.onCreate && t3.onCreate(r3);
                        for (const e4 of this.items){
                            let a4, s3;
                            if (e4 instanceof o2.default ? (a4 = (0, n2.default)(e4.key, "", t3), s3 = (0, n2.default)(e4.value, a4, t3)) : a4 = (0, n2.default)(e4, "", t3), r3.has(a4)) throw new Error("Ordered maps must not include duplicate keys");
                            r3.set(a4, s3);
                        }
                        return r3;
                    }
                    constructor(){
                        super(), c2(this, "add", r2.default.prototype.add.bind(this)), c2(this, "delete", r2.default.prototype.delete.bind(this)), c2(this, "get", r2.default.prototype.get.bind(this)), c2(this, "has", r2.default.prototype.has.bind(this)), c2(this, "set", r2.default.prototype.set.bind(this)), this.tag = u2.tag;
                    }
                }
                t2.YAMLOMap = u2, c2(u2, "tag", "tag:yaml.org,2002:omap");
                var l2 = {
                    identify: (e3)=>e3 instanceof Map,
                    nodeClass: u2,
                    default: false,
                    tag: "tag:yaml.org,2002:omap",
                    resolve: function(e3, t3) {
                        const n3 = (0, tt.parsePairs)(e3, t3), r3 = [];
                        for (const { key: e4  } of n3.items)if (e4 instanceof a3.default) {
                            if (r3.includes(e4.value)) {
                                const e5 = "Ordered maps must not include duplicate keys";
                                throw new y.YAMLSemanticError(t3, e5);
                            }
                            r3.push(e4.value);
                        }
                        return Object.assign(new u2(), n3);
                    },
                    createNode: function(e3, t3, n3) {
                        const r3 = (0, tt.createPairs)(e3, t3, n3), o3 = new u2();
                        return o3.items = r3.items, o3;
                    }
                };
                t2.default = l2;
            });
            o(nt);
            nt.YAMLOMap;
            var rt = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = t2.YAMLSet = void 0;
                var n2, r2, o2, a3 = function(e3) {
                    if (e3 && e3.__esModule) return e3;
                    if (null === e3 || "object" != typeof e3 && "function" != typeof e3) return {
                        default: e3
                    };
                    var t3 = l2();
                    if (t3 && t3.has(e3)) return t3.get(e3);
                    var n3 = {}, r3 = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o3 in e3)if (Object.prototype.hasOwnProperty.call(e3, o3)) {
                        var a4 = r3 ? Object.getOwnPropertyDescriptor(e3, o3) : null;
                        a4 && (a4.get || a4.set) ? Object.defineProperty(n3, o3, a4) : n3[o3] = e3[o3];
                    }
                    n3.default = e3, t3 && t3.set(e3, n3);
                    return n3;
                }(Y), s2 = u2(j), i2 = u2(H), c2 = u2(R);
                function u2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                function l2() {
                    if ("function" != typeof WeakMap) return null;
                    var e3 = /* @__PURE__ */ new WeakMap();
                    return l2 = function() {
                        return e3;
                    }, e3;
                }
                class f3 extends a3.default {
                    add(e3) {
                        const t3 = e3 instanceof s2.default ? e3 : new s2.default(e3);
                        (0, a3.findPair)(this.items, t3.key) || this.items.push(t3);
                    }
                    get(e3, t3) {
                        const n3 = (0, a3.findPair)(this.items, e3);
                        return !t3 && n3 instanceof s2.default ? n3.key instanceof c2.default ? n3.key.value : n3.key : n3;
                    }
                    set(e3, t3) {
                        if ("boolean" != typeof t3) throw new Error("Expected boolean value for set(key, value) in a YAML set, not ".concat(typeof t3));
                        const n3 = (0, a3.findPair)(this.items, e3);
                        n3 && !t3 ? this.items.splice(this.items.indexOf(n3), 1) : !n3 && t3 && this.items.push(new s2.default(e3));
                    }
                    toJSON(e3, t3) {
                        return super.toJSON(e3, t3, Set);
                    }
                    toString(e3, t3, n3) {
                        if (!e3) return JSON.stringify(this);
                        if (this.hasAllNullValues()) return super.toString(e3, t3, n3);
                        throw new Error("Set items must all have null values");
                    }
                    constructor(){
                        super(), this.tag = f3.tag;
                    }
                }
                t2.YAMLSet = f3, o2 = "tag:yaml.org,2002:set", (r2 = "tag") in (n2 = f3) ? Object.defineProperty(n2, r2, {
                    value: o2,
                    enumerable: true,
                    configurable: true,
                    writable: true
                }) : n2[r2] = o2;
                var d2 = {
                    identify: (e3)=>e3 instanceof Set,
                    nodeClass: f3,
                    default: false,
                    tag: "tag:yaml.org,2002:set",
                    resolve: function(e3, t3) {
                        const n3 = (0, i2.default)(e3, t3);
                        if (!n3.hasAllNullValues()) throw new y.YAMLSemanticError(t3, "Set items must all have null values");
                        return Object.assign(new f3(), n3);
                    },
                    createNode: function(e3, t3, n3) {
                        const r3 = new f3();
                        for (const o3 of t3)r3.items.push(e3.createPair(o3, null, n3));
                        return r3;
                    }
                };
                t2.default = d2;
            });
            o(rt);
            rt.YAMLSet;
            var ot = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.timestamp = t2.floatTime = t2.intTime = void 0;
                const n2 = (e3, t3)=>{
                    const n3 = t3.split(":").reduce((e4, t4)=>60 * e4 + Number(t4), 0);
                    return "-" === e3 ? -n3 : n3;
                }, r2 = ({ value: e3  })=>{
                    if (isNaN(e3) || !isFinite(e3)) return (0, $.stringifyNumber)(e3);
                    let t3 = "";
                    e3 < 0 && (t3 = "-", e3 = Math.abs(e3));
                    const n3 = [
                        e3 % 60
                    ];
                    return e3 < 60 ? n3.unshift(0) : (e3 = Math.round((e3 - n3[0]) / 60), n3.unshift(e3 % 60), e3 >= 60 && (e3 = Math.round((e3 - n3[0]) / 60), n3.unshift(e3))), t3 + n3.map((e4)=>e4 < 10 ? "0" + String(e4) : String(e4)).join(":").replace(/000000\d*$/, "");
                }, o2 = {
                    identify: (e3)=>"number" == typeof e3,
                    default: true,
                    tag: "tag:yaml.org,2002:int",
                    format: "TIME",
                    test: /^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+)$/,
                    resolve: (e3, t3, r3)=>n2(t3, r3.replace(/_/g, "")),
                    stringify: r2
                };
                t2.intTime = o2;
                const a3 = {
                    identify: (e3)=>"number" == typeof e3,
                    default: true,
                    tag: "tag:yaml.org,2002:float",
                    format: "TIME",
                    test: /^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*)$/,
                    resolve: (e3, t3, r3)=>n2(t3, r3.replace(/_/g, "")),
                    stringify: r2
                };
                t2.floatTime = a3;
                const s2 = {
                    identify: (e3)=>e3 instanceof Date,
                    default: true,
                    tag: "tag:yaml.org,2002:timestamp",
                    test: RegExp("^(?:([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?)$"),
                    resolve: (e3, t3, r3, o3, a4, s3, i2, c2, u2)=>{
                        c2 && (c2 = (c2 + "00").substr(1, 3));
                        let l2 = Date.UTC(t3, r3 - 1, o3, a4 || 0, s3 || 0, i2 || 0, c2 || 0);
                        if (u2 && "Z" !== u2) {
                            let e4 = n2(u2[0], u2.slice(1));
                            Math.abs(e4) < 30 && (e4 *= 60), l2 -= 6e4 * e4;
                        }
                        return new Date(l2);
                    },
                    stringify: ({ value: e3  })=>e3.toISOString().replace(/((T00:00)?:00)?\.000Z$/, "")
                };
                t2.timestamp = s2;
            });
            o(ot);
            ot.timestamp, ot.floatTime, ot.intTime;
            var at = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = c2(R), r2 = c2(ee), o2 = c2(et), a3 = c2(nt), s2 = c2(tt), i2 = c2(rt);
                function c2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                const u2 = ({ value: e3  })=>e3 ? q.boolOptions.trueStr : q.boolOptions.falseStr;
                var l2 = r2.default.concat([
                    {
                        identify: (e3)=>null == e3,
                        createNode: (e3, t3, r3)=>r3.wrapScalars ? new n2.default(null) : null,
                        default: true,
                        tag: "tag:yaml.org,2002:null",
                        test: /^(?:~|[Nn]ull|NULL)?$/,
                        resolve: ()=>null,
                        options: q.nullOptions,
                        stringify: ()=>q.nullOptions.nullStr
                    },
                    {
                        identify: (e3)=>"boolean" == typeof e3,
                        default: true,
                        tag: "tag:yaml.org,2002:bool",
                        test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,
                        resolve: ()=>true,
                        options: q.boolOptions,
                        stringify: u2
                    },
                    {
                        identify: (e3)=>"boolean" == typeof e3,
                        default: true,
                        tag: "tag:yaml.org,2002:bool",
                        test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,
                        resolve: ()=>false,
                        options: q.boolOptions,
                        stringify: u2
                    },
                    {
                        identify: (e3)=>"number" == typeof e3,
                        default: true,
                        tag: "tag:yaml.org,2002:int",
                        format: "BIN",
                        test: /^0b([0-1_]+)$/,
                        resolve: (e3, t3)=>parseInt(t3.replace(/_/g, ""), 2),
                        stringify: ({ value: e3  })=>"0b" + e3.toString(2)
                    },
                    {
                        identify: (e3)=>"number" == typeof e3,
                        default: true,
                        tag: "tag:yaml.org,2002:int",
                        format: "OCT",
                        test: /^[-+]?0([0-7_]+)$/,
                        resolve: (e3, t3)=>parseInt(t3.replace(/_/g, ""), 8),
                        stringify: ({ value: e3  })=>(e3 < 0 ? "-0" : "0") + e3.toString(8)
                    },
                    {
                        identify: (e3)=>"number" == typeof e3,
                        default: true,
                        tag: "tag:yaml.org,2002:int",
                        test: /^[-+]?[0-9][0-9_]*$/,
                        resolve: (e3)=>parseInt(e3.replace(/_/g, ""), 10),
                        stringify: $.stringifyNumber
                    },
                    {
                        identify: (e3)=>"number" == typeof e3,
                        default: true,
                        tag: "tag:yaml.org,2002:int",
                        format: "HEX",
                        test: /^0x([0-9a-fA-F_]+)$/,
                        resolve: (e3, t3)=>parseInt(t3.replace(/_/g, ""), 16),
                        stringify: ({ value: e3  })=>(e3 < 0 ? "-0x" : "0x") + e3.toString(16)
                    },
                    {
                        identify: (e3)=>"number" == typeof e3,
                        default: true,
                        tag: "tag:yaml.org,2002:float",
                        test: /^(?:[-+]?\.inf|(\.nan))$/i,
                        resolve: (e3, t3)=>t3 ? NaN : "-" === e3[0] ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
                        stringify: $.stringifyNumber
                    },
                    {
                        identify: (e3)=>"number" == typeof e3,
                        default: true,
                        tag: "tag:yaml.org,2002:float",
                        format: "EXP",
                        test: /^[-+]?([0-9][0-9_]*)?(\.[0-9_]*)?[eE][-+]?[0-9]+$/,
                        resolve: (e3)=>parseFloat(e3.replace(/_/g, "")),
                        stringify: ({ value: e3  })=>Number(e3).toExponential()
                    },
                    {
                        identify: (e3)=>"number" == typeof e3,
                        default: true,
                        tag: "tag:yaml.org,2002:float",
                        test: /^[-+]?(?:[0-9][0-9_]*)?\.([0-9_]*)$/,
                        resolve (e3, t3) {
                            const r3 = new n2.default(parseFloat(e3.replace(/_/g, "")));
                            if (t3) {
                                const e4 = t3.replace(/_/g, "");
                                "0" === e4[e4.length - 1] && (r3.minFractionDigits = e4.length);
                            }
                            return r3;
                        },
                        stringify: $.stringifyNumber
                    }
                ], o2.default, a3.default, s2.default, i2.default, ot.intTime, ot.floatTime, ot.timestamp);
                t2.default = l2;
            });
            o(at);
            var st = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.tags = t2.schemas = void 0;
                var n2 = function(e3) {
                    if (e3 && e3.__esModule) return e3;
                    if (null === e3 || "object" != typeof e3 && "function" != typeof e3) return {
                        default: e3
                    };
                    var t3 = h2();
                    if (t3 && t3.has(e3)) return t3.get(e3);
                    var n3 = {}, r3 = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o3 in e3)if (Object.prototype.hasOwnProperty.call(e3, o3)) {
                        var a4 = r3 ? Object.getOwnPropertyDescriptor(e3, o3) : null;
                        a4 && (a4.get || a4.set) ? Object.defineProperty(n3, o3, a4) : n3[o3] = e3[o3];
                    }
                    n3.default = e3, t3 && t3.set(e3, n3);
                    return n3;
                }(te), r2 = d2(ee), o2 = d2(ne), a3 = d2(at), s2 = d2(G), i2 = d2(Z), c2 = d2(et), u2 = d2(nt), l2 = d2(tt), f3 = d2(rt);
                function d2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                function h2() {
                    if ("function" != typeof WeakMap) return null;
                    var e3 = /* @__PURE__ */ new WeakMap();
                    return h2 = function() {
                        return e3;
                    }, e3;
                }
                const p2 = {
                    core: n2.default,
                    failsafe: r2.default,
                    json: o2.default,
                    yaml11: a3.default
                };
                t2.schemas = p2;
                const g2 = {
                    binary: c2.default,
                    bool: n2.boolObj,
                    float: n2.floatObj,
                    floatExp: n2.expObj,
                    floatNaN: n2.nanObj,
                    floatTime: ot.floatTime,
                    int: n2.intObj,
                    intHex: n2.hexObj,
                    intOct: n2.octObj,
                    intTime: ot.intTime,
                    map: s2.default,
                    null: n2.nullObj,
                    omap: u2.default,
                    pairs: l2.default,
                    seq: i2.default,
                    set: f3.default,
                    timestamp: ot.timestamp
                };
                t2.tags = g2;
            });
            o(st);
            st.tags, st.schemas;
            var it = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = i2(D), r2 = i2(B), o2 = i2(I), a3 = i2(j), s2 = i2(R);
                function i2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                function c2(e3, t3, n3) {
                    return t3 in e3 ? Object.defineProperty(e3, t3, {
                        value: n3,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    }) : e3[t3] = n3, e3;
                }
                class u2 {
                    createNode(e3, t3, r3, a4) {
                        if (e3 instanceof o2.default) return e3;
                        let i3;
                        if (r3) {
                            r3.startsWith("!!") && (r3 = u2.defaultPrefix + r3.slice(2));
                            const e4 = this.tags.filter((e5)=>e5.tag === r3);
                            if (i3 = e4.find((e5)=>!e5.format) || e4[0], !i3) throw new Error("Tag ".concat(r3, " not found"));
                        } else if (i3 = this.tags.find((t4)=>(t4.identify && t4.identify(e3) || t4.class && e3 instanceof t4.class) && !t4.format), !i3) {
                            if ("function" == typeof e3.toJSON && (e3 = e3.toJSON()), "object" != typeof e3) return t3 ? new s2.default(e3) : e3;
                            i3 = e3 instanceof Map ? st.tags.map : e3[Symbol.iterator] ? st.tags.seq : st.tags.map;
                        }
                        a4 ? a4.wrapScalars = t3 : a4 = {
                            wrapScalars: t3
                        }, a4.onTagObj && (a4.onTagObj(i3), delete a4.onTagObj);
                        const c3 = {};
                        if (e3 && "object" == typeof e3 && a4.prevObjects) {
                            const t4 = a4.prevObjects.get(e3);
                            if (t4) {
                                const e4 = new n2.default(t4);
                                return a4.aliasNodes.push(e4), e4;
                            }
                            c3.value = e3, a4.prevObjects.set(e3, c3);
                        }
                        return c3.node = i3.createNode ? i3.createNode(this, e3, a4) : t3 ? new s2.default(e3) : e3, r3 && c3.node instanceof o2.default && (c3.node.tag = r3), c3.node;
                    }
                    createPair(e3, t3, n3) {
                        const r3 = this.createNode(e3, n3.wrapScalars, null, n3), o3 = this.createNode(t3, n3.wrapScalars, null, n3);
                        return new a3.default(r3, o3);
                    }
                    resolveScalar(e3, t3) {
                        t3 || (t3 = this.tags);
                        for(let n3 = 0; n3 < t3.length; ++n3){
                            const { format: r3 , test: o3 , resolve: a4  } = t3[n3];
                            if (o3) {
                                const t4 = e3.match(o3);
                                if (t4) {
                                    let e4 = a4.apply(null, t4);
                                    return e4 instanceof s2.default || (e4 = new s2.default(e4)), r3 && (e4.format = r3), e4;
                                }
                            }
                        }
                        return this.tags.scalarFallback && (e3 = this.tags.scalarFallback(e3)), new s2.default(e3);
                    }
                    resolveNode(e3, t3, n3) {
                        const o3 = this.tags.filter(({ tag: e4  })=>e4 === n3), a4 = o3.find(({ test: e4  })=>!e4);
                        t3.error && e3.errors.push(t3.error);
                        try {
                            if (a4) {
                                let n4 = a4.resolve(e3, t3);
                                n4 instanceof r2.default || (n4 = new s2.default(n4)), t3.resolved = n4;
                            } else {
                                const n4 = (0, X.resolveString)(e3, t3);
                                "string" == typeof n4 && o3.length > 0 && (t3.resolved = this.resolveScalar(n4, o3));
                            }
                        } catch (n4) {
                            n4.source || (n4.source = t3), e3.errors.push(n4), t3.resolved = null;
                        }
                        return t3.resolved ? (n3 && t3.tag && (t3.resolved.tag = n3), t3.resolved) : null;
                    }
                    resolveNodeWithFallback(e3, t3, n3) {
                        const r3 = this.resolveNode(e3, t3, n3);
                        if (Object.prototype.hasOwnProperty.call(t3, "resolved")) return r3;
                        const o3 = (({ type: e4  })=>e4 === h.Type.FLOW_MAP || e4 === h.Type.MAP)(t3) ? u2.defaultTags.MAP : (({ type: e4  })=>e4 === h.Type.FLOW_SEQ || e4 === h.Type.SEQ)(t3) ? u2.defaultTags.SEQ : u2.defaultTags.STR;
                        if (o3) {
                            e3.warnings.push(new y.YAMLWarning(t3, "The tag ".concat(n3, " is unavailable, falling back to ").concat(o3)));
                            const r4 = this.resolveNode(e3, t3, o3);
                            return r4.tag = n3, r4;
                        }
                        return e3.errors.push(new y.YAMLReferenceError(t3, "The tag ".concat(n3, " is unavailable"))), null;
                    }
                    getTagObject(e3) {
                        if (e3 instanceof n2.default) return n2.default;
                        if (e3.tag) {
                            const t4 = this.tags.filter((t5)=>t5.tag === e3.tag);
                            if (t4.length > 0) return t4.find((t5)=>t5.format === e3.format) || t4[0];
                        }
                        let t3, r3;
                        if (e3 instanceof s2.default) {
                            r3 = e3.value;
                            const n3 = this.tags.filter((e4)=>e4.identify && e4.identify(r3) || e4.class && r3 instanceof e4.class);
                            t3 = n3.find((t4)=>t4.format === e3.format) || n3.find((e4)=>!e4.format);
                        } else r3 = e3, t3 = this.tags.find((e4)=>e4.nodeClass && r3 instanceof e4.nodeClass);
                        if (!t3) {
                            const e4 = r3 && r3.constructor ? r3.constructor.name : typeof r3;
                            throw new Error("Tag not resolved for ".concat(e4, " value"));
                        }
                        return t3;
                    }
                    stringifyProps(e3, t3, { anchors: n3 , doc: r3  }) {
                        const o3 = [], a4 = r3.anchors.getName(e3);
                        return a4 && (n3[a4] = e3, o3.push("&".concat(a4))), e3.tag ? o3.push(r3.stringifyTag(e3.tag)) : t3.default || o3.push(r3.stringifyTag(t3.tag)), o3.join(" ");
                    }
                    stringify(e3, t3, n3, s3) {
                        let i3;
                        if (!(e3 instanceof o2.default)) {
                            const n4 = {
                                aliasNodes: [],
                                onTagObj: (e4)=>i3 = e4,
                                prevObjects: /* @__PURE__ */ new Map()
                            };
                            e3 = this.createNode(e3, true, null, n4);
                            const { anchors: r3  } = t3.doc;
                            for (const e4 of n4.aliasNodes){
                                e4.source = e4.source.node;
                                let t4 = r3.getName(e4.source);
                                t4 || (t4 = r3.newName(), r3.map[t4] = e4.source);
                            }
                        }
                        if (t3.tags = this, e3 instanceof a3.default) return e3.toString(t3, n3, s3);
                        i3 || (i3 = this.getTagObject(e3));
                        const c3 = this.stringifyProps(e3, i3, t3);
                        c3.length > 0 && (t3.indentAtStart = (t3.indentAtStart || 0) + c3.length + 1);
                        const u3 = "function" == typeof i3.stringify ? i3.stringify(e3, t3, n3, s3) : e3 instanceof r2.default ? e3.toString(t3, n3, s3) : (0, $.stringifyString)(e3, t3, n3, s3);
                        return c3 ? e3 instanceof r2.default && "{" !== u3[0] && "[" !== u3[0] ? "".concat(c3, "\n").concat(t3.indent).concat(u3) : "".concat(c3, " ").concat(u3) : u3;
                    }
                    constructor({ customTags: e3 , merge: t3 , schema: n3 , sortMapEntries: r3 , tags: o3  }){
                        if (this.merge = !!t3, this.name = n3, this.sortMapEntries = true === r3 ? (e4, t4)=>e4.key < t4.key ? -1 : e4.key > t4.key ? 1 : 0 : r3 || null, this.tags = st.schemas[n3.replace(/\W/g, "")], !this.tags) {
                            const e4 = Object.keys(st.schemas).map((e5)=>JSON.stringify(e5)).join(", ");
                            throw new Error('Unknown schema "'.concat(n3, '"; use one of ').concat(e4));
                        }
                        if (!e3 && o3 && (e3 = o3, (0, Q.warnOptionDeprecation)("tags", "customTags")), Array.isArray(e3)) for (const t4 of e3)this.tags = this.tags.concat(t4);
                        else "function" == typeof e3 && (this.tags = e3(this.tags.slice()));
                        for(let e4 = 0; e4 < this.tags.length; ++e4){
                            const t4 = this.tags[e4];
                            if ("string" == typeof t4) {
                                const n4 = st.tags[t4];
                                if (!n4) {
                                    const e5 = Object.keys(st.tags).map((e6)=>JSON.stringify(e6)).join(", ");
                                    throw new Error('Unknown custom tag "'.concat(t4, '"; use one of ').concat(e5));
                                }
                                this.tags[e4] = n4;
                            }
                        }
                    }
                }
                t2.default = u2, c2(u2, "defaultPrefix", "tag:yaml.org,2002:"), c2(u2, "defaultTags", {
                    MAP: "tag:yaml.org,2002:map",
                    SEQ: "tag:yaml.org,2002:seq",
                    STR: "tag:yaml.org,2002:str"
                });
            });
            o(it);
            var ct = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = d2(x), r2 = d2(W), o2 = d2(K), a3 = d2(it), s2 = d2(D), i2 = function(e3) {
                    if (e3 && e3.__esModule) return e3;
                    if (null === e3 || "object" != typeof e3 && "function" != typeof e3) return {
                        default: e3
                    };
                    var t3 = f3();
                    if (t3 && t3.has(e3)) return t3.get(e3);
                    var n3 = {}, r3 = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o3 in e3)if (Object.prototype.hasOwnProperty.call(e3, o3)) {
                        var a4 = r3 ? Object.getOwnPropertyDescriptor(e3, o3) : null;
                        a4 && (a4.get || a4.set) ? Object.defineProperty(n3, o3, a4) : n3[o3] = e3[o3];
                    }
                    n3.default = e3, t3 && t3.set(e3, n3);
                    return n3;
                }(B), c2 = d2(I), u2 = d2(R), l2 = d2(k);
                function f3() {
                    if ("function" != typeof WeakMap) return null;
                    var e3 = /* @__PURE__ */ new WeakMap();
                    return f3 = function() {
                        return e3;
                    }, e3;
                }
                function d2(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                class p2 {
                    assertCollectionContents() {
                        if (this.contents instanceof i2.default) return true;
                        throw new Error("Expected a YAML collection as document contents");
                    }
                    add(e3) {
                        return this.assertCollectionContents(), this.contents.add(e3);
                    }
                    addIn(e3, t3) {
                        this.assertCollectionContents(), this.contents.addIn(e3, t3);
                    }
                    delete(e3) {
                        return this.assertCollectionContents(), this.contents.delete(e3);
                    }
                    deleteIn(e3) {
                        return (0, i2.isEmptyPath)(e3) ? null != this.contents && (this.contents = null, true) : (this.assertCollectionContents(), this.contents.deleteIn(e3));
                    }
                    getDefaults() {
                        return p2.defaults[this.version] || p2.defaults[this.options.version] || {};
                    }
                    get(e3, t3) {
                        return this.contents instanceof i2.default ? this.contents.get(e3, t3) : void 0;
                    }
                    getIn(e3, t3) {
                        return (0, i2.isEmptyPath)(e3) ? !t3 && this.contents instanceof u2.default ? this.contents.value : this.contents : this.contents instanceof i2.default ? this.contents.getIn(e3, t3) : void 0;
                    }
                    has(e3) {
                        return this.contents instanceof i2.default && this.contents.has(e3);
                    }
                    hasIn(e3) {
                        return (0, i2.isEmptyPath)(e3) ? void 0 !== this.contents : this.contents instanceof i2.default && this.contents.hasIn(e3);
                    }
                    set(e3, t3) {
                        this.assertCollectionContents(), this.contents.set(e3, t3);
                    }
                    setIn(e3, t3) {
                        (0, i2.isEmptyPath)(e3) ? this.contents = t3 : (this.assertCollectionContents(), this.contents.setIn(e3, t3));
                    }
                    setSchema(e3, t3) {
                        if (!e3 && !t3 && this.schema) return;
                        "number" == typeof e3 && (e3 = e3.toFixed(1)), "1.0" === e3 || "1.1" === e3 || "1.2" === e3 ? (this.version ? this.version = e3 : this.options.version = e3, delete this.options.schema) : e3 && "string" == typeof e3 && (this.options.schema = e3), Array.isArray(t3) && (this.options.customTags = t3);
                        const n3 = Object.assign({}, this.getDefaults(), this.options);
                        this.schema = new a3.default(n3);
                    }
                    parse(e3, t3) {
                        this.options.keepCstNodes && (this.cstNode = e3), this.options.keepNodeTypes && (this.type = "DOCUMENT");
                        const { directives: n3 = [] , contents: r3 = [] , directivesEndMarker: o3 , error: a4 , valueRange: s3  } = e3;
                        if (a4 && (a4.source || (a4.source = this), this.errors.push(a4)), this.parseDirectives(n3, t3), o3 && (this.directivesEndMarker = true), this.range = s3 ? [
                            s3.start,
                            s3.end
                        ] : null, this.setSchema(), this.anchors._cstAliases = [], this.parseContents(r3), this.anchors.resolveNodes(), this.options.prettyErrors) {
                            for (const e4 of this.errors)e4 instanceof y.YAMLError && e4.makePretty();
                            for (const e4 of this.warnings)e4 instanceof y.YAMLError && e4.makePretty();
                        }
                        return this;
                    }
                    parseDirectives(e3, t3) {
                        const n3 = [];
                        let r3 = false;
                        if (e3.forEach((e4)=>{
                            const { comment: t4 , name: o3  } = e4;
                            switch(o3){
                                case "TAG":
                                    this.resolveTagDirective(e4), r3 = true;
                                    break;
                                case "YAML":
                                case "YAML:1.0":
                                    this.resolveYamlDirective(e4), r3 = true;
                                    break;
                                default:
                                    if (o3) {
                                        const t5 = "YAML only supports %TAG and %YAML directives, and not %".concat(o3);
                                        this.warnings.push(new y.YAMLWarning(e4, t5));
                                    }
                            }
                            t4 && n3.push(t4);
                        }), t3 && !r3 && "1.1" === (this.version || t3.version || this.options.version)) {
                            const e4 = ({ handle: e5 , prefix: t4  })=>({
                                    handle: e5,
                                    prefix: t4
                                });
                            this.tagPrefixes = t3.tagPrefixes.map(e4), this.version = t3.version;
                        }
                        this.commentBefore = n3.join("\n") || null;
                    }
                    parseContents(e3) {
                        const t3 = {
                            before: [],
                            after: []
                        }, n3 = [];
                        let r3 = false;
                        switch(e3.forEach((e4)=>{
                            if (e4.valueRange) {
                                if (1 === n3.length) {
                                    const t5 = "Document is not valid YAML (bad indentation?)";
                                    this.errors.push(new y.YAMLSyntaxError(e4, t5));
                                }
                                const t4 = this.resolveNode(e4);
                                r3 && (t4.spaceBefore = true, r3 = false), n3.push(t4);
                            } else if (null !== e4.comment) {
                                (0 === n3.length ? t3.before : t3.after).push(e4.comment);
                            } else e4.type === h.Type.BLANK_LINE && (r3 = true, 0 === n3.length && t3.before.length > 0 && !this.commentBefore && (this.commentBefore = t3.before.join("\n"), t3.before = []));
                        }), n3.length){
                            case 0:
                                this.contents = null, t3.after = t3.before;
                                break;
                            case 1:
                                if (this.contents = n3[0], this.contents) {
                                    const e4 = t3.before.join("\n") || null;
                                    if (e4) {
                                        const t4 = this.contents instanceof i2.default && this.contents.items[0] ? this.contents.items[0] : this.contents;
                                        t4.commentBefore = t4.commentBefore ? "".concat(e4, "\n").concat(t4.commentBefore) : e4;
                                    }
                                } else t3.after = t3.before.concat(t3.after);
                                break;
                            default:
                                this.contents = n3, this.contents[0] ? this.contents[0].commentBefore = t3.before.join("\n") || null : t3.after = t3.before.concat(t3.after);
                        }
                        this.comment = t3.after.join("\n") || null;
                    }
                    resolveTagDirective(e3) {
                        const [t3, n3] = e3.parameters;
                        if (t3 && n3) if (this.tagPrefixes.every((e4)=>e4.handle !== t3)) this.tagPrefixes.push({
                            handle: t3,
                            prefix: n3
                        });
                        else {
                            const t4 = "The %TAG directive must only be given at most once per handle in the same document.";
                            this.errors.push(new y.YAMLSemanticError(e3, t4));
                        }
                        else {
                            const t4 = "Insufficient parameters given for %TAG directive";
                            this.errors.push(new y.YAMLSemanticError(e3, t4));
                        }
                    }
                    resolveYamlDirective(e3) {
                        let [t3] = e3.parameters;
                        if ("YAML:1.0" === e3.name && (t3 = "1.0"), this.version) {
                            const t4 = "The %YAML directive must only be given at most once per document.";
                            this.errors.push(new y.YAMLSemanticError(e3, t4));
                        }
                        if (t3) {
                            if (!p2.defaults[t3]) {
                                const n3 = this.version || this.options.version, r3 = "Document will be parsed as YAML ".concat(n3, " rather than YAML ").concat(t3);
                                this.warnings.push(new y.YAMLWarning(e3, r3));
                            }
                            this.version = t3;
                        } else {
                            const t4 = "Insufficient parameters given for %YAML directive";
                            this.errors.push(new y.YAMLSemanticError(e3, t4));
                        }
                    }
                    resolveTagName(e3) {
                        const { tag: t3 , type: n3  } = e3;
                        let r3 = false;
                        if (t3) {
                            const { handle: n4 , suffix: o3 , verbatim: a4  } = t3;
                            if (a4) {
                                if ("!" !== a4 && "!!" !== a4) return a4;
                                const t4 = "Verbatim tags aren't resolved, so ".concat(a4, " is invalid.");
                                this.errors.push(new y.YAMLSemanticError(e3, t4));
                            } else if ("!" !== n4 || o3) {
                                let t4 = this.tagPrefixes.find((e4)=>e4.handle === n4);
                                if (!t4) {
                                    const e4 = this.getDefaults().tagPrefixes;
                                    e4 && (t4 = e4.find((e5)=>e5.handle === n4));
                                }
                                if (t4) {
                                    if (o3) {
                                        if ("!" === n4 && "1.0" === (this.version || this.options.version)) {
                                            if ("^" === o3[0]) return o3;
                                            if (/[:/]/.test(o3)) {
                                                const e4 = o3.match(/^([a-z0-9-]+)\/(.*)/i);
                                                return e4 ? "tag:".concat(e4[1], ".yaml.org,2002:").concat(e4[2]) : "tag:".concat(o3);
                                            }
                                        }
                                        return t4.prefix + decodeURIComponent(o3);
                                    }
                                    this.errors.push(new y.YAMLSemanticError(e3, "The ".concat(n4, " tag has no suffix.")));
                                } else {
                                    const t5 = "The ".concat(n4, " tag handle is non-default and was not declared.");
                                    this.errors.push(new y.YAMLSemanticError(e3, t5));
                                }
                            } else r3 = true;
                        }
                        switch(n3){
                            case h.Type.BLOCK_FOLDED:
                            case h.Type.BLOCK_LITERAL:
                            case h.Type.QUOTE_DOUBLE:
                            case h.Type.QUOTE_SINGLE:
                                return a3.default.defaultTags.STR;
                            case h.Type.FLOW_MAP:
                            case h.Type.MAP:
                                return a3.default.defaultTags.MAP;
                            case h.Type.FLOW_SEQ:
                            case h.Type.SEQ:
                                return a3.default.defaultTags.SEQ;
                            case h.Type.PLAIN:
                                return r3 ? a3.default.defaultTags.STR : null;
                            default:
                                return null;
                        }
                    }
                    resolveNode(e3) {
                        if (!e3) return null;
                        const { anchors: t3 , errors: n3 , schema: r3  } = this;
                        let o3 = false, a4 = false;
                        const i3 = {
                            before: [],
                            after: []
                        }, c3 = ((e4)=>e4 && [
                                h.Type.MAP_KEY,
                                h.Type.MAP_VALUE,
                                h.Type.SEQ_ITEM
                            ].includes(e4.type))(e3.context.parent) ? e3.context.parent.props.concat(e3.props) : e3.props;
                        for (const { start: t4 , end: r4  } of c3)switch(e3.context.src[t4]){
                            case h.Char.COMMENT:
                                {
                                    if (!e3.commentHasRequiredWhitespace(t4)) {
                                        const t5 = "Comments must be separated from other tokens by white space characters";
                                        n3.push(new y.YAMLSemanticError(e3, t5));
                                    }
                                    const o4 = e3.context.src.slice(t4 + 1, r4), { header: a5 , valueRange: s3  } = e3;
                                    s3 && (t4 > s3.start || a5 && t4 > a5.start) ? i3.after.push(o4) : i3.before.push(o4);
                                }
                                break;
                            case h.Char.ANCHOR:
                                if (o3) {
                                    const t5 = "A node can have at most one anchor";
                                    n3.push(new y.YAMLSemanticError(e3, t5));
                                }
                                o3 = true;
                                break;
                            case h.Char.TAG:
                                if (a4) {
                                    const t5 = "A node can have at most one tag";
                                    n3.push(new y.YAMLSemanticError(e3, t5));
                                }
                                a4 = true;
                        }
                        if (o3) {
                            const n4 = e3.anchor, r4 = t3.getNode(n4);
                            r4 && (t3.map[t3.newName(n4)] = r4), t3.map[n4] = e3;
                        }
                        let u3;
                        if (e3.type === h.Type.ALIAS) {
                            if (o3 || a4) {
                                const t4 = "An alias node must not specify any properties";
                                n3.push(new y.YAMLSemanticError(e3, t4));
                            }
                            const r4 = e3.rawValue, i4 = t3.getNode(r4);
                            if (!i4) {
                                const t4 = "Aliased anchor not found: ".concat(r4);
                                return n3.push(new y.YAMLReferenceError(e3, t4)), null;
                            }
                            u3 = new s2.default(i4), t3._cstAliases.push(u3);
                        } else {
                            const t4 = this.resolveTagName(e3);
                            if (t4) u3 = r3.resolveNodeWithFallback(this, e3, t4);
                            else {
                                if (e3.type !== h.Type.PLAIN) {
                                    const t5 = "Failed to resolve ".concat(e3.type, " node here");
                                    return n3.push(new y.YAMLSyntaxError(e3, t5)), null;
                                }
                                try {
                                    u3 = r3.resolveScalar(e3.strValue || "");
                                } catch (t5) {
                                    return t5.source || (t5.source = e3), n3.push(t5), null;
                                }
                            }
                        }
                        if (u3) {
                            u3.range = [
                                e3.range.start,
                                e3.range.end
                            ], this.options.keepCstNodes && (u3.cstNode = e3), this.options.keepNodeTypes && (u3.type = e3.type);
                            const t4 = i3.before.join("\n");
                            t4 && (u3.commentBefore = u3.commentBefore ? "".concat(u3.commentBefore, "\n").concat(t4) : t4);
                            const n4 = i3.after.join("\n");
                            n4 && (u3.comment = u3.comment ? "".concat(u3.comment, "\n").concat(n4) : n4);
                        }
                        return e3.resolved = u3;
                    }
                    listNonDefaultTags() {
                        return (0, o2.default)(this.contents).filter((e3)=>0 !== e3.indexOf(a3.default.defaultPrefix));
                    }
                    setTagPrefix(e3, t3) {
                        if ("!" !== e3[0] || "!" !== e3[e3.length - 1]) throw new Error("Handle must start and end with !");
                        if (t3) {
                            const n3 = this.tagPrefixes.find((t4)=>t4.handle === e3);
                            n3 ? n3.prefix = t3 : this.tagPrefixes.push({
                                handle: e3,
                                prefix: t3
                            });
                        } else this.tagPrefixes = this.tagPrefixes.filter((t4)=>t4.handle !== e3);
                    }
                    stringifyTag(e3) {
                        if ("1.0" === (this.version || this.options.version)) {
                            const t3 = e3.match(/^tag:private\.yaml\.org,2002:([^:/]+)$/);
                            if (t3) return "!" + t3[1];
                            const n3 = e3.match(/^tag:([a-zA-Z0-9-]+)\.yaml\.org,2002:(.*)/);
                            return n3 ? "!".concat(n3[1], "/").concat(n3[2]) : "!".concat(e3.replace(/^tag:/, ""));
                        }
                        {
                            let t3 = this.tagPrefixes.find((t4)=>0 === e3.indexOf(t4.prefix));
                            if (!t3) {
                                const n4 = this.getDefaults().tagPrefixes;
                                t3 = n4 && n4.find((t4)=>0 === e3.indexOf(t4.prefix));
                            }
                            if (!t3) return "!" === e3[0] ? e3 : "!<".concat(e3, ">");
                            const n3 = e3.substr(t3.prefix.length).replace(/[!,[\]{}]/g, (e4)=>({
                                    "!": "%21",
                                    ",": "%2C",
                                    "[": "%5B",
                                    "]": "%5D",
                                    "{": "%7B",
                                    "}": "%7D"
                                })[e4]);
                            return t3.handle + n3;
                        }
                    }
                    toJSON(e3) {
                        const { keepBlobsInJSON: t3 , mapAsMap: n3 , maxAliasCount: r3  } = this.options, o3 = t3 && ("string" != typeof e3 || !(this.contents instanceof u2.default)), a4 = {
                            doc: this,
                            keep: o3,
                            mapAsMap: o3 && !!n3,
                            maxAliasCount: r3
                        }, s3 = Object.keys(this.anchors.map);
                        return s3.length > 0 && (a4.anchors = s3.map((e4)=>({
                                alias: [],
                                aliasCount: 0,
                                count: 1,
                                node: this.anchors.map[e4]
                            }))), (0, l2.default)(this.contents, e3, a4);
                    }
                    toString() {
                        if (this.errors.length > 0) throw new Error("Document with errors cannot be stringified");
                        this.setSchema();
                        const e3 = [];
                        let t3 = false;
                        if (this.version) {
                            let n3 = "%YAML 1.2";
                            "yaml-1.1" === this.schema.name && ("1.0" === this.version ? n3 = "%YAML:1.0" : "1.1" === this.version && (n3 = "%YAML 1.1")), e3.push(n3), t3 = true;
                        }
                        const r3 = this.listNonDefaultTags();
                        this.tagPrefixes.forEach(({ handle: n3 , prefix: o4  })=>{
                            r3.some((e4)=>0 === e4.indexOf(o4)) && (e3.push("%TAG ".concat(n3, " ").concat(o4)), t3 = true);
                        }), (t3 || this.directivesEndMarker) && e3.push("---"), this.commentBefore && (!t3 && this.directivesEndMarker || e3.unshift(""), e3.unshift(this.commentBefore.replace(/^/gm, "#")));
                        const o3 = {
                            anchors: {},
                            doc: this,
                            indent: ""
                        };
                        let a4 = false, s3 = null;
                        if (this.contents) {
                            this.contents instanceof c2.default && (this.contents.spaceBefore && (t3 || this.directivesEndMarker) && e3.push(""), this.contents.commentBefore && e3.push(this.contents.commentBefore.replace(/^/gm, "#")), o3.forceBlockIndent = !!this.comment, s3 = this.contents.comment);
                            const r4 = s3 ? null : ()=>a4 = true, i3 = this.schema.stringify(this.contents, o3, ()=>s3 = null, r4);
                            e3.push((0, n2.default)(i3, "", s3));
                        } else void 0 !== this.contents && e3.push(this.schema.stringify(this.contents, o3));
                        return this.comment && (a4 && !s3 || "" === e3[e3.length - 1] || e3.push(""), e3.push(this.comment.replace(/^/gm, "#"))), e3.join("\n") + "\n";
                    }
                    constructor(e3){
                        this.anchors = new r2.default(e3.anchorPrefix), this.commentBefore = null, this.comment = null, this.contents = null, this.directivesEndMarker = null, this.errors = [], this.options = e3, this.schema = null, this.tagPrefixes = [], this.version = null, this.warnings = [];
                    }
                }
                var g2, m2, v2;
                t2.default = p2, g2 = p2, m2 = "defaults", v2 = {
                    "1.0": {
                        schema: "yaml-1.1",
                        merge: true,
                        tagPrefixes: [
                            {
                                handle: "!",
                                prefix: a3.default.defaultPrefix
                            },
                            {
                                handle: "!!",
                                prefix: "tag:private.yaml.org,2002:"
                            }
                        ]
                    },
                    1.1: {
                        schema: "yaml-1.1",
                        merge: true,
                        tagPrefixes: [
                            {
                                handle: "!",
                                prefix: "!"
                            },
                            {
                                handle: "!!",
                                prefix: a3.default.defaultPrefix
                            }
                        ]
                    },
                    1.2: {
                        schema: "core",
                        merge: false,
                        tagPrefixes: [
                            {
                                handle: "!",
                                prefix: "!"
                            },
                            {
                                handle: "!!",
                                prefix: a3.default.defaultPrefix
                            }
                        ]
                    }
                }, m2 in g2 ? Object.defineProperty(g2, m2, {
                    value: v2,
                    enumerable: true,
                    configurable: true,
                    writable: true
                }) : g2[m2] = v2;
            });
            o(ct);
            var ut = a2(function(e2, t2) {
                Object.defineProperty(t2, "__esModule", {
                    value: true
                }), t2.default = void 0;
                var n2 = a3(N), r2 = a3(ct), o2 = a3(it);
                function a3(e3) {
                    return e3 && e3.__esModule ? e3 : {
                        default: e3
                    };
                }
                const s2 = {
                    anchorPrefix: "a",
                    customTags: null,
                    keepCstNodes: false,
                    keepNodeTypes: true,
                    keepBlobsInJSON: true,
                    mapAsMap: false,
                    maxAliasCount: 100,
                    prettyErrors: false,
                    simpleKeys: false,
                    version: "1.2"
                };
                class i2 extends r2.default {
                    constructor(e3){
                        super(Object.assign({}, s2, e3));
                    }
                }
                function c2(e3, t3) {
                    const r3 = (0, n2.default)(e3), o3 = new i2(t3).parse(r3[0]);
                    if (r3.length > 1) {
                        const e4 = "Source contains multiple documents; please use YAML.parseAllDocuments()";
                        o3.errors.unshift(new y.YAMLSemanticError(r3[1], e4));
                    }
                    return o3;
                }
                var u2 = {
                    createNode: function(e3, t3 = true, n3) {
                        void 0 === n3 && "string" == typeof t3 && (n3 = t3, t3 = true);
                        const a4 = Object.assign({}, r2.default.defaults[s2.version], s2);
                        return new o2.default(a4).createNode(e3, t3, n3);
                    },
                    defaultOptions: s2,
                    Document: i2,
                    parse: function(e3, t3) {
                        const n3 = c2(e3, t3);
                        if (n3.warnings.forEach((e4)=>(0, Q.warn)(e4)), n3.errors.length > 0) throw n3.errors[0];
                        return n3.toJSON();
                    },
                    parseAllDocuments: function(e3, t3) {
                        const r3 = [];
                        let o3;
                        for (const a4 of (0, n2.default)(e3)){
                            const e4 = new i2(t3);
                            e4.parse(a4, o3), r3.push(e4), o3 = e4;
                        }
                        return r3;
                    },
                    parseCST: n2.default,
                    parseDocument: c2,
                    stringify: function(e3, t3) {
                        const n3 = new i2(t3);
                        return n3.contents = e3, String(n3);
                    }
                };
                t2.default = u2;
            });
            o(ut);
            var lt = ut.default, ft = a2(function(e2, t2) {
                t2.__esModule = true, t2.defineParents = function e3(t3, n2) {
                    void 0 === n2 && (n2 = null), "children" in t3 && t3.children.forEach(function(n3) {
                        return e3(n3, t3);
                    }), "anchor" in t3 && t3.anchor && e3(t3.anchor, t3), "tag" in t3 && t3.tag && e3(t3.tag, t3), "leadingComments" in t3 && t3.leadingComments.forEach(function(n3) {
                        return e3(n3, t3);
                    }), "middleComments" in t3 && t3.middleComments.forEach(function(n3) {
                        return e3(n3, t3);
                    }), "indicatorComment" in t3 && t3.indicatorComment && e3(t3.indicatorComment, t3), "trailingComment" in t3 && t3.trailingComment && e3(t3.trailingComment, t3), "endComments" in t3 && t3.endComments.forEach(function(n3) {
                        return e3(n3, t3);
                    }), Object.defineProperty(t3, "_parent", {
                        value: n2,
                        enumerable: false
                    });
                };
            });
            o(ft);
            ft.defineParents;
            var dt = a2(function(e2, t2) {
                t2.__esModule = true, t2.getPointText = function(e3) {
                    return e3.line + ":" + e3.column;
                };
            });
            o(dt);
            dt.getPointText;
            var ht = a2(function(e2, t2) {
                function n2(e3, t3) {
                    if (t3.position.end.offset < e3.position.end.offset) return false;
                    switch(e3.type){
                        case "sequenceItem":
                            return t3.position.start.column > e3.position.start.column;
                        case "mappingKey":
                        case "mappingValue":
                            return t3.position.start.column > e3._parent.position.start.column && (0 === e3.children.length || 1 === e3.children.length && "blockFolded" !== e3.children[0].type && "blockLiteral" !== e3.children[0].type && ("mappingValue" === e3.type || e3.position.start.offset !== e3.children[0].position.start.offset));
                        default:
                            return false;
                    }
                }
                t2.__esModule = true, t2.attachComments = function(e3) {
                    ft.defineParents(e3);
                    var t3 = function(e4) {
                        for(var t4 = Array.from(new Array(e4.position.end.line), function() {
                            return {};
                        }), n3 = 0, r3 = e4.comments; n3 < r3.length; n3++){
                            var o2 = r3[n3];
                            t4[o2.position.start.line - 1].comment = o2;
                        }
                        return function e5(t5, n4) {
                            if (n4.position.start.offset === n4.position.end.offset) return;
                            if ("leadingComments" in n4) {
                                var r4 = n4.position.start, o3 = t5[r4.line - 1].leadingAttachableNode;
                                (!o3 || r4.column < o3.position.start.column) && (t5[r4.line - 1].leadingAttachableNode = n4);
                            }
                            if ("trailingComment" in n4 && n4.position.end.column > 1 && "document" !== n4.type && "documentHead" !== n4.type) {
                                var a3 = n4.position.end, s2 = t5[a3.line - 1].trailingAttachableNode;
                                (!s2 || a3.column >= s2.position.end.column) && (t5[a3.line - 1].trailingAttachableNode = n4);
                            }
                            if ("root" !== n4.type && "document" !== n4.type && "documentHead" !== n4.type && "documentBody" !== n4.type) for(var i2 = n4.position, c2 = (r4 = i2.start, [
                                (a3 = i2.end).line
                            ].concat(r4.line === a3.line ? [] : r4.line)), u2 = 0, l2 = c2; u2 < l2.length; u2++){
                                var f3 = l2[u2], d2 = t5[f3 - 1].trailingNode;
                                (!d2 || a3.column >= d2.position.end.column) && (t5[f3 - 1].trailingNode = n4);
                            }
                            "children" in n4 && n4.children.forEach(function(n5) {
                                e5(t5, n5);
                            });
                        }(t4, e4), t4;
                    }(e3), r2 = e3.children.slice();
                    e3.comments.sort(function(e4, t4) {
                        return e4.position.start.offset - t4.position.end.offset;
                    }).filter(function(e4) {
                        return !e4._parent;
                    }).forEach(function(e4) {
                        for(; r2.length > 1 && e4.position.start.line > r2[0].position.end.line;)r2.shift();
                        !function(e5, t4, r3) {
                            var o2 = e5.position.start.line, a3 = t4[o2 - 1].trailingAttachableNode;
                            if (a3) {
                                if (a3.trailingComment) throw new Error("Unexpected multiple trailing comment at " + dt.getPointText(e5.position.start));
                                return ft.defineParents(e5, a3), void (a3.trailingComment = e5);
                            }
                            for(var s2 = o2; s2 >= r3.position.start.line; s2--){
                                var i2 = t4[s2 - 1].trailingNode, c2 = void 0;
                                if (i2) c2 = i2;
                                else {
                                    if (s2 === o2 || !t4[s2 - 1].comment) continue;
                                    c2 = t4[s2 - 1].comment._parent;
                                }
                                for(;;){
                                    if (n2(c2, e5)) return ft.defineParents(e5, c2), void c2.endComments.push(e5);
                                    if (!c2._parent) break;
                                    c2 = c2._parent;
                                }
                                break;
                            }
                            for(s2 = o2 + 1; s2 <= r3.position.end.line; s2++){
                                var u2 = t4[s2 - 1].leadingAttachableNode;
                                if (u2) return ft.defineParents(e5, u2), void u2.leadingComments.push(e5);
                            }
                            var l2 = r3.children[1];
                            ft.defineParents(e5, l2), l2.endComments.push(e5);
                        }(e4, t3, r2[0]);
                    });
                };
            });
            o(ht);
            ht.attachComments;
            var pt = a2(function(e2, t2) {
                t2.__esModule = true, t2.createNode = function(e3, t3) {
                    return {
                        type: e3,
                        position: t3
                    };
                };
            });
            o(pt);
            pt.createNode;
            var gt, mt = (gt = f2) && gt.default || gt, yt = a2(function(e2, t2) {
                t2.__esModule = true, t2.createRoot = function(e3, t3, n2) {
                    return mt.__assign(mt.__assign({}, pt.createNode("root", e3)), {
                        children: t3,
                        comments: n2
                    });
                };
            });
            o(yt);
            yt.createRoot;
            var vt = a2(function(e2, t2) {
                t2.__esModule = true, t2.removeCstBlankLine = function e3(t3) {
                    switch(t3.type){
                        case "DOCUMENT":
                            for(var n2 = t3.contents.length - 1; n2 >= 0; n2--)"BLANK_LINE" === t3.contents[n2].type ? t3.contents.splice(n2, 1) : e3(t3.contents[n2]);
                            for(n2 = t3.directives.length - 1; n2 >= 0; n2--)"BLANK_LINE" === t3.directives[n2].type && t3.directives.splice(n2, 1);
                            break;
                        case "FLOW_MAP":
                        case "FLOW_SEQ":
                        case "MAP":
                        case "SEQ":
                            for(n2 = t3.items.length - 1; n2 >= 0; n2--){
                                var r2 = t3.items[n2];
                                "char" in r2 || ("BLANK_LINE" === r2.type ? t3.items.splice(n2, 1) : e3(r2));
                            }
                            break;
                        case "MAP_KEY":
                        case "MAP_VALUE":
                        case "SEQ_ITEM":
                            t3.node && e3(t3.node);
                            break;
                        case "ALIAS":
                        case "BLANK_LINE":
                        case "BLOCK_FOLDED":
                        case "BLOCK_LITERAL":
                        case "COMMENT":
                        case "DIRECTIVE":
                        case "PLAIN":
                        case "QUOTE_DOUBLE":
                        case "QUOTE_SINGLE":
                            break;
                        default:
                            throw new Error("Unexpected node type " + JSON.stringify(t3.type));
                    }
                };
            });
            o(vt);
            vt.removeCstBlankLine;
            var _t = a2(function(e2, t2) {
                t2.__esModule = true, t2.createLeadingCommentAttachable = function() {
                    return {
                        leadingComments: []
                    };
                };
            });
            o(_t);
            _t.createLeadingCommentAttachable;
            var bt = a2(function(e2, t2) {
                t2.__esModule = true, t2.createTrailingCommentAttachable = function(e3) {
                    return void 0 === e3 && (e3 = null), {
                        trailingComment: e3
                    };
                };
            });
            o(bt);
            bt.createTrailingCommentAttachable;
            var wt = a2(function(e2, t2) {
                t2.__esModule = true, t2.createCommentAttachable = function() {
                    return mt.__assign(mt.__assign({}, _t.createLeadingCommentAttachable()), bt.createTrailingCommentAttachable());
                };
            });
            o(wt);
            wt.createCommentAttachable;
            var Et = a2(function(e2, t2) {
                t2.__esModule = true, t2.createAlias = function(e3, t3, n2) {
                    return mt.__assign(mt.__assign(mt.__assign(mt.__assign({}, pt.createNode("alias", e3)), wt.createCommentAttachable()), t3), {
                        value: n2
                    });
                };
            });
            o(Et);
            Et.createAlias;
            var Ot = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformAlias = function(e3, t3) {
                    var n2 = e3.cstNode;
                    return Et.createAlias(t3.transformRange({
                        origStart: n2.valueRange.origStart - 1,
                        origEnd: n2.valueRange.origEnd
                    }), t3.transformContent(e3), n2.rawValue);
                };
            });
            o(Ot);
            Ot.transformAlias;
            var Mt = a2(function(e2, t2) {
                t2.__esModule = true, t2.createBlockFolded = function(e3) {
                    return mt.__assign(mt.__assign({}, e3), {
                        type: "blockFolded"
                    });
                };
            });
            o(Mt);
            Mt.createBlockFolded;
            var St = a2(function(e2, t2) {
                t2.__esModule = true, t2.createBlockValue = function(e3, t3, n2, r2, o2, a3) {
                    return mt.__assign(mt.__assign(mt.__assign(mt.__assign({}, pt.createNode("blockValue", e3)), _t.createLeadingCommentAttachable()), t3), {
                        chomping: n2,
                        indent: r2,
                        value: o2,
                        indicatorComment: a3
                    });
                };
            });
            o(St);
            St.createBlockValue;
            var At = a2(function(e2, t2) {
                t2.__esModule = true, function(e3) {
                    e3.Tag = "!", e3.Anchor = "&", e3.Comment = "#";
                }(t2.PropLeadingCharacter || (t2.PropLeadingCharacter = {}));
            });
            o(At);
            At.PropLeadingCharacter;
            var Lt = a2(function(e2, t2) {
                t2.__esModule = true, t2.createAnchor = function(e3, t3) {
                    return mt.__assign(mt.__assign({}, pt.createNode("anchor", e3)), {
                        value: t3
                    });
                };
            });
            o(Lt);
            Lt.createAnchor;
            var Tt = a2(function(e2, t2) {
                t2.__esModule = true, t2.createComment = function(e3, t3) {
                    return mt.__assign(mt.__assign({}, pt.createNode("comment", e3)), {
                        value: t3
                    });
                };
            });
            o(Tt);
            Tt.createComment;
            var Pt = a2(function(e2, t2) {
                t2.__esModule = true, t2.createContent = function(e3, t3, n2) {
                    return {
                        anchor: t3,
                        tag: e3,
                        middleComments: n2
                    };
                };
            });
            o(Pt);
            Pt.createContent;
            var Ct = a2(function(e2, t2) {
                t2.__esModule = true, t2.createTag = function(e3, t3) {
                    return mt.__assign(mt.__assign({}, pt.createNode("tag", e3)), {
                        value: t3
                    });
                };
            });
            o(Ct);
            Ct.createTag;
            var Nt = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformContent = function(e3, t3, n2) {
                    void 0 === n2 && (n2 = function() {
                        return false;
                    });
                    for(var r2 = e3.cstNode, o2 = [], a3 = null, s2 = null, i2 = null, c2 = 0, u2 = r2.props; c2 < u2.length; c2++){
                        var l2 = u2[c2], f3 = t3.text[l2.origStart];
                        switch(f3){
                            case At.PropLeadingCharacter.Tag:
                                a3 = a3 || l2, s2 = Ct.createTag(t3.transformRange(l2), e3.tag);
                                break;
                            case At.PropLeadingCharacter.Anchor:
                                a3 = a3 || l2, i2 = Lt.createAnchor(t3.transformRange(l2), r2.anchor);
                                break;
                            case At.PropLeadingCharacter.Comment:
                                var d2 = Tt.createComment(t3.transformRange(l2), t3.text.slice(l2.origStart + 1, l2.origEnd));
                                t3.comments.push(d2), !n2(d2) && a3 && a3.origEnd <= l2.origStart && l2.origEnd <= r2.valueRange.origStart && o2.push(d2);
                                break;
                            default:
                                throw new Error("Unexpected leading character " + JSON.stringify(f3));
                        }
                    }
                    return Pt.createContent(s2, i2, o2);
                };
            });
            o(Nt);
            Nt.transformContent;
            var xt = a2(function(e2, t2) {
                var n2;
                t2.__esModule = true, function(e3) {
                    e3.CLIP = "clip", e3.STRIP = "strip", e3.KEEP = "keep";
                }(n2 || (n2 = {})), t2.transformAstBlockValue = function(e3, t3) {
                    var r2 = e3.cstNode, o2 = "CLIP" === r2.chomping ? 0 : 1, a3 = r2.header.origEnd - r2.header.origStart - 1 - o2 != 0, s2 = t3.transformRange({
                        origStart: r2.header.origStart,
                        origEnd: r2.valueRange.origEnd
                    }), i2 = null, c2 = Nt.transformContent(e3, t3, function(e4) {
                        if (!(s2.start.offset < e4.position.start.offset && e4.position.end.offset < s2.end.offset)) return false;
                        if (i2) throw new Error("Unexpected multiple indicator comments at " + dt.getPointText(e4.position.start));
                        return i2 = e4, true;
                    });
                    return St.createBlockValue(s2, c2, n2[r2.chomping], a3 ? r2.blockIndent : null, r2.strValue, i2);
                };
            });
            o(xt);
            xt.transformAstBlockValue;
            var kt = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformBlockFolded = function(e3, t3) {
                    return Mt.createBlockFolded(xt.transformAstBlockValue(e3, t3));
                };
            });
            o(kt);
            kt.transformBlockFolded;
            var It = a2(function(e2, t2) {
                t2.__esModule = true, t2.createBlockLiteral = function(e3) {
                    return mt.__assign(mt.__assign({}, e3), {
                        type: "blockLiteral"
                    });
                };
            });
            o(It);
            It.createBlockLiteral;
            var Rt = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformBlockLiteral = function(e3, t3) {
                    return It.createBlockLiteral(xt.transformAstBlockValue(e3, t3));
                };
            });
            o(Rt);
            Rt.transformBlockLiteral;
            var jt = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformComment = function(e3, t3) {
                    return Tt.createComment(t3.transformRange(e3.range), e3.comment);
                };
            });
            o(jt);
            jt.transformComment;
            var Bt = a2(function(e2, t2) {
                t2.__esModule = true, t2.createDirective = function(e3, t3, n2) {
                    return mt.__assign(mt.__assign(mt.__assign({}, pt.createNode("directive", e3)), wt.createCommentAttachable()), {
                        name: t3,
                        parameters: n2
                    });
                };
            });
            o(Bt);
            Bt.createDirective;
            var Dt = a2(function(e2, t2) {
                t2.__esModule = true, t2.extractPropComments = function(e3, t3) {
                    for(var n2 = 0, r2 = e3.props; n2 < r2.length; n2++){
                        var o2 = r2[n2], a3 = t3.text[o2.origStart];
                        switch(a3){
                            case At.PropLeadingCharacter.Comment:
                                t3.comments.push(Tt.createComment(t3.transformRange(o2), t3.text.slice(o2.origStart + 1, o2.origEnd)));
                                break;
                            default:
                                throw new Error("Unexpected leading character " + JSON.stringify(a3));
                        }
                    }
                };
            });
            o(Dt);
            Dt.extractPropComments;
            var Yt = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformDirective = function(e3, t3) {
                    return Dt.extractPropComments(e3, t3), Bt.createDirective(t3.transformRange(e3.range), e3.name, e3.parameters);
                };
            });
            o(Yt);
            Yt.transformDirective;
            var Ft = a2(function(e2, t2) {
                t2.__esModule = true, t2.createDocument = function(e3, t3, n2, r2) {
                    return mt.__assign(mt.__assign(mt.__assign({}, pt.createNode("document", e3)), bt.createTrailingCommentAttachable(r2)), {
                        children: [
                            t3,
                            n2
                        ]
                    });
                };
            });
            o(Ft);
            Ft.createDocument;
            var Ut = a2(function(e2, t2) {
                t2.__esModule = true, t2.createPosition = function(e3, t3) {
                    return {
                        start: e3,
                        end: t3
                    };
                }, t2.createEmptyPosition = function(e3) {
                    return {
                        start: e3,
                        end: e3
                    };
                };
            });
            o(Ut);
            Ut.createPosition, Ut.createEmptyPosition;
            var Wt = a2(function(e2, t2) {
                t2.__esModule = true, t2.createEndCommentAttachable = function(e3) {
                    return void 0 === e3 && (e3 = []), {
                        endComments: e3
                    };
                };
            });
            o(Wt);
            Wt.createEndCommentAttachable;
            var Kt = a2(function(e2, t2) {
                t2.__esModule = true, t2.createDocumentBody = function(e3, t3, n2) {
                    return mt.__assign(mt.__assign(mt.__assign({}, pt.createNode("documentBody", e3)), Wt.createEndCommentAttachable(n2)), {
                        children: t3 ? [
                            t3
                        ] : []
                    });
                };
            });
            o(Kt);
            Kt.createDocumentBody;
            var Qt = a2(function(e2, t2) {
                t2.__esModule = true, t2.getLast = function(e3) {
                    return e3[e3.length - 1];
                };
            });
            o(Qt);
            Qt.getLast;
            var Vt = a2(function(e2, t2) {
                t2.__esModule = true, t2.getMatchIndex = function(e3, t3) {
                    var n2 = e3.match(t3);
                    return n2 ? n2.index : -1;
                };
            });
            o(Vt);
            Vt.getMatchIndex;
            var qt = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformDocumentBody = function(e3, t3, n2) {
                    var r2, o2 = e3.cstNode, a3 = function(e4, t4, n3) {
                        for(var r3 = [], o3 = [], a4 = [], s3 = false, i3 = e4.contents.length - 1; i3 >= 0; i3--){
                            var c3 = e4.contents[i3];
                            if ("COMMENT" === c3.type) {
                                var u3 = t4.transformNode(c3);
                                n3 && n3.line === u3.position.start.line ? a4.unshift(u3) : s3 ? r3.unshift(u3) : u3.position.start.offset >= e4.valueRange.origEnd ? o3.unshift(u3) : r3.unshift(u3);
                            } else s3 = true;
                        }
                        if (o3.length > 1) throw new Error("Unexpected multiple document trailing comments at " + dt.getPointText(o3[1].position.start));
                        if (a4.length > 1) throw new Error("Unexpected multiple documentHead trailing comments at " + dt.getPointText(a4[1].position.start));
                        return {
                            comments: r3,
                            endComments: [],
                            documentTrailingComment: Qt.getLast(o3) || null,
                            documentHeadTrailingComment: Qt.getLast(a4) || null
                        };
                    }(o2, t3, n2), s2 = a3.comments, i2 = a3.endComments, c2 = a3.documentTrailingComment, u2 = a3.documentHeadTrailingComment, l2 = t3.transformNode(e3.contents), f3 = function(e4, t4, n3) {
                        var r3 = Vt.getMatchIndex(n3.text.slice(e4.valueRange.origEnd), /^\.\.\./), o3 = -1 === r3 ? e4.valueRange.origEnd : Math.max(0, e4.valueRange.origEnd - 1);
                        "\r" === n3.text[o3 - 1] && o3--;
                        var a4 = n3.transformRange({
                            origStart: null !== t4 ? t4.position.start.offset : o3,
                            origEnd: o3
                        }), s3 = -1 === r3 ? a4.end : n3.transformOffset(e4.valueRange.origEnd + 3);
                        return {
                            position: a4,
                            documentEndPoint: s3
                        };
                    }(o2, l2, t3), d2 = f3.position, h2 = f3.documentEndPoint;
                    return (r2 = t3.comments).push.apply(r2, mt.__spreadArrays(s2, i2)), {
                        documentBody: Kt.createDocumentBody(d2, l2, i2),
                        documentEndPoint: h2,
                        documentTrailingComment: c2,
                        documentHeadTrailingComment: u2
                    };
                };
            });
            o(qt);
            qt.transformDocumentBody;
            var $t = a2(function(e2, t2) {
                t2.__esModule = true, t2.createDocumentHead = function(e3, t3, n2, r2) {
                    return mt.__assign(mt.__assign(mt.__assign(mt.__assign({}, pt.createNode("documentHead", e3)), Wt.createEndCommentAttachable(n2)), bt.createTrailingCommentAttachable(r2)), {
                        children: t3
                    });
                };
            });
            o($t);
            $t.createDocumentHead;
            var Jt = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformDocumentHead = function(e3, t3) {
                    var n2, r2 = e3.cstNode, o2 = function(e4, t4) {
                        for(var n3 = [], r3 = [], o3 = [], a4 = false, s3 = e4.directives.length - 1; s3 >= 0; s3--){
                            var i3 = t4.transformNode(e4.directives[s3]);
                            "comment" === i3.type ? a4 ? r3.unshift(i3) : o3.unshift(i3) : (a4 = true, n3.unshift(i3));
                        }
                        return {
                            directives: n3,
                            comments: r3,
                            endComments: o3
                        };
                    }(r2, t3), a3 = o2.directives, s2 = o2.comments, i2 = o2.endComments, c2 = function(e4, t4, n3) {
                        var r3 = Vt.getMatchIndex(n3.text.slice(0, e4.valueRange.origStart), /---\s*$/), o3 = -1 === r3 ? {
                            origStart: e4.valueRange.origStart,
                            origEnd: e4.valueRange.origStart
                        } : {
                            origStart: r3,
                            origEnd: r3 + 3
                        };
                        0 !== t4.length && (o3.origStart = t4[0].position.start.offset);
                        return {
                            position: n3.transformRange(o3),
                            endMarkerPoint: -1 === r3 ? null : n3.transformOffset(r3)
                        };
                    }(r2, a3, t3), u2 = c2.position, l2 = c2.endMarkerPoint;
                    return (n2 = t3.comments).push.apply(n2, mt.__spreadArrays(s2, i2)), {
                        createDocumentHeadWithTrailingComment: function(e4) {
                            return e4 && t3.comments.push(e4), $t.createDocumentHead(u2, a3, i2, e4);
                        },
                        documentHeadEndMarkerPoint: l2
                    };
                };
            });
            o(Jt);
            Jt.transformDocumentHead;
            var Ht = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformDocument = function(e3, t3) {
                    var n2 = Jt.transformDocumentHead(e3, t3), r2 = n2.createDocumentHeadWithTrailingComment, o2 = n2.documentHeadEndMarkerPoint, a3 = qt.transformDocumentBody(e3, t3, o2), s2 = a3.documentBody, i2 = a3.documentEndPoint, c2 = a3.documentTrailingComment, u2 = r2(a3.documentHeadTrailingComment);
                    return c2 && t3.comments.push(c2), Ft.createDocument(Ut.createPosition(u2.position.start, i2), u2, s2, c2);
                };
            });
            o(Ht);
            Ht.transformDocument;
            var Gt = a2(function(e2, t2) {
                t2.__esModule = true, t2.createFlowCollection = function(e3, t3, n2) {
                    return mt.__assign(mt.__assign(mt.__assign(mt.__assign({}, pt.createNode("flowCollection", e3)), wt.createCommentAttachable()), t3), {
                        children: n2
                    });
                };
            });
            o(Gt);
            Gt.createFlowCollection;
            var zt = a2(function(e2, t2) {
                t2.__esModule = true, t2.createFlowMapping = function(e3, t3, n2) {
                    return mt.__assign(mt.__assign({}, Gt.createFlowCollection(e3, t3, n2)), {
                        type: "flowMapping"
                    });
                };
            });
            o(zt);
            zt.createFlowMapping;
            var Zt = a2(function(e2, t2) {
                t2.__esModule = true, t2.createFlowMappingItem = function(e3, t3, n2) {
                    return mt.__assign(mt.__assign(mt.__assign({}, pt.createNode("flowMappingItem", e3)), _t.createLeadingCommentAttachable()), {
                        children: [
                            t3,
                            n2
                        ]
                    });
                };
            });
            o(Zt);
            Zt.createFlowMappingItem;
            var Xt = a2(function(e2, t2) {
                t2.__esModule = true, t2.extractComments = function(e3, t3) {
                    for(var n2 = [], r2 = 0, o2 = e3; r2 < o2.length; r2++){
                        var a3 = o2[r2];
                        a3 && "type" in a3 && "COMMENT" === a3.type ? t3.comments.push(t3.transformNode(a3)) : n2.push(a3);
                    }
                    return n2;
                };
            });
            o(Xt);
            Xt.extractComments;
            var en = a2(function(e2, t2) {
                t2.__esModule = true, t2.getFlowMapItemAdditionalRanges = function(e3) {
                    var t3 = [
                        "?",
                        ":"
                    ].map(function(t4) {
                        var n2 = e3.find(function(e4) {
                            return "char" in e4 && e4.char === t4;
                        });
                        return n2 ? {
                            origStart: n2.origOffset,
                            origEnd: n2.origOffset + 1
                        } : null;
                    });
                    return {
                        additionalKeyRange: t3[0],
                        additionalValueRange: t3[1]
                    };
                };
            });
            o(en);
            en.getFlowMapItemAdditionalRanges;
            var tn = a2(function(e2, t2) {
                t2.__esModule = true, t2.createSlicer = function(e3, t3) {
                    var n2 = t3;
                    return function(t4) {
                        return e3.slice(n2, n2 = t4);
                    };
                };
            });
            o(tn);
            tn.createSlicer;
            var nn = a2(function(e2, t2) {
                t2.__esModule = true, t2.groupCstFlowCollectionItems = function(e3) {
                    for(var t3 = [], n2 = tn.createSlicer(e3, 1), r2 = false, o2 = 1; o2 < e3.length - 1; o2++){
                        var a3 = e3[o2];
                        "char" in a3 && "," === a3.char ? (t3.push(n2(o2)), n2(o2 + 1), r2 = false) : r2 = true;
                    }
                    return r2 && t3.push(n2(e3.length - 1)), t3;
                };
            });
            o(nn);
            nn.groupCstFlowCollectionItems;
            var rn = a2(function(e2, t2) {
                t2.__esModule = true, t2.createMappingKey = function(e3, t3) {
                    return mt.__assign(mt.__assign(mt.__assign(mt.__assign({}, pt.createNode("mappingKey", e3)), bt.createTrailingCommentAttachable()), Wt.createEndCommentAttachable()), {
                        children: t3 ? [
                            t3
                        ] : []
                    });
                };
            });
            o(rn);
            rn.createMappingKey;
            var on = a2(function(e2, t2) {
                t2.__esModule = true, t2.createMappingValue = function(e3, t3) {
                    return mt.__assign(mt.__assign(mt.__assign(mt.__assign({}, pt.createNode("mappingValue", e3)), wt.createCommentAttachable()), Wt.createEndCommentAttachable()), {
                        children: t3 ? [
                            t3
                        ] : []
                    });
                };
            });
            o(on);
            on.createMappingValue;
            var an = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformAstPair = function(e3, t3, n2, r2, o2) {
                    var a3 = t3.transformNode(e3.key), s2 = t3.transformNode("MERGE_PAIR" === e3.type ? e3.value.type ? e3.value : e3.value.items[0] : e3.value), i2 = a3 || r2 ? rn.createMappingKey(t3.transformRange({
                        origStart: r2 ? r2.origStart : a3.position.start.offset,
                        origEnd: a3 ? a3.position.end.offset : r2.origStart + 1
                    }), a3) : null, c2 = s2 || o2 ? on.createMappingValue(t3.transformRange({
                        origStart: o2 ? o2.origStart : s2.position.start.offset,
                        origEnd: s2 ? s2.position.end.offset : o2.origStart + 1
                    }), s2) : null;
                    return n2(Ut.createPosition(i2 ? i2.position.start : c2.position.start, c2 ? c2.position.end : i2.position.end), i2 || rn.createMappingKey(Ut.createEmptyPosition(c2.position.start), null), c2 || on.createMappingValue(Ut.createEmptyPosition(i2.position.end), null));
                };
            });
            o(an);
            an.transformAstPair;
            var sn = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformFlowMap = function(e3, t3) {
                    var n2 = Xt.extractComments(e3.cstNode.items, t3), r2 = nn.groupCstFlowCollectionItems(n2), o2 = e3.items.map(function(e4, n3) {
                        var o3 = r2[n3], a4 = en.getFlowMapItemAdditionalRanges(o3), s3 = a4.additionalKeyRange, i2 = a4.additionalValueRange;
                        return an.transformAstPair(e4, t3, Zt.createFlowMappingItem, s3, i2);
                    }), a3 = n2[0], s2 = Qt.getLast(n2);
                    return zt.createFlowMapping(t3.transformRange({
                        origStart: a3.origOffset,
                        origEnd: s2.origOffset + 1
                    }), t3.transformContent(e3), o2);
                };
            });
            o(sn);
            sn.transformFlowMap;
            var cn = a2(function(e2, t2) {
                t2.__esModule = true, t2.createFlowSequence = function(e3, t3, n2) {
                    return mt.__assign(mt.__assign({}, Gt.createFlowCollection(e3, t3, n2)), {
                        type: "flowSequence"
                    });
                };
            });
            o(cn);
            cn.createFlowSequence;
            var un = a2(function(e2, t2) {
                t2.__esModule = true, t2.createFlowSequenceItem = function(e3, t3) {
                    return mt.__assign(mt.__assign({}, pt.createNode("flowSequenceItem", e3)), {
                        children: [
                            t3
                        ]
                    });
                };
            });
            o(un);
            un.createFlowSequenceItem;
            var ln = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformFlowSeq = function(e3, t3) {
                    var n2 = Xt.extractComments(e3.cstNode.items, t3), r2 = nn.groupCstFlowCollectionItems(n2), o2 = e3.items.map(function(e4, n3) {
                        if ("PAIR" !== e4.type) {
                            var o3 = t3.transformNode(e4);
                            return un.createFlowSequenceItem(Ut.createPosition(o3.position.start, o3.position.end), o3);
                        }
                        var a4 = r2[n3], s3 = en.getFlowMapItemAdditionalRanges(a4), i2 = s3.additionalKeyRange, c2 = s3.additionalValueRange;
                        return an.transformAstPair(e4, t3, Zt.createFlowMappingItem, i2, c2);
                    }), a3 = n2[0], s2 = Qt.getLast(n2);
                    return cn.createFlowSequence(t3.transformRange({
                        origStart: a3.origOffset,
                        origEnd: s2.origOffset + 1
                    }), t3.transformContent(e3), o2);
                };
            });
            o(ln);
            ln.transformFlowSeq;
            var fn = a2(function(e2, t2) {
                t2.__esModule = true, t2.createMapping = function(e3, t3, n2) {
                    return mt.__assign(mt.__assign(mt.__assign(mt.__assign({}, pt.createNode("mapping", e3)), _t.createLeadingCommentAttachable()), t3), {
                        children: n2
                    });
                };
            });
            o(fn);
            fn.createMapping;
            var dn = a2(function(e2, t2) {
                t2.__esModule = true, t2.createMappingItem = function(e3, t3, n2) {
                    return mt.__assign(mt.__assign(mt.__assign({}, pt.createNode("mappingItem", e3)), _t.createLeadingCommentAttachable()), {
                        children: [
                            t3,
                            n2
                        ]
                    });
                };
            });
            o(dn);
            dn.createMappingItem;
            var hn = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformMap = function(e3, t3) {
                    var n2 = e3.cstNode;
                    n2.items.filter(function(e4) {
                        return "MAP_KEY" === e4.type || "MAP_VALUE" === e4.type;
                    }).forEach(function(e4) {
                        return Dt.extractPropComments(e4, t3);
                    });
                    var r2 = function(e4) {
                        for(var t4 = [], n3 = tn.createSlicer(e4, 0), r3 = false, o3 = 0; o3 < e4.length; o3++){
                            "MAP_VALUE" !== e4[o3].type ? (r3 && t4.push(n3(o3)), r3 = true) : (t4.push(n3(o3 + 1)), r3 = false);
                        }
                        r3 && t4.push(n3(1 / 0));
                        return t4;
                    }(Xt.extractComments(n2.items, t3)), o2 = e3.items.map(function(e4, n3) {
                        var o3 = r2[n3], a3 = "MAP_VALUE" === o3[0].type ? [
                            null,
                            o3[0].range
                        ] : [
                            o3[0].range,
                            1 === o3.length ? null : o3[1].range
                        ], s2 = a3[0], i2 = a3[1];
                        return an.transformAstPair(e4, t3, dn.createMappingItem, s2, i2);
                    });
                    return fn.createMapping(Ut.createPosition(o2[0].position.start, Qt.getLast(o2).position.end), t3.transformContent(e3), o2);
                };
            });
            o(hn);
            hn.transformMap;
            var pn = a2(function(e2, t2) {
                t2.__esModule = true, t2.createPlain = function(e3, t3, n2) {
                    return mt.__assign(mt.__assign(mt.__assign(mt.__assign({}, pt.createNode("plain", e3)), wt.createCommentAttachable()), t3), {
                        value: n2
                    });
                };
            });
            o(pn);
            pn.createPlain;
            var gn = a2(function(e2, t2) {
                t2.__esModule = true, t2.findLastCharIndex = function(e3, t3, n2) {
                    for(var r2 = t3; r2 >= 0; r2--)if (n2.test(e3[r2])) return r2;
                    return -1;
                };
            });
            o(gn);
            gn.findLastCharIndex;
            var mn = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformPlain = function(e3, t3) {
                    var n2 = e3.cstNode;
                    return pn.createPlain(t3.transformRange({
                        origStart: n2.valueRange.origStart,
                        origEnd: gn.findLastCharIndex(t3.text, n2.valueRange.origEnd - 1, /\S/) + 1
                    }), t3.transformContent(e3), n2.strValue);
                };
            });
            o(mn);
            mn.transformPlain;
            var yn = a2(function(e2, t2) {
                t2.__esModule = true, t2.createQuoteDouble = function(e3) {
                    return mt.__assign(mt.__assign({}, e3), {
                        type: "quoteDouble"
                    });
                };
            });
            o(yn);
            yn.createQuoteDouble;
            var vn = a2(function(e2, t2) {
                t2.__esModule = true, t2.createQuoteValue = function(e3, t3, n2) {
                    return mt.__assign(mt.__assign(mt.__assign(mt.__assign({}, pt.createNode("quoteValue", e3)), t3), wt.createCommentAttachable()), {
                        value: n2
                    });
                };
            });
            o(vn);
            vn.createQuoteValue;
            var _n = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformAstQuoteValue = function(e3, t3) {
                    var n2 = e3.cstNode;
                    return vn.createQuoteValue(t3.transformRange(n2.valueRange), t3.transformContent(e3), n2.strValue);
                };
            });
            o(_n);
            _n.transformAstQuoteValue;
            var bn = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformQuoteDouble = function(e3, t3) {
                    return yn.createQuoteDouble(_n.transformAstQuoteValue(e3, t3));
                };
            });
            o(bn);
            bn.transformQuoteDouble;
            var wn = a2(function(e2, t2) {
                t2.__esModule = true, t2.createQuoteSingle = function(e3) {
                    return mt.__assign(mt.__assign({}, e3), {
                        type: "quoteSingle"
                    });
                };
            });
            o(wn);
            wn.createQuoteSingle;
            var En = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformQuoteSingle = function(e3, t3) {
                    return wn.createQuoteSingle(_n.transformAstQuoteValue(e3, t3));
                };
            });
            o(En);
            En.transformQuoteSingle;
            var On = a2(function(e2, t2) {
                t2.__esModule = true, t2.createSequence = function(e3, t3, n2) {
                    return mt.__assign(mt.__assign(mt.__assign(mt.__assign(mt.__assign({}, pt.createNode("sequence", e3)), _t.createLeadingCommentAttachable()), Wt.createEndCommentAttachable()), t3), {
                        children: n2
                    });
                };
            });
            o(On);
            On.createSequence;
            var Mn = a2(function(e2, t2) {
                t2.__esModule = true, t2.createSequenceItem = function(e3, t3) {
                    return mt.__assign(mt.__assign(mt.__assign(mt.__assign({}, pt.createNode("sequenceItem", e3)), wt.createCommentAttachable()), Wt.createEndCommentAttachable()), {
                        children: t3 ? [
                            t3
                        ] : []
                    });
                };
            });
            o(Mn);
            Mn.createSequenceItem;
            var Sn = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformSeq = function(e3, t3) {
                    var n2 = Xt.extractComments(e3.cstNode.items, t3).map(function(n3, r2) {
                        Dt.extractPropComments(n3, t3);
                        var o2 = t3.transformNode(e3.items[r2]);
                        return Mn.createSequenceItem(Ut.createPosition(t3.transformOffset(n3.valueRange.origStart), null === o2 ? t3.transformOffset(n3.valueRange.origStart + 1) : o2.position.end), o2);
                    });
                    return On.createSequence(Ut.createPosition(n2[0].position.start, Qt.getLast(n2).position.end), t3.transformContent(e3), n2);
                };
            });
            o(Sn);
            Sn.transformSeq;
            var An = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformNode = function(e3, t3) {
                    if (null === e3) return null;
                    switch(e3.type){
                        case "ALIAS":
                            return Ot.transformAlias(e3, t3);
                        case "BLOCK_FOLDED":
                            return kt.transformBlockFolded(e3, t3);
                        case "BLOCK_LITERAL":
                            return Rt.transformBlockLiteral(e3, t3);
                        case "COMMENT":
                            return jt.transformComment(e3, t3);
                        case "DIRECTIVE":
                            return Yt.transformDirective(e3, t3);
                        case "DOCUMENT":
                            return Ht.transformDocument(e3, t3);
                        case "FLOW_MAP":
                            return sn.transformFlowMap(e3, t3);
                        case "FLOW_SEQ":
                            return ln.transformFlowSeq(e3, t3);
                        case "MAP":
                            return hn.transformMap(e3, t3);
                        case "PLAIN":
                            return mn.transformPlain(e3, t3);
                        case "QUOTE_DOUBLE":
                            return bn.transformQuoteDouble(e3, t3);
                        case "QUOTE_SINGLE":
                            return En.transformQuoteSingle(e3, t3);
                        case "SEQ":
                            return Sn.transformSeq(e3, t3);
                        default:
                            throw new Error("Unexpected node type " + e3.type);
                    }
                };
            });
            o(An);
            An.transformNode;
            var Ln = a2(function(e2, t2) {
                t2.__esModule = true, t2.createError = function(e3, t3, n2) {
                    var r2 = new SyntaxError(e3);
                    return r2.name = "YAMLSyntaxError", r2.source = t3, r2.position = n2, r2;
                };
            });
            o(Ln);
            Ln.createError;
            var Tn = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformError = function(e3, t3) {
                    var n2 = e3.source.range || e3.source.valueRange;
                    return Ln.createError(e3.message, t3.text, t3.transformRange(n2));
                };
            });
            o(Tn);
            Tn.transformError;
            var Pn = a2(function(e2, t2) {
                t2.__esModule = true, t2.createPoint = function(e3, t3, n2) {
                    return {
                        offset: e3,
                        line: t3,
                        column: n2
                    };
                };
            });
            o(Pn);
            Pn.createPoint;
            var Cn = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformOffset = function(e3, t3) {
                    e3 < 0 ? e3 = 0 : e3 > t3.text.length && (e3 = t3.text.length);
                    var n2 = t3.locator.locationForIndex(e3);
                    return Pn.createPoint(e3, n2.line + 1, n2.column + 1);
                };
            });
            o(Cn);
            Cn.transformOffset;
            var Nn = a2(function(e2, t2) {
                t2.__esModule = true, t2.transformRange = function(e3, t3) {
                    return Ut.createPosition(t3.transformOffset(e3.origStart), t3.transformOffset(e3.origEnd));
                };
            });
            o(Nn);
            Nn.transformRange;
            var xn = a2(function(e2, t2) {
                t2.__esModule = true;
                t2.addOrigRange = function(e3) {
                    if (!e3.setOrigRanges()) {
                        var t3 = function(e4) {
                            return function(e5) {
                                return "number" == typeof e5.start;
                            }(e4) ? (e4.origStart = e4.start, e4.origEnd = e4.end, true) : function(e5) {
                                return "number" == typeof e5.offset;
                            }(e4) ? (e4.origOffset = e4.offset, true) : void 0;
                        };
                        e3.forEach(function(e4) {
                            return function e5(t4, n2) {
                                if (!t4 || "object" != typeof t4) return;
                                if (true === n2(t4)) return;
                                for(var r2 = 0, o2 = Object.keys(t4); r2 < o2.length; r2++){
                                    var a3 = o2[r2];
                                    if ("context" !== a3 && "error" !== a3) {
                                        var s2 = t4[a3];
                                        Array.isArray(s2) ? s2.forEach(function(t5) {
                                            return e5(t5, n2);
                                        }) : e5(s2, n2);
                                    }
                                }
                            }(e4, t3);
                        });
                    }
                };
            });
            o(xn);
            xn.addOrigRange;
            var kn = a2(function(e2, t2) {
                t2.__esModule = true, t2.removeFakeNodes = function e3(t3) {
                    if ("children" in t3) {
                        if (1 === t3.children.length) {
                            var n2 = t3.children[0];
                            if ("plain" === n2.type && null === n2.tag && null === n2.anchor && "" === n2.value) return t3.children.splice(0, 1), t3;
                        }
                        t3.children.forEach(e3);
                    }
                    return t3;
                };
            });
            o(kn);
            kn.removeFakeNodes;
            var In = a2(function(e2, t2) {
                t2.__esModule = true, t2.createUpdater = function(e3, t3, n2, r2) {
                    var o2 = t3(e3);
                    return function(t4) {
                        r2(o2, t4) && n2(e3, o2 = t4);
                    };
                };
            });
            o(In);
            In.createUpdater;
            var Rn = a2(function(e2, t2) {
                function n2(e3) {
                    return e3.start;
                }
                function r2(e3, t3) {
                    e3.start = t3;
                }
                function o2(e3) {
                    return e3.end;
                }
                function a3(e3, t3) {
                    e3.end = t3;
                }
                function s2(e3, t3) {
                    return t3.offset < e3.offset;
                }
                function i2(e3, t3) {
                    return t3.offset > e3.offset;
                }
                t2.__esModule = true, t2.updatePositions = function e3(t3) {
                    if (null !== t3 && "children" in t3) {
                        var c2 = t3.children;
                        if (c2.forEach(e3), "document" === t3.type) {
                            var u2 = t3.children, l2 = u2[0], f3 = u2[1];
                            l2.position.start.offset === l2.position.end.offset ? l2.position.start = l2.position.end = f3.position.start : f3.position.start.offset === f3.position.end.offset && (f3.position.start = f3.position.end = l2.position.end);
                        }
                        var d2 = In.createUpdater(t3.position, n2, r2, s2), h2 = In.createUpdater(t3.position, o2, a3, i2);
                        "endComments" in t3 && 0 !== t3.endComments.length && (d2(t3.endComments[0].position.start), h2(Qt.getLast(t3.endComments).position.end));
                        var p2 = c2.filter(function(e4) {
                            return null !== e4;
                        });
                        if (0 !== p2.length) {
                            var g2 = p2[0], m2 = Qt.getLast(p2);
                            d2(g2.position.start), h2(m2.position.end), "leadingComments" in g2 && 0 !== g2.leadingComments.length && d2(g2.leadingComments[0].position.start), "tag" in g2 && g2.tag && d2(g2.tag.position.start), "anchor" in g2 && g2.anchor && d2(g2.anchor.position.start), "trailingComment" in m2 && m2.trailingComment && h2(m2.trailingComment.position.end);
                        }
                    }
                };
            });
            o(Rn);
            Rn.updatePositions;
            var jn = a2(function(e2, t2) {
                t2.__esModule = true, t2.parse = function(e3) {
                    var t3 = lt.parseCST(e3);
                    xn.addOrigRange(t3);
                    var n2 = t3.map(function(e4) {
                        return new lt.Document({
                            merge: true,
                            keepCstNodes: true
                        }).parse(e4);
                    }), r2 = [], o2 = {
                        text: e3,
                        locator: new d.default(e3),
                        comments: r2,
                        transformOffset: function(e4) {
                            return Cn.transformOffset(e4, o2);
                        },
                        transformRange: function(e4) {
                            return Nn.transformRange(e4, o2);
                        },
                        transformNode: function(e4) {
                            return An.transformNode(e4, o2);
                        },
                        transformContent: function(e4) {
                            return Nt.transformContent(e4, o2);
                        }
                    }, a3 = n2.find(function(e4) {
                        return 0 !== e4.errors.length;
                    });
                    if (a3) throw Tn.transformError(a3.errors[0], o2);
                    n2.forEach(function(e4) {
                        return vt.removeCstBlankLine(e4.cstNode);
                    });
                    var s2 = yt.createRoot(o2.transformRange({
                        origStart: 0,
                        origEnd: o2.text.length
                    }), n2.map(o2.transformNode), r2);
                    return ht.attachComments(s2), Rn.updatePositions(s2), kn.removeFakeNodes(s2), s2;
                };
            });
            o(jn);
            jn.parse;
            var Bn = a2(function(e2, t2) {
                t2.__esModule = true, mt.__exportStar(jn, t2);
            });
            o(Bn);
            const { hasPragma: Dn  } = n;
            var Yn = {
                parsers: {
                    yaml: {
                        astFormat: "yaml",
                        parse: function(e2) {
                            try {
                                const t2 = Bn.parse(e2);
                                return delete t2.comments, t2;
                            } catch (e3) {
                                throw e3 && e3.position ? t(e3.message, e3.position) : e3;
                            }
                        },
                        hasPragma: Dn,
                        locStart: (e2)=>e2.position.start.offset,
                        locEnd: (e2)=>e2.position.end.offset
                    }
                }
            }, Fn = Yn.parsers;
            e.default = Yn, e.parsers = Fn, Object.defineProperty(e, "__esModule", {
                value: true
            });
        });
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/ral.js
var require_ral = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/ral.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _ral;
        function RAL() {
            if (_ral === void 0) {
                throw new Error(`No runtime abstraction layer installed`);
            }
            return _ral;
        }
        (function(RAL2) {
            function install(ral) {
                if (ral === void 0) {
                    throw new Error(`No runtime abstraction layer provided`);
                }
                _ral = ral;
            }
            RAL2.install = install;
        })(RAL || (RAL = {}));
        exports.default = RAL;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/disposable.js
var require_disposable = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/disposable.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.Disposable = void 0;
        var Disposable;
        (function(Disposable2) {
            function create(func) {
                return {
                    dispose: func
                };
            }
            Disposable2.create = create;
        })(Disposable = exports.Disposable || (exports.Disposable = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/events.js
var require_events = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/events.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.Emitter = exports.Event = void 0;
        var ral_1 = require_ral();
        var Event;
        (function(Event2) {
            const _disposable = {
                dispose () {}
            };
            Event2.None = function() {
                return _disposable;
            };
        })(Event = exports.Event || (exports.Event = {}));
        var CallbackList = class {
            add(callback, context = null, bucket) {
                if (!this._callbacks) {
                    this._callbacks = [];
                    this._contexts = [];
                }
                this._callbacks.push(callback);
                this._contexts.push(context);
                if (Array.isArray(bucket)) {
                    bucket.push({
                        dispose: ()=>this.remove(callback, context)
                    });
                }
            }
            remove(callback, context = null) {
                if (!this._callbacks) {
                    return;
                }
                let foundCallbackWithDifferentContext = false;
                for(let i = 0, len = this._callbacks.length; i < len; i++){
                    if (this._callbacks[i] === callback) {
                        if (this._contexts[i] === context) {
                            this._callbacks.splice(i, 1);
                            this._contexts.splice(i, 1);
                            return;
                        } else {
                            foundCallbackWithDifferentContext = true;
                        }
                    }
                }
                if (foundCallbackWithDifferentContext) {
                    throw new Error("When adding a listener with a context, you should remove it with the same context");
                }
            }
            invoke(...args) {
                if (!this._callbacks) {
                    return [];
                }
                const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);
                for(let i = 0, len = callbacks.length; i < len; i++){
                    try {
                        ret.push(callbacks[i].apply(contexts[i], args));
                    } catch (e) {
                        ral_1.default().console.error(e);
                    }
                }
                return ret;
            }
            isEmpty() {
                return !this._callbacks || this._callbacks.length === 0;
            }
            dispose() {
                this._callbacks = void 0;
                this._contexts = void 0;
            }
        };
        var Emitter = class {
            /**
       * For the public to allow to subscribe
       * to events from this Emitter
       */ get event() {
                if (!this._event) {
                    this._event = (listener, thisArgs, disposables)=>{
                        if (!this._callbacks) {
                            this._callbacks = new CallbackList();
                        }
                        if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {
                            this._options.onFirstListenerAdd(this);
                        }
                        this._callbacks.add(listener, thisArgs);
                        const result = {
                            dispose: ()=>{
                                if (!this._callbacks) {
                                    return;
                                }
                                this._callbacks.remove(listener, thisArgs);
                                result.dispose = Emitter._noop;
                                if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {
                                    this._options.onLastListenerRemove(this);
                                }
                            }
                        };
                        if (Array.isArray(disposables)) {
                            disposables.push(result);
                        }
                        return result;
                    };
                }
                return this._event;
            }
            /**
       * To be kept private to fire an event to
       * subscribers
       */ fire(event) {
                if (this._callbacks) {
                    this._callbacks.invoke.call(this._callbacks, event);
                }
            }
            dispose() {
                if (this._callbacks) {
                    this._callbacks.dispose();
                    this._callbacks = void 0;
                }
            }
            constructor(_options){
                this._options = _options;
            }
        };
        exports.Emitter = Emitter;
        Emitter._noop = function() {};
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/messageBuffer.js
var require_messageBuffer = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/messageBuffer.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.AbstractMessageBuffer = void 0;
        var CR = 13;
        var LF = 10;
        var CRLF = "\r\n";
        var AbstractMessageBuffer = class {
            get encoding() {
                return this._encoding;
            }
            append(chunk) {
                const toAppend = typeof chunk === "string" ? this.fromString(chunk, this._encoding) : chunk;
                this._chunks.push(toAppend);
                this._totalLength += toAppend.byteLength;
            }
            tryReadHeaders() {
                if (this._chunks.length === 0) {
                    return void 0;
                }
                let state = 0;
                let chunkIndex = 0;
                let offset = 0;
                let chunkBytesRead = 0;
                row: while(chunkIndex < this._chunks.length){
                    const chunk = this._chunks[chunkIndex];
                    offset = 0;
                    column: while(offset < chunk.length){
                        const value1 = chunk[offset];
                        switch(value1){
                            case CR:
                                switch(state){
                                    case 0:
                                        state = 1;
                                        break;
                                    case 2:
                                        state = 3;
                                        break;
                                    default:
                                        state = 0;
                                }
                                break;
                            case LF:
                                switch(state){
                                    case 1:
                                        state = 2;
                                        break;
                                    case 3:
                                        state = 4;
                                        offset++;
                                        break row;
                                    default:
                                        state = 0;
                                }
                                break;
                            default:
                                state = 0;
                        }
                        offset++;
                    }
                    chunkBytesRead += chunk.byteLength;
                    chunkIndex++;
                }
                if (state !== 4) {
                    return void 0;
                }
                const buffer = this._read(chunkBytesRead + offset);
                const result = /* @__PURE__ */ new Map();
                const headers = this.toString(buffer, "ascii").split(CRLF);
                if (headers.length < 2) {
                    return result;
                }
                for(let i = 0; i < headers.length - 2; i++){
                    const header = headers[i];
                    const index = header.indexOf(":");
                    if (index === -1) {
                        throw new Error("Message header must separate key and value using :");
                    }
                    const key = header.substr(0, index);
                    const value1 = header.substr(index + 1).trim();
                    result.set(key, value1);
                }
                return result;
            }
            tryReadBody(length) {
                if (this._totalLength < length) {
                    return void 0;
                }
                return this._read(length);
            }
            get numberOfBytes() {
                return this._totalLength;
            }
            _read(byteCount) {
                if (byteCount === 0) {
                    return this.emptyBuffer();
                }
                if (byteCount > this._totalLength) {
                    throw new Error(`Cannot read so many bytes!`);
                }
                if (this._chunks[0].byteLength === byteCount) {
                    const chunk = this._chunks[0];
                    this._chunks.shift();
                    this._totalLength -= byteCount;
                    return this.asNative(chunk);
                }
                if (this._chunks[0].byteLength > byteCount) {
                    const chunk = this._chunks[0];
                    const result2 = this.asNative(chunk, byteCount);
                    this._chunks[0] = chunk.slice(byteCount);
                    this._totalLength -= byteCount;
                    return result2;
                }
                const result = this.allocNative(byteCount);
                let resultOffset = 0;
                let chunkIndex = 0;
                while(byteCount > 0){
                    const chunk = this._chunks[chunkIndex];
                    if (chunk.byteLength > byteCount) {
                        const chunkPart = chunk.slice(0, byteCount);
                        result.set(chunkPart, resultOffset);
                        resultOffset += byteCount;
                        this._chunks[chunkIndex] = chunk.slice(byteCount);
                        this._totalLength -= byteCount;
                        byteCount -= byteCount;
                    } else {
                        result.set(chunk, resultOffset);
                        resultOffset += chunk.byteLength;
                        this._chunks.shift();
                        this._totalLength -= chunk.byteLength;
                        byteCount -= chunk.byteLength;
                    }
                }
                return result;
            }
            constructor(encoding = "utf-8"){
                this._encoding = encoding;
                this._chunks = [];
                this._totalLength = 0;
            }
        };
        exports.AbstractMessageBuffer = AbstractMessageBuffer;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/browser/ril.js
var require_ril = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/browser/ril.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ral_1 = require_ral();
        var disposable_1 = require_disposable();
        var events_1 = require_events();
        var messageBuffer_1 = require_messageBuffer();
        var MessageBuffer = class extends messageBuffer_1.AbstractMessageBuffer {
            emptyBuffer() {
                return MessageBuffer.emptyBuffer;
            }
            fromString(value1, _encoding) {
                return new TextEncoder().encode(value1);
            }
            toString(value1, encoding) {
                if (encoding === "ascii") {
                    return this.asciiDecoder.decode(value1);
                } else {
                    return new TextDecoder(encoding).decode(value1);
                }
            }
            asNative(buffer, length) {
                if (length === void 0) {
                    return buffer;
                } else {
                    return buffer.slice(0, length);
                }
            }
            allocNative(length) {
                return new Uint8Array(length);
            }
            constructor(encoding = "utf-8"){
                super(encoding);
                this.asciiDecoder = new TextDecoder("ascii");
            }
        };
        MessageBuffer.emptyBuffer = new Uint8Array(0);
        var ReadableStreamWrapper = class {
            onClose(listener) {
                this.socket.addEventListener("close", listener);
                return disposable_1.Disposable.create(()=>this.socket.removeEventListener("close", listener));
            }
            onError(listener) {
                this.socket.addEventListener("error", listener);
                return disposable_1.Disposable.create(()=>this.socket.removeEventListener("error", listener));
            }
            onEnd(listener) {
                this.socket.addEventListener("end", listener);
                return disposable_1.Disposable.create(()=>this.socket.removeEventListener("end", listener));
            }
            onData(listener) {
                return this._onData.event(listener);
            }
            constructor(socket){
                this.socket = socket;
                this._onData = new events_1.Emitter();
                this._messageListener = (event)=>{
                    const blob = event.data;
                    blob.arrayBuffer().then((buffer)=>{
                        this._onData.fire(new Uint8Array(buffer));
                    });
                };
                this.socket.addEventListener("message", this._messageListener);
            }
        };
        var WritableStreamWrapper = class {
            onClose(listener) {
                this.socket.addEventListener("close", listener);
                return disposable_1.Disposable.create(()=>this.socket.removeEventListener("close", listener));
            }
            onError(listener) {
                this.socket.addEventListener("error", listener);
                return disposable_1.Disposable.create(()=>this.socket.removeEventListener("error", listener));
            }
            onEnd(listener) {
                this.socket.addEventListener("end", listener);
                return disposable_1.Disposable.create(()=>this.socket.removeEventListener("end", listener));
            }
            write(data, encoding) {
                if (typeof data === "string") {
                    if (encoding !== void 0 && encoding !== "utf-8") {
                        throw new Error(`In a Browser environments only utf-8 text encding is supported. But got encoding: ${encoding}`);
                    }
                    this.socket.send(data);
                } else {
                    this.socket.send(data);
                }
                return Promise.resolve();
            }
            end() {
                this.socket.close();
            }
            constructor(socket){
                this.socket = socket;
            }
        };
        var _textEncoder = new TextEncoder();
        var _ril = Object.freeze({
            messageBuffer: Object.freeze({
                create: (encoding)=>new MessageBuffer(encoding)
            }),
            applicationJson: Object.freeze({
                encoder: Object.freeze({
                    name: "application/json",
                    encode: (msg, options)=>{
                        if (options.charset !== "utf-8") {
                            throw new Error(`In a Browser environments only utf-8 text encding is supported. But got encoding: ${options.charset}`);
                        }
                        return Promise.resolve(_textEncoder.encode(JSON.stringify(msg, void 0, 0)));
                    }
                }),
                decoder: Object.freeze({
                    name: "application/json",
                    decode: (buffer, options)=>{
                        if (!(buffer instanceof Uint8Array)) {
                            throw new Error(`In a Browser environments only Uint8Arrays are supported.`);
                        }
                        return Promise.resolve(JSON.parse(new TextDecoder(options.charset).decode(buffer)));
                    }
                })
            }),
            stream: Object.freeze({
                asReadableStream: (socket)=>new ReadableStreamWrapper(socket),
                asWritableStream: (socket)=>new WritableStreamWrapper(socket)
            }),
            console,
            timer: Object.freeze({
                setTimeout (callback, ms, ...args) {
                    return setTimeout(callback, ms, ...args);
                },
                clearTimeout (handle) {
                    clearTimeout(handle);
                },
                setImmediate (callback, ...args) {
                    return setTimeout(callback, 0, ...args);
                },
                clearImmediate (handle) {
                    clearTimeout(handle);
                }
            })
        });
        function RIL() {
            return _ril;
        }
        (function(RIL2) {
            function install() {
                ral_1.default.install(_ril);
            }
            RIL2.install = install;
        })(RIL || (RIL = {}));
        exports.default = RIL;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/is.js
var require_is = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/is.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
        function boolean(value1) {
            return value1 === true || value1 === false;
        }
        exports.boolean = boolean;
        function string2(value1) {
            return typeof value1 === "string" || value1 instanceof String;
        }
        exports.string = string2;
        function number(value1) {
            return typeof value1 === "number" || value1 instanceof Number;
        }
        exports.number = number;
        function error(value1) {
            return value1 instanceof Error;
        }
        exports.error = error;
        function func(value1) {
            return typeof value1 === "function";
        }
        exports.func = func;
        function array(value1) {
            return Array.isArray(value1);
        }
        exports.array = array;
        function stringArray(value1) {
            return array(value1) && value1.every((elem)=>string2(elem));
        }
        exports.stringArray = stringArray;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/messages.js
var require_messages = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/messages.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isResponseMessage = exports.isNotificationMessage = exports.isRequestMessage = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType = exports.RequestType0 = exports.AbstractMessageSignature = exports.ParameterStructures = exports.ResponseError = exports.ErrorCodes = void 0;
        var is = require_is();
        var ErrorCodes;
        (function(ErrorCodes2) {
            ErrorCodes2.ParseError = -32700;
            ErrorCodes2.InvalidRequest = -32600;
            ErrorCodes2.MethodNotFound = -32601;
            ErrorCodes2.InvalidParams = -32602;
            ErrorCodes2.InternalError = -32603;
            ErrorCodes2.jsonrpcReservedErrorRangeStart = -32099;
            ErrorCodes2.serverErrorStart = ErrorCodes2.jsonrpcReservedErrorRangeStart;
            ErrorCodes2.MessageWriteError = -32099;
            ErrorCodes2.MessageReadError = -32098;
            ErrorCodes2.ServerNotInitialized = -32002;
            ErrorCodes2.UnknownErrorCode = -32001;
            ErrorCodes2.jsonrpcReservedErrorRangeEnd = -32e3;
            ErrorCodes2.serverErrorEnd = ErrorCodes2.jsonrpcReservedErrorRangeEnd;
        })(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));
        var ResponseError = class extends Error {
            toJson() {
                return {
                    code: this.code,
                    message: this.message,
                    data: this.data
                };
            }
            constructor(code, message, data){
                super(message);
                this.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode;
                this.data = data;
                Object.setPrototypeOf(this, ResponseError.prototype);
            }
        };
        exports.ResponseError = ResponseError;
        var ParameterStructures = class {
            static is(value1) {
                return value1 === ParameterStructures.auto || value1 === ParameterStructures.byName || value1 === ParameterStructures.byPosition;
            }
            toString() {
                return this.kind;
            }
            constructor(kind){
                this.kind = kind;
            }
        };
        exports.ParameterStructures = ParameterStructures;
        ParameterStructures.auto = new ParameterStructures("auto");
        ParameterStructures.byPosition = new ParameterStructures("byPosition");
        ParameterStructures.byName = new ParameterStructures("byName");
        var AbstractMessageSignature = class {
            get parameterStructures() {
                return ParameterStructures.auto;
            }
            constructor(method, numberOfParams){
                this.method = method;
                this.numberOfParams = numberOfParams;
            }
        };
        exports.AbstractMessageSignature = AbstractMessageSignature;
        var RequestType0 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 0);
            }
        };
        exports.RequestType0 = RequestType0;
        var RequestType = class extends AbstractMessageSignature {
            get parameterStructures() {
                return this._parameterStructures;
            }
            constructor(method, _parameterStructures = ParameterStructures.auto){
                super(method, 1);
                this._parameterStructures = _parameterStructures;
            }
        };
        exports.RequestType = RequestType;
        var RequestType1 = class extends AbstractMessageSignature {
            get parameterStructures() {
                return this._parameterStructures;
            }
            constructor(method, _parameterStructures = ParameterStructures.auto){
                super(method, 1);
                this._parameterStructures = _parameterStructures;
            }
        };
        exports.RequestType1 = RequestType1;
        var RequestType2 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 2);
            }
        };
        exports.RequestType2 = RequestType2;
        var RequestType3 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 3);
            }
        };
        exports.RequestType3 = RequestType3;
        var RequestType4 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 4);
            }
        };
        exports.RequestType4 = RequestType4;
        var RequestType5 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 5);
            }
        };
        exports.RequestType5 = RequestType5;
        var RequestType6 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 6);
            }
        };
        exports.RequestType6 = RequestType6;
        var RequestType7 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 7);
            }
        };
        exports.RequestType7 = RequestType7;
        var RequestType8 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 8);
            }
        };
        exports.RequestType8 = RequestType8;
        var RequestType9 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 9);
            }
        };
        exports.RequestType9 = RequestType9;
        var NotificationType = class extends AbstractMessageSignature {
            get parameterStructures() {
                return this._parameterStructures;
            }
            constructor(method, _parameterStructures = ParameterStructures.auto){
                super(method, 1);
                this._parameterStructures = _parameterStructures;
            }
        };
        exports.NotificationType = NotificationType;
        var NotificationType0 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 0);
            }
        };
        exports.NotificationType0 = NotificationType0;
        var NotificationType1 = class extends AbstractMessageSignature {
            get parameterStructures() {
                return this._parameterStructures;
            }
            constructor(method, _parameterStructures = ParameterStructures.auto){
                super(method, 1);
                this._parameterStructures = _parameterStructures;
            }
        };
        exports.NotificationType1 = NotificationType1;
        var NotificationType2 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 2);
            }
        };
        exports.NotificationType2 = NotificationType2;
        var NotificationType3 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 3);
            }
        };
        exports.NotificationType3 = NotificationType3;
        var NotificationType4 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 4);
            }
        };
        exports.NotificationType4 = NotificationType4;
        var NotificationType5 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 5);
            }
        };
        exports.NotificationType5 = NotificationType5;
        var NotificationType6 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 6);
            }
        };
        exports.NotificationType6 = NotificationType6;
        var NotificationType7 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 7);
            }
        };
        exports.NotificationType7 = NotificationType7;
        var NotificationType8 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 8);
            }
        };
        exports.NotificationType8 = NotificationType8;
        var NotificationType9 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 9);
            }
        };
        exports.NotificationType9 = NotificationType9;
        function isRequestMessage(message) {
            const candidate = message;
            return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
        }
        exports.isRequestMessage = isRequestMessage;
        function isNotificationMessage(message) {
            const candidate = message;
            return candidate && is.string(candidate.method) && message.id === void 0;
        }
        exports.isNotificationMessage = isNotificationMessage;
        function isResponseMessage(message) {
            const candidate = message;
            return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
        }
        exports.isResponseMessage = isResponseMessage;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/cancellation.js
var require_cancellation = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/cancellation.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.CancellationTokenSource = exports.CancellationToken = void 0;
        var ral_1 = require_ral();
        var Is2 = require_is();
        var events_1 = require_events();
        var CancellationToken;
        (function(CancellationToken2) {
            CancellationToken2.None = Object.freeze({
                isCancellationRequested: false,
                onCancellationRequested: events_1.Event.None
            });
            CancellationToken2.Cancelled = Object.freeze({
                isCancellationRequested: true,
                onCancellationRequested: events_1.Event.None
            });
            function is(value1) {
                const candidate = value1;
                return candidate && (candidate === CancellationToken2.None || candidate === CancellationToken2.Cancelled || Is2.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested);
            }
            CancellationToken2.is = is;
        })(CancellationToken = exports.CancellationToken || (exports.CancellationToken = {}));
        var shortcutEvent = Object.freeze(function(callback, context) {
            const handle = ral_1.default().timer.setTimeout(callback.bind(context), 0);
            return {
                dispose () {
                    ral_1.default().timer.clearTimeout(handle);
                }
            };
        });
        var MutableToken = class {
            cancel() {
                if (!this._isCancelled) {
                    this._isCancelled = true;
                    if (this._emitter) {
                        this._emitter.fire(void 0);
                        this.dispose();
                    }
                }
            }
            get isCancellationRequested() {
                return this._isCancelled;
            }
            get onCancellationRequested() {
                if (this._isCancelled) {
                    return shortcutEvent;
                }
                if (!this._emitter) {
                    this._emitter = new events_1.Emitter();
                }
                return this._emitter.event;
            }
            dispose() {
                if (this._emitter) {
                    this._emitter.dispose();
                    this._emitter = void 0;
                }
            }
            constructor(){
                this._isCancelled = false;
            }
        };
        var CancellationTokenSource = class {
            get token() {
                if (!this._token) {
                    this._token = new MutableToken();
                }
                return this._token;
            }
            cancel() {
                if (!this._token) {
                    this._token = CancellationToken.Cancelled;
                } else {
                    this._token.cancel();
                }
            }
            dispose() {
                if (!this._token) {
                    this._token = CancellationToken.None;
                } else if (this._token instanceof MutableToken) {
                    this._token.dispose();
                }
            }
        };
        exports.CancellationTokenSource = CancellationTokenSource;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/messageReader.js
var require_messageReader = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/messageReader.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = void 0;
        var ral_1 = require_ral();
        var Is2 = require_is();
        var events_1 = require_events();
        var MessageReader;
        (function(MessageReader2) {
            function is(value1) {
                let candidate = value1;
                return candidate && Is2.func(candidate.listen) && Is2.func(candidate.dispose) && Is2.func(candidate.onError) && Is2.func(candidate.onClose) && Is2.func(candidate.onPartialMessage);
            }
            MessageReader2.is = is;
        })(MessageReader = exports.MessageReader || (exports.MessageReader = {}));
        var AbstractMessageReader = class {
            dispose() {
                this.errorEmitter.dispose();
                this.closeEmitter.dispose();
            }
            get onError() {
                return this.errorEmitter.event;
            }
            fireError(error) {
                this.errorEmitter.fire(this.asError(error));
            }
            get onClose() {
                return this.closeEmitter.event;
            }
            fireClose() {
                this.closeEmitter.fire(void 0);
            }
            get onPartialMessage() {
                return this.partialMessageEmitter.event;
            }
            firePartialMessage(info) {
                this.partialMessageEmitter.fire(info);
            }
            asError(error) {
                if (error instanceof Error) {
                    return error;
                } else {
                    return new Error(`Reader received error. Reason: ${Is2.string(error.message) ? error.message : "unknown"}`);
                }
            }
            constructor(){
                this.errorEmitter = new events_1.Emitter();
                this.closeEmitter = new events_1.Emitter();
                this.partialMessageEmitter = new events_1.Emitter();
            }
        };
        exports.AbstractMessageReader = AbstractMessageReader;
        var ResolvedMessageReaderOptions;
        (function(ResolvedMessageReaderOptions2) {
            function fromOptions(options) {
                var _a;
                let charset;
                let result;
                let contentDecoder;
                const contentDecoders = /* @__PURE__ */ new Map();
                let contentTypeDecoder;
                const contentTypeDecoders = /* @__PURE__ */ new Map();
                if (options === void 0 || typeof options === "string") {
                    charset = options !== null && options !== void 0 ? options : "utf-8";
                } else {
                    charset = (_a = options.charset) !== null && _a !== void 0 ? _a : "utf-8";
                    if (options.contentDecoder !== void 0) {
                        contentDecoder = options.contentDecoder;
                        contentDecoders.set(contentDecoder.name, contentDecoder);
                    }
                    if (options.contentDecoders !== void 0) {
                        for (const decoder of options.contentDecoders){
                            contentDecoders.set(decoder.name, decoder);
                        }
                    }
                    if (options.contentTypeDecoder !== void 0) {
                        contentTypeDecoder = options.contentTypeDecoder;
                        contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
                    }
                    if (options.contentTypeDecoders !== void 0) {
                        for (const decoder of options.contentTypeDecoders){
                            contentTypeDecoders.set(decoder.name, decoder);
                        }
                    }
                }
                if (contentTypeDecoder === void 0) {
                    contentTypeDecoder = ral_1.default().applicationJson.decoder;
                    contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
                }
                return {
                    charset,
                    contentDecoder,
                    contentDecoders,
                    contentTypeDecoder,
                    contentTypeDecoders
                };
            }
            ResolvedMessageReaderOptions2.fromOptions = fromOptions;
        })(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));
        var ReadableStreamMessageReader = class extends AbstractMessageReader {
            set partialMessageTimeout(timeout) {
                this._partialMessageTimeout = timeout;
            }
            get partialMessageTimeout() {
                return this._partialMessageTimeout;
            }
            listen(callback) {
                this.nextMessageLength = -1;
                this.messageToken = 0;
                this.partialMessageTimer = void 0;
                this.callback = callback;
                const result = this.readable.onData((data)=>{
                    this.onData(data);
                });
                this.readable.onError((error)=>this.fireError(error));
                this.readable.onClose(()=>this.fireClose());
                return result;
            }
            onData(data) {
                this.buffer.append(data);
                while(true){
                    if (this.nextMessageLength === -1) {
                        const headers = this.buffer.tryReadHeaders();
                        if (!headers) {
                            return;
                        }
                        const contentLength = headers.get("Content-Length");
                        if (!contentLength) {
                            throw new Error("Header must provide a Content-Length property.");
                        }
                        const length = parseInt(contentLength);
                        if (isNaN(length)) {
                            throw new Error("Content-Length value must be a number.");
                        }
                        this.nextMessageLength = length;
                    }
                    const body = this.buffer.tryReadBody(this.nextMessageLength);
                    if (body === void 0) {
                        this.setPartialMessageTimer();
                        return;
                    }
                    this.clearPartialMessageTimer();
                    this.nextMessageLength = -1;
                    let p;
                    if (this.options.contentDecoder !== void 0) {
                        p = this.options.contentDecoder.decode(body);
                    } else {
                        p = Promise.resolve(body);
                    }
                    p.then((value1)=>{
                        this.options.contentTypeDecoder.decode(value1, this.options).then((msg)=>{
                            this.callback(msg);
                        }, (error)=>{
                            this.fireError(error);
                        });
                    }, (error)=>{
                        this.fireError(error);
                    });
                }
            }
            clearPartialMessageTimer() {
                if (this.partialMessageTimer) {
                    ral_1.default().timer.clearTimeout(this.partialMessageTimer);
                    this.partialMessageTimer = void 0;
                }
            }
            setPartialMessageTimer() {
                this.clearPartialMessageTimer();
                if (this._partialMessageTimeout <= 0) {
                    return;
                }
                this.partialMessageTimer = ral_1.default().timer.setTimeout((token, timeout)=>{
                    this.partialMessageTimer = void 0;
                    if (token === this.messageToken) {
                        this.firePartialMessage({
                            messageToken: token,
                            waitingTime: timeout
                        });
                        this.setPartialMessageTimer();
                    }
                }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
            }
            constructor(readable, options){
                super();
                this.readable = readable;
                this.options = ResolvedMessageReaderOptions.fromOptions(options);
                this.buffer = ral_1.default().messageBuffer.create(this.options.charset);
                this._partialMessageTimeout = 1e4;
                this.nextMessageLength = -1;
                this.messageToken = 0;
            }
        };
        exports.ReadableStreamMessageReader = ReadableStreamMessageReader;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/semaphore.js
var require_semaphore = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/semaphore.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.Semaphore = void 0;
        var ral_1 = require_ral();
        var Semaphore = class {
            lock(thunk) {
                return new Promise((resolve2, reject)=>{
                    this._waiting.push({
                        thunk,
                        resolve: resolve2,
                        reject
                    });
                    this.runNext();
                });
            }
            get active() {
                return this._active;
            }
            runNext() {
                if (this._waiting.length === 0 || this._active === this._capacity) {
                    return;
                }
                ral_1.default().timer.setImmediate(()=>this.doRunNext());
            }
            doRunNext() {
                if (this._waiting.length === 0 || this._active === this._capacity) {
                    return;
                }
                const next = this._waiting.shift();
                this._active++;
                if (this._active > this._capacity) {
                    throw new Error(`To many thunks active`);
                }
                try {
                    const result = next.thunk();
                    if (result instanceof Promise) {
                        result.then((value1)=>{
                            this._active--;
                            next.resolve(value1);
                            this.runNext();
                        }, (err)=>{
                            this._active--;
                            next.reject(err);
                            this.runNext();
                        });
                    } else {
                        this._active--;
                        next.resolve(result);
                        this.runNext();
                    }
                } catch (err) {
                    this._active--;
                    next.reject(err);
                    this.runNext();
                }
            }
            constructor(capacity = 1){
                if (capacity <= 0) {
                    throw new Error("Capacity must be greater than 0");
                }
                this._capacity = capacity;
                this._active = 0;
                this._waiting = [];
            }
        };
        exports.Semaphore = Semaphore;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/messageWriter.js
var require_messageWriter = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/messageWriter.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = void 0;
        var ral_1 = require_ral();
        var Is2 = require_is();
        var semaphore_1 = require_semaphore();
        var events_1 = require_events();
        var ContentLength = "Content-Length: ";
        var CRLF = "\r\n";
        var MessageWriter;
        (function(MessageWriter2) {
            function is(value1) {
                let candidate = value1;
                return candidate && Is2.func(candidate.dispose) && Is2.func(candidate.onClose) && Is2.func(candidate.onError) && Is2.func(candidate.write);
            }
            MessageWriter2.is = is;
        })(MessageWriter = exports.MessageWriter || (exports.MessageWriter = {}));
        var AbstractMessageWriter = class {
            dispose() {
                this.errorEmitter.dispose();
                this.closeEmitter.dispose();
            }
            get onError() {
                return this.errorEmitter.event;
            }
            fireError(error, message, count) {
                this.errorEmitter.fire([
                    this.asError(error),
                    message,
                    count
                ]);
            }
            get onClose() {
                return this.closeEmitter.event;
            }
            fireClose() {
                this.closeEmitter.fire(void 0);
            }
            asError(error) {
                if (error instanceof Error) {
                    return error;
                } else {
                    return new Error(`Writer received error. Reason: ${Is2.string(error.message) ? error.message : "unknown"}`);
                }
            }
            constructor(){
                this.errorEmitter = new events_1.Emitter();
                this.closeEmitter = new events_1.Emitter();
            }
        };
        exports.AbstractMessageWriter = AbstractMessageWriter;
        var ResolvedMessageWriterOptions;
        (function(ResolvedMessageWriterOptions2) {
            function fromOptions(options) {
                var _a, _b;
                if (options === void 0 || typeof options === "string") {
                    return {
                        charset: options !== null && options !== void 0 ? options : "utf-8",
                        contentTypeEncoder: ral_1.default().applicationJson.encoder
                    };
                } else {
                    return {
                        charset: (_a = options.charset) !== null && _a !== void 0 ? _a : "utf-8",
                        contentEncoder: options.contentEncoder,
                        contentTypeEncoder: (_b = options.contentTypeEncoder) !== null && _b !== void 0 ? _b : ral_1.default().applicationJson.encoder
                    };
                }
            }
            ResolvedMessageWriterOptions2.fromOptions = fromOptions;
        })(ResolvedMessageWriterOptions || (ResolvedMessageWriterOptions = {}));
        var WriteableStreamMessageWriter = class extends AbstractMessageWriter {
            async write(msg) {
                return this.writeSemaphore.lock(async ()=>{
                    const payload = this.options.contentTypeEncoder.encode(msg, this.options).then((buffer)=>{
                        if (this.options.contentEncoder !== void 0) {
                            return this.options.contentEncoder.encode(buffer);
                        } else {
                            return buffer;
                        }
                    });
                    return payload.then((buffer)=>{
                        const headers = [];
                        headers.push(ContentLength, buffer.byteLength.toString(), CRLF);
                        headers.push(CRLF);
                        return this.doWrite(msg, headers, buffer);
                    }, (error)=>{
                        this.fireError(error);
                        throw error;
                    });
                });
            }
            async doWrite(msg, headers, data) {
                try {
                    await this.writable.write(headers.join(""), "ascii");
                    return this.writable.write(data);
                } catch (error) {
                    this.handleError(error, msg);
                    return Promise.reject(error);
                }
            }
            handleError(error, msg) {
                this.errorCount++;
                this.fireError(error, msg, this.errorCount);
            }
            end() {
                this.writable.end();
            }
            constructor(writable, options){
                super();
                this.writable = writable;
                this.options = ResolvedMessageWriterOptions.fromOptions(options);
                this.errorCount = 0;
                this.writeSemaphore = new semaphore_1.Semaphore(1);
                this.writable.onError((error)=>this.fireError(error));
                this.writable.onClose(()=>this.fireClose());
            }
        };
        exports.WriteableStreamMessageWriter = WriteableStreamMessageWriter;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/linkedMap.js
var require_linkedMap = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/linkedMap.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.LRUCache = exports.LinkedMap = exports.Touch = void 0;
        var Touch;
        (function(Touch2) {
            Touch2.None = 0;
            Touch2.First = 1;
            Touch2.AsOld = Touch2.First;
            Touch2.Last = 2;
            Touch2.AsNew = Touch2.Last;
        })(Touch = exports.Touch || (exports.Touch = {}));
        var LinkedMap = class {
            clear() {
                this._map.clear();
                this._head = void 0;
                this._tail = void 0;
                this._size = 0;
                this._state++;
            }
            isEmpty() {
                return !this._head && !this._tail;
            }
            get size() {
                return this._size;
            }
            get first() {
                var _a;
                return (_a = this._head) === null || _a === void 0 ? void 0 : _a.value;
            }
            get last() {
                var _a;
                return (_a = this._tail) === null || _a === void 0 ? void 0 : _a.value;
            }
            has(key) {
                return this._map.has(key);
            }
            get(key, touch = Touch.None) {
                const item = this._map.get(key);
                if (!item) {
                    return void 0;
                }
                if (touch !== Touch.None) {
                    this.touch(item, touch);
                }
                return item.value;
            }
            set(key, value1, touch = Touch.None) {
                let item = this._map.get(key);
                if (item) {
                    item.value = value1;
                    if (touch !== Touch.None) {
                        this.touch(item, touch);
                    }
                } else {
                    item = {
                        key,
                        value: value1,
                        next: void 0,
                        previous: void 0
                    };
                    switch(touch){
                        case Touch.None:
                            this.addItemLast(item);
                            break;
                        case Touch.First:
                            this.addItemFirst(item);
                            break;
                        case Touch.Last:
                            this.addItemLast(item);
                            break;
                        default:
                            this.addItemLast(item);
                            break;
                    }
                    this._map.set(key, item);
                    this._size++;
                }
                return this;
            }
            delete(key) {
                return !!this.remove(key);
            }
            remove(key) {
                const item = this._map.get(key);
                if (!item) {
                    return void 0;
                }
                this._map.delete(key);
                this.removeItem(item);
                this._size--;
                return item.value;
            }
            shift() {
                if (!this._head && !this._tail) {
                    return void 0;
                }
                if (!this._head || !this._tail) {
                    throw new Error("Invalid list");
                }
                const item = this._head;
                this._map.delete(item.key);
                this.removeItem(item);
                this._size--;
                return item.value;
            }
            forEach(callbackfn, thisArg) {
                const state = this._state;
                let current = this._head;
                while(current){
                    if (thisArg) {
                        callbackfn.bind(thisArg)(current.value, current.key, this);
                    } else {
                        callbackfn(current.value, current.key, this);
                    }
                    if (this._state !== state) {
                        throw new Error(`LinkedMap got modified during iteration.`);
                    }
                    current = current.next;
                }
            }
            keys() {
                const map2 = this;
                const state = this._state;
                let current = this._head;
                const iterator = {
                    [Symbol.iterator] () {
                        return iterator;
                    },
                    next () {
                        if (map2._state !== state) {
                            throw new Error(`LinkedMap got modified during iteration.`);
                        }
                        if (current) {
                            const result = {
                                value: current.key,
                                done: false
                            };
                            current = current.next;
                            return result;
                        } else {
                            return {
                                value: void 0,
                                done: true
                            };
                        }
                    }
                };
                return iterator;
            }
            values() {
                const map2 = this;
                const state = this._state;
                let current = this._head;
                const iterator = {
                    [Symbol.iterator] () {
                        return iterator;
                    },
                    next () {
                        if (map2._state !== state) {
                            throw new Error(`LinkedMap got modified during iteration.`);
                        }
                        if (current) {
                            const result = {
                                value: current.value,
                                done: false
                            };
                            current = current.next;
                            return result;
                        } else {
                            return {
                                value: void 0,
                                done: true
                            };
                        }
                    }
                };
                return iterator;
            }
            entries() {
                const map2 = this;
                const state = this._state;
                let current = this._head;
                const iterator = {
                    [Symbol.iterator] () {
                        return iterator;
                    },
                    next () {
                        if (map2._state !== state) {
                            throw new Error(`LinkedMap got modified during iteration.`);
                        }
                        if (current) {
                            const result = {
                                value: [
                                    current.key,
                                    current.value
                                ],
                                done: false
                            };
                            current = current.next;
                            return result;
                        } else {
                            return {
                                value: void 0,
                                done: true
                            };
                        }
                    }
                };
                return iterator;
            }
            [Symbol.iterator]() {
                return this.entries();
            }
            trimOld(newSize) {
                if (newSize >= this.size) {
                    return;
                }
                if (newSize === 0) {
                    this.clear();
                    return;
                }
                let current = this._head;
                let currentSize = this.size;
                while(current && currentSize > newSize){
                    this._map.delete(current.key);
                    current = current.next;
                    currentSize--;
                }
                this._head = current;
                this._size = currentSize;
                if (current) {
                    current.previous = void 0;
                }
                this._state++;
            }
            addItemFirst(item) {
                if (!this._head && !this._tail) {
                    this._tail = item;
                } else if (!this._head) {
                    throw new Error("Invalid list");
                } else {
                    item.next = this._head;
                    this._head.previous = item;
                }
                this._head = item;
                this._state++;
            }
            addItemLast(item) {
                if (!this._head && !this._tail) {
                    this._head = item;
                } else if (!this._tail) {
                    throw new Error("Invalid list");
                } else {
                    item.previous = this._tail;
                    this._tail.next = item;
                }
                this._tail = item;
                this._state++;
            }
            removeItem(item) {
                if (item === this._head && item === this._tail) {
                    this._head = void 0;
                    this._tail = void 0;
                } else if (item === this._head) {
                    if (!item.next) {
                        throw new Error("Invalid list");
                    }
                    item.next.previous = void 0;
                    this._head = item.next;
                } else if (item === this._tail) {
                    if (!item.previous) {
                        throw new Error("Invalid list");
                    }
                    item.previous.next = void 0;
                    this._tail = item.previous;
                } else {
                    const next = item.next;
                    const previous = item.previous;
                    if (!next || !previous) {
                        throw new Error("Invalid list");
                    }
                    next.previous = previous;
                    previous.next = next;
                }
                item.next = void 0;
                item.previous = void 0;
                this._state++;
            }
            touch(item, touch) {
                if (!this._head || !this._tail) {
                    throw new Error("Invalid list");
                }
                if (touch !== Touch.First && touch !== Touch.Last) {
                    return;
                }
                if (touch === Touch.First) {
                    if (item === this._head) {
                        return;
                    }
                    const next = item.next;
                    const previous = item.previous;
                    if (item === this._tail) {
                        previous.next = void 0;
                        this._tail = previous;
                    } else {
                        next.previous = previous;
                        previous.next = next;
                    }
                    item.previous = void 0;
                    item.next = this._head;
                    this._head.previous = item;
                    this._head = item;
                    this._state++;
                } else if (touch === Touch.Last) {
                    if (item === this._tail) {
                        return;
                    }
                    const next = item.next;
                    const previous = item.previous;
                    if (item === this._head) {
                        next.previous = void 0;
                        this._head = next;
                    } else {
                        next.previous = previous;
                        previous.next = next;
                    }
                    item.next = void 0;
                    item.previous = this._tail;
                    this._tail.next = item;
                    this._tail = item;
                    this._state++;
                }
            }
            toJSON() {
                const data = [];
                this.forEach((value1, key)=>{
                    data.push([
                        key,
                        value1
                    ]);
                });
                return data;
            }
            fromJSON(data) {
                this.clear();
                for (const [key, value1] of data){
                    this.set(key, value1);
                }
            }
            constructor(){
                this[Symbol.toStringTag] = "LinkedMap";
                this._map = /* @__PURE__ */ new Map();
                this._head = void 0;
                this._tail = void 0;
                this._size = 0;
                this._state = 0;
            }
        };
        exports.LinkedMap = LinkedMap;
        var LRUCache = class extends LinkedMap {
            get limit() {
                return this._limit;
            }
            set limit(limit) {
                this._limit = limit;
                this.checkTrim();
            }
            get ratio() {
                return this._ratio;
            }
            set ratio(ratio) {
                this._ratio = Math.min(Math.max(0, ratio), 1);
                this.checkTrim();
            }
            get(key, touch = Touch.AsNew) {
                return super.get(key, touch);
            }
            peek(key) {
                return super.get(key, Touch.None);
            }
            set(key, value1) {
                super.set(key, value1, Touch.Last);
                this.checkTrim();
                return this;
            }
            checkTrim() {
                if (this.size > this._limit) {
                    this.trimOld(Math.round(this._limit * this._ratio));
                }
            }
            constructor(limit, ratio = 1){
                super();
                this._limit = limit;
                this._ratio = Math.min(Math.max(0, ratio), 1);
            }
        };
        exports.LRUCache = LRUCache;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/connection.js
var require_connection = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/connection.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createMessageConnection = exports.ConnectionOptions = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.Trace = exports.NullLogger = exports.ProgressType = void 0;
        var ral_1 = require_ral();
        var Is2 = require_is();
        var messages_1 = require_messages();
        var linkedMap_1 = require_linkedMap();
        var events_1 = require_events();
        var cancellation_1 = require_cancellation();
        var CancelNotification;
        (function(CancelNotification2) {
            CancelNotification2.type = new messages_1.NotificationType("$/cancelRequest");
        })(CancelNotification || (CancelNotification = {}));
        var ProgressNotification;
        (function(ProgressNotification2) {
            ProgressNotification2.type = new messages_1.NotificationType("$/progress");
        })(ProgressNotification || (ProgressNotification = {}));
        var ProgressType = class {
            constructor(){}
        };
        exports.ProgressType = ProgressType;
        var StarRequestHandler;
        (function(StarRequestHandler2) {
            function is(value1) {
                return Is2.func(value1);
            }
            StarRequestHandler2.is = is;
        })(StarRequestHandler || (StarRequestHandler = {}));
        exports.NullLogger = Object.freeze({
            error: ()=>{},
            warn: ()=>{},
            info: ()=>{},
            log: ()=>{}
        });
        var Trace;
        (function(Trace2) {
            Trace2[Trace2["Off"] = 0] = "Off";
            Trace2[Trace2["Messages"] = 1] = "Messages";
            Trace2[Trace2["Verbose"] = 2] = "Verbose";
        })(Trace = exports.Trace || (exports.Trace = {}));
        (function(Trace2) {
            function fromString(value1) {
                if (!Is2.string(value1)) {
                    return Trace2.Off;
                }
                value1 = value1.toLowerCase();
                switch(value1){
                    case "off":
                        return Trace2.Off;
                    case "messages":
                        return Trace2.Messages;
                    case "verbose":
                        return Trace2.Verbose;
                    default:
                        return Trace2.Off;
                }
            }
            Trace2.fromString = fromString;
            function toString(value1) {
                switch(value1){
                    case Trace2.Off:
                        return "off";
                    case Trace2.Messages:
                        return "messages";
                    case Trace2.Verbose:
                        return "verbose";
                    default:
                        return "off";
                }
            }
            Trace2.toString = toString;
        })(Trace = exports.Trace || (exports.Trace = {}));
        var TraceFormat;
        (function(TraceFormat2) {
            TraceFormat2["Text"] = "text";
            TraceFormat2["JSON"] = "json";
        })(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
        (function(TraceFormat2) {
            function fromString(value1) {
                value1 = value1.toLowerCase();
                if (value1 === "json") {
                    return TraceFormat2.JSON;
                } else {
                    return TraceFormat2.Text;
                }
            }
            TraceFormat2.fromString = fromString;
        })(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
        var SetTraceNotification;
        (function(SetTraceNotification2) {
            SetTraceNotification2.type = new messages_1.NotificationType("$/setTrace");
        })(SetTraceNotification = exports.SetTraceNotification || (exports.SetTraceNotification = {}));
        var LogTraceNotification;
        (function(LogTraceNotification2) {
            LogTraceNotification2.type = new messages_1.NotificationType("$/logTrace");
        })(LogTraceNotification = exports.LogTraceNotification || (exports.LogTraceNotification = {}));
        var ConnectionErrors;
        (function(ConnectionErrors2) {
            ConnectionErrors2[ConnectionErrors2["Closed"] = 1] = "Closed";
            ConnectionErrors2[ConnectionErrors2["Disposed"] = 2] = "Disposed";
            ConnectionErrors2[ConnectionErrors2["AlreadyListening"] = 3] = "AlreadyListening";
        })(ConnectionErrors = exports.ConnectionErrors || (exports.ConnectionErrors = {}));
        var ConnectionError = class extends Error {
            constructor(code, message){
                super(message);
                this.code = code;
                Object.setPrototypeOf(this, ConnectionError.prototype);
            }
        };
        exports.ConnectionError = ConnectionError;
        var ConnectionStrategy;
        (function(ConnectionStrategy2) {
            function is(value1) {
                const candidate = value1;
                return candidate && Is2.func(candidate.cancelUndispatched);
            }
            ConnectionStrategy2.is = is;
        })(ConnectionStrategy = exports.ConnectionStrategy || (exports.ConnectionStrategy = {}));
        var CancellationReceiverStrategy;
        (function(CancellationReceiverStrategy2) {
            CancellationReceiverStrategy2.Message = Object.freeze({
                createCancellationTokenSource (_) {
                    return new cancellation_1.CancellationTokenSource();
                }
            });
            function is(value1) {
                const candidate = value1;
                return candidate && Is2.func(candidate.createCancellationTokenSource);
            }
            CancellationReceiverStrategy2.is = is;
        })(CancellationReceiverStrategy = exports.CancellationReceiverStrategy || (exports.CancellationReceiverStrategy = {}));
        var CancellationSenderStrategy;
        (function(CancellationSenderStrategy2) {
            CancellationSenderStrategy2.Message = Object.freeze({
                sendCancellation (conn, id) {
                    conn.sendNotification(CancelNotification.type, {
                        id
                    });
                },
                cleanup (_) {}
            });
            function is(value1) {
                const candidate = value1;
                return candidate && Is2.func(candidate.sendCancellation) && Is2.func(candidate.cleanup);
            }
            CancellationSenderStrategy2.is = is;
        })(CancellationSenderStrategy = exports.CancellationSenderStrategy || (exports.CancellationSenderStrategy = {}));
        var CancellationStrategy;
        (function(CancellationStrategy2) {
            CancellationStrategy2.Message = Object.freeze({
                receiver: CancellationReceiverStrategy.Message,
                sender: CancellationSenderStrategy.Message
            });
            function is(value1) {
                const candidate = value1;
                return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);
            }
            CancellationStrategy2.is = is;
        })(CancellationStrategy = exports.CancellationStrategy || (exports.CancellationStrategy = {}));
        var ConnectionOptions;
        (function(ConnectionOptions2) {
            function is(value1) {
                const candidate = value1;
                return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy));
            }
            ConnectionOptions2.is = is;
        })(ConnectionOptions = exports.ConnectionOptions || (exports.ConnectionOptions = {}));
        var ConnectionState;
        (function(ConnectionState2) {
            ConnectionState2[ConnectionState2["New"] = 1] = "New";
            ConnectionState2[ConnectionState2["Listening"] = 2] = "Listening";
            ConnectionState2[ConnectionState2["Closed"] = 3] = "Closed";
            ConnectionState2[ConnectionState2["Disposed"] = 4] = "Disposed";
        })(ConnectionState || (ConnectionState = {}));
        function createMessageConnection(messageReader, messageWriter, _logger, options) {
            const logger = _logger !== void 0 ? _logger : exports.NullLogger;
            let sequenceNumber = 0;
            let notificationSquenceNumber = 0;
            let unknownResponseSquenceNumber = 0;
            const version = "2.0";
            let starRequestHandler = void 0;
            const requestHandlers = /* @__PURE__ */ Object.create(null);
            let starNotificationHandler = void 0;
            const notificationHandlers = /* @__PURE__ */ Object.create(null);
            const progressHandlers = /* @__PURE__ */ new Map();
            let timer;
            let messageQueue = new linkedMap_1.LinkedMap();
            let responsePromises = /* @__PURE__ */ Object.create(null);
            let requestTokens = /* @__PURE__ */ Object.create(null);
            let trace = Trace.Off;
            let traceFormat = TraceFormat.Text;
            let tracer;
            let state = ConnectionState.New;
            const errorEmitter = new events_1.Emitter();
            const closeEmitter = new events_1.Emitter();
            const unhandledNotificationEmitter = new events_1.Emitter();
            const unhandledProgressEmitter = new events_1.Emitter();
            const disposeEmitter = new events_1.Emitter();
            const cancellationStrategy = options && options.cancellationStrategy ? options.cancellationStrategy : CancellationStrategy.Message;
            function createRequestQueueKey(id) {
                if (id === null) {
                    throw new Error(`Can't send requests with id null since the response can't be correlated.`);
                }
                return "req-" + id.toString();
            }
            function createResponseQueueKey(id) {
                if (id === null) {
                    return "res-unknown-" + (++unknownResponseSquenceNumber).toString();
                } else {
                    return "res-" + id.toString();
                }
            }
            function createNotificationQueueKey() {
                return "not-" + (++notificationSquenceNumber).toString();
            }
            function addMessageToQueue(queue, message) {
                if (messages_1.isRequestMessage(message)) {
                    queue.set(createRequestQueueKey(message.id), message);
                } else if (messages_1.isResponseMessage(message)) {
                    queue.set(createResponseQueueKey(message.id), message);
                } else {
                    queue.set(createNotificationQueueKey(), message);
                }
            }
            function cancelUndispatched(_message) {
                return void 0;
            }
            function isListening() {
                return state === ConnectionState.Listening;
            }
            function isClosed() {
                return state === ConnectionState.Closed;
            }
            function isDisposed() {
                return state === ConnectionState.Disposed;
            }
            function closeHandler() {
                if (state === ConnectionState.New || state === ConnectionState.Listening) {
                    state = ConnectionState.Closed;
                    closeEmitter.fire(void 0);
                }
            }
            function readErrorHandler(error) {
                errorEmitter.fire([
                    error,
                    void 0,
                    void 0
                ]);
            }
            function writeErrorHandler(data) {
                errorEmitter.fire(data);
            }
            messageReader.onClose(closeHandler);
            messageReader.onError(readErrorHandler);
            messageWriter.onClose(closeHandler);
            messageWriter.onError(writeErrorHandler);
            function triggerMessageQueue() {
                if (timer || messageQueue.size === 0) {
                    return;
                }
                timer = ral_1.default().timer.setImmediate(()=>{
                    timer = void 0;
                    processMessageQueue();
                });
            }
            function processMessageQueue() {
                if (messageQueue.size === 0) {
                    return;
                }
                const message = messageQueue.shift();
                try {
                    if (messages_1.isRequestMessage(message)) {
                        handleRequest(message);
                    } else if (messages_1.isNotificationMessage(message)) {
                        handleNotification(message);
                    } else if (messages_1.isResponseMessage(message)) {
                        handleResponse(message);
                    } else {
                        handleInvalidMessage(message);
                    }
                } finally{
                    triggerMessageQueue();
                }
            }
            const callback = (message)=>{
                try {
                    if (messages_1.isNotificationMessage(message) && message.method === CancelNotification.type.method) {
                        const key = createRequestQueueKey(message.params.id);
                        const toCancel = messageQueue.get(key);
                        if (messages_1.isRequestMessage(toCancel)) {
                            const strategy = options === null || options === void 0 ? void 0 : options.connectionStrategy;
                            const response = strategy && strategy.cancelUndispatched ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);
                            if (response && (response.error !== void 0 || response.result !== void 0)) {
                                messageQueue.delete(key);
                                response.id = toCancel.id;
                                traceSendingResponse(response, message.method, Date.now());
                                messageWriter.write(response);
                                return;
                            }
                        }
                    }
                    addMessageToQueue(messageQueue, message);
                } finally{
                    triggerMessageQueue();
                }
            };
            function handleRequest(requestMessage) {
                if (isDisposed()) {
                    return;
                }
                function reply(resultOrError, method, startTime2) {
                    const message = {
                        jsonrpc: version,
                        id: requestMessage.id
                    };
                    if (resultOrError instanceof messages_1.ResponseError) {
                        message.error = resultOrError.toJson();
                    } else {
                        message.result = resultOrError === void 0 ? null : resultOrError;
                    }
                    traceSendingResponse(message, method, startTime2);
                    messageWriter.write(message);
                }
                function replyError(error, method, startTime2) {
                    const message = {
                        jsonrpc: version,
                        id: requestMessage.id,
                        error: error.toJson()
                    };
                    traceSendingResponse(message, method, startTime2);
                    messageWriter.write(message);
                }
                function replySuccess(result, method, startTime2) {
                    if (result === void 0) {
                        result = null;
                    }
                    const message = {
                        jsonrpc: version,
                        id: requestMessage.id,
                        result
                    };
                    traceSendingResponse(message, method, startTime2);
                    messageWriter.write(message);
                }
                traceReceivedRequest(requestMessage);
                const element = requestHandlers[requestMessage.method];
                let type;
                let requestHandler;
                if (element) {
                    type = element.type;
                    requestHandler = element.handler;
                }
                const startTime = Date.now();
                if (requestHandler || starRequestHandler) {
                    const tokenKey = String(requestMessage.id);
                    const cancellationSource = cancellationStrategy.receiver.createCancellationTokenSource(tokenKey);
                    requestTokens[tokenKey] = cancellationSource;
                    try {
                        let handlerResult;
                        if (requestHandler) {
                            if (requestMessage.params === void 0) {
                                if (type !== void 0 && type.numberOfParams !== 0) {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines ${type.numberOfParams} params but recevied none.`), requestMessage.method, startTime);
                                    return;
                                }
                                handlerResult = requestHandler(cancellationSource.token);
                            } else if (Array.isArray(requestMessage.params)) {
                                if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byName) {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by name but received parameters by position`), requestMessage.method, startTime);
                                    return;
                                }
                                handlerResult = requestHandler(...requestMessage.params, cancellationSource.token);
                            } else {
                                if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by position but received parameters by name`), requestMessage.method, startTime);
                                    return;
                                }
                                handlerResult = requestHandler(requestMessage.params, cancellationSource.token);
                            }
                        } else if (starRequestHandler) {
                            handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
                        }
                        const promise = handlerResult;
                        if (!handlerResult) {
                            delete requestTokens[tokenKey];
                            replySuccess(handlerResult, requestMessage.method, startTime);
                        } else if (promise.then) {
                            promise.then((resultOrError)=>{
                                delete requestTokens[tokenKey];
                                reply(resultOrError, requestMessage.method, startTime);
                            }, (error)=>{
                                delete requestTokens[tokenKey];
                                if (error instanceof messages_1.ResponseError) {
                                    replyError(error, requestMessage.method, startTime);
                                } else if (error && Is2.string(error.message)) {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                                } else {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                                }
                            });
                        } else {
                            delete requestTokens[tokenKey];
                            reply(handlerResult, requestMessage.method, startTime);
                        }
                    } catch (error) {
                        delete requestTokens[tokenKey];
                        if (error instanceof messages_1.ResponseError) {
                            reply(error, requestMessage.method, startTime);
                        } else if (error && Is2.string(error.message)) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                        } else {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                        }
                    }
                } else {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);
                }
            }
            function handleResponse(responseMessage) {
                if (isDisposed()) {
                    return;
                }
                if (responseMessage.id === null) {
                    if (responseMessage.error) {
                        logger.error(`Received response message without id: Error is: 
${JSON.stringify(responseMessage.error, void 0, 4)}`);
                    } else {
                        logger.error(`Received response message without id. No further error information provided.`);
                    }
                } else {
                    const key = String(responseMessage.id);
                    const responsePromise = responsePromises[key];
                    traceReceivedResponse(responseMessage, responsePromise);
                    if (responsePromise) {
                        delete responsePromises[key];
                        try {
                            if (responseMessage.error) {
                                const error = responseMessage.error;
                                responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));
                            } else if (responseMessage.result !== void 0) {
                                responsePromise.resolve(responseMessage.result);
                            } else {
                                throw new Error("Should never happen.");
                            }
                        } catch (error) {
                            if (error.message) {
                                logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);
                            } else {
                                logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);
                            }
                        }
                    }
                }
            }
            function handleNotification(message) {
                if (isDisposed()) {
                    return;
                }
                let type = void 0;
                let notificationHandler;
                if (message.method === CancelNotification.type.method) {
                    notificationHandler = (params)=>{
                        const id = params.id;
                        const source = requestTokens[String(id)];
                        if (source) {
                            source.cancel();
                        }
                    };
                } else {
                    const element = notificationHandlers[message.method];
                    if (element) {
                        notificationHandler = element.handler;
                        type = element.type;
                    }
                }
                if (notificationHandler || starNotificationHandler) {
                    try {
                        traceReceivedNotification(message);
                        if (notificationHandler) {
                            if (message.params === void 0) {
                                if (type !== void 0) {
                                    if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {
                                        logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but recevied none.`);
                                    }
                                }
                                notificationHandler();
                            } else if (Array.isArray(message.params)) {
                                if (type !== void 0) {
                                    if (type.parameterStructures === messages_1.ParameterStructures.byName) {
                                        logger.error(`Notification ${message.method} defines parameters by name but received parameters by position`);
                                    }
                                    if (type.numberOfParams !== message.params.length) {
                                        logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received ${message.params.length} argumennts`);
                                    }
                                }
                                notificationHandler(...message.params);
                            } else {
                                if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                                    logger.error(`Notification ${message.method} defines parameters by position but received parameters by name`);
                                }
                                notificationHandler(message.params);
                            }
                        } else if (starNotificationHandler) {
                            starNotificationHandler(message.method, message.params);
                        }
                    } catch (error) {
                        if (error.message) {
                            logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);
                        } else {
                            logger.error(`Notification handler '${message.method}' failed unexpectedly.`);
                        }
                    }
                } else {
                    unhandledNotificationEmitter.fire(message);
                }
            }
            function handleInvalidMessage(message) {
                if (!message) {
                    logger.error("Received empty message.");
                    return;
                }
                logger.error(`Received message which is neither a response nor a notification message:
${JSON.stringify(message, null, 4)}`);
                const responseMessage = message;
                if (Is2.string(responseMessage.id) || Is2.number(responseMessage.id)) {
                    const key = String(responseMessage.id);
                    const responseHandler = responsePromises[key];
                    if (responseHandler) {
                        responseHandler.reject(new Error("The received response has neither a result nor an error property."));
                    }
                }
            }
            function traceSendingRequest(message) {
                if (trace === Trace.Off || !tracer) {
                    return;
                }
                if (traceFormat === TraceFormat.Text) {
                    let data = void 0;
                    if (trace === Trace.Verbose && message.params) {
                        data = `Params: ${JSON.stringify(message.params, null, 4)}

`;
                    }
                    tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);
                } else {
                    logLSPMessage("send-request", message);
                }
            }
            function traceSendingNotification(message) {
                if (trace === Trace.Off || !tracer) {
                    return;
                }
                if (traceFormat === TraceFormat.Text) {
                    let data = void 0;
                    if (trace === Trace.Verbose) {
                        if (message.params) {
                            data = `Params: ${JSON.stringify(message.params, null, 4)}

`;
                        } else {
                            data = "No parameters provided.\n\n";
                        }
                    }
                    tracer.log(`Sending notification '${message.method}'.`, data);
                } else {
                    logLSPMessage("send-notification", message);
                }
            }
            function traceSendingResponse(message, method, startTime) {
                if (trace === Trace.Off || !tracer) {
                    return;
                }
                if (traceFormat === TraceFormat.Text) {
                    let data = void 0;
                    if (trace === Trace.Verbose) {
                        if (message.error && message.error.data) {
                            data = `Error data: ${JSON.stringify(message.error.data, null, 4)}

`;
                        } else {
                            if (message.result) {
                                data = `Result: ${JSON.stringify(message.result, null, 4)}

`;
                            } else if (message.error === void 0) {
                                data = "No result returned.\n\n";
                            }
                        }
                    }
                    tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);
                } else {
                    logLSPMessage("send-response", message);
                }
            }
            function traceReceivedRequest(message) {
                if (trace === Trace.Off || !tracer) {
                    return;
                }
                if (traceFormat === TraceFormat.Text) {
                    let data = void 0;
                    if (trace === Trace.Verbose && message.params) {
                        data = `Params: ${JSON.stringify(message.params, null, 4)}

`;
                    }
                    tracer.log(`Received request '${message.method} - (${message.id})'.`, data);
                } else {
                    logLSPMessage("receive-request", message);
                }
            }
            function traceReceivedNotification(message) {
                if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
                    return;
                }
                if (traceFormat === TraceFormat.Text) {
                    let data = void 0;
                    if (trace === Trace.Verbose) {
                        if (message.params) {
                            data = `Params: ${JSON.stringify(message.params, null, 4)}

`;
                        } else {
                            data = "No parameters provided.\n\n";
                        }
                    }
                    tracer.log(`Received notification '${message.method}'.`, data);
                } else {
                    logLSPMessage("receive-notification", message);
                }
            }
            function traceReceivedResponse(message, responsePromise) {
                if (trace === Trace.Off || !tracer) {
                    return;
                }
                if (traceFormat === TraceFormat.Text) {
                    let data = void 0;
                    if (trace === Trace.Verbose) {
                        if (message.error && message.error.data) {
                            data = `Error data: ${JSON.stringify(message.error.data, null, 4)}

`;
                        } else {
                            if (message.result) {
                                data = `Result: ${JSON.stringify(message.result, null, 4)}

`;
                            } else if (message.error === void 0) {
                                data = "No result returned.\n\n";
                            }
                        }
                    }
                    if (responsePromise) {
                        const error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : "";
                        tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);
                    } else {
                        tracer.log(`Received response ${message.id} without active response promise.`, data);
                    }
                } else {
                    logLSPMessage("receive-response", message);
                }
            }
            function logLSPMessage(type, message) {
                if (!tracer || trace === Trace.Off) {
                    return;
                }
                const lspMessage = {
                    isLSPMessage: true,
                    type,
                    message,
                    timestamp: Date.now()
                };
                tracer.log(lspMessage);
            }
            function throwIfClosedOrDisposed() {
                if (isClosed()) {
                    throw new ConnectionError(ConnectionErrors.Closed, "Connection is closed.");
                }
                if (isDisposed()) {
                    throw new ConnectionError(ConnectionErrors.Disposed, "Connection is disposed.");
                }
            }
            function throwIfListening() {
                if (isListening()) {
                    throw new ConnectionError(ConnectionErrors.AlreadyListening, "Connection is already listening");
                }
            }
            function throwIfNotListening() {
                if (!isListening()) {
                    throw new Error("Call listen() first.");
                }
            }
            function undefinedToNull(param) {
                if (param === void 0) {
                    return null;
                } else {
                    return param;
                }
            }
            function nullToUndefined(param) {
                if (param === null) {
                    return void 0;
                } else {
                    return param;
                }
            }
            function isNamedParam(param) {
                return param !== void 0 && param !== null && !Array.isArray(param) && typeof param === "object";
            }
            function computeSingleParam(parameterStructures, param) {
                switch(parameterStructures){
                    case messages_1.ParameterStructures.auto:
                        if (isNamedParam(param)) {
                            return nullToUndefined(param);
                        } else {
                            return [
                                undefinedToNull(param)
                            ];
                        }
                        break;
                    case messages_1.ParameterStructures.byName:
                        if (!isNamedParam(param)) {
                            throw new Error(`Recevied parameters by name but param is not an object literal.`);
                        }
                        return nullToUndefined(param);
                    case messages_1.ParameterStructures.byPosition:
                        return [
                            undefinedToNull(param)
                        ];
                    default:
                        throw new Error(`Unknown parameter structure ${parameterStructures.toString()}`);
                }
            }
            function computeMessageParams(type, params) {
                let result;
                const numberOfParams = type.numberOfParams;
                switch(numberOfParams){
                    case 0:
                        result = void 0;
                        break;
                    case 1:
                        result = computeSingleParam(type.parameterStructures, params[0]);
                        break;
                    default:
                        result = [];
                        for(let i = 0; i < params.length && i < numberOfParams; i++){
                            result.push(undefinedToNull(params[i]));
                        }
                        if (params.length < numberOfParams) {
                            for(let i = params.length; i < numberOfParams; i++){
                                result.push(null);
                            }
                        }
                        break;
                }
                return result;
            }
            const connection = {
                sendNotification: (type, ...args)=>{
                    throwIfClosedOrDisposed();
                    let method;
                    let messageParams;
                    if (Is2.string(type)) {
                        method = type;
                        const first = args[0];
                        let paramStart = 0;
                        let parameterStructures = messages_1.ParameterStructures.auto;
                        if (messages_1.ParameterStructures.is(first)) {
                            paramStart = 1;
                            parameterStructures = first;
                        }
                        let paramEnd = args.length;
                        const numberOfParams = paramEnd - paramStart;
                        switch(numberOfParams){
                            case 0:
                                messageParams = void 0;
                                break;
                            case 1:
                                messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                                break;
                            default:
                                if (parameterStructures === messages_1.ParameterStructures.byName) {
                                    throw new Error(`Recevied ${numberOfParams} parameters for 'by Name' notification parameter structure.`);
                                }
                                messageParams = args.slice(paramStart, paramEnd).map((value1)=>undefinedToNull(value1));
                                break;
                        }
                    } else {
                        const params = args;
                        method = type.method;
                        messageParams = computeMessageParams(type, params);
                    }
                    const notificationMessage = {
                        jsonrpc: version,
                        method,
                        params: messageParams
                    };
                    traceSendingNotification(notificationMessage);
                    messageWriter.write(notificationMessage);
                },
                onNotification: (type, handler)=>{
                    throwIfClosedOrDisposed();
                    let method;
                    if (Is2.func(type)) {
                        starNotificationHandler = type;
                    } else if (handler) {
                        if (Is2.string(type)) {
                            method = type;
                            notificationHandlers[type] = {
                                type: void 0,
                                handler
                            };
                        } else {
                            method = type.method;
                            notificationHandlers[type.method] = {
                                type,
                                handler
                            };
                        }
                    }
                    return {
                        dispose: ()=>{
                            if (method !== void 0) {
                                delete notificationHandlers[method];
                            } else {
                                starNotificationHandler = void 0;
                            }
                        }
                    };
                },
                onProgress: (_type, token, handler)=>{
                    if (progressHandlers.has(token)) {
                        throw new Error(`Progress handler for token ${token} already registered`);
                    }
                    progressHandlers.set(token, handler);
                    return {
                        dispose: ()=>{
                            progressHandlers.delete(token);
                        }
                    };
                },
                sendProgress: (_type, token, value1)=>{
                    connection.sendNotification(ProgressNotification.type, {
                        token,
                        value: value1
                    });
                },
                onUnhandledProgress: unhandledProgressEmitter.event,
                sendRequest: (type, ...args)=>{
                    throwIfClosedOrDisposed();
                    throwIfNotListening();
                    let method;
                    let messageParams;
                    let token = void 0;
                    if (Is2.string(type)) {
                        method = type;
                        const first = args[0];
                        const last = args[args.length - 1];
                        let paramStart = 0;
                        let parameterStructures = messages_1.ParameterStructures.auto;
                        if (messages_1.ParameterStructures.is(first)) {
                            paramStart = 1;
                            parameterStructures = first;
                        }
                        let paramEnd = args.length;
                        if (cancellation_1.CancellationToken.is(last)) {
                            paramEnd = paramEnd - 1;
                            token = last;
                        }
                        const numberOfParams = paramEnd - paramStart;
                        switch(numberOfParams){
                            case 0:
                                messageParams = void 0;
                                break;
                            case 1:
                                messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                                break;
                            default:
                                if (parameterStructures === messages_1.ParameterStructures.byName) {
                                    throw new Error(`Recevied ${numberOfParams} parameters for 'by Name' request parameter structure.`);
                                }
                                messageParams = args.slice(paramStart, paramEnd).map((value1)=>undefinedToNull(value1));
                                break;
                        }
                    } else {
                        const params = args;
                        method = type.method;
                        messageParams = computeMessageParams(type, params);
                        const numberOfParams = type.numberOfParams;
                        token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : void 0;
                    }
                    const id = sequenceNumber++;
                    let disposable;
                    if (token) {
                        disposable = token.onCancellationRequested(()=>{
                            cancellationStrategy.sender.sendCancellation(connection, id);
                        });
                    }
                    const result = new Promise((resolve2, reject)=>{
                        const requestMessage = {
                            jsonrpc: version,
                            id,
                            method,
                            params: messageParams
                        };
                        const resolveWithCleanup = (r)=>{
                            resolve2(r);
                            cancellationStrategy.sender.cleanup(id);
                            disposable === null || disposable === void 0 ? void 0 : disposable.dispose();
                        };
                        const rejectWithCleanup = (r)=>{
                            reject(r);
                            cancellationStrategy.sender.cleanup(id);
                            disposable === null || disposable === void 0 ? void 0 : disposable.dispose();
                        };
                        let responsePromise = {
                            method,
                            timerStart: Date.now(),
                            resolve: resolveWithCleanup,
                            reject: rejectWithCleanup
                        };
                        traceSendingRequest(requestMessage);
                        try {
                            messageWriter.write(requestMessage);
                        } catch (e) {
                            responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, e.message ? e.message : "Unknown reason"));
                            responsePromise = null;
                        }
                        if (responsePromise) {
                            responsePromises[String(id)] = responsePromise;
                        }
                    });
                    return result;
                },
                onRequest: (type, handler)=>{
                    throwIfClosedOrDisposed();
                    let method = null;
                    if (StarRequestHandler.is(type)) {
                        method = void 0;
                        starRequestHandler = type;
                    } else if (Is2.string(type)) {
                        method = null;
                        if (handler !== void 0) {
                            method = type;
                            requestHandlers[type] = {
                                handler,
                                type: void 0
                            };
                        }
                    } else {
                        if (handler !== void 0) {
                            method = type.method;
                            requestHandlers[type.method] = {
                                type,
                                handler
                            };
                        }
                    }
                    return {
                        dispose: ()=>{
                            if (method === null) {
                                return;
                            }
                            if (method !== void 0) {
                                delete requestHandlers[method];
                            } else {
                                starRequestHandler = void 0;
                            }
                        }
                    };
                },
                trace: (_value, _tracer, sendNotificationOrTraceOptions)=>{
                    let _sendNotification = false;
                    let _traceFormat = TraceFormat.Text;
                    if (sendNotificationOrTraceOptions !== void 0) {
                        if (Is2.boolean(sendNotificationOrTraceOptions)) {
                            _sendNotification = sendNotificationOrTraceOptions;
                        } else {
                            _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;
                            _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;
                        }
                    }
                    trace = _value;
                    traceFormat = _traceFormat;
                    if (trace === Trace.Off) {
                        tracer = void 0;
                    } else {
                        tracer = _tracer;
                    }
                    if (_sendNotification && !isClosed() && !isDisposed()) {
                        connection.sendNotification(SetTraceNotification.type, {
                            value: Trace.toString(_value)
                        });
                    }
                },
                onError: errorEmitter.event,
                onClose: closeEmitter.event,
                onUnhandledNotification: unhandledNotificationEmitter.event,
                onDispose: disposeEmitter.event,
                end: ()=>{
                    messageWriter.end();
                },
                dispose: ()=>{
                    if (isDisposed()) {
                        return;
                    }
                    state = ConnectionState.Disposed;
                    disposeEmitter.fire(void 0);
                    const error = new Error("Connection got disposed.");
                    Object.keys(responsePromises).forEach((key)=>{
                        responsePromises[key].reject(error);
                    });
                    responsePromises = /* @__PURE__ */ Object.create(null);
                    requestTokens = /* @__PURE__ */ Object.create(null);
                    messageQueue = new linkedMap_1.LinkedMap();
                    if (Is2.func(messageWriter.dispose)) {
                        messageWriter.dispose();
                    }
                    if (Is2.func(messageReader.dispose)) {
                        messageReader.dispose();
                    }
                },
                listen: ()=>{
                    throwIfClosedOrDisposed();
                    throwIfListening();
                    state = ConnectionState.Listening;
                    messageReader.listen(callback);
                },
                inspect: ()=>{
                    ral_1.default().console.log("inspect");
                }
            };
            connection.onNotification(LogTraceNotification.type, (params)=>{
                if (trace === Trace.Off || !tracer) {
                    return;
                }
                tracer.log(params.message, trace === Trace.Verbose ? params.verbose : void 0);
            });
            connection.onNotification(ProgressNotification.type, (params)=>{
                const handler = progressHandlers.get(params.token);
                if (handler) {
                    handler(params.value);
                } else {
                    unhandledProgressEmitter.fire(params);
                }
            });
            return connection;
        }
        exports.createMessageConnection = createMessageConnection;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/api.js
var require_api = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/common/api.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.Trace = exports.ProgressType = exports.createMessageConnection = exports.NullLogger = exports.ConnectionOptions = exports.ConnectionStrategy = exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = exports.CancellationToken = exports.CancellationTokenSource = exports.Emitter = exports.Event = exports.Disposable = exports.ParameterStructures = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.ErrorCodes = exports.ResponseError = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType0 = exports.RequestType = exports.RAL = void 0;
        exports.CancellationStrategy = void 0;
        var messages_1 = require_messages();
        Object.defineProperty(exports, "RequestType", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType;
            }
        });
        Object.defineProperty(exports, "RequestType0", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType0;
            }
        });
        Object.defineProperty(exports, "RequestType1", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType1;
            }
        });
        Object.defineProperty(exports, "RequestType2", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType2;
            }
        });
        Object.defineProperty(exports, "RequestType3", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType3;
            }
        });
        Object.defineProperty(exports, "RequestType4", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType4;
            }
        });
        Object.defineProperty(exports, "RequestType5", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType5;
            }
        });
        Object.defineProperty(exports, "RequestType6", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType6;
            }
        });
        Object.defineProperty(exports, "RequestType7", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType7;
            }
        });
        Object.defineProperty(exports, "RequestType8", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType8;
            }
        });
        Object.defineProperty(exports, "RequestType9", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType9;
            }
        });
        Object.defineProperty(exports, "ResponseError", {
            enumerable: true,
            get: function() {
                return messages_1.ResponseError;
            }
        });
        Object.defineProperty(exports, "ErrorCodes", {
            enumerable: true,
            get: function() {
                return messages_1.ErrorCodes;
            }
        });
        Object.defineProperty(exports, "NotificationType", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType;
            }
        });
        Object.defineProperty(exports, "NotificationType0", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType0;
            }
        });
        Object.defineProperty(exports, "NotificationType1", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType1;
            }
        });
        Object.defineProperty(exports, "NotificationType2", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType2;
            }
        });
        Object.defineProperty(exports, "NotificationType3", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType3;
            }
        });
        Object.defineProperty(exports, "NotificationType4", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType4;
            }
        });
        Object.defineProperty(exports, "NotificationType5", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType5;
            }
        });
        Object.defineProperty(exports, "NotificationType6", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType6;
            }
        });
        Object.defineProperty(exports, "NotificationType7", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType7;
            }
        });
        Object.defineProperty(exports, "NotificationType8", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType8;
            }
        });
        Object.defineProperty(exports, "NotificationType9", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType9;
            }
        });
        Object.defineProperty(exports, "ParameterStructures", {
            enumerable: true,
            get: function() {
                return messages_1.ParameterStructures;
            }
        });
        var disposable_1 = require_disposable();
        Object.defineProperty(exports, "Disposable", {
            enumerable: true,
            get: function() {
                return disposable_1.Disposable;
            }
        });
        var events_1 = require_events();
        Object.defineProperty(exports, "Event", {
            enumerable: true,
            get: function() {
                return events_1.Event;
            }
        });
        Object.defineProperty(exports, "Emitter", {
            enumerable: true,
            get: function() {
                return events_1.Emitter;
            }
        });
        var cancellation_1 = require_cancellation();
        Object.defineProperty(exports, "CancellationTokenSource", {
            enumerable: true,
            get: function() {
                return cancellation_1.CancellationTokenSource;
            }
        });
        Object.defineProperty(exports, "CancellationToken", {
            enumerable: true,
            get: function() {
                return cancellation_1.CancellationToken;
            }
        });
        var messageReader_1 = require_messageReader();
        Object.defineProperty(exports, "MessageReader", {
            enumerable: true,
            get: function() {
                return messageReader_1.MessageReader;
            }
        });
        Object.defineProperty(exports, "AbstractMessageReader", {
            enumerable: true,
            get: function() {
                return messageReader_1.AbstractMessageReader;
            }
        });
        Object.defineProperty(exports, "ReadableStreamMessageReader", {
            enumerable: true,
            get: function() {
                return messageReader_1.ReadableStreamMessageReader;
            }
        });
        var messageWriter_1 = require_messageWriter();
        Object.defineProperty(exports, "MessageWriter", {
            enumerable: true,
            get: function() {
                return messageWriter_1.MessageWriter;
            }
        });
        Object.defineProperty(exports, "AbstractMessageWriter", {
            enumerable: true,
            get: function() {
                return messageWriter_1.AbstractMessageWriter;
            }
        });
        Object.defineProperty(exports, "WriteableStreamMessageWriter", {
            enumerable: true,
            get: function() {
                return messageWriter_1.WriteableStreamMessageWriter;
            }
        });
        var connection_1 = require_connection();
        Object.defineProperty(exports, "ConnectionStrategy", {
            enumerable: true,
            get: function() {
                return connection_1.ConnectionStrategy;
            }
        });
        Object.defineProperty(exports, "ConnectionOptions", {
            enumerable: true,
            get: function() {
                return connection_1.ConnectionOptions;
            }
        });
        Object.defineProperty(exports, "NullLogger", {
            enumerable: true,
            get: function() {
                return connection_1.NullLogger;
            }
        });
        Object.defineProperty(exports, "createMessageConnection", {
            enumerable: true,
            get: function() {
                return connection_1.createMessageConnection;
            }
        });
        Object.defineProperty(exports, "ProgressType", {
            enumerable: true,
            get: function() {
                return connection_1.ProgressType;
            }
        });
        Object.defineProperty(exports, "Trace", {
            enumerable: true,
            get: function() {
                return connection_1.Trace;
            }
        });
        Object.defineProperty(exports, "TraceFormat", {
            enumerable: true,
            get: function() {
                return connection_1.TraceFormat;
            }
        });
        Object.defineProperty(exports, "SetTraceNotification", {
            enumerable: true,
            get: function() {
                return connection_1.SetTraceNotification;
            }
        });
        Object.defineProperty(exports, "LogTraceNotification", {
            enumerable: true,
            get: function() {
                return connection_1.LogTraceNotification;
            }
        });
        Object.defineProperty(exports, "ConnectionErrors", {
            enumerable: true,
            get: function() {
                return connection_1.ConnectionErrors;
            }
        });
        Object.defineProperty(exports, "ConnectionError", {
            enumerable: true,
            get: function() {
                return connection_1.ConnectionError;
            }
        });
        Object.defineProperty(exports, "CancellationReceiverStrategy", {
            enumerable: true,
            get: function() {
                return connection_1.CancellationReceiverStrategy;
            }
        });
        Object.defineProperty(exports, "CancellationSenderStrategy", {
            enumerable: true,
            get: function() {
                return connection_1.CancellationSenderStrategy;
            }
        });
        Object.defineProperty(exports, "CancellationStrategy", {
            enumerable: true,
            get: function() {
                return connection_1.CancellationStrategy;
            }
        });
        var ral_1 = require_ral();
        exports.RAL = ral_1.default;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/browser/main.js
var require_main = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/lib/browser/main.js" (exports) {
        "use strict";
        var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            Object.defineProperty(o, k2, {
                enumerable: true,
                get: function() {
                    return m[k];
                }
            });
        } : function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
        });
        var __exportStar = exports && exports.__exportStar || function(m, exports2) {
            for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createMessageConnection = exports.BrowserMessageWriter = exports.BrowserMessageReader = void 0;
        var ril_1 = require_ril();
        ril_1.default.install();
        var api_1 = require_api();
        __exportStar(require_api(), exports);
        var BrowserMessageReader = class extends api_1.AbstractMessageReader {
            listen(callback) {
                return this._onData.event(callback);
            }
            constructor(context){
                super();
                this._onData = new api_1.Emitter();
                this._messageListener = (event)=>{
                    this._onData.fire(event.data);
                };
                context.addEventListener("error", (event)=>this.fireError(event));
                context.onmessage = this._messageListener;
            }
        };
        exports.BrowserMessageReader = BrowserMessageReader;
        var BrowserMessageWriter = class extends api_1.AbstractMessageWriter {
            write(msg) {
                try {
                    this.context.postMessage(msg);
                    return Promise.resolve();
                } catch (error) {
                    this.handleError(error, msg);
                    return Promise.reject(error);
                }
            }
            handleError(error, msg) {
                this.errorCount++;
                this.fireError(error, msg, this.errorCount);
            }
            end() {}
            constructor(context){
                super();
                this.context = context;
                this.errorCount = 0;
                context.addEventListener("error", (event)=>this.fireError(event));
            }
        };
        exports.BrowserMessageWriter = BrowserMessageWriter;
        function createMessageConnection(reader, writer, logger, options) {
            if (logger === void 0) {
                logger = api_1.NullLogger;
            }
            if (api_1.ConnectionStrategy.is(options)) {
                options = {
                    connectionStrategy: options
                };
            }
            return api_1.createMessageConnection(reader, writer, logger, options);
        }
        exports.createMessageConnection = createMessageConnection;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/browser.js
var require_browser = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-jsonrpc/browser.js" (exports, module) {
        "use strict";
        module.exports = require_main();
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-types/lib/umd/main.js
var require_main2 = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-types/lib/umd/main.js" (exports, module) {
        (function(factory) {
            if (typeof module === "object" && typeof module.exports === "object") {
                var v = factory(__require, exports);
                if (v !== void 0) module.exports = v;
            } else if (typeof define === "function" && __webpack_require__.amdO) {
                define([
                    "require",
                    "exports"
                ], factory);
            }
        })(function(require2, exports2) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
                value: true
            });
            exports2.TextDocument = exports2.EOL = exports2.SelectionRange = exports2.DocumentLink = exports2.FormattingOptions = exports2.CodeLens = exports2.CodeAction = exports2.CodeActionContext = exports2.CodeActionKind = exports2.DocumentSymbol = exports2.SymbolInformation = exports2.SymbolTag = exports2.SymbolKind = exports2.DocumentHighlight = exports2.DocumentHighlightKind = exports2.SignatureInformation = exports2.ParameterInformation = exports2.Hover = exports2.MarkedString = exports2.CompletionList = exports2.CompletionItem = exports2.InsertTextMode = exports2.InsertReplaceEdit = exports2.CompletionItemTag = exports2.InsertTextFormat = exports2.CompletionItemKind = exports2.MarkupContent = exports2.MarkupKind = exports2.TextDocumentItem = exports2.OptionalVersionedTextDocumentIdentifier = exports2.VersionedTextDocumentIdentifier = exports2.TextDocumentIdentifier = exports2.WorkspaceChange = exports2.WorkspaceEdit = exports2.DeleteFile = exports2.RenameFile = exports2.CreateFile = exports2.TextDocumentEdit = exports2.AnnotatedTextEdit = exports2.ChangeAnnotationIdentifier = exports2.ChangeAnnotation = exports2.TextEdit = exports2.Command = exports2.Diagnostic = exports2.CodeDescription = exports2.DiagnosticTag = exports2.DiagnosticSeverity = exports2.DiagnosticRelatedInformation = exports2.FoldingRange = exports2.FoldingRangeKind = exports2.ColorPresentation = exports2.ColorInformation = exports2.Color = exports2.LocationLink = exports2.Location = exports2.Range = exports2.Position = exports2.uinteger = exports2.integer = void 0;
            var integer2;
            (function(integer3) {
                integer3.MIN_VALUE = -2147483648;
                integer3.MAX_VALUE = 2147483647;
            })(integer2 = exports2.integer || (exports2.integer = {}));
            var uinteger2;
            (function(uinteger3) {
                uinteger3.MIN_VALUE = 0;
                uinteger3.MAX_VALUE = 2147483647;
            })(uinteger2 = exports2.uinteger || (exports2.uinteger = {}));
            var Position2;
            (function(Position3) {
                function create(line, character) {
                    if (line === Number.MAX_VALUE) {
                        line = uinteger2.MAX_VALUE;
                    }
                    if (character === Number.MAX_VALUE) {
                        character = uinteger2.MAX_VALUE;
                    }
                    return {
                        line,
                        character
                    };
                }
                Position3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Is2.objectLiteral(candidate) && Is2.uinteger(candidate.line) && Is2.uinteger(candidate.character);
                }
                Position3.is = is;
            })(Position2 = exports2.Position || (exports2.Position = {}));
            var Range2;
            (function(Range3) {
                function create(one, two, three, four) {
                    if (Is2.uinteger(one) && Is2.uinteger(two) && Is2.uinteger(three) && Is2.uinteger(four)) {
                        return {
                            start: Position2.create(one, two),
                            end: Position2.create(three, four)
                        };
                    } else if (Position2.is(one) && Position2.is(two)) {
                        return {
                            start: one,
                            end: two
                        };
                    } else {
                        throw new Error("Range#create called with invalid arguments[" + one + ", " + two + ", " + three + ", " + four + "]");
                    }
                }
                Range3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Is2.objectLiteral(candidate) && Position2.is(candidate.start) && Position2.is(candidate.end);
                }
                Range3.is = is;
            })(Range2 = exports2.Range || (exports2.Range = {}));
            var Location2;
            (function(Location3) {
                function create(uri, range) {
                    return {
                        uri,
                        range
                    };
                }
                Location3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Is2.defined(candidate) && Range2.is(candidate.range) && (Is2.string(candidate.uri) || Is2.undefined(candidate.uri));
                }
                Location3.is = is;
            })(Location2 = exports2.Location || (exports2.Location = {}));
            var LocationLink2;
            (function(LocationLink3) {
                function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
                    return {
                        targetUri,
                        targetRange,
                        targetSelectionRange,
                        originSelectionRange
                    };
                }
                LocationLink3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Is2.defined(candidate) && Range2.is(candidate.targetRange) && Is2.string(candidate.targetUri) && (Range2.is(candidate.targetSelectionRange) || Is2.undefined(candidate.targetSelectionRange)) && (Range2.is(candidate.originSelectionRange) || Is2.undefined(candidate.originSelectionRange));
                }
                LocationLink3.is = is;
            })(LocationLink2 = exports2.LocationLink || (exports2.LocationLink = {}));
            var Color2;
            (function(Color3) {
                function create(red, green, blue, alpha) {
                    return {
                        red,
                        green,
                        blue,
                        alpha
                    };
                }
                Color3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Is2.numberRange(candidate.red, 0, 1) && Is2.numberRange(candidate.green, 0, 1) && Is2.numberRange(candidate.blue, 0, 1) && Is2.numberRange(candidate.alpha, 0, 1);
                }
                Color3.is = is;
            })(Color2 = exports2.Color || (exports2.Color = {}));
            var ColorInformation2;
            (function(ColorInformation3) {
                function create(range, color) {
                    return {
                        range,
                        color
                    };
                }
                ColorInformation3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Range2.is(candidate.range) && Color2.is(candidate.color);
                }
                ColorInformation3.is = is;
            })(ColorInformation2 = exports2.ColorInformation || (exports2.ColorInformation = {}));
            var ColorPresentation2;
            (function(ColorPresentation3) {
                function create(label, textEdit, additionalTextEdits) {
                    return {
                        label,
                        textEdit,
                        additionalTextEdits
                    };
                }
                ColorPresentation3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Is2.string(candidate.label) && (Is2.undefined(candidate.textEdit) || TextEdit2.is(candidate)) && (Is2.undefined(candidate.additionalTextEdits) || Is2.typedArray(candidate.additionalTextEdits, TextEdit2.is));
                }
                ColorPresentation3.is = is;
            })(ColorPresentation2 = exports2.ColorPresentation || (exports2.ColorPresentation = {}));
            var FoldingRangeKind2;
            (function(FoldingRangeKind3) {
                FoldingRangeKind3["Comment"] = "comment";
                FoldingRangeKind3["Imports"] = "imports";
                FoldingRangeKind3["Region"] = "region";
            })(FoldingRangeKind2 = exports2.FoldingRangeKind || (exports2.FoldingRangeKind = {}));
            var FoldingRange2;
            (function(FoldingRange3) {
                function create(startLine, endLine, startCharacter, endCharacter, kind) {
                    var result = {
                        startLine,
                        endLine
                    };
                    if (Is2.defined(startCharacter)) {
                        result.startCharacter = startCharacter;
                    }
                    if (Is2.defined(endCharacter)) {
                        result.endCharacter = endCharacter;
                    }
                    if (Is2.defined(kind)) {
                        result.kind = kind;
                    }
                    return result;
                }
                FoldingRange3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Is2.uinteger(candidate.startLine) && Is2.uinteger(candidate.startLine) && (Is2.undefined(candidate.startCharacter) || Is2.uinteger(candidate.startCharacter)) && (Is2.undefined(candidate.endCharacter) || Is2.uinteger(candidate.endCharacter)) && (Is2.undefined(candidate.kind) || Is2.string(candidate.kind));
                }
                FoldingRange3.is = is;
            })(FoldingRange2 = exports2.FoldingRange || (exports2.FoldingRange = {}));
            var DiagnosticRelatedInformation2;
            (function(DiagnosticRelatedInformation3) {
                function create(location, message) {
                    return {
                        location,
                        message
                    };
                }
                DiagnosticRelatedInformation3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Is2.defined(candidate) && Location2.is(candidate.location) && Is2.string(candidate.message);
                }
                DiagnosticRelatedInformation3.is = is;
            })(DiagnosticRelatedInformation2 = exports2.DiagnosticRelatedInformation || (exports2.DiagnosticRelatedInformation = {}));
            var DiagnosticSeverity2;
            (function(DiagnosticSeverity3) {
                DiagnosticSeverity3.Error = 1;
                DiagnosticSeverity3.Warning = 2;
                DiagnosticSeverity3.Information = 3;
                DiagnosticSeverity3.Hint = 4;
            })(DiagnosticSeverity2 = exports2.DiagnosticSeverity || (exports2.DiagnosticSeverity = {}));
            var DiagnosticTag2;
            (function(DiagnosticTag3) {
                DiagnosticTag3.Unnecessary = 1;
                DiagnosticTag3.Deprecated = 2;
            })(DiagnosticTag2 = exports2.DiagnosticTag || (exports2.DiagnosticTag = {}));
            var CodeDescription2;
            (function(CodeDescription3) {
                function is(value1) {
                    var candidate = value1;
                    return candidate !== void 0 && candidate !== null && Is2.string(candidate.href);
                }
                CodeDescription3.is = is;
            })(CodeDescription2 = exports2.CodeDescription || (exports2.CodeDescription = {}));
            var Diagnostic2;
            (function(Diagnostic3) {
                function create(range, message, severity, code, source, relatedInformation) {
                    var result = {
                        range,
                        message
                    };
                    if (Is2.defined(severity)) {
                        result.severity = severity;
                    }
                    if (Is2.defined(code)) {
                        result.code = code;
                    }
                    if (Is2.defined(source)) {
                        result.source = source;
                    }
                    if (Is2.defined(relatedInformation)) {
                        result.relatedInformation = relatedInformation;
                    }
                    return result;
                }
                Diagnostic3.create = create;
                function is(value1) {
                    var _a;
                    var candidate = value1;
                    return Is2.defined(candidate) && Range2.is(candidate.range) && Is2.string(candidate.message) && (Is2.number(candidate.severity) || Is2.undefined(candidate.severity)) && (Is2.integer(candidate.code) || Is2.string(candidate.code) || Is2.undefined(candidate.code)) && (Is2.undefined(candidate.codeDescription) || Is2.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)) && (Is2.string(candidate.source) || Is2.undefined(candidate.source)) && (Is2.undefined(candidate.relatedInformation) || Is2.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation2.is));
                }
                Diagnostic3.is = is;
            })(Diagnostic2 = exports2.Diagnostic || (exports2.Diagnostic = {}));
            var Command2;
            (function(Command3) {
                function create(title, command) {
                    var args = [];
                    for(var _i = 2; _i < arguments.length; _i++){
                        args[_i - 2] = arguments[_i];
                    }
                    var result = {
                        title,
                        command
                    };
                    if (Is2.defined(args) && args.length > 0) {
                        result.arguments = args;
                    }
                    return result;
                }
                Command3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Is2.defined(candidate) && Is2.string(candidate.title) && Is2.string(candidate.command);
                }
                Command3.is = is;
            })(Command2 = exports2.Command || (exports2.Command = {}));
            var TextEdit2;
            (function(TextEdit3) {
                function replace(range, newText) {
                    return {
                        range,
                        newText
                    };
                }
                TextEdit3.replace = replace;
                function insert(position, newText) {
                    return {
                        range: {
                            start: position,
                            end: position
                        },
                        newText
                    };
                }
                TextEdit3.insert = insert;
                function del(range) {
                    return {
                        range,
                        newText: ""
                    };
                }
                TextEdit3.del = del;
                function is(value1) {
                    var candidate = value1;
                    return Is2.objectLiteral(candidate) && Is2.string(candidate.newText) && Range2.is(candidate.range);
                }
                TextEdit3.is = is;
            })(TextEdit2 = exports2.TextEdit || (exports2.TextEdit = {}));
            var ChangeAnnotation2;
            (function(ChangeAnnotation3) {
                function create(label, needsConfirmation, description) {
                    var result = {
                        label
                    };
                    if (needsConfirmation !== void 0) {
                        result.needsConfirmation = needsConfirmation;
                    }
                    if (description !== void 0) {
                        result.description = description;
                    }
                    return result;
                }
                ChangeAnnotation3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return candidate !== void 0 && Is2.objectLiteral(candidate) && Is2.string(candidate.label) && (Is2.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === void 0) && (Is2.string(candidate.description) || candidate.description === void 0);
                }
                ChangeAnnotation3.is = is;
            })(ChangeAnnotation2 = exports2.ChangeAnnotation || (exports2.ChangeAnnotation = {}));
            var ChangeAnnotationIdentifier2;
            (function(ChangeAnnotationIdentifier3) {
                function is(value1) {
                    var candidate = value1;
                    return typeof candidate === "string";
                }
                ChangeAnnotationIdentifier3.is = is;
            })(ChangeAnnotationIdentifier2 = exports2.ChangeAnnotationIdentifier || (exports2.ChangeAnnotationIdentifier = {}));
            var AnnotatedTextEdit2;
            (function(AnnotatedTextEdit3) {
                function replace(range, newText, annotation) {
                    return {
                        range,
                        newText,
                        annotationId: annotation
                    };
                }
                AnnotatedTextEdit3.replace = replace;
                function insert(position, newText, annotation) {
                    return {
                        range: {
                            start: position,
                            end: position
                        },
                        newText,
                        annotationId: annotation
                    };
                }
                AnnotatedTextEdit3.insert = insert;
                function del(range, annotation) {
                    return {
                        range,
                        newText: "",
                        annotationId: annotation
                    };
                }
                AnnotatedTextEdit3.del = del;
                function is(value1) {
                    var candidate = value1;
                    return TextEdit2.is(candidate) && (ChangeAnnotation2.is(candidate.annotationId) || ChangeAnnotationIdentifier2.is(candidate.annotationId));
                }
                AnnotatedTextEdit3.is = is;
            })(AnnotatedTextEdit2 = exports2.AnnotatedTextEdit || (exports2.AnnotatedTextEdit = {}));
            var TextDocumentEdit2;
            (function(TextDocumentEdit3) {
                function create(textDocument, edits) {
                    return {
                        textDocument,
                        edits
                    };
                }
                TextDocumentEdit3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Is2.defined(candidate) && OptionalVersionedTextDocumentIdentifier2.is(candidate.textDocument) && Array.isArray(candidate.edits);
                }
                TextDocumentEdit3.is = is;
            })(TextDocumentEdit2 = exports2.TextDocumentEdit || (exports2.TextDocumentEdit = {}));
            var CreateFile2;
            (function(CreateFile3) {
                function create(uri, options, annotation) {
                    var result = {
                        kind: "create",
                        uri
                    };
                    if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
                        result.options = options;
                    }
                    if (annotation !== void 0) {
                        result.annotationId = annotation;
                    }
                    return result;
                }
                CreateFile3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return candidate && candidate.kind === "create" && Is2.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is2.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is2.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier2.is(candidate.annotationId));
                }
                CreateFile3.is = is;
            })(CreateFile2 = exports2.CreateFile || (exports2.CreateFile = {}));
            var RenameFile2;
            (function(RenameFile3) {
                function create(oldUri, newUri, options, annotation) {
                    var result = {
                        kind: "rename",
                        oldUri,
                        newUri
                    };
                    if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
                        result.options = options;
                    }
                    if (annotation !== void 0) {
                        result.annotationId = annotation;
                    }
                    return result;
                }
                RenameFile3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return candidate && candidate.kind === "rename" && Is2.string(candidate.oldUri) && Is2.string(candidate.newUri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is2.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is2.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier2.is(candidate.annotationId));
                }
                RenameFile3.is = is;
            })(RenameFile2 = exports2.RenameFile || (exports2.RenameFile = {}));
            var DeleteFile2;
            (function(DeleteFile3) {
                function create(uri, options, annotation) {
                    var result = {
                        kind: "delete",
                        uri
                    };
                    if (options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0)) {
                        result.options = options;
                    }
                    if (annotation !== void 0) {
                        result.annotationId = annotation;
                    }
                    return result;
                }
                DeleteFile3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return candidate && candidate.kind === "delete" && Is2.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.recursive === void 0 || Is2.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is2.boolean(candidate.options.ignoreIfNotExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier2.is(candidate.annotationId));
                }
                DeleteFile3.is = is;
            })(DeleteFile2 = exports2.DeleteFile || (exports2.DeleteFile = {}));
            var WorkspaceEdit2;
            (function(WorkspaceEdit3) {
                function is(value1) {
                    var candidate = value1;
                    return candidate && (candidate.changes !== void 0 || candidate.documentChanges !== void 0) && (candidate.documentChanges === void 0 || candidate.documentChanges.every(function(change) {
                        if (Is2.string(change.kind)) {
                            return CreateFile2.is(change) || RenameFile2.is(change) || DeleteFile2.is(change);
                        } else {
                            return TextDocumentEdit2.is(change);
                        }
                    }));
                }
                WorkspaceEdit3.is = is;
            })(WorkspaceEdit2 = exports2.WorkspaceEdit || (exports2.WorkspaceEdit = {}));
            var TextEditChangeImpl2 = /** @class */ function() {
                function TextEditChangeImpl3(edits, changeAnnotations) {
                    this.edits = edits;
                    this.changeAnnotations = changeAnnotations;
                }
                TextEditChangeImpl3.prototype.insert = function(position, newText, annotation) {
                    var edit;
                    var id;
                    if (annotation === void 0) {
                        edit = TextEdit2.insert(position, newText);
                    } else if (ChangeAnnotationIdentifier2.is(annotation)) {
                        id = annotation;
                        edit = AnnotatedTextEdit2.insert(position, newText, annotation);
                    } else {
                        this.assertChangeAnnotations(this.changeAnnotations);
                        id = this.changeAnnotations.manage(annotation);
                        edit = AnnotatedTextEdit2.insert(position, newText, id);
                    }
                    this.edits.push(edit);
                    if (id !== void 0) {
                        return id;
                    }
                };
                TextEditChangeImpl3.prototype.replace = function(range, newText, annotation) {
                    var edit;
                    var id;
                    if (annotation === void 0) {
                        edit = TextEdit2.replace(range, newText);
                    } else if (ChangeAnnotationIdentifier2.is(annotation)) {
                        id = annotation;
                        edit = AnnotatedTextEdit2.replace(range, newText, annotation);
                    } else {
                        this.assertChangeAnnotations(this.changeAnnotations);
                        id = this.changeAnnotations.manage(annotation);
                        edit = AnnotatedTextEdit2.replace(range, newText, id);
                    }
                    this.edits.push(edit);
                    if (id !== void 0) {
                        return id;
                    }
                };
                TextEditChangeImpl3.prototype.delete = function(range, annotation) {
                    var edit;
                    var id;
                    if (annotation === void 0) {
                        edit = TextEdit2.del(range);
                    } else if (ChangeAnnotationIdentifier2.is(annotation)) {
                        id = annotation;
                        edit = AnnotatedTextEdit2.del(range, annotation);
                    } else {
                        this.assertChangeAnnotations(this.changeAnnotations);
                        id = this.changeAnnotations.manage(annotation);
                        edit = AnnotatedTextEdit2.del(range, id);
                    }
                    this.edits.push(edit);
                    if (id !== void 0) {
                        return id;
                    }
                };
                TextEditChangeImpl3.prototype.add = function(edit) {
                    this.edits.push(edit);
                };
                TextEditChangeImpl3.prototype.all = function() {
                    return this.edits;
                };
                TextEditChangeImpl3.prototype.clear = function() {
                    this.edits.splice(0, this.edits.length);
                };
                TextEditChangeImpl3.prototype.assertChangeAnnotations = function(value1) {
                    if (value1 === void 0) {
                        throw new Error("Text edit change is not configured to manage change annotations.");
                    }
                };
                return TextEditChangeImpl3;
            }();
            var ChangeAnnotations2 = /** @class */ function() {
                function ChangeAnnotations3(annotations) {
                    this._annotations = annotations === void 0 ? /* @__PURE__ */ Object.create(null) : annotations;
                    this._counter = 0;
                    this._size = 0;
                }
                ChangeAnnotations3.prototype.all = function() {
                    return this._annotations;
                };
                Object.defineProperty(ChangeAnnotations3.prototype, "size", {
                    get: function() {
                        return this._size;
                    },
                    enumerable: false,
                    configurable: true
                });
                ChangeAnnotations3.prototype.manage = function(idOrAnnotation, annotation) {
                    var id;
                    if (ChangeAnnotationIdentifier2.is(idOrAnnotation)) {
                        id = idOrAnnotation;
                    } else {
                        id = this.nextId();
                        annotation = idOrAnnotation;
                    }
                    if (this._annotations[id] !== void 0) {
                        throw new Error("Id " + id + " is already in use.");
                    }
                    if (annotation === void 0) {
                        throw new Error("No annotation provided for id " + id);
                    }
                    this._annotations[id] = annotation;
                    this._size++;
                    return id;
                };
                ChangeAnnotations3.prototype.nextId = function() {
                    this._counter++;
                    return this._counter.toString();
                };
                return ChangeAnnotations3;
            }();
            var WorkspaceChange2 = /** @class */ function() {
                function WorkspaceChange3(workspaceEdit) {
                    var _this = this;
                    this._textEditChanges = /* @__PURE__ */ Object.create(null);
                    if (workspaceEdit !== void 0) {
                        this._workspaceEdit = workspaceEdit;
                        if (workspaceEdit.documentChanges) {
                            this._changeAnnotations = new ChangeAnnotations2(workspaceEdit.changeAnnotations);
                            workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                            workspaceEdit.documentChanges.forEach(function(change) {
                                if (TextDocumentEdit2.is(change)) {
                                    var textEditChange = new TextEditChangeImpl2(change.edits, _this._changeAnnotations);
                                    _this._textEditChanges[change.textDocument.uri] = textEditChange;
                                }
                            });
                        } else if (workspaceEdit.changes) {
                            Object.keys(workspaceEdit.changes).forEach(function(key) {
                                var textEditChange = new TextEditChangeImpl2(workspaceEdit.changes[key]);
                                _this._textEditChanges[key] = textEditChange;
                            });
                        }
                    } else {
                        this._workspaceEdit = {};
                    }
                }
                Object.defineProperty(WorkspaceChange3.prototype, "edit", {
                    /**
             * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal
             * use to be returned from a workspace edit operation like rename.
             */ get: function() {
                        this.initDocumentChanges();
                        if (this._changeAnnotations !== void 0) {
                            if (this._changeAnnotations.size === 0) {
                                this._workspaceEdit.changeAnnotations = void 0;
                            } else {
                                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                            }
                        }
                        return this._workspaceEdit;
                    },
                    enumerable: false,
                    configurable: true
                });
                WorkspaceChange3.prototype.getTextEditChange = function(key) {
                    if (OptionalVersionedTextDocumentIdentifier2.is(key)) {
                        this.initDocumentChanges();
                        if (this._workspaceEdit.documentChanges === void 0) {
                            throw new Error("Workspace edit is not configured for document changes.");
                        }
                        var textDocument = {
                            uri: key.uri,
                            version: key.version
                        };
                        var result = this._textEditChanges[textDocument.uri];
                        if (!result) {
                            var edits = [];
                            var textDocumentEdit = {
                                textDocument,
                                edits
                            };
                            this._workspaceEdit.documentChanges.push(textDocumentEdit);
                            result = new TextEditChangeImpl2(edits, this._changeAnnotations);
                            this._textEditChanges[textDocument.uri] = result;
                        }
                        return result;
                    } else {
                        this.initChanges();
                        if (this._workspaceEdit.changes === void 0) {
                            throw new Error("Workspace edit is not configured for normal text edit changes.");
                        }
                        var result = this._textEditChanges[key];
                        if (!result) {
                            var edits = [];
                            this._workspaceEdit.changes[key] = edits;
                            result = new TextEditChangeImpl2(edits);
                            this._textEditChanges[key] = result;
                        }
                        return result;
                    }
                };
                WorkspaceChange3.prototype.initDocumentChanges = function() {
                    if (this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0) {
                        this._changeAnnotations = new ChangeAnnotations2();
                        this._workspaceEdit.documentChanges = [];
                        this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                    }
                };
                WorkspaceChange3.prototype.initChanges = function() {
                    if (this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0) {
                        this._workspaceEdit.changes = /* @__PURE__ */ Object.create(null);
                    }
                };
                WorkspaceChange3.prototype.createFile = function(uri, optionsOrAnnotation, options) {
                    this.initDocumentChanges();
                    if (this._workspaceEdit.documentChanges === void 0) {
                        throw new Error("Workspace edit is not configured for document changes.");
                    }
                    var annotation;
                    if (ChangeAnnotation2.is(optionsOrAnnotation) || ChangeAnnotationIdentifier2.is(optionsOrAnnotation)) {
                        annotation = optionsOrAnnotation;
                    } else {
                        options = optionsOrAnnotation;
                    }
                    var operation;
                    var id;
                    if (annotation === void 0) {
                        operation = CreateFile2.create(uri, options);
                    } else {
                        id = ChangeAnnotationIdentifier2.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                        operation = CreateFile2.create(uri, options, id);
                    }
                    this._workspaceEdit.documentChanges.push(operation);
                    if (id !== void 0) {
                        return id;
                    }
                };
                WorkspaceChange3.prototype.renameFile = function(oldUri, newUri, optionsOrAnnotation, options) {
                    this.initDocumentChanges();
                    if (this._workspaceEdit.documentChanges === void 0) {
                        throw new Error("Workspace edit is not configured for document changes.");
                    }
                    var annotation;
                    if (ChangeAnnotation2.is(optionsOrAnnotation) || ChangeAnnotationIdentifier2.is(optionsOrAnnotation)) {
                        annotation = optionsOrAnnotation;
                    } else {
                        options = optionsOrAnnotation;
                    }
                    var operation;
                    var id;
                    if (annotation === void 0) {
                        operation = RenameFile2.create(oldUri, newUri, options);
                    } else {
                        id = ChangeAnnotationIdentifier2.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                        operation = RenameFile2.create(oldUri, newUri, options, id);
                    }
                    this._workspaceEdit.documentChanges.push(operation);
                    if (id !== void 0) {
                        return id;
                    }
                };
                WorkspaceChange3.prototype.deleteFile = function(uri, optionsOrAnnotation, options) {
                    this.initDocumentChanges();
                    if (this._workspaceEdit.documentChanges === void 0) {
                        throw new Error("Workspace edit is not configured for document changes.");
                    }
                    var annotation;
                    if (ChangeAnnotation2.is(optionsOrAnnotation) || ChangeAnnotationIdentifier2.is(optionsOrAnnotation)) {
                        annotation = optionsOrAnnotation;
                    } else {
                        options = optionsOrAnnotation;
                    }
                    var operation;
                    var id;
                    if (annotation === void 0) {
                        operation = DeleteFile2.create(uri, options);
                    } else {
                        id = ChangeAnnotationIdentifier2.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                        operation = DeleteFile2.create(uri, options, id);
                    }
                    this._workspaceEdit.documentChanges.push(operation);
                    if (id !== void 0) {
                        return id;
                    }
                };
                return WorkspaceChange3;
            }();
            exports2.WorkspaceChange = WorkspaceChange2;
            var TextDocumentIdentifier2;
            (function(TextDocumentIdentifier3) {
                function create(uri) {
                    return {
                        uri
                    };
                }
                TextDocumentIdentifier3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Is2.defined(candidate) && Is2.string(candidate.uri);
                }
                TextDocumentIdentifier3.is = is;
            })(TextDocumentIdentifier2 = exports2.TextDocumentIdentifier || (exports2.TextDocumentIdentifier = {}));
            var VersionedTextDocumentIdentifier2;
            (function(VersionedTextDocumentIdentifier3) {
                function create(uri, version) {
                    return {
                        uri,
                        version
                    };
                }
                VersionedTextDocumentIdentifier3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Is2.defined(candidate) && Is2.string(candidate.uri) && Is2.integer(candidate.version);
                }
                VersionedTextDocumentIdentifier3.is = is;
            })(VersionedTextDocumentIdentifier2 = exports2.VersionedTextDocumentIdentifier || (exports2.VersionedTextDocumentIdentifier = {}));
            var OptionalVersionedTextDocumentIdentifier2;
            (function(OptionalVersionedTextDocumentIdentifier3) {
                function create(uri, version) {
                    return {
                        uri,
                        version
                    };
                }
                OptionalVersionedTextDocumentIdentifier3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Is2.defined(candidate) && Is2.string(candidate.uri) && (candidate.version === null || Is2.integer(candidate.version));
                }
                OptionalVersionedTextDocumentIdentifier3.is = is;
            })(OptionalVersionedTextDocumentIdentifier2 = exports2.OptionalVersionedTextDocumentIdentifier || (exports2.OptionalVersionedTextDocumentIdentifier = {}));
            var TextDocumentItem2;
            (function(TextDocumentItem3) {
                function create(uri, languageId, version, text) {
                    return {
                        uri,
                        languageId,
                        version,
                        text
                    };
                }
                TextDocumentItem3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Is2.defined(candidate) && Is2.string(candidate.uri) && Is2.string(candidate.languageId) && Is2.integer(candidate.version) && Is2.string(candidate.text);
                }
                TextDocumentItem3.is = is;
            })(TextDocumentItem2 = exports2.TextDocumentItem || (exports2.TextDocumentItem = {}));
            var MarkupKind2;
            (function(MarkupKind3) {
                MarkupKind3.PlainText = "plaintext";
                MarkupKind3.Markdown = "markdown";
            })(MarkupKind2 = exports2.MarkupKind || (exports2.MarkupKind = {}));
            (function(MarkupKind3) {
                function is(value1) {
                    var candidate = value1;
                    return candidate === MarkupKind3.PlainText || candidate === MarkupKind3.Markdown;
                }
                MarkupKind3.is = is;
            })(MarkupKind2 = exports2.MarkupKind || (exports2.MarkupKind = {}));
            var MarkupContent2;
            (function(MarkupContent3) {
                function is(value1) {
                    var candidate = value1;
                    return Is2.objectLiteral(value1) && MarkupKind2.is(candidate.kind) && Is2.string(candidate.value);
                }
                MarkupContent3.is = is;
            })(MarkupContent2 = exports2.MarkupContent || (exports2.MarkupContent = {}));
            var CompletionItemKind2;
            (function(CompletionItemKind3) {
                CompletionItemKind3.Text = 1;
                CompletionItemKind3.Method = 2;
                CompletionItemKind3.Function = 3;
                CompletionItemKind3.Constructor = 4;
                CompletionItemKind3.Field = 5;
                CompletionItemKind3.Variable = 6;
                CompletionItemKind3.Class = 7;
                CompletionItemKind3.Interface = 8;
                CompletionItemKind3.Module = 9;
                CompletionItemKind3.Property = 10;
                CompletionItemKind3.Unit = 11;
                CompletionItemKind3.Value = 12;
                CompletionItemKind3.Enum = 13;
                CompletionItemKind3.Keyword = 14;
                CompletionItemKind3.Snippet = 15;
                CompletionItemKind3.Color = 16;
                CompletionItemKind3.File = 17;
                CompletionItemKind3.Reference = 18;
                CompletionItemKind3.Folder = 19;
                CompletionItemKind3.EnumMember = 20;
                CompletionItemKind3.Constant = 21;
                CompletionItemKind3.Struct = 22;
                CompletionItemKind3.Event = 23;
                CompletionItemKind3.Operator = 24;
                CompletionItemKind3.TypeParameter = 25;
            })(CompletionItemKind2 = exports2.CompletionItemKind || (exports2.CompletionItemKind = {}));
            var InsertTextFormat2;
            (function(InsertTextFormat3) {
                InsertTextFormat3.PlainText = 1;
                InsertTextFormat3.Snippet = 2;
            })(InsertTextFormat2 = exports2.InsertTextFormat || (exports2.InsertTextFormat = {}));
            var CompletionItemTag2;
            (function(CompletionItemTag3) {
                CompletionItemTag3.Deprecated = 1;
            })(CompletionItemTag2 = exports2.CompletionItemTag || (exports2.CompletionItemTag = {}));
            var InsertReplaceEdit2;
            (function(InsertReplaceEdit3) {
                function create(newText, insert, replace) {
                    return {
                        newText,
                        insert,
                        replace
                    };
                }
                InsertReplaceEdit3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return candidate && Is2.string(candidate.newText) && Range2.is(candidate.insert) && Range2.is(candidate.replace);
                }
                InsertReplaceEdit3.is = is;
            })(InsertReplaceEdit2 = exports2.InsertReplaceEdit || (exports2.InsertReplaceEdit = {}));
            var InsertTextMode2;
            (function(InsertTextMode3) {
                InsertTextMode3.asIs = 1;
                InsertTextMode3.adjustIndentation = 2;
            })(InsertTextMode2 = exports2.InsertTextMode || (exports2.InsertTextMode = {}));
            var CompletionItem2;
            (function(CompletionItem3) {
                function create(label) {
                    return {
                        label
                    };
                }
                CompletionItem3.create = create;
            })(CompletionItem2 = exports2.CompletionItem || (exports2.CompletionItem = {}));
            var CompletionList2;
            (function(CompletionList3) {
                function create(items, isIncomplete) {
                    return {
                        items: items ? items : [],
                        isIncomplete: !!isIncomplete
                    };
                }
                CompletionList3.create = create;
            })(CompletionList2 = exports2.CompletionList || (exports2.CompletionList = {}));
            var MarkedString2;
            (function(MarkedString3) {
                function fromPlainText(plainText) {
                    return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
                }
                MarkedString3.fromPlainText = fromPlainText;
                function is(value1) {
                    var candidate = value1;
                    return Is2.string(candidate) || Is2.objectLiteral(candidate) && Is2.string(candidate.language) && Is2.string(candidate.value);
                }
                MarkedString3.is = is;
            })(MarkedString2 = exports2.MarkedString || (exports2.MarkedString = {}));
            var Hover2;
            (function(Hover3) {
                function is(value1) {
                    var candidate = value1;
                    return !!candidate && Is2.objectLiteral(candidate) && (MarkupContent2.is(candidate.contents) || MarkedString2.is(candidate.contents) || Is2.typedArray(candidate.contents, MarkedString2.is)) && (value1.range === void 0 || Range2.is(value1.range));
                }
                Hover3.is = is;
            })(Hover2 = exports2.Hover || (exports2.Hover = {}));
            var ParameterInformation2;
            (function(ParameterInformation3) {
                function create(label, documentation) {
                    return documentation ? {
                        label,
                        documentation
                    } : {
                        label
                    };
                }
                ParameterInformation3.create = create;
            })(ParameterInformation2 = exports2.ParameterInformation || (exports2.ParameterInformation = {}));
            var SignatureInformation2;
            (function(SignatureInformation3) {
                function create(label, documentation) {
                    var parameters = [];
                    for(var _i = 2; _i < arguments.length; _i++){
                        parameters[_i - 2] = arguments[_i];
                    }
                    var result = {
                        label
                    };
                    if (Is2.defined(documentation)) {
                        result.documentation = documentation;
                    }
                    if (Is2.defined(parameters)) {
                        result.parameters = parameters;
                    } else {
                        result.parameters = [];
                    }
                    return result;
                }
                SignatureInformation3.create = create;
            })(SignatureInformation2 = exports2.SignatureInformation || (exports2.SignatureInformation = {}));
            var DocumentHighlightKind2;
            (function(DocumentHighlightKind3) {
                DocumentHighlightKind3.Text = 1;
                DocumentHighlightKind3.Read = 2;
                DocumentHighlightKind3.Write = 3;
            })(DocumentHighlightKind2 = exports2.DocumentHighlightKind || (exports2.DocumentHighlightKind = {}));
            var DocumentHighlight2;
            (function(DocumentHighlight3) {
                function create(range, kind) {
                    var result = {
                        range
                    };
                    if (Is2.number(kind)) {
                        result.kind = kind;
                    }
                    return result;
                }
                DocumentHighlight3.create = create;
            })(DocumentHighlight2 = exports2.DocumentHighlight || (exports2.DocumentHighlight = {}));
            var SymbolKind2;
            (function(SymbolKind3) {
                SymbolKind3.File = 1;
                SymbolKind3.Module = 2;
                SymbolKind3.Namespace = 3;
                SymbolKind3.Package = 4;
                SymbolKind3.Class = 5;
                SymbolKind3.Method = 6;
                SymbolKind3.Property = 7;
                SymbolKind3.Field = 8;
                SymbolKind3.Constructor = 9;
                SymbolKind3.Enum = 10;
                SymbolKind3.Interface = 11;
                SymbolKind3.Function = 12;
                SymbolKind3.Variable = 13;
                SymbolKind3.Constant = 14;
                SymbolKind3.String = 15;
                SymbolKind3.Number = 16;
                SymbolKind3.Boolean = 17;
                SymbolKind3.Array = 18;
                SymbolKind3.Object = 19;
                SymbolKind3.Key = 20;
                SymbolKind3.Null = 21;
                SymbolKind3.EnumMember = 22;
                SymbolKind3.Struct = 23;
                SymbolKind3.Event = 24;
                SymbolKind3.Operator = 25;
                SymbolKind3.TypeParameter = 26;
            })(SymbolKind2 = exports2.SymbolKind || (exports2.SymbolKind = {}));
            var SymbolTag2;
            (function(SymbolTag3) {
                SymbolTag3.Deprecated = 1;
            })(SymbolTag2 = exports2.SymbolTag || (exports2.SymbolTag = {}));
            var SymbolInformation2;
            (function(SymbolInformation3) {
                function create(name, kind, range, uri, containerName) {
                    var result = {
                        name,
                        kind,
                        location: {
                            uri,
                            range
                        }
                    };
                    if (containerName) {
                        result.containerName = containerName;
                    }
                    return result;
                }
                SymbolInformation3.create = create;
            })(SymbolInformation2 = exports2.SymbolInformation || (exports2.SymbolInformation = {}));
            var DocumentSymbol2;
            (function(DocumentSymbol3) {
                function create(name, detail, kind, range, selectionRange, children) {
                    var result = {
                        name,
                        detail,
                        kind,
                        range,
                        selectionRange
                    };
                    if (children !== void 0) {
                        result.children = children;
                    }
                    return result;
                }
                DocumentSymbol3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return candidate && Is2.string(candidate.name) && Is2.number(candidate.kind) && Range2.is(candidate.range) && Range2.is(candidate.selectionRange) && (candidate.detail === void 0 || Is2.string(candidate.detail)) && (candidate.deprecated === void 0 || Is2.boolean(candidate.deprecated)) && (candidate.children === void 0 || Array.isArray(candidate.children)) && (candidate.tags === void 0 || Array.isArray(candidate.tags));
                }
                DocumentSymbol3.is = is;
            })(DocumentSymbol2 = exports2.DocumentSymbol || (exports2.DocumentSymbol = {}));
            var CodeActionKind2;
            (function(CodeActionKind3) {
                CodeActionKind3.Empty = "";
                CodeActionKind3.QuickFix = "quickfix";
                CodeActionKind3.Refactor = "refactor";
                CodeActionKind3.RefactorExtract = "refactor.extract";
                CodeActionKind3.RefactorInline = "refactor.inline";
                CodeActionKind3.RefactorRewrite = "refactor.rewrite";
                CodeActionKind3.Source = "source";
                CodeActionKind3.SourceOrganizeImports = "source.organizeImports";
                CodeActionKind3.SourceFixAll = "source.fixAll";
            })(CodeActionKind2 = exports2.CodeActionKind || (exports2.CodeActionKind = {}));
            var CodeActionContext2;
            (function(CodeActionContext3) {
                function create(diagnostics, only) {
                    var result = {
                        diagnostics
                    };
                    if (only !== void 0 && only !== null) {
                        result.only = only;
                    }
                    return result;
                }
                CodeActionContext3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Is2.defined(candidate) && Is2.typedArray(candidate.diagnostics, Diagnostic2.is) && (candidate.only === void 0 || Is2.typedArray(candidate.only, Is2.string));
                }
                CodeActionContext3.is = is;
            })(CodeActionContext2 = exports2.CodeActionContext || (exports2.CodeActionContext = {}));
            var CodeAction2;
            (function(CodeAction3) {
                function create(title, kindOrCommandOrEdit, kind) {
                    var result = {
                        title
                    };
                    var checkKind = true;
                    if (typeof kindOrCommandOrEdit === "string") {
                        checkKind = false;
                        result.kind = kindOrCommandOrEdit;
                    } else if (Command2.is(kindOrCommandOrEdit)) {
                        result.command = kindOrCommandOrEdit;
                    } else {
                        result.edit = kindOrCommandOrEdit;
                    }
                    if (checkKind && kind !== void 0) {
                        result.kind = kind;
                    }
                    return result;
                }
                CodeAction3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return candidate && Is2.string(candidate.title) && (candidate.diagnostics === void 0 || Is2.typedArray(candidate.diagnostics, Diagnostic2.is)) && (candidate.kind === void 0 || Is2.string(candidate.kind)) && (candidate.edit !== void 0 || candidate.command !== void 0) && (candidate.command === void 0 || Command2.is(candidate.command)) && (candidate.isPreferred === void 0 || Is2.boolean(candidate.isPreferred)) && (candidate.edit === void 0 || WorkspaceEdit2.is(candidate.edit));
                }
                CodeAction3.is = is;
            })(CodeAction2 = exports2.CodeAction || (exports2.CodeAction = {}));
            var CodeLens2;
            (function(CodeLens3) {
                function create(range, data) {
                    var result = {
                        range
                    };
                    if (Is2.defined(data)) {
                        result.data = data;
                    }
                    return result;
                }
                CodeLens3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Is2.defined(candidate) && Range2.is(candidate.range) && (Is2.undefined(candidate.command) || Command2.is(candidate.command));
                }
                CodeLens3.is = is;
            })(CodeLens2 = exports2.CodeLens || (exports2.CodeLens = {}));
            var FormattingOptions2;
            (function(FormattingOptions3) {
                function create(tabSize, insertSpaces) {
                    return {
                        tabSize,
                        insertSpaces
                    };
                }
                FormattingOptions3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Is2.defined(candidate) && Is2.uinteger(candidate.tabSize) && Is2.boolean(candidate.insertSpaces);
                }
                FormattingOptions3.is = is;
            })(FormattingOptions2 = exports2.FormattingOptions || (exports2.FormattingOptions = {}));
            var DocumentLink2;
            (function(DocumentLink3) {
                function create(range, target, data) {
                    return {
                        range,
                        target,
                        data
                    };
                }
                DocumentLink3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Is2.defined(candidate) && Range2.is(candidate.range) && (Is2.undefined(candidate.target) || Is2.string(candidate.target));
                }
                DocumentLink3.is = is;
            })(DocumentLink2 = exports2.DocumentLink || (exports2.DocumentLink = {}));
            var SelectionRange2;
            (function(SelectionRange3) {
                function create(range, parent) {
                    return {
                        range,
                        parent
                    };
                }
                SelectionRange3.create = create;
                function is(value1) {
                    var candidate = value1;
                    return candidate !== void 0 && Range2.is(candidate.range) && (candidate.parent === void 0 || SelectionRange3.is(candidate.parent));
                }
                SelectionRange3.is = is;
            })(SelectionRange2 = exports2.SelectionRange || (exports2.SelectionRange = {}));
            exports2.EOL = [
                "\n",
                "\r\n",
                "\r"
            ];
            var TextDocument3;
            (function(TextDocument4) {
                function create(uri, languageId, version, content) {
                    return new FullTextDocument3(uri, languageId, version, content);
                }
                TextDocument4.create = create;
                function is(value1) {
                    var candidate = value1;
                    return Is2.defined(candidate) && Is2.string(candidate.uri) && (Is2.undefined(candidate.languageId) || Is2.string(candidate.languageId)) && Is2.uinteger(candidate.lineCount) && Is2.func(candidate.getText) && Is2.func(candidate.positionAt) && Is2.func(candidate.offsetAt) ? true : false;
                }
                TextDocument4.is = is;
                function applyEdits(document, edits) {
                    var text = document.getText();
                    var sortedEdits = mergeSort2(edits, function(a2, b) {
                        var diff = a2.range.start.line - b.range.start.line;
                        if (diff === 0) {
                            return a2.range.start.character - b.range.start.character;
                        }
                        return diff;
                    });
                    var lastModifiedOffset = text.length;
                    for(var i = sortedEdits.length - 1; i >= 0; i--){
                        var e = sortedEdits[i];
                        var startOffset = document.offsetAt(e.range.start);
                        var endOffset = document.offsetAt(e.range.end);
                        if (endOffset <= lastModifiedOffset) {
                            text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
                        } else {
                            throw new Error("Overlapping edit");
                        }
                        lastModifiedOffset = startOffset;
                    }
                    return text;
                }
                TextDocument4.applyEdits = applyEdits;
                function mergeSort2(data, compare) {
                    if (data.length <= 1) {
                        return data;
                    }
                    var p = data.length / 2 | 0;
                    var left = data.slice(0, p);
                    var right = data.slice(p);
                    mergeSort2(left, compare);
                    mergeSort2(right, compare);
                    var leftIdx = 0;
                    var rightIdx = 0;
                    var i = 0;
                    while(leftIdx < left.length && rightIdx < right.length){
                        var ret = compare(left[leftIdx], right[rightIdx]);
                        if (ret <= 0) {
                            data[i++] = left[leftIdx++];
                        } else {
                            data[i++] = right[rightIdx++];
                        }
                    }
                    while(leftIdx < left.length){
                        data[i++] = left[leftIdx++];
                    }
                    while(rightIdx < right.length){
                        data[i++] = right[rightIdx++];
                    }
                    return data;
                }
            })(TextDocument3 = exports2.TextDocument || (exports2.TextDocument = {}));
            var FullTextDocument3 = /** @class */ function() {
                function FullTextDocument4(uri, languageId, version, content) {
                    this._uri = uri;
                    this._languageId = languageId;
                    this._version = version;
                    this._content = content;
                    this._lineOffsets = void 0;
                }
                Object.defineProperty(FullTextDocument4.prototype, "uri", {
                    get: function() {
                        return this._uri;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(FullTextDocument4.prototype, "languageId", {
                    get: function() {
                        return this._languageId;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(FullTextDocument4.prototype, "version", {
                    get: function() {
                        return this._version;
                    },
                    enumerable: false,
                    configurable: true
                });
                FullTextDocument4.prototype.getText = function(range) {
                    if (range) {
                        var start = this.offsetAt(range.start);
                        var end = this.offsetAt(range.end);
                        return this._content.substring(start, end);
                    }
                    return this._content;
                };
                FullTextDocument4.prototype.update = function(event, version) {
                    this._content = event.text;
                    this._version = version;
                    this._lineOffsets = void 0;
                };
                FullTextDocument4.prototype.getLineOffsets = function() {
                    if (this._lineOffsets === void 0) {
                        var lineOffsets = [];
                        var text = this._content;
                        var isLineStart = true;
                        for(var i = 0; i < text.length; i++){
                            if (isLineStart) {
                                lineOffsets.push(i);
                                isLineStart = false;
                            }
                            var ch = text.charAt(i);
                            isLineStart = ch === "\r" || ch === "\n";
                            if (ch === "\r" && i + 1 < text.length && text.charAt(i + 1) === "\n") {
                                i++;
                            }
                        }
                        if (isLineStart && text.length > 0) {
                            lineOffsets.push(text.length);
                        }
                        this._lineOffsets = lineOffsets;
                    }
                    return this._lineOffsets;
                };
                FullTextDocument4.prototype.positionAt = function(offset) {
                    offset = Math.max(Math.min(offset, this._content.length), 0);
                    var lineOffsets = this.getLineOffsets();
                    var low = 0, high = lineOffsets.length;
                    if (high === 0) {
                        return Position2.create(0, offset);
                    }
                    while(low < high){
                        var mid = Math.floor((low + high) / 2);
                        if (lineOffsets[mid] > offset) {
                            high = mid;
                        } else {
                            low = mid + 1;
                        }
                    }
                    var line = low - 1;
                    return Position2.create(line, offset - lineOffsets[line]);
                };
                FullTextDocument4.prototype.offsetAt = function(position) {
                    var lineOffsets = this.getLineOffsets();
                    if (position.line >= lineOffsets.length) {
                        return this._content.length;
                    } else if (position.line < 0) {
                        return 0;
                    }
                    var lineOffset = lineOffsets[position.line];
                    var nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
                    return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
                };
                Object.defineProperty(FullTextDocument4.prototype, "lineCount", {
                    get: function() {
                        return this.getLineOffsets().length;
                    },
                    enumerable: false,
                    configurable: true
                });
                return FullTextDocument4;
            }();
            var Is2;
            (function(Is3) {
                var toString = Object.prototype.toString;
                function defined(value1) {
                    return typeof value1 !== "undefined";
                }
                Is3.defined = defined;
                function undefined2(value1) {
                    return typeof value1 === "undefined";
                }
                Is3.undefined = undefined2;
                function boolean(value1) {
                    return value1 === true || value1 === false;
                }
                Is3.boolean = boolean;
                function string2(value1) {
                    return toString.call(value1) === "[object String]";
                }
                Is3.string = string2;
                function number(value1) {
                    return toString.call(value1) === "[object Number]";
                }
                Is3.number = number;
                function numberRange(value1, min, max) {
                    return toString.call(value1) === "[object Number]" && min <= value1 && value1 <= max;
                }
                Is3.numberRange = numberRange;
                function integer3(value1) {
                    return toString.call(value1) === "[object Number]" && -2147483648 <= value1 && value1 <= 2147483647;
                }
                Is3.integer = integer3;
                function uinteger3(value1) {
                    return toString.call(value1) === "[object Number]" && 0 <= value1 && value1 <= 2147483647;
                }
                Is3.uinteger = uinteger3;
                function func(value1) {
                    return toString.call(value1) === "[object Function]";
                }
                Is3.func = func;
                function objectLiteral(value1) {
                    return value1 !== null && typeof value1 === "object";
                }
                Is3.objectLiteral = objectLiteral;
                function typedArray(value1, check) {
                    return Array.isArray(value1) && value1.every(check);
                }
                Is3.typedArray = typedArray;
            })(Is2 || (Is2 = {}));
        });
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/messages.js
var require_messages2 = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/messages.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ProtocolNotificationType = exports.ProtocolNotificationType0 = exports.ProtocolRequestType = exports.ProtocolRequestType0 = exports.RegistrationType = void 0;
        var vscode_jsonrpc_1 = require_main();
        var RegistrationType = class {
            constructor(method){
                this.method = method;
            }
        };
        exports.RegistrationType = RegistrationType;
        var ProtocolRequestType0 = class extends vscode_jsonrpc_1.RequestType0 {
            constructor(method){
                super(method);
            }
        };
        exports.ProtocolRequestType0 = ProtocolRequestType0;
        var ProtocolRequestType = class extends vscode_jsonrpc_1.RequestType {
            constructor(method){
                super(method, vscode_jsonrpc_1.ParameterStructures.byName);
            }
        };
        exports.ProtocolRequestType = ProtocolRequestType;
        var ProtocolNotificationType0 = class extends vscode_jsonrpc_1.NotificationType0 {
            constructor(method){
                super(method);
            }
        };
        exports.ProtocolNotificationType0 = ProtocolNotificationType0;
        var ProtocolNotificationType = class extends vscode_jsonrpc_1.NotificationType {
            constructor(method){
                super(method, vscode_jsonrpc_1.ParameterStructures.byName);
            }
        };
        exports.ProtocolNotificationType = ProtocolNotificationType;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/utils/is.js
var require_is2 = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/utils/is.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.objectLiteral = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
        function boolean(value1) {
            return value1 === true || value1 === false;
        }
        exports.boolean = boolean;
        function string2(value1) {
            return typeof value1 === "string" || value1 instanceof String;
        }
        exports.string = string2;
        function number(value1) {
            return typeof value1 === "number" || value1 instanceof Number;
        }
        exports.number = number;
        function error(value1) {
            return value1 instanceof Error;
        }
        exports.error = error;
        function func(value1) {
            return typeof value1 === "function";
        }
        exports.func = func;
        function array(value1) {
            return Array.isArray(value1);
        }
        exports.array = array;
        function stringArray(value1) {
            return array(value1) && value1.every((elem)=>string2(elem));
        }
        exports.stringArray = stringArray;
        function typedArray(value1, check) {
            return Array.isArray(value1) && value1.every(check);
        }
        exports.typedArray = typedArray;
        function objectLiteral(value1) {
            return value1 !== null && typeof value1 === "object";
        }
        exports.objectLiteral = objectLiteral;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js
var require_protocol_implementation = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ImplementationRequest = void 0;
        var messages_1 = require_messages2();
        var ImplementationRequest;
        (function(ImplementationRequest2) {
            ImplementationRequest2.method = "textDocument/implementation";
            ImplementationRequest2.type = new messages_1.ProtocolRequestType(ImplementationRequest2.method);
        })(ImplementationRequest = exports.ImplementationRequest || (exports.ImplementationRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js
var require_protocol_typeDefinition = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.TypeDefinitionRequest = void 0;
        var messages_1 = require_messages2();
        var TypeDefinitionRequest;
        (function(TypeDefinitionRequest2) {
            TypeDefinitionRequest2.method = "textDocument/typeDefinition";
            TypeDefinitionRequest2.type = new messages_1.ProtocolRequestType(TypeDefinitionRequest2.method);
        })(TypeDefinitionRequest = exports.TypeDefinitionRequest || (exports.TypeDefinitionRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolders.js
var require_protocol_workspaceFolders = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolders.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = void 0;
        var messages_1 = require_messages2();
        var WorkspaceFoldersRequest;
        (function(WorkspaceFoldersRequest2) {
            WorkspaceFoldersRequest2.type = new messages_1.ProtocolRequestType0("workspace/workspaceFolders");
        })(WorkspaceFoldersRequest = exports.WorkspaceFoldersRequest || (exports.WorkspaceFoldersRequest = {}));
        var DidChangeWorkspaceFoldersNotification;
        (function(DidChangeWorkspaceFoldersNotification2) {
            DidChangeWorkspaceFoldersNotification2.type = new messages_1.ProtocolNotificationType("workspace/didChangeWorkspaceFolders");
        })(DidChangeWorkspaceFoldersNotification = exports.DidChangeWorkspaceFoldersNotification || (exports.DidChangeWorkspaceFoldersNotification = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js
var require_protocol_configuration = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ConfigurationRequest = void 0;
        var messages_1 = require_messages2();
        var ConfigurationRequest;
        (function(ConfigurationRequest2) {
            ConfigurationRequest2.type = new messages_1.ProtocolRequestType("workspace/configuration");
        })(ConfigurationRequest = exports.ConfigurationRequest || (exports.ConfigurationRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js
var require_protocol_colorProvider = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ColorPresentationRequest = exports.DocumentColorRequest = void 0;
        var messages_1 = require_messages2();
        var DocumentColorRequest;
        (function(DocumentColorRequest2) {
            DocumentColorRequest2.method = "textDocument/documentColor";
            DocumentColorRequest2.type = new messages_1.ProtocolRequestType(DocumentColorRequest2.method);
        })(DocumentColorRequest = exports.DocumentColorRequest || (exports.DocumentColorRequest = {}));
        var ColorPresentationRequest;
        (function(ColorPresentationRequest2) {
            ColorPresentationRequest2.type = new messages_1.ProtocolRequestType("textDocument/colorPresentation");
        })(ColorPresentationRequest = exports.ColorPresentationRequest || (exports.ColorPresentationRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js
var require_protocol_foldingRange = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.FoldingRangeRequest = exports.FoldingRangeKind = void 0;
        var messages_1 = require_messages2();
        var FoldingRangeKind2;
        (function(FoldingRangeKind3) {
            FoldingRangeKind3["Comment"] = "comment";
            FoldingRangeKind3["Imports"] = "imports";
            FoldingRangeKind3["Region"] = "region";
        })(FoldingRangeKind2 = exports.FoldingRangeKind || (exports.FoldingRangeKind = {}));
        var FoldingRangeRequest;
        (function(FoldingRangeRequest2) {
            FoldingRangeRequest2.method = "textDocument/foldingRange";
            FoldingRangeRequest2.type = new messages_1.ProtocolRequestType(FoldingRangeRequest2.method);
        })(FoldingRangeRequest = exports.FoldingRangeRequest || (exports.FoldingRangeRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js
var require_protocol_declaration = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.DeclarationRequest = void 0;
        var messages_1 = require_messages2();
        var DeclarationRequest;
        (function(DeclarationRequest2) {
            DeclarationRequest2.method = "textDocument/declaration";
            DeclarationRequest2.type = new messages_1.ProtocolRequestType(DeclarationRequest2.method);
        })(DeclarationRequest = exports.DeclarationRequest || (exports.DeclarationRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js
var require_protocol_selectionRange = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.SelectionRangeRequest = void 0;
        var messages_1 = require_messages2();
        var SelectionRangeRequest;
        (function(SelectionRangeRequest2) {
            SelectionRangeRequest2.method = "textDocument/selectionRange";
            SelectionRangeRequest2.type = new messages_1.ProtocolRequestType(SelectionRangeRequest2.method);
        })(SelectionRangeRequest = exports.SelectionRangeRequest || (exports.SelectionRangeRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js
var require_protocol_progress = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = void 0;
        var vscode_jsonrpc_1 = require_main();
        var messages_1 = require_messages2();
        var WorkDoneProgress;
        (function(WorkDoneProgress2) {
            WorkDoneProgress2.type = new vscode_jsonrpc_1.ProgressType();
            function is(value1) {
                return value1 === WorkDoneProgress2.type;
            }
            WorkDoneProgress2.is = is;
        })(WorkDoneProgress = exports.WorkDoneProgress || (exports.WorkDoneProgress = {}));
        var WorkDoneProgressCreateRequest;
        (function(WorkDoneProgressCreateRequest2) {
            WorkDoneProgressCreateRequest2.type = new messages_1.ProtocolRequestType("window/workDoneProgress/create");
        })(WorkDoneProgressCreateRequest = exports.WorkDoneProgressCreateRequest || (exports.WorkDoneProgressCreateRequest = {}));
        var WorkDoneProgressCancelNotification;
        (function(WorkDoneProgressCancelNotification2) {
            WorkDoneProgressCancelNotification2.type = new messages_1.ProtocolNotificationType("window/workDoneProgress/cancel");
        })(WorkDoneProgressCancelNotification = exports.WorkDoneProgressCancelNotification || (exports.WorkDoneProgressCancelNotification = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js
var require_protocol_callHierarchy = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.CallHierarchyPrepareRequest = void 0;
        var messages_1 = require_messages2();
        var CallHierarchyPrepareRequest;
        (function(CallHierarchyPrepareRequest2) {
            CallHierarchyPrepareRequest2.method = "textDocument/prepareCallHierarchy";
            CallHierarchyPrepareRequest2.type = new messages_1.ProtocolRequestType(CallHierarchyPrepareRequest2.method);
        })(CallHierarchyPrepareRequest = exports.CallHierarchyPrepareRequest || (exports.CallHierarchyPrepareRequest = {}));
        var CallHierarchyIncomingCallsRequest;
        (function(CallHierarchyIncomingCallsRequest2) {
            CallHierarchyIncomingCallsRequest2.method = "callHierarchy/incomingCalls";
            CallHierarchyIncomingCallsRequest2.type = new messages_1.ProtocolRequestType(CallHierarchyIncomingCallsRequest2.method);
        })(CallHierarchyIncomingCallsRequest = exports.CallHierarchyIncomingCallsRequest || (exports.CallHierarchyIncomingCallsRequest = {}));
        var CallHierarchyOutgoingCallsRequest;
        (function(CallHierarchyOutgoingCallsRequest2) {
            CallHierarchyOutgoingCallsRequest2.method = "callHierarchy/outgoingCalls";
            CallHierarchyOutgoingCallsRequest2.type = new messages_1.ProtocolRequestType(CallHierarchyOutgoingCallsRequest2.method);
        })(CallHierarchyOutgoingCallsRequest = exports.CallHierarchyOutgoingCallsRequest || (exports.CallHierarchyOutgoingCallsRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js
var require_protocol_semanticTokens = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.SemanticTokensRegistrationType = exports.TokenFormat = exports.SemanticTokens = exports.SemanticTokenModifiers = exports.SemanticTokenTypes = void 0;
        var messages_1 = require_messages2();
        var SemanticTokenTypes2;
        (function(SemanticTokenTypes3) {
            SemanticTokenTypes3["namespace"] = "namespace";
            SemanticTokenTypes3["type"] = "type";
            SemanticTokenTypes3["class"] = "class";
            SemanticTokenTypes3["enum"] = "enum";
            SemanticTokenTypes3["interface"] = "interface";
            SemanticTokenTypes3["struct"] = "struct";
            SemanticTokenTypes3["typeParameter"] = "typeParameter";
            SemanticTokenTypes3["parameter"] = "parameter";
            SemanticTokenTypes3["variable"] = "variable";
            SemanticTokenTypes3["property"] = "property";
            SemanticTokenTypes3["enumMember"] = "enumMember";
            SemanticTokenTypes3["event"] = "event";
            SemanticTokenTypes3["function"] = "function";
            SemanticTokenTypes3["method"] = "method";
            SemanticTokenTypes3["macro"] = "macro";
            SemanticTokenTypes3["keyword"] = "keyword";
            SemanticTokenTypes3["modifier"] = "modifier";
            SemanticTokenTypes3["comment"] = "comment";
            SemanticTokenTypes3["string"] = "string";
            SemanticTokenTypes3["number"] = "number";
            SemanticTokenTypes3["regexp"] = "regexp";
            SemanticTokenTypes3["operator"] = "operator";
        })(SemanticTokenTypes2 = exports.SemanticTokenTypes || (exports.SemanticTokenTypes = {}));
        var SemanticTokenModifiers2;
        (function(SemanticTokenModifiers3) {
            SemanticTokenModifiers3["declaration"] = "declaration";
            SemanticTokenModifiers3["definition"] = "definition";
            SemanticTokenModifiers3["readonly"] = "readonly";
            SemanticTokenModifiers3["static"] = "static";
            SemanticTokenModifiers3["deprecated"] = "deprecated";
            SemanticTokenModifiers3["abstract"] = "abstract";
            SemanticTokenModifiers3["async"] = "async";
            SemanticTokenModifiers3["modification"] = "modification";
            SemanticTokenModifiers3["documentation"] = "documentation";
            SemanticTokenModifiers3["defaultLibrary"] = "defaultLibrary";
        })(SemanticTokenModifiers2 = exports.SemanticTokenModifiers || (exports.SemanticTokenModifiers = {}));
        var SemanticTokens2;
        (function(SemanticTokens3) {
            function is(value1) {
                const candidate = value1;
                return candidate !== void 0 && (candidate.resultId === void 0 || typeof candidate.resultId === "string") && Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === "number");
            }
            SemanticTokens3.is = is;
        })(SemanticTokens2 = exports.SemanticTokens || (exports.SemanticTokens = {}));
        var TokenFormat;
        (function(TokenFormat2) {
            TokenFormat2.Relative = "relative";
        })(TokenFormat = exports.TokenFormat || (exports.TokenFormat = {}));
        var SemanticTokensRegistrationType;
        (function(SemanticTokensRegistrationType2) {
            SemanticTokensRegistrationType2.method = "textDocument/semanticTokens";
            SemanticTokensRegistrationType2.type = new messages_1.RegistrationType(SemanticTokensRegistrationType2.method);
        })(SemanticTokensRegistrationType = exports.SemanticTokensRegistrationType || (exports.SemanticTokensRegistrationType = {}));
        var SemanticTokensRequest;
        (function(SemanticTokensRequest2) {
            SemanticTokensRequest2.method = "textDocument/semanticTokens/full";
            SemanticTokensRequest2.type = new messages_1.ProtocolRequestType(SemanticTokensRequest2.method);
        })(SemanticTokensRequest = exports.SemanticTokensRequest || (exports.SemanticTokensRequest = {}));
        var SemanticTokensDeltaRequest;
        (function(SemanticTokensDeltaRequest2) {
            SemanticTokensDeltaRequest2.method = "textDocument/semanticTokens/full/delta";
            SemanticTokensDeltaRequest2.type = new messages_1.ProtocolRequestType(SemanticTokensDeltaRequest2.method);
        })(SemanticTokensDeltaRequest = exports.SemanticTokensDeltaRequest || (exports.SemanticTokensDeltaRequest = {}));
        var SemanticTokensRangeRequest;
        (function(SemanticTokensRangeRequest2) {
            SemanticTokensRangeRequest2.method = "textDocument/semanticTokens/range";
            SemanticTokensRangeRequest2.type = new messages_1.ProtocolRequestType(SemanticTokensRangeRequest2.method);
        })(SemanticTokensRangeRequest = exports.SemanticTokensRangeRequest || (exports.SemanticTokensRangeRequest = {}));
        var SemanticTokensRefreshRequest;
        (function(SemanticTokensRefreshRequest2) {
            SemanticTokensRefreshRequest2.method = `workspace/semanticTokens/refresh`;
            SemanticTokensRefreshRequest2.type = new messages_1.ProtocolRequestType0(SemanticTokensRefreshRequest2.method);
        })(SemanticTokensRefreshRequest = exports.SemanticTokensRefreshRequest || (exports.SemanticTokensRefreshRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js
var require_protocol_showDocument = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ShowDocumentRequest = void 0;
        var messages_1 = require_messages2();
        var ShowDocumentRequest;
        (function(ShowDocumentRequest2) {
            ShowDocumentRequest2.method = "window/showDocument";
            ShowDocumentRequest2.type = new messages_1.ProtocolRequestType(ShowDocumentRequest2.method);
        })(ShowDocumentRequest = exports.ShowDocumentRequest || (exports.ShowDocumentRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js
var require_protocol_linkedEditingRange = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.LinkedEditingRangeRequest = void 0;
        var messages_1 = require_messages2();
        var LinkedEditingRangeRequest;
        (function(LinkedEditingRangeRequest2) {
            LinkedEditingRangeRequest2.method = "textDocument/linkedEditingRange";
            LinkedEditingRangeRequest2.type = new messages_1.ProtocolRequestType(LinkedEditingRangeRequest2.method);
        })(LinkedEditingRangeRequest = exports.LinkedEditingRangeRequest || (exports.LinkedEditingRangeRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js
var require_protocol_fileOperations = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.DidRenameFilesNotification = exports.WillRenameFilesRequest = exports.DidCreateFilesNotification = exports.WillCreateFilesRequest = exports.FileOperationPatternKind = void 0;
        var messages_1 = require_messages2();
        var FileOperationPatternKind;
        (function(FileOperationPatternKind2) {
            FileOperationPatternKind2.file = "file";
            FileOperationPatternKind2.folder = "folder";
        })(FileOperationPatternKind = exports.FileOperationPatternKind || (exports.FileOperationPatternKind = {}));
        var WillCreateFilesRequest;
        (function(WillCreateFilesRequest2) {
            WillCreateFilesRequest2.method = "workspace/willCreateFiles";
            WillCreateFilesRequest2.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest2.method);
        })(WillCreateFilesRequest = exports.WillCreateFilesRequest || (exports.WillCreateFilesRequest = {}));
        var DidCreateFilesNotification;
        (function(DidCreateFilesNotification2) {
            DidCreateFilesNotification2.method = "workspace/didCreateFiles";
            DidCreateFilesNotification2.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification2.method);
        })(DidCreateFilesNotification = exports.DidCreateFilesNotification || (exports.DidCreateFilesNotification = {}));
        var WillRenameFilesRequest;
        (function(WillRenameFilesRequest2) {
            WillRenameFilesRequest2.method = "workspace/willRenameFiles";
            WillRenameFilesRequest2.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest2.method);
        })(WillRenameFilesRequest = exports.WillRenameFilesRequest || (exports.WillRenameFilesRequest = {}));
        var DidRenameFilesNotification;
        (function(DidRenameFilesNotification2) {
            DidRenameFilesNotification2.method = "workspace/didRenameFiles";
            DidRenameFilesNotification2.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification2.method);
        })(DidRenameFilesNotification = exports.DidRenameFilesNotification || (exports.DidRenameFilesNotification = {}));
        var DidDeleteFilesNotification;
        (function(DidDeleteFilesNotification2) {
            DidDeleteFilesNotification2.method = "workspace/didDeleteFiles";
            DidDeleteFilesNotification2.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification2.method);
        })(DidDeleteFilesNotification = exports.DidDeleteFilesNotification || (exports.DidDeleteFilesNotification = {}));
        var WillDeleteFilesRequest;
        (function(WillDeleteFilesRequest2) {
            WillDeleteFilesRequest2.method = "workspace/willDeleteFiles";
            WillDeleteFilesRequest2.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest2.method);
        })(WillDeleteFilesRequest = exports.WillDeleteFilesRequest || (exports.WillDeleteFilesRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js
var require_protocol_moniker = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = void 0;
        var messages_1 = require_messages2();
        var UniquenessLevel;
        (function(UniquenessLevel2) {
            UniquenessLevel2["document"] = "document";
            UniquenessLevel2["project"] = "project";
            UniquenessLevel2["group"] = "group";
            UniquenessLevel2["scheme"] = "scheme";
            UniquenessLevel2["global"] = "global";
        })(UniquenessLevel = exports.UniquenessLevel || (exports.UniquenessLevel = {}));
        var MonikerKind;
        (function(MonikerKind2) {
            MonikerKind2["import"] = "import";
            MonikerKind2["export"] = "export";
            MonikerKind2["local"] = "local";
        })(MonikerKind = exports.MonikerKind || (exports.MonikerKind = {}));
        var MonikerRequest;
        (function(MonikerRequest2) {
            MonikerRequest2.method = "textDocument/moniker";
            MonikerRequest2.type = new messages_1.ProtocolRequestType(MonikerRequest2.method);
        })(MonikerRequest = exports.MonikerRequest || (exports.MonikerRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.js
var require_protocol = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/protocol.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.DocumentLinkRequest = exports.CodeLensRefreshRequest = exports.CodeLensResolveRequest = exports.CodeLensRequest = exports.WorkspaceSymbolRequest = exports.CodeActionResolveRequest = exports.CodeActionRequest = exports.DocumentSymbolRequest = exports.DocumentHighlightRequest = exports.ReferencesRequest = exports.DefinitionRequest = exports.SignatureHelpRequest = exports.SignatureHelpTriggerKind = exports.HoverRequest = exports.CompletionResolveRequest = exports.CompletionRequest = exports.CompletionTriggerKind = exports.PublishDiagnosticsNotification = exports.WatchKind = exports.FileChangeType = exports.DidChangeWatchedFilesNotification = exports.WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentNotification = exports.TextDocumentSaveReason = exports.DidSaveTextDocumentNotification = exports.DidCloseTextDocumentNotification = exports.DidChangeTextDocumentNotification = exports.TextDocumentContentChangeEvent = exports.DidOpenTextDocumentNotification = exports.TextDocumentSyncKind = exports.TelemetryEventNotification = exports.LogMessageNotification = exports.ShowMessageRequest = exports.ShowMessageNotification = exports.MessageType = exports.DidChangeConfigurationNotification = exports.ExitNotification = exports.ShutdownRequest = exports.InitializedNotification = exports.InitializeError = exports.InitializeRequest = exports.WorkDoneProgressOptions = exports.TextDocumentRegistrationOptions = exports.StaticRegistrationOptions = exports.FailureHandlingKind = exports.ResourceOperationKind = exports.UnregistrationRequest = exports.RegistrationRequest = exports.DocumentSelector = exports.DocumentFilter = void 0;
        exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.WillRenameFilesRequest = exports.DidRenameFilesNotification = exports.WillCreateFilesRequest = exports.DidCreateFilesNotification = exports.FileOperationPatternKind = exports.LinkedEditingRangeRequest = exports.ShowDocumentRequest = exports.SemanticTokensRegistrationType = exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.TokenFormat = exports.SemanticTokens = exports.SemanticTokenModifiers = exports.SemanticTokenTypes = exports.CallHierarchyPrepareRequest = exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = exports.SelectionRangeRequest = exports.DeclarationRequest = exports.FoldingRangeRequest = exports.ColorPresentationRequest = exports.DocumentColorRequest = exports.ConfigurationRequest = exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = exports.TypeDefinitionRequest = exports.ImplementationRequest = exports.ApplyWorkspaceEditRequest = exports.ExecuteCommandRequest = exports.PrepareRenameRequest = exports.RenameRequest = exports.PrepareSupportDefaultBehavior = exports.DocumentOnTypeFormattingRequest = exports.DocumentRangeFormattingRequest = exports.DocumentFormattingRequest = exports.DocumentLinkResolveRequest = void 0;
        var Is2 = require_is2();
        var messages_1 = require_messages2();
        var protocol_implementation_1 = require_protocol_implementation();
        Object.defineProperty(exports, "ImplementationRequest", {
            enumerable: true,
            get: function() {
                return protocol_implementation_1.ImplementationRequest;
            }
        });
        var protocol_typeDefinition_1 = require_protocol_typeDefinition();
        Object.defineProperty(exports, "TypeDefinitionRequest", {
            enumerable: true,
            get: function() {
                return protocol_typeDefinition_1.TypeDefinitionRequest;
            }
        });
        var protocol_workspaceFolders_1 = require_protocol_workspaceFolders();
        Object.defineProperty(exports, "WorkspaceFoldersRequest", {
            enumerable: true,
            get: function() {
                return protocol_workspaceFolders_1.WorkspaceFoldersRequest;
            }
        });
        Object.defineProperty(exports, "DidChangeWorkspaceFoldersNotification", {
            enumerable: true,
            get: function() {
                return protocol_workspaceFolders_1.DidChangeWorkspaceFoldersNotification;
            }
        });
        var protocol_configuration_1 = require_protocol_configuration();
        Object.defineProperty(exports, "ConfigurationRequest", {
            enumerable: true,
            get: function() {
                return protocol_configuration_1.ConfigurationRequest;
            }
        });
        var protocol_colorProvider_1 = require_protocol_colorProvider();
        Object.defineProperty(exports, "DocumentColorRequest", {
            enumerable: true,
            get: function() {
                return protocol_colorProvider_1.DocumentColorRequest;
            }
        });
        Object.defineProperty(exports, "ColorPresentationRequest", {
            enumerable: true,
            get: function() {
                return protocol_colorProvider_1.ColorPresentationRequest;
            }
        });
        var protocol_foldingRange_1 = require_protocol_foldingRange();
        Object.defineProperty(exports, "FoldingRangeRequest", {
            enumerable: true,
            get: function() {
                return protocol_foldingRange_1.FoldingRangeRequest;
            }
        });
        var protocol_declaration_1 = require_protocol_declaration();
        Object.defineProperty(exports, "DeclarationRequest", {
            enumerable: true,
            get: function() {
                return protocol_declaration_1.DeclarationRequest;
            }
        });
        var protocol_selectionRange_1 = require_protocol_selectionRange();
        Object.defineProperty(exports, "SelectionRangeRequest", {
            enumerable: true,
            get: function() {
                return protocol_selectionRange_1.SelectionRangeRequest;
            }
        });
        var protocol_progress_1 = require_protocol_progress();
        Object.defineProperty(exports, "WorkDoneProgress", {
            enumerable: true,
            get: function() {
                return protocol_progress_1.WorkDoneProgress;
            }
        });
        Object.defineProperty(exports, "WorkDoneProgressCreateRequest", {
            enumerable: true,
            get: function() {
                return protocol_progress_1.WorkDoneProgressCreateRequest;
            }
        });
        Object.defineProperty(exports, "WorkDoneProgressCancelNotification", {
            enumerable: true,
            get: function() {
                return protocol_progress_1.WorkDoneProgressCancelNotification;
            }
        });
        var protocol_callHierarchy_1 = require_protocol_callHierarchy();
        Object.defineProperty(exports, "CallHierarchyIncomingCallsRequest", {
            enumerable: true,
            get: function() {
                return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest;
            }
        });
        Object.defineProperty(exports, "CallHierarchyOutgoingCallsRequest", {
            enumerable: true,
            get: function() {
                return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest;
            }
        });
        Object.defineProperty(exports, "CallHierarchyPrepareRequest", {
            enumerable: true,
            get: function() {
                return protocol_callHierarchy_1.CallHierarchyPrepareRequest;
            }
        });
        var protocol_semanticTokens_1 = require_protocol_semanticTokens();
        Object.defineProperty(exports, "SemanticTokenTypes", {
            enumerable: true,
            get: function() {
                return protocol_semanticTokens_1.SemanticTokenTypes;
            }
        });
        Object.defineProperty(exports, "SemanticTokenModifiers", {
            enumerable: true,
            get: function() {
                return protocol_semanticTokens_1.SemanticTokenModifiers;
            }
        });
        Object.defineProperty(exports, "SemanticTokens", {
            enumerable: true,
            get: function() {
                return protocol_semanticTokens_1.SemanticTokens;
            }
        });
        Object.defineProperty(exports, "TokenFormat", {
            enumerable: true,
            get: function() {
                return protocol_semanticTokens_1.TokenFormat;
            }
        });
        Object.defineProperty(exports, "SemanticTokensRequest", {
            enumerable: true,
            get: function() {
                return protocol_semanticTokens_1.SemanticTokensRequest;
            }
        });
        Object.defineProperty(exports, "SemanticTokensDeltaRequest", {
            enumerable: true,
            get: function() {
                return protocol_semanticTokens_1.SemanticTokensDeltaRequest;
            }
        });
        Object.defineProperty(exports, "SemanticTokensRangeRequest", {
            enumerable: true,
            get: function() {
                return protocol_semanticTokens_1.SemanticTokensRangeRequest;
            }
        });
        Object.defineProperty(exports, "SemanticTokensRefreshRequest", {
            enumerable: true,
            get: function() {
                return protocol_semanticTokens_1.SemanticTokensRefreshRequest;
            }
        });
        Object.defineProperty(exports, "SemanticTokensRegistrationType", {
            enumerable: true,
            get: function() {
                return protocol_semanticTokens_1.SemanticTokensRegistrationType;
            }
        });
        var protocol_showDocument_1 = require_protocol_showDocument();
        Object.defineProperty(exports, "ShowDocumentRequest", {
            enumerable: true,
            get: function() {
                return protocol_showDocument_1.ShowDocumentRequest;
            }
        });
        var protocol_linkedEditingRange_1 = require_protocol_linkedEditingRange();
        Object.defineProperty(exports, "LinkedEditingRangeRequest", {
            enumerable: true,
            get: function() {
                return protocol_linkedEditingRange_1.LinkedEditingRangeRequest;
            }
        });
        var protocol_fileOperations_1 = require_protocol_fileOperations();
        Object.defineProperty(exports, "FileOperationPatternKind", {
            enumerable: true,
            get: function() {
                return protocol_fileOperations_1.FileOperationPatternKind;
            }
        });
        Object.defineProperty(exports, "DidCreateFilesNotification", {
            enumerable: true,
            get: function() {
                return protocol_fileOperations_1.DidCreateFilesNotification;
            }
        });
        Object.defineProperty(exports, "WillCreateFilesRequest", {
            enumerable: true,
            get: function() {
                return protocol_fileOperations_1.WillCreateFilesRequest;
            }
        });
        Object.defineProperty(exports, "DidRenameFilesNotification", {
            enumerable: true,
            get: function() {
                return protocol_fileOperations_1.DidRenameFilesNotification;
            }
        });
        Object.defineProperty(exports, "WillRenameFilesRequest", {
            enumerable: true,
            get: function() {
                return protocol_fileOperations_1.WillRenameFilesRequest;
            }
        });
        Object.defineProperty(exports, "DidDeleteFilesNotification", {
            enumerable: true,
            get: function() {
                return protocol_fileOperations_1.DidDeleteFilesNotification;
            }
        });
        Object.defineProperty(exports, "WillDeleteFilesRequest", {
            enumerable: true,
            get: function() {
                return protocol_fileOperations_1.WillDeleteFilesRequest;
            }
        });
        var protocol_moniker_1 = require_protocol_moniker();
        Object.defineProperty(exports, "UniquenessLevel", {
            enumerable: true,
            get: function() {
                return protocol_moniker_1.UniquenessLevel;
            }
        });
        Object.defineProperty(exports, "MonikerKind", {
            enumerable: true,
            get: function() {
                return protocol_moniker_1.MonikerKind;
            }
        });
        Object.defineProperty(exports, "MonikerRequest", {
            enumerable: true,
            get: function() {
                return protocol_moniker_1.MonikerRequest;
            }
        });
        var DocumentFilter;
        (function(DocumentFilter2) {
            function is(value1) {
                const candidate = value1;
                return Is2.string(candidate.language) || Is2.string(candidate.scheme) || Is2.string(candidate.pattern);
            }
            DocumentFilter2.is = is;
        })(DocumentFilter = exports.DocumentFilter || (exports.DocumentFilter = {}));
        var DocumentSelector;
        (function(DocumentSelector2) {
            function is(value1) {
                if (!Array.isArray(value1)) {
                    return false;
                }
                for (let elem of value1){
                    if (!Is2.string(elem) && !DocumentFilter.is(elem)) {
                        return false;
                    }
                }
                return true;
            }
            DocumentSelector2.is = is;
        })(DocumentSelector = exports.DocumentSelector || (exports.DocumentSelector = {}));
        var RegistrationRequest;
        (function(RegistrationRequest2) {
            RegistrationRequest2.type = new messages_1.ProtocolRequestType("client/registerCapability");
        })(RegistrationRequest = exports.RegistrationRequest || (exports.RegistrationRequest = {}));
        var UnregistrationRequest;
        (function(UnregistrationRequest2) {
            UnregistrationRequest2.type = new messages_1.ProtocolRequestType("client/unregisterCapability");
        })(UnregistrationRequest = exports.UnregistrationRequest || (exports.UnregistrationRequest = {}));
        var ResourceOperationKind;
        (function(ResourceOperationKind2) {
            ResourceOperationKind2.Create = "create";
            ResourceOperationKind2.Rename = "rename";
            ResourceOperationKind2.Delete = "delete";
        })(ResourceOperationKind = exports.ResourceOperationKind || (exports.ResourceOperationKind = {}));
        var FailureHandlingKind;
        (function(FailureHandlingKind2) {
            FailureHandlingKind2.Abort = "abort";
            FailureHandlingKind2.Transactional = "transactional";
            FailureHandlingKind2.TextOnlyTransactional = "textOnlyTransactional";
            FailureHandlingKind2.Undo = "undo";
        })(FailureHandlingKind = exports.FailureHandlingKind || (exports.FailureHandlingKind = {}));
        var StaticRegistrationOptions;
        (function(StaticRegistrationOptions2) {
            function hasId(value1) {
                const candidate = value1;
                return candidate && Is2.string(candidate.id) && candidate.id.length > 0;
            }
            StaticRegistrationOptions2.hasId = hasId;
        })(StaticRegistrationOptions = exports.StaticRegistrationOptions || (exports.StaticRegistrationOptions = {}));
        var TextDocumentRegistrationOptions;
        (function(TextDocumentRegistrationOptions2) {
            function is(value1) {
                const candidate = value1;
                return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));
            }
            TextDocumentRegistrationOptions2.is = is;
        })(TextDocumentRegistrationOptions = exports.TextDocumentRegistrationOptions || (exports.TextDocumentRegistrationOptions = {}));
        var WorkDoneProgressOptions;
        (function(WorkDoneProgressOptions2) {
            function is(value1) {
                const candidate = value1;
                return Is2.objectLiteral(candidate) && (candidate.workDoneProgress === void 0 || Is2.boolean(candidate.workDoneProgress));
            }
            WorkDoneProgressOptions2.is = is;
            function hasWorkDoneProgress(value1) {
                const candidate = value1;
                return candidate && Is2.boolean(candidate.workDoneProgress);
            }
            WorkDoneProgressOptions2.hasWorkDoneProgress = hasWorkDoneProgress;
        })(WorkDoneProgressOptions = exports.WorkDoneProgressOptions || (exports.WorkDoneProgressOptions = {}));
        var InitializeRequest;
        (function(InitializeRequest2) {
            InitializeRequest2.type = new messages_1.ProtocolRequestType("initialize");
        })(InitializeRequest = exports.InitializeRequest || (exports.InitializeRequest = {}));
        var InitializeError;
        (function(InitializeError2) {
            InitializeError2.unknownProtocolVersion = 1;
        })(InitializeError = exports.InitializeError || (exports.InitializeError = {}));
        var InitializedNotification;
        (function(InitializedNotification2) {
            InitializedNotification2.type = new messages_1.ProtocolNotificationType("initialized");
        })(InitializedNotification = exports.InitializedNotification || (exports.InitializedNotification = {}));
        var ShutdownRequest;
        (function(ShutdownRequest2) {
            ShutdownRequest2.type = new messages_1.ProtocolRequestType0("shutdown");
        })(ShutdownRequest = exports.ShutdownRequest || (exports.ShutdownRequest = {}));
        var ExitNotification;
        (function(ExitNotification2) {
            ExitNotification2.type = new messages_1.ProtocolNotificationType0("exit");
        })(ExitNotification = exports.ExitNotification || (exports.ExitNotification = {}));
        var DidChangeConfigurationNotification;
        (function(DidChangeConfigurationNotification2) {
            DidChangeConfigurationNotification2.type = new messages_1.ProtocolNotificationType("workspace/didChangeConfiguration");
        })(DidChangeConfigurationNotification = exports.DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = {}));
        var MessageType;
        (function(MessageType2) {
            MessageType2.Error = 1;
            MessageType2.Warning = 2;
            MessageType2.Info = 3;
            MessageType2.Log = 4;
        })(MessageType = exports.MessageType || (exports.MessageType = {}));
        var ShowMessageNotification;
        (function(ShowMessageNotification2) {
            ShowMessageNotification2.type = new messages_1.ProtocolNotificationType("window/showMessage");
        })(ShowMessageNotification = exports.ShowMessageNotification || (exports.ShowMessageNotification = {}));
        var ShowMessageRequest;
        (function(ShowMessageRequest2) {
            ShowMessageRequest2.type = new messages_1.ProtocolRequestType("window/showMessageRequest");
        })(ShowMessageRequest = exports.ShowMessageRequest || (exports.ShowMessageRequest = {}));
        var LogMessageNotification;
        (function(LogMessageNotification2) {
            LogMessageNotification2.type = new messages_1.ProtocolNotificationType("window/logMessage");
        })(LogMessageNotification = exports.LogMessageNotification || (exports.LogMessageNotification = {}));
        var TelemetryEventNotification;
        (function(TelemetryEventNotification2) {
            TelemetryEventNotification2.type = new messages_1.ProtocolNotificationType("telemetry/event");
        })(TelemetryEventNotification = exports.TelemetryEventNotification || (exports.TelemetryEventNotification = {}));
        var TextDocumentSyncKind;
        (function(TextDocumentSyncKind2) {
            TextDocumentSyncKind2.None = 0;
            TextDocumentSyncKind2.Full = 1;
            TextDocumentSyncKind2.Incremental = 2;
        })(TextDocumentSyncKind = exports.TextDocumentSyncKind || (exports.TextDocumentSyncKind = {}));
        var DidOpenTextDocumentNotification;
        (function(DidOpenTextDocumentNotification2) {
            DidOpenTextDocumentNotification2.method = "textDocument/didOpen";
            DidOpenTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification2.method);
        })(DidOpenTextDocumentNotification = exports.DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = {}));
        var TextDocumentContentChangeEvent;
        (function(TextDocumentContentChangeEvent2) {
            function isIncremental(event) {
                let candidate = event;
                return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range !== void 0 && (candidate.rangeLength === void 0 || typeof candidate.rangeLength === "number");
            }
            TextDocumentContentChangeEvent2.isIncremental = isIncremental;
            function isFull(event) {
                let candidate = event;
                return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range === void 0 && candidate.rangeLength === void 0;
            }
            TextDocumentContentChangeEvent2.isFull = isFull;
        })(TextDocumentContentChangeEvent = exports.TextDocumentContentChangeEvent || (exports.TextDocumentContentChangeEvent = {}));
        var DidChangeTextDocumentNotification;
        (function(DidChangeTextDocumentNotification2) {
            DidChangeTextDocumentNotification2.method = "textDocument/didChange";
            DidChangeTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification2.method);
        })(DidChangeTextDocumentNotification = exports.DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = {}));
        var DidCloseTextDocumentNotification;
        (function(DidCloseTextDocumentNotification2) {
            DidCloseTextDocumentNotification2.method = "textDocument/didClose";
            DidCloseTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification2.method);
        })(DidCloseTextDocumentNotification = exports.DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = {}));
        var DidSaveTextDocumentNotification;
        (function(DidSaveTextDocumentNotification2) {
            DidSaveTextDocumentNotification2.method = "textDocument/didSave";
            DidSaveTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification2.method);
        })(DidSaveTextDocumentNotification = exports.DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = {}));
        var TextDocumentSaveReason;
        (function(TextDocumentSaveReason2) {
            TextDocumentSaveReason2.Manual = 1;
            TextDocumentSaveReason2.AfterDelay = 2;
            TextDocumentSaveReason2.FocusOut = 3;
        })(TextDocumentSaveReason = exports.TextDocumentSaveReason || (exports.TextDocumentSaveReason = {}));
        var WillSaveTextDocumentNotification;
        (function(WillSaveTextDocumentNotification2) {
            WillSaveTextDocumentNotification2.method = "textDocument/willSave";
            WillSaveTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification2.method);
        })(WillSaveTextDocumentNotification = exports.WillSaveTextDocumentNotification || (exports.WillSaveTextDocumentNotification = {}));
        var WillSaveTextDocumentWaitUntilRequest;
        (function(WillSaveTextDocumentWaitUntilRequest2) {
            WillSaveTextDocumentWaitUntilRequest2.method = "textDocument/willSaveWaitUntil";
            WillSaveTextDocumentWaitUntilRequest2.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest2.method);
        })(WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentWaitUntilRequest || (exports.WillSaveTextDocumentWaitUntilRequest = {}));
        var DidChangeWatchedFilesNotification;
        (function(DidChangeWatchedFilesNotification2) {
            DidChangeWatchedFilesNotification2.type = new messages_1.ProtocolNotificationType("workspace/didChangeWatchedFiles");
        })(DidChangeWatchedFilesNotification = exports.DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = {}));
        var FileChangeType;
        (function(FileChangeType2) {
            FileChangeType2.Created = 1;
            FileChangeType2.Changed = 2;
            FileChangeType2.Deleted = 3;
        })(FileChangeType = exports.FileChangeType || (exports.FileChangeType = {}));
        var WatchKind;
        (function(WatchKind2) {
            WatchKind2.Create = 1;
            WatchKind2.Change = 2;
            WatchKind2.Delete = 4;
        })(WatchKind = exports.WatchKind || (exports.WatchKind = {}));
        var PublishDiagnosticsNotification;
        (function(PublishDiagnosticsNotification2) {
            PublishDiagnosticsNotification2.type = new messages_1.ProtocolNotificationType("textDocument/publishDiagnostics");
        })(PublishDiagnosticsNotification = exports.PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = {}));
        var CompletionTriggerKind;
        (function(CompletionTriggerKind2) {
            CompletionTriggerKind2.Invoked = 1;
            CompletionTriggerKind2.TriggerCharacter = 2;
            CompletionTriggerKind2.TriggerForIncompleteCompletions = 3;
        })(CompletionTriggerKind = exports.CompletionTriggerKind || (exports.CompletionTriggerKind = {}));
        var CompletionRequest;
        (function(CompletionRequest2) {
            CompletionRequest2.method = "textDocument/completion";
            CompletionRequest2.type = new messages_1.ProtocolRequestType(CompletionRequest2.method);
        })(CompletionRequest = exports.CompletionRequest || (exports.CompletionRequest = {}));
        var CompletionResolveRequest;
        (function(CompletionResolveRequest2) {
            CompletionResolveRequest2.method = "completionItem/resolve";
            CompletionResolveRequest2.type = new messages_1.ProtocolRequestType(CompletionResolveRequest2.method);
        })(CompletionResolveRequest = exports.CompletionResolveRequest || (exports.CompletionResolveRequest = {}));
        var HoverRequest;
        (function(HoverRequest2) {
            HoverRequest2.method = "textDocument/hover";
            HoverRequest2.type = new messages_1.ProtocolRequestType(HoverRequest2.method);
        })(HoverRequest = exports.HoverRequest || (exports.HoverRequest = {}));
        var SignatureHelpTriggerKind;
        (function(SignatureHelpTriggerKind2) {
            SignatureHelpTriggerKind2.Invoked = 1;
            SignatureHelpTriggerKind2.TriggerCharacter = 2;
            SignatureHelpTriggerKind2.ContentChange = 3;
        })(SignatureHelpTriggerKind = exports.SignatureHelpTriggerKind || (exports.SignatureHelpTriggerKind = {}));
        var SignatureHelpRequest;
        (function(SignatureHelpRequest2) {
            SignatureHelpRequest2.method = "textDocument/signatureHelp";
            SignatureHelpRequest2.type = new messages_1.ProtocolRequestType(SignatureHelpRequest2.method);
        })(SignatureHelpRequest = exports.SignatureHelpRequest || (exports.SignatureHelpRequest = {}));
        var DefinitionRequest;
        (function(DefinitionRequest2) {
            DefinitionRequest2.method = "textDocument/definition";
            DefinitionRequest2.type = new messages_1.ProtocolRequestType(DefinitionRequest2.method);
        })(DefinitionRequest = exports.DefinitionRequest || (exports.DefinitionRequest = {}));
        var ReferencesRequest;
        (function(ReferencesRequest2) {
            ReferencesRequest2.method = "textDocument/references";
            ReferencesRequest2.type = new messages_1.ProtocolRequestType(ReferencesRequest2.method);
        })(ReferencesRequest = exports.ReferencesRequest || (exports.ReferencesRequest = {}));
        var DocumentHighlightRequest;
        (function(DocumentHighlightRequest2) {
            DocumentHighlightRequest2.method = "textDocument/documentHighlight";
            DocumentHighlightRequest2.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest2.method);
        })(DocumentHighlightRequest = exports.DocumentHighlightRequest || (exports.DocumentHighlightRequest = {}));
        var DocumentSymbolRequest;
        (function(DocumentSymbolRequest2) {
            DocumentSymbolRequest2.method = "textDocument/documentSymbol";
            DocumentSymbolRequest2.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest2.method);
        })(DocumentSymbolRequest = exports.DocumentSymbolRequest || (exports.DocumentSymbolRequest = {}));
        var CodeActionRequest;
        (function(CodeActionRequest2) {
            CodeActionRequest2.method = "textDocument/codeAction";
            CodeActionRequest2.type = new messages_1.ProtocolRequestType(CodeActionRequest2.method);
        })(CodeActionRequest = exports.CodeActionRequest || (exports.CodeActionRequest = {}));
        var CodeActionResolveRequest;
        (function(CodeActionResolveRequest2) {
            CodeActionResolveRequest2.method = "codeAction/resolve";
            CodeActionResolveRequest2.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest2.method);
        })(CodeActionResolveRequest = exports.CodeActionResolveRequest || (exports.CodeActionResolveRequest = {}));
        var WorkspaceSymbolRequest;
        (function(WorkspaceSymbolRequest2) {
            WorkspaceSymbolRequest2.method = "workspace/symbol";
            WorkspaceSymbolRequest2.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest2.method);
        })(WorkspaceSymbolRequest = exports.WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = {}));
        var CodeLensRequest;
        (function(CodeLensRequest2) {
            CodeLensRequest2.method = "textDocument/codeLens";
            CodeLensRequest2.type = new messages_1.ProtocolRequestType(CodeLensRequest2.method);
        })(CodeLensRequest = exports.CodeLensRequest || (exports.CodeLensRequest = {}));
        var CodeLensResolveRequest;
        (function(CodeLensResolveRequest2) {
            CodeLensResolveRequest2.method = "codeLens/resolve";
            CodeLensResolveRequest2.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest2.method);
        })(CodeLensResolveRequest = exports.CodeLensResolveRequest || (exports.CodeLensResolveRequest = {}));
        var CodeLensRefreshRequest;
        (function(CodeLensRefreshRequest2) {
            CodeLensRefreshRequest2.method = `workspace/codeLens/refresh`;
            CodeLensRefreshRequest2.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest2.method);
        })(CodeLensRefreshRequest = exports.CodeLensRefreshRequest || (exports.CodeLensRefreshRequest = {}));
        var DocumentLinkRequest;
        (function(DocumentLinkRequest2) {
            DocumentLinkRequest2.method = "textDocument/documentLink";
            DocumentLinkRequest2.type = new messages_1.ProtocolRequestType(DocumentLinkRequest2.method);
        })(DocumentLinkRequest = exports.DocumentLinkRequest || (exports.DocumentLinkRequest = {}));
        var DocumentLinkResolveRequest;
        (function(DocumentLinkResolveRequest2) {
            DocumentLinkResolveRequest2.method = "documentLink/resolve";
            DocumentLinkResolveRequest2.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest2.method);
        })(DocumentLinkResolveRequest = exports.DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = {}));
        var DocumentFormattingRequest;
        (function(DocumentFormattingRequest2) {
            DocumentFormattingRequest2.method = "textDocument/formatting";
            DocumentFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest2.method);
        })(DocumentFormattingRequest = exports.DocumentFormattingRequest || (exports.DocumentFormattingRequest = {}));
        var DocumentRangeFormattingRequest;
        (function(DocumentRangeFormattingRequest2) {
            DocumentRangeFormattingRequest2.method = "textDocument/rangeFormatting";
            DocumentRangeFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest2.method);
        })(DocumentRangeFormattingRequest = exports.DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = {}));
        var DocumentOnTypeFormattingRequest;
        (function(DocumentOnTypeFormattingRequest2) {
            DocumentOnTypeFormattingRequest2.method = "textDocument/onTypeFormatting";
            DocumentOnTypeFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest2.method);
        })(DocumentOnTypeFormattingRequest = exports.DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = {}));
        var PrepareSupportDefaultBehavior;
        (function(PrepareSupportDefaultBehavior2) {
            PrepareSupportDefaultBehavior2.Identifier = 1;
        })(PrepareSupportDefaultBehavior = exports.PrepareSupportDefaultBehavior || (exports.PrepareSupportDefaultBehavior = {}));
        var RenameRequest;
        (function(RenameRequest2) {
            RenameRequest2.method = "textDocument/rename";
            RenameRequest2.type = new messages_1.ProtocolRequestType(RenameRequest2.method);
        })(RenameRequest = exports.RenameRequest || (exports.RenameRequest = {}));
        var PrepareRenameRequest;
        (function(PrepareRenameRequest2) {
            PrepareRenameRequest2.method = "textDocument/prepareRename";
            PrepareRenameRequest2.type = new messages_1.ProtocolRequestType(PrepareRenameRequest2.method);
        })(PrepareRenameRequest = exports.PrepareRenameRequest || (exports.PrepareRenameRequest = {}));
        var ExecuteCommandRequest;
        (function(ExecuteCommandRequest2) {
            ExecuteCommandRequest2.type = new messages_1.ProtocolRequestType("workspace/executeCommand");
        })(ExecuteCommandRequest = exports.ExecuteCommandRequest || (exports.ExecuteCommandRequest = {}));
        var ApplyWorkspaceEditRequest;
        (function(ApplyWorkspaceEditRequest2) {
            ApplyWorkspaceEditRequest2.type = new messages_1.ProtocolRequestType("workspace/applyEdit");
        })(ApplyWorkspaceEditRequest = exports.ApplyWorkspaceEditRequest || (exports.ApplyWorkspaceEditRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/connection.js
var require_connection2 = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/connection.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createProtocolConnection = void 0;
        var vscode_jsonrpc_1 = require_main();
        function createProtocolConnection(input, output, logger, options) {
            if (vscode_jsonrpc_1.ConnectionStrategy.is(options)) {
                options = {
                    connectionStrategy: options
                };
            }
            return vscode_jsonrpc_1.createMessageConnection(input, output, logger, options);
        }
        exports.createProtocolConnection = createProtocolConnection;
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/api.js
var require_api2 = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/common/api.js" (exports) {
        "use strict";
        var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            Object.defineProperty(o, k2, {
                enumerable: true,
                get: function() {
                    return m[k];
                }
            });
        } : function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
        });
        var __exportStar = exports && exports.__exportStar || function(m, exports2) {
            for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.LSPErrorCodes = exports.createProtocolConnection = void 0;
        __exportStar(require_main(), exports);
        __exportStar(require_main2(), exports);
        __exportStar(require_messages2(), exports);
        __exportStar(require_protocol(), exports);
        var connection_1 = require_connection2();
        Object.defineProperty(exports, "createProtocolConnection", {
            enumerable: true,
            get: function() {
                return connection_1.createProtocolConnection;
            }
        });
        var LSPErrorCodes;
        (function(LSPErrorCodes2) {
            LSPErrorCodes2.lspReservedErrorRangeStart = -32899;
            LSPErrorCodes2.ContentModified = -32801;
            LSPErrorCodes2.RequestCancelled = -32800;
            LSPErrorCodes2.lspReservedErrorRangeEnd = -32800;
        })(LSPErrorCodes = exports.LSPErrorCodes || (exports.LSPErrorCodes = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/browser/main.js
var require_main3 = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/lib/browser/main.js" (exports) {
        "use strict";
        var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            Object.defineProperty(o, k2, {
                enumerable: true,
                get: function() {
                    return m[k];
                }
            });
        } : function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
        });
        var __exportStar = exports && exports.__exportStar || function(m, exports2) {
            for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createProtocolConnection = void 0;
        var browser_1 = require_browser();
        __exportStar(require_browser(), exports);
        __exportStar(require_api2(), exports);
        function createProtocolConnection(reader, writer, logger, options) {
            return browser_1.createMessageConnection(reader, writer, logger, options);
        }
        exports.createProtocolConnection = createProtocolConnection;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/semanticTokens.js
var require_semanticTokens = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/semanticTokens.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.SemanticTokensBuilder = exports.SemanticTokensFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var SemanticTokensFeature = (Base)=>{
            return class extends Base {
                get semanticTokens() {
                    return {
                        on: (handler)=>{
                            const type = vscode_languageserver_protocol_1.SemanticTokensRequest.type;
                            this.connection.onRequest(type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        },
                        onDelta: (handler)=>{
                            const type = vscode_languageserver_protocol_1.SemanticTokensDeltaRequest.type;
                            this.connection.onRequest(type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        },
                        onRange: (handler)=>{
                            const type = vscode_languageserver_protocol_1.SemanticTokensRangeRequest.type;
                            this.connection.onRequest(type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        }
                    };
                }
            };
        };
        exports.SemanticTokensFeature = SemanticTokensFeature;
        var SemanticTokensBuilder = class {
            initialize() {
                this._id = Date.now();
                this._prevLine = 0;
                this._prevChar = 0;
                this._data = [];
                this._dataLen = 0;
            }
            push(line, char, length, tokenType2, tokenModifiers) {
                let pushLine = line;
                let pushChar = char;
                if (this._dataLen > 0) {
                    pushLine -= this._prevLine;
                    if (pushLine === 0) {
                        pushChar -= this._prevChar;
                    }
                }
                this._data[this._dataLen++] = pushLine;
                this._data[this._dataLen++] = pushChar;
                this._data[this._dataLen++] = length;
                this._data[this._dataLen++] = tokenType2;
                this._data[this._dataLen++] = tokenModifiers;
                this._prevLine = line;
                this._prevChar = char;
            }
            get id() {
                return this._id.toString();
            }
            previousResult(id) {
                if (this.id === id) {
                    this._prevData = this._data;
                }
                this.initialize();
            }
            build() {
                this._prevData = void 0;
                return {
                    resultId: this.id,
                    data: this._data
                };
            }
            canBuildEdits() {
                return this._prevData !== void 0;
            }
            buildEdits() {
                if (this._prevData !== void 0) {
                    const prevDataLength = this._prevData.length;
                    const dataLength = this._data.length;
                    let startIndex = 0;
                    while(startIndex < dataLength && startIndex < prevDataLength && this._prevData[startIndex] === this._data[startIndex]){
                        startIndex++;
                    }
                    if (startIndex < dataLength && startIndex < prevDataLength) {
                        let endIndex = 0;
                        while(endIndex < dataLength && endIndex < prevDataLength && this._prevData[prevDataLength - 1 - endIndex] === this._data[dataLength - 1 - endIndex]){
                            endIndex++;
                        }
                        const newData = this._data.slice(startIndex, dataLength - endIndex);
                        const result = {
                            resultId: this.id,
                            edits: [
                                {
                                    start: startIndex,
                                    deleteCount: prevDataLength - endIndex - startIndex,
                                    data: newData
                                }
                            ]
                        };
                        return result;
                    } else if (startIndex < dataLength) {
                        return {
                            resultId: this.id,
                            edits: [
                                {
                                    start: startIndex,
                                    deleteCount: 0,
                                    data: this._data.slice(startIndex)
                                }
                            ]
                        };
                    } else if (startIndex < prevDataLength) {
                        return {
                            resultId: this.id,
                            edits: [
                                {
                                    start: startIndex,
                                    deleteCount: prevDataLength - startIndex
                                }
                            ]
                        };
                    } else {
                        return {
                            resultId: this.id,
                            edits: []
                        };
                    }
                } else {
                    return this.build();
                }
            }
            constructor(){
                this._prevData = void 0;
                this.initialize();
            }
        };
        exports.SemanticTokensBuilder = SemanticTokensBuilder;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/utils/is.js
var require_is3 = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/utils/is.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.thenable = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
        function boolean(value1) {
            return value1 === true || value1 === false;
        }
        exports.boolean = boolean;
        function string2(value1) {
            return typeof value1 === "string" || value1 instanceof String;
        }
        exports.string = string2;
        function number(value1) {
            return typeof value1 === "number" || value1 instanceof Number;
        }
        exports.number = number;
        function error(value1) {
            return value1 instanceof Error;
        }
        exports.error = error;
        function func(value1) {
            return typeof value1 === "function";
        }
        exports.func = func;
        function array(value1) {
            return Array.isArray(value1);
        }
        exports.array = array;
        function stringArray(value1) {
            return array(value1) && value1.every((elem)=>string2(elem));
        }
        exports.stringArray = stringArray;
        function typedArray(value1, check) {
            return Array.isArray(value1) && value1.every(check);
        }
        exports.typedArray = typedArray;
        function thenable(value1) {
            return value1 && func(value1.then);
        }
        exports.thenable = thenable;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/utils/uuid.js
var require_uuid = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/utils/uuid.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.generateUuid = exports.parse = exports.isUUID = exports.v4 = exports.empty = void 0;
        var ValueUUID = class {
            asHex() {
                return this._value;
            }
            equals(other) {
                return this.asHex() === other.asHex();
            }
            constructor(_value){
                this._value = _value;
            }
        };
        var V4UUID = class extends ValueUUID {
            static _oneOf(array) {
                return array[Math.floor(array.length * Math.random())];
            }
            static _randomHex() {
                return V4UUID._oneOf(V4UUID._chars);
            }
            constructor(){
                super([
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    "-",
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    "-",
                    "4",
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    "-",
                    V4UUID._oneOf(V4UUID._timeHighBits),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    "-",
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex(),
                    V4UUID._randomHex()
                ].join(""));
            }
        };
        V4UUID._chars = [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "6",
            "7",
            "8",
            "9",
            "a",
            "b",
            "c",
            "d",
            "e",
            "f"
        ];
        V4UUID._timeHighBits = [
            "8",
            "9",
            "a",
            "b"
        ];
        exports.empty = new ValueUUID("00000000-0000-0000-0000-000000000000");
        function v4() {
            return new V4UUID();
        }
        exports.v4 = v4;
        var _UUIDPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
        function isUUID(value1) {
            return _UUIDPattern.test(value1);
        }
        exports.isUUID = isUUID;
        function parse7(value1) {
            if (!isUUID(value1)) {
                throw new Error("invalid uuid");
            }
            return new ValueUUID(value1);
        }
        exports.parse = parse7;
        function generateUuid() {
            return v4().asHex();
        }
        exports.generateUuid = generateUuid;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/progress.js
var require_progress = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/progress.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.attachPartialResult = exports.ProgressFeature = exports.attachWorkDone = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var uuid_1 = require_uuid();
        var WorkDoneProgressReporterImpl = class {
            begin(title, percentage, message, cancellable) {
                let param = {
                    kind: "begin",
                    title,
                    percentage,
                    message,
                    cancellable
                };
                this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);
            }
            report(arg0, arg1) {
                let param = {
                    kind: "report"
                };
                if (typeof arg0 === "number") {
                    param.percentage = arg0;
                    if (arg1 !== void 0) {
                        param.message = arg1;
                    }
                } else {
                    param.message = arg0;
                }
                this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);
            }
            done() {
                WorkDoneProgressReporterImpl.Instances.delete(this._token);
                this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, {
                    kind: "end"
                });
            }
            constructor(_connection, _token){
                this._connection = _connection;
                this._token = _token;
                WorkDoneProgressReporterImpl.Instances.set(this._token, this);
            }
        };
        WorkDoneProgressReporterImpl.Instances = /* @__PURE__ */ new Map();
        var WorkDoneProgressServerReporterImpl = class extends WorkDoneProgressReporterImpl {
            get token() {
                return this._source.token;
            }
            done() {
                this._source.dispose();
                super.done();
            }
            cancel() {
                this._source.cancel();
            }
            constructor(connection, token){
                super(connection, token);
                this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
            }
        };
        var NullProgressReporter = class {
            begin() {}
            report() {}
            done() {}
            constructor(){}
        };
        var NullProgressServerReporter = class extends NullProgressReporter {
            get token() {
                return this._source.token;
            }
            done() {
                this._source.dispose();
            }
            cancel() {
                this._source.cancel();
            }
            constructor(){
                super();
                this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
            }
        };
        function attachWorkDone(connection, params) {
            if (params === void 0 || params.workDoneToken === void 0) {
                return new NullProgressReporter();
            }
            const token = params.workDoneToken;
            delete params.workDoneToken;
            return new WorkDoneProgressReporterImpl(connection, token);
        }
        exports.attachWorkDone = attachWorkDone;
        var ProgressFeature = (Base)=>{
            return class extends Base {
                initialize(capabilities) {
                    var _a;
                    if (((_a = capabilities === null || capabilities === void 0 ? void 0 : capabilities.window) === null || _a === void 0 ? void 0 : _a.workDoneProgress) === true) {
                        this._progressSupported = true;
                        this.connection.onNotification(vscode_languageserver_protocol_1.WorkDoneProgressCancelNotification.type, (params)=>{
                            let progress = WorkDoneProgressReporterImpl.Instances.get(params.token);
                            if (progress instanceof WorkDoneProgressServerReporterImpl || progress instanceof NullProgressServerReporter) {
                                progress.cancel();
                            }
                        });
                    }
                }
                attachWorkDoneProgress(token) {
                    if (token === void 0) {
                        return new NullProgressReporter();
                    } else {
                        return new WorkDoneProgressReporterImpl(this.connection, token);
                    }
                }
                createWorkDoneProgress() {
                    if (this._progressSupported) {
                        const token = uuid_1.generateUuid();
                        return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkDoneProgressCreateRequest.type, {
                            token
                        }).then(()=>{
                            const result = new WorkDoneProgressServerReporterImpl(this.connection, token);
                            return result;
                        });
                    } else {
                        return Promise.resolve(new NullProgressServerReporter());
                    }
                }
                constructor(){
                    super();
                    this._progressSupported = false;
                }
            };
        };
        exports.ProgressFeature = ProgressFeature;
        var ResultProgress;
        (function(ResultProgress2) {
            ResultProgress2.type = new vscode_languageserver_protocol_1.ProgressType();
        })(ResultProgress || (ResultProgress = {}));
        var ResultProgressReporterImpl = class {
            report(data) {
                this._connection.sendProgress(ResultProgress.type, this._token, data);
            }
            constructor(_connection, _token){
                this._connection = _connection;
                this._token = _token;
            }
        };
        function attachPartialResult(connection, params) {
            if (params === void 0 || params.partialResultToken === void 0) {
                return void 0;
            }
            const token = params.partialResultToken;
            delete params.partialResultToken;
            return new ResultProgressReporterImpl(connection, token);
        }
        exports.attachPartialResult = attachPartialResult;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/configuration.js
var require_configuration = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/configuration.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ConfigurationFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var Is2 = require_is3();
        var ConfigurationFeature = (Base)=>{
            return class extends Base {
                getConfiguration(arg) {
                    if (!arg) {
                        return this._getConfiguration({});
                    } else if (Is2.string(arg)) {
                        return this._getConfiguration({
                            section: arg
                        });
                    } else {
                        return this._getConfiguration(arg);
                    }
                }
                _getConfiguration(arg) {
                    let params = {
                        items: Array.isArray(arg) ? arg : [
                            arg
                        ]
                    };
                    return this.connection.sendRequest(vscode_languageserver_protocol_1.ConfigurationRequest.type, params).then((result)=>{
                        return Array.isArray(arg) ? result : result[0];
                    });
                }
            };
        };
        exports.ConfigurationFeature = ConfigurationFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/workspaceFolders.js
var require_workspaceFolders = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/workspaceFolders.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.WorkspaceFoldersFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var WorkspaceFoldersFeature = (Base)=>{
            return class extends Base {
                initialize(capabilities) {
                    let workspaceCapabilities = capabilities.workspace;
                    if (workspaceCapabilities && workspaceCapabilities.workspaceFolders) {
                        this._onDidChangeWorkspaceFolders = new vscode_languageserver_protocol_1.Emitter();
                        this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type, (params)=>{
                            this._onDidChangeWorkspaceFolders.fire(params.event);
                        });
                    }
                }
                getWorkspaceFolders() {
                    return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkspaceFoldersRequest.type);
                }
                get onDidChangeWorkspaceFolders() {
                    if (!this._onDidChangeWorkspaceFolders) {
                        throw new Error("Client doesn't support sending workspace folder change events.");
                    }
                    if (!this._unregistration) {
                        this._unregistration = this.connection.client.register(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type);
                    }
                    return this._onDidChangeWorkspaceFolders.event;
                }
            };
        };
        exports.WorkspaceFoldersFeature = WorkspaceFoldersFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/callHierarchy.js
var require_callHierarchy = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/callHierarchy.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.CallHierarchyFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var CallHierarchyFeature = (Base)=>{
            return class extends Base {
                get callHierarchy() {
                    return {
                        onPrepare: (handler)=>{
                            this.connection.onRequest(vscode_languageserver_protocol_1.CallHierarchyPrepareRequest.type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), void 0);
                            });
                        },
                        onIncomingCalls: (handler)=>{
                            const type = vscode_languageserver_protocol_1.CallHierarchyIncomingCallsRequest.type;
                            this.connection.onRequest(type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        },
                        onOutgoingCalls: (handler)=>{
                            const type = vscode_languageserver_protocol_1.CallHierarchyOutgoingCallsRequest.type;
                            this.connection.onRequest(type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        }
                    };
                }
            };
        };
        exports.CallHierarchyFeature = CallHierarchyFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/showDocument.js
var require_showDocument = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/showDocument.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ShowDocumentFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var ShowDocumentFeature = (Base)=>{
            return class extends Base {
                showDocument(params) {
                    return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowDocumentRequest.type, params);
                }
            };
        };
        exports.ShowDocumentFeature = ShowDocumentFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/fileOperations.js
var require_fileOperations = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/fileOperations.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.FileOperationsFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var FileOperationsFeature = (Base)=>{
            return class extends Base {
                onDidCreateFiles(handler) {
                    this.connection.onNotification(vscode_languageserver_protocol_1.DidCreateFilesNotification.type, (params)=>{
                        handler(params);
                    });
                }
                onDidRenameFiles(handler) {
                    this.connection.onNotification(vscode_languageserver_protocol_1.DidRenameFilesNotification.type, (params)=>{
                        handler(params);
                    });
                }
                onDidDeleteFiles(handler) {
                    this.connection.onNotification(vscode_languageserver_protocol_1.DidDeleteFilesNotification.type, (params)=>{
                        handler(params);
                    });
                }
                onWillCreateFiles(handler) {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.WillCreateFilesRequest.type, (params, cancel)=>{
                        return handler(params, cancel);
                    });
                }
                onWillRenameFiles(handler) {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.WillRenameFilesRequest.type, (params, cancel)=>{
                        return handler(params, cancel);
                    });
                }
                onWillDeleteFiles(handler) {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.WillDeleteFilesRequest.type, (params, cancel)=>{
                        return handler(params, cancel);
                    });
                }
            };
        };
        exports.FileOperationsFeature = FileOperationsFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/linkedEditingRange.js
var require_linkedEditingRange = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/linkedEditingRange.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.LinkedEditingRangeFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var LinkedEditingRangeFeature = (Base)=>{
            return class extends Base {
                onLinkedEditingRange(handler) {
                    this.connection.onRequest(vscode_languageserver_protocol_1.LinkedEditingRangeRequest.type, (params, cancel)=>{
                        return handler(params, cancel, this.attachWorkDoneProgress(params), void 0);
                    });
                }
            };
        };
        exports.LinkedEditingRangeFeature = LinkedEditingRangeFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/moniker.js
var require_moniker = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/moniker.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.MonikerFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var MonikerFeature = (Base)=>{
            return class extends Base {
                get moniker() {
                    return {
                        on: (handler)=>{
                            const type = vscode_languageserver_protocol_1.MonikerRequest.type;
                            this.connection.onRequest(type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        }
                    };
                }
            };
        };
        exports.MonikerFeature = MonikerFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/server.js
var require_server = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/server.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createConnection = exports.combineFeatures = exports.combineLanguagesFeatures = exports.combineWorkspaceFeatures = exports.combineWindowFeatures = exports.combineClientFeatures = exports.combineTracerFeatures = exports.combineTelemetryFeatures = exports.combineConsoleFeatures = exports._LanguagesImpl = exports.BulkUnregistration = exports.BulkRegistration = exports.ErrorMessageTracker = exports.TextDocuments = void 0;
        var vscode_languageserver_protocol_1 = require_main3();
        var Is2 = require_is3();
        var UUID = require_uuid();
        var progress_1 = require_progress();
        var configuration_1 = require_configuration();
        var workspaceFolders_1 = require_workspaceFolders();
        var callHierarchy_1 = require_callHierarchy();
        var semanticTokens_1 = require_semanticTokens();
        var showDocument_1 = require_showDocument();
        var fileOperations_1 = require_fileOperations();
        var linkedEditingRange_1 = require_linkedEditingRange();
        var moniker_1 = require_moniker();
        function null2Undefined(value1) {
            if (value1 === null) {
                return void 0;
            }
            return value1;
        }
        var TextDocuments2 = class {
            /**
       * An event that fires when a text document managed by this manager
       * has been opened or the content changes.
       */ get onDidChangeContent() {
                return this._onDidChangeContent.event;
            }
            /**
       * An event that fires when a text document managed by this manager
       * has been opened.
       */ get onDidOpen() {
                return this._onDidOpen.event;
            }
            /**
       * An event that fires when a text document managed by this manager
       * will be saved.
       */ get onWillSave() {
                return this._onWillSave.event;
            }
            /**
       * Sets a handler that will be called if a participant wants to provide
       * edits during a text document save.
       */ onWillSaveWaitUntil(handler) {
                this._willSaveWaitUntil = handler;
            }
            /**
       * An event that fires when a text document managed by this manager
       * has been saved.
       */ get onDidSave() {
                return this._onDidSave.event;
            }
            /**
       * An event that fires when a text document managed by this manager
       * has been closed.
       */ get onDidClose() {
                return this._onDidClose.event;
            }
            /**
       * Returns the document for the given URI. Returns undefined if
       * the document is not managed by this instance.
       *
       * @param uri The text document's URI to retrieve.
       * @return the text document or `undefined`.
       */ get(uri) {
                return this._documents[uri];
            }
            /**
       * Returns all text documents managed by this instance.
       *
       * @return all text documents.
       */ all() {
                return Object.keys(this._documents).map((key)=>this._documents[key]);
            }
            /**
       * Returns the URIs of all text documents managed by this instance.
       *
       * @return the URI's of all text documents.
       */ keys() {
                return Object.keys(this._documents);
            }
            /**
       * Listens for `low level` notification on the given connection to
       * update the text documents managed by this instance.
       *
       * Please note that the connection only provides handlers not an event model. Therefore
       * listening on a connection will overwrite the following handlers on a connection:
       * `onDidOpenTextDocument`, `onDidChangeTextDocument`, `onDidCloseTextDocument`,
       * `onWillSaveTextDocument`, `onWillSaveTextDocumentWaitUntil` and `onDidSaveTextDocument`.
       *
       * Use the corresponding events on the TextDocuments instance instead.
       *
       * @param connection The connection to listen on.
       */ listen(connection) {
                connection.__textDocumentSync = vscode_languageserver_protocol_1.TextDocumentSyncKind.Full;
                connection.onDidOpenTextDocument((event)=>{
                    let td = event.textDocument;
                    let document = this._configuration.create(td.uri, td.languageId, td.version, td.text);
                    this._documents[td.uri] = document;
                    let toFire = Object.freeze({
                        document
                    });
                    this._onDidOpen.fire(toFire);
                    this._onDidChangeContent.fire(toFire);
                });
                connection.onDidChangeTextDocument((event)=>{
                    let td = event.textDocument;
                    let changes = event.contentChanges;
                    if (changes.length === 0) {
                        return;
                    }
                    let document = this._documents[td.uri];
                    const { version  } = td;
                    if (version === null || version === void 0) {
                        throw new Error(`Received document change event for ${td.uri} without valid version identifier`);
                    }
                    document = this._configuration.update(document, changes, version);
                    this._documents[td.uri] = document;
                    this._onDidChangeContent.fire(Object.freeze({
                        document
                    }));
                });
                connection.onDidCloseTextDocument((event)=>{
                    let document = this._documents[event.textDocument.uri];
                    if (document) {
                        delete this._documents[event.textDocument.uri];
                        this._onDidClose.fire(Object.freeze({
                            document
                        }));
                    }
                });
                connection.onWillSaveTextDocument((event)=>{
                    let document = this._documents[event.textDocument.uri];
                    if (document) {
                        this._onWillSave.fire(Object.freeze({
                            document,
                            reason: event.reason
                        }));
                    }
                });
                connection.onWillSaveTextDocumentWaitUntil((event, token)=>{
                    let document = this._documents[event.textDocument.uri];
                    if (document && this._willSaveWaitUntil) {
                        return this._willSaveWaitUntil(Object.freeze({
                            document,
                            reason: event.reason
                        }), token);
                    } else {
                        return [];
                    }
                });
                connection.onDidSaveTextDocument((event)=>{
                    let document = this._documents[event.textDocument.uri];
                    if (document) {
                        this._onDidSave.fire(Object.freeze({
                            document
                        }));
                    }
                });
            }
            /**
       * Create a new text document manager.
       */ constructor(configuration){
                this._documents = /* @__PURE__ */ Object.create(null);
                this._configuration = configuration;
                this._onDidChangeContent = new vscode_languageserver_protocol_1.Emitter();
                this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();
                this._onDidClose = new vscode_languageserver_protocol_1.Emitter();
                this._onDidSave = new vscode_languageserver_protocol_1.Emitter();
                this._onWillSave = new vscode_languageserver_protocol_1.Emitter();
            }
        };
        exports.TextDocuments = TextDocuments2;
        var ErrorMessageTracker = class {
            /**
       * Add a message to the tracker.
       *
       * @param message The message to add.
       */ add(message) {
                let count = this._messages[message];
                if (!count) {
                    count = 0;
                }
                count++;
                this._messages[message] = count;
            }
            /**
       * Send all tracked messages to the connection's window.
       *
       * @param connection The connection established between client and server.
       */ sendErrors(connection) {
                Object.keys(this._messages).forEach((message)=>{
                    connection.window.showErrorMessage(message);
                });
            }
            constructor(){
                this._messages = /* @__PURE__ */ Object.create(null);
            }
        };
        exports.ErrorMessageTracker = ErrorMessageTracker;
        var RemoteConsoleImpl = class {
            rawAttach(connection) {
                this._rawConnection = connection;
            }
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            fillServerCapabilities(_capabilities) {}
            initialize(_capabilities) {}
            error(message) {
                this.send(vscode_languageserver_protocol_1.MessageType.Error, message);
            }
            warn(message) {
                this.send(vscode_languageserver_protocol_1.MessageType.Warning, message);
            }
            info(message) {
                this.send(vscode_languageserver_protocol_1.MessageType.Info, message);
            }
            log(message) {
                this.send(vscode_languageserver_protocol_1.MessageType.Log, message);
            }
            send(type, message) {
                if (this._rawConnection) {
                    this._rawConnection.sendNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, {
                        type,
                        message
                    });
                }
            }
            constructor(){}
        };
        var _RemoteWindowImpl = class {
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            initialize(_capabilities) {}
            fillServerCapabilities(_capabilities) {}
            showErrorMessage(message, ...actions) {
                let params = {
                    type: vscode_languageserver_protocol_1.MessageType.Error,
                    message,
                    actions
                };
                return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
            }
            showWarningMessage(message, ...actions) {
                let params = {
                    type: vscode_languageserver_protocol_1.MessageType.Warning,
                    message,
                    actions
                };
                return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
            }
            showInformationMessage(message, ...actions) {
                let params = {
                    type: vscode_languageserver_protocol_1.MessageType.Info,
                    message,
                    actions
                };
                return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
            }
            constructor(){}
        };
        var RemoteWindowImpl = showDocument_1.ShowDocumentFeature(progress_1.ProgressFeature(_RemoteWindowImpl));
        var BulkRegistration;
        (function(BulkRegistration2) {
            function create() {
                return new BulkRegistrationImpl();
            }
            BulkRegistration2.create = create;
        })(BulkRegistration = exports.BulkRegistration || (exports.BulkRegistration = {}));
        var BulkRegistrationImpl = class {
            add(type, registerOptions) {
                const method = Is2.string(type) ? type : type.method;
                if (this._registered.has(method)) {
                    throw new Error(`${method} is already added to this registration`);
                }
                const id = UUID.generateUuid();
                this._registrations.push({
                    id,
                    method,
                    registerOptions: registerOptions || {}
                });
                this._registered.add(method);
            }
            asRegistrationParams() {
                return {
                    registrations: this._registrations
                };
            }
            constructor(){
                this._registrations = [];
                this._registered = /* @__PURE__ */ new Set();
            }
        };
        var BulkUnregistration;
        (function(BulkUnregistration2) {
            function create() {
                return new BulkUnregistrationImpl(void 0, []);
            }
            BulkUnregistration2.create = create;
        })(BulkUnregistration = exports.BulkUnregistration || (exports.BulkUnregistration = {}));
        var BulkUnregistrationImpl = class {
            get isAttached() {
                return !!this._connection;
            }
            attach(connection) {
                this._connection = connection;
            }
            add(unregistration) {
                this._unregistrations.set(unregistration.method, unregistration);
            }
            dispose() {
                let unregistrations = [];
                for (let unregistration of this._unregistrations.values()){
                    unregistrations.push(unregistration);
                }
                let params = {
                    unregisterations: unregistrations
                };
                this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(void 0, (_error)=>{
                    this._connection.console.info(`Bulk unregistration failed.`);
                });
            }
            disposeSingle(arg) {
                const method = Is2.string(arg) ? arg : arg.method;
                const unregistration = this._unregistrations.get(method);
                if (!unregistration) {
                    return false;
                }
                let params = {
                    unregisterations: [
                        unregistration
                    ]
                };
                this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(()=>{
                    this._unregistrations.delete(method);
                }, (_error)=>{
                    this._connection.console.info(`Un-registering request handler for ${unregistration.id} failed.`);
                });
                return true;
            }
            constructor(_connection, unregistrations){
                this._connection = _connection;
                this._unregistrations = /* @__PURE__ */ new Map();
                unregistrations.forEach((unregistration)=>{
                    this._unregistrations.set(unregistration.method, unregistration);
                });
            }
        };
        var RemoteClientImpl = class {
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            initialize(_capabilities) {}
            fillServerCapabilities(_capabilities) {}
            register(typeOrRegistrations, registerOptionsOrType, registerOptions) {
                if (typeOrRegistrations instanceof BulkRegistrationImpl) {
                    return this.registerMany(typeOrRegistrations);
                } else if (typeOrRegistrations instanceof BulkUnregistrationImpl) {
                    return this.registerSingle1(typeOrRegistrations, registerOptionsOrType, registerOptions);
                } else {
                    return this.registerSingle2(typeOrRegistrations, registerOptionsOrType);
                }
            }
            registerSingle1(unregistration, type, registerOptions) {
                const method = Is2.string(type) ? type : type.method;
                const id = UUID.generateUuid();
                let params = {
                    registrations: [
                        {
                            id,
                            method,
                            registerOptions: registerOptions || {}
                        }
                    ]
                };
                if (!unregistration.isAttached) {
                    unregistration.attach(this.connection);
                }
                return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result)=>{
                    unregistration.add({
                        id,
                        method
                    });
                    return unregistration;
                }, (_error)=>{
                    this.connection.console.info(`Registering request handler for ${method} failed.`);
                    return Promise.reject(_error);
                });
            }
            registerSingle2(type, registerOptions) {
                const method = Is2.string(type) ? type : type.method;
                const id = UUID.generateUuid();
                let params = {
                    registrations: [
                        {
                            id,
                            method,
                            registerOptions: registerOptions || {}
                        }
                    ]
                };
                return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result)=>{
                    return vscode_languageserver_protocol_1.Disposable.create(()=>{
                        this.unregisterSingle(id, method);
                    });
                }, (_error)=>{
                    this.connection.console.info(`Registering request handler for ${method} failed.`);
                    return Promise.reject(_error);
                });
            }
            unregisterSingle(id, method) {
                let params = {
                    unregisterations: [
                        {
                            id,
                            method
                        }
                    ]
                };
                return this.connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(void 0, (_error)=>{
                    this.connection.console.info(`Un-registering request handler for ${id} failed.`);
                });
            }
            registerMany(registrations) {
                let params = registrations.asRegistrationParams();
                return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(()=>{
                    return new BulkUnregistrationImpl(this._connection, params.registrations.map((registration)=>{
                        return {
                            id: registration.id,
                            method: registration.method
                        };
                    }));
                }, (_error)=>{
                    this.connection.console.info(`Bulk registration failed.`);
                    return Promise.reject(_error);
                });
            }
        };
        var _RemoteWorkspaceImpl = class {
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            initialize(_capabilities) {}
            fillServerCapabilities(_capabilities) {}
            applyEdit(paramOrEdit) {
                function isApplyWorkspaceEditParams(value1) {
                    return value1 && !!value1.edit;
                }
                let params = isApplyWorkspaceEditParams(paramOrEdit) ? paramOrEdit : {
                    edit: paramOrEdit
                };
                return this.connection.sendRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, params);
            }
            constructor(){}
        };
        var RemoteWorkspaceImpl = fileOperations_1.FileOperationsFeature(workspaceFolders_1.WorkspaceFoldersFeature(configuration_1.ConfigurationFeature(_RemoteWorkspaceImpl)));
        var TracerImpl = class {
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            initialize(_capabilities) {}
            fillServerCapabilities(_capabilities) {}
            set trace(value1) {
                this._trace = value1;
            }
            log(message, verbose) {
                if (this._trace === vscode_languageserver_protocol_1.Trace.Off) {
                    return;
                }
                this.connection.sendNotification(vscode_languageserver_protocol_1.LogTraceNotification.type, {
                    message,
                    verbose: this._trace === vscode_languageserver_protocol_1.Trace.Verbose ? verbose : void 0
                });
            }
            constructor(){
                this._trace = vscode_languageserver_protocol_1.Trace.Off;
            }
        };
        var TelemetryImpl = class {
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            initialize(_capabilities) {}
            fillServerCapabilities(_capabilities) {}
            logEvent(data) {
                this.connection.sendNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, data);
            }
            constructor(){}
        };
        var _LanguagesImpl = class {
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            initialize(_capabilities) {}
            fillServerCapabilities(_capabilities) {}
            attachWorkDoneProgress(params) {
                return progress_1.attachWorkDone(this.connection, params);
            }
            attachPartialResultProgress(_type, params) {
                return progress_1.attachPartialResult(this.connection, params);
            }
            constructor(){}
        };
        exports._LanguagesImpl = _LanguagesImpl;
        var LanguagesImpl = moniker_1.MonikerFeature(linkedEditingRange_1.LinkedEditingRangeFeature(semanticTokens_1.SemanticTokensFeature(callHierarchy_1.CallHierarchyFeature(_LanguagesImpl))));
        function combineConsoleFeatures(one, two) {
            return function(Base) {
                return two(one(Base));
            };
        }
        exports.combineConsoleFeatures = combineConsoleFeatures;
        function combineTelemetryFeatures(one, two) {
            return function(Base) {
                return two(one(Base));
            };
        }
        exports.combineTelemetryFeatures = combineTelemetryFeatures;
        function combineTracerFeatures(one, two) {
            return function(Base) {
                return two(one(Base));
            };
        }
        exports.combineTracerFeatures = combineTracerFeatures;
        function combineClientFeatures(one, two) {
            return function(Base) {
                return two(one(Base));
            };
        }
        exports.combineClientFeatures = combineClientFeatures;
        function combineWindowFeatures(one, two) {
            return function(Base) {
                return two(one(Base));
            };
        }
        exports.combineWindowFeatures = combineWindowFeatures;
        function combineWorkspaceFeatures(one, two) {
            return function(Base) {
                return two(one(Base));
            };
        }
        exports.combineWorkspaceFeatures = combineWorkspaceFeatures;
        function combineLanguagesFeatures(one, two) {
            return function(Base) {
                return two(one(Base));
            };
        }
        exports.combineLanguagesFeatures = combineLanguagesFeatures;
        function combineFeatures(one, two) {
            function combine(one2, two2, func) {
                if (one2 && two2) {
                    return func(one2, two2);
                } else if (one2) {
                    return one2;
                } else {
                    return two2;
                }
            }
            let result = {
                __brand: "features",
                console: combine(one.console, two.console, combineConsoleFeatures),
                tracer: combine(one.tracer, two.tracer, combineTracerFeatures),
                telemetry: combine(one.telemetry, two.telemetry, combineTelemetryFeatures),
                client: combine(one.client, two.client, combineClientFeatures),
                window: combine(one.window, two.window, combineWindowFeatures),
                workspace: combine(one.workspace, two.workspace, combineWorkspaceFeatures)
            };
            return result;
        }
        exports.combineFeatures = combineFeatures;
        function createConnection(connectionFactory, watchDog, factories) {
            const logger = factories && factories.console ? new (factories.console(RemoteConsoleImpl))() : new RemoteConsoleImpl();
            const connection = connectionFactory(logger);
            logger.rawAttach(connection);
            const tracer = factories && factories.tracer ? new (factories.tracer(TracerImpl))() : new TracerImpl();
            const telemetry = factories && factories.telemetry ? new (factories.telemetry(TelemetryImpl))() : new TelemetryImpl();
            const client = factories && factories.client ? new (factories.client(RemoteClientImpl))() : new RemoteClientImpl();
            const remoteWindow = factories && factories.window ? new (factories.window(RemoteWindowImpl))() : new RemoteWindowImpl();
            const workspace = factories && factories.workspace ? new (factories.workspace(RemoteWorkspaceImpl))() : new RemoteWorkspaceImpl();
            const languages = factories && factories.languages ? new (factories.languages(LanguagesImpl))() : new LanguagesImpl();
            const allRemotes = [
                logger,
                tracer,
                telemetry,
                client,
                remoteWindow,
                workspace,
                languages
            ];
            function asPromise(value1) {
                if (value1 instanceof Promise) {
                    return value1;
                } else if (Is2.thenable(value1)) {
                    return new Promise((resolve2, reject)=>{
                        value1.then((resolved)=>resolve2(resolved), (error)=>reject(error));
                    });
                } else {
                    return Promise.resolve(value1);
                }
            }
            let shutdownHandler = void 0;
            let initializeHandler = void 0;
            let exitHandler = void 0;
            let protocolConnection = {
                listen: ()=>connection.listen(),
                sendRequest: (type, ...params)=>connection.sendRequest(Is2.string(type) ? type : type.method, ...params),
                onRequest: (type, handler)=>connection.onRequest(type, handler),
                sendNotification: (type, param)=>{
                    const method = Is2.string(type) ? type : type.method;
                    if (arguments.length === 1) {
                        connection.sendNotification(method);
                    } else {
                        connection.sendNotification(method, param);
                    }
                },
                onNotification: (type, handler)=>connection.onNotification(type, handler),
                onProgress: connection.onProgress,
                sendProgress: connection.sendProgress,
                onInitialize: (handler)=>initializeHandler = handler,
                onInitialized: (handler)=>connection.onNotification(vscode_languageserver_protocol_1.InitializedNotification.type, handler),
                onShutdown: (handler)=>shutdownHandler = handler,
                onExit: (handler)=>exitHandler = handler,
                get console () {
                    return logger;
                },
                get telemetry () {
                    return telemetry;
                },
                get tracer () {
                    return tracer;
                },
                get client () {
                    return client;
                },
                get window () {
                    return remoteWindow;
                },
                get workspace () {
                    return workspace;
                },
                get languages () {
                    return languages;
                },
                onDidChangeConfiguration: (handler)=>connection.onNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, handler),
                onDidChangeWatchedFiles: (handler)=>connection.onNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, handler),
                __textDocumentSync: void 0,
                onDidOpenTextDocument: (handler)=>connection.onNotification(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, handler),
                onDidChangeTextDocument: (handler)=>connection.onNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, handler),
                onDidCloseTextDocument: (handler)=>connection.onNotification(vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, handler),
                onWillSaveTextDocument: (handler)=>connection.onNotification(vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type, handler),
                onWillSaveTextDocumentWaitUntil: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type, handler),
                onDidSaveTextDocument: (handler)=>connection.onNotification(vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, handler),
                sendDiagnostics: (params)=>connection.sendNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, params),
                onHover: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.HoverRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), void 0);
                    }),
                onCompletion: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.CompletionRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                    }),
                onCompletionResolve: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, handler),
                onSignatureHelp: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), void 0);
                    }),
                onDeclaration: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DeclarationRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                    }),
                onDefinition: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                    }),
                onTypeDefinition: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                    }),
                onImplementation: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.ImplementationRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                    }),
                onReferences: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.ReferencesRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                    }),
                onDocumentHighlight: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DocumentHighlightRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                    }),
                onDocumentSymbol: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                    }),
                onWorkspaceSymbol: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                    }),
                onCodeAction: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                    }),
                onCodeActionResolve: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, (params, cancel)=>{
                        return handler(params, cancel);
                    }),
                onCodeLens: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.CodeLensRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                    }),
                onCodeLensResolve: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.CodeLensResolveRequest.type, (params, cancel)=>{
                        return handler(params, cancel);
                    }),
                onDocumentFormatting: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), void 0);
                    }),
                onDocumentRangeFormatting: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), void 0);
                    }),
                onDocumentOnTypeFormatting: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, (params, cancel)=>{
                        return handler(params, cancel);
                    }),
                onRenameRequest: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.RenameRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), void 0);
                    }),
                onPrepareRename: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, (params, cancel)=>{
                        return handler(params, cancel);
                    }),
                onDocumentLinks: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                    }),
                onDocumentLinkResolve: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, (params, cancel)=>{
                        return handler(params, cancel);
                    }),
                onDocumentColor: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                    }),
                onColorPresentation: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                    }),
                onFoldingRanges: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                    }),
                onSelectionRanges: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.SelectionRangeRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
                    }),
                onExecuteCommand: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.ExecuteCommandRequest.type, (params, cancel)=>{
                        return handler(params, cancel, progress_1.attachWorkDone(connection, params), void 0);
                    }),
                dispose: ()=>connection.dispose()
            };
            for (let remote of allRemotes){
                remote.attach(protocolConnection);
            }
            connection.onRequest(vscode_languageserver_protocol_1.InitializeRequest.type, (params)=>{
                watchDog.initialize(params);
                if (Is2.string(params.trace)) {
                    tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.trace);
                }
                for (let remote of allRemotes){
                    remote.initialize(params.capabilities);
                }
                if (initializeHandler) {
                    let result = initializeHandler(params, new vscode_languageserver_protocol_1.CancellationTokenSource().token, progress_1.attachWorkDone(connection, params), void 0);
                    return asPromise(result).then((value1)=>{
                        if (value1 instanceof vscode_languageserver_protocol_1.ResponseError) {
                            return value1;
                        }
                        let result2 = value1;
                        if (!result2) {
                            result2 = {
                                capabilities: {}
                            };
                        }
                        let capabilities = result2.capabilities;
                        if (!capabilities) {
                            capabilities = {};
                            result2.capabilities = capabilities;
                        }
                        if (capabilities.textDocumentSync === void 0 || capabilities.textDocumentSync === null) {
                            capabilities.textDocumentSync = Is2.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
                        } else if (!Is2.number(capabilities.textDocumentSync) && !Is2.number(capabilities.textDocumentSync.change)) {
                            capabilities.textDocumentSync.change = Is2.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
                        }
                        for (let remote of allRemotes){
                            remote.fillServerCapabilities(capabilities);
                        }
                        return result2;
                    });
                } else {
                    let result = {
                        capabilities: {
                            textDocumentSync: vscode_languageserver_protocol_1.TextDocumentSyncKind.None
                        }
                    };
                    for (let remote of allRemotes){
                        remote.fillServerCapabilities(result.capabilities);
                    }
                    return result;
                }
            });
            connection.onRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, ()=>{
                watchDog.shutdownReceived = true;
                if (shutdownHandler) {
                    return shutdownHandler(new vscode_languageserver_protocol_1.CancellationTokenSource().token);
                } else {
                    return void 0;
                }
            });
            connection.onNotification(vscode_languageserver_protocol_1.ExitNotification.type, ()=>{
                try {
                    if (exitHandler) {
                        exitHandler();
                    }
                } finally{
                    if (watchDog.shutdownReceived) {
                        watchDog.exit(0);
                    } else {
                        watchDog.exit(1);
                    }
                }
            });
            connection.onNotification(vscode_languageserver_protocol_1.SetTraceNotification.type, (params)=>{
                tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.value);
            });
            return protocolConnection;
        }
        exports.createConnection = createConnection;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/api.js
var require_api3 = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/api.js" (exports) {
        "use strict";
        var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            Object.defineProperty(o, k2, {
                enumerable: true,
                get: function() {
                    return m[k];
                }
            });
        } : function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
        });
        var __exportStar = exports && exports.__exportStar || function(m, exports2) {
            for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ProposedFeatures = exports.SemanticTokensBuilder = void 0;
        var semanticTokens_1 = require_semanticTokens();
        Object.defineProperty(exports, "SemanticTokensBuilder", {
            enumerable: true,
            get: function() {
                return semanticTokens_1.SemanticTokensBuilder;
            }
        });
        __exportStar(require_main3(), exports);
        __exportStar(require_server(), exports);
        var ProposedFeatures;
        (function(ProposedFeatures2) {
            ProposedFeatures2.all = {
                __brand: "features"
            };
        })(ProposedFeatures = exports.ProposedFeatures || (exports.ProposedFeatures = {}));
    }
});
// ../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/browser.js
var require_browser2 = __commonJS({
    "../../node_modules/vscode-languageserver/node_modules/vscode-languageserver-protocol/browser.js" (exports, module) {
        "use strict";
        module.exports = require_main3();
    }
});
// ../../node_modules/vscode-languageserver/lib/browser/main.js
var require_main4 = __commonJS({
    "../../node_modules/vscode-languageserver/lib/browser/main.js" (exports) {
        "use strict";
        var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            Object.defineProperty(o, k2, {
                enumerable: true,
                get: function() {
                    return m[k];
                }
            });
        } : function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
        });
        var __exportStar = exports && exports.__exportStar || function(m, exports2) {
            for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createConnection = void 0;
        var api_1 = require_api3();
        __exportStar(require_browser2(), exports);
        __exportStar(require_api3(), exports);
        var _shutdownReceived = false;
        var watchDog = {
            initialize: (_params)=>{},
            get shutdownReceived () {
                return _shutdownReceived;
            },
            set shutdownReceived (value){
                _shutdownReceived = value;
            },
            exit: (_code)=>{}
        };
        function createConnection(arg1, arg2, arg3, arg4) {
            let factories;
            let reader;
            let writer;
            let options;
            if (arg1 !== void 0 && arg1.__brand === "features") {
                factories = arg1;
                arg1 = arg2;
                arg2 = arg3;
                arg3 = arg4;
            }
            if (api_1.ConnectionStrategy.is(arg1) || api_1.ConnectionOptions.is(arg1)) {
                options = arg1;
            } else {
                reader = arg1;
                writer = arg2;
                options = arg3;
            }
            const connectionFactory = (logger)=>{
                return api_1.createProtocolConnection(reader, writer, logger, options);
            };
            return api_1.createConnection(connectionFactory, watchDog, factories);
        }
        exports.createConnection = createConnection;
    }
});
// ../../node_modules/jsonc-parser/lib/esm/impl/scanner.js
function createScanner(text, ignoreTrivia = false) {
    const len = text.length;
    let pos = 0, value1 = "", tokenOffset = 0, token = 16, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0;
    function scanHexDigits(count, exact) {
        let digits = 0;
        let value2 = 0;
        while(digits < count || !exact){
            let ch = text.charCodeAt(pos);
            if (ch >= 48 && ch <= 57) {
                value2 = value2 * 16 + ch - 48;
            } else if (ch >= 65 && ch <= 70) {
                value2 = value2 * 16 + ch - 65 + 10;
            } else if (ch >= 97 && ch <= 102) {
                value2 = value2 * 16 + ch - 97 + 10;
            } else {
                break;
            }
            pos++;
            digits++;
        }
        if (digits < count) {
            value2 = -1;
        }
        return value2;
    }
    function setPosition(newPosition) {
        pos = newPosition;
        value1 = "";
        tokenOffset = 0;
        token = 16;
        scanError = 0;
    }
    function scanNumber() {
        let start = pos;
        if (text.charCodeAt(pos) === 48) {
            pos++;
        } else {
            pos++;
            while(pos < text.length && isDigit(text.charCodeAt(pos))){
                pos++;
            }
        }
        if (pos < text.length && text.charCodeAt(pos) === 46) {
            pos++;
            if (pos < text.length && isDigit(text.charCodeAt(pos))) {
                pos++;
                while(pos < text.length && isDigit(text.charCodeAt(pos))){
                    pos++;
                }
            } else {
                scanError = 3;
                return text.substring(start, pos);
            }
        }
        let end = pos;
        if (pos < text.length && (text.charCodeAt(pos) === 69 || text.charCodeAt(pos) === 101)) {
            pos++;
            if (pos < text.length && text.charCodeAt(pos) === 43 || text.charCodeAt(pos) === 45) {
                pos++;
            }
            if (pos < text.length && isDigit(text.charCodeAt(pos))) {
                pos++;
                while(pos < text.length && isDigit(text.charCodeAt(pos))){
                    pos++;
                }
                end = pos;
            } else {
                scanError = 3;
            }
        }
        return text.substring(start, end);
    }
    function scanString() {
        let result = "", start = pos;
        while(true){
            if (pos >= len) {
                result += text.substring(start, pos);
                scanError = 2;
                break;
            }
            const ch = text.charCodeAt(pos);
            if (ch === 34) {
                result += text.substring(start, pos);
                pos++;
                break;
            }
            if (ch === 92) {
                result += text.substring(start, pos);
                pos++;
                if (pos >= len) {
                    scanError = 2;
                    break;
                }
                const ch2 = text.charCodeAt(pos++);
                switch(ch2){
                    case 34:
                        result += '"';
                        break;
                    case 92:
                        result += "\\";
                        break;
                    case 47:
                        result += "/";
                        break;
                    case 98:
                        result += "\b";
                        break;
                    case 102:
                        result += "\f";
                        break;
                    case 110:
                        result += "\n";
                        break;
                    case 114:
                        result += "\r";
                        break;
                    case 116:
                        result += "	";
                        break;
                    case 117:
                        const ch3 = scanHexDigits(4, true);
                        if (ch3 >= 0) {
                            result += String.fromCharCode(ch3);
                        } else {
                            scanError = 4;
                        }
                        break;
                    default:
                        scanError = 5;
                }
                start = pos;
                continue;
            }
            if (ch >= 0 && ch <= 31) {
                if (isLineBreak(ch)) {
                    result += text.substring(start, pos);
                    scanError = 2;
                    break;
                } else {
                    scanError = 6;
                }
            }
            pos++;
        }
        return result;
    }
    function scanNext() {
        value1 = "";
        scanError = 0;
        tokenOffset = pos;
        lineStartOffset = lineNumber;
        prevTokenLineStartOffset = tokenLineStartOffset;
        if (pos >= len) {
            tokenOffset = len;
            return token = 17;
        }
        let code = text.charCodeAt(pos);
        if (isWhiteSpace(code)) {
            do {
                pos++;
                value1 += String.fromCharCode(code);
                code = text.charCodeAt(pos);
            }while (isWhiteSpace(code))
            return token = 15;
        }
        if (isLineBreak(code)) {
            pos++;
            value1 += String.fromCharCode(code);
            if (code === 13 && text.charCodeAt(pos) === 10) {
                pos++;
                value1 += "\n";
            }
            lineNumber++;
            tokenLineStartOffset = pos;
            return token = 14;
        }
        switch(code){
            case 123:
                pos++;
                return token = 1;
            case 125:
                pos++;
                return token = 2;
            case 91:
                pos++;
                return token = 3;
            case 93:
                pos++;
                return token = 4;
            case 58:
                pos++;
                return token = 6;
            case 44:
                pos++;
                return token = 5;
            case 34:
                pos++;
                value1 = scanString();
                return token = 10;
            case 47:
                const start = pos - 1;
                if (text.charCodeAt(pos + 1) === 47) {
                    pos += 2;
                    while(pos < len){
                        if (isLineBreak(text.charCodeAt(pos))) {
                            break;
                        }
                        pos++;
                    }
                    value1 = text.substring(start, pos);
                    return token = 12;
                }
                if (text.charCodeAt(pos + 1) === 42) {
                    pos += 2;
                    const safeLength = len - 1;
                    let commentClosed = false;
                    while(pos < safeLength){
                        const ch = text.charCodeAt(pos);
                        if (ch === 42 && text.charCodeAt(pos + 1) === 47) {
                            pos += 2;
                            commentClosed = true;
                            break;
                        }
                        pos++;
                        if (isLineBreak(ch)) {
                            if (ch === 13 && text.charCodeAt(pos) === 10) {
                                pos++;
                            }
                            lineNumber++;
                            tokenLineStartOffset = pos;
                        }
                    }
                    if (!commentClosed) {
                        pos++;
                        scanError = 1;
                    }
                    value1 = text.substring(start, pos);
                    return token = 13;
                }
                value1 += String.fromCharCode(code);
                pos++;
                return token = 16;
            case 45:
                value1 += String.fromCharCode(code);
                pos++;
                if (pos === len || !isDigit(text.charCodeAt(pos))) {
                    return token = 16;
                }
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
                value1 += scanNumber();
                return token = 11;
            default:
                while(pos < len && isUnknownContentCharacter(code)){
                    pos++;
                    code = text.charCodeAt(pos);
                }
                if (tokenOffset !== pos) {
                    value1 = text.substring(tokenOffset, pos);
                    switch(value1){
                        case "true":
                            return token = 8;
                        case "false":
                            return token = 9;
                        case "null":
                            return token = 7;
                    }
                    return token = 16;
                }
                value1 += String.fromCharCode(code);
                pos++;
                return token = 16;
        }
    }
    function isUnknownContentCharacter(code) {
        if (isWhiteSpace(code) || isLineBreak(code)) {
            return false;
        }
        switch(code){
            case 125:
            case 93:
            case 123:
            case 91:
            case 34:
            case 58:
            case 44:
            case 47:
                return false;
        }
        return true;
    }
    function scanNextNonTrivia() {
        let result;
        do {
            result = scanNext();
        }while (result >= 12 && result <= 15)
        return result;
    }
    return {
        setPosition,
        getPosition: ()=>pos,
        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,
        getToken: ()=>token,
        getTokenValue: ()=>value1,
        getTokenOffset: ()=>tokenOffset,
        getTokenLength: ()=>pos - tokenOffset,
        getTokenStartLine: ()=>lineStartOffset,
        getTokenStartCharacter: ()=>tokenOffset - prevTokenLineStartOffset,
        getTokenError: ()=>scanError
    };
}
function isWhiteSpace(ch) {
    return ch === 32 || ch === 9;
}
function isLineBreak(ch) {
    return ch === 10 || ch === 13;
}
function isDigit(ch) {
    return ch >= 48 && ch <= 57;
}
var CharacterCodes;
(function(CharacterCodes2) {
    CharacterCodes2[CharacterCodes2["lineFeed"] = 10] = "lineFeed";
    CharacterCodes2[CharacterCodes2["carriageReturn"] = 13] = "carriageReturn";
    CharacterCodes2[CharacterCodes2["space"] = 32] = "space";
    CharacterCodes2[CharacterCodes2["_0"] = 48] = "_0";
    CharacterCodes2[CharacterCodes2["_1"] = 49] = "_1";
    CharacterCodes2[CharacterCodes2["_2"] = 50] = "_2";
    CharacterCodes2[CharacterCodes2["_3"] = 51] = "_3";
    CharacterCodes2[CharacterCodes2["_4"] = 52] = "_4";
    CharacterCodes2[CharacterCodes2["_5"] = 53] = "_5";
    CharacterCodes2[CharacterCodes2["_6"] = 54] = "_6";
    CharacterCodes2[CharacterCodes2["_7"] = 55] = "_7";
    CharacterCodes2[CharacterCodes2["_8"] = 56] = "_8";
    CharacterCodes2[CharacterCodes2["_9"] = 57] = "_9";
    CharacterCodes2[CharacterCodes2["a"] = 97] = "a";
    CharacterCodes2[CharacterCodes2["b"] = 98] = "b";
    CharacterCodes2[CharacterCodes2["c"] = 99] = "c";
    CharacterCodes2[CharacterCodes2["d"] = 100] = "d";
    CharacterCodes2[CharacterCodes2["e"] = 101] = "e";
    CharacterCodes2[CharacterCodes2["f"] = 102] = "f";
    CharacterCodes2[CharacterCodes2["g"] = 103] = "g";
    CharacterCodes2[CharacterCodes2["h"] = 104] = "h";
    CharacterCodes2[CharacterCodes2["i"] = 105] = "i";
    CharacterCodes2[CharacterCodes2["j"] = 106] = "j";
    CharacterCodes2[CharacterCodes2["k"] = 107] = "k";
    CharacterCodes2[CharacterCodes2["l"] = 108] = "l";
    CharacterCodes2[CharacterCodes2["m"] = 109] = "m";
    CharacterCodes2[CharacterCodes2["n"] = 110] = "n";
    CharacterCodes2[CharacterCodes2["o"] = 111] = "o";
    CharacterCodes2[CharacterCodes2["p"] = 112] = "p";
    CharacterCodes2[CharacterCodes2["q"] = 113] = "q";
    CharacterCodes2[CharacterCodes2["r"] = 114] = "r";
    CharacterCodes2[CharacterCodes2["s"] = 115] = "s";
    CharacterCodes2[CharacterCodes2["t"] = 116] = "t";
    CharacterCodes2[CharacterCodes2["u"] = 117] = "u";
    CharacterCodes2[CharacterCodes2["v"] = 118] = "v";
    CharacterCodes2[CharacterCodes2["w"] = 119] = "w";
    CharacterCodes2[CharacterCodes2["x"] = 120] = "x";
    CharacterCodes2[CharacterCodes2["y"] = 121] = "y";
    CharacterCodes2[CharacterCodes2["z"] = 122] = "z";
    CharacterCodes2[CharacterCodes2["A"] = 65] = "A";
    CharacterCodes2[CharacterCodes2["B"] = 66] = "B";
    CharacterCodes2[CharacterCodes2["C"] = 67] = "C";
    CharacterCodes2[CharacterCodes2["D"] = 68] = "D";
    CharacterCodes2[CharacterCodes2["E"] = 69] = "E";
    CharacterCodes2[CharacterCodes2["F"] = 70] = "F";
    CharacterCodes2[CharacterCodes2["G"] = 71] = "G";
    CharacterCodes2[CharacterCodes2["H"] = 72] = "H";
    CharacterCodes2[CharacterCodes2["I"] = 73] = "I";
    CharacterCodes2[CharacterCodes2["J"] = 74] = "J";
    CharacterCodes2[CharacterCodes2["K"] = 75] = "K";
    CharacterCodes2[CharacterCodes2["L"] = 76] = "L";
    CharacterCodes2[CharacterCodes2["M"] = 77] = "M";
    CharacterCodes2[CharacterCodes2["N"] = 78] = "N";
    CharacterCodes2[CharacterCodes2["O"] = 79] = "O";
    CharacterCodes2[CharacterCodes2["P"] = 80] = "P";
    CharacterCodes2[CharacterCodes2["Q"] = 81] = "Q";
    CharacterCodes2[CharacterCodes2["R"] = 82] = "R";
    CharacterCodes2[CharacterCodes2["S"] = 83] = "S";
    CharacterCodes2[CharacterCodes2["T"] = 84] = "T";
    CharacterCodes2[CharacterCodes2["U"] = 85] = "U";
    CharacterCodes2[CharacterCodes2["V"] = 86] = "V";
    CharacterCodes2[CharacterCodes2["W"] = 87] = "W";
    CharacterCodes2[CharacterCodes2["X"] = 88] = "X";
    CharacterCodes2[CharacterCodes2["Y"] = 89] = "Y";
    CharacterCodes2[CharacterCodes2["Z"] = 90] = "Z";
    CharacterCodes2[CharacterCodes2["asterisk"] = 42] = "asterisk";
    CharacterCodes2[CharacterCodes2["backslash"] = 92] = "backslash";
    CharacterCodes2[CharacterCodes2["closeBrace"] = 125] = "closeBrace";
    CharacterCodes2[CharacterCodes2["closeBracket"] = 93] = "closeBracket";
    CharacterCodes2[CharacterCodes2["colon"] = 58] = "colon";
    CharacterCodes2[CharacterCodes2["comma"] = 44] = "comma";
    CharacterCodes2[CharacterCodes2["dot"] = 46] = "dot";
    CharacterCodes2[CharacterCodes2["doubleQuote"] = 34] = "doubleQuote";
    CharacterCodes2[CharacterCodes2["minus"] = 45] = "minus";
    CharacterCodes2[CharacterCodes2["openBrace"] = 123] = "openBrace";
    CharacterCodes2[CharacterCodes2["openBracket"] = 91] = "openBracket";
    CharacterCodes2[CharacterCodes2["plus"] = 43] = "plus";
    CharacterCodes2[CharacterCodes2["slash"] = 47] = "slash";
    CharacterCodes2[CharacterCodes2["formFeed"] = 12] = "formFeed";
    CharacterCodes2[CharacterCodes2["tab"] = 9] = "tab";
})(CharacterCodes || (CharacterCodes = {}));
// ../../node_modules/jsonc-parser/lib/esm/impl/parser.js
var ParseOptions;
(function(ParseOptions2) {
    ParseOptions2.DEFAULT = {
        allowTrailingComma: false
    };
})(ParseOptions || (ParseOptions = {}));
function parse(text, errors = [], options = ParseOptions.DEFAULT) {
    let currentProperty = null;
    let currentParent = [];
    const previousParents = [];
    function onValue(value1) {
        if (Array.isArray(currentParent)) {
            currentParent.push(value1);
        } else if (currentProperty !== null) {
            currentParent[currentProperty] = value1;
        }
    }
    const visitor = {
        onObjectBegin: ()=>{
            const object = {};
            onValue(object);
            previousParents.push(currentParent);
            currentParent = object;
            currentProperty = null;
        },
        onObjectProperty: (name)=>{
            currentProperty = name;
        },
        onObjectEnd: ()=>{
            currentParent = previousParents.pop();
        },
        onArrayBegin: ()=>{
            const array = [];
            onValue(array);
            previousParents.push(currentParent);
            currentParent = array;
            currentProperty = null;
        },
        onArrayEnd: ()=>{
            currentParent = previousParents.pop();
        },
        onLiteralValue: onValue,
        onError: (error, offset, length)=>{
            errors.push({
                error,
                offset,
                length
            });
        }
    };
    visit(text, visitor, options);
    return currentParent[0];
}
function getNodePath(node) {
    if (!node.parent || !node.parent.children) {
        return [];
    }
    const path5 = getNodePath(node.parent);
    if (node.parent.type === "property") {
        const key = node.parent.children[0].value;
        path5.push(key);
    } else if (node.parent.type === "array") {
        const index = node.parent.children.indexOf(node);
        if (index !== -1) {
            path5.push(index);
        }
    }
    return path5;
}
function getNodeValue(node) {
    switch(node.type){
        case "array":
            return node.children.map(getNodeValue);
        case "object":
            const obj = /* @__PURE__ */ Object.create(null);
            for (let prop of node.children){
                const valueNode = prop.children[1];
                if (valueNode) {
                    obj[prop.children[0].value] = getNodeValue(valueNode);
                }
            }
            return obj;
        case "null":
        case "string":
        case "number":
        case "boolean":
            return node.value;
        default:
            return void 0;
    }
}
function contains(node, offset, includeRightBound = false) {
    return offset >= node.offset && offset < node.offset + node.length || includeRightBound && offset === node.offset + node.length;
}
function findNodeAtOffset(node, offset, includeRightBound = false) {
    if (contains(node, offset, includeRightBound)) {
        const children = node.children;
        if (Array.isArray(children)) {
            for(let i = 0; i < children.length && children[i].offset <= offset; i++){
                const item = findNodeAtOffset(children[i], offset, includeRightBound);
                if (item) {
                    return item;
                }
            }
        }
        return node;
    }
    return void 0;
}
function visit(text, visitor, options = ParseOptions.DEFAULT) {
    const _scanner = createScanner(text, false);
    const _jsonPath = [];
    function toNoArgVisit(visitFunction) {
        return visitFunction ? ()=>visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : ()=>true;
    }
    function toNoArgVisitWithPath(visitFunction) {
        return visitFunction ? ()=>visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), ()=>_jsonPath.slice()) : ()=>true;
    }
    function toOneArgVisit(visitFunction) {
        return visitFunction ? (arg)=>visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : ()=>true;
    }
    function toOneArgVisitWithPath(visitFunction) {
        return visitFunction ? (arg)=>visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), ()=>_jsonPath.slice()) : ()=>true;
    }
    const onObjectBegin = toNoArgVisitWithPath(visitor.onObjectBegin), onObjectProperty = toOneArgVisitWithPath(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisitWithPath(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisitWithPath(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);
    const disallowComments = options && options.disallowComments;
    const allowTrailingComma = options && options.allowTrailingComma;
    function scanNext() {
        while(true){
            const token = _scanner.scan();
            switch(_scanner.getTokenError()){
                case 4:
                    handleError(14);
                    break;
                case 5:
                    handleError(15);
                    break;
                case 3:
                    handleError(13);
                    break;
                case 1:
                    if (!disallowComments) {
                        handleError(11);
                    }
                    break;
                case 2:
                    handleError(12);
                    break;
                case 6:
                    handleError(16);
                    break;
            }
            switch(token){
                case 12:
                case 13:
                    if (disallowComments) {
                        handleError(10);
                    } else {
                        onComment();
                    }
                    break;
                case 16:
                    handleError(1);
                    break;
                case 15:
                case 14:
                    break;
                default:
                    return token;
            }
        }
    }
    function handleError(error, skipUntilAfter = [], skipUntil = []) {
        onError(error);
        if (skipUntilAfter.length + skipUntil.length > 0) {
            let token = _scanner.getToken();
            while(token !== 17){
                if (skipUntilAfter.indexOf(token) !== -1) {
                    scanNext();
                    break;
                } else if (skipUntil.indexOf(token) !== -1) {
                    break;
                }
                token = scanNext();
            }
        }
    }
    function parseString(isValue) {
        const value1 = _scanner.getTokenValue();
        if (isValue) {
            onLiteralValue(value1);
        } else {
            onObjectProperty(value1);
            _jsonPath.push(value1);
        }
        scanNext();
        return true;
    }
    function parseLiteral() {
        switch(_scanner.getToken()){
            case 11:
                const tokenValue = _scanner.getTokenValue();
                let value1 = Number(tokenValue);
                if (isNaN(value1)) {
                    handleError(2);
                    value1 = 0;
                }
                onLiteralValue(value1);
                break;
            case 7:
                onLiteralValue(null);
                break;
            case 8:
                onLiteralValue(true);
                break;
            case 9:
                onLiteralValue(false);
                break;
            default:
                return false;
        }
        scanNext();
        return true;
    }
    function parseProperty() {
        if (_scanner.getToken() !== 10) {
            handleError(3, [], [
                2,
                5
            ]);
            return false;
        }
        parseString(false);
        if (_scanner.getToken() === 6) {
            onSeparator(":");
            scanNext();
            if (!parseValue()) {
                handleError(4, [], [
                    2,
                    5
                ]);
            }
        } else {
            handleError(5, [], [
                2,
                5
            ]);
        }
        _jsonPath.pop();
        return true;
    }
    function parseObject() {
        onObjectBegin();
        scanNext();
        let needsComma = false;
        while(_scanner.getToken() !== 2 && _scanner.getToken() !== 17){
            if (_scanner.getToken() === 5) {
                if (!needsComma) {
                    handleError(4, [], []);
                }
                onSeparator(",");
                scanNext();
                if (_scanner.getToken() === 2 && allowTrailingComma) {
                    break;
                }
            } else if (needsComma) {
                handleError(6, [], []);
            }
            if (!parseProperty()) {
                handleError(4, [], [
                    2,
                    5
                ]);
            }
            needsComma = true;
        }
        onObjectEnd();
        if (_scanner.getToken() !== 2) {
            handleError(7, [
                2
            ], []);
        } else {
            scanNext();
        }
        return true;
    }
    function parseArray() {
        onArrayBegin();
        scanNext();
        let isFirstElement = true;
        let needsComma = false;
        while(_scanner.getToken() !== 4 && _scanner.getToken() !== 17){
            if (_scanner.getToken() === 5) {
                if (!needsComma) {
                    handleError(4, [], []);
                }
                onSeparator(",");
                scanNext();
                if (_scanner.getToken() === 4 && allowTrailingComma) {
                    break;
                }
            } else if (needsComma) {
                handleError(6, [], []);
            }
            if (isFirstElement) {
                _jsonPath.push(0);
                isFirstElement = false;
            } else {
                _jsonPath[_jsonPath.length - 1]++;
            }
            if (!parseValue()) {
                handleError(4, [], [
                    4,
                    5
                ]);
            }
            needsComma = true;
        }
        onArrayEnd();
        if (!isFirstElement) {
            _jsonPath.pop();
        }
        if (_scanner.getToken() !== 4) {
            handleError(8, [
                4
            ], []);
        } else {
            scanNext();
        }
        return true;
    }
    function parseValue() {
        switch(_scanner.getToken()){
            case 3:
                return parseArray();
            case 1:
                return parseObject();
            case 10:
                return parseString(true);
            default:
                return parseLiteral();
        }
    }
    scanNext();
    if (_scanner.getToken() === 17) {
        if (options.allowEmptyContent) {
            return true;
        }
        handleError(4, [], []);
        return false;
    }
    if (!parseValue()) {
        handleError(4, [], []);
        return false;
    }
    if (_scanner.getToken() !== 17) {
        handleError(9, [], []);
    }
    return true;
}
// ../../node_modules/jsonc-parser/lib/esm/main.js
var createScanner2 = createScanner;
var ScanError;
(function(ScanError2) {
    ScanError2[ScanError2["None"] = 0] = "None";
    ScanError2[ScanError2["UnexpectedEndOfComment"] = 1] = "UnexpectedEndOfComment";
    ScanError2[ScanError2["UnexpectedEndOfString"] = 2] = "UnexpectedEndOfString";
    ScanError2[ScanError2["UnexpectedEndOfNumber"] = 3] = "UnexpectedEndOfNumber";
    ScanError2[ScanError2["InvalidUnicode"] = 4] = "InvalidUnicode";
    ScanError2[ScanError2["InvalidEscapeCharacter"] = 5] = "InvalidEscapeCharacter";
    ScanError2[ScanError2["InvalidCharacter"] = 6] = "InvalidCharacter";
})(ScanError || (ScanError = {}));
var SyntaxKind;
(function(SyntaxKind2) {
    SyntaxKind2[SyntaxKind2["OpenBraceToken"] = 1] = "OpenBraceToken";
    SyntaxKind2[SyntaxKind2["CloseBraceToken"] = 2] = "CloseBraceToken";
    SyntaxKind2[SyntaxKind2["OpenBracketToken"] = 3] = "OpenBracketToken";
    SyntaxKind2[SyntaxKind2["CloseBracketToken"] = 4] = "CloseBracketToken";
    SyntaxKind2[SyntaxKind2["CommaToken"] = 5] = "CommaToken";
    SyntaxKind2[SyntaxKind2["ColonToken"] = 6] = "ColonToken";
    SyntaxKind2[SyntaxKind2["NullKeyword"] = 7] = "NullKeyword";
    SyntaxKind2[SyntaxKind2["TrueKeyword"] = 8] = "TrueKeyword";
    SyntaxKind2[SyntaxKind2["FalseKeyword"] = 9] = "FalseKeyword";
    SyntaxKind2[SyntaxKind2["StringLiteral"] = 10] = "StringLiteral";
    SyntaxKind2[SyntaxKind2["NumericLiteral"] = 11] = "NumericLiteral";
    SyntaxKind2[SyntaxKind2["LineCommentTrivia"] = 12] = "LineCommentTrivia";
    SyntaxKind2[SyntaxKind2["BlockCommentTrivia"] = 13] = "BlockCommentTrivia";
    SyntaxKind2[SyntaxKind2["LineBreakTrivia"] = 14] = "LineBreakTrivia";
    SyntaxKind2[SyntaxKind2["Trivia"] = 15] = "Trivia";
    SyntaxKind2[SyntaxKind2["Unknown"] = 16] = "Unknown";
    SyntaxKind2[SyntaxKind2["EOF"] = 17] = "EOF";
})(SyntaxKind || (SyntaxKind = {}));
var parse2 = parse;
var findNodeAtOffset2 = findNodeAtOffset;
var getNodePath2 = getNodePath;
var getNodeValue2 = getNodeValue;
var ParseErrorCode;
(function(ParseErrorCode2) {
    ParseErrorCode2[ParseErrorCode2["InvalidSymbol"] = 1] = "InvalidSymbol";
    ParseErrorCode2[ParseErrorCode2["InvalidNumberFormat"] = 2] = "InvalidNumberFormat";
    ParseErrorCode2[ParseErrorCode2["PropertyNameExpected"] = 3] = "PropertyNameExpected";
    ParseErrorCode2[ParseErrorCode2["ValueExpected"] = 4] = "ValueExpected";
    ParseErrorCode2[ParseErrorCode2["ColonExpected"] = 5] = "ColonExpected";
    ParseErrorCode2[ParseErrorCode2["CommaExpected"] = 6] = "CommaExpected";
    ParseErrorCode2[ParseErrorCode2["CloseBraceExpected"] = 7] = "CloseBraceExpected";
    ParseErrorCode2[ParseErrorCode2["CloseBracketExpected"] = 8] = "CloseBracketExpected";
    ParseErrorCode2[ParseErrorCode2["EndOfFileExpected"] = 9] = "EndOfFileExpected";
    ParseErrorCode2[ParseErrorCode2["InvalidCommentToken"] = 10] = "InvalidCommentToken";
    ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfComment"] = 11] = "UnexpectedEndOfComment";
    ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfString"] = 12] = "UnexpectedEndOfString";
    ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfNumber"] = 13] = "UnexpectedEndOfNumber";
    ParseErrorCode2[ParseErrorCode2["InvalidUnicode"] = 14] = "InvalidUnicode";
    ParseErrorCode2[ParseErrorCode2["InvalidEscapeCharacter"] = 15] = "InvalidEscapeCharacter";
    ParseErrorCode2[ParseErrorCode2["InvalidCharacter"] = 16] = "InvalidCharacter";
})(ParseErrorCode || (ParseErrorCode = {}));
// ../../node_modules/vscode-uri/lib/esm/index.js
var LIB;
(()=>{
    "use strict";
    var t = {
        470: (t2)=>{
            function e2(t3) {
                if ("string" != typeof t3) throw new TypeError("Path must be a string. Received " + JSON.stringify(t3));
            }
            function r2(t3, e3) {
                for(var r3, n3 = "", o = 0, i = -1, a2 = 0, h = 0; h <= t3.length; ++h){
                    if (h < t3.length) r3 = t3.charCodeAt(h);
                    else {
                        if (47 === r3) break;
                        r3 = 47;
                    }
                    if (47 === r3) {
                        if (i === h - 1 || 1 === a2) ;
                        else if (i !== h - 1 && 2 === a2) {
                            if (n3.length < 2 || 2 !== o || 46 !== n3.charCodeAt(n3.length - 1) || 46 !== n3.charCodeAt(n3.length - 2)) {
                                if (n3.length > 2) {
                                    var s = n3.lastIndexOf("/");
                                    if (s !== n3.length - 1) {
                                        -1 === s ? (n3 = "", o = 0) : o = (n3 = n3.slice(0, s)).length - 1 - n3.lastIndexOf("/"), i = h, a2 = 0;
                                        continue;
                                    }
                                } else if (2 === n3.length || 1 === n3.length) {
                                    n3 = "", o = 0, i = h, a2 = 0;
                                    continue;
                                }
                            }
                            e3 && (n3.length > 0 ? n3 += "/.." : n3 = "..", o = 2);
                        } else n3.length > 0 ? n3 += "/" + t3.slice(i + 1, h) : n3 = t3.slice(i + 1, h), o = h - i - 1;
                        i = h, a2 = 0;
                    } else 46 === r3 && -1 !== a2 ? ++a2 : a2 = -1;
                }
                return n3;
            }
            var n2 = {
                resolve: function() {
                    for(var t3, n3 = "", o = false, i = arguments.length - 1; i >= -1 && !o; i--){
                        var a2;
                        i >= 0 ? a2 = arguments[i] : (void 0 === t3 && (t3 = process.cwd()), a2 = t3), e2(a2), 0 !== a2.length && (n3 = a2 + "/" + n3, o = 47 === a2.charCodeAt(0));
                    }
                    return n3 = r2(n3, !o), o ? n3.length > 0 ? "/" + n3 : "/" : n3.length > 0 ? n3 : ".";
                },
                normalize: function(t3) {
                    if (e2(t3), 0 === t3.length) return ".";
                    var n3 = 47 === t3.charCodeAt(0), o = 47 === t3.charCodeAt(t3.length - 1);
                    return 0 !== (t3 = r2(t3, !n3)).length || n3 || (t3 = "."), t3.length > 0 && o && (t3 += "/"), n3 ? "/" + t3 : t3;
                },
                isAbsolute: function(t3) {
                    return e2(t3), t3.length > 0 && 47 === t3.charCodeAt(0);
                },
                join: function() {
                    if (0 === arguments.length) return ".";
                    for(var t3, r3 = 0; r3 < arguments.length; ++r3){
                        var o = arguments[r3];
                        e2(o), o.length > 0 && (void 0 === t3 ? t3 = o : t3 += "/" + o);
                    }
                    return void 0 === t3 ? "." : n2.normalize(t3);
                },
                relative: function(t3, r3) {
                    if (e2(t3), e2(r3), t3 === r3) return "";
                    if ((t3 = n2.resolve(t3)) === (r3 = n2.resolve(r3))) return "";
                    for(var o = 1; o < t3.length && 47 === t3.charCodeAt(o); ++o);
                    for(var i = t3.length, a2 = i - o, h = 1; h < r3.length && 47 === r3.charCodeAt(h); ++h);
                    for(var s = r3.length - h, c = a2 < s ? a2 : s, f2 = -1, u = 0; u <= c; ++u){
                        if (u === c) {
                            if (s > c) {
                                if (47 === r3.charCodeAt(h + u)) return r3.slice(h + u + 1);
                                if (0 === u) return r3.slice(h + u);
                            } else a2 > c && (47 === t3.charCodeAt(o + u) ? f2 = u : 0 === u && (f2 = 0));
                            break;
                        }
                        var l = t3.charCodeAt(o + u);
                        if (l !== r3.charCodeAt(h + u)) break;
                        47 === l && (f2 = u);
                    }
                    var p = "";
                    for(u = o + f2 + 1; u <= i; ++u)u !== i && 47 !== t3.charCodeAt(u) || (0 === p.length ? p += ".." : p += "/..");
                    return p.length > 0 ? p + r3.slice(h + f2) : (h += f2, 47 === r3.charCodeAt(h) && ++h, r3.slice(h));
                },
                _makeLong: function(t3) {
                    return t3;
                },
                dirname: function(t3) {
                    if (e2(t3), 0 === t3.length) return ".";
                    for(var r3 = t3.charCodeAt(0), n3 = 47 === r3, o = -1, i = true, a2 = t3.length - 1; a2 >= 1; --a2)if (47 === (r3 = t3.charCodeAt(a2))) {
                        if (!i) {
                            o = a2;
                            break;
                        }
                    } else i = false;
                    return -1 === o ? n3 ? "/" : "." : n3 && 1 === o ? "//" : t3.slice(0, o);
                },
                basename: function(t3, r3) {
                    if (void 0 !== r3 && "string" != typeof r3) throw new TypeError('"ext" argument must be a string');
                    e2(t3);
                    var n3, o = 0, i = -1, a2 = true;
                    if (void 0 !== r3 && r3.length > 0 && r3.length <= t3.length) {
                        if (r3.length === t3.length && r3 === t3) return "";
                        var h = r3.length - 1, s = -1;
                        for(n3 = t3.length - 1; n3 >= 0; --n3){
                            var c = t3.charCodeAt(n3);
                            if (47 === c) {
                                if (!a2) {
                                    o = n3 + 1;
                                    break;
                                }
                            } else -1 === s && (a2 = false, s = n3 + 1), h >= 0 && (c === r3.charCodeAt(h) ? -1 == --h && (i = n3) : (h = -1, i = s));
                        }
                        return o === i ? i = s : -1 === i && (i = t3.length), t3.slice(o, i);
                    }
                    for(n3 = t3.length - 1; n3 >= 0; --n3)if (47 === t3.charCodeAt(n3)) {
                        if (!a2) {
                            o = n3 + 1;
                            break;
                        }
                    } else -1 === i && (a2 = false, i = n3 + 1);
                    return -1 === i ? "" : t3.slice(o, i);
                },
                extname: function(t3) {
                    e2(t3);
                    for(var r3 = -1, n3 = 0, o = -1, i = true, a2 = 0, h = t3.length - 1; h >= 0; --h){
                        var s = t3.charCodeAt(h);
                        if (47 !== s) -1 === o && (i = false, o = h + 1), 46 === s ? -1 === r3 ? r3 = h : 1 !== a2 && (a2 = 1) : -1 !== r3 && (a2 = -1);
                        else if (!i) {
                            n3 = h + 1;
                            break;
                        }
                    }
                    return -1 === r3 || -1 === o || 0 === a2 || 1 === a2 && r3 === o - 1 && r3 === n3 + 1 ? "" : t3.slice(r3, o);
                },
                format: function(t3) {
                    if (null === t3 || "object" != typeof t3) throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof t3);
                    return function(t4, e3) {
                        var r3 = e3.dir || e3.root, n3 = e3.base || (e3.name || "") + (e3.ext || "");
                        return r3 ? r3 === e3.root ? r3 + n3 : r3 + "/" + n3 : n3;
                    }(0, t3);
                },
                parse: function(t3) {
                    e2(t3);
                    var r3 = {
                        root: "",
                        dir: "",
                        base: "",
                        ext: "",
                        name: ""
                    };
                    if (0 === t3.length) return r3;
                    var n3, o = t3.charCodeAt(0), i = 47 === o;
                    i ? (r3.root = "/", n3 = 1) : n3 = 0;
                    for(var a2 = -1, h = 0, s = -1, c = true, f2 = t3.length - 1, u = 0; f2 >= n3; --f2)if (47 !== (o = t3.charCodeAt(f2))) -1 === s && (c = false, s = f2 + 1), 46 === o ? -1 === a2 ? a2 = f2 : 1 !== u && (u = 1) : -1 !== a2 && (u = -1);
                    else if (!c) {
                        h = f2 + 1;
                        break;
                    }
                    return -1 === a2 || -1 === s || 0 === u || 1 === u && a2 === s - 1 && a2 === h + 1 ? -1 !== s && (r3.base = r3.name = 0 === h && i ? t3.slice(1, s) : t3.slice(h, s)) : (0 === h && i ? (r3.name = t3.slice(1, a2), r3.base = t3.slice(1, s)) : (r3.name = t3.slice(h, a2), r3.base = t3.slice(h, s)), r3.ext = t3.slice(a2, s)), h > 0 ? r3.dir = t3.slice(0, h - 1) : i && (r3.dir = "/"), r3;
                },
                sep: "/",
                delimiter: ":",
                win32: null,
                posix: null
            };
            n2.posix = n2, t2.exports = n2;
        }
    }, e = {};
    function r(n2) {
        var o = e[n2];
        if (void 0 !== o) return o.exports;
        var i = e[n2] = {
            exports: {}
        };
        return t[n2](i, i.exports, r), i.exports;
    }
    r.d = (t2, e2)=>{
        for(var n2 in e2)r.o(e2, n2) && !r.o(t2, n2) && Object.defineProperty(t2, n2, {
            enumerable: true,
            get: e2[n2]
        });
    }, r.o = (t2, e2)=>Object.prototype.hasOwnProperty.call(t2, e2), r.r = (t2)=>{
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, {
            value: "Module"
        }), Object.defineProperty(t2, "__esModule", {
            value: true
        });
    };
    var n = {};
    (()=>{
        var t2;
        if (r.r(n), r.d(n, {
            URI: ()=>g,
            Utils: ()=>O
        }), "object" == typeof process) t2 = "win32" === process.platform;
        else if ("object" == typeof navigator) {
            var e2 = navigator.userAgent;
            t2 = e2.indexOf("Windows") >= 0;
        }
        var o, i, a2 = (o = function(t3, e3) {
            return o = Object.setPrototypeOf || ({
                __proto__: []
            }) instanceof Array && function(t4, e4) {
                t4.__proto__ = e4;
            } || function(t4, e4) {
                for(var r2 in e4)Object.prototype.hasOwnProperty.call(e4, r2) && (t4[r2] = e4[r2]);
            }, o(t3, e3);
        }, function(t3, e3) {
            if ("function" != typeof e3 && null !== e3) throw new TypeError("Class extends value " + String(e3) + " is not a constructor or null");
            function r2() {
                this.constructor = t3;
            }
            o(t3, e3), t3.prototype = null === e3 ? Object.create(e3) : (r2.prototype = e3.prototype, new r2());
        }), h = /^\w[\w\d+.-]*$/, s = /^\//, c = /^\/\//;
        function f2(t3, e3) {
            if (!t3.scheme && e3) throw new Error('[UriError]: Scheme is missing: {scheme: "", authority: "'.concat(t3.authority, '", path: "').concat(t3.path, '", query: "').concat(t3.query, '", fragment: "').concat(t3.fragment, '"}'));
            if (t3.scheme && !h.test(t3.scheme)) throw new Error("[UriError]: Scheme contains illegal characters.");
            if (t3.path) {
                if (t3.authority) {
                    if (!s.test(t3.path)) throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character');
                } else if (c.test(t3.path)) throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")');
            }
        }
        var u = "", l = "/", p = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/, g = function() {
            function e3(t3, e4, r2, n2, o2, i2) {
                void 0 === i2 && (i2 = false), "object" == typeof t3 ? (this.scheme = t3.scheme || u, this.authority = t3.authority || u, this.path = t3.path || u, this.query = t3.query || u, this.fragment = t3.fragment || u) : (this.scheme = function(t4, e5) {
                    return t4 || e5 ? t4 : "file";
                }(t3, i2), this.authority = e4 || u, this.path = function(t4, e5) {
                    switch(t4){
                        case "https":
                        case "http":
                        case "file":
                            e5 ? e5[0] !== l && (e5 = l + e5) : e5 = l;
                    }
                    return e5;
                }(this.scheme, r2 || u), this.query = n2 || u, this.fragment = o2 || u, f2(this, i2));
            }
            return e3.isUri = function(t3) {
                return t3 instanceof e3 || !!t3 && "string" == typeof t3.authority && "string" == typeof t3.fragment && "string" == typeof t3.path && "string" == typeof t3.query && "string" == typeof t3.scheme && "string" == typeof t3.fsPath && "function" == typeof t3.with && "function" == typeof t3.toString;
            }, Object.defineProperty(e3.prototype, "fsPath", {
                get: function() {
                    return C(this, false);
                },
                enumerable: false,
                configurable: true
            }), e3.prototype.with = function(t3) {
                if (!t3) return this;
                var e4 = t3.scheme, r2 = t3.authority, n2 = t3.path, o2 = t3.query, i2 = t3.fragment;
                return void 0 === e4 ? e4 = this.scheme : null === e4 && (e4 = u), void 0 === r2 ? r2 = this.authority : null === r2 && (r2 = u), void 0 === n2 ? n2 = this.path : null === n2 && (n2 = u), void 0 === o2 ? o2 = this.query : null === o2 && (o2 = u), void 0 === i2 ? i2 = this.fragment : null === i2 && (i2 = u), e4 === this.scheme && r2 === this.authority && n2 === this.path && o2 === this.query && i2 === this.fragment ? this : new v(e4, r2, n2, o2, i2);
            }, e3.parse = function(t3, e4) {
                void 0 === e4 && (e4 = false);
                var r2 = p.exec(t3);
                return r2 ? new v(r2[2] || u, _(r2[4] || u), _(r2[5] || u), _(r2[7] || u), _(r2[9] || u), e4) : new v(u, u, u, u, u);
            }, e3.file = function(e4) {
                var r2 = u;
                if (t2 && (e4 = e4.replace(/\\/g, l)), e4[0] === l && e4[1] === l) {
                    var n2 = e4.indexOf(l, 2);
                    -1 === n2 ? (r2 = e4.substring(2), e4 = l) : (r2 = e4.substring(2, n2), e4 = e4.substring(n2) || l);
                }
                return new v("file", r2, e4, u, u);
            }, e3.from = function(t3) {
                var e4 = new v(t3.scheme, t3.authority, t3.path, t3.query, t3.fragment);
                return f2(e4, true), e4;
            }, e3.prototype.toString = function(t3) {
                return void 0 === t3 && (t3 = false), A2(this, t3);
            }, e3.prototype.toJSON = function() {
                return this;
            }, e3.revive = function(t3) {
                if (t3) {
                    if (t3 instanceof e3) return t3;
                    var r2 = new v(t3);
                    return r2._formatted = t3.external, r2._fsPath = t3._sep === d ? t3.fsPath : null, r2;
                }
                return t3;
            }, e3;
        }(), d = t2 ? 1 : void 0, v = function(t3) {
            function e3() {
                var e4 = null !== t3 && t3.apply(this, arguments) || this;
                return e4._formatted = null, e4._fsPath = null, e4;
            }
            return a2(e3, t3), Object.defineProperty(e3.prototype, "fsPath", {
                get: function() {
                    return this._fsPath || (this._fsPath = C(this, false)), this._fsPath;
                },
                enumerable: false,
                configurable: true
            }), e3.prototype.toString = function(t4) {
                return void 0 === t4 && (t4 = false), t4 ? A2(this, true) : (this._formatted || (this._formatted = A2(this, false)), this._formatted);
            }, e3.prototype.toJSON = function() {
                var t4 = {
                    $mid: 1
                };
                return this._fsPath && (t4.fsPath = this._fsPath, t4._sep = d), this._formatted && (t4.external = this._formatted), this.path && (t4.path = this.path), this.scheme && (t4.scheme = this.scheme), this.authority && (t4.authority = this.authority), this.query && (t4.query = this.query), this.fragment && (t4.fragment = this.fragment), t4;
            }, e3;
        }(g), y = ((i = {})[58] = "%3A", i[47] = "%2F", i[63] = "%3F", i[35] = "%23", i[91] = "%5B", i[93] = "%5D", i[64] = "%40", i[33] = "%21", i[36] = "%24", i[38] = "%26", i[39] = "%27", i[40] = "%28", i[41] = "%29", i[42] = "%2A", i[43] = "%2B", i[44] = "%2C", i[59] = "%3B", i[61] = "%3D", i[32] = "%20", i);
        function m(t3, e3, r2) {
            for(var n2 = void 0, o2 = -1, i2 = 0; i2 < t3.length; i2++){
                var a3 = t3.charCodeAt(i2);
                if (a3 >= 97 && a3 <= 122 || a3 >= 65 && a3 <= 90 || a3 >= 48 && a3 <= 57 || 45 === a3 || 46 === a3 || 95 === a3 || 126 === a3 || e3 && 47 === a3 || r2 && 91 === a3 || r2 && 93 === a3 || r2 && 58 === a3) -1 !== o2 && (n2 += encodeURIComponent(t3.substring(o2, i2)), o2 = -1), void 0 !== n2 && (n2 += t3.charAt(i2));
                else {
                    void 0 === n2 && (n2 = t3.substr(0, i2));
                    var h2 = y[a3];
                    void 0 !== h2 ? (-1 !== o2 && (n2 += encodeURIComponent(t3.substring(o2, i2)), o2 = -1), n2 += h2) : -1 === o2 && (o2 = i2);
                }
            }
            return -1 !== o2 && (n2 += encodeURIComponent(t3.substring(o2))), void 0 !== n2 ? n2 : t3;
        }
        function b(t3) {
            for(var e3 = void 0, r2 = 0; r2 < t3.length; r2++){
                var n2 = t3.charCodeAt(r2);
                35 === n2 || 63 === n2 ? (void 0 === e3 && (e3 = t3.substr(0, r2)), e3 += y[n2]) : void 0 !== e3 && (e3 += t3[r2]);
            }
            return void 0 !== e3 ? e3 : t3;
        }
        function C(e3, r2) {
            var n2;
            return n2 = e3.authority && e3.path.length > 1 && "file" === e3.scheme ? "//".concat(e3.authority).concat(e3.path) : 47 === e3.path.charCodeAt(0) && (e3.path.charCodeAt(1) >= 65 && e3.path.charCodeAt(1) <= 90 || e3.path.charCodeAt(1) >= 97 && e3.path.charCodeAt(1) <= 122) && 58 === e3.path.charCodeAt(2) ? r2 ? e3.path.substr(1) : e3.path[1].toLowerCase() + e3.path.substr(2) : e3.path, t2 && (n2 = n2.replace(/\//g, "\\")), n2;
        }
        function A2(t3, e3) {
            var r2 = e3 ? b : m, n2 = "", o2 = t3.scheme, i2 = t3.authority, a3 = t3.path, h2 = t3.query, s2 = t3.fragment;
            if (o2 && (n2 += o2, n2 += ":"), (i2 || "file" === o2) && (n2 += l, n2 += l), i2) {
                var c2 = i2.indexOf("@");
                if (-1 !== c2) {
                    var f3 = i2.substr(0, c2);
                    i2 = i2.substr(c2 + 1), -1 === (c2 = f3.lastIndexOf(":")) ? n2 += r2(f3, false, false) : (n2 += r2(f3.substr(0, c2), false, false), n2 += ":", n2 += r2(f3.substr(c2 + 1), false, true)), n2 += "@";
                }
                -1 === (c2 = (i2 = i2.toLowerCase()).lastIndexOf(":")) ? n2 += r2(i2, false, true) : (n2 += r2(i2.substr(0, c2), false, true), n2 += i2.substr(c2));
            }
            if (a3) {
                if (a3.length >= 3 && 47 === a3.charCodeAt(0) && 58 === a3.charCodeAt(2)) (u2 = a3.charCodeAt(1)) >= 65 && u2 <= 90 && (a3 = "/".concat(String.fromCharCode(u2 + 32), ":").concat(a3.substr(3)));
                else if (a3.length >= 2 && 58 === a3.charCodeAt(1)) {
                    var u2;
                    (u2 = a3.charCodeAt(0)) >= 65 && u2 <= 90 && (a3 = "".concat(String.fromCharCode(u2 + 32), ":").concat(a3.substr(2)));
                }
                n2 += r2(a3, true, false);
            }
            return h2 && (n2 += "?", n2 += r2(h2, false, false)), s2 && (n2 += "#", n2 += e3 ? s2 : m(s2, false, false)), n2;
        }
        function w(t3) {
            try {
                return decodeURIComponent(t3);
            } catch (e3) {
                return t3.length > 3 ? t3.substr(0, 3) + w(t3.substr(3)) : t3;
            }
        }
        var x = /(%[0-9A-Za-z][0-9A-Za-z])+/g;
        function _(t3) {
            return t3.match(x) ? t3.replace(x, function(t4) {
                return w(t4);
            }) : t3;
        }
        var O, P = r(470), j = function(t3, e3, r2) {
            if (r2 || 2 === arguments.length) for(var n2, o2 = 0, i2 = e3.length; o2 < i2; o2++)!n2 && o2 in e3 || (n2 || (n2 = Array.prototype.slice.call(e3, 0, o2)), n2[o2] = e3[o2]);
            return t3.concat(n2 || Array.prototype.slice.call(e3));
        }, I = P.posix || P, U = "/";
        !function(t3) {
            t3.joinPath = function(t4) {
                for(var e3 = [], r2 = 1; r2 < arguments.length; r2++)e3[r2 - 1] = arguments[r2];
                return t4.with({
                    path: I.join.apply(I, j([
                        t4.path
                    ], e3, false))
                });
            }, t3.resolvePath = function(t4) {
                for(var e3 = [], r2 = 1; r2 < arguments.length; r2++)e3[r2 - 1] = arguments[r2];
                var n2 = t4.path, o2 = false;
                n2[0] !== U && (n2 = U + n2, o2 = true);
                var i2 = I.resolve.apply(I, j([
                    n2
                ], e3, false));
                return o2 && i2[0] === U && !t4.authority && (i2 = i2.substring(1)), t4.with({
                    path: i2
                });
            }, t3.dirname = function(t4) {
                if (0 === t4.path.length || t4.path === U) return t4;
                var e3 = I.dirname(t4.path);
                return 1 === e3.length && 46 === e3.charCodeAt(0) && (e3 = ""), t4.with({
                    path: e3
                });
            }, t3.basename = function(t4) {
                return I.basename(t4.path);
            }, t3.extname = function(t4) {
                return I.extname(t4.path);
            };
        }(O || (O = {}));
    })(), LIB = n;
})();
var { URI , Utils  } = LIB;
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/utils/strings.js
function startsWith(haystack, needle) {
    if (haystack.length < needle.length) {
        return false;
    }
    for(var i = 0; i < needle.length; i++){
        if (haystack[i] !== needle[i]) {
            return false;
        }
    }
    return true;
}
function endsWith(haystack, needle) {
    var diff = haystack.length - needle.length;
    if (diff > 0) {
        return haystack.lastIndexOf(needle) === diff;
    } else if (diff === 0) {
        return haystack === needle;
    } else {
        return false;
    }
}
function extendedRegExp(pattern) {
    if (startsWith(pattern, "(?i)")) {
        return new RegExp(pattern.substring(4), "i");
    } else {
        return new RegExp(pattern);
    }
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/utils/objects.js
function equals(one, other) {
    if (one === other) {
        return true;
    }
    if (one === null || one === void 0 || other === null || other === void 0) {
        return false;
    }
    if (typeof one !== typeof other) {
        return false;
    }
    if (typeof one !== "object") {
        return false;
    }
    if (Array.isArray(one) !== Array.isArray(other)) {
        return false;
    }
    var i, key;
    if (Array.isArray(one)) {
        if (one.length !== other.length) {
            return false;
        }
        for(i = 0; i < one.length; i++){
            if (!equals(one[i], other[i])) {
                return false;
            }
        }
    } else {
        var oneKeys = [];
        for(key in one){
            oneKeys.push(key);
        }
        oneKeys.sort();
        var otherKeys = [];
        for(key in other){
            otherKeys.push(key);
        }
        otherKeys.sort();
        if (!equals(oneKeys, otherKeys)) {
            return false;
        }
        for(i = 0; i < oneKeys.length; i++){
            if (!equals(one[oneKeys[i]], other[oneKeys[i]])) {
                return false;
            }
        }
    }
    return true;
}
function isNumber(val) {
    return typeof val === "number";
}
function isDefined(val) {
    return typeof val !== "undefined";
}
function isBoolean(val) {
    return typeof val === "boolean";
}
function isString(val) {
    return typeof val === "string";
}
// ../../node_modules/vscode-languageserver-types/lib/esm/main.js
var DocumentUri;
(function(DocumentUri2) {
    function is(value1) {
        return typeof value1 === "string";
    }
    DocumentUri2.is = is;
})(DocumentUri || (DocumentUri = {}));
var URI2;
(function(URI3) {
    function is(value1) {
        return typeof value1 === "string";
    }
    URI3.is = is;
})(URI2 || (URI2 = {}));
var integer;
(function(integer2) {
    integer2.MIN_VALUE = -2147483648;
    integer2.MAX_VALUE = 2147483647;
    function is(value1) {
        return typeof value1 === "number" && integer2.MIN_VALUE <= value1 && value1 <= integer2.MAX_VALUE;
    }
    integer2.is = is;
})(integer || (integer = {}));
var uinteger;
(function(uinteger2) {
    uinteger2.MIN_VALUE = 0;
    uinteger2.MAX_VALUE = 2147483647;
    function is(value1) {
        return typeof value1 === "number" && uinteger2.MIN_VALUE <= value1 && value1 <= uinteger2.MAX_VALUE;
    }
    uinteger2.is = is;
})(uinteger || (uinteger = {}));
var Position;
(function(Position2) {
    function create(line, character) {
        if (line === Number.MAX_VALUE) {
            line = uinteger.MAX_VALUE;
        }
        if (character === Number.MAX_VALUE) {
            character = uinteger.MAX_VALUE;
        }
        return {
            line,
            character
        };
    }
    Position2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
    }
    Position2.is = is;
})(Position || (Position = {}));
var Range;
(function(Range2) {
    function create(one, two, three, four) {
        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
            return {
                start: Position.create(one, two),
                end: Position.create(three, four)
            };
        } else if (Position.is(one) && Position.is(two)) {
            return {
                start: one,
                end: two
            };
        } else {
            throw new Error("Range#create called with invalid arguments[".concat(one, ", ").concat(two, ", ").concat(three, ", ").concat(four, "]"));
        }
    }
    Range2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
    }
    Range2.is = is;
})(Range || (Range = {}));
var Location;
(function(Location2) {
    function create(uri, range) {
        return {
            uri,
            range
        };
    }
    Location2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
    }
    Location2.is = is;
})(Location || (Location = {}));
var LocationLink;
(function(LocationLink2) {
    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
        return {
            targetUri,
            targetRange,
            targetSelectionRange,
            originSelectionRange
        };
    }
    LocationLink2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri) && Range.is(candidate.targetSelectionRange) && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
    }
    LocationLink2.is = is;
})(LocationLink || (LocationLink = {}));
var Color;
(function(Color2) {
    function create(red, green, blue, alpha) {
        return {
            red,
            green,
            blue,
            alpha
        };
    }
    Color2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1) && Is.numberRange(candidate.green, 0, 1) && Is.numberRange(candidate.blue, 0, 1) && Is.numberRange(candidate.alpha, 0, 1);
    }
    Color2.is = is;
})(Color || (Color = {}));
var ColorInformation;
(function(ColorInformation2) {
    function create(range, color) {
        return {
            range,
            color
        };
    }
    ColorInformation2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);
    }
    ColorInformation2.is = is;
})(ColorInformation || (ColorInformation = {}));
var ColorPresentation;
(function(ColorPresentation2) {
    function create(label, textEdit, additionalTextEdits) {
        return {
            label,
            textEdit,
            additionalTextEdits
        };
    }
    ColorPresentation2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate)) && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
    }
    ColorPresentation2.is = is;
})(ColorPresentation || (ColorPresentation = {}));
var FoldingRangeKind;
(function(FoldingRangeKind2) {
    FoldingRangeKind2.Comment = "comment";
    FoldingRangeKind2.Imports = "imports";
    FoldingRangeKind2.Region = "region";
})(FoldingRangeKind || (FoldingRangeKind = {}));
var FoldingRange;
(function(FoldingRange2) {
    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {
        var result = {
            startLine,
            endLine
        };
        if (Is.defined(startCharacter)) {
            result.startCharacter = startCharacter;
        }
        if (Is.defined(endCharacter)) {
            result.endCharacter = endCharacter;
        }
        if (Is.defined(kind)) {
            result.kind = kind;
        }
        if (Is.defined(collapsedText)) {
            result.collapsedText = collapsedText;
        }
        return result;
    }
    FoldingRange2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine) && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter)) && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter)) && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
    }
    FoldingRange2.is = is;
})(FoldingRange || (FoldingRange = {}));
var DiagnosticRelatedInformation;
(function(DiagnosticRelatedInformation2) {
    function create(location, message) {
        return {
            location,
            message
        };
    }
    DiagnosticRelatedInformation2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
    }
    DiagnosticRelatedInformation2.is = is;
})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));
var DiagnosticSeverity;
(function(DiagnosticSeverity2) {
    DiagnosticSeverity2.Error = 1;
    DiagnosticSeverity2.Warning = 2;
    DiagnosticSeverity2.Information = 3;
    DiagnosticSeverity2.Hint = 4;
})(DiagnosticSeverity || (DiagnosticSeverity = {}));
var DiagnosticTag;
(function(DiagnosticTag2) {
    DiagnosticTag2.Unnecessary = 1;
    DiagnosticTag2.Deprecated = 2;
})(DiagnosticTag || (DiagnosticTag = {}));
var CodeDescription;
(function(CodeDescription2) {
    function is(value1) {
        var candidate = value1;
        return Is.objectLiteral(candidate) && Is.string(candidate.href);
    }
    CodeDescription2.is = is;
})(CodeDescription || (CodeDescription = {}));
var Diagnostic;
(function(Diagnostic2) {
    function create(range, message, severity, code, source, relatedInformation) {
        var result = {
            range,
            message
        };
        if (Is.defined(severity)) {
            result.severity = severity;
        }
        if (Is.defined(code)) {
            result.code = code;
        }
        if (Is.defined(source)) {
            result.source = source;
        }
        if (Is.defined(relatedInformation)) {
            result.relatedInformation = relatedInformation;
        }
        return result;
    }
    Diagnostic2.create = create;
    function is(value1) {
        var _a;
        var candidate = value1;
        return Is.defined(candidate) && Range.is(candidate.range) && Is.string(candidate.message) && (Is.number(candidate.severity) || Is.undefined(candidate.severity)) && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code)) && (Is.undefined(candidate.codeDescription) || Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)) && (Is.string(candidate.source) || Is.undefined(candidate.source)) && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
    }
    Diagnostic2.is = is;
})(Diagnostic || (Diagnostic = {}));
var Command;
(function(Command2) {
    function create(title, command) {
        var args = [];
        for(var _i = 2; _i < arguments.length; _i++){
            args[_i - 2] = arguments[_i];
        }
        var result = {
            title,
            command
        };
        if (Is.defined(args) && args.length > 0) {
            result.arguments = args;
        }
        return result;
    }
    Command2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
    }
    Command2.is = is;
})(Command || (Command = {}));
var TextEdit;
(function(TextEdit2) {
    function replace(range, newText) {
        return {
            range,
            newText
        };
    }
    TextEdit2.replace = replace;
    function insert(position, newText) {
        return {
            range: {
                start: position,
                end: position
            },
            newText
        };
    }
    TextEdit2.insert = insert;
    function del(range) {
        return {
            range,
            newText: ""
        };
    }
    TextEdit2.del = del;
    function is(value1) {
        var candidate = value1;
        return Is.objectLiteral(candidate) && Is.string(candidate.newText) && Range.is(candidate.range);
    }
    TextEdit2.is = is;
})(TextEdit || (TextEdit = {}));
var ChangeAnnotation;
(function(ChangeAnnotation2) {
    function create(label, needsConfirmation, description) {
        var result = {
            label
        };
        if (needsConfirmation !== void 0) {
            result.needsConfirmation = needsConfirmation;
        }
        if (description !== void 0) {
            result.description = description;
        }
        return result;
    }
    ChangeAnnotation2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === void 0) && (Is.string(candidate.description) || candidate.description === void 0);
    }
    ChangeAnnotation2.is = is;
})(ChangeAnnotation || (ChangeAnnotation = {}));
var ChangeAnnotationIdentifier;
(function(ChangeAnnotationIdentifier2) {
    function is(value1) {
        var candidate = value1;
        return Is.string(candidate);
    }
    ChangeAnnotationIdentifier2.is = is;
})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));
var AnnotatedTextEdit;
(function(AnnotatedTextEdit2) {
    function replace(range, newText, annotation) {
        return {
            range,
            newText,
            annotationId: annotation
        };
    }
    AnnotatedTextEdit2.replace = replace;
    function insert(position, newText, annotation) {
        return {
            range: {
                start: position,
                end: position
            },
            newText,
            annotationId: annotation
        };
    }
    AnnotatedTextEdit2.insert = insert;
    function del(range, annotation) {
        return {
            range,
            newText: "",
            annotationId: annotation
        };
    }
    AnnotatedTextEdit2.del = del;
    function is(value1) {
        var candidate = value1;
        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    AnnotatedTextEdit2.is = is;
})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));
var TextDocumentEdit;
(function(TextDocumentEdit2) {
    function create(textDocument, edits) {
        return {
            textDocument,
            edits
        };
    }
    TextDocumentEdit2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.defined(candidate) && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument) && Array.isArray(candidate.edits);
    }
    TextDocumentEdit2.is = is;
})(TextDocumentEdit || (TextDocumentEdit = {}));
var CreateFile;
(function(CreateFile2) {
    function create(uri, options, annotation) {
        var result = {
            kind: "create",
            uri
        };
        if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
            result.options = options;
        }
        if (annotation !== void 0) {
            result.annotationId = annotation;
        }
        return result;
    }
    CreateFile2.create = create;
    function is(value1) {
        var candidate = value1;
        return candidate && candidate.kind === "create" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    CreateFile2.is = is;
})(CreateFile || (CreateFile = {}));
var RenameFile;
(function(RenameFile2) {
    function create(oldUri, newUri, options, annotation) {
        var result = {
            kind: "rename",
            oldUri,
            newUri
        };
        if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
            result.options = options;
        }
        if (annotation !== void 0) {
            result.annotationId = annotation;
        }
        return result;
    }
    RenameFile2.create = create;
    function is(value1) {
        var candidate = value1;
        return candidate && candidate.kind === "rename" && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    RenameFile2.is = is;
})(RenameFile || (RenameFile = {}));
var DeleteFile;
(function(DeleteFile2) {
    function create(uri, options, annotation) {
        var result = {
            kind: "delete",
            uri
        };
        if (options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0)) {
            result.options = options;
        }
        if (annotation !== void 0) {
            result.annotationId = annotation;
        }
        return result;
    }
    DeleteFile2.create = create;
    function is(value1) {
        var candidate = value1;
        return candidate && candidate.kind === "delete" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.recursive === void 0 || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is.boolean(candidate.options.ignoreIfNotExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    DeleteFile2.is = is;
})(DeleteFile || (DeleteFile = {}));
var WorkspaceEdit;
(function(WorkspaceEdit2) {
    function is(value1) {
        var candidate = value1;
        return candidate && (candidate.changes !== void 0 || candidate.documentChanges !== void 0) && (candidate.documentChanges === void 0 || candidate.documentChanges.every(function(change) {
            if (Is.string(change.kind)) {
                return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
            } else {
                return TextDocumentEdit.is(change);
            }
        }));
    }
    WorkspaceEdit2.is = is;
})(WorkspaceEdit || (WorkspaceEdit = {}));
var TextEditChangeImpl = /** @class */ function() {
    function TextEditChangeImpl2(edits, changeAnnotations) {
        this.edits = edits;
        this.changeAnnotations = changeAnnotations;
    }
    TextEditChangeImpl2.prototype.insert = function(position, newText, annotation) {
        var edit;
        var id;
        if (annotation === void 0) {
            edit = TextEdit.insert(position, newText);
        } else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.insert(position, newText, annotation);
        } else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.insert(position, newText, id);
        }
        this.edits.push(edit);
        if (id !== void 0) {
            return id;
        }
    };
    TextEditChangeImpl2.prototype.replace = function(range, newText, annotation) {
        var edit;
        var id;
        if (annotation === void 0) {
            edit = TextEdit.replace(range, newText);
        } else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.replace(range, newText, annotation);
        } else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.replace(range, newText, id);
        }
        this.edits.push(edit);
        if (id !== void 0) {
            return id;
        }
    };
    TextEditChangeImpl2.prototype.delete = function(range, annotation) {
        var edit;
        var id;
        if (annotation === void 0) {
            edit = TextEdit.del(range);
        } else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.del(range, annotation);
        } else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.del(range, id);
        }
        this.edits.push(edit);
        if (id !== void 0) {
            return id;
        }
    };
    TextEditChangeImpl2.prototype.add = function(edit) {
        this.edits.push(edit);
    };
    TextEditChangeImpl2.prototype.all = function() {
        return this.edits;
    };
    TextEditChangeImpl2.prototype.clear = function() {
        this.edits.splice(0, this.edits.length);
    };
    TextEditChangeImpl2.prototype.assertChangeAnnotations = function(value1) {
        if (value1 === void 0) {
            throw new Error("Text edit change is not configured to manage change annotations.");
        }
    };
    return TextEditChangeImpl2;
}();
var ChangeAnnotations = /** @class */ function() {
    function ChangeAnnotations2(annotations) {
        this._annotations = annotations === void 0 ? /* @__PURE__ */ Object.create(null) : annotations;
        this._counter = 0;
        this._size = 0;
    }
    ChangeAnnotations2.prototype.all = function() {
        return this._annotations;
    };
    Object.defineProperty(ChangeAnnotations2.prototype, "size", {
        get: function() {
            return this._size;
        },
        enumerable: false,
        configurable: true
    });
    ChangeAnnotations2.prototype.manage = function(idOrAnnotation, annotation) {
        var id;
        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {
            id = idOrAnnotation;
        } else {
            id = this.nextId();
            annotation = idOrAnnotation;
        }
        if (this._annotations[id] !== void 0) {
            throw new Error("Id ".concat(id, " is already in use."));
        }
        if (annotation === void 0) {
            throw new Error("No annotation provided for id ".concat(id));
        }
        this._annotations[id] = annotation;
        this._size++;
        return id;
    };
    ChangeAnnotations2.prototype.nextId = function() {
        this._counter++;
        return this._counter.toString();
    };
    return ChangeAnnotations2;
}();
var WorkspaceChange = /** @class */ function() {
    function WorkspaceChange2(workspaceEdit) {
        var _this = this;
        this._textEditChanges = /* @__PURE__ */ Object.create(null);
        if (workspaceEdit !== void 0) {
            this._workspaceEdit = workspaceEdit;
            if (workspaceEdit.documentChanges) {
                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);
                workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                workspaceEdit.documentChanges.forEach(function(change) {
                    if (TextDocumentEdit.is(change)) {
                        var textEditChange = new TextEditChangeImpl(change.edits, _this._changeAnnotations);
                        _this._textEditChanges[change.textDocument.uri] = textEditChange;
                    }
                });
            } else if (workspaceEdit.changes) {
                Object.keys(workspaceEdit.changes).forEach(function(key) {
                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
                    _this._textEditChanges[key] = textEditChange;
                });
            }
        } else {
            this._workspaceEdit = {};
        }
    }
    Object.defineProperty(WorkspaceChange2.prototype, "edit", {
        /**
       * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal
       * use to be returned from a workspace edit operation like rename.
       */ get: function() {
            this.initDocumentChanges();
            if (this._changeAnnotations !== void 0) {
                if (this._changeAnnotations.size === 0) {
                    this._workspaceEdit.changeAnnotations = void 0;
                } else {
                    this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                }
            }
            return this._workspaceEdit;
        },
        enumerable: false,
        configurable: true
    });
    WorkspaceChange2.prototype.getTextEditChange = function(key) {
        if (OptionalVersionedTextDocumentIdentifier.is(key)) {
            this.initDocumentChanges();
            if (this._workspaceEdit.documentChanges === void 0) {
                throw new Error("Workspace edit is not configured for document changes.");
            }
            var textDocument = {
                uri: key.uri,
                version: key.version
            };
            var result = this._textEditChanges[textDocument.uri];
            if (!result) {
                var edits = [];
                var textDocumentEdit = {
                    textDocument,
                    edits
                };
                this._workspaceEdit.documentChanges.push(textDocumentEdit);
                result = new TextEditChangeImpl(edits, this._changeAnnotations);
                this._textEditChanges[textDocument.uri] = result;
            }
            return result;
        } else {
            this.initChanges();
            if (this._workspaceEdit.changes === void 0) {
                throw new Error("Workspace edit is not configured for normal text edit changes.");
            }
            var result = this._textEditChanges[key];
            if (!result) {
                var edits = [];
                this._workspaceEdit.changes[key] = edits;
                result = new TextEditChangeImpl(edits);
                this._textEditChanges[key] = result;
            }
            return result;
        }
    };
    WorkspaceChange2.prototype.initDocumentChanges = function() {
        if (this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0) {
            this._changeAnnotations = new ChangeAnnotations();
            this._workspaceEdit.documentChanges = [];
            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
        }
    };
    WorkspaceChange2.prototype.initChanges = function() {
        if (this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0) {
            this._workspaceEdit.changes = /* @__PURE__ */ Object.create(null);
        }
    };
    WorkspaceChange2.prototype.createFile = function(uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === void 0) {
            throw new Error("Workspace edit is not configured for document changes.");
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        } else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === void 0) {
            operation = CreateFile.create(uri, options);
        } else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = CreateFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== void 0) {
            return id;
        }
    };
    WorkspaceChange2.prototype.renameFile = function(oldUri, newUri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === void 0) {
            throw new Error("Workspace edit is not configured for document changes.");
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        } else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === void 0) {
            operation = RenameFile.create(oldUri, newUri, options);
        } else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = RenameFile.create(oldUri, newUri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== void 0) {
            return id;
        }
    };
    WorkspaceChange2.prototype.deleteFile = function(uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === void 0) {
            throw new Error("Workspace edit is not configured for document changes.");
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        } else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === void 0) {
            operation = DeleteFile.create(uri, options);
        } else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = DeleteFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== void 0) {
            return id;
        }
    };
    return WorkspaceChange2;
}();
var TextDocumentIdentifier;
(function(TextDocumentIdentifier2) {
    function create(uri) {
        return {
            uri
        };
    }
    TextDocumentIdentifier2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.defined(candidate) && Is.string(candidate.uri);
    }
    TextDocumentIdentifier2.is = is;
})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));
var VersionedTextDocumentIdentifier;
(function(VersionedTextDocumentIdentifier2) {
    function create(uri, version) {
        return {
            uri,
            version
        };
    }
    VersionedTextDocumentIdentifier2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
    }
    VersionedTextDocumentIdentifier2.is = is;
})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));
var OptionalVersionedTextDocumentIdentifier;
(function(OptionalVersionedTextDocumentIdentifier2) {
    function create(uri, version) {
        return {
            uri,
            version
        };
    }
    OptionalVersionedTextDocumentIdentifier2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
    }
    OptionalVersionedTextDocumentIdentifier2.is = is;
})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));
var TextDocumentItem;
(function(TextDocumentItem2) {
    function create(uri, languageId, version, text) {
        return {
            uri,
            languageId,
            version,
            text
        };
    }
    TextDocumentItem2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
    }
    TextDocumentItem2.is = is;
})(TextDocumentItem || (TextDocumentItem = {}));
var MarkupKind;
(function(MarkupKind2) {
    MarkupKind2.PlainText = "plaintext";
    MarkupKind2.Markdown = "markdown";
    function is(value1) {
        var candidate = value1;
        return candidate === MarkupKind2.PlainText || candidate === MarkupKind2.Markdown;
    }
    MarkupKind2.is = is;
})(MarkupKind || (MarkupKind = {}));
var lib_MarkupContent;
(function(MarkupContent2) {
    function is(value1) {
        var candidate = value1;
        return Is.objectLiteral(value1) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
    }
    MarkupContent2.is = is;
})(lib_MarkupContent || (lib_MarkupContent = {}));
var lib_CompletionItemKind;
(function(CompletionItemKind2) {
    CompletionItemKind2.Text = 1;
    CompletionItemKind2.Method = 2;
    CompletionItemKind2.Function = 3;
    CompletionItemKind2.Constructor = 4;
    CompletionItemKind2.Field = 5;
    CompletionItemKind2.Variable = 6;
    CompletionItemKind2.Class = 7;
    CompletionItemKind2.Interface = 8;
    CompletionItemKind2.Module = 9;
    CompletionItemKind2.Property = 10;
    CompletionItemKind2.Unit = 11;
    CompletionItemKind2.Value = 12;
    CompletionItemKind2.Enum = 13;
    CompletionItemKind2.Keyword = 14;
    CompletionItemKind2.Snippet = 15;
    CompletionItemKind2.Color = 16;
    CompletionItemKind2.File = 17;
    CompletionItemKind2.Reference = 18;
    CompletionItemKind2.Folder = 19;
    CompletionItemKind2.EnumMember = 20;
    CompletionItemKind2.Constant = 21;
    CompletionItemKind2.Struct = 22;
    CompletionItemKind2.Event = 23;
    CompletionItemKind2.Operator = 24;
    CompletionItemKind2.TypeParameter = 25;
})(lib_CompletionItemKind || (lib_CompletionItemKind = {}));
var lib_InsertTextFormat;
(function(InsertTextFormat2) {
    InsertTextFormat2.PlainText = 1;
    InsertTextFormat2.Snippet = 2;
})(lib_InsertTextFormat || (lib_InsertTextFormat = {}));
var CompletionItemTag;
(function(CompletionItemTag2) {
    CompletionItemTag2.Deprecated = 1;
})(CompletionItemTag || (CompletionItemTag = {}));
var InsertReplaceEdit;
(function(InsertReplaceEdit2) {
    function create(newText, insert, replace) {
        return {
            newText,
            insert,
            replace
        };
    }
    InsertReplaceEdit2.create = create;
    function is(value1) {
        var candidate = value1;
        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);
    }
    InsertReplaceEdit2.is = is;
})(InsertReplaceEdit || (InsertReplaceEdit = {}));
var InsertTextMode;
(function(InsertTextMode2) {
    InsertTextMode2.asIs = 1;
    InsertTextMode2.adjustIndentation = 2;
})(InsertTextMode || (InsertTextMode = {}));
var CompletionItemLabelDetails;
(function(CompletionItemLabelDetails2) {
    function is(value1) {
        var candidate = value1;
        return candidate && (Is.string(candidate.detail) || candidate.detail === void 0) && (Is.string(candidate.description) || candidate.description === void 0);
    }
    CompletionItemLabelDetails2.is = is;
})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));
var CompletionItem;
(function(CompletionItem2) {
    function create(label) {
        return {
            label
        };
    }
    CompletionItem2.create = create;
})(CompletionItem || (CompletionItem = {}));
var CompletionList;
(function(CompletionList2) {
    function create(items, isIncomplete) {
        return {
            items: items ? items : [],
            isIncomplete: !!isIncomplete
        };
    }
    CompletionList2.create = create;
})(CompletionList || (CompletionList = {}));
var lib_MarkedString;
(function(MarkedString2) {
    function fromPlainText(plainText) {
        return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
    }
    MarkedString2.fromPlainText = fromPlainText;
    function is(value1) {
        var candidate = value1;
        return Is.string(candidate) || Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value);
    }
    MarkedString2.is = is;
})(lib_MarkedString || (lib_MarkedString = {}));
var Hover;
(function(Hover2) {
    function is(value1) {
        var candidate = value1;
        return !!candidate && Is.objectLiteral(candidate) && (lib_MarkupContent.is(candidate.contents) || lib_MarkedString.is(candidate.contents) || Is.typedArray(candidate.contents, lib_MarkedString.is)) && (value1.range === void 0 || Range.is(value1.range));
    }
    Hover2.is = is;
})(Hover || (Hover = {}));
var ParameterInformation;
(function(ParameterInformation2) {
    function create(label, documentation) {
        return documentation ? {
            label,
            documentation
        } : {
            label
        };
    }
    ParameterInformation2.create = create;
})(ParameterInformation || (ParameterInformation = {}));
var SignatureInformation;
(function(SignatureInformation2) {
    function create(label, documentation) {
        var parameters = [];
        for(var _i = 2; _i < arguments.length; _i++){
            parameters[_i - 2] = arguments[_i];
        }
        var result = {
            label
        };
        if (Is.defined(documentation)) {
            result.documentation = documentation;
        }
        if (Is.defined(parameters)) {
            result.parameters = parameters;
        } else {
            result.parameters = [];
        }
        return result;
    }
    SignatureInformation2.create = create;
})(SignatureInformation || (SignatureInformation = {}));
var DocumentHighlightKind;
(function(DocumentHighlightKind2) {
    DocumentHighlightKind2.Text = 1;
    DocumentHighlightKind2.Read = 2;
    DocumentHighlightKind2.Write = 3;
})(DocumentHighlightKind || (DocumentHighlightKind = {}));
var DocumentHighlight;
(function(DocumentHighlight2) {
    function create(range, kind) {
        var result = {
            range
        };
        if (Is.number(kind)) {
            result.kind = kind;
        }
        return result;
    }
    DocumentHighlight2.create = create;
})(DocumentHighlight || (DocumentHighlight = {}));
var SymbolKind;
(function(SymbolKind2) {
    SymbolKind2.File = 1;
    SymbolKind2.Module = 2;
    SymbolKind2.Namespace = 3;
    SymbolKind2.Package = 4;
    SymbolKind2.Class = 5;
    SymbolKind2.Method = 6;
    SymbolKind2.Property = 7;
    SymbolKind2.Field = 8;
    SymbolKind2.Constructor = 9;
    SymbolKind2.Enum = 10;
    SymbolKind2.Interface = 11;
    SymbolKind2.Function = 12;
    SymbolKind2.Variable = 13;
    SymbolKind2.Constant = 14;
    SymbolKind2.String = 15;
    SymbolKind2.Number = 16;
    SymbolKind2.Boolean = 17;
    SymbolKind2.Array = 18;
    SymbolKind2.Object = 19;
    SymbolKind2.Key = 20;
    SymbolKind2.Null = 21;
    SymbolKind2.EnumMember = 22;
    SymbolKind2.Struct = 23;
    SymbolKind2.Event = 24;
    SymbolKind2.Operator = 25;
    SymbolKind2.TypeParameter = 26;
})(SymbolKind || (SymbolKind = {}));
var SymbolTag;
(function(SymbolTag2) {
    SymbolTag2.Deprecated = 1;
})(SymbolTag || (SymbolTag = {}));
var SymbolInformation;
(function(SymbolInformation2) {
    function create(name, kind, range, uri, containerName) {
        var result = {
            name,
            kind,
            location: {
                uri,
                range
            }
        };
        if (containerName) {
            result.containerName = containerName;
        }
        return result;
    }
    SymbolInformation2.create = create;
})(SymbolInformation || (SymbolInformation = {}));
var WorkspaceSymbol;
(function(WorkspaceSymbol2) {
    function create(name, kind, uri, range) {
        return range !== void 0 ? {
            name,
            kind,
            location: {
                uri,
                range
            }
        } : {
            name,
            kind,
            location: {
                uri
            }
        };
    }
    WorkspaceSymbol2.create = create;
})(WorkspaceSymbol || (WorkspaceSymbol = {}));
var DocumentSymbol;
(function(DocumentSymbol2) {
    function create(name, detail, kind, range, selectionRange, children) {
        var result = {
            name,
            detail,
            kind,
            range,
            selectionRange
        };
        if (children !== void 0) {
            result.children = children;
        }
        return result;
    }
    DocumentSymbol2.create = create;
    function is(value1) {
        var candidate = value1;
        return candidate && Is.string(candidate.name) && Is.number(candidate.kind) && Range.is(candidate.range) && Range.is(candidate.selectionRange) && (candidate.detail === void 0 || Is.string(candidate.detail)) && (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) && (candidate.children === void 0 || Array.isArray(candidate.children)) && (candidate.tags === void 0 || Array.isArray(candidate.tags));
    }
    DocumentSymbol2.is = is;
})(DocumentSymbol || (DocumentSymbol = {}));
var CodeActionKind;
(function(CodeActionKind2) {
    CodeActionKind2.Empty = "";
    CodeActionKind2.QuickFix = "quickfix";
    CodeActionKind2.Refactor = "refactor";
    CodeActionKind2.RefactorExtract = "refactor.extract";
    CodeActionKind2.RefactorInline = "refactor.inline";
    CodeActionKind2.RefactorRewrite = "refactor.rewrite";
    CodeActionKind2.Source = "source";
    CodeActionKind2.SourceOrganizeImports = "source.organizeImports";
    CodeActionKind2.SourceFixAll = "source.fixAll";
})(CodeActionKind || (CodeActionKind = {}));
var CodeActionTriggerKind;
(function(CodeActionTriggerKind2) {
    CodeActionTriggerKind2.Invoked = 1;
    CodeActionTriggerKind2.Automatic = 2;
})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));
var CodeActionContext;
(function(CodeActionContext2) {
    function create(diagnostics, only, triggerKind) {
        var result = {
            diagnostics
        };
        if (only !== void 0 && only !== null) {
            result.only = only;
        }
        if (triggerKind !== void 0 && triggerKind !== null) {
            result.triggerKind = triggerKind;
        }
        return result;
    }
    CodeActionContext2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string)) && (candidate.triggerKind === void 0 || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
    }
    CodeActionContext2.is = is;
})(CodeActionContext || (CodeActionContext = {}));
var CodeAction;
(function(CodeAction2) {
    function create(title, kindOrCommandOrEdit, kind) {
        var result = {
            title
        };
        var checkKind = true;
        if (typeof kindOrCommandOrEdit === "string") {
            checkKind = false;
            result.kind = kindOrCommandOrEdit;
        } else if (Command.is(kindOrCommandOrEdit)) {
            result.command = kindOrCommandOrEdit;
        } else {
            result.edit = kindOrCommandOrEdit;
        }
        if (checkKind && kind !== void 0) {
            result.kind = kind;
        }
        return result;
    }
    CodeAction2.create = create;
    function is(value1) {
        var candidate = value1;
        return candidate && Is.string(candidate.title) && (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) && (candidate.kind === void 0 || Is.string(candidate.kind)) && (candidate.edit !== void 0 || candidate.command !== void 0) && (candidate.command === void 0 || Command.is(candidate.command)) && (candidate.isPreferred === void 0 || Is.boolean(candidate.isPreferred)) && (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));
    }
    CodeAction2.is = is;
})(CodeAction || (CodeAction = {}));
var CodeLens;
(function(CodeLens2) {
    function create(range, data) {
        var result = {
            range
        };
        if (Is.defined(data)) {
            result.data = data;
        }
        return result;
    }
    CodeLens2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
    }
    CodeLens2.is = is;
})(CodeLens || (CodeLens = {}));
var FormattingOptions;
(function(FormattingOptions2) {
    function create(tabSize, insertSpaces) {
        return {
            tabSize,
            insertSpaces
        };
    }
    FormattingOptions2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
    }
    FormattingOptions2.is = is;
})(FormattingOptions || (FormattingOptions = {}));
var DocumentLink;
(function(DocumentLink2) {
    function create(range, target, data) {
        return {
            range,
            target,
            data
        };
    }
    DocumentLink2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
    }
    DocumentLink2.is = is;
})(DocumentLink || (DocumentLink = {}));
var SelectionRange;
(function(SelectionRange2) {
    function create(range, parent) {
        return {
            range,
            parent
        };
    }
    SelectionRange2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === void 0 || SelectionRange2.is(candidate.parent));
    }
    SelectionRange2.is = is;
})(SelectionRange || (SelectionRange = {}));
var SemanticTokenTypes;
(function(SemanticTokenTypes2) {
    SemanticTokenTypes2["namespace"] = "namespace";
    SemanticTokenTypes2["type"] = "type";
    SemanticTokenTypes2["class"] = "class";
    SemanticTokenTypes2["enum"] = "enum";
    SemanticTokenTypes2["interface"] = "interface";
    SemanticTokenTypes2["struct"] = "struct";
    SemanticTokenTypes2["typeParameter"] = "typeParameter";
    SemanticTokenTypes2["parameter"] = "parameter";
    SemanticTokenTypes2["variable"] = "variable";
    SemanticTokenTypes2["property"] = "property";
    SemanticTokenTypes2["enumMember"] = "enumMember";
    SemanticTokenTypes2["event"] = "event";
    SemanticTokenTypes2["function"] = "function";
    SemanticTokenTypes2["method"] = "method";
    SemanticTokenTypes2["macro"] = "macro";
    SemanticTokenTypes2["keyword"] = "keyword";
    SemanticTokenTypes2["modifier"] = "modifier";
    SemanticTokenTypes2["comment"] = "comment";
    SemanticTokenTypes2["string"] = "string";
    SemanticTokenTypes2["number"] = "number";
    SemanticTokenTypes2["regexp"] = "regexp";
    SemanticTokenTypes2["operator"] = "operator";
    SemanticTokenTypes2["decorator"] = "decorator";
})(SemanticTokenTypes || (SemanticTokenTypes = {}));
var SemanticTokenModifiers;
(function(SemanticTokenModifiers2) {
    SemanticTokenModifiers2["declaration"] = "declaration";
    SemanticTokenModifiers2["definition"] = "definition";
    SemanticTokenModifiers2["readonly"] = "readonly";
    SemanticTokenModifiers2["static"] = "static";
    SemanticTokenModifiers2["deprecated"] = "deprecated";
    SemanticTokenModifiers2["abstract"] = "abstract";
    SemanticTokenModifiers2["async"] = "async";
    SemanticTokenModifiers2["modification"] = "modification";
    SemanticTokenModifiers2["documentation"] = "documentation";
    SemanticTokenModifiers2["defaultLibrary"] = "defaultLibrary";
})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));
var SemanticTokens;
(function(SemanticTokens2) {
    function is(value1) {
        var candidate = value1;
        return Is.objectLiteral(candidate) && (candidate.resultId === void 0 || typeof candidate.resultId === "string") && Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === "number");
    }
    SemanticTokens2.is = is;
})(SemanticTokens || (SemanticTokens = {}));
var InlineValueText;
(function(InlineValueText2) {
    function create(range, text) {
        return {
            range,
            text
        };
    }
    InlineValueText2.create = create;
    function is(value1) {
        var candidate = value1;
        return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);
    }
    InlineValueText2.is = is;
})(InlineValueText || (InlineValueText = {}));
var InlineValueVariableLookup;
(function(InlineValueVariableLookup2) {
    function create(range, variableName, caseSensitiveLookup) {
        return {
            range,
            variableName,
            caseSensitiveLookup
        };
    }
    InlineValueVariableLookup2.create = create;
    function is(value1) {
        var candidate = value1;
        return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup) && (Is.string(candidate.variableName) || candidate.variableName === void 0);
    }
    InlineValueVariableLookup2.is = is;
})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));
var InlineValueEvaluatableExpression;
(function(InlineValueEvaluatableExpression2) {
    function create(range, expression) {
        return {
            range,
            expression
        };
    }
    InlineValueEvaluatableExpression2.create = create;
    function is(value1) {
        var candidate = value1;
        return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && (Is.string(candidate.expression) || candidate.expression === void 0);
    }
    InlineValueEvaluatableExpression2.is = is;
})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));
var InlineValueContext;
(function(InlineValueContext2) {
    function create(frameId, stoppedLocation) {
        return {
            frameId,
            stoppedLocation
        };
    }
    InlineValueContext2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.defined(candidate) && Range.is(value1.stoppedLocation);
    }
    InlineValueContext2.is = is;
})(InlineValueContext || (InlineValueContext = {}));
var InlayHintKind;
(function(InlayHintKind2) {
    InlayHintKind2.Type = 1;
    InlayHintKind2.Parameter = 2;
    function is(value1) {
        return value1 === 1 || value1 === 2;
    }
    InlayHintKind2.is = is;
})(InlayHintKind || (InlayHintKind = {}));
var InlayHintLabelPart;
(function(InlayHintLabelPart2) {
    function create(value1) {
        return {
            value: value1
        };
    }
    InlayHintLabelPart2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.objectLiteral(candidate) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || lib_MarkupContent.is(candidate.tooltip)) && (candidate.location === void 0 || Location.is(candidate.location)) && (candidate.command === void 0 || Command.is(candidate.command));
    }
    InlayHintLabelPart2.is = is;
})(InlayHintLabelPart || (InlayHintLabelPart = {}));
var InlayHint;
(function(InlayHint2) {
    function create(position, label, kind) {
        var result = {
            position,
            label
        };
        if (kind !== void 0) {
            result.kind = kind;
        }
        return result;
    }
    InlayHint2.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.objectLiteral(candidate) && Position.is(candidate.position) && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is)) && (candidate.kind === void 0 || InlayHintKind.is(candidate.kind)) && candidate.textEdits === void 0 || Is.typedArray(candidate.textEdits, TextEdit.is) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || lib_MarkupContent.is(candidate.tooltip)) && (candidate.paddingLeft === void 0 || Is.boolean(candidate.paddingLeft)) && (candidate.paddingRight === void 0 || Is.boolean(candidate.paddingRight));
    }
    InlayHint2.is = is;
})(InlayHint || (InlayHint = {}));
var WorkspaceFolder;
(function(WorkspaceFolder2) {
    function is(value1) {
        var candidate = value1;
        return Is.objectLiteral(candidate) && URI2.is(candidate.uri) && Is.string(candidate.name);
    }
    WorkspaceFolder2.is = is;
})(WorkspaceFolder || (WorkspaceFolder = {}));
var lib_TextDocument;
(function(TextDocument3) {
    function create(uri, languageId, version, content) {
        return new lib_FullTextDocument(uri, languageId, version, content);
    }
    TextDocument3.create = create;
    function is(value1) {
        var candidate = value1;
        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount) && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
    }
    TextDocument3.is = is;
    function applyEdits(document, edits) {
        var text = document.getText();
        var sortedEdits = mergeSort2(edits, function(a2, b) {
            var diff = a2.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a2.range.start.character - b.range.start.character;
            }
            return diff;
        });
        var lastModifiedOffset = text.length;
        for(var i = sortedEdits.length - 1; i >= 0; i--){
            var e = sortedEdits[i];
            var startOffset = document.offsetAt(e.range.start);
            var endOffset = document.offsetAt(e.range.end);
            if (endOffset <= lastModifiedOffset) {
                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
            } else {
                throw new Error("Overlapping edit");
            }
            lastModifiedOffset = startOffset;
        }
        return text;
    }
    TextDocument3.applyEdits = applyEdits;
    function mergeSort2(data, compare) {
        if (data.length <= 1) {
            return data;
        }
        var p = data.length / 2 | 0;
        var left = data.slice(0, p);
        var right = data.slice(p);
        mergeSort2(left, compare);
        mergeSort2(right, compare);
        var leftIdx = 0;
        var rightIdx = 0;
        var i = 0;
        while(leftIdx < left.length && rightIdx < right.length){
            var ret = compare(left[leftIdx], right[rightIdx]);
            if (ret <= 0) {
                data[i++] = left[leftIdx++];
            } else {
                data[i++] = right[rightIdx++];
            }
        }
        while(leftIdx < left.length){
            data[i++] = left[leftIdx++];
        }
        while(rightIdx < right.length){
            data[i++] = right[rightIdx++];
        }
        return data;
    }
})(lib_TextDocument || (lib_TextDocument = {}));
var lib_FullTextDocument = /** @class */ function() {
    function FullTextDocument3(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = void 0;
    }
    Object.defineProperty(FullTextDocument3.prototype, "uri", {
        get: function() {
            return this._uri;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument3.prototype, "languageId", {
        get: function() {
            return this._languageId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument3.prototype, "version", {
        get: function() {
            return this._version;
        },
        enumerable: false,
        configurable: true
    });
    FullTextDocument3.prototype.getText = function(range) {
        if (range) {
            var start = this.offsetAt(range.start);
            var end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    };
    FullTextDocument3.prototype.update = function(event, version) {
        this._content = event.text;
        this._version = version;
        this._lineOffsets = void 0;
    };
    FullTextDocument3.prototype.getLineOffsets = function() {
        if (this._lineOffsets === void 0) {
            var lineOffsets = [];
            var text = this._content;
            var isLineStart = true;
            for(var i = 0; i < text.length; i++){
                if (isLineStart) {
                    lineOffsets.push(i);
                    isLineStart = false;
                }
                var ch = text.charAt(i);
                isLineStart = ch === "\r" || ch === "\n";
                if (ch === "\r" && i + 1 < text.length && text.charAt(i + 1) === "\n") {
                    i++;
                }
            }
            if (isLineStart && text.length > 0) {
                lineOffsets.push(text.length);
            }
            this._lineOffsets = lineOffsets;
        }
        return this._lineOffsets;
    };
    FullTextDocument3.prototype.positionAt = function(offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        var lineOffsets = this.getLineOffsets();
        var low = 0, high = lineOffsets.length;
        if (high === 0) {
            return Position.create(0, offset);
        }
        while(low < high){
            var mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        var line = low - 1;
        return Position.create(line, offset - lineOffsets[line]);
    };
    FullTextDocument3.prototype.offsetAt = function(position) {
        var lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        } else if (position.line < 0) {
            return 0;
        }
        var lineOffset = lineOffsets[position.line];
        var nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    };
    Object.defineProperty(FullTextDocument3.prototype, "lineCount", {
        get: function() {
            return this.getLineOffsets().length;
        },
        enumerable: false,
        configurable: true
    });
    return FullTextDocument3;
}();
var Is;
(function(Is2) {
    var toString = Object.prototype.toString;
    function defined(value1) {
        return typeof value1 !== "undefined";
    }
    Is2.defined = defined;
    function undefined2(value1) {
        return typeof value1 === "undefined";
    }
    Is2.undefined = undefined2;
    function boolean(value1) {
        return value1 === true || value1 === false;
    }
    Is2.boolean = boolean;
    function string2(value1) {
        return toString.call(value1) === "[object String]";
    }
    Is2.string = string2;
    function number(value1) {
        return toString.call(value1) === "[object Number]";
    }
    Is2.number = number;
    function numberRange(value1, min, max) {
        return toString.call(value1) === "[object Number]" && min <= value1 && value1 <= max;
    }
    Is2.numberRange = numberRange;
    function integer2(value1) {
        return toString.call(value1) === "[object Number]" && -2147483648 <= value1 && value1 <= 2147483647;
    }
    Is2.integer = integer2;
    function uinteger2(value1) {
        return toString.call(value1) === "[object Number]" && 0 <= value1 && value1 <= 2147483647;
    }
    Is2.uinteger = uinteger2;
    function func(value1) {
        return toString.call(value1) === "[object Function]";
    }
    Is2.func = func;
    function objectLiteral(value1) {
        return value1 !== null && typeof value1 === "object";
    }
    Is2.objectLiteral = objectLiteral;
    function typedArray(value1, check) {
        return Array.isArray(value1) && value1.every(check);
    }
    Is2.typedArray = typedArray;
})(Is || (Is = {}));
// ../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js
var lib_spreadArray = function(to, from, pack) {
    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var FullTextDocument2 = /** @class */ function() {
    function FullTextDocument3(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = void 0;
    }
    Object.defineProperty(FullTextDocument3.prototype, "uri", {
        get: function() {
            return this._uri;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument3.prototype, "languageId", {
        get: function() {
            return this._languageId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument3.prototype, "version", {
        get: function() {
            return this._version;
        },
        enumerable: false,
        configurable: true
    });
    FullTextDocument3.prototype.getText = function(range) {
        if (range) {
            var start = this.offsetAt(range.start);
            var end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    };
    FullTextDocument3.prototype.update = function(changes, version) {
        for(var _i = 0, changes_1 = changes; _i < changes_1.length; _i++){
            var change = changes_1[_i];
            if (FullTextDocument3.isIncremental(change)) {
                var range = lib_getWellformedRange(change.range);
                var startOffset = this.offsetAt(range.start);
                var endOffset = this.offsetAt(range.end);
                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);
                var startLine = Math.max(range.start.line, 0);
                var endLine = Math.max(range.end.line, 0);
                var lineOffsets = this._lineOffsets;
                var addedLineOffsets = lib_computeLineOffsets(change.text, false, startOffset);
                if (endLine - startLine === addedLineOffsets.length) {
                    for(var i = 0, len = addedLineOffsets.length; i < len; i++){
                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];
                    }
                } else {
                    if (addedLineOffsets.length < 1e4) {
                        lineOffsets.splice.apply(lineOffsets, lib_spreadArray([
                            startLine + 1,
                            endLine - startLine
                        ], addedLineOffsets, false));
                    } else {
                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
                    }
                }
                var diff = change.text.length - (endOffset - startOffset);
                if (diff !== 0) {
                    for(var i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++){
                        lineOffsets[i] = lineOffsets[i] + diff;
                    }
                }
            } else if (FullTextDocument3.isFull(change)) {
                this._content = change.text;
                this._lineOffsets = void 0;
            } else {
                throw new Error("Unknown change event received");
            }
        }
        this._version = version;
    };
    FullTextDocument3.prototype.getLineOffsets = function() {
        if (this._lineOffsets === void 0) {
            this._lineOffsets = lib_computeLineOffsets(this._content, true);
        }
        return this._lineOffsets;
    };
    FullTextDocument3.prototype.positionAt = function(offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        var lineOffsets = this.getLineOffsets();
        var low = 0, high = lineOffsets.length;
        if (high === 0) {
            return {
                line: 0,
                character: offset
            };
        }
        while(low < high){
            var mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        var line = low - 1;
        return {
            line,
            character: offset - lineOffsets[line]
        };
    };
    FullTextDocument3.prototype.offsetAt = function(position) {
        var lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        } else if (position.line < 0) {
            return 0;
        }
        var lineOffset = lineOffsets[position.line];
        var nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    };
    Object.defineProperty(FullTextDocument3.prototype, "lineCount", {
        get: function() {
            return this.getLineOffsets().length;
        },
        enumerable: false,
        configurable: true
    });
    FullTextDocument3.isIncremental = function(event) {
        var candidate = event;
        return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range !== void 0 && (candidate.rangeLength === void 0 || typeof candidate.rangeLength === "number");
    };
    FullTextDocument3.isFull = function(event) {
        var candidate = event;
        return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range === void 0 && candidate.rangeLength === void 0;
    };
    return FullTextDocument3;
}();
var TextDocument2;
(function(TextDocument3) {
    function create(uri, languageId, version, content) {
        return new FullTextDocument2(uri, languageId, version, content);
    }
    TextDocument3.create = create;
    function update(document, changes, version) {
        if (document instanceof FullTextDocument2) {
            document.update(changes, version);
            return document;
        } else {
            throw new Error("TextDocument.update: document must be created by TextDocument.create");
        }
    }
    TextDocument3.update = update;
    function applyEdits(document, edits) {
        var text = document.getText();
        var sortedEdits = lib_mergeSort(edits.map(lib_getWellformedEdit), function(a2, b) {
            var diff = a2.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a2.range.start.character - b.range.start.character;
            }
            return diff;
        });
        var lastModifiedOffset = 0;
        var spans = [];
        for(var _i = 0, sortedEdits_1 = sortedEdits; _i < sortedEdits_1.length; _i++){
            var e = sortedEdits_1[_i];
            var startOffset = document.offsetAt(e.range.start);
            if (startOffset < lastModifiedOffset) {
                throw new Error("Overlapping edit");
            } else if (startOffset > lastModifiedOffset) {
                spans.push(text.substring(lastModifiedOffset, startOffset));
            }
            if (e.newText.length) {
                spans.push(e.newText);
            }
            lastModifiedOffset = document.offsetAt(e.range.end);
        }
        spans.push(text.substr(lastModifiedOffset));
        return spans.join("");
    }
    TextDocument3.applyEdits = applyEdits;
})(TextDocument2 || (TextDocument2 = {}));
function lib_mergeSort(data, compare) {
    if (data.length <= 1) {
        return data;
    }
    var p = data.length / 2 | 0;
    var left = data.slice(0, p);
    var right = data.slice(p);
    lib_mergeSort(left, compare);
    lib_mergeSort(right, compare);
    var leftIdx = 0;
    var rightIdx = 0;
    var i = 0;
    while(leftIdx < left.length && rightIdx < right.length){
        var ret = compare(left[leftIdx], right[rightIdx]);
        if (ret <= 0) {
            data[i++] = left[leftIdx++];
        } else {
            data[i++] = right[rightIdx++];
        }
    }
    while(leftIdx < left.length){
        data[i++] = left[leftIdx++];
    }
    while(rightIdx < right.length){
        data[i++] = right[rightIdx++];
    }
    return data;
}
function lib_computeLineOffsets(text, isAtLineStart, textOffset) {
    if (textOffset === void 0) {
        textOffset = 0;
    }
    var result = isAtLineStart ? [
        textOffset
    ] : [];
    for(var i = 0; i < text.length; i++){
        var ch = text.charCodeAt(i);
        if (ch === 13 || ch === 10) {
            if (ch === 13 && i + 1 < text.length && text.charCodeAt(i + 1) === 10) {
                i++;
            }
            result.push(textOffset + i + 1);
        }
    }
    return result;
}
function lib_getWellformedRange(range) {
    var start = range.start;
    var end = range.end;
    if (start.line > end.line || start.line === end.line && start.character > end.character) {
        return {
            start: end,
            end: start
        };
    }
    return range;
}
function lib_getWellformedEdit(textEdit) {
    var range = lib_getWellformedRange(textEdit.range);
    if (range !== textEdit.range) {
        return {
            newText: textEdit.newText,
            range
        };
    }
    return textEdit;
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/jsonLanguageTypes.js
var ErrorCode;
(function(ErrorCode2) {
    ErrorCode2[ErrorCode2["Undefined"] = 0] = "Undefined";
    ErrorCode2[ErrorCode2["EnumValueMismatch"] = 1] = "EnumValueMismatch";
    ErrorCode2[ErrorCode2["Deprecated"] = 2] = "Deprecated";
    ErrorCode2[ErrorCode2["UnexpectedEndOfComment"] = 257] = "UnexpectedEndOfComment";
    ErrorCode2[ErrorCode2["UnexpectedEndOfString"] = 258] = "UnexpectedEndOfString";
    ErrorCode2[ErrorCode2["UnexpectedEndOfNumber"] = 259] = "UnexpectedEndOfNumber";
    ErrorCode2[ErrorCode2["InvalidUnicode"] = 260] = "InvalidUnicode";
    ErrorCode2[ErrorCode2["InvalidEscapeCharacter"] = 261] = "InvalidEscapeCharacter";
    ErrorCode2[ErrorCode2["InvalidCharacter"] = 262] = "InvalidCharacter";
    ErrorCode2[ErrorCode2["PropertyExpected"] = 513] = "PropertyExpected";
    ErrorCode2[ErrorCode2["CommaExpected"] = 514] = "CommaExpected";
    ErrorCode2[ErrorCode2["ColonExpected"] = 515] = "ColonExpected";
    ErrorCode2[ErrorCode2["ValueExpected"] = 516] = "ValueExpected";
    ErrorCode2[ErrorCode2["CommaOrCloseBacketExpected"] = 517] = "CommaOrCloseBacketExpected";
    ErrorCode2[ErrorCode2["CommaOrCloseBraceExpected"] = 518] = "CommaOrCloseBraceExpected";
    ErrorCode2[ErrorCode2["TrailingComma"] = 519] = "TrailingComma";
    ErrorCode2[ErrorCode2["DuplicateKey"] = 520] = "DuplicateKey";
    ErrorCode2[ErrorCode2["CommentNotPermitted"] = 521] = "CommentNotPermitted";
    ErrorCode2[ErrorCode2["SchemaResolveError"] = 768] = "SchemaResolveError";
})(ErrorCode || (ErrorCode = {}));
var ClientCapabilities;
(function(ClientCapabilities2) {
    ClientCapabilities2.LATEST = {
        textDocument: {
            completion: {
                completionItem: {
                    documentationFormat: [
                        MarkupKind.Markdown,
                        MarkupKind.PlainText
                    ],
                    commitCharactersSupport: true
                }
            }
        }
    };
})(ClientCapabilities || (ClientCapabilities = {}));
// src/fillers/vscode-nls.js
function format2(message, args) {
    return args.length === 0 ? message : message.replace(/{(\d+)}/g, (match, rest)=>{
        const [index] = rest;
        return typeof args[index] === "undefined" ? match : args[index];
    });
}
function localize(key, message, ...args) {
    return format2(message, args);
}
function loadMessageBundle() {
    return localize;
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/parser/jsonParser.js
var __extends = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
        } || function(d2, b2) {
            for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var localize2 = loadMessageBundle();
var formats = {
    "color-hex": {
        errorMessage: localize2("colorHexFormatWarning", "Invalid color format. Use #RGB, #RGBA, #RRGGBB or #RRGGBBAA."),
        pattern: /^#([0-9A-Fa-f]{3,4}|([0-9A-Fa-f]{2}){3,4})$/
    },
    "date-time": {
        errorMessage: localize2("dateTimeFormatWarning", "String is not a RFC3339 date-time."),
        pattern: /^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i
    },
    "date": {
        errorMessage: localize2("dateFormatWarning", "String is not a RFC3339 date."),
        pattern: /^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/i
    },
    "time": {
        errorMessage: localize2("timeFormatWarning", "String is not a RFC3339 time."),
        pattern: /^([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i
    },
    "email": {
        errorMessage: localize2("emailFormatWarning", "String is not an e-mail address."),
        pattern: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
    }
};
var ASTNodeImpl = /** @class */ function() {
    function ASTNodeImpl3(parent, offset, length) {
        if (length === void 0) {
            length = 0;
        }
        this.offset = offset;
        this.length = length;
        this.parent = parent;
    }
    Object.defineProperty(ASTNodeImpl3.prototype, "children", {
        get: function() {
            return [];
        },
        enumerable: false,
        configurable: true
    });
    ASTNodeImpl3.prototype.toString = function() {
        return "type: " + this.type + " (" + this.offset + "/" + this.length + ")" + (this.parent ? " parent: {" + this.parent.toString() + "}" : "");
    };
    return ASTNodeImpl3;
}();
var NullASTNodeImpl = /** @class */ function(_super) {
    __extends(NullASTNodeImpl3, _super);
    function NullASTNodeImpl3(parent, offset) {
        var _this = _super.call(this, parent, offset) || this;
        _this.type = "null";
        _this.value = null;
        return _this;
    }
    return NullASTNodeImpl3;
}(ASTNodeImpl);
var BooleanASTNodeImpl = /** @class */ function(_super) {
    __extends(BooleanASTNodeImpl3, _super);
    function BooleanASTNodeImpl3(parent, boolValue, offset) {
        var _this = _super.call(this, parent, offset) || this;
        _this.type = "boolean";
        _this.value = boolValue;
        return _this;
    }
    return BooleanASTNodeImpl3;
}(ASTNodeImpl);
var ArrayASTNodeImpl = /** @class */ function(_super) {
    __extends(ArrayASTNodeImpl3, _super);
    function ArrayASTNodeImpl3(parent, offset) {
        var _this = _super.call(this, parent, offset) || this;
        _this.type = "array";
        _this.items = [];
        return _this;
    }
    Object.defineProperty(ArrayASTNodeImpl3.prototype, "children", {
        get: function() {
            return this.items;
        },
        enumerable: false,
        configurable: true
    });
    return ArrayASTNodeImpl3;
}(ASTNodeImpl);
var NumberASTNodeImpl = /** @class */ function(_super) {
    __extends(NumberASTNodeImpl3, _super);
    function NumberASTNodeImpl3(parent, offset) {
        var _this = _super.call(this, parent, offset) || this;
        _this.type = "number";
        _this.isInteger = true;
        _this.value = Number.NaN;
        return _this;
    }
    return NumberASTNodeImpl3;
}(ASTNodeImpl);
var StringASTNodeImpl = /** @class */ function(_super) {
    __extends(StringASTNodeImpl3, _super);
    function StringASTNodeImpl3(parent, offset, length) {
        var _this = _super.call(this, parent, offset, length) || this;
        _this.type = "string";
        _this.value = "";
        return _this;
    }
    return StringASTNodeImpl3;
}(ASTNodeImpl);
var PropertyASTNodeImpl = /** @class */ function(_super) {
    __extends(PropertyASTNodeImpl3, _super);
    function PropertyASTNodeImpl3(parent, offset, keyNode) {
        var _this = _super.call(this, parent, offset) || this;
        _this.type = "property";
        _this.colonOffset = -1;
        _this.keyNode = keyNode;
        return _this;
    }
    Object.defineProperty(PropertyASTNodeImpl3.prototype, "children", {
        get: function() {
            return this.valueNode ? [
                this.keyNode,
                this.valueNode
            ] : [
                this.keyNode
            ];
        },
        enumerable: false,
        configurable: true
    });
    return PropertyASTNodeImpl3;
}(ASTNodeImpl);
var ObjectASTNodeImpl = /** @class */ function(_super) {
    __extends(ObjectASTNodeImpl3, _super);
    function ObjectASTNodeImpl3(parent, offset) {
        var _this = _super.call(this, parent, offset) || this;
        _this.type = "object";
        _this.properties = [];
        return _this;
    }
    Object.defineProperty(ObjectASTNodeImpl3.prototype, "children", {
        get: function() {
            return this.properties;
        },
        enumerable: false,
        configurable: true
    });
    return ObjectASTNodeImpl3;
}(ASTNodeImpl);
function asSchema(schema4) {
    if (isBoolean(schema4)) {
        return schema4 ? {} : {
            "not": {}
        };
    }
    return schema4;
}
var EnumMatch;
(function(EnumMatch3) {
    EnumMatch3[EnumMatch3["Key"] = 0] = "Key";
    EnumMatch3[EnumMatch3["Enum"] = 1] = "Enum";
})(EnumMatch || (EnumMatch = {}));
var SchemaCollector = /** @class */ function() {
    function SchemaCollector3(focusOffset, exclude) {
        if (focusOffset === void 0) {
            focusOffset = -1;
        }
        this.focusOffset = focusOffset;
        this.exclude = exclude;
        this.schemas = [];
    }
    SchemaCollector3.prototype.add = function(schema4) {
        this.schemas.push(schema4);
    };
    SchemaCollector3.prototype.merge = function(other) {
        Array.prototype.push.apply(this.schemas, other.schemas);
    };
    SchemaCollector3.prototype.include = function(node) {
        return (this.focusOffset === -1 || contains2(node, this.focusOffset)) && node !== this.exclude;
    };
    SchemaCollector3.prototype.newSub = function() {
        return new SchemaCollector3(-1, this.exclude);
    };
    return SchemaCollector3;
}();
var NoOpSchemaCollector = /** @class */ function() {
    function NoOpSchemaCollector3() {}
    Object.defineProperty(NoOpSchemaCollector3.prototype, "schemas", {
        get: function() {
            return [];
        },
        enumerable: false,
        configurable: true
    });
    NoOpSchemaCollector3.prototype.add = function(schema4) {};
    NoOpSchemaCollector3.prototype.merge = function(other) {};
    NoOpSchemaCollector3.prototype.include = function(node) {
        return true;
    };
    NoOpSchemaCollector3.prototype.newSub = function() {
        return this;
    };
    NoOpSchemaCollector3.instance = new NoOpSchemaCollector3();
    return NoOpSchemaCollector3;
}();
var ValidationResult = /** @class */ function() {
    function ValidationResult3() {
        this.problems = [];
        this.propertiesMatches = 0;
        this.propertiesValueMatches = 0;
        this.primaryValueMatches = 0;
        this.enumValueMatch = false;
        this.enumValues = void 0;
    }
    ValidationResult3.prototype.hasProblems = function() {
        return !!this.problems.length;
    };
    ValidationResult3.prototype.mergeAll = function(validationResults) {
        for(var _i = 0, validationResults_1 = validationResults; _i < validationResults_1.length; _i++){
            var validationResult = validationResults_1[_i];
            this.merge(validationResult);
        }
    };
    ValidationResult3.prototype.merge = function(validationResult) {
        this.problems = this.problems.concat(validationResult.problems);
    };
    ValidationResult3.prototype.mergeEnumValues = function(validationResult) {
        if (!this.enumValueMatch && !validationResult.enumValueMatch && this.enumValues && validationResult.enumValues) {
            this.enumValues = this.enumValues.concat(validationResult.enumValues);
            for(var _i = 0, _a = this.problems; _i < _a.length; _i++){
                var error = _a[_i];
                if (error.code === ErrorCode.EnumValueMismatch) {
                    error.message = localize2("enumWarning", "Value is not accepted. Valid values: {0}.", this.enumValues.map(function(v) {
                        return JSON.stringify(v);
                    }).join(", "));
                }
            }
        }
    };
    ValidationResult3.prototype.mergePropertyMatch = function(propertyValidationResult) {
        this.merge(propertyValidationResult);
        this.propertiesMatches++;
        if (propertyValidationResult.enumValueMatch || !propertyValidationResult.hasProblems() && propertyValidationResult.propertiesMatches) {
            this.propertiesValueMatches++;
        }
        if (propertyValidationResult.enumValueMatch && propertyValidationResult.enumValues && propertyValidationResult.enumValues.length === 1) {
            this.primaryValueMatches++;
        }
    };
    ValidationResult3.prototype.compare = function(other) {
        var hasProblems = this.hasProblems();
        if (hasProblems !== other.hasProblems()) {
            return hasProblems ? -1 : 1;
        }
        if (this.enumValueMatch !== other.enumValueMatch) {
            return other.enumValueMatch ? -1 : 1;
        }
        if (this.primaryValueMatches !== other.primaryValueMatches) {
            return this.primaryValueMatches - other.primaryValueMatches;
        }
        if (this.propertiesValueMatches !== other.propertiesValueMatches) {
            return this.propertiesValueMatches - other.propertiesValueMatches;
        }
        return this.propertiesMatches - other.propertiesMatches;
    };
    return ValidationResult3;
}();
function getNodeValue3(node) {
    return getNodeValue2(node);
}
function getNodePath3(node) {
    return getNodePath2(node);
}
function contains2(node, offset, includeRightBound) {
    if (includeRightBound === void 0) {
        includeRightBound = false;
    }
    return offset >= node.offset && offset < node.offset + node.length || includeRightBound && offset === node.offset + node.length;
}
var JSONDocument = /** @class */ function() {
    function JSONDocument3(root, syntaxErrors, comments) {
        if (syntaxErrors === void 0) {
            syntaxErrors = [];
        }
        if (comments === void 0) {
            comments = [];
        }
        this.root = root;
        this.syntaxErrors = syntaxErrors;
        this.comments = comments;
    }
    JSONDocument3.prototype.getNodeFromOffset = function(offset, includeRightBound) {
        if (includeRightBound === void 0) {
            includeRightBound = false;
        }
        if (this.root) {
            return findNodeAtOffset2(this.root, offset, includeRightBound);
        }
        return void 0;
    };
    JSONDocument3.prototype.visit = function(visitor) {
        if (this.root) {
            var doVisit_1 = function(node) {
                var ctn = visitor(node);
                var children = node.children;
                if (Array.isArray(children)) {
                    for(var i = 0; i < children.length && ctn; i++){
                        ctn = doVisit_1(children[i]);
                    }
                }
                return ctn;
            };
            doVisit_1(this.root);
        }
    };
    JSONDocument3.prototype.validate = function(textDocument, schema4, severity) {
        if (severity === void 0) {
            severity = DiagnosticSeverity.Warning;
        }
        if (this.root && schema4) {
            var validationResult = new ValidationResult();
            validate(this.root, schema4, validationResult, NoOpSchemaCollector.instance);
            return validationResult.problems.map(function(p) {
                var _a;
                var range = Range.create(textDocument.positionAt(p.location.offset), textDocument.positionAt(p.location.offset + p.location.length));
                return Diagnostic.create(range, p.message, (_a = p.severity) !== null && _a !== void 0 ? _a : severity, p.code);
            });
        }
        return void 0;
    };
    JSONDocument3.prototype.getMatchingSchemas = function(schema4, focusOffset, exclude) {
        if (focusOffset === void 0) {
            focusOffset = -1;
        }
        var matchingSchemas = new SchemaCollector(focusOffset, exclude);
        if (this.root && schema4) {
            validate(this.root, schema4, new ValidationResult(), matchingSchemas);
        }
        return matchingSchemas.schemas;
    };
    return JSONDocument3;
}();
function validate(n, schema4, validationResult, matchingSchemas) {
    if (!n || !matchingSchemas.include(n)) {
        return;
    }
    var node = n;
    switch(node.type){
        case "object":
            _validateObjectNode(node, schema4, validationResult, matchingSchemas);
            break;
        case "array":
            _validateArrayNode(node, schema4, validationResult, matchingSchemas);
            break;
        case "string":
            _validateStringNode(node, schema4, validationResult, matchingSchemas);
            break;
        case "number":
            _validateNumberNode(node, schema4, validationResult, matchingSchemas);
            break;
        case "property":
            return validate(node.valueNode, schema4, validationResult, matchingSchemas);
    }
    _validateNode();
    matchingSchemas.add({
        node,
        schema: schema4
    });
    function _validateNode() {
        function matchesType(type) {
            return node.type === type || type === "integer" && node.type === "number" && node.isInteger;
        }
        if (Array.isArray(schema4.type)) {
            if (!schema4.type.some(matchesType)) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    message: schema4.errorMessage || localize2("typeArrayMismatchWarning", "Incorrect type. Expected one of {0}.", schema4.type.join(", "))
                });
            }
        } else if (schema4.type) {
            if (!matchesType(schema4.type)) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    message: schema4.errorMessage || localize2("typeMismatchWarning", 'Incorrect type. Expected "{0}".', schema4.type)
                });
            }
        }
        if (Array.isArray(schema4.allOf)) {
            for(var _i = 0, _a = schema4.allOf; _i < _a.length; _i++){
                var subSchemaRef = _a[_i];
                validate(node, asSchema(subSchemaRef), validationResult, matchingSchemas);
            }
        }
        var notSchema = asSchema(schema4.not);
        if (notSchema) {
            var subValidationResult = new ValidationResult();
            var subMatchingSchemas = matchingSchemas.newSub();
            validate(node, notSchema, subValidationResult, subMatchingSchemas);
            if (!subValidationResult.hasProblems()) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    message: localize2("notSchemaWarning", "Matches a schema that is not allowed.")
                });
            }
            for(var _b = 0, _c = subMatchingSchemas.schemas; _b < _c.length; _b++){
                var ms = _c[_b];
                ms.inverted = !ms.inverted;
                matchingSchemas.add(ms);
            }
        }
        var testAlternatives = function(alternatives, maxOneMatch) {
            var matches = [];
            var bestMatch = void 0;
            for(var _i2 = 0, alternatives_1 = alternatives; _i2 < alternatives_1.length; _i2++){
                var subSchemaRef2 = alternatives_1[_i2];
                var subSchema = asSchema(subSchemaRef2);
                var subValidationResult2 = new ValidationResult();
                var subMatchingSchemas2 = matchingSchemas.newSub();
                validate(node, subSchema, subValidationResult2, subMatchingSchemas2);
                if (!subValidationResult2.hasProblems()) {
                    matches.push(subSchema);
                }
                if (!bestMatch) {
                    bestMatch = {
                        schema: subSchema,
                        validationResult: subValidationResult2,
                        matchingSchemas: subMatchingSchemas2
                    };
                } else {
                    if (!maxOneMatch && !subValidationResult2.hasProblems() && !bestMatch.validationResult.hasProblems()) {
                        bestMatch.matchingSchemas.merge(subMatchingSchemas2);
                        bestMatch.validationResult.propertiesMatches += subValidationResult2.propertiesMatches;
                        bestMatch.validationResult.propertiesValueMatches += subValidationResult2.propertiesValueMatches;
                    } else {
                        var compareResult = subValidationResult2.compare(bestMatch.validationResult);
                        if (compareResult > 0) {
                            bestMatch = {
                                schema: subSchema,
                                validationResult: subValidationResult2,
                                matchingSchemas: subMatchingSchemas2
                            };
                        } else if (compareResult === 0) {
                            bestMatch.matchingSchemas.merge(subMatchingSchemas2);
                            bestMatch.validationResult.mergeEnumValues(subValidationResult2);
                        }
                    }
                }
            }
            if (matches.length > 1 && maxOneMatch) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: 1
                    },
                    message: localize2("oneOfWarning", "Matches multiple schemas when only one must validate.")
                });
            }
            if (bestMatch) {
                validationResult.merge(bestMatch.validationResult);
                validationResult.propertiesMatches += bestMatch.validationResult.propertiesMatches;
                validationResult.propertiesValueMatches += bestMatch.validationResult.propertiesValueMatches;
                matchingSchemas.merge(bestMatch.matchingSchemas);
            }
            return matches.length;
        };
        if (Array.isArray(schema4.anyOf)) {
            testAlternatives(schema4.anyOf, false);
        }
        if (Array.isArray(schema4.oneOf)) {
            testAlternatives(schema4.oneOf, true);
        }
        var testBranch = function(schema5) {
            var subValidationResult2 = new ValidationResult();
            var subMatchingSchemas2 = matchingSchemas.newSub();
            validate(node, asSchema(schema5), subValidationResult2, subMatchingSchemas2);
            validationResult.merge(subValidationResult2);
            validationResult.propertiesMatches += subValidationResult2.propertiesMatches;
            validationResult.propertiesValueMatches += subValidationResult2.propertiesValueMatches;
            matchingSchemas.merge(subMatchingSchemas2);
        };
        var testCondition = function(ifSchema2, thenSchema, elseSchema) {
            var subSchema = asSchema(ifSchema2);
            var subValidationResult2 = new ValidationResult();
            var subMatchingSchemas2 = matchingSchemas.newSub();
            validate(node, subSchema, subValidationResult2, subMatchingSchemas2);
            matchingSchemas.merge(subMatchingSchemas2);
            if (!subValidationResult2.hasProblems()) {
                if (thenSchema) {
                    testBranch(thenSchema);
                }
            } else if (elseSchema) {
                testBranch(elseSchema);
            }
        };
        var ifSchema = asSchema(schema4.if);
        if (ifSchema) {
            testCondition(ifSchema, asSchema(schema4.then), asSchema(schema4.else));
        }
        if (Array.isArray(schema4.enum)) {
            var val = getNodeValue3(node);
            var enumValueMatch = false;
            for(var _d = 0, _e = schema4.enum; _d < _e.length; _d++){
                var e = _e[_d];
                if (equals(val, e)) {
                    enumValueMatch = true;
                    break;
                }
            }
            validationResult.enumValues = schema4.enum;
            validationResult.enumValueMatch = enumValueMatch;
            if (!enumValueMatch) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    code: ErrorCode.EnumValueMismatch,
                    message: schema4.errorMessage || localize2("enumWarning", "Value is not accepted. Valid values: {0}.", schema4.enum.map(function(v) {
                        return JSON.stringify(v);
                    }).join(", "))
                });
            }
        }
        if (isDefined(schema4.const)) {
            var val = getNodeValue3(node);
            if (!equals(val, schema4.const)) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    code: ErrorCode.EnumValueMismatch,
                    message: schema4.errorMessage || localize2("constWarning", "Value must be {0}.", JSON.stringify(schema4.const))
                });
                validationResult.enumValueMatch = false;
            } else {
                validationResult.enumValueMatch = true;
            }
            validationResult.enumValues = [
                schema4.const
            ];
        }
        if (schema4.deprecationMessage && node.parent) {
            validationResult.problems.push({
                location: {
                    offset: node.parent.offset,
                    length: node.parent.length
                },
                severity: DiagnosticSeverity.Warning,
                message: schema4.deprecationMessage,
                code: ErrorCode.Deprecated
            });
        }
    }
    function _validateNumberNode(node2, schema5, validationResult2, matchingSchemas2) {
        var val = node2.value;
        function normalizeFloats(float3) {
            var _a;
            var parts = /^(-?\d+)(?:\.(\d+))?(?:e([-+]\d+))?$/.exec(float3.toString());
            return parts && {
                value: Number(parts[1] + (parts[2] || "")),
                multiplier: (((_a = parts[2]) === null || _a === void 0 ? void 0 : _a.length) || 0) - (parseInt(parts[3]) || 0)
            };
        }
        ;
        if (isNumber(schema5.multipleOf)) {
            var remainder = -1;
            if (Number.isInteger(schema5.multipleOf)) {
                remainder = val % schema5.multipleOf;
            } else {
                var normMultipleOf = normalizeFloats(schema5.multipleOf);
                var normValue = normalizeFloats(val);
                if (normMultipleOf && normValue) {
                    var multiplier = Math.pow(10, Math.abs(normValue.multiplier - normMultipleOf.multiplier));
                    if (normValue.multiplier < normMultipleOf.multiplier) {
                        normValue.value *= multiplier;
                    } else {
                        normMultipleOf.value *= multiplier;
                    }
                    remainder = normValue.value % normMultipleOf.value;
                }
            }
            if (remainder !== 0) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    message: localize2("multipleOfWarning", "Value is not divisible by {0}.", schema5.multipleOf)
                });
            }
        }
        function getExclusiveLimit(limit, exclusive) {
            if (isNumber(exclusive)) {
                return exclusive;
            }
            if (isBoolean(exclusive) && exclusive) {
                return limit;
            }
            return void 0;
        }
        function getLimit(limit, exclusive) {
            if (!isBoolean(exclusive) || !exclusive) {
                return limit;
            }
            return void 0;
        }
        var exclusiveMinimum = getExclusiveLimit(schema5.minimum, schema5.exclusiveMinimum);
        if (isNumber(exclusiveMinimum) && val <= exclusiveMinimum) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                message: localize2("exclusiveMinimumWarning", "Value is below the exclusive minimum of {0}.", exclusiveMinimum)
            });
        }
        var exclusiveMaximum = getExclusiveLimit(schema5.maximum, schema5.exclusiveMaximum);
        if (isNumber(exclusiveMaximum) && val >= exclusiveMaximum) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                message: localize2("exclusiveMaximumWarning", "Value is above the exclusive maximum of {0}.", exclusiveMaximum)
            });
        }
        var minimum = getLimit(schema5.minimum, schema5.exclusiveMinimum);
        if (isNumber(minimum) && val < minimum) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                message: localize2("minimumWarning", "Value is below the minimum of {0}.", minimum)
            });
        }
        var maximum = getLimit(schema5.maximum, schema5.exclusiveMaximum);
        if (isNumber(maximum) && val > maximum) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                message: localize2("maximumWarning", "Value is above the maximum of {0}.", maximum)
            });
        }
    }
    function _validateStringNode(node2, schema5, validationResult2, matchingSchemas2) {
        if (isNumber(schema5.minLength) && node2.value.length < schema5.minLength) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                message: localize2("minLengthWarning", "String is shorter than the minimum length of {0}.", schema5.minLength)
            });
        }
        if (isNumber(schema5.maxLength) && node2.value.length > schema5.maxLength) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                message: localize2("maxLengthWarning", "String is longer than the maximum length of {0}.", schema5.maxLength)
            });
        }
        if (isString(schema5.pattern)) {
            var regex = extendedRegExp(schema5.pattern);
            if (!regex.test(node2.value)) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    message: schema5.patternErrorMessage || schema5.errorMessage || localize2("patternWarning", 'String does not match the pattern of "{0}".', schema5.pattern)
                });
            }
        }
        if (schema5.format) {
            switch(schema5.format){
                case "uri":
                case "uri-reference":
                    {
                        var errorMessage = void 0;
                        if (!node2.value) {
                            errorMessage = localize2("uriEmpty", "URI expected.");
                        } else {
                            var match = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/.exec(node2.value);
                            if (!match) {
                                errorMessage = localize2("uriMissing", "URI is expected.");
                            } else if (!match[2] && schema5.format === "uri") {
                                errorMessage = localize2("uriSchemeMissing", "URI with a scheme is expected.");
                            }
                        }
                        if (errorMessage) {
                            validationResult2.problems.push({
                                location: {
                                    offset: node2.offset,
                                    length: node2.length
                                },
                                message: schema5.patternErrorMessage || schema5.errorMessage || localize2("uriFormatWarning", "String is not a URI: {0}", errorMessage)
                            });
                        }
                    }
                    break;
                case "color-hex":
                case "date-time":
                case "date":
                case "time":
                case "email":
                    var format5 = formats[schema5.format];
                    if (!node2.value || !format5.pattern.exec(node2.value)) {
                        validationResult2.problems.push({
                            location: {
                                offset: node2.offset,
                                length: node2.length
                            },
                            message: schema5.patternErrorMessage || schema5.errorMessage || format5.errorMessage
                        });
                    }
                default:
            }
        }
    }
    function _validateArrayNode(node2, schema5, validationResult2, matchingSchemas2) {
        if (Array.isArray(schema5.items)) {
            var subSchemas = schema5.items;
            for(var index = 0; index < subSchemas.length; index++){
                var subSchemaRef = subSchemas[index];
                var subSchema = asSchema(subSchemaRef);
                var itemValidationResult = new ValidationResult();
                var item = node2.items[index];
                if (item) {
                    validate(item, subSchema, itemValidationResult, matchingSchemas2);
                    validationResult2.mergePropertyMatch(itemValidationResult);
                } else if (node2.items.length >= subSchemas.length) {
                    validationResult2.propertiesValueMatches++;
                }
            }
            if (node2.items.length > subSchemas.length) {
                if (typeof schema5.additionalItems === "object") {
                    for(var i = subSchemas.length; i < node2.items.length; i++){
                        var itemValidationResult = new ValidationResult();
                        validate(node2.items[i], schema5.additionalItems, itemValidationResult, matchingSchemas2);
                        validationResult2.mergePropertyMatch(itemValidationResult);
                    }
                } else if (schema5.additionalItems === false) {
                    validationResult2.problems.push({
                        location: {
                            offset: node2.offset,
                            length: node2.length
                        },
                        message: localize2("additionalItemsWarning", "Array has too many items according to schema. Expected {0} or fewer.", subSchemas.length)
                    });
                }
            }
        } else {
            var itemSchema = asSchema(schema5.items);
            if (itemSchema) {
                for(var _i = 0, _a = node2.items; _i < _a.length; _i++){
                    var item = _a[_i];
                    var itemValidationResult = new ValidationResult();
                    validate(item, itemSchema, itemValidationResult, matchingSchemas2);
                    validationResult2.mergePropertyMatch(itemValidationResult);
                }
            }
        }
        var containsSchema = asSchema(schema5.contains);
        if (containsSchema) {
            var doesContain = node2.items.some(function(item2) {
                var itemValidationResult2 = new ValidationResult();
                validate(item2, containsSchema, itemValidationResult2, NoOpSchemaCollector.instance);
                return !itemValidationResult2.hasProblems();
            });
            if (!doesContain) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    message: schema5.errorMessage || localize2("requiredItemMissingWarning", "Array does not contain required item.")
                });
            }
        }
        if (isNumber(schema5.minItems) && node2.items.length < schema5.minItems) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                message: localize2("minItemsWarning", "Array has too few items. Expected {0} or more.", schema5.minItems)
            });
        }
        if (isNumber(schema5.maxItems) && node2.items.length > schema5.maxItems) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                message: localize2("maxItemsWarning", "Array has too many items. Expected {0} or fewer.", schema5.maxItems)
            });
        }
        if (schema5.uniqueItems === true) {
            var values_1 = getNodeValue3(node2);
            var duplicates = values_1.some(function(value1, index2) {
                return index2 !== values_1.lastIndexOf(value1);
            });
            if (duplicates) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    message: localize2("uniqueItemsWarning", "Array has duplicate items.")
                });
            }
        }
    }
    function _validateObjectNode(node2, schema5, validationResult2, matchingSchemas2) {
        var seenKeys = /* @__PURE__ */ Object.create(null);
        var unprocessedProperties = [];
        for(var _i = 0, _a = node2.properties; _i < _a.length; _i++){
            var propertyNode = _a[_i];
            var key = propertyNode.keyNode.value;
            seenKeys[key] = propertyNode.valueNode;
            unprocessedProperties.push(key);
        }
        if (Array.isArray(schema5.required)) {
            for(var _b = 0, _c = schema5.required; _b < _c.length; _b++){
                var propertyName = _c[_b];
                if (!seenKeys[propertyName]) {
                    var keyNode = node2.parent && node2.parent.type === "property" && node2.parent.keyNode;
                    var location = keyNode ? {
                        offset: keyNode.offset,
                        length: keyNode.length
                    } : {
                        offset: node2.offset,
                        length: 1
                    };
                    validationResult2.problems.push({
                        location,
                        message: localize2("MissingRequiredPropWarning", 'Missing property "{0}".', propertyName)
                    });
                }
            }
        }
        var propertyProcessed = function(prop2) {
            var index = unprocessedProperties.indexOf(prop2);
            while(index >= 0){
                unprocessedProperties.splice(index, 1);
                index = unprocessedProperties.indexOf(prop2);
            }
        };
        if (schema5.properties) {
            for(var _d = 0, _e = Object.keys(schema5.properties); _d < _e.length; _d++){
                var propertyName = _e[_d];
                propertyProcessed(propertyName);
                var propertySchema = schema5.properties[propertyName];
                var child = seenKeys[propertyName];
                if (child) {
                    if (isBoolean(propertySchema)) {
                        if (!propertySchema) {
                            var propertyNode = child.parent;
                            validationResult2.problems.push({
                                location: {
                                    offset: propertyNode.keyNode.offset,
                                    length: propertyNode.keyNode.length
                                },
                                message: schema5.errorMessage || localize2("DisallowedExtraPropWarning", "Property {0} is not allowed.", propertyName)
                            });
                        } else {
                            validationResult2.propertiesMatches++;
                            validationResult2.propertiesValueMatches++;
                        }
                    } else {
                        var propertyValidationResult = new ValidationResult();
                        validate(child, propertySchema, propertyValidationResult, matchingSchemas2);
                        validationResult2.mergePropertyMatch(propertyValidationResult);
                    }
                }
            }
        }
        if (schema5.patternProperties) {
            for(var _f = 0, _g = Object.keys(schema5.patternProperties); _f < _g.length; _f++){
                var propertyPattern = _g[_f];
                var regex = extendedRegExp(propertyPattern);
                for(var _h = 0, _j = unprocessedProperties.slice(0); _h < _j.length; _h++){
                    var propertyName = _j[_h];
                    if (regex.test(propertyName)) {
                        propertyProcessed(propertyName);
                        var child = seenKeys[propertyName];
                        if (child) {
                            var propertySchema = schema5.patternProperties[propertyPattern];
                            if (isBoolean(propertySchema)) {
                                if (!propertySchema) {
                                    var propertyNode = child.parent;
                                    validationResult2.problems.push({
                                        location: {
                                            offset: propertyNode.keyNode.offset,
                                            length: propertyNode.keyNode.length
                                        },
                                        message: schema5.errorMessage || localize2("DisallowedExtraPropWarning", "Property {0} is not allowed.", propertyName)
                                    });
                                } else {
                                    validationResult2.propertiesMatches++;
                                    validationResult2.propertiesValueMatches++;
                                }
                            } else {
                                var propertyValidationResult = new ValidationResult();
                                validate(child, propertySchema, propertyValidationResult, matchingSchemas2);
                                validationResult2.mergePropertyMatch(propertyValidationResult);
                            }
                        }
                    }
                }
            }
        }
        if (typeof schema5.additionalProperties === "object") {
            for(var _k = 0, unprocessedProperties_1 = unprocessedProperties; _k < unprocessedProperties_1.length; _k++){
                var propertyName = unprocessedProperties_1[_k];
                var child = seenKeys[propertyName];
                if (child) {
                    var propertyValidationResult = new ValidationResult();
                    validate(child, schema5.additionalProperties, propertyValidationResult, matchingSchemas2);
                    validationResult2.mergePropertyMatch(propertyValidationResult);
                }
            }
        } else if (schema5.additionalProperties === false) {
            if (unprocessedProperties.length > 0) {
                for(var _l = 0, unprocessedProperties_2 = unprocessedProperties; _l < unprocessedProperties_2.length; _l++){
                    var propertyName = unprocessedProperties_2[_l];
                    var child = seenKeys[propertyName];
                    if (child) {
                        var propertyNode = child.parent;
                        validationResult2.problems.push({
                            location: {
                                offset: propertyNode.keyNode.offset,
                                length: propertyNode.keyNode.length
                            },
                            message: schema5.errorMessage || localize2("DisallowedExtraPropWarning", "Property {0} is not allowed.", propertyName)
                        });
                    }
                }
            }
        }
        if (isNumber(schema5.maxProperties)) {
            if (node2.properties.length > schema5.maxProperties) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    message: localize2("MaxPropWarning", "Object has more properties than limit of {0}.", schema5.maxProperties)
                });
            }
        }
        if (isNumber(schema5.minProperties)) {
            if (node2.properties.length < schema5.minProperties) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    message: localize2("MinPropWarning", "Object has fewer properties than the required number of {0}", schema5.minProperties)
                });
            }
        }
        if (schema5.dependencies) {
            for(var _m = 0, _o = Object.keys(schema5.dependencies); _m < _o.length; _m++){
                var key = _o[_m];
                var prop = seenKeys[key];
                if (prop) {
                    var propertyDep = schema5.dependencies[key];
                    if (Array.isArray(propertyDep)) {
                        for(var _p = 0, propertyDep_1 = propertyDep; _p < propertyDep_1.length; _p++){
                            var requiredProp = propertyDep_1[_p];
                            if (!seenKeys[requiredProp]) {
                                validationResult2.problems.push({
                                    location: {
                                        offset: node2.offset,
                                        length: node2.length
                                    },
                                    message: localize2("RequiredDependentPropWarning", "Object is missing property {0} required by property {1}.", requiredProp, key)
                                });
                            } else {
                                validationResult2.propertiesValueMatches++;
                            }
                        }
                    } else {
                        var propertySchema = asSchema(propertyDep);
                        if (propertySchema) {
                            var propertyValidationResult = new ValidationResult();
                            validate(node2, propertySchema, propertyValidationResult, matchingSchemas2);
                            validationResult2.mergePropertyMatch(propertyValidationResult);
                        }
                    }
                }
            }
        }
        var propertyNames = asSchema(schema5.propertyNames);
        if (propertyNames) {
            for(var _q = 0, _r = node2.properties; _q < _r.length; _q++){
                var f2 = _r[_q];
                var key = f2.keyNode;
                if (key) {
                    validate(key, propertyNames, validationResult2, NoOpSchemaCollector.instance);
                }
            }
        }
    }
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/utils/glob.js
function createRegex(glob, opts) {
    if (typeof glob !== "string") {
        throw new TypeError("Expected a string");
    }
    var str = String(glob);
    var reStr = "";
    var extended = opts ? !!opts.extended : false;
    var globstar = opts ? !!opts.globstar : false;
    var inGroup = false;
    var flags = opts && typeof opts.flags === "string" ? opts.flags : "";
    var c;
    for(var i = 0, len = str.length; i < len; i++){
        c = str[i];
        switch(c){
            case "/":
            case "$":
            case "^":
            case "+":
            case ".":
            case "(":
            case ")":
            case "=":
            case "!":
            case "|":
                reStr += "\\" + c;
                break;
            case "?":
                if (extended) {
                    reStr += ".";
                    break;
                }
            case "[":
            case "]":
                if (extended) {
                    reStr += c;
                    break;
                }
            case "{":
                if (extended) {
                    inGroup = true;
                    reStr += "(";
                    break;
                }
            case "}":
                if (extended) {
                    inGroup = false;
                    reStr += ")";
                    break;
                }
            case ",":
                if (inGroup) {
                    reStr += "|";
                    break;
                }
                reStr += "\\" + c;
                break;
            case "*":
                var prevChar = str[i - 1];
                var starCount = 1;
                while(str[i + 1] === "*"){
                    starCount++;
                    i++;
                }
                var nextChar = str[i + 1];
                if (!globstar) {
                    reStr += ".*";
                } else {
                    var isGlobstar = starCount > 1 && (prevChar === "/" || prevChar === void 0 || prevChar === "{" || prevChar === ",") && (nextChar === "/" || nextChar === void 0 || nextChar === "," || nextChar === "}");
                    if (isGlobstar) {
                        if (nextChar === "/") {
                            i++;
                        } else if (prevChar === "/" && reStr.endsWith("\\/")) {
                            reStr = reStr.substr(0, reStr.length - 2);
                        }
                        reStr += "((?:[^/]*(?:/|$))*)";
                    } else {
                        reStr += "([^/]*)";
                    }
                }
                break;
            default:
                reStr += c;
        }
    }
    if (!flags || !~flags.indexOf("g")) {
        reStr = "^" + reStr + "$";
    }
    return new RegExp(reStr, flags);
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonSchemaService.js
var localize3 = loadMessageBundle();
var BANG = "!";
var PATH_SEP = "/";
var FilePatternAssociation = /** @class */ function() {
    function FilePatternAssociation3(pattern, uris) {
        this.globWrappers = [];
        try {
            for(var _i = 0, pattern_1 = pattern; _i < pattern_1.length; _i++){
                var patternString = pattern_1[_i];
                var include = patternString[0] !== BANG;
                if (!include) {
                    patternString = patternString.substring(1);
                }
                if (patternString.length > 0) {
                    if (patternString[0] === PATH_SEP) {
                        patternString = patternString.substring(1);
                    }
                    this.globWrappers.push({
                        regexp: createRegex("**/" + patternString, {
                            extended: true,
                            globstar: true
                        }),
                        include
                    });
                }
            }
            ;
            this.uris = uris;
        } catch (e) {
            this.globWrappers.length = 0;
            this.uris = [];
        }
    }
    FilePatternAssociation3.prototype.matchesPattern = function(fileName) {
        var match = false;
        for(var _i = 0, _a = this.globWrappers; _i < _a.length; _i++){
            var _b = _a[_i], regexp = _b.regexp, include = _b.include;
            if (regexp.test(fileName)) {
                match = include;
            }
        }
        return match;
    };
    FilePatternAssociation3.prototype.getURIs = function() {
        return this.uris;
    };
    return FilePatternAssociation3;
}();
var SchemaHandle = /** @class */ function() {
    function SchemaHandle2(service, url, unresolvedSchemaContent) {
        this.service = service;
        this.url = url;
        this.dependencies = {};
        if (unresolvedSchemaContent) {
            this.unresolvedSchema = this.service.promise.resolve(new UnresolvedSchema(unresolvedSchemaContent));
        }
    }
    SchemaHandle2.prototype.getUnresolvedSchema = function() {
        if (!this.unresolvedSchema) {
            this.unresolvedSchema = this.service.loadSchema(this.url);
        }
        return this.unresolvedSchema;
    };
    SchemaHandle2.prototype.getResolvedSchema = function() {
        var _this = this;
        if (!this.resolvedSchema) {
            this.resolvedSchema = this.getUnresolvedSchema().then(function(unresolved) {
                return _this.service.resolveSchemaContent(unresolved, _this.url, _this.dependencies);
            });
        }
        return this.resolvedSchema;
    };
    SchemaHandle2.prototype.clearSchema = function() {
        this.resolvedSchema = void 0;
        this.unresolvedSchema = void 0;
        this.dependencies = {};
    };
    return SchemaHandle2;
}();
var UnresolvedSchema = /** @class */ function() {
    function UnresolvedSchema2(schema4, errors) {
        if (errors === void 0) {
            errors = [];
        }
        this.schema = schema4;
        this.errors = errors;
    }
    return UnresolvedSchema2;
}();
var ResolvedSchema = /** @class */ function() {
    function ResolvedSchema2(schema4, errors) {
        if (errors === void 0) {
            errors = [];
        }
        this.schema = schema4;
        this.errors = errors;
    }
    ResolvedSchema2.prototype.getSection = function(path5) {
        var schemaRef = this.getSectionRecursive(path5, this.schema);
        if (schemaRef) {
            return asSchema(schemaRef);
        }
        return void 0;
    };
    ResolvedSchema2.prototype.getSectionRecursive = function(path5, schema4) {
        if (!schema4 || typeof schema4 === "boolean" || path5.length === 0) {
            return schema4;
        }
        var next = path5.shift();
        if (schema4.properties && typeof schema4.properties[next]) {
            return this.getSectionRecursive(path5, schema4.properties[next]);
        } else if (schema4.patternProperties) {
            for(var _i = 0, _a = Object.keys(schema4.patternProperties); _i < _a.length; _i++){
                var pattern = _a[_i];
                var regex = extendedRegExp(pattern);
                if (regex.test(next)) {
                    return this.getSectionRecursive(path5, schema4.patternProperties[pattern]);
                }
            }
        } else if (typeof schema4.additionalProperties === "object") {
            return this.getSectionRecursive(path5, schema4.additionalProperties);
        } else if (next.match("[0-9]+")) {
            if (Array.isArray(schema4.items)) {
                var index = parseInt(next, 10);
                if (!isNaN(index) && schema4.items[index]) {
                    return this.getSectionRecursive(path5, schema4.items[index]);
                }
            } else if (schema4.items) {
                return this.getSectionRecursive(path5, schema4.items);
            }
        }
        return void 0;
    };
    return ResolvedSchema2;
}();
var JSONSchemaService = /** @class */ function() {
    function JSONSchemaService2(requestService, contextService, promiseConstructor) {
        this.contextService = contextService;
        this.requestService = requestService;
        this.promiseConstructor = promiseConstructor || Promise;
        this.callOnDispose = [];
        this.contributionSchemas = {};
        this.contributionAssociations = [];
        this.schemasById = {};
        this.filePatternAssociations = [];
        this.registeredSchemasIds = {};
    }
    JSONSchemaService2.prototype.getRegisteredSchemaIds = function(filter) {
        return Object.keys(this.registeredSchemasIds).filter(function(id) {
            var scheme = URI.parse(id).scheme;
            return scheme !== "schemaservice" && (!filter || filter(scheme));
        });
    };
    Object.defineProperty(JSONSchemaService2.prototype, "promise", {
        get: function() {
            return this.promiseConstructor;
        },
        enumerable: false,
        configurable: true
    });
    JSONSchemaService2.prototype.dispose = function() {
        while(this.callOnDispose.length > 0){
            this.callOnDispose.pop()();
        }
    };
    JSONSchemaService2.prototype.onResourceChange = function(uri) {
        var _this = this;
        this.cachedSchemaForResource = void 0;
        var hasChanges = false;
        uri = normalizeId(uri);
        var toWalk = [
            uri
        ];
        var all = Object.keys(this.schemasById).map(function(key) {
            return _this.schemasById[key];
        });
        while(toWalk.length){
            var curr = toWalk.pop();
            for(var i = 0; i < all.length; i++){
                var handle = all[i];
                if (handle && (handle.url === curr || handle.dependencies[curr])) {
                    if (handle.url !== curr) {
                        toWalk.push(handle.url);
                    }
                    handle.clearSchema();
                    all[i] = void 0;
                    hasChanges = true;
                }
            }
        }
        return hasChanges;
    };
    JSONSchemaService2.prototype.setSchemaContributions = function(schemaContributions2) {
        if (schemaContributions2.schemas) {
            var schemas2 = schemaContributions2.schemas;
            for(var id in schemas2){
                var normalizedId = normalizeId(id);
                this.contributionSchemas[normalizedId] = this.addSchemaHandle(normalizedId, schemas2[id]);
            }
        }
        if (Array.isArray(schemaContributions2.schemaAssociations)) {
            var schemaAssociations = schemaContributions2.schemaAssociations;
            for(var _i = 0, schemaAssociations_1 = schemaAssociations; _i < schemaAssociations_1.length; _i++){
                var schemaAssociation = schemaAssociations_1[_i];
                var uris = schemaAssociation.uris.map(normalizeId);
                var association = this.addFilePatternAssociation(schemaAssociation.pattern, uris);
                this.contributionAssociations.push(association);
            }
        }
    };
    JSONSchemaService2.prototype.addSchemaHandle = function(id, unresolvedSchemaContent) {
        var schemaHandle = new SchemaHandle(this, id, unresolvedSchemaContent);
        this.schemasById[id] = schemaHandle;
        return schemaHandle;
    };
    JSONSchemaService2.prototype.getOrAddSchemaHandle = function(id, unresolvedSchemaContent) {
        return this.schemasById[id] || this.addSchemaHandle(id, unresolvedSchemaContent);
    };
    JSONSchemaService2.prototype.addFilePatternAssociation = function(pattern, uris) {
        var fpa = new FilePatternAssociation(pattern, uris);
        this.filePatternAssociations.push(fpa);
        return fpa;
    };
    JSONSchemaService2.prototype.registerExternalSchema = function(uri, filePatterns, unresolvedSchemaContent) {
        var id = normalizeId(uri);
        this.registeredSchemasIds[id] = true;
        this.cachedSchemaForResource = void 0;
        if (filePatterns) {
            this.addFilePatternAssociation(filePatterns, [
                uri
            ]);
        }
        return unresolvedSchemaContent ? this.addSchemaHandle(id, unresolvedSchemaContent) : this.getOrAddSchemaHandle(id);
    };
    JSONSchemaService2.prototype.clearExternalSchemas = function() {
        this.schemasById = {};
        this.filePatternAssociations = [];
        this.registeredSchemasIds = {};
        this.cachedSchemaForResource = void 0;
        for(var id in this.contributionSchemas){
            this.schemasById[id] = this.contributionSchemas[id];
            this.registeredSchemasIds[id] = true;
        }
        for(var _i = 0, _a = this.contributionAssociations; _i < _a.length; _i++){
            var contributionAssociation = _a[_i];
            this.filePatternAssociations.push(contributionAssociation);
        }
    };
    JSONSchemaService2.prototype.getResolvedSchema = function(schemaId) {
        var id = normalizeId(schemaId);
        var schemaHandle = this.schemasById[id];
        if (schemaHandle) {
            return schemaHandle.getResolvedSchema();
        }
        return this.promise.resolve(void 0);
    };
    JSONSchemaService2.prototype.loadSchema = function(url) {
        if (!this.requestService) {
            var errorMessage = localize3("json.schema.norequestservice", "Unable to load schema from '{0}'. No schema request service available", toDisplayString(url));
            return this.promise.resolve(new UnresolvedSchema({}, [
                errorMessage
            ]));
        }
        return this.requestService(url).then(function(content) {
            if (!content) {
                var errorMessage2 = localize3("json.schema.nocontent", "Unable to load schema from '{0}': No content.", toDisplayString(url));
                return new UnresolvedSchema({}, [
                    errorMessage2
                ]);
            }
            var schemaContent = {};
            var jsonErrors = [];
            schemaContent = parse2(content, jsonErrors);
            var errors = jsonErrors.length ? [
                localize3("json.schema.invalidFormat", "Unable to parse content from '{0}': Parse error at offset {1}.", toDisplayString(url), jsonErrors[0].offset)
            ] : [];
            return new UnresolvedSchema(schemaContent, errors);
        }, function(error) {
            var errorMessage2 = error.toString();
            var errorSplit = error.toString().split("Error: ");
            if (errorSplit.length > 1) {
                errorMessage2 = errorSplit[1];
            }
            if (endsWith(errorMessage2, ".")) {
                errorMessage2 = errorMessage2.substr(0, errorMessage2.length - 1);
            }
            return new UnresolvedSchema({}, [
                localize3("json.schema.nocontent", "Unable to load schema from '{0}': {1}.", toDisplayString(url), errorMessage2)
            ]);
        });
    };
    JSONSchemaService2.prototype.resolveSchemaContent = function(schemaToResolve, schemaURL, dependencies) {
        var _this = this;
        var resolveErrors = schemaToResolve.errors.slice(0);
        var schema4 = schemaToResolve.schema;
        if (schema4.$schema) {
            var id = normalizeId(schema4.$schema);
            if (id === "http://json-schema.org/draft-03/schema") {
                return this.promise.resolve(new ResolvedSchema({}, [
                    localize3("json.schema.draft03.notsupported", "Draft-03 schemas are not supported.")
                ]));
            } else if (id === "https://json-schema.org/draft/2019-09/schema") {
                resolveErrors.push(localize3("json.schema.draft201909.notsupported", "Draft 2019-09 schemas are not yet fully supported."));
            }
        }
        var contextService = this.contextService;
        var findSection = function(schema5, path5) {
            if (!path5) {
                return schema5;
            }
            var current = schema5;
            if (path5[0] === "/") {
                path5 = path5.substr(1);
            }
            path5.split("/").some(function(part) {
                part = part.replace(/~1/g, "/").replace(/~0/g, "~");
                current = current[part];
                return !current;
            });
            return current;
        };
        var merge = function(target, sourceRoot, sourceURI, refSegment) {
            var path5 = refSegment ? decodeURIComponent(refSegment) : void 0;
            var section = findSection(sourceRoot, path5);
            if (section) {
                for(var key in section){
                    if (section.hasOwnProperty(key) && !target.hasOwnProperty(key)) {
                        target[key] = section[key];
                    }
                }
            } else {
                resolveErrors.push(localize3("json.schema.invalidref", "$ref '{0}' in '{1}' can not be resolved.", path5, sourceURI));
            }
        };
        var resolveExternalLink = function(node, uri, refSegment, parentSchemaURL, parentSchemaDependencies) {
            if (contextService && !/^[A-Za-z][A-Za-z0-9+\-.+]*:\/\/.*/.test(uri)) {
                uri = contextService.resolveRelativePath(uri, parentSchemaURL);
            }
            uri = normalizeId(uri);
            var referencedHandle = _this.getOrAddSchemaHandle(uri);
            return referencedHandle.getUnresolvedSchema().then(function(unresolvedSchema) {
                parentSchemaDependencies[uri] = true;
                if (unresolvedSchema.errors.length) {
                    var loc = refSegment ? uri + "#" + refSegment : uri;
                    resolveErrors.push(localize3("json.schema.problemloadingref", "Problems loading reference '{0}': {1}", loc, unresolvedSchema.errors[0]));
                }
                merge(node, unresolvedSchema.schema, uri, refSegment);
                return resolveRefs(node, unresolvedSchema.schema, uri, referencedHandle.dependencies);
            });
        };
        var resolveRefs = function(node, parentSchema, parentSchemaURL, parentSchemaDependencies) {
            if (!node || typeof node !== "object") {
                return Promise.resolve(null);
            }
            var toWalk = [
                node
            ];
            var seen = [];
            var openPromises = [];
            var collectEntries = function() {
                var entries = [];
                for(var _i = 0; _i < arguments.length; _i++){
                    entries[_i] = arguments[_i];
                }
                for(var _a = 0, entries_1 = entries; _a < entries_1.length; _a++){
                    var entry = entries_1[_a];
                    if (typeof entry === "object") {
                        toWalk.push(entry);
                    }
                }
            };
            var collectMapEntries = function() {
                var maps = [];
                for(var _i = 0; _i < arguments.length; _i++){
                    maps[_i] = arguments[_i];
                }
                for(var _a = 0, maps_1 = maps; _a < maps_1.length; _a++){
                    var map2 = maps_1[_a];
                    if (typeof map2 === "object") {
                        for(var k in map2){
                            var key = k;
                            var entry = map2[key];
                            if (typeof entry === "object") {
                                toWalk.push(entry);
                            }
                        }
                    }
                }
            };
            var collectArrayEntries = function() {
                var arrays = [];
                for(var _i = 0; _i < arguments.length; _i++){
                    arrays[_i] = arguments[_i];
                }
                for(var _a = 0, arrays_1 = arrays; _a < arrays_1.length; _a++){
                    var array = arrays_1[_a];
                    if (Array.isArray(array)) {
                        for(var _b = 0, array_1 = array; _b < array_1.length; _b++){
                            var entry = array_1[_b];
                            if (typeof entry === "object") {
                                toWalk.push(entry);
                            }
                        }
                    }
                }
            };
            var handleRef = function(next2) {
                var seenRefs = [];
                while(next2.$ref){
                    var ref = next2.$ref;
                    var segments = ref.split("#", 2);
                    delete next2.$ref;
                    if (segments[0].length > 0) {
                        openPromises.push(resolveExternalLink(next2, segments[0], segments[1], parentSchemaURL, parentSchemaDependencies));
                        return;
                    } else {
                        if (seenRefs.indexOf(ref) === -1) {
                            merge(next2, parentSchema, parentSchemaURL, segments[1]);
                            seenRefs.push(ref);
                        }
                    }
                }
                collectEntries(next2.items, next2.additionalItems, next2.additionalProperties, next2.not, next2.contains, next2.propertyNames, next2.if, next2.then, next2.else);
                collectMapEntries(next2.definitions, next2.properties, next2.patternProperties, next2.dependencies);
                collectArrayEntries(next2.anyOf, next2.allOf, next2.oneOf, next2.items);
            };
            while(toWalk.length){
                var next = toWalk.pop();
                if (seen.indexOf(next) >= 0) {
                    continue;
                }
                seen.push(next);
                handleRef(next);
            }
            return _this.promise.all(openPromises);
        };
        return resolveRefs(schema4, schema4, schemaURL, dependencies).then(function(_) {
            return new ResolvedSchema(schema4, resolveErrors);
        });
    };
    JSONSchemaService2.prototype.getSchemaForResource = function(resource, document) {
        if (document && document.root && document.root.type === "object") {
            var schemaProperties = document.root.properties.filter(function(p) {
                return p.keyNode.value === "$schema" && p.valueNode && p.valueNode.type === "string";
            });
            if (schemaProperties.length > 0) {
                var valueNode = schemaProperties[0].valueNode;
                if (valueNode && valueNode.type === "string") {
                    var schemeId = getNodeValue3(valueNode);
                    if (schemeId && startsWith(schemeId, ".") && this.contextService) {
                        schemeId = this.contextService.resolveRelativePath(schemeId, resource);
                    }
                    if (schemeId) {
                        var id = normalizeId(schemeId);
                        return this.getOrAddSchemaHandle(id).getResolvedSchema();
                    }
                }
            }
        }
        if (this.cachedSchemaForResource && this.cachedSchemaForResource.resource === resource) {
            return this.cachedSchemaForResource.resolvedSchema;
        }
        var seen = /* @__PURE__ */ Object.create(null);
        var schemas2 = [];
        var normalizedResource = normalizeResourceForMatching(resource);
        for(var _i = 0, _a = this.filePatternAssociations; _i < _a.length; _i++){
            var entry = _a[_i];
            if (entry.matchesPattern(normalizedResource)) {
                for(var _b = 0, _c = entry.getURIs(); _b < _c.length; _b++){
                    var schemaId = _c[_b];
                    if (!seen[schemaId]) {
                        schemas2.push(schemaId);
                        seen[schemaId] = true;
                    }
                }
            }
        }
        var resolvedSchema = schemas2.length > 0 ? this.createCombinedSchema(resource, schemas2).getResolvedSchema() : this.promise.resolve(void 0);
        this.cachedSchemaForResource = {
            resource,
            resolvedSchema
        };
        return resolvedSchema;
    };
    JSONSchemaService2.prototype.createCombinedSchema = function(resource, schemaIds) {
        if (schemaIds.length === 1) {
            return this.getOrAddSchemaHandle(schemaIds[0]);
        } else {
            var combinedSchemaId = "schemaservice://combinedSchema/" + encodeURIComponent(resource);
            var combinedSchema = {
                allOf: schemaIds.map(function(schemaId) {
                    return {
                        $ref: schemaId
                    };
                })
            };
            return this.addSchemaHandle(combinedSchemaId, combinedSchema);
        }
    };
    JSONSchemaService2.prototype.getMatchingSchemas = function(document, jsonDocument, schema4) {
        if (schema4) {
            var id = schema4.id || "schemaservice://untitled/matchingSchemas/" + idCounter++;
            return this.resolveSchemaContent(new UnresolvedSchema(schema4), id, {}).then(function(resolvedSchema) {
                return jsonDocument.getMatchingSchemas(resolvedSchema.schema).filter(function(s) {
                    return !s.inverted;
                });
            });
        }
        return this.getSchemaForResource(document.uri, jsonDocument).then(function(schema5) {
            if (schema5) {
                return jsonDocument.getMatchingSchemas(schema5.schema).filter(function(s) {
                    return !s.inverted;
                });
            }
            return [];
        });
    };
    return JSONSchemaService2;
}();
var idCounter = 0;
function normalizeId(id) {
    try {
        return URI.parse(id).toString();
    } catch (e) {
        return id;
    }
}
function normalizeResourceForMatching(resource) {
    try {
        return URI.parse(resource).with({
            fragment: null,
            query: null
        }).toString();
    } catch (e) {
        return resource;
    }
}
function toDisplayString(url) {
    try {
        var uri = URI.parse(url);
        if (uri.scheme === "file") {
            return uri.fsPath;
        }
    } catch (e) {}
    return url;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/strings.js
function convertSimple2RegExpPattern(pattern) {
    return pattern.replace(/[-\\{}+?|^$.,[\]()#\s]/g, "\\$&").replace(/[*]/g, ".*");
}
function getIndentation(lineContent, position) {
    if (lineContent.length < position) {
        return 0;
    }
    for(let i = 0; i < position; i++){
        const char = lineContent.charCodeAt(i);
        if (char !== 32 && char !== 9) {
            return i;
        }
    }
    return position;
}
function safeCreateUnicodeRegExp(pattern) {
    try {
        return new RegExp(pattern, "u");
    } catch (ignore) {
        return new RegExp(pattern);
    }
}
function getFirstNonWhitespaceCharacterAfterOffset(str, offset) {
    offset++;
    for(let i = offset; i < str.length; i++){
        const char = str.charAt(i);
        if (char === " " || char === "	") {
            offset++;
        } else {
            return offset;
        }
    }
    return offset;
}
// ../../node_modules/yaml/browser/dist/nodes/Node.js
var ALIAS = Symbol.for("yaml.alias");
var DOC = Symbol.for("yaml.document");
var MAP = Symbol.for("yaml.map");
var PAIR = Symbol.for("yaml.pair");
var SCALAR = Symbol.for("yaml.scalar");
var SEQ = Symbol.for("yaml.seq");
var NODE_TYPE = Symbol.for("yaml.node.type");
var isAlias = (node)=>!!node && typeof node === "object" && node[NODE_TYPE] === ALIAS;
var isDocument = (node)=>!!node && typeof node === "object" && node[NODE_TYPE] === DOC;
var isMap = (node)=>!!node && typeof node === "object" && node[NODE_TYPE] === MAP;
var isPair = (node)=>!!node && typeof node === "object" && node[NODE_TYPE] === PAIR;
var isScalar = (node)=>!!node && typeof node === "object" && node[NODE_TYPE] === SCALAR;
var isSeq = (node)=>!!node && typeof node === "object" && node[NODE_TYPE] === SEQ;
function isCollection(node) {
    if (node && typeof node === "object") switch(node[NODE_TYPE]){
        case MAP:
        case SEQ:
            return true;
    }
    return false;
}
function isNode(node) {
    if (node && typeof node === "object") switch(node[NODE_TYPE]){
        case ALIAS:
        case MAP:
        case SCALAR:
        case SEQ:
            return true;
    }
    return false;
}
var hasAnchor = (node)=>(isScalar(node) || isCollection(node)) && !!node.anchor;
var NodeBase = class {
    /** Create a copy of this node.  */ clone() {
        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
        if (this.range) copy.range = this.range.slice();
        return copy;
    }
    constructor(type){
        Object.defineProperty(this, NODE_TYPE, {
            value: type
        });
    }
};
// ../../node_modules/yaml/browser/dist/visit.js
var BREAK = Symbol("break visit");
var SKIP = Symbol("skip children");
var REMOVE = Symbol("remove node");
function visit2(node, visitor) {
    const visitor_ = initVisitor(visitor);
    if (isDocument(node)) {
        const cd = visit_(null, node.contents, visitor_, Object.freeze([
            node
        ]));
        if (cd === REMOVE) node.contents = null;
    } else visit_(null, node, visitor_, Object.freeze([]));
}
visit2.BREAK = BREAK;
visit2.SKIP = SKIP;
visit2.REMOVE = REMOVE;
function visit_(key, node, visitor, path5) {
    const ctrl = callVisitor(key, node, visitor, path5);
    if (isNode(ctrl) || isPair(ctrl)) {
        replaceNode(key, path5, ctrl);
        return visit_(key, ctrl, visitor, path5);
    }
    if (typeof ctrl !== "symbol") {
        if (isCollection(node)) {
            path5 = Object.freeze(path5.concat(node));
            for(let i = 0; i < node.items.length; ++i){
                const ci = visit_(i, node.items[i], visitor, path5);
                if (typeof ci === "number") i = ci - 1;
                else if (ci === BREAK) return BREAK;
                else if (ci === REMOVE) {
                    node.items.splice(i, 1);
                    i -= 1;
                }
            }
        } else if (isPair(node)) {
            path5 = Object.freeze(path5.concat(node));
            const ck = visit_("key", node.key, visitor, path5);
            if (ck === BREAK) return BREAK;
            else if (ck === REMOVE) node.key = null;
            const cv = visit_("value", node.value, visitor, path5);
            if (cv === BREAK) return BREAK;
            else if (cv === REMOVE) node.value = null;
        }
    }
    return ctrl;
}
async function visitAsync(node, visitor) {
    const visitor_ = initVisitor(visitor);
    if (isDocument(node)) {
        const cd = await visitAsync_(null, node.contents, visitor_, Object.freeze([
            node
        ]));
        if (cd === REMOVE) node.contents = null;
    } else await visitAsync_(null, node, visitor_, Object.freeze([]));
}
visitAsync.BREAK = BREAK;
visitAsync.SKIP = SKIP;
visitAsync.REMOVE = REMOVE;
async function visitAsync_(key, node, visitor, path5) {
    const ctrl = await callVisitor(key, node, visitor, path5);
    if (isNode(ctrl) || isPair(ctrl)) {
        replaceNode(key, path5, ctrl);
        return visitAsync_(key, ctrl, visitor, path5);
    }
    if (typeof ctrl !== "symbol") {
        if (isCollection(node)) {
            path5 = Object.freeze(path5.concat(node));
            for(let i = 0; i < node.items.length; ++i){
                const ci = await visitAsync_(i, node.items[i], visitor, path5);
                if (typeof ci === "number") i = ci - 1;
                else if (ci === BREAK) return BREAK;
                else if (ci === REMOVE) {
                    node.items.splice(i, 1);
                    i -= 1;
                }
            }
        } else if (isPair(node)) {
            path5 = Object.freeze(path5.concat(node));
            const ck = await visitAsync_("key", node.key, visitor, path5);
            if (ck === BREAK) return BREAK;
            else if (ck === REMOVE) node.key = null;
            const cv = await visitAsync_("value", node.value, visitor, path5);
            if (cv === BREAK) return BREAK;
            else if (cv === REMOVE) node.value = null;
        }
    }
    return ctrl;
}
function initVisitor(visitor) {
    if (typeof visitor === "object" && (visitor.Collection || visitor.Node || visitor.Value)) {
        return Object.assign({
            Alias: visitor.Node,
            Map: visitor.Node,
            Scalar: visitor.Node,
            Seq: visitor.Node
        }, visitor.Value && {
            Map: visitor.Value,
            Scalar: visitor.Value,
            Seq: visitor.Value
        }, visitor.Collection && {
            Map: visitor.Collection,
            Seq: visitor.Collection
        }, visitor);
    }
    return visitor;
}
function callVisitor(key, node, visitor, path5) {
    var _a, _b, _c, _d, _e;
    if (typeof visitor === "function") return visitor(key, node, path5);
    if (isMap(node)) return (_a = visitor.Map) === null || _a === void 0 ? void 0 : _a.call(visitor, key, node, path5);
    if (isSeq(node)) return (_b = visitor.Seq) === null || _b === void 0 ? void 0 : _b.call(visitor, key, node, path5);
    if (isPair(node)) return (_c = visitor.Pair) === null || _c === void 0 ? void 0 : _c.call(visitor, key, node, path5);
    if (isScalar(node)) return (_d = visitor.Scalar) === null || _d === void 0 ? void 0 : _d.call(visitor, key, node, path5);
    if (isAlias(node)) return (_e = visitor.Alias) === null || _e === void 0 ? void 0 : _e.call(visitor, key, node, path5);
    return void 0;
}
function replaceNode(key, path5, node) {
    const parent = path5[path5.length - 1];
    if (isCollection(parent)) {
        parent.items[key] = node;
    } else if (isPair(parent)) {
        if (key === "key") parent.key = node;
        else parent.value = node;
    } else if (isDocument(parent)) {
        parent.contents = node;
    } else {
        const pt = isAlias(parent) ? "alias" : "scalar";
        throw new Error(`Cannot replace node with ${pt} parent`);
    }
}
// ../../node_modules/yaml/browser/dist/doc/directives.js
var escapeChars = {
    "!": "%21",
    ",": "%2C",
    "[": "%5B",
    "]": "%5D",
    "{": "%7B",
    "}": "%7D"
};
var escapeTagName = (tn)=>tn.replace(/[!,[\]{}]/g, (ch)=>escapeChars[ch]);
var Directives = class {
    clone() {
        const copy = new Directives(this.yaml, this.tags);
        copy.docStart = this.docStart;
        return copy;
    }
    /**
   * During parsing, get a Directives instance for the current document and
   * update the stream state according to the current version's spec.
   */ atDocument() {
        const res = new Directives(this.yaml, this.tags);
        switch(this.yaml.version){
            case "1.1":
                this.atNextDocument = true;
                break;
            case "1.2":
                this.atNextDocument = false;
                this.yaml = {
                    explicit: Directives.defaultYaml.explicit,
                    version: "1.2"
                };
                this.tags = Object.assign({}, Directives.defaultTags);
                break;
        }
        return res;
    }
    /**
   * @param onError - May be called even if the action was successful
   * @returns `true` on success
   */ add(line, onError) {
        if (this.atNextDocument) {
            this.yaml = {
                explicit: Directives.defaultYaml.explicit,
                version: "1.1"
            };
            this.tags = Object.assign({}, Directives.defaultTags);
            this.atNextDocument = false;
        }
        const parts = line.trim().split(/[ \t]+/);
        const name = parts.shift();
        switch(name){
            case "%TAG":
                {
                    if (parts.length !== 2) {
                        onError(0, "%TAG directive should contain exactly two parts");
                        if (parts.length < 2) return false;
                    }
                    const [handle, prefix] = parts;
                    this.tags[handle] = prefix;
                    return true;
                }
            case "%YAML":
                {
                    this.yaml.explicit = true;
                    if (parts.length !== 1) {
                        onError(0, "%YAML directive should contain exactly one part");
                        return false;
                    }
                    const [version] = parts;
                    if (version === "1.1" || version === "1.2") {
                        this.yaml.version = version;
                        return true;
                    } else {
                        const isValid = /^\d+\.\d+$/.test(version);
                        onError(6, `Unsupported YAML version ${version}`, isValid);
                        return false;
                    }
                }
            default:
                onError(0, `Unknown directive ${name}`, true);
                return false;
        }
    }
    /**
   * Resolves a tag, matching handles to those defined in %TAG directives.
   *
   * @returns Resolved tag, which may also be the non-specific tag `'!'` or a
   *   `'!local'` tag, or `null` if unresolvable.
   */ tagName(source, onError) {
        if (source === "!") return "!";
        if (source[0] !== "!") {
            onError(`Not a valid tag: ${source}`);
            return null;
        }
        if (source[1] === "<") {
            const verbatim = source.slice(2, -1);
            if (verbatim === "!" || verbatim === "!!") {
                onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);
                return null;
            }
            if (source[source.length - 1] !== ">") onError("Verbatim tags must end with a >");
            return verbatim;
        }
        const [, handle, suffix] = source.match(/^(.*!)([^!]*)$/);
        if (!suffix) onError(`The ${source} tag has no suffix`);
        const prefix = this.tags[handle];
        if (prefix) return prefix + decodeURIComponent(suffix);
        if (handle === "!") return source;
        onError(`Could not resolve tag: ${source}`);
        return null;
    }
    /**
   * Given a fully resolved tag, returns its printable string form,
   * taking into account current tag prefixes and defaults.
   */ tagString(tag) {
        for (const [handle, prefix] of Object.entries(this.tags)){
            if (tag.startsWith(prefix)) return handle + escapeTagName(tag.substring(prefix.length));
        }
        return tag[0] === "!" ? tag : `!<${tag}>`;
    }
    toString(doc) {
        const lines = this.yaml.explicit ? [
            `%YAML ${this.yaml.version || "1.2"}`
        ] : [];
        const tagEntries = Object.entries(this.tags);
        let tagNames;
        if (doc && tagEntries.length > 0 && isNode(doc.contents)) {
            const tags = {};
            visit2(doc.contents, (_key, node)=>{
                if (isNode(node) && node.tag) tags[node.tag] = true;
            });
            tagNames = Object.keys(tags);
        } else tagNames = [];
        for (const [handle, prefix] of tagEntries){
            if (handle === "!!" && prefix === "tag:yaml.org,2002:") continue;
            if (!doc || tagNames.some((tn)=>tn.startsWith(prefix))) lines.push(`%TAG ${handle} ${prefix}`);
        }
        return lines.join("\n");
    }
    constructor(yaml, tags){
        this.docStart = null;
        this.docEnd = false;
        this.yaml = Object.assign({}, Directives.defaultYaml, yaml);
        this.tags = Object.assign({}, Directives.defaultTags, tags);
    }
};
Directives.defaultYaml = {
    explicit: false,
    version: "1.2"
};
Directives.defaultTags = {
    "!!": "tag:yaml.org,2002:"
};
// ../../node_modules/yaml/browser/dist/doc/anchors.js
function anchorIsValid(anchor) {
    if (/[\x00-\x19\s,[\]{}]/.test(anchor)) {
        const sa = JSON.stringify(anchor);
        const msg = `Anchor must not contain whitespace or control characters: ${sa}`;
        throw new Error(msg);
    }
    return true;
}
function anchorNames(root) {
    const anchors = /* @__PURE__ */ new Set();
    visit2(root, {
        Value (_key, node) {
            if (node.anchor) anchors.add(node.anchor);
        }
    });
    return anchors;
}
function findNewAnchor(prefix, exclude) {
    for(let i = 1; true; ++i){
        const name = `${prefix}${i}`;
        if (!exclude.has(name)) return name;
    }
}
function createNodeAnchors(doc, prefix) {
    const aliasObjects = [];
    const sourceObjects = /* @__PURE__ */ new Map();
    let prevAnchors = null;
    return {
        onAnchor (source) {
            aliasObjects.push(source);
            if (!prevAnchors) prevAnchors = anchorNames(doc);
            const anchor = findNewAnchor(prefix, prevAnchors);
            prevAnchors.add(anchor);
            return anchor;
        },
        /**
     * With circular references, the source node is only resolved after all
     * of its child nodes are. This is why anchors are set only after all of
     * the nodes have been created.
     */ setAnchors () {
            for (const source of aliasObjects){
                const ref = sourceObjects.get(source);
                if (typeof ref === "object" && ref.anchor && (isScalar(ref.node) || isCollection(ref.node))) {
                    ref.node.anchor = ref.anchor;
                } else {
                    const error = new Error("Failed to resolve repeated object (this should not happen)");
                    error.source = source;
                    throw error;
                }
            }
        },
        sourceObjects
    };
}
// ../../node_modules/yaml/browser/dist/nodes/Alias.js
var Alias = class extends NodeBase {
    /**
   * Resolve the value of this alias within `doc`, finding the last
   * instance of the `source` anchor before this node.
   */ resolve(doc) {
        let found = void 0;
        visit2(doc, {
            Node: (_key, node)=>{
                if (node === this) return visit2.BREAK;
                if (node.anchor === this.source) found = node;
            }
        });
        return found;
    }
    toJSON(_arg, ctx) {
        if (!ctx) return {
            source: this.source
        };
        const { anchors , doc , maxAliasCount  } = ctx;
        const source = this.resolve(doc);
        if (!source) {
            const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
            throw new ReferenceError(msg);
        }
        const data = anchors.get(source);
        if (!data || data.res === void 0) {
            const msg = "This should not happen: Alias anchor was not resolved?";
            throw new ReferenceError(msg);
        }
        if (maxAliasCount >= 0) {
            data.count += 1;
            if (data.aliasCount === 0) data.aliasCount = getAliasCount(doc, source, anchors);
            if (data.count * data.aliasCount > maxAliasCount) {
                const msg = "Excessive alias count indicates a resource exhaustion attack";
                throw new ReferenceError(msg);
            }
        }
        return data.res;
    }
    toString(ctx, _onComment, _onChompKeep) {
        const src = `*${this.source}`;
        if (ctx) {
            anchorIsValid(this.source);
            if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {
                const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
                throw new Error(msg);
            }
            if (ctx.implicitKey) return `${src} `;
        }
        return src;
    }
    constructor(source){
        super(ALIAS);
        this.source = source;
        Object.defineProperty(this, "tag", {
            set () {
                throw new Error("Alias nodes cannot have tags");
            }
        });
    }
};
function getAliasCount(doc, node, anchors) {
    if (isAlias(node)) {
        const source = node.resolve(doc);
        const anchor = anchors && source && anchors.get(source);
        return anchor ? anchor.count * anchor.aliasCount : 0;
    } else if (isCollection(node)) {
        let count = 0;
        for (const item of node.items){
            const c = getAliasCount(doc, item, anchors);
            if (c > count) count = c;
        }
        return count;
    } else if (isPair(node)) {
        const kc = getAliasCount(doc, node.key, anchors);
        const vc = getAliasCount(doc, node.value, anchors);
        return Math.max(kc, vc);
    }
    return 1;
}
// ../../node_modules/yaml/browser/dist/nodes/toJS.js
function toJS(value1, arg, ctx) {
    if (Array.isArray(value1)) return value1.map((v, i)=>toJS(v, String(i), ctx));
    if (value1 && typeof value1.toJSON === "function") {
        if (!ctx || !hasAnchor(value1)) return value1.toJSON(arg, ctx);
        const data = {
            aliasCount: 0,
            count: 1,
            res: void 0
        };
        ctx.anchors.set(value1, data);
        ctx.onCreate = (res2)=>{
            data.res = res2;
            delete ctx.onCreate;
        };
        const res = value1.toJSON(arg, ctx);
        if (ctx.onCreate) ctx.onCreate(res);
        return res;
    }
    if (typeof value1 === "bigint" && !(ctx && ctx.keep)) return Number(value1);
    return value1;
}
// ../../node_modules/yaml/browser/dist/nodes/Scalar.js
var isScalarValue = (value1)=>!value1 || typeof value1 !== "function" && typeof value1 !== "object";
var Scalar = class extends NodeBase {
    toJSON(arg, ctx) {
        return ctx && ctx.keep ? this.value : toJS(this.value, arg, ctx);
    }
    toString() {
        return String(this.value);
    }
    constructor(value1){
        super(SCALAR);
        this.value = value1;
    }
};
Scalar.BLOCK_FOLDED = "BLOCK_FOLDED";
Scalar.BLOCK_LITERAL = "BLOCK_LITERAL";
Scalar.PLAIN = "PLAIN";
Scalar.QUOTE_DOUBLE = "QUOTE_DOUBLE";
Scalar.QUOTE_SINGLE = "QUOTE_SINGLE";
// ../../node_modules/yaml/browser/dist/doc/createNode.js
var defaultTagPrefix = "tag:yaml.org,2002:";
function findTagObject(value1, tagName, tags) {
    if (tagName) {
        const match = tags.filter((t)=>t.tag === tagName);
        const tagObj = match.find((t)=>!t.format) || match[0];
        if (!tagObj) throw new Error(`Tag ${tagName} not found`);
        return tagObj;
    }
    return tags.find((t)=>t.identify && t.identify(value1) && !t.format);
}
function createNode(value1, tagName, ctx) {
    var _a, _b;
    if (isDocument(value1)) value1 = value1.contents;
    if (isNode(value1)) return value1;
    if (isPair(value1)) {
        const map2 = (_b = (_a = ctx.schema[MAP]).createNode) === null || _b === void 0 ? void 0 : _b.call(_a, ctx.schema, null, ctx);
        map2.items.push(value1);
        return map2;
    }
    if (value1 instanceof String || value1 instanceof Number || value1 instanceof Boolean || typeof BigInt === "function" && value1 instanceof BigInt) {
        value1 = value1.valueOf();
    }
    const { aliasDuplicateObjects , onAnchor , onTagObj , schema: schema4 , sourceObjects  } = ctx;
    let ref = void 0;
    if (aliasDuplicateObjects && value1 && typeof value1 === "object") {
        ref = sourceObjects.get(value1);
        if (ref) {
            if (!ref.anchor) ref.anchor = onAnchor(value1);
            return new Alias(ref.anchor);
        } else {
            ref = {
                anchor: null,
                node: null
            };
            sourceObjects.set(value1, ref);
        }
    }
    if (tagName && tagName.startsWith("!!")) tagName = defaultTagPrefix + tagName.slice(2);
    let tagObj = findTagObject(value1, tagName, schema4.tags);
    if (!tagObj) {
        if (value1 && typeof value1.toJSON === "function") value1 = value1.toJSON();
        if (!value1 || typeof value1 !== "object") {
            const node2 = new Scalar(value1);
            if (ref) ref.node = node2;
            return node2;
        }
        tagObj = value1 instanceof Map ? schema4[MAP] : Symbol.iterator in Object(value1) ? schema4[SEQ] : schema4[MAP];
    }
    if (onTagObj) {
        onTagObj(tagObj);
        delete ctx.onTagObj;
    }
    const node = (tagObj === null || tagObj === void 0 ? void 0 : tagObj.createNode) ? tagObj.createNode(ctx.schema, value1, ctx) : new Scalar(value1);
    if (tagName) node.tag = tagName;
    if (ref) ref.node = node;
    return node;
}
// ../../node_modules/yaml/browser/dist/nodes/Collection.js
function collectionFromPath(schema4, path5, value1) {
    let v = value1;
    for(let i = path5.length - 1; i >= 0; --i){
        const k = path5[i];
        if (typeof k === "number" && Number.isInteger(k) && k >= 0) {
            const a2 = [];
            a2[k] = v;
            v = a2;
        } else {
            v = /* @__PURE__ */ new Map([
                [
                    k,
                    v
                ]
            ]);
        }
    }
    return createNode(v, void 0, {
        aliasDuplicateObjects: false,
        keepUndefined: false,
        onAnchor: ()=>{
            throw new Error("This should not happen, please report a bug.");
        },
        schema: schema4,
        sourceObjects: /* @__PURE__ */ new Map()
    });
}
var isEmptyPath = (path5)=>path5 == null || typeof path5 === "object" && !!path5[Symbol.iterator]().next().done;
var Collection = class extends NodeBase {
    /**
   * Create a copy of this collection.
   *
   * @param schema - If defined, overwrites the original's schema
   */ clone(schema4) {
        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
        if (schema4) copy.schema = schema4;
        copy.items = copy.items.map((it)=>isNode(it) || isPair(it) ? it.clone(schema4) : it);
        if (this.range) copy.range = this.range.slice();
        return copy;
    }
    /**
   * Adds a value to the collection. For `!!map` and `!!omap` the value must
   * be a Pair instance or a `{ key, value }` object, which may not have a key
   * that already exists in the map.
   */ addIn(path5, value1) {
        if (isEmptyPath(path5)) this.add(value1);
        else {
            const [key, ...rest] = path5;
            const node = this.get(key, true);
            if (isCollection(node)) node.addIn(rest, value1);
            else if (node === void 0 && this.schema) this.set(key, collectionFromPath(this.schema, rest, value1));
            else throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
        }
    }
    /**
   * Removes a value from the collection.
   * @returns `true` if the item was found and removed.
   */ deleteIn(path5) {
        const [key, ...rest] = path5;
        if (rest.length === 0) return this.delete(key);
        const node = this.get(key, true);
        if (isCollection(node)) return node.deleteIn(rest);
        else throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
    }
    /**
   * Returns item at `key`, or `undefined` if not found. By default unwraps
   * scalar values from their surrounding node; to disable set `keepScalar` to
   * `true` (collections are always returned intact).
   */ getIn(path5, keepScalar) {
        const [key, ...rest] = path5;
        const node = this.get(key, true);
        if (rest.length === 0) return !keepScalar && isScalar(node) ? node.value : node;
        else return isCollection(node) ? node.getIn(rest, keepScalar) : void 0;
    }
    hasAllNullValues(allowScalar) {
        return this.items.every((node)=>{
            if (!isPair(node)) return false;
            const n = node.value;
            return n == null || allowScalar && isScalar(n) && n.value == null && !n.commentBefore && !n.comment && !n.tag;
        });
    }
    /**
   * Checks if the collection includes a value with the key `key`.
   */ hasIn(path5) {
        const [key, ...rest] = path5;
        if (rest.length === 0) return this.has(key);
        const node = this.get(key, true);
        return isCollection(node) ? node.hasIn(rest) : false;
    }
    /**
   * Sets a value in this collection. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   */ setIn(path5, value1) {
        const [key, ...rest] = path5;
        if (rest.length === 0) {
            this.set(key, value1);
        } else {
            const node = this.get(key, true);
            if (isCollection(node)) node.setIn(rest, value1);
            else if (node === void 0 && this.schema) this.set(key, collectionFromPath(this.schema, rest, value1));
            else throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
        }
    }
    constructor(type, schema4){
        super(type);
        Object.defineProperty(this, "schema", {
            value: schema4,
            configurable: true,
            enumerable: false,
            writable: true
        });
    }
};
Collection.maxFlowStringSingleLineLength = 60;
// ../../node_modules/yaml/browser/dist/stringify/stringifyComment.js
var stringifyComment = (str)=>str.replace(/^(?!$)(?: $)?/gm, "#");
function indentComment(comment, indent) {
    if (/^\n+$/.test(comment)) return comment.substring(1);
    return indent ? comment.replace(/^(?! *$)/gm, indent) : comment;
}
var lineComment = (str, indent, comment)=>comment.includes("\n") ? "\n" + indentComment(comment, indent) : (str.endsWith(" ") ? "" : " ") + comment;
// ../../node_modules/yaml/browser/dist/stringify/foldFlowLines.js
var FOLD_FLOW = "flow";
var FOLD_BLOCK = "block";
var FOLD_QUOTED = "quoted";
function foldFlowLines(text, indent, mode = "flow", { indentAtStart , lineWidth =80 , minContentWidth =20 , onFold , onOverflow  } = {}) {
    if (!lineWidth || lineWidth < 0) return text;
    const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);
    if (text.length <= endStep) return text;
    const folds = [];
    const escapedFolds = {};
    let end = lineWidth - indent.length;
    if (typeof indentAtStart === "number") {
        if (indentAtStart > lineWidth - Math.max(2, minContentWidth)) folds.push(0);
        else end = lineWidth - indentAtStart;
    }
    let split = void 0;
    let prev = void 0;
    let overflow = false;
    let i = -1;
    let escStart = -1;
    let escEnd = -1;
    if (mode === FOLD_BLOCK) {
        i = consumeMoreIndentedLines(text, i);
        if (i !== -1) end = i + endStep;
    }
    for(let ch; ch = text[i += 1];){
        if (mode === FOLD_QUOTED && ch === "\\") {
            escStart = i;
            switch(text[i + 1]){
                case "x":
                    i += 3;
                    break;
                case "u":
                    i += 5;
                    break;
                case "U":
                    i += 9;
                    break;
                default:
                    i += 1;
            }
            escEnd = i;
        }
        if (ch === "\n") {
            if (mode === FOLD_BLOCK) i = consumeMoreIndentedLines(text, i);
            end = i + endStep;
            split = void 0;
        } else {
            if (ch === " " && prev && prev !== " " && prev !== "\n" && prev !== "	") {
                const next = text[i + 1];
                if (next && next !== " " && next !== "\n" && next !== "	") split = i;
            }
            if (i >= end) {
                if (split) {
                    folds.push(split);
                    end = split + endStep;
                    split = void 0;
                } else if (mode === FOLD_QUOTED) {
                    while(prev === " " || prev === "	"){
                        prev = ch;
                        ch = text[i += 1];
                        overflow = true;
                    }
                    const j = i > escEnd + 1 ? i - 2 : escStart - 1;
                    if (escapedFolds[j]) return text;
                    folds.push(j);
                    escapedFolds[j] = true;
                    end = j + endStep;
                    split = void 0;
                } else {
                    overflow = true;
                }
            }
        }
        prev = ch;
    }
    if (overflow && onOverflow) onOverflow();
    if (folds.length === 0) return text;
    if (onFold) onFold();
    let res = text.slice(0, folds[0]);
    for(let i2 = 0; i2 < folds.length; ++i2){
        const fold = folds[i2];
        const end2 = folds[i2 + 1] || text.length;
        if (fold === 0) res = `
${indent}${text.slice(0, end2)}`;
        else {
            if (mode === FOLD_QUOTED && escapedFolds[fold]) res += `${text[fold]}\\`;
            res += `
${indent}${text.slice(fold + 1, end2)}`;
        }
    }
    return res;
}
function consumeMoreIndentedLines(text, i) {
    let ch = text[i + 1];
    while(ch === " " || ch === "	"){
        do {
            ch = text[i += 1];
        }while (ch && ch !== "\n")
        ch = text[i + 1];
    }
    return i;
}
// ../../node_modules/yaml/browser/dist/stringify/stringifyString.js
var getFoldOptions = (ctx)=>({
        indentAtStart: ctx.indentAtStart,
        lineWidth: ctx.options.lineWidth,
        minContentWidth: ctx.options.minContentWidth
    });
var containsDocumentMarker = (str)=>/^(%|---|\.\.\.)/m.test(str);
function lineLengthOverLimit(str, lineWidth, indentLength) {
    if (!lineWidth || lineWidth < 0) return false;
    const limit = lineWidth - indentLength;
    const strLen = str.length;
    if (strLen <= limit) return false;
    for(let i = 0, start = 0; i < strLen; ++i){
        if (str[i] === "\n") {
            if (i - start > limit) return true;
            start = i + 1;
            if (strLen - start <= limit) return false;
        }
    }
    return true;
}
function doubleQuotedString(value1, ctx) {
    const json = JSON.stringify(value1);
    if (ctx.options.doubleQuotedAsJSON) return json;
    const { implicitKey  } = ctx;
    const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;
    const indent = ctx.indent || (containsDocumentMarker(value1) ? "  " : "");
    let str = "";
    let start = 0;
    for(let i = 0, ch = json[i]; ch; ch = json[++i]){
        if (ch === " " && json[i + 1] === "\\" && json[i + 2] === "n") {
            str += json.slice(start, i) + "\\ ";
            i += 1;
            start = i;
            ch = "\\";
        }
        if (ch === "\\") switch(json[i + 1]){
            case "u":
                {
                    str += json.slice(start, i);
                    const code = json.substr(i + 2, 4);
                    switch(code){
                        case "0000":
                            str += "\\0";
                            break;
                        case "0007":
                            str += "\\a";
                            break;
                        case "000b":
                            str += "\\v";
                            break;
                        case "001b":
                            str += "\\e";
                            break;
                        case "0085":
                            str += "\\N";
                            break;
                        case "00a0":
                            str += "\\_";
                            break;
                        case "2028":
                            str += "\\L";
                            break;
                        case "2029":
                            str += "\\P";
                            break;
                        default:
                            if (code.substr(0, 2) === "00") str += "\\x" + code.substr(2);
                            else str += json.substr(i, 6);
                    }
                    i += 5;
                    start = i + 1;
                }
                break;
            case "n":
                if (implicitKey || json[i + 2] === '"' || json.length < minMultiLineLength) {
                    i += 1;
                } else {
                    str += json.slice(start, i) + "\n\n";
                    while(json[i + 2] === "\\" && json[i + 3] === "n" && json[i + 4] !== '"'){
                        str += "\n";
                        i += 2;
                    }
                    str += indent;
                    if (json[i + 2] === " ") str += "\\";
                    i += 1;
                    start = i + 1;
                }
                break;
            default:
                i += 1;
        }
    }
    str = start ? str + json.slice(start) : json;
    return implicitKey ? str : foldFlowLines(str, indent, FOLD_QUOTED, getFoldOptions(ctx));
}
function singleQuotedString(value1, ctx) {
    if (ctx.options.singleQuote === false || ctx.implicitKey && value1.includes("\n") || /[ \t]\n|\n[ \t]/.test(value1)) return doubleQuotedString(value1, ctx);
    const indent = ctx.indent || (containsDocumentMarker(value1) ? "  " : "");
    const res = "'" + value1.replace(/'/g, "''").replace(/\n+/g, `$&
${indent}`) + "'";
    return ctx.implicitKey ? res : foldFlowLines(res, indent, FOLD_FLOW, getFoldOptions(ctx));
}
function quotedString(value1, ctx) {
    const { singleQuote  } = ctx.options;
    let qs;
    if (singleQuote === false) qs = doubleQuotedString;
    else {
        const hasDouble = value1.includes('"');
        const hasSingle = value1.includes("'");
        if (hasDouble && !hasSingle) qs = singleQuotedString;
        else if (hasSingle && !hasDouble) qs = doubleQuotedString;
        else qs = singleQuote ? singleQuotedString : doubleQuotedString;
    }
    return qs(value1, ctx);
}
function blockString({ comment , type , value: value1  }, ctx, onComment, onChompKeep) {
    const { blockQuote , commentString , lineWidth  } = ctx.options;
    if (!blockQuote || /\n[\t ]+$/.test(value1) || /^\s*$/.test(value1)) {
        return quotedString(value1, ctx);
    }
    const indent = ctx.indent || (ctx.forceBlockIndent || containsDocumentMarker(value1) ? "  " : "");
    const literal = blockQuote === "literal" ? true : blockQuote === "folded" || type === Scalar.BLOCK_FOLDED ? false : type === Scalar.BLOCK_LITERAL ? true : !lineLengthOverLimit(value1, lineWidth, indent.length);
    if (!value1) return literal ? "|\n" : ">\n";
    let chomp;
    let endStart;
    for(endStart = value1.length; endStart > 0; --endStart){
        const ch = value1[endStart - 1];
        if (ch !== "\n" && ch !== "	" && ch !== " ") break;
    }
    let end = value1.substring(endStart);
    const endNlPos = end.indexOf("\n");
    if (endNlPos === -1) {
        chomp = "-";
    } else if (value1 === end || endNlPos !== end.length - 1) {
        chomp = "+";
        if (onChompKeep) onChompKeep();
    } else {
        chomp = "";
    }
    if (end) {
        value1 = value1.slice(0, -end.length);
        if (end[end.length - 1] === "\n") end = end.slice(0, -1);
        end = end.replace(/\n+(?!\n|$)/g, `$&${indent}`);
    }
    let startWithSpace = false;
    let startEnd;
    let startNlPos = -1;
    for(startEnd = 0; startEnd < value1.length; ++startEnd){
        const ch = value1[startEnd];
        if (ch === " ") startWithSpace = true;
        else if (ch === "\n") startNlPos = startEnd;
        else break;
    }
    let start = value1.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);
    if (start) {
        value1 = value1.substring(start.length);
        start = start.replace(/\n+/g, `$&${indent}`);
    }
    const indentSize = indent ? "2" : "1";
    let header = (literal ? "|" : ">") + (startWithSpace ? indentSize : "") + chomp;
    if (comment) {
        header += " " + commentString(comment.replace(/ ?[\r\n]+/g, " "));
        if (onComment) onComment();
    }
    if (literal) {
        value1 = value1.replace(/\n+/g, `$&${indent}`);
        return `${header}
${indent}${start}${value1}${end}`;
    }
    value1 = value1.replace(/\n+/g, "\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, "$1$2").replace(/\n+/g, `$&${indent}`);
    const body = foldFlowLines(`${start}${value1}${end}`, indent, FOLD_BLOCK, getFoldOptions(ctx));
    return `${header}
${indent}${body}`;
}
function plainString(item, ctx, onComment, onChompKeep) {
    const { type , value: value1  } = item;
    const { actualString , implicitKey , indent , inFlow  } = ctx;
    if (implicitKey && /[\n[\]{},]/.test(value1) || inFlow && /[[\]{},]/.test(value1)) {
        return quotedString(value1, ctx);
    }
    if (!value1 || /^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(value1)) {
        return implicitKey || inFlow || value1.indexOf("\n") === -1 ? quotedString(value1, ctx) : blockString(item, ctx, onComment, onChompKeep);
    }
    if (!implicitKey && !inFlow && type !== Scalar.PLAIN && value1.indexOf("\n") !== -1) {
        return blockString(item, ctx, onComment, onChompKeep);
    }
    if (indent === "" && containsDocumentMarker(value1)) {
        ctx.forceBlockIndent = true;
        return blockString(item, ctx, onComment, onChompKeep);
    }
    const str = value1.replace(/\n+/g, `$&
${indent}`);
    if (actualString) {
        const test = (tag)=>{
            var _a;
            return tag.default && tag.tag !== "tag:yaml.org,2002:str" && ((_a = tag.test) === null || _a === void 0 ? void 0 : _a.test(str));
        };
        const { compat , tags  } = ctx.doc.schema;
        if (tags.some(test) || (compat === null || compat === void 0 ? void 0 : compat.some(test))) return quotedString(value1, ctx);
    }
    return implicitKey ? str : foldFlowLines(str, indent, FOLD_FLOW, getFoldOptions(ctx));
}
function stringifyString(item, ctx, onComment, onChompKeep) {
    const { implicitKey , inFlow  } = ctx;
    const ss = typeof item.value === "string" ? item : Object.assign({}, item, {
        value: String(item.value)
    });
    let { type  } = item;
    if (type !== Scalar.QUOTE_DOUBLE) {
        if (/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(ss.value)) type = Scalar.QUOTE_DOUBLE;
    }
    const _stringify = (_type)=>{
        switch(_type){
            case Scalar.BLOCK_FOLDED:
            case Scalar.BLOCK_LITERAL:
                return implicitKey || inFlow ? quotedString(ss.value, ctx) : blockString(ss, ctx, onComment, onChompKeep);
            case Scalar.QUOTE_DOUBLE:
                return doubleQuotedString(ss.value, ctx);
            case Scalar.QUOTE_SINGLE:
                return singleQuotedString(ss.value, ctx);
            case Scalar.PLAIN:
                return plainString(ss, ctx, onComment, onChompKeep);
            default:
                return null;
        }
    };
    let res = _stringify(type);
    if (res === null) {
        const { defaultKeyType , defaultStringType  } = ctx.options;
        const t = implicitKey && defaultKeyType || defaultStringType;
        res = _stringify(t);
        if (res === null) throw new Error(`Unsupported default string type ${t}`);
    }
    return res;
}
// ../../node_modules/yaml/browser/dist/stringify/stringify.js
function createStringifyContext(doc, options) {
    const opt = Object.assign({
        blockQuote: true,
        commentString: stringifyComment,
        defaultKeyType: null,
        defaultStringType: "PLAIN",
        directives: null,
        doubleQuotedAsJSON: false,
        doubleQuotedMinMultiLineLength: 40,
        falseStr: "false",
        indentSeq: true,
        lineWidth: 80,
        minContentWidth: 20,
        nullStr: "null",
        simpleKeys: false,
        singleQuote: null,
        trueStr: "true",
        verifyAliasOrder: true
    }, doc.schema.toStringOptions, options);
    let inFlow;
    switch(opt.collectionStyle){
        case "block":
            inFlow = false;
            break;
        case "flow":
            inFlow = true;
            break;
        default:
            inFlow = null;
    }
    return {
        anchors: /* @__PURE__ */ new Set(),
        doc,
        indent: "",
        indentStep: typeof opt.indent === "number" ? " ".repeat(opt.indent) : "  ",
        inFlow,
        options: opt
    };
}
function getTagObject(tags, item) {
    if (item.tag) {
        const match = tags.filter((t)=>t.tag === item.tag);
        if (match.length > 0) return match.find((t)=>t.format === item.format) || match[0];
    }
    let tagObj = void 0;
    let obj;
    if (isScalar(item)) {
        obj = item.value;
        const match = tags.filter((t)=>t.identify && t.identify(obj));
        tagObj = match.find((t)=>t.format === item.format) || match.find((t)=>!t.format);
    } else {
        obj = item;
        tagObj = tags.find((t)=>t.nodeClass && obj instanceof t.nodeClass);
    }
    if (!tagObj) {
        const name = obj && obj.constructor ? obj.constructor.name : typeof obj;
        throw new Error(`Tag not resolved for ${name} value`);
    }
    return tagObj;
}
function stringifyProps(node, tagObj, { anchors , doc  }) {
    if (!doc.directives) return "";
    const props = [];
    const anchor = (isScalar(node) || isCollection(node)) && node.anchor;
    if (anchor && anchorIsValid(anchor)) {
        anchors.add(anchor);
        props.push(`&${anchor}`);
    }
    const tag = node.tag || (tagObj.default ? null : tagObj.tag);
    if (tag) props.push(doc.directives.tagString(tag));
    return props.join(" ");
}
function stringify(item, ctx, onComment, onChompKeep) {
    var _a;
    if (isPair(item)) return item.toString(ctx, onComment, onChompKeep);
    if (isAlias(item)) {
        if (ctx.doc.directives) return item.toString(ctx);
        if ((_a = ctx.resolvedAliases) === null || _a === void 0 ? void 0 : _a.has(item)) {
            throw new TypeError(`Cannot stringify circular structure without alias nodes`);
        } else {
            if (ctx.resolvedAliases) ctx.resolvedAliases.add(item);
            else ctx.resolvedAliases = /* @__PURE__ */ new Set([
                item
            ]);
            item = item.resolve(ctx.doc);
        }
    }
    let tagObj = void 0;
    const node = isNode(item) ? item : ctx.doc.createNode(item, {
        onTagObj: (o)=>tagObj = o
    });
    if (!tagObj) tagObj = getTagObject(ctx.doc.schema.tags, node);
    const props = stringifyProps(node, tagObj, ctx);
    if (props.length > 0) ctx.indentAtStart = (ctx.indentAtStart || 0) + props.length + 1;
    const str = typeof tagObj.stringify === "function" ? tagObj.stringify(node, ctx, onComment, onChompKeep) : isScalar(node) ? stringifyString(node, ctx, onComment, onChompKeep) : node.toString(ctx, onComment, onChompKeep);
    if (!props) return str;
    return isScalar(node) || str[0] === "{" || str[0] === "[" ? `${props} ${str}` : `${props}
${ctx.indent}${str}`;
}
// ../../node_modules/yaml/browser/dist/stringify/stringifyPair.js
function stringifyPair({ key , value: value1  }, ctx, onComment, onChompKeep) {
    const { allNullValues , doc , indent , indentStep , options: { commentString , indentSeq , simpleKeys  }  } = ctx;
    let keyComment = isNode(key) && key.comment || null;
    if (simpleKeys) {
        if (keyComment) {
            throw new Error("With simple keys, key nodes cannot have comments");
        }
        if (isCollection(key)) {
            const msg = "With simple keys, collection cannot be used as a key value";
            throw new Error(msg);
        }
    }
    let explicitKey = !simpleKeys && (!key || keyComment && value1 == null && !ctx.inFlow || isCollection(key) || (isScalar(key) ? key.type === Scalar.BLOCK_FOLDED || key.type === Scalar.BLOCK_LITERAL : typeof key === "object"));
    ctx = Object.assign({}, ctx, {
        allNullValues: false,
        implicitKey: !explicitKey && (simpleKeys || !allNullValues),
        indent: indent + indentStep
    });
    let keyCommentDone = false;
    let chompKeep = false;
    let str = stringify(key, ctx, ()=>keyCommentDone = true, ()=>chompKeep = true);
    if (!explicitKey && !ctx.inFlow && str.length > 1024) {
        if (simpleKeys) throw new Error("With simple keys, single line scalar must not span more than 1024 characters");
        explicitKey = true;
    }
    if (ctx.inFlow) {
        if (allNullValues || value1 == null) {
            if (keyCommentDone && onComment) onComment();
            return str === "" ? "?" : explicitKey ? `? ${str}` : str;
        }
    } else if (allNullValues && !simpleKeys || value1 == null && explicitKey) {
        str = `? ${str}`;
        if (keyComment && !keyCommentDone) {
            str += lineComment(str, ctx.indent, commentString(keyComment));
        } else if (chompKeep && onChompKeep) onChompKeep();
        return str;
    }
    if (keyCommentDone) keyComment = null;
    if (explicitKey) {
        if (keyComment) str += lineComment(str, ctx.indent, commentString(keyComment));
        str = `? ${str}
${indent}:`;
    } else {
        str = `${str}:`;
        if (keyComment) str += lineComment(str, ctx.indent, commentString(keyComment));
    }
    let vcb = "";
    let valueComment = null;
    if (isNode(value1)) {
        if (value1.spaceBefore) vcb = "\n";
        if (value1.commentBefore) {
            const cs = commentString(value1.commentBefore);
            vcb += `
${indentComment(cs, ctx.indent)}`;
        }
        valueComment = value1.comment;
    } else if (value1 && typeof value1 === "object") {
        value1 = doc.createNode(value1);
    }
    ctx.implicitKey = false;
    if (!explicitKey && !keyComment && isScalar(value1)) ctx.indentAtStart = str.length + 1;
    chompKeep = false;
    if (!indentSeq && indentStep.length >= 2 && !ctx.inFlow && !explicitKey && isSeq(value1) && !value1.flow && !value1.tag && !value1.anchor) {
        ctx.indent = ctx.indent.substr(2);
    }
    let valueCommentDone = false;
    const valueStr = stringify(value1, ctx, ()=>valueCommentDone = true, ()=>chompKeep = true);
    let ws = " ";
    if (vcb || keyComment) {
        ws = valueStr === "" && !ctx.inFlow ? vcb : `${vcb}
${ctx.indent}`;
    } else if (!explicitKey && isCollection(value1)) {
        const flow = valueStr[0] === "[" || valueStr[0] === "{";
        if (!flow || valueStr.includes("\n")) ws = `
${ctx.indent}`;
    } else if (valueStr === "" || valueStr[0] === "\n") ws = "";
    str += ws + valueStr;
    if (ctx.inFlow) {
        if (valueCommentDone && onComment) onComment();
    } else if (valueComment && !valueCommentDone) {
        str += lineComment(str, ctx.indent, commentString(valueComment));
    } else if (chompKeep && onChompKeep) {
        onChompKeep();
    }
    return str;
}
// ../../node_modules/yaml/browser/dist/log.js
function warn(logLevel, warning) {
    if (logLevel === "debug" || logLevel === "warn") {
        if (typeof process !== "undefined" && process.emitWarning) process.emitWarning(warning);
        else console.warn(warning);
    }
}
// ../../node_modules/yaml/browser/dist/nodes/addPairToJSMap.js
var MERGE_KEY = "<<";
function addPairToJSMap(ctx, map2, { key , value: value1  }) {
    if (ctx && ctx.doc.schema.merge && isMergeKey(key)) {
        value1 = isAlias(value1) ? value1.resolve(ctx.doc) : value1;
        if (isSeq(value1)) for (const it of value1.items)mergeToJSMap(ctx, map2, it);
        else if (Array.isArray(value1)) for (const it of value1)mergeToJSMap(ctx, map2, it);
        else mergeToJSMap(ctx, map2, value1);
    } else {
        const jsKey = toJS(key, "", ctx);
        if (map2 instanceof Map) {
            map2.set(jsKey, toJS(value1, jsKey, ctx));
        } else if (map2 instanceof Set) {
            map2.add(jsKey);
        } else {
            const stringKey = stringifyKey(key, jsKey, ctx);
            const jsValue = toJS(value1, stringKey, ctx);
            if (stringKey in map2) Object.defineProperty(map2, stringKey, {
                value: jsValue,
                writable: true,
                enumerable: true,
                configurable: true
            });
            else map2[stringKey] = jsValue;
        }
    }
    return map2;
}
var isMergeKey = (key)=>key === MERGE_KEY || isScalar(key) && key.value === MERGE_KEY && (!key.type || key.type === Scalar.PLAIN);
function mergeToJSMap(ctx, map2, value1) {
    const source = ctx && isAlias(value1) ? value1.resolve(ctx.doc) : value1;
    if (!isMap(source)) throw new Error("Merge sources must be maps or map aliases");
    const srcMap = source.toJSON(null, ctx, Map);
    for (const [key, value2] of srcMap){
        if (map2 instanceof Map) {
            if (!map2.has(key)) map2.set(key, value2);
        } else if (map2 instanceof Set) {
            map2.add(key);
        } else if (!Object.prototype.hasOwnProperty.call(map2, key)) {
            Object.defineProperty(map2, key, {
                value: value2,
                writable: true,
                enumerable: true,
                configurable: true
            });
        }
    }
    return map2;
}
function stringifyKey(key, jsKey, ctx) {
    if (jsKey === null) return "";
    if (typeof jsKey !== "object") return String(jsKey);
    if (isNode(key) && ctx && ctx.doc) {
        const strCtx = createStringifyContext(ctx.doc, {});
        strCtx.anchors = /* @__PURE__ */ new Set();
        for (const node of ctx.anchors.keys())strCtx.anchors.add(node.anchor);
        strCtx.inFlow = true;
        strCtx.inStringifyKey = true;
        const strKey = key.toString(strCtx);
        if (!ctx.mapKeyWarned) {
            let jsonStr = JSON.stringify(strKey);
            if (jsonStr.length > 40) jsonStr = jsonStr.substring(0, 36) + '..."';
            warn(ctx.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${jsonStr}. Set mapAsMap: true to use object keys.`);
            ctx.mapKeyWarned = true;
        }
        return strKey;
    }
    return JSON.stringify(jsKey);
}
// ../../node_modules/yaml/browser/dist/nodes/Pair.js
function createPair(key, value1, ctx) {
    const k = createNode(key, void 0, ctx);
    const v = createNode(value1, void 0, ctx);
    return new Pair(k, v);
}
var Pair = class {
    clone(schema4) {
        let { key , value: value1  } = this;
        if (isNode(key)) key = key.clone(schema4);
        if (isNode(value1)) value1 = value1.clone(schema4);
        return new Pair(key, value1);
    }
    toJSON(_, ctx) {
        const pair = ctx && ctx.mapAsMap ? /* @__PURE__ */ new Map() : {};
        return addPairToJSMap(ctx, pair, this);
    }
    toString(ctx, onComment, onChompKeep) {
        return ctx && ctx.doc ? stringifyPair(this, ctx, onComment, onChompKeep) : JSON.stringify(this);
    }
    constructor(key, value1 = null){
        Object.defineProperty(this, NODE_TYPE, {
            value: PAIR
        });
        this.key = key;
        this.value = value1;
    }
};
// ../../node_modules/yaml/browser/dist/stringify/stringifyCollection.js
function stringifyCollection(collection, ctx, options) {
    var _a;
    const flow = (_a = ctx.inFlow) !== null && _a !== void 0 ? _a : collection.flow;
    const stringify4 = flow ? stringifyFlowCollection : stringifyBlockCollection;
    return stringify4(collection, ctx, options);
}
function stringifyBlockCollection({ comment , items  }, ctx, { blockItemPrefix , flowChars , itemIndent , onChompKeep , onComment  }) {
    const { indent , options: { commentString  }  } = ctx;
    const itemCtx = Object.assign({}, ctx, {
        indent: itemIndent,
        type: null
    });
    let chompKeep = false;
    const lines = [];
    for(let i = 0; i < items.length; ++i){
        const item = items[i];
        let comment2 = null;
        if (isNode(item)) {
            if (!chompKeep && item.spaceBefore) lines.push("");
            addCommentBefore(ctx, lines, item.commentBefore, chompKeep);
            if (item.comment) comment2 = item.comment;
        } else if (isPair(item)) {
            const ik = isNode(item.key) ? item.key : null;
            if (ik) {
                if (!chompKeep && ik.spaceBefore) lines.push("");
                addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);
            }
        }
        chompKeep = false;
        let str2 = stringify(item, itemCtx, ()=>comment2 = null, ()=>chompKeep = true);
        if (comment2) str2 += lineComment(str2, itemIndent, commentString(comment2));
        if (chompKeep && comment2) chompKeep = false;
        lines.push(blockItemPrefix + str2);
    }
    let str;
    if (lines.length === 0) {
        str = flowChars.start + flowChars.end;
    } else {
        str = lines[0];
        for(let i = 1; i < lines.length; ++i){
            const line = lines[i];
            str += line ? `
${indent}${line}` : "\n";
        }
    }
    if (comment) {
        str += "\n" + indentComment(commentString(comment), indent);
        if (onComment) onComment();
    } else if (chompKeep && onChompKeep) onChompKeep();
    return str;
}
function stringifyFlowCollection({ comment , items  }, ctx, { flowChars , itemIndent , onComment  }) {
    const { indent , indentStep , options: { commentString  }  } = ctx;
    itemIndent += indentStep;
    const itemCtx = Object.assign({}, ctx, {
        indent: itemIndent,
        inFlow: true,
        type: null
    });
    let reqNewline = false;
    let linesAtValue = 0;
    const lines = [];
    for(let i = 0; i < items.length; ++i){
        const item = items[i];
        let comment2 = null;
        if (isNode(item)) {
            if (item.spaceBefore) lines.push("");
            addCommentBefore(ctx, lines, item.commentBefore, false);
            if (item.comment) comment2 = item.comment;
        } else if (isPair(item)) {
            const ik = isNode(item.key) ? item.key : null;
            if (ik) {
                if (ik.spaceBefore) lines.push("");
                addCommentBefore(ctx, lines, ik.commentBefore, false);
                if (ik.comment) reqNewline = true;
            }
            const iv = isNode(item.value) ? item.value : null;
            if (iv) {
                if (iv.comment) comment2 = iv.comment;
                if (iv.commentBefore) reqNewline = true;
            } else if (item.value == null && ik && ik.comment) {
                comment2 = ik.comment;
            }
        }
        if (comment2) reqNewline = true;
        let str2 = stringify(item, itemCtx, ()=>comment2 = null);
        if (i < items.length - 1) str2 += ",";
        if (comment2) str2 += lineComment(str2, itemIndent, commentString(comment2));
        if (!reqNewline && (lines.length > linesAtValue || str2.includes("\n"))) reqNewline = true;
        lines.push(str2);
        linesAtValue = lines.length;
    }
    let str;
    const { start , end  } = flowChars;
    if (lines.length === 0) {
        str = start + end;
    } else {
        if (!reqNewline) {
            const len = lines.reduce((sum, line)=>sum + line.length + 2, 2);
            reqNewline = len > Collection.maxFlowStringSingleLineLength;
        }
        if (reqNewline) {
            str = start;
            for (const line of lines)str += line ? `
${indentStep}${indent}${line}` : "\n";
            str += `
${indent}${end}`;
        } else {
            str = `${start} ${lines.join(" ")} ${end}`;
        }
    }
    if (comment) {
        str += lineComment(str, commentString(comment), indent);
        if (onComment) onComment();
    }
    return str;
}
function addCommentBefore({ indent , options: { commentString  }  }, lines, comment, chompKeep) {
    if (comment && chompKeep) comment = comment.replace(/^\n+/, "");
    if (comment) {
        const ic = indentComment(commentString(comment), indent);
        lines.push(ic.trimStart());
    }
}
// ../../node_modules/yaml/browser/dist/nodes/YAMLMap.js
function findPair(items, key) {
    const k = isScalar(key) ? key.value : key;
    for (const it of items){
        if (isPair(it)) {
            if (it.key === key || it.key === k) return it;
            if (isScalar(it.key) && it.key.value === k) return it;
        }
    }
    return void 0;
}
var YAMLMap = class extends Collection {
    static get tagName() {
        return "tag:yaml.org,2002:map";
    }
    /**
   * Adds a value to the collection.
   *
   * @param overwrite - If not set `true`, using a key that is already in the
   *   collection will throw. Otherwise, overwrites the previous value.
   */ add(pair, overwrite) {
        let _pair;
        if (isPair(pair)) _pair = pair;
        else if (!pair || typeof pair !== "object" || !("key" in pair)) {
            _pair = new Pair(pair, pair.value);
        } else _pair = new Pair(pair.key, pair.value);
        const prev = findPair(this.items, _pair.key);
        const sortEntries = this.schema && this.schema.sortMapEntries;
        if (prev) {
            if (!overwrite) throw new Error(`Key ${_pair.key} already set`);
            if (isScalar(prev.value) && isScalarValue(_pair.value)) prev.value.value = _pair.value;
            else prev.value = _pair.value;
        } else if (sortEntries) {
            const i = this.items.findIndex((item)=>sortEntries(_pair, item) < 0);
            if (i === -1) this.items.push(_pair);
            else this.items.splice(i, 0, _pair);
        } else {
            this.items.push(_pair);
        }
    }
    delete(key) {
        const it = findPair(this.items, key);
        if (!it) return false;
        const del = this.items.splice(this.items.indexOf(it), 1);
        return del.length > 0;
    }
    get(key, keepScalar) {
        const it = findPair(this.items, key);
        const node = it && it.value;
        return !keepScalar && isScalar(node) ? node.value : node;
    }
    has(key) {
        return !!findPair(this.items, key);
    }
    set(key, value1) {
        this.add(new Pair(key, value1), true);
    }
    /**
   * @param ctx - Conversion context, originally set in Document#toJS()
   * @param {Class} Type - If set, forces the returned collection type
   * @returns Instance of Type, Map, or Object
   */ toJSON(_, ctx, Type) {
        const map2 = Type ? new Type() : ctx && ctx.mapAsMap ? /* @__PURE__ */ new Map() : {};
        if (ctx && ctx.onCreate) ctx.onCreate(map2);
        for (const item of this.items)addPairToJSMap(ctx, map2, item);
        return map2;
    }
    toString(ctx, onComment, onChompKeep) {
        if (!ctx) return JSON.stringify(this);
        for (const item of this.items){
            if (!isPair(item)) throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);
        }
        if (!ctx.allNullValues && this.hasAllNullValues(false)) ctx = Object.assign({}, ctx, {
            allNullValues: true
        });
        return stringifyCollection(this, ctx, {
            blockItemPrefix: "",
            flowChars: {
                start: "{",
                end: "}"
            },
            itemIndent: ctx.indent || "",
            onChompKeep,
            onComment
        });
    }
    constructor(schema4){
        super(MAP, schema4);
        this.items = [];
    }
};
// ../../node_modules/yaml/browser/dist/schema/common/map.js
function createMap(schema4, obj, ctx) {
    const { keepUndefined , replacer  } = ctx;
    const map2 = new YAMLMap(schema4);
    const add = (key, value1)=>{
        if (typeof replacer === "function") value1 = replacer.call(obj, key, value1);
        else if (Array.isArray(replacer) && !replacer.includes(key)) return;
        if (value1 !== void 0 || keepUndefined) map2.items.push(createPair(key, value1, ctx));
    };
    if (obj instanceof Map) {
        for (const [key, value1] of obj)add(key, value1);
    } else if (obj && typeof obj === "object") {
        for (const key of Object.keys(obj))add(key, obj[key]);
    }
    if (typeof schema4.sortMapEntries === "function") {
        map2.items.sort(schema4.sortMapEntries);
    }
    return map2;
}
var map = {
    collection: "map",
    createNode: createMap,
    default: true,
    nodeClass: YAMLMap,
    tag: "tag:yaml.org,2002:map",
    resolve (map2, onError) {
        if (!isMap(map2)) onError("Expected a mapping for this tag");
        return map2;
    }
};
// ../../node_modules/yaml/browser/dist/nodes/YAMLSeq.js
var YAMLSeq = class extends Collection {
    static get tagName() {
        return "tag:yaml.org,2002:seq";
    }
    add(value1) {
        this.items.push(value1);
    }
    /**
   * Removes a value from the collection.
   *
   * `key` must contain a representation of an integer for this to succeed.
   * It may be wrapped in a `Scalar`.
   *
   * @returns `true` if the item was found and removed.
   */ delete(key) {
        const idx = asItemIndex(key);
        if (typeof idx !== "number") return false;
        const del = this.items.splice(idx, 1);
        return del.length > 0;
    }
    /**
   * Returns item at `key`, or `undefined` if not found. By default unwraps
   * scalar values from their surrounding node; to disable set `keepScalar` to
   * `true` (collections are always returned intact).
   *
   * `key` must contain a representation of an integer for this to succeed.
   * It may be wrapped in a `Scalar`.
   */ get(key, keepScalar) {
        const idx = asItemIndex(key);
        if (typeof idx !== "number") return void 0;
        const it = this.items[idx];
        return !keepScalar && isScalar(it) ? it.value : it;
    }
    /**
   * Checks if the collection includes a value with the key `key`.
   *
   * `key` must contain a representation of an integer for this to succeed.
   * It may be wrapped in a `Scalar`.
   */ has(key) {
        const idx = asItemIndex(key);
        return typeof idx === "number" && idx < this.items.length;
    }
    /**
   * Sets a value in this collection. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   *
   * If `key` does not contain a representation of an integer, this will throw.
   * It may be wrapped in a `Scalar`.
   */ set(key, value1) {
        const idx = asItemIndex(key);
        if (typeof idx !== "number") throw new Error(`Expected a valid index, not ${key}.`);
        const prev = this.items[idx];
        if (isScalar(prev) && isScalarValue(value1)) prev.value = value1;
        else this.items[idx] = value1;
    }
    toJSON(_, ctx) {
        const seq2 = [];
        if (ctx && ctx.onCreate) ctx.onCreate(seq2);
        let i = 0;
        for (const item of this.items)seq2.push(toJS(item, String(i++), ctx));
        return seq2;
    }
    toString(ctx, onComment, onChompKeep) {
        if (!ctx) return JSON.stringify(this);
        return stringifyCollection(this, ctx, {
            blockItemPrefix: "- ",
            flowChars: {
                start: "[",
                end: "]"
            },
            itemIndent: (ctx.indent || "") + "  ",
            onChompKeep,
            onComment
        });
    }
    constructor(schema4){
        super(SEQ, schema4);
        this.items = [];
    }
};
function asItemIndex(key) {
    let idx = isScalar(key) ? key.value : key;
    if (idx && typeof idx === "string") idx = Number(idx);
    return typeof idx === "number" && Number.isInteger(idx) && idx >= 0 ? idx : null;
}
// ../../node_modules/yaml/browser/dist/schema/common/seq.js
function createSeq(schema4, obj, ctx) {
    const { replacer  } = ctx;
    const seq2 = new YAMLSeq(schema4);
    if (obj && Symbol.iterator in Object(obj)) {
        let i = 0;
        for (let it of obj){
            if (typeof replacer === "function") {
                const key = obj instanceof Set ? it : String(i++);
                it = replacer.call(obj, key, it);
            }
            seq2.items.push(createNode(it, void 0, ctx));
        }
    }
    return seq2;
}
var seq = {
    collection: "seq",
    createNode: createSeq,
    default: true,
    nodeClass: YAMLSeq,
    tag: "tag:yaml.org,2002:seq",
    resolve (seq2, onError) {
        if (!isSeq(seq2)) onError("Expected a sequence for this tag");
        return seq2;
    }
};
// ../../node_modules/yaml/browser/dist/schema/common/string.js
var string = {
    identify: (value1)=>typeof value1 === "string",
    default: true,
    tag: "tag:yaml.org,2002:str",
    resolve: (str)=>str,
    stringify (item, ctx, onComment, onChompKeep) {
        ctx = Object.assign({
            actualString: true
        }, ctx);
        return stringifyString(item, ctx, onComment, onChompKeep);
    }
};
// ../../node_modules/yaml/browser/dist/schema/common/null.js
var nullTag = {
    identify: (value1)=>value1 == null,
    createNode: ()=>new Scalar(null),
    default: true,
    tag: "tag:yaml.org,2002:null",
    test: /^(?:~|[Nn]ull|NULL)?$/,
    resolve: ()=>new Scalar(null),
    stringify: ({ source  }, ctx)=>typeof source === "string" && nullTag.test.test(source) ? source : ctx.options.nullStr
};
// ../../node_modules/yaml/browser/dist/schema/core/bool.js
var boolTag = {
    identify: (value1)=>typeof value1 === "boolean",
    default: true,
    tag: "tag:yaml.org,2002:bool",
    test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,
    resolve: (str)=>new Scalar(str[0] === "t" || str[0] === "T"),
    stringify ({ source , value: value1  }, ctx) {
        if (source && boolTag.test.test(source)) {
            const sv = source[0] === "t" || source[0] === "T";
            if (value1 === sv) return source;
        }
        return value1 ? ctx.options.trueStr : ctx.options.falseStr;
    }
};
// ../../node_modules/yaml/browser/dist/stringify/stringifyNumber.js
function stringifyNumber({ format: format5 , minFractionDigits , tag , value: value1  }) {
    if (typeof value1 === "bigint") return String(value1);
    const num = typeof value1 === "number" ? value1 : Number(value1);
    if (!isFinite(num)) return isNaN(num) ? ".nan" : num < 0 ? "-.inf" : ".inf";
    let n = JSON.stringify(value1);
    if (!format5 && minFractionDigits && (!tag || tag === "tag:yaml.org,2002:float") && /^\d/.test(n)) {
        let i = n.indexOf(".");
        if (i < 0) {
            i = n.length;
            n += ".";
        }
        let d = minFractionDigits - (n.length - i - 1);
        while(d-- > 0)n += "0";
    }
    return n;
}
// ../../node_modules/yaml/browser/dist/schema/core/float.js
var floatNaN = {
    identify: (value1)=>typeof value1 === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^(?:[-+]?\.(?:inf|Inf|INF|nan|NaN|NAN))$/,
    resolve: (str)=>str.slice(-3).toLowerCase() === "nan" ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
    stringify: stringifyNumber
};
var floatExp = {
    identify: (value1)=>typeof value1 === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    format: "EXP",
    test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
    resolve: (str)=>parseFloat(str),
    stringify (node) {
        const num = Number(node.value);
        return isFinite(num) ? num.toExponential() : stringifyNumber(node);
    }
};
var lib_float = {
    identify: (value1)=>typeof value1 === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,
    resolve (str) {
        const node = new Scalar(parseFloat(str));
        const dot = str.indexOf(".");
        if (dot !== -1 && str[str.length - 1] === "0") node.minFractionDigits = str.length - dot - 1;
        return node;
    },
    stringify: stringifyNumber
};
// ../../node_modules/yaml/browser/dist/schema/core/int.js
var intIdentify = (value1)=>typeof value1 === "bigint" || Number.isInteger(value1);
var intResolve = (str, offset, radix, { intAsBigInt  })=>intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix);
function intStringify(node, radix, prefix) {
    const { value: value1  } = node;
    if (intIdentify(value1) && value1 >= 0) return prefix + value1.toString(radix);
    return stringifyNumber(node);
}
var intOct = {
    identify: (value1)=>intIdentify(value1) && value1 >= 0,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "OCT",
    test: /^0o[0-7]+$/,
    resolve: (str, _onError, opt)=>intResolve(str, 2, 8, opt),
    stringify: (node)=>intStringify(node, 8, "0o")
};
var lib_int = {
    identify: intIdentify,
    default: true,
    tag: "tag:yaml.org,2002:int",
    test: /^[-+]?[0-9]+$/,
    resolve: (str, _onError, opt)=>intResolve(str, 0, 10, opt),
    stringify: stringifyNumber
};
var intHex = {
    identify: (value1)=>intIdentify(value1) && value1 >= 0,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "HEX",
    test: /^0x[0-9a-fA-F]+$/,
    resolve: (str, _onError, opt)=>intResolve(str, 2, 16, opt),
    stringify: (node)=>intStringify(node, 16, "0x")
};
// ../../node_modules/yaml/browser/dist/schema/core/schema.js
var schema = [
    map,
    seq,
    string,
    nullTag,
    boolTag,
    intOct,
    lib_int,
    intHex,
    floatNaN,
    floatExp,
    lib_float
];
// ../../node_modules/yaml/browser/dist/schema/json/schema.js
function intIdentify2(value1) {
    return typeof value1 === "bigint" || Number.isInteger(value1);
}
var stringifyJSON = ({ value: value1  })=>JSON.stringify(value1);
var jsonScalars = [
    {
        identify: (value1)=>typeof value1 === "string",
        default: true,
        tag: "tag:yaml.org,2002:str",
        resolve: (str)=>str,
        stringify: stringifyJSON
    },
    {
        identify: (value1)=>value1 == null,
        createNode: ()=>new Scalar(null),
        default: true,
        tag: "tag:yaml.org,2002:null",
        test: /^null$/,
        resolve: ()=>null,
        stringify: stringifyJSON
    },
    {
        identify: (value1)=>typeof value1 === "boolean",
        default: true,
        tag: "tag:yaml.org,2002:bool",
        test: /^true|false$/,
        resolve: (str)=>str === "true",
        stringify: stringifyJSON
    },
    {
        identify: intIdentify2,
        default: true,
        tag: "tag:yaml.org,2002:int",
        test: /^-?(?:0|[1-9][0-9]*)$/,
        resolve: (str, _onError, { intAsBigInt  })=>intAsBigInt ? BigInt(str) : parseInt(str, 10),
        stringify: ({ value: value1  })=>intIdentify2(value1) ? value1.toString() : JSON.stringify(value1)
    },
    {
        identify: (value1)=>typeof value1 === "number",
        default: true,
        tag: "tag:yaml.org,2002:float",
        test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
        resolve: (str)=>parseFloat(str),
        stringify: stringifyJSON
    }
];
var jsonError = {
    default: true,
    tag: "",
    test: /^/,
    resolve (str, onError) {
        onError(`Unresolved plain scalar ${JSON.stringify(str)}`);
        return str;
    }
};
var schema2 = [
    map,
    seq
].concat(jsonScalars, jsonError);
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/binary.js
var binary = {
    identify: (value1)=>value1 instanceof Uint8Array,
    default: false,
    tag: "tag:yaml.org,2002:binary",
    /**
   * Returns a Buffer in node and an Uint8Array in browsers
   *
   * To use the resulting buffer as an image, you'll want to do something like:
   *
   *   const blob = new Blob([buffer], { type: 'image/jpeg' })
   *   document.querySelector('#photo').src = URL.createObjectURL(blob)
   */ resolve (src, onError) {
        if (typeof Buffer === "function") {
            return Buffer.from(src, "base64");
        } else if (typeof atob === "function") {
            const str = atob(src.replace(/[\n\r]/g, ""));
            const buffer = new Uint8Array(str.length);
            for(let i = 0; i < str.length; ++i)buffer[i] = str.charCodeAt(i);
            return buffer;
        } else {
            onError("This environment does not support reading binary tags; either Buffer or atob is required");
            return src;
        }
    },
    stringify ({ comment , type , value: value1  }, ctx, onComment, onChompKeep) {
        const buf = value1;
        let str;
        if (typeof Buffer === "function") {
            str = buf instanceof Buffer ? buf.toString("base64") : Buffer.from(buf.buffer).toString("base64");
        } else if (typeof btoa === "function") {
            let s = "";
            for(let i = 0; i < buf.length; ++i)s += String.fromCharCode(buf[i]);
            str = btoa(s);
        } else {
            throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");
        }
        if (!type) type = Scalar.BLOCK_LITERAL;
        if (type !== Scalar.QUOTE_DOUBLE) {
            const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);
            const n = Math.ceil(str.length / lineWidth);
            const lines = new Array(n);
            for(let i = 0, o = 0; i < n; ++i, o += lineWidth){
                lines[i] = str.substr(o, lineWidth);
            }
            str = lines.join(type === Scalar.BLOCK_LITERAL ? "\n" : " ");
        }
        return stringifyString({
            comment,
            type,
            value: str
        }, ctx, onComment, onChompKeep);
    }
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/pairs.js
function resolvePairs(seq2, onError) {
    if (isSeq(seq2)) {
        for(let i = 0; i < seq2.items.length; ++i){
            let item = seq2.items[i];
            if (isPair(item)) continue;
            else if (isMap(item)) {
                if (item.items.length > 1) onError("Each pair must have its own sequence indicator");
                const pair = item.items[0] || new Pair(new Scalar(null));
                if (item.commentBefore) pair.key.commentBefore = pair.key.commentBefore ? `${item.commentBefore}
${pair.key.commentBefore}` : item.commentBefore;
                if (item.comment) {
                    const cn = pair.value || pair.key;
                    cn.comment = cn.comment ? `${item.comment}
${cn.comment}` : item.comment;
                }
                item = pair;
            }
            seq2.items[i] = isPair(item) ? item : new Pair(item);
        }
    } else onError("Expected a sequence for this tag");
    return seq2;
}
function createPairs(schema4, iterable, ctx) {
    const { replacer  } = ctx;
    const pairs2 = new YAMLSeq(schema4);
    pairs2.tag = "tag:yaml.org,2002:pairs";
    let i = 0;
    if (iterable && Symbol.iterator in Object(iterable)) for (let it of iterable){
        if (typeof replacer === "function") it = replacer.call(iterable, String(i++), it);
        let key, value1;
        if (Array.isArray(it)) {
            if (it.length === 2) {
                key = it[0];
                value1 = it[1];
            } else throw new TypeError(`Expected [key, value] tuple: ${it}`);
        } else if (it && it instanceof Object) {
            const keys = Object.keys(it);
            if (keys.length === 1) {
                key = keys[0];
                value1 = it[key];
            } else throw new TypeError(`Expected { key: value } tuple: ${it}`);
        } else {
            key = it;
        }
        pairs2.items.push(createPair(key, value1, ctx));
    }
    return pairs2;
}
var pairs = {
    collection: "seq",
    default: false,
    tag: "tag:yaml.org,2002:pairs",
    resolve: resolvePairs,
    createNode: createPairs
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/omap.js
var YAMLOMap = class extends YAMLSeq {
    /**
   * If `ctx` is given, the return type is actually `Map<unknown, unknown>`,
   * but TypeScript won't allow widening the signature of a child method.
   */ toJSON(_, ctx) {
        if (!ctx) return super.toJSON(_);
        const map2 = /* @__PURE__ */ new Map();
        if (ctx && ctx.onCreate) ctx.onCreate(map2);
        for (const pair of this.items){
            let key, value1;
            if (isPair(pair)) {
                key = toJS(pair.key, "", ctx);
                value1 = toJS(pair.value, key, ctx);
            } else {
                key = toJS(pair, "", ctx);
            }
            if (map2.has(key)) throw new Error("Ordered maps must not include duplicate keys");
            map2.set(key, value1);
        }
        return map2;
    }
    constructor(){
        super();
        this.add = YAMLMap.prototype.add.bind(this);
        this.delete = YAMLMap.prototype.delete.bind(this);
        this.get = YAMLMap.prototype.get.bind(this);
        this.has = YAMLMap.prototype.has.bind(this);
        this.set = YAMLMap.prototype.set.bind(this);
        this.tag = YAMLOMap.tag;
    }
};
YAMLOMap.tag = "tag:yaml.org,2002:omap";
var omap = {
    collection: "seq",
    identify: (value1)=>value1 instanceof Map,
    nodeClass: YAMLOMap,
    default: false,
    tag: "tag:yaml.org,2002:omap",
    resolve (seq2, onError) {
        const pairs2 = resolvePairs(seq2, onError);
        const seenKeys = [];
        for (const { key  } of pairs2.items){
            if (isScalar(key)) {
                if (seenKeys.includes(key.value)) {
                    onError(`Ordered maps must not include duplicate keys: ${key.value}`);
                } else {
                    seenKeys.push(key.value);
                }
            }
        }
        return Object.assign(new YAMLOMap(), pairs2);
    },
    createNode (schema4, iterable, ctx) {
        const pairs2 = createPairs(schema4, iterable, ctx);
        const omap2 = new YAMLOMap();
        omap2.items = pairs2.items;
        return omap2;
    }
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/bool.js
function boolStringify({ value: value1 , source  }, ctx) {
    const boolObj = value1 ? trueTag : falseTag;
    if (source && boolObj.test.test(source)) return source;
    return value1 ? ctx.options.trueStr : ctx.options.falseStr;
}
var trueTag = {
    identify: (value1)=>value1 === true,
    default: true,
    tag: "tag:yaml.org,2002:bool",
    test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,
    resolve: ()=>new Scalar(true),
    stringify: boolStringify
};
var falseTag = {
    identify: (value1)=>value1 === false,
    default: true,
    tag: "tag:yaml.org,2002:bool",
    test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,
    resolve: ()=>new Scalar(false),
    stringify: boolStringify
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/float.js
var floatNaN2 = {
    identify: (value1)=>typeof value1 === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^[-+]?\.(?:inf|Inf|INF|nan|NaN|NAN)$/,
    resolve: (str)=>str.slice(-3).toLowerCase() === "nan" ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
    stringify: stringifyNumber
};
var floatExp2 = {
    identify: (value1)=>typeof value1 === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    format: "EXP",
    test: /^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,
    resolve: (str)=>parseFloat(str.replace(/_/g, "")),
    stringify (node) {
        const num = Number(node.value);
        return isFinite(num) ? num.toExponential() : stringifyNumber(node);
    }
};
var float2 = {
    identify: (value1)=>typeof value1 === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,
    resolve (str) {
        const node = new Scalar(parseFloat(str.replace(/_/g, "")));
        const dot = str.indexOf(".");
        if (dot !== -1) {
            const f2 = str.substring(dot + 1).replace(/_/g, "");
            if (f2[f2.length - 1] === "0") node.minFractionDigits = f2.length;
        }
        return node;
    },
    stringify: stringifyNumber
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/int.js
var intIdentify3 = (value1)=>typeof value1 === "bigint" || Number.isInteger(value1);
function intResolve2(str, offset, radix, { intAsBigInt  }) {
    const sign = str[0];
    if (sign === "-" || sign === "+") offset += 1;
    str = str.substring(offset).replace(/_/g, "");
    if (intAsBigInt) {
        switch(radix){
            case 2:
                str = `0b${str}`;
                break;
            case 8:
                str = `0o${str}`;
                break;
            case 16:
                str = `0x${str}`;
                break;
        }
        const n2 = BigInt(str);
        return sign === "-" ? BigInt(-1) * n2 : n2;
    }
    const n = parseInt(str, radix);
    return sign === "-" ? -1 * n : n;
}
function intStringify2(node, radix, prefix) {
    const { value: value1  } = node;
    if (intIdentify3(value1)) {
        const str = value1.toString(radix);
        return value1 < 0 ? "-" + prefix + str.substr(1) : prefix + str;
    }
    return stringifyNumber(node);
}
var intBin = {
    identify: intIdentify3,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "BIN",
    test: /^[-+]?0b[0-1_]+$/,
    resolve: (str, _onError, opt)=>intResolve2(str, 2, 2, opt),
    stringify: (node)=>intStringify2(node, 2, "0b")
};
var intOct2 = {
    identify: intIdentify3,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "OCT",
    test: /^[-+]?0[0-7_]+$/,
    resolve: (str, _onError, opt)=>intResolve2(str, 1, 8, opt),
    stringify: (node)=>intStringify2(node, 8, "0")
};
var int2 = {
    identify: intIdentify3,
    default: true,
    tag: "tag:yaml.org,2002:int",
    test: /^[-+]?[0-9][0-9_]*$/,
    resolve: (str, _onError, opt)=>intResolve2(str, 0, 10, opt),
    stringify: stringifyNumber
};
var intHex2 = {
    identify: intIdentify3,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "HEX",
    test: /^[-+]?0x[0-9a-fA-F_]+$/,
    resolve: (str, _onError, opt)=>intResolve2(str, 2, 16, opt),
    stringify: (node)=>intStringify2(node, 16, "0x")
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/set.js
var YAMLSet = class extends YAMLMap {
    add(key) {
        let pair;
        if (isPair(key)) pair = key;
        else if (typeof key === "object" && "key" in key && "value" in key && key.value === null) pair = new Pair(key.key, null);
        else pair = new Pair(key, null);
        const prev = findPair(this.items, pair.key);
        if (!prev) this.items.push(pair);
    }
    get(key, keepPair) {
        const pair = findPair(this.items, key);
        return !keepPair && isPair(pair) ? isScalar(pair.key) ? pair.key.value : pair.key : pair;
    }
    set(key, value1) {
        if (typeof value1 !== "boolean") throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value1}`);
        const prev = findPair(this.items, key);
        if (prev && !value1) {
            this.items.splice(this.items.indexOf(prev), 1);
        } else if (!prev && value1) {
            this.items.push(new Pair(key));
        }
    }
    toJSON(_, ctx) {
        return super.toJSON(_, ctx, Set);
    }
    toString(ctx, onComment, onChompKeep) {
        if (!ctx) return JSON.stringify(this);
        if (this.hasAllNullValues(true)) return super.toString(Object.assign({}, ctx, {
            allNullValues: true
        }), onComment, onChompKeep);
        else throw new Error("Set items must all have null values");
    }
    constructor(schema4){
        super(schema4);
        this.tag = YAMLSet.tag;
    }
};
YAMLSet.tag = "tag:yaml.org,2002:set";
var set = {
    collection: "map",
    identify: (value1)=>value1 instanceof Set,
    nodeClass: YAMLSet,
    default: false,
    tag: "tag:yaml.org,2002:set",
    resolve (map2, onError) {
        if (isMap(map2)) {
            if (map2.hasAllNullValues(true)) return Object.assign(new YAMLSet(), map2);
            else onError("Set items must all have null values");
        } else onError("Expected a mapping for this tag");
        return map2;
    },
    createNode (schema4, iterable, ctx) {
        const { replacer  } = ctx;
        const set2 = new YAMLSet(schema4);
        if (iterable && Symbol.iterator in Object(iterable)) for (let value1 of iterable){
            if (typeof replacer === "function") value1 = replacer.call(iterable, value1, value1);
            set2.items.push(createPair(value1, null, ctx));
        }
        return set2;
    }
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/timestamp.js
function parseSexagesimal(str, asBigInt) {
    const sign = str[0];
    const parts = sign === "-" || sign === "+" ? str.substring(1) : str;
    const num = (n)=>asBigInt ? BigInt(n) : Number(n);
    const res = parts.replace(/_/g, "").split(":").reduce((res2, p)=>res2 * num(60) + num(p), num(0));
    return sign === "-" ? num(-1) * res : res;
}
function stringifySexagesimal(node) {
    let { value: value1  } = node;
    let num = (n)=>n;
    if (typeof value1 === "bigint") num = (n)=>BigInt(n);
    else if (isNaN(value1) || !isFinite(value1)) return stringifyNumber(node);
    let sign = "";
    if (value1 < 0) {
        sign = "-";
        value1 *= num(-1);
    }
    const _60 = num(60);
    const parts = [
        value1 % _60
    ];
    if (value1 < 60) {
        parts.unshift(0);
    } else {
        value1 = (value1 - parts[0]) / _60;
        parts.unshift(value1 % _60);
        if (value1 >= 60) {
            value1 = (value1 - parts[0]) / _60;
            parts.unshift(value1);
        }
    }
    return sign + parts.map((n)=>n < 10 ? "0" + String(n) : String(n)).join(":").replace(/000000\d*$/, "");
}
var intTime = {
    identify: (value1)=>typeof value1 === "bigint" || Number.isInteger(value1),
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "TIME",
    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,
    resolve: (str, _onError, { intAsBigInt  })=>parseSexagesimal(str, intAsBigInt),
    stringify: stringifySexagesimal
};
var floatTime = {
    identify: (value1)=>typeof value1 === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    format: "TIME",
    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,
    resolve: (str)=>parseSexagesimal(str, false),
    stringify: stringifySexagesimal
};
var timestamp = {
    identify: (value1)=>value1 instanceof Date,
    default: true,
    tag: "tag:yaml.org,2002:timestamp",
    // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part
    // may be omitted altogether, resulting in a date format. In such a case, the time part is
    // assumed to be 00:00:00Z (start of day, UTC).
    test: RegExp("^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?$"),
    resolve (str) {
        const match = str.match(timestamp.test);
        if (!match) throw new Error("!!timestamp expects a date, starting with yyyy-mm-dd");
        const [, year, month, day, hour, minute, second] = match.map(Number);
        const millisec = match[7] ? Number((match[7] + "00").substr(1, 3)) : 0;
        let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);
        const tz = match[8];
        if (tz && tz !== "Z") {
            let d = parseSexagesimal(tz, false);
            if (Math.abs(d) < 30) d *= 60;
            date -= 6e4 * d;
        }
        return new Date(date);
    },
    stringify: ({ value: value1  })=>value1.toISOString().replace(/((T00:00)?:00)?\.000Z$/, "")
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/schema.js
var schema3 = [
    map,
    seq,
    string,
    nullTag,
    trueTag,
    falseTag,
    intBin,
    intOct2,
    int2,
    intHex2,
    floatNaN2,
    floatExp2,
    float2,
    binary,
    omap,
    pairs,
    set,
    intTime,
    floatTime,
    timestamp
];
// ../../node_modules/yaml/browser/dist/schema/tags.js
var schemas = /* @__PURE__ */ new Map([
    [
        "core",
        schema
    ],
    [
        "failsafe",
        [
            map,
            seq,
            string
        ]
    ],
    [
        "json",
        schema2
    ],
    [
        "yaml11",
        schema3
    ],
    [
        "yaml-1.1",
        schema3
    ]
]);
var tagsByName = {
    binary,
    bool: boolTag,
    float: lib_float,
    floatExp,
    floatNaN,
    floatTime,
    int: lib_int,
    intHex,
    intOct,
    intTime,
    map,
    null: nullTag,
    omap,
    pairs,
    seq,
    set,
    timestamp
};
var coreKnownTags = {
    "tag:yaml.org,2002:binary": binary,
    "tag:yaml.org,2002:omap": omap,
    "tag:yaml.org,2002:pairs": pairs,
    "tag:yaml.org,2002:set": set,
    "tag:yaml.org,2002:timestamp": timestamp
};
function getTags(customTags, schemaName) {
    let tags = schemas.get(schemaName);
    if (!tags) {
        if (Array.isArray(customTags)) tags = [];
        else {
            const keys = Array.from(schemas.keys()).filter((key)=>key !== "yaml11").map((key)=>JSON.stringify(key)).join(", ");
            throw new Error(`Unknown schema "${schemaName}"; use one of ${keys} or define customTags array`);
        }
    }
    if (Array.isArray(customTags)) {
        for (const tag of customTags)tags = tags.concat(tag);
    } else if (typeof customTags === "function") {
        tags = customTags(tags.slice());
    }
    return tags.map((tag)=>{
        if (typeof tag !== "string") return tag;
        const tagObj = tagsByName[tag];
        if (tagObj) return tagObj;
        const keys = Object.keys(tagsByName).map((key)=>JSON.stringify(key)).join(", ");
        throw new Error(`Unknown custom tag "${tag}"; use one of ${keys}`);
    });
}
// ../../node_modules/yaml/browser/dist/schema/Schema.js
var sortMapEntriesByKey = (a2, b)=>a2.key < b.key ? -1 : a2.key > b.key ? 1 : 0;
var Schema = class {
    clone() {
        const copy = Object.create(Schema.prototype, Object.getOwnPropertyDescriptors(this));
        copy.tags = this.tags.slice();
        return copy;
    }
    constructor({ compat , customTags , merge , resolveKnownTags , schema: schema4 , sortMapEntries , toStringDefaults  }){
        this.compat = Array.isArray(compat) ? getTags(compat, "compat") : compat ? getTags(null, compat) : null;
        this.merge = !!merge;
        this.name = typeof schema4 === "string" && schema4 || "core";
        this.knownTags = resolveKnownTags ? coreKnownTags : {};
        this.tags = getTags(customTags, this.name);
        this.toStringOptions = toStringDefaults || null;
        Object.defineProperty(this, MAP, {
            value: map
        });
        Object.defineProperty(this, SCALAR, {
            value: string
        });
        Object.defineProperty(this, SEQ, {
            value: seq
        });
        this.sortMapEntries = sortMapEntries === true ? sortMapEntriesByKey : sortMapEntries || null;
    }
};
// ../../node_modules/yaml/browser/dist/stringify/stringifyDocument.js
function stringifyDocument(doc, options) {
    var _a;
    const lines = [];
    let hasDirectives = options.directives === true;
    if (options.directives !== false && doc.directives) {
        const dir = doc.directives.toString(doc);
        if (dir) {
            lines.push(dir);
            hasDirectives = true;
        } else if (doc.directives.docStart) hasDirectives = true;
    }
    if (hasDirectives) lines.push("---");
    const ctx = createStringifyContext(doc, options);
    const { commentString  } = ctx.options;
    if (doc.commentBefore) {
        if (lines.length !== 1) lines.unshift("");
        const cs = commentString(doc.commentBefore);
        lines.unshift(indentComment(cs, ""));
    }
    let chompKeep = false;
    let contentComment = null;
    if (doc.contents) {
        if (isNode(doc.contents)) {
            if (doc.contents.spaceBefore && hasDirectives) lines.push("");
            if (doc.contents.commentBefore) {
                const cs = commentString(doc.contents.commentBefore);
                lines.push(indentComment(cs, ""));
            }
            ctx.forceBlockIndent = !!doc.comment;
            contentComment = doc.contents.comment;
        }
        const onChompKeep = contentComment ? void 0 : ()=>chompKeep = true;
        let body = stringify(doc.contents, ctx, ()=>contentComment = null, onChompKeep);
        if (contentComment) body += lineComment(body, "", commentString(contentComment));
        if ((body[0] === "|" || body[0] === ">") && lines[lines.length - 1] === "---") {
            lines[lines.length - 1] = `--- ${body}`;
        } else lines.push(body);
    } else {
        lines.push(stringify(doc.contents, ctx));
    }
    if ((_a = doc.directives) === null || _a === void 0 ? void 0 : _a.docEnd) {
        if (doc.comment) {
            const cs = commentString(doc.comment);
            if (cs.includes("\n")) {
                lines.push("...");
                lines.push(indentComment(cs, ""));
            } else {
                lines.push(`... ${cs}`);
            }
        } else {
            lines.push("...");
        }
    } else {
        let dc = doc.comment;
        if (dc && chompKeep) dc = dc.replace(/^\n+/, "");
        if (dc) {
            if ((!chompKeep || contentComment) && lines[lines.length - 1] !== "") lines.push("");
            lines.push(indentComment(commentString(dc), ""));
        }
    }
    return lines.join("\n") + "\n";
}
// ../../node_modules/yaml/browser/dist/doc/applyReviver.js
function applyReviver(reviver, obj, key, val) {
    if (val && typeof val === "object") {
        if (Array.isArray(val)) {
            for(let i = 0, len = val.length; i < len; ++i){
                const v0 = val[i];
                const v1 = applyReviver(reviver, val, String(i), v0);
                if (v1 === void 0) delete val[i];
                else if (v1 !== v0) val[i] = v1;
            }
        } else if (val instanceof Map) {
            for (const k of Array.from(val.keys())){
                const v0 = val.get(k);
                const v1 = applyReviver(reviver, val, k, v0);
                if (v1 === void 0) val.delete(k);
                else if (v1 !== v0) val.set(k, v1);
            }
        } else if (val instanceof Set) {
            for (const v0 of Array.from(val)){
                const v1 = applyReviver(reviver, val, v0, v0);
                if (v1 === void 0) val.delete(v0);
                else if (v1 !== v0) {
                    val.delete(v0);
                    val.add(v1);
                }
            }
        } else {
            for (const [k, v0] of Object.entries(val)){
                const v1 = applyReviver(reviver, val, k, v0);
                if (v1 === void 0) delete val[k];
                else if (v1 !== v0) val[k] = v1;
            }
        }
    }
    return reviver.call(obj, key, val);
}
// ../../node_modules/yaml/browser/dist/doc/Document.js
var Document = class {
    /**
   * Create a deep copy of this Document and its contents.
   *
   * Custom Node values that inherit from `Object` still refer to their original instances.
   */ clone() {
        const copy = Object.create(Document.prototype, {
            [NODE_TYPE]: {
                value: DOC
            }
        });
        copy.commentBefore = this.commentBefore;
        copy.comment = this.comment;
        copy.errors = this.errors.slice();
        copy.warnings = this.warnings.slice();
        copy.options = Object.assign({}, this.options);
        if (this.directives) copy.directives = this.directives.clone();
        copy.schema = this.schema.clone();
        copy.contents = isNode(this.contents) ? this.contents.clone(copy.schema) : this.contents;
        if (this.range) copy.range = this.range.slice();
        return copy;
    }
    /** Adds a value to the document. */ add(value1) {
        if (assertCollection(this.contents)) this.contents.add(value1);
    }
    /** Adds a value to the document. */ addIn(path5, value1) {
        if (assertCollection(this.contents)) this.contents.addIn(path5, value1);
    }
    /**
   * Create a new `Alias` node, ensuring that the target `node` has the required anchor.
   *
   * If `node` already has an anchor, `name` is ignored.
   * Otherwise, the `node.anchor` value will be set to `name`,
   * or if an anchor with that name is already present in the document,
   * `name` will be used as a prefix for a new unique anchor.
   * If `name` is undefined, the generated anchor will use 'a' as a prefix.
   */ createAlias(node, name) {
        if (!node.anchor) {
            const prev = anchorNames(this);
            node.anchor = !name || prev.has(name) ? findNewAnchor(name || "a", prev) : name;
        }
        return new Alias(node.anchor);
    }
    createNode(value1, replacer, options) {
        let _replacer = void 0;
        if (typeof replacer === "function") {
            value1 = replacer.call({
                "": value1
            }, "", value1);
            _replacer = replacer;
        } else if (Array.isArray(replacer)) {
            const keyToStr = (v)=>typeof v === "number" || v instanceof String || v instanceof Number;
            const asStr = replacer.filter(keyToStr).map(String);
            if (asStr.length > 0) replacer = replacer.concat(asStr);
            _replacer = replacer;
        } else if (options === void 0 && replacer) {
            options = replacer;
            replacer = void 0;
        }
        const { aliasDuplicateObjects , anchorPrefix , flow , keepUndefined , onTagObj , tag  } = options || {};
        const { onAnchor , setAnchors , sourceObjects  } = createNodeAnchors(this, anchorPrefix || "a");
        const ctx = {
            aliasDuplicateObjects: aliasDuplicateObjects !== null && aliasDuplicateObjects !== void 0 ? aliasDuplicateObjects : true,
            keepUndefined: keepUndefined !== null && keepUndefined !== void 0 ? keepUndefined : false,
            onAnchor,
            onTagObj,
            replacer: _replacer,
            schema: this.schema,
            sourceObjects
        };
        const node = createNode(value1, tag, ctx);
        if (flow && isCollection(node)) node.flow = true;
        setAnchors();
        return node;
    }
    /**
   * Convert a key and a value into a `Pair` using the current schema,
   * recursively wrapping all values as `Scalar` or `Collection` nodes.
   */ createPair(key, value1, options = {}) {
        const k = this.createNode(key, null, options);
        const v = this.createNode(value1, null, options);
        return new Pair(k, v);
    }
    /**
   * Removes a value from the document.
   * @returns `true` if the item was found and removed.
   */ delete(key) {
        return assertCollection(this.contents) ? this.contents.delete(key) : false;
    }
    /**
   * Removes a value from the document.
   * @returns `true` if the item was found and removed.
   */ deleteIn(path5) {
        if (isEmptyPath(path5)) {
            if (this.contents == null) return false;
            this.contents = null;
            return true;
        }
        return assertCollection(this.contents) ? this.contents.deleteIn(path5) : false;
    }
    /**
   * Returns item at `key`, or `undefined` if not found. By default unwraps
   * scalar values from their surrounding node; to disable set `keepScalar` to
   * `true` (collections are always returned intact).
   */ get(key, keepScalar) {
        return isCollection(this.contents) ? this.contents.get(key, keepScalar) : void 0;
    }
    /**
   * Returns item at `path`, or `undefined` if not found. By default unwraps
   * scalar values from their surrounding node; to disable set `keepScalar` to
   * `true` (collections are always returned intact).
   */ getIn(path5, keepScalar) {
        if (isEmptyPath(path5)) return !keepScalar && isScalar(this.contents) ? this.contents.value : this.contents;
        return isCollection(this.contents) ? this.contents.getIn(path5, keepScalar) : void 0;
    }
    /**
   * Checks if the document includes a value with the key `key`.
   */ has(key) {
        return isCollection(this.contents) ? this.contents.has(key) : false;
    }
    /**
   * Checks if the document includes a value at `path`.
   */ hasIn(path5) {
        if (isEmptyPath(path5)) return this.contents !== void 0;
        return isCollection(this.contents) ? this.contents.hasIn(path5) : false;
    }
    /**
   * Sets a value in this document. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   */ set(key, value1) {
        if (this.contents == null) {
            this.contents = collectionFromPath(this.schema, [
                key
            ], value1);
        } else if (assertCollection(this.contents)) {
            this.contents.set(key, value1);
        }
    }
    /**
   * Sets a value in this document. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   */ setIn(path5, value1) {
        if (isEmptyPath(path5)) this.contents = value1;
        else if (this.contents == null) {
            this.contents = collectionFromPath(this.schema, Array.from(path5), value1);
        } else if (assertCollection(this.contents)) {
            this.contents.setIn(path5, value1);
        }
    }
    /**
   * Change the YAML version and schema used by the document.
   * A `null` version disables support for directives, explicit tags, anchors, and aliases.
   * It also requires the `schema` option to be given as a `Schema` instance value.
   *
   * Overrides all previously set schema options.
   */ setSchema(version, options = {}) {
        if (typeof version === "number") version = String(version);
        let opt;
        switch(version){
            case "1.1":
                if (this.directives) this.directives.yaml.version = "1.1";
                else this.directives = new Directives({
                    version: "1.1"
                });
                opt = {
                    merge: true,
                    resolveKnownTags: false,
                    schema: "yaml-1.1"
                };
                break;
            case "1.2":
                if (this.directives) this.directives.yaml.version = "1.2";
                else this.directives = new Directives({
                    version: "1.2"
                });
                opt = {
                    merge: false,
                    resolveKnownTags: true,
                    schema: "core"
                };
                break;
            case null:
                if (this.directives) delete this.directives;
                opt = null;
                break;
            default:
                {
                    const sv = JSON.stringify(version);
                    throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${sv}`);
                }
        }
        if (options.schema instanceof Object) this.schema = options.schema;
        else if (opt) this.schema = new Schema(Object.assign(opt, options));
        else throw new Error(`With a null YAML version, the { schema: Schema } option is required`);
    }
    // json & jsonArg are only used from toJSON()
    toJS({ json , jsonArg , mapAsMap , maxAliasCount , onAnchor , reviver  } = {}) {
        const ctx = {
            anchors: /* @__PURE__ */ new Map(),
            doc: this,
            keep: !json,
            mapAsMap: mapAsMap === true,
            mapKeyWarned: false,
            maxAliasCount: typeof maxAliasCount === "number" ? maxAliasCount : 100,
            stringify
        };
        const res = toJS(this.contents, jsonArg || "", ctx);
        if (typeof onAnchor === "function") for (const { count , res: res2  } of ctx.anchors.values())onAnchor(res2, count);
        return typeof reviver === "function" ? applyReviver(reviver, {
            "": res
        }, "", res) : res;
    }
    /**
   * A JSON representation of the document `contents`.
   *
   * @param jsonArg Used by `JSON.stringify` to indicate the array index or
   *   property name.
   */ toJSON(jsonArg, onAnchor) {
        return this.toJS({
            json: true,
            jsonArg,
            mapAsMap: false,
            onAnchor
        });
    }
    /** A YAML representation of the document. */ toString(options = {}) {
        if (this.errors.length > 0) throw new Error("Document with errors cannot be stringified");
        if ("indent" in options && (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {
            const s = JSON.stringify(options.indent);
            throw new Error(`"indent" option must be a positive integer, not ${s}`);
        }
        return stringifyDocument(this, options);
    }
    constructor(value1, replacer, options){
        this.commentBefore = null;
        this.comment = null;
        this.errors = [];
        this.warnings = [];
        Object.defineProperty(this, NODE_TYPE, {
            value: DOC
        });
        let _replacer = null;
        if (typeof replacer === "function" || Array.isArray(replacer)) {
            _replacer = replacer;
        } else if (options === void 0 && replacer) {
            options = replacer;
            replacer = void 0;
        }
        const opt = Object.assign({
            intAsBigInt: false,
            keepSourceTokens: false,
            logLevel: "warn",
            prettyErrors: true,
            strict: true,
            uniqueKeys: true,
            version: "1.2"
        }, options);
        this.options = opt;
        let { version  } = opt;
        if (options === null || options === void 0 ? void 0 : options.directives) {
            this.directives = options.directives.atDocument();
            if (this.directives.yaml.explicit) version = this.directives.yaml.version;
        } else this.directives = new Directives({
            version
        });
        this.setSchema(version, options);
        if (value1 === void 0) this.contents = null;
        else {
            this.contents = this.createNode(value1, _replacer, options);
        }
    }
};
function assertCollection(contents) {
    if (isCollection(contents)) return true;
    throw new Error("Expected a YAML collection as document contents");
}
// ../../node_modules/yaml/browser/dist/errors.js
var YAMLError = class extends Error {
    constructor(name, pos, code, message){
        super();
        this.name = name;
        this.code = code;
        this.message = message;
        this.pos = pos;
    }
};
var YAMLParseError = class extends YAMLError {
    constructor(pos, code, message){
        super("YAMLParseError", pos, code, message);
    }
};
var YAMLWarning = class extends YAMLError {
    constructor(pos, code, message){
        super("YAMLWarning", pos, code, message);
    }
};
var prettifyError = (src, lc)=>(error)=>{
        if (error.pos[0] === -1) return;
        error.linePos = error.pos.map((pos)=>lc.linePos(pos));
        const { line , col  } = error.linePos[0];
        error.message += ` at line ${line}, column ${col}`;
        let ci = col - 1;
        let lineStr = src.substring(lc.lineStarts[line - 1], lc.lineStarts[line]).replace(/[\n\r]+$/, "");
        if (ci >= 60 && lineStr.length > 80) {
            const trimStart = Math.min(ci - 39, lineStr.length - 79);
            lineStr = "\u2026" + lineStr.substring(trimStart);
            ci -= trimStart - 1;
        }
        if (lineStr.length > 80) lineStr = lineStr.substring(0, 79) + "\u2026";
        if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {
            let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);
            if (prev.length > 80) prev = prev.substring(0, 79) + "\u2026\n";
            lineStr = prev + lineStr;
        }
        if (/[^ ]/.test(lineStr)) {
            let count = 1;
            const end = error.linePos[1];
            if (end && end.line === line && end.col > col) {
                count = Math.min(end.col - col, 80 - ci);
            }
            const pointer = " ".repeat(ci) + "^".repeat(count);
            error.message += `:

${lineStr}
${pointer}
`;
        }
    };
// ../../node_modules/yaml/browser/dist/compose/resolve-props.js
function resolveProps(tokens, { flow , indicator , next , offset , onError , startOnNewline  }) {
    let spaceBefore = false;
    let atNewline = startOnNewline;
    let hasSpace = startOnNewline;
    let comment = "";
    let commentSep = "";
    let hasNewline = false;
    let reqSpace = false;
    let anchor = null;
    let tag = null;
    let comma = null;
    let found = null;
    let start = null;
    for (const token of tokens){
        if (reqSpace) {
            if (token.type !== "space" && token.type !== "newline" && token.type !== "comma") onError(token.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space");
            reqSpace = false;
        }
        switch(token.type){
            case "space":
                if (!flow && atNewline && indicator !== "doc-start" && token.source[0] === "	") onError(token, "TAB_AS_INDENT", "Tabs are not allowed as indentation");
                hasSpace = true;
                break;
            case "comment":
                {
                    if (!hasSpace) onError(token, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
                    const cb = token.source.substring(1) || " ";
                    if (!comment) comment = cb;
                    else comment += commentSep + cb;
                    commentSep = "";
                    atNewline = false;
                    break;
                }
            case "newline":
                if (atNewline) {
                    if (comment) comment += token.source;
                    else spaceBefore = true;
                } else commentSep += token.source;
                atNewline = true;
                hasNewline = true;
                hasSpace = true;
                break;
            case "anchor":
                if (anchor) onError(token, "MULTIPLE_ANCHORS", "A node can have at most one anchor");
                if (token.source.endsWith(":")) onError(token.offset + token.source.length - 1, "BAD_ALIAS", "Anchor ending in : is ambiguous", true);
                anchor = token;
                if (start === null) start = token.offset;
                atNewline = false;
                hasSpace = false;
                reqSpace = true;
                break;
            case "tag":
                {
                    if (tag) onError(token, "MULTIPLE_TAGS", "A node can have at most one tag");
                    tag = token;
                    if (start === null) start = token.offset;
                    atNewline = false;
                    hasSpace = false;
                    reqSpace = true;
                    break;
                }
            case indicator:
                if (anchor || tag) onError(token, "BAD_PROP_ORDER", `Anchors and tags must be after the ${token.source} indicator`);
                if (found) onError(token, "UNEXPECTED_TOKEN", `Unexpected ${token.source} in ${flow || "collection"}`);
                found = token;
                atNewline = false;
                hasSpace = false;
                break;
            case "comma":
                if (flow) {
                    if (comma) onError(token, "UNEXPECTED_TOKEN", `Unexpected , in ${flow}`);
                    comma = token;
                    atNewline = false;
                    hasSpace = false;
                    break;
                }
            default:
                onError(token, "UNEXPECTED_TOKEN", `Unexpected ${token.type} token`);
                atNewline = false;
                hasSpace = false;
        }
    }
    const last = tokens[tokens.length - 1];
    const end = last ? last.offset + last.source.length : offset;
    if (reqSpace && next && next.type !== "space" && next.type !== "newline" && next.type !== "comma" && (next.type !== "scalar" || next.source !== "")) onError(next.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space");
    return {
        comma,
        found,
        spaceBefore,
        comment,
        hasNewline,
        anchor,
        tag,
        end,
        start: start !== null && start !== void 0 ? start : end
    };
}
// ../../node_modules/yaml/browser/dist/compose/util-contains-newline.js
function containsNewline(key) {
    if (!key) return null;
    switch(key.type){
        case "alias":
        case "scalar":
        case "double-quoted-scalar":
        case "single-quoted-scalar":
            if (key.source.includes("\n")) return true;
            if (key.end) {
                for (const st of key.end)if (st.type === "newline") return true;
            }
            return false;
        case "flow-collection":
            for (const it of key.items){
                for (const st of it.start)if (st.type === "newline") return true;
                if (it.sep) {
                    for (const st of it.sep)if (st.type === "newline") return true;
                }
                if (containsNewline(it.key) || containsNewline(it.value)) return true;
            }
            return false;
        default:
            return true;
    }
}
// ../../node_modules/yaml/browser/dist/compose/util-flow-indent-check.js
function flowIndentCheck(indent, fc, onError) {
    if ((fc === null || fc === void 0 ? void 0 : fc.type) === "flow-collection") {
        const end = fc.end[0];
        if (end.indent === indent && (end.source === "]" || end.source === "}") && containsNewline(fc)) {
            const msg = "Flow end indicator should be more indented than parent";
            onError(end, "BAD_INDENT", msg, true);
        }
    }
}
// ../../node_modules/yaml/browser/dist/compose/util-map-includes.js
function mapIncludes(ctx, items, search) {
    const { uniqueKeys  } = ctx.options;
    if (uniqueKeys === false) return false;
    const isEqual = typeof uniqueKeys === "function" ? uniqueKeys : (a2, b)=>a2 === b || isScalar(a2) && isScalar(b) && a2.value === b.value && !(a2.value === "<<" && ctx.schema.merge);
    return items.some((pair)=>isEqual(pair.key, search));
}
// ../../node_modules/yaml/browser/dist/compose/resolve-block-map.js
var startColMsg = "All mapping items must start at the same column";
function resolveBlockMap({ composeNode: composeNode2 , composeEmptyNode: composeEmptyNode2  }, ctx, bm, onError) {
    var _a;
    const map2 = new YAMLMap(ctx.schema);
    if (ctx.atRoot) ctx.atRoot = false;
    let offset = bm.offset;
    for (const collItem of bm.items){
        const { start , key , sep , value: value1  } = collItem;
        const keyProps = resolveProps(start, {
            indicator: "explicit-key-ind",
            next: key || (sep === null || sep === void 0 ? void 0 : sep[0]),
            offset,
            onError,
            startOnNewline: true
        });
        const implicitKey = !keyProps.found;
        if (implicitKey) {
            if (key) {
                if (key.type === "block-seq") onError(offset, "BLOCK_AS_IMPLICIT_KEY", "A block sequence may not be used as an implicit map key");
                else if ("indent" in key && key.indent !== bm.indent) onError(offset, "BAD_INDENT", startColMsg);
            }
            if (!keyProps.anchor && !keyProps.tag && !sep) {
                if (keyProps.comment) {
                    if (map2.comment) map2.comment += "\n" + keyProps.comment;
                    else map2.comment = keyProps.comment;
                }
                continue;
            }
        } else if (((_a = keyProps.found) === null || _a === void 0 ? void 0 : _a.indent) !== bm.indent) onError(offset, "BAD_INDENT", startColMsg);
        if (implicitKey && containsNewline(key)) onError(key, // checked by containsNewline()
        "MULTILINE_IMPLICIT_KEY", "Implicit keys need to be on a single line");
        const keyStart = keyProps.end;
        const keyNode = key ? composeNode2(ctx, key, keyProps, onError) : composeEmptyNode2(ctx, keyStart, start, null, keyProps, onError);
        if (ctx.schema.compat) flowIndentCheck(bm.indent, key, onError);
        if (mapIncludes(ctx, map2.items, keyNode)) onError(keyStart, "DUPLICATE_KEY", "Map keys must be unique");
        const valueProps = resolveProps(sep || [], {
            indicator: "map-value-ind",
            next: value1,
            offset: keyNode.range[2],
            onError,
            startOnNewline: !key || key.type === "block-scalar"
        });
        offset = valueProps.end;
        if (valueProps.found) {
            if (implicitKey) {
                if ((value1 === null || value1 === void 0 ? void 0 : value1.type) === "block-map" && !valueProps.hasNewline) onError(offset, "BLOCK_AS_IMPLICIT_KEY", "Nested mappings are not allowed in compact mappings");
                if (ctx.options.strict && keyProps.start < valueProps.found.offset - 1024) onError(keyNode.range, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit block mapping key");
            }
            const valueNode = value1 ? composeNode2(ctx, value1, valueProps, onError) : composeEmptyNode2(ctx, offset, sep, null, valueProps, onError);
            if (ctx.schema.compat) flowIndentCheck(bm.indent, value1, onError);
            offset = valueNode.range[2];
            const pair = new Pair(keyNode, valueNode);
            if (ctx.options.keepSourceTokens) pair.srcToken = collItem;
            map2.items.push(pair);
        } else {
            if (implicitKey) onError(keyNode.range, "MISSING_CHAR", "Implicit map keys need to be followed by map values");
            if (valueProps.comment) {
                if (keyNode.comment) keyNode.comment += "\n" + valueProps.comment;
                else keyNode.comment = valueProps.comment;
            }
            const pair = new Pair(keyNode);
            if (ctx.options.keepSourceTokens) pair.srcToken = collItem;
            map2.items.push(pair);
        }
    }
    map2.range = [
        bm.offset,
        offset,
        offset
    ];
    return map2;
}
// ../../node_modules/yaml/browser/dist/compose/resolve-block-seq.js
function resolveBlockSeq({ composeNode: composeNode2 , composeEmptyNode: composeEmptyNode2  }, ctx, bs, onError) {
    const seq2 = new YAMLSeq(ctx.schema);
    if (ctx.atRoot) ctx.atRoot = false;
    let offset = bs.offset;
    for (const { start , value: value1  } of bs.items){
        const props = resolveProps(start, {
            indicator: "seq-item-ind",
            next: value1,
            offset,
            onError,
            startOnNewline: true
        });
        offset = props.end;
        if (!props.found) {
            if (props.anchor || props.tag || value1) {
                if (value1 && value1.type === "block-seq") onError(offset, "BAD_INDENT", "All sequence items must start at the same column");
                else onError(offset, "MISSING_CHAR", "Sequence item without - indicator");
            } else {
                if (props.comment) seq2.comment = props.comment;
                continue;
            }
        }
        const node = value1 ? composeNode2(ctx, value1, props, onError) : composeEmptyNode2(ctx, offset, start, null, props, onError);
        if (ctx.schema.compat) flowIndentCheck(bs.indent, value1, onError);
        offset = node.range[2];
        seq2.items.push(node);
    }
    seq2.range = [
        bs.offset,
        offset,
        offset
    ];
    return seq2;
}
// ../../node_modules/yaml/browser/dist/compose/resolve-end.js
function resolveEnd(end, offset, reqSpace, onError) {
    let comment = "";
    if (end) {
        let hasSpace = false;
        let sep = "";
        for (const token of end){
            const { source , type  } = token;
            switch(type){
                case "space":
                    hasSpace = true;
                    break;
                case "comment":
                    {
                        if (reqSpace && !hasSpace) onError(token, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
                        const cb = source.substring(1) || " ";
                        if (!comment) comment = cb;
                        else comment += sep + cb;
                        sep = "";
                        break;
                    }
                case "newline":
                    if (comment) sep += source;
                    hasSpace = true;
                    break;
                default:
                    onError(token, "UNEXPECTED_TOKEN", `Unexpected ${type} at node end`);
            }
            offset += source.length;
        }
    }
    return {
        comment,
        offset
    };
}
// ../../node_modules/yaml/browser/dist/compose/resolve-flow-collection.js
var blockMsg = "Block collections are not allowed within flow collections";
var isBlock = (token)=>token && (token.type === "block-map" || token.type === "block-seq");
function resolveFlowCollection({ composeNode: composeNode2 , composeEmptyNode: composeEmptyNode2  }, ctx, fc, onError) {
    const isMap2 = fc.start.source === "{";
    const fcName = isMap2 ? "flow map" : "flow sequence";
    const coll = isMap2 ? new YAMLMap(ctx.schema) : new YAMLSeq(ctx.schema);
    coll.flow = true;
    const atRoot = ctx.atRoot;
    if (atRoot) ctx.atRoot = false;
    let offset = fc.offset + fc.start.source.length;
    for(let i = 0; i < fc.items.length; ++i){
        const collItem = fc.items[i];
        const { start , key , sep , value: value1  } = collItem;
        const props = resolveProps(start, {
            flow: fcName,
            indicator: "explicit-key-ind",
            next: key || (sep === null || sep === void 0 ? void 0 : sep[0]),
            offset,
            onError,
            startOnNewline: false
        });
        if (!props.found) {
            if (!props.anchor && !props.tag && !sep && !value1) {
                if (i === 0 && props.comma) onError(props.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${fcName}`);
                else if (i < fc.items.length - 1) onError(props.start, "UNEXPECTED_TOKEN", `Unexpected empty item in ${fcName}`);
                if (props.comment) {
                    if (coll.comment) coll.comment += "\n" + props.comment;
                    else coll.comment = props.comment;
                }
                offset = props.end;
                continue;
            }
            if (!isMap2 && ctx.options.strict && containsNewline(key)) onError(key, // checked by containsNewline()
            "MULTILINE_IMPLICIT_KEY", "Implicit keys of flow sequence pairs need to be on a single line");
        }
        if (i === 0) {
            if (props.comma) onError(props.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${fcName}`);
        } else {
            if (!props.comma) onError(props.start, "MISSING_CHAR", `Missing , between ${fcName} items`);
            if (props.comment) {
                let prevItemComment = "";
                loop: for (const st of start){
                    switch(st.type){
                        case "comma":
                        case "space":
                            break;
                        case "comment":
                            prevItemComment = st.source.substring(1);
                            break loop;
                        default:
                            break loop;
                    }
                }
                if (prevItemComment) {
                    let prev = coll.items[coll.items.length - 1];
                    if (isPair(prev)) prev = prev.value || prev.key;
                    if (prev.comment) prev.comment += "\n" + prevItemComment;
                    else prev.comment = prevItemComment;
                    props.comment = props.comment.substring(prevItemComment.length + 1);
                }
            }
        }
        if (!isMap2 && !sep && !props.found) {
            const valueNode = value1 ? composeNode2(ctx, value1, props, onError) : composeEmptyNode2(ctx, props.end, sep, null, props, onError);
            coll.items.push(valueNode);
            offset = valueNode.range[2];
            if (isBlock(value1)) onError(valueNode.range, "BLOCK_IN_FLOW", blockMsg);
        } else {
            const keyStart = props.end;
            const keyNode = key ? composeNode2(ctx, key, props, onError) : composeEmptyNode2(ctx, keyStart, start, null, props, onError);
            if (isBlock(key)) onError(keyNode.range, "BLOCK_IN_FLOW", blockMsg);
            const valueProps = resolveProps(sep || [], {
                flow: fcName,
                indicator: "map-value-ind",
                next: value1,
                offset: keyNode.range[2],
                onError,
                startOnNewline: false
            });
            if (valueProps.found) {
                if (!isMap2 && !props.found && ctx.options.strict) {
                    if (sep) for (const st of sep){
                        if (st === valueProps.found) break;
                        if (st.type === "newline") {
                            onError(st, "MULTILINE_IMPLICIT_KEY", "Implicit keys of flow sequence pairs need to be on a single line");
                            break;
                        }
                    }
                    if (props.start < valueProps.found.offset - 1024) onError(valueProps.found, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit flow sequence key");
                }
            } else if (value1) {
                if ("source" in value1 && value1.source && value1.source[0] === ":") onError(value1, "MISSING_CHAR", `Missing space after : in ${fcName}`);
                else onError(valueProps.start, "MISSING_CHAR", `Missing , or : between ${fcName} items`);
            }
            const valueNode = value1 ? composeNode2(ctx, value1, valueProps, onError) : valueProps.found ? composeEmptyNode2(ctx, valueProps.end, sep, null, valueProps, onError) : null;
            if (valueNode) {
                if (isBlock(value1)) onError(valueNode.range, "BLOCK_IN_FLOW", blockMsg);
            } else if (valueProps.comment) {
                if (keyNode.comment) keyNode.comment += "\n" + valueProps.comment;
                else keyNode.comment = valueProps.comment;
            }
            const pair = new Pair(keyNode, valueNode);
            if (ctx.options.keepSourceTokens) pair.srcToken = collItem;
            if (isMap2) {
                const map2 = coll;
                if (mapIncludes(ctx, map2.items, keyNode)) onError(keyStart, "DUPLICATE_KEY", "Map keys must be unique");
                map2.items.push(pair);
            } else {
                const map2 = new YAMLMap(ctx.schema);
                map2.flow = true;
                map2.items.push(pair);
                coll.items.push(map2);
            }
            offset = valueNode ? valueNode.range[2] : valueProps.end;
        }
    }
    const expectedEnd = isMap2 ? "}" : "]";
    const [ce, ...ee] = fc.end;
    let cePos = offset;
    if (ce && ce.source === expectedEnd) cePos = ce.offset + ce.source.length;
    else {
        const name = fcName[0].toUpperCase() + fcName.substring(1);
        const msg = atRoot ? `${name} must end with a ${expectedEnd}` : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;
        onError(offset, atRoot ? "MISSING_CHAR" : "BAD_INDENT", msg);
        if (ce && ce.source.length !== 1) ee.unshift(ce);
    }
    if (ee.length > 0) {
        const end = resolveEnd(ee, cePos, ctx.options.strict, onError);
        if (end.comment) {
            if (coll.comment) coll.comment += "\n" + end.comment;
            else coll.comment = end.comment;
        }
        coll.range = [
            fc.offset,
            cePos,
            end.offset
        ];
    } else {
        coll.range = [
            fc.offset,
            cePos,
            cePos
        ];
    }
    return coll;
}
// ../../node_modules/yaml/browser/dist/compose/compose-collection.js
function composeCollection(CN2, ctx, token, tagToken, onError) {
    let coll;
    switch(token.type){
        case "block-map":
            {
                coll = resolveBlockMap(CN2, ctx, token, onError);
                break;
            }
        case "block-seq":
            {
                coll = resolveBlockSeq(CN2, ctx, token, onError);
                break;
            }
        case "flow-collection":
            {
                coll = resolveFlowCollection(CN2, ctx, token, onError);
                break;
            }
    }
    if (!tagToken) return coll;
    const tagName = ctx.directives.tagName(tagToken.source, (msg)=>onError(tagToken, "TAG_RESOLVE_FAILED", msg));
    if (!tagName) return coll;
    const Coll = coll.constructor;
    if (tagName === "!" || tagName === Coll.tagName) {
        coll.tag = Coll.tagName;
        return coll;
    }
    const expType = isMap(coll) ? "map" : "seq";
    let tag = ctx.schema.tags.find((t)=>t.collection === expType && t.tag === tagName);
    if (!tag) {
        const kt = ctx.schema.knownTags[tagName];
        if (kt && kt.collection === expType) {
            ctx.schema.tags.push(Object.assign({}, kt, {
                default: false
            }));
            tag = kt;
        } else {
            onError(tagToken, "TAG_RESOLVE_FAILED", `Unresolved tag: ${tagName}`, true);
            coll.tag = tagName;
            return coll;
        }
    }
    const res = tag.resolve(coll, (msg)=>onError(tagToken, "TAG_RESOLVE_FAILED", msg), ctx.options);
    const node = isNode(res) ? res : new Scalar(res);
    node.range = coll.range;
    node.tag = tagName;
    if (tag === null || tag === void 0 ? void 0 : tag.format) node.format = tag.format;
    return node;
}
// ../../node_modules/yaml/browser/dist/compose/resolve-block-scalar.js
function resolveBlockScalar(scalar, strict, onError) {
    const start = scalar.offset;
    const header = parseBlockScalarHeader(scalar, strict, onError);
    if (!header) return {
        value: "",
        type: null,
        comment: "",
        range: [
            start,
            start,
            start
        ]
    };
    const type = header.mode === ">" ? Scalar.BLOCK_FOLDED : Scalar.BLOCK_LITERAL;
    const lines = scalar.source ? splitLines(scalar.source) : [];
    let chompStart = lines.length;
    for(let i = lines.length - 1; i >= 0; --i){
        const content = lines[i][1];
        if (content === "" || content === "\r") chompStart = i;
        else break;
    }
    if (chompStart === 0) {
        const value2 = header.chomp === "+" && lines.length > 0 ? "\n".repeat(Math.max(1, lines.length - 1)) : "";
        let end2 = start + header.length;
        if (scalar.source) end2 += scalar.source.length;
        return {
            value: value2,
            type,
            comment: header.comment,
            range: [
                start,
                end2,
                end2
            ]
        };
    }
    let trimIndent = scalar.indent + header.indent;
    let offset = scalar.offset + header.length;
    let contentStart = 0;
    for(let i = 0; i < chompStart; ++i){
        const [indent, content] = lines[i];
        if (content === "" || content === "\r") {
            if (header.indent === 0 && indent.length > trimIndent) trimIndent = indent.length;
        } else {
            if (indent.length < trimIndent) {
                const message = "Block scalars with more-indented leading empty lines must use an explicit indentation indicator";
                onError(offset + indent.length, "MISSING_CHAR", message);
            }
            if (header.indent === 0) trimIndent = indent.length;
            contentStart = i;
            break;
        }
        offset += indent.length + content.length + 1;
    }
    for(let i = lines.length - 1; i >= chompStart; --i){
        if (lines[i][0].length > trimIndent) chompStart = i + 1;
    }
    let value1 = "";
    let sep = "";
    let prevMoreIndented = false;
    for(let i = 0; i < contentStart; ++i)value1 += lines[i][0].slice(trimIndent) + "\n";
    for(let i = contentStart; i < chompStart; ++i){
        let [indent, content] = lines[i];
        offset += indent.length + content.length + 1;
        const crlf = content[content.length - 1] === "\r";
        if (crlf) content = content.slice(0, -1);
        if (content && indent.length < trimIndent) {
            const src = header.indent ? "explicit indentation indicator" : "first line";
            const message = `Block scalar lines must not be less indented than their ${src}`;
            onError(offset - content.length - (crlf ? 2 : 1), "BAD_INDENT", message);
            indent = "";
        }
        if (type === Scalar.BLOCK_LITERAL) {
            value1 += sep + indent.slice(trimIndent) + content;
            sep = "\n";
        } else if (indent.length > trimIndent || content[0] === "	") {
            if (sep === " ") sep = "\n";
            else if (!prevMoreIndented && sep === "\n") sep = "\n\n";
            value1 += sep + indent.slice(trimIndent) + content;
            sep = "\n";
            prevMoreIndented = true;
        } else if (content === "") {
            if (sep === "\n") value1 += "\n";
            else sep = "\n";
        } else {
            value1 += sep + content;
            sep = " ";
            prevMoreIndented = false;
        }
    }
    switch(header.chomp){
        case "-":
            break;
        case "+":
            for(let i = chompStart; i < lines.length; ++i)value1 += "\n" + lines[i][0].slice(trimIndent);
            if (value1[value1.length - 1] !== "\n") value1 += "\n";
            break;
        default:
            value1 += "\n";
    }
    const end = start + header.length + scalar.source.length;
    return {
        value: value1,
        type,
        comment: header.comment,
        range: [
            start,
            end,
            end
        ]
    };
}
function parseBlockScalarHeader({ offset , props  }, strict, onError) {
    if (props[0].type !== "block-scalar-header") {
        onError(props[0], "IMPOSSIBLE", "Block scalar header not found");
        return null;
    }
    const { source  } = props[0];
    const mode = source[0];
    let indent = 0;
    let chomp = "";
    let error = -1;
    for(let i = 1; i < source.length; ++i){
        const ch = source[i];
        if (!chomp && (ch === "-" || ch === "+")) chomp = ch;
        else {
            const n = Number(ch);
            if (!indent && n) indent = n;
            else if (error === -1) error = offset + i;
        }
    }
    if (error !== -1) onError(error, "UNEXPECTED_TOKEN", `Block scalar header includes extra characters: ${source}`);
    let hasSpace = false;
    let comment = "";
    let length = source.length;
    for(let i = 1; i < props.length; ++i){
        const token = props[i];
        switch(token.type){
            case "space":
                hasSpace = true;
            case "newline":
                length += token.source.length;
                break;
            case "comment":
                if (strict && !hasSpace) {
                    const message = "Comments must be separated from other tokens by white space characters";
                    onError(token, "MISSING_CHAR", message);
                }
                length += token.source.length;
                comment = token.source.substring(1);
                break;
            case "error":
                onError(token, "UNEXPECTED_TOKEN", token.message);
                length += token.source.length;
                break;
            default:
                {
                    const message = `Unexpected token in block scalar header: ${token.type}`;
                    onError(token, "UNEXPECTED_TOKEN", message);
                    const ts = token.source;
                    if (ts && typeof ts === "string") length += ts.length;
                }
        }
    }
    return {
        mode,
        indent,
        chomp,
        comment,
        length
    };
}
function splitLines(source) {
    const split = source.split(/\n( *)/);
    const first = split[0];
    const m = first.match(/^( *)/);
    const line0 = m && m[1] ? [
        m[1],
        first.slice(m[1].length)
    ] : [
        "",
        first
    ];
    const lines = [
        line0
    ];
    for(let i = 1; i < split.length; i += 2)lines.push([
        split[i],
        split[i + 1]
    ]);
    return lines;
}
// ../../node_modules/yaml/browser/dist/compose/resolve-flow-scalar.js
function resolveFlowScalar(scalar, strict, onError) {
    const { offset , type , source , end  } = scalar;
    let _type;
    let value1;
    const _onError = (rel, code, msg)=>onError(offset + rel, code, msg);
    switch(type){
        case "scalar":
            _type = Scalar.PLAIN;
            value1 = plainValue(source, _onError);
            break;
        case "single-quoted-scalar":
            _type = Scalar.QUOTE_SINGLE;
            value1 = singleQuotedValue(source, _onError);
            break;
        case "double-quoted-scalar":
            _type = Scalar.QUOTE_DOUBLE;
            value1 = doubleQuotedValue(source, _onError);
            break;
        default:
            onError(scalar, "UNEXPECTED_TOKEN", `Expected a flow scalar value, but found: ${type}`);
            return {
                value: "",
                type: null,
                comment: "",
                range: [
                    offset,
                    offset + source.length,
                    offset + source.length
                ]
            };
    }
    const valueEnd = offset + source.length;
    const re = resolveEnd(end, valueEnd, strict, onError);
    return {
        value: value1,
        type: _type,
        comment: re.comment,
        range: [
            offset,
            valueEnd,
            re.offset
        ]
    };
}
function plainValue(source, onError) {
    let badChar = "";
    switch(source[0]){
        case "	":
            badChar = "a tab character";
            break;
        case ",":
            badChar = "flow indicator character ,";
            break;
        case "%":
            badChar = "directive indicator character %";
            break;
        case "|":
        case ">":
            {
                badChar = `block scalar indicator ${source[0]}`;
                break;
            }
        case "@":
        case "`":
            {
                badChar = `reserved character ${source[0]}`;
                break;
            }
    }
    if (badChar) onError(0, "BAD_SCALAR_START", `Plain value cannot start with ${badChar}`);
    return foldLines(source);
}
function singleQuotedValue(source, onError) {
    if (source[source.length - 1] !== "'" || source.length === 1) onError(source.length, "MISSING_CHAR", "Missing closing 'quote");
    return foldLines(source.slice(1, -1)).replace(/''/g, "'");
}
function foldLines(source) {
    let first, line;
    try {
        first = new RegExp("(.*?)(?<![ 	])[ 	]*\r?\n", "sy");
        line = new RegExp("[ 	]*(.*?)(?:(?<![ 	])[ 	]*)?\r?\n", "sy");
    } catch (_) {
        first = RegExp("(.*?)[ \\t]*\\r?\\n", "sy");
        line = RegExp("[ \\t]*(.*?)[ \\t]*\\r?\\n", "sy");
    }
    let match = first.exec(source);
    if (!match) return source;
    let res = match[1];
    let sep = " ";
    let pos = first.lastIndex;
    line.lastIndex = pos;
    while(match = line.exec(source)){
        if (match[1] === "") {
            if (sep === "\n") res += sep;
            else sep = "\n";
        } else {
            res += sep + match[1];
            sep = " ";
        }
        pos = line.lastIndex;
    }
    const last = RegExp("[ \\t]*(.*)", "sy");
    last.lastIndex = pos;
    match = last.exec(source);
    return res + sep + (match && match[1] || "");
}
function doubleQuotedValue(source, onError) {
    let res = "";
    for(let i = 1; i < source.length - 1; ++i){
        const ch = source[i];
        if (ch === "\r" && source[i + 1] === "\n") continue;
        if (ch === "\n") {
            const { fold , offset  } = foldNewline(source, i);
            res += fold;
            i = offset;
        } else if (ch === "\\") {
            let next = source[++i];
            const cc = escapeCodes[next];
            if (cc) res += cc;
            else if (next === "\n") {
                next = source[i + 1];
                while(next === " " || next === "	")next = source[++i + 1];
            } else if (next === "\r" && source[i + 1] === "\n") {
                next = source[++i + 1];
                while(next === " " || next === "	")next = source[++i + 1];
            } else if (next === "x" || next === "u" || next === "U") {
                const length = {
                    x: 2,
                    u: 4,
                    U: 8
                }[next];
                res += parseCharCode(source, i + 1, length, onError);
                i += length;
            } else {
                const raw = source.substr(i - 1, 2);
                onError(i - 1, "BAD_DQ_ESCAPE", `Invalid escape sequence ${raw}`);
                res += raw;
            }
        } else if (ch === " " || ch === "	") {
            const wsStart = i;
            let next = source[i + 1];
            while(next === " " || next === "	")next = source[++i + 1];
            if (next !== "\n" && !(next === "\r" && source[i + 2] === "\n")) res += i > wsStart ? source.slice(wsStart, i + 1) : ch;
        } else {
            res += ch;
        }
    }
    if (source[source.length - 1] !== '"' || source.length === 1) onError(source.length, "MISSING_CHAR", 'Missing closing "quote');
    return res;
}
function foldNewline(source, offset) {
    let fold = "";
    let ch = source[offset + 1];
    while(ch === " " || ch === "	" || ch === "\n" || ch === "\r"){
        if (ch === "\r" && source[offset + 2] !== "\n") break;
        if (ch === "\n") fold += "\n";
        offset += 1;
        ch = source[offset + 1];
    }
    if (!fold) fold = " ";
    return {
        fold,
        offset
    };
}
var escapeCodes = {
    "0": "\0",
    a: "\x07",
    b: "\b",
    e: "\x1B",
    f: "\f",
    n: "\n",
    r: "\r",
    t: "	",
    v: "\v",
    N: "\x85",
    _: "\xA0",
    L: "\u2028",
    P: "\u2029",
    " ": " ",
    '"': '"',
    "/": "/",
    "\\": "\\",
    "	": "	"
};
function parseCharCode(source, offset, length, onError) {
    const cc = source.substr(offset, length);
    const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);
    const code = ok ? parseInt(cc, 16) : NaN;
    if (isNaN(code)) {
        const raw = source.substr(offset - 2, length + 2);
        onError(offset - 2, "BAD_DQ_ESCAPE", `Invalid escape sequence ${raw}`);
        return raw;
    }
    return String.fromCodePoint(code);
}
// ../../node_modules/yaml/browser/dist/compose/compose-scalar.js
function composeScalar(ctx, token, tagToken, onError) {
    const { value: value1 , type , comment , range  } = token.type === "block-scalar" ? resolveBlockScalar(token, ctx.options.strict, onError) : resolveFlowScalar(token, ctx.options.strict, onError);
    const tagName = tagToken ? ctx.directives.tagName(tagToken.source, (msg)=>onError(tagToken, "TAG_RESOLVE_FAILED", msg)) : null;
    const tag = tagToken && tagName ? findScalarTagByName(ctx.schema, value1, tagName, tagToken, onError) : token.type === "scalar" ? findScalarTagByTest(ctx, value1, token, onError) : ctx.schema[SCALAR];
    let scalar;
    try {
        const res = tag.resolve(value1, (msg)=>onError(tagToken || token, "TAG_RESOLVE_FAILED", msg), ctx.options);
        scalar = isScalar(res) ? res : new Scalar(res);
    } catch (error) {
        const msg = error instanceof Error ? error.message : String(error);
        onError(tagToken || token, "TAG_RESOLVE_FAILED", msg);
        scalar = new Scalar(value1);
    }
    scalar.range = range;
    scalar.source = value1;
    if (type) scalar.type = type;
    if (tagName) scalar.tag = tagName;
    if (tag.format) scalar.format = tag.format;
    if (comment) scalar.comment = comment;
    return scalar;
}
function findScalarTagByName(schema4, value1, tagName, tagToken, onError) {
    var _a;
    if (tagName === "!") return schema4[SCALAR];
    const matchWithTest = [];
    for (const tag of schema4.tags){
        if (!tag.collection && tag.tag === tagName) {
            if (tag.default && tag.test) matchWithTest.push(tag);
            else return tag;
        }
    }
    for (const tag of matchWithTest)if ((_a = tag.test) === null || _a === void 0 ? void 0 : _a.test(value1)) return tag;
    const kt = schema4.knownTags[tagName];
    if (kt && !kt.collection) {
        schema4.tags.push(Object.assign({}, kt, {
            default: false,
            test: void 0
        }));
        return kt;
    }
    onError(tagToken, "TAG_RESOLVE_FAILED", `Unresolved tag: ${tagName}`, tagName !== "tag:yaml.org,2002:str");
    return schema4[SCALAR];
}
function findScalarTagByTest({ directives , schema: schema4  }, value1, token, onError) {
    const tag = schema4.tags.find((tag2)=>{
        var _a;
        return tag2.default && ((_a = tag2.test) === null || _a === void 0 ? void 0 : _a.test(value1));
    }) || schema4[SCALAR];
    if (schema4.compat) {
        const compat = schema4.compat.find((tag2)=>{
            var _a;
            return tag2.default && ((_a = tag2.test) === null || _a === void 0 ? void 0 : _a.test(value1));
        }) || schema4[SCALAR];
        if (tag.tag !== compat.tag) {
            const ts = directives.tagString(tag.tag);
            const cs = directives.tagString(compat.tag);
            const msg = `Value may be parsed as either ${ts} or ${cs}`;
            onError(token, "TAG_RESOLVE_FAILED", msg, true);
        }
    }
    return tag;
}
// ../../node_modules/yaml/browser/dist/compose/util-empty-scalar-position.js
function emptyScalarPosition(offset, before, pos) {
    if (before) {
        if (pos === null) pos = before.length;
        for(let i = pos - 1; i >= 0; --i){
            let st = before[i];
            switch(st.type){
                case "space":
                case "comment":
                case "newline":
                    offset -= st.source.length;
                    continue;
            }
            st = before[++i];
            while((st === null || st === void 0 ? void 0 : st.type) === "space"){
                offset += st.source.length;
                st = before[++i];
            }
            break;
        }
    }
    return offset;
}
// ../../node_modules/yaml/browser/dist/compose/compose-node.js
var CN = {
    composeNode,
    composeEmptyNode
};
function composeNode(ctx, token, props, onError) {
    const { spaceBefore , comment , anchor , tag  } = props;
    let node;
    let isSrcToken = true;
    switch(token.type){
        case "alias":
            node = composeAlias(ctx, token, onError);
            if (anchor || tag) onError(token, "ALIAS_PROPS", "An alias node must not specify any properties");
            break;
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar":
        case "block-scalar":
            node = composeScalar(ctx, token, tag, onError);
            if (anchor) node.anchor = anchor.source.substring(1);
            break;
        case "block-map":
        case "block-seq":
        case "flow-collection":
            node = composeCollection(CN, ctx, token, tag, onError);
            if (anchor) node.anchor = anchor.source.substring(1);
            break;
        default:
            {
                const message = token.type === "error" ? token.message : `Unsupported token (type: ${token.type})`;
                onError(token, "UNEXPECTED_TOKEN", message);
                node = composeEmptyNode(ctx, token.offset, void 0, null, props, onError);
                isSrcToken = false;
            }
    }
    if (anchor && node.anchor === "") onError(anchor, "BAD_ALIAS", "Anchor cannot be an empty string");
    if (spaceBefore) node.spaceBefore = true;
    if (comment) {
        if (token.type === "scalar" && token.source === "") node.comment = comment;
        else node.commentBefore = comment;
    }
    if (ctx.options.keepSourceTokens && isSrcToken) node.srcToken = token;
    return node;
}
function composeEmptyNode(ctx, offset, before, pos, { spaceBefore , comment , anchor , tag  }, onError) {
    const token = {
        type: "scalar",
        offset: emptyScalarPosition(offset, before, pos),
        indent: -1,
        source: ""
    };
    const node = composeScalar(ctx, token, tag, onError);
    if (anchor) {
        node.anchor = anchor.source.substring(1);
        if (node.anchor === "") onError(anchor, "BAD_ALIAS", "Anchor cannot be an empty string");
    }
    if (spaceBefore) node.spaceBefore = true;
    if (comment) node.comment = comment;
    return node;
}
function composeAlias({ options  }, { offset , source , end  }, onError) {
    const alias = new Alias(source.substring(1));
    if (alias.source === "") onError(offset, "BAD_ALIAS", "Alias cannot be an empty string");
    if (alias.source.endsWith(":")) onError(offset + source.length - 1, "BAD_ALIAS", "Alias ending in : is ambiguous", true);
    const valueEnd = offset + source.length;
    const re = resolveEnd(end, valueEnd, options.strict, onError);
    alias.range = [
        offset,
        valueEnd,
        re.offset
    ];
    if (re.comment) alias.comment = re.comment;
    return alias;
}
// ../../node_modules/yaml/browser/dist/compose/compose-doc.js
function composeDoc(options, directives, { offset , start , value: value1 , end  }, onError) {
    const opts = Object.assign({
        directives
    }, options);
    const doc = new Document(void 0, opts);
    const ctx = {
        atRoot: true,
        directives: doc.directives,
        options: doc.options,
        schema: doc.schema
    };
    const props = resolveProps(start, {
        indicator: "doc-start",
        next: value1 || (end === null || end === void 0 ? void 0 : end[0]),
        offset,
        onError,
        startOnNewline: true
    });
    if (props.found) {
        doc.directives.docStart = true;
        if (value1 && (value1.type === "block-map" || value1.type === "block-seq") && !props.hasNewline) onError(props.end, "MISSING_CHAR", "Block collection cannot start on same line with directives-end marker");
    }
    doc.contents = value1 ? composeNode(ctx, value1, props, onError) : composeEmptyNode(ctx, props.end, start, null, props, onError);
    const contentEnd = doc.contents.range[2];
    const re = resolveEnd(end, contentEnd, false, onError);
    if (re.comment) doc.comment = re.comment;
    doc.range = [
        offset,
        contentEnd,
        re.offset
    ];
    return doc;
}
// ../../node_modules/yaml/browser/dist/compose/composer.js
function getErrorPos(src) {
    if (typeof src === "number") return [
        src,
        src + 1
    ];
    if (Array.isArray(src)) return src.length === 2 ? src : [
        src[0],
        src[1]
    ];
    const { offset , source  } = src;
    return [
        offset,
        offset + (typeof source === "string" ? source.length : 1)
    ];
}
function parsePrelude(prelude) {
    var _a;
    let comment = "";
    let atComment = false;
    let afterEmptyLine = false;
    for(let i = 0; i < prelude.length; ++i){
        const source = prelude[i];
        switch(source[0]){
            case "#":
                comment += (comment === "" ? "" : afterEmptyLine ? "\n\n" : "\n") + (source.substring(1) || " ");
                atComment = true;
                afterEmptyLine = false;
                break;
            case "%":
                if (((_a = prelude[i + 1]) === null || _a === void 0 ? void 0 : _a[0]) !== "#") i += 1;
                atComment = false;
                break;
            default:
                if (!atComment) afterEmptyLine = true;
                atComment = false;
        }
    }
    return {
        comment,
        afterEmptyLine
    };
}
var Composer = class {
    decorate(doc, afterDoc) {
        const { comment , afterEmptyLine  } = parsePrelude(this.prelude);
        if (comment) {
            const dc = doc.contents;
            if (afterDoc) {
                doc.comment = doc.comment ? `${doc.comment}
${comment}` : comment;
            } else if (afterEmptyLine || doc.directives.docStart || !dc) {
                doc.commentBefore = comment;
            } else if (isCollection(dc) && !dc.flow && dc.items.length > 0) {
                let it = dc.items[0];
                if (isPair(it)) it = it.key;
                const cb = it.commentBefore;
                it.commentBefore = cb ? `${comment}
${cb}` : comment;
            } else {
                const cb = dc.commentBefore;
                dc.commentBefore = cb ? `${comment}
${cb}` : comment;
            }
        }
        if (afterDoc) {
            Array.prototype.push.apply(doc.errors, this.errors);
            Array.prototype.push.apply(doc.warnings, this.warnings);
        } else {
            doc.errors = this.errors;
            doc.warnings = this.warnings;
        }
        this.prelude = [];
        this.errors = [];
        this.warnings = [];
    }
    /**
   * Current stream status information.
   *
   * Mostly useful at the end of input for an empty stream.
   */ streamInfo() {
        return {
            comment: parsePrelude(this.prelude).comment,
            directives: this.directives,
            errors: this.errors,
            warnings: this.warnings
        };
    }
    /**
   * Compose tokens into documents.
   *
   * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
   * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
   */ *compose(tokens, forceDoc = false, endOffset = -1) {
        for (const token of tokens)yield* this.next(token);
        yield* this.end(forceDoc, endOffset);
    }
    /** Advance the composer by one CST token. */ *next(token) {
        switch(token.type){
            case "directive":
                this.directives.add(token.source, (offset, message, warning)=>{
                    const pos = getErrorPos(token);
                    pos[0] += offset;
                    this.onError(pos, "BAD_DIRECTIVE", message, warning);
                });
                this.prelude.push(token.source);
                this.atDirectives = true;
                break;
            case "document":
                {
                    const doc = composeDoc(this.options, this.directives, token, this.onError);
                    if (this.atDirectives && !doc.directives.docStart) this.onError(token, "MISSING_CHAR", "Missing directives-end/doc-start indicator line");
                    this.decorate(doc, false);
                    if (this.doc) yield this.doc;
                    this.doc = doc;
                    this.atDirectives = false;
                    break;
                }
            case "byte-order-mark":
            case "space":
                break;
            case "comment":
            case "newline":
                this.prelude.push(token.source);
                break;
            case "error":
                {
                    const msg = token.source ? `${token.message}: ${JSON.stringify(token.source)}` : token.message;
                    const error = new YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", msg);
                    if (this.atDirectives || !this.doc) this.errors.push(error);
                    else this.doc.errors.push(error);
                    break;
                }
            case "doc-end":
                {
                    if (!this.doc) {
                        const msg = "Unexpected doc-end without preceding document";
                        this.errors.push(new YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", msg));
                        break;
                    }
                    this.doc.directives.docEnd = true;
                    const end = resolveEnd(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);
                    this.decorate(this.doc, true);
                    if (end.comment) {
                        const dc = this.doc.comment;
                        this.doc.comment = dc ? `${dc}
${end.comment}` : end.comment;
                    }
                    this.doc.range[2] = end.offset;
                    break;
                }
            default:
                this.errors.push(new YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", `Unsupported token ${token.type}`));
        }
    }
    /**
   * Call at end of input to yield any remaining document.
   *
   * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
   * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
   */ *end(forceDoc = false, endOffset = -1) {
        if (this.doc) {
            this.decorate(this.doc, true);
            yield this.doc;
            this.doc = null;
        } else if (forceDoc) {
            const opts = Object.assign({
                directives: this.directives
            }, this.options);
            const doc = new Document(void 0, opts);
            if (this.atDirectives) this.onError(endOffset, "MISSING_CHAR", "Missing directives-end indicator line");
            doc.range = [
                0,
                endOffset,
                endOffset
            ];
            this.decorate(doc, false);
            yield doc;
        }
    }
    constructor(options = {}){
        this.doc = null;
        this.atDirectives = false;
        this.prelude = [];
        this.errors = [];
        this.warnings = [];
        this.onError = (source, code, message, warning)=>{
            const pos = getErrorPos(source);
            if (warning) this.warnings.push(new YAMLWarning(pos, code, message));
            else this.errors.push(new YAMLParseError(pos, code, message));
        };
        this.directives = new Directives({
            version: options.version || "1.2"
        });
        this.options = options;
    }
};
// ../../node_modules/yaml/browser/dist/parse/cst.js
var cst_exports = {};
__export(cst_exports, {
    BOM: ()=>BOM,
    DOCUMENT: ()=>DOCUMENT,
    FLOW_END: ()=>FLOW_END,
    SCALAR: ()=>SCALAR2,
    createScalarToken: ()=>createScalarToken,
    isCollection: ()=>isCollection2,
    isScalar: ()=>isScalar2,
    prettyToken: ()=>prettyToken,
    resolveAsScalar: ()=>resolveAsScalar,
    setScalarValue: ()=>setScalarValue,
    stringify: ()=>stringify2,
    tokenType: ()=>tokenType,
    visit: ()=>visit3
});
// ../../node_modules/yaml/browser/dist/parse/cst-scalar.js
function resolveAsScalar(token, strict = true, onError) {
    if (token) {
        const _onError = (pos, code, message)=>{
            const offset = typeof pos === "number" ? pos : Array.isArray(pos) ? pos[0] : pos.offset;
            if (onError) onError(offset, code, message);
            else throw new YAMLParseError([
                offset,
                offset + 1
            ], code, message);
        };
        switch(token.type){
            case "scalar":
            case "single-quoted-scalar":
            case "double-quoted-scalar":
                return resolveFlowScalar(token, strict, _onError);
            case "block-scalar":
                return resolveBlockScalar(token, strict, _onError);
        }
    }
    return null;
}
function createScalarToken(value1, context) {
    var _a;
    const { implicitKey =false , indent , inFlow =false , offset =-1 , type ="PLAIN"  } = context;
    const source = stringifyString({
        type,
        value: value1
    }, {
        implicitKey,
        indent: indent > 0 ? " ".repeat(indent) : "",
        inFlow,
        options: {
            blockQuote: true,
            lineWidth: -1
        }
    });
    const end = (_a = context.end) !== null && _a !== void 0 ? _a : [
        {
            type: "newline",
            offset: -1,
            indent,
            source: "\n"
        }
    ];
    switch(source[0]){
        case "|":
        case ">":
            {
                const he = source.indexOf("\n");
                const head = source.substring(0, he);
                const body = source.substring(he + 1) + "\n";
                const props = [
                    {
                        type: "block-scalar-header",
                        offset,
                        indent,
                        source: head
                    }
                ];
                if (!addEndtoBlockProps(props, end)) props.push({
                    type: "newline",
                    offset: -1,
                    indent,
                    source: "\n"
                });
                return {
                    type: "block-scalar",
                    offset,
                    indent,
                    props,
                    source: body
                };
            }
        case '"':
            return {
                type: "double-quoted-scalar",
                offset,
                indent,
                source,
                end
            };
        case "'":
            return {
                type: "single-quoted-scalar",
                offset,
                indent,
                source,
                end
            };
        default:
            return {
                type: "scalar",
                offset,
                indent,
                source,
                end
            };
    }
}
function setScalarValue(token, value1, context = {}) {
    let { afterKey =false , implicitKey =false , inFlow =false , type  } = context;
    let indent = "indent" in token ? token.indent : null;
    if (afterKey && typeof indent === "number") indent += 2;
    if (!type) switch(token.type){
        case "single-quoted-scalar":
            type = "QUOTE_SINGLE";
            break;
        case "double-quoted-scalar":
            type = "QUOTE_DOUBLE";
            break;
        case "block-scalar":
            {
                const header = token.props[0];
                if (header.type !== "block-scalar-header") throw new Error("Invalid block scalar header");
                type = header.source[0] === ">" ? "BLOCK_FOLDED" : "BLOCK_LITERAL";
                break;
            }
        default:
            type = "PLAIN";
    }
    const source = stringifyString({
        type,
        value: value1
    }, {
        implicitKey: implicitKey || indent === null,
        indent: indent !== null && indent > 0 ? " ".repeat(indent) : "",
        inFlow,
        options: {
            blockQuote: true,
            lineWidth: -1
        }
    });
    switch(source[0]){
        case "|":
        case ">":
            setBlockScalarValue(token, source);
            break;
        case '"':
            setFlowScalarValue(token, source, "double-quoted-scalar");
            break;
        case "'":
            setFlowScalarValue(token, source, "single-quoted-scalar");
            break;
        default:
            setFlowScalarValue(token, source, "scalar");
    }
}
function setBlockScalarValue(token, source) {
    const he = source.indexOf("\n");
    const head = source.substring(0, he);
    const body = source.substring(he + 1) + "\n";
    if (token.type === "block-scalar") {
        const header = token.props[0];
        if (header.type !== "block-scalar-header") throw new Error("Invalid block scalar header");
        header.source = head;
        token.source = body;
    } else {
        const { offset  } = token;
        const indent = "indent" in token ? token.indent : -1;
        const props = [
            {
                type: "block-scalar-header",
                offset,
                indent,
                source: head
            }
        ];
        if (!addEndtoBlockProps(props, "end" in token ? token.end : void 0)) props.push({
            type: "newline",
            offset: -1,
            indent,
            source: "\n"
        });
        for (const key of Object.keys(token))if (key !== "type" && key !== "offset") delete token[key];
        Object.assign(token, {
            type: "block-scalar",
            indent,
            props,
            source: body
        });
    }
}
function addEndtoBlockProps(props, end) {
    if (end) for (const st of end)switch(st.type){
        case "space":
        case "comment":
            props.push(st);
            break;
        case "newline":
            props.push(st);
            return true;
    }
    return false;
}
function setFlowScalarValue(token, source, type) {
    switch(token.type){
        case "scalar":
        case "double-quoted-scalar":
        case "single-quoted-scalar":
            token.type = type;
            token.source = source;
            break;
        case "block-scalar":
            {
                const end = token.props.slice(1);
                let oa = source.length;
                if (token.props[0].type === "block-scalar-header") oa -= token.props[0].source.length;
                for (const tok of end)tok.offset += oa;
                delete token.props;
                Object.assign(token, {
                    type,
                    source,
                    end
                });
                break;
            }
        case "block-map":
        case "block-seq":
            {
                const offset = token.offset + source.length;
                const nl = {
                    type: "newline",
                    offset,
                    indent: token.indent,
                    source: "\n"
                };
                delete token.items;
                Object.assign(token, {
                    type,
                    source,
                    end: [
                        nl
                    ]
                });
                break;
            }
        default:
            {
                const indent = "indent" in token ? token.indent : -1;
                const end = "end" in token && Array.isArray(token.end) ? token.end.filter((st)=>st.type === "space" || st.type === "comment" || st.type === "newline") : [];
                for (const key of Object.keys(token))if (key !== "type" && key !== "offset") delete token[key];
                Object.assign(token, {
                    type,
                    indent,
                    source,
                    end
                });
            }
    }
}
// ../../node_modules/yaml/browser/dist/parse/cst-stringify.js
var stringify2 = (cst)=>"type" in cst ? stringifyToken(cst) : stringifyItem(cst);
function stringifyToken(token) {
    switch(token.type){
        case "block-scalar":
            {
                let res = "";
                for (const tok of token.props)res += stringifyToken(tok);
                return res + token.source;
            }
        case "block-map":
        case "block-seq":
            {
                let res = "";
                for (const item of token.items)res += stringifyItem(item);
                return res;
            }
        case "flow-collection":
            {
                let res = token.start.source;
                for (const item of token.items)res += stringifyItem(item);
                for (const st of token.end)res += st.source;
                return res;
            }
        case "document":
            {
                let res = stringifyItem(token);
                if (token.end) for (const st of token.end)res += st.source;
                return res;
            }
        default:
            {
                let res = token.source;
                if ("end" in token && token.end) for (const st of token.end)res += st.source;
                return res;
            }
    }
}
function stringifyItem({ start , key , sep , value: value1  }) {
    let res = "";
    for (const st of start)res += st.source;
    if (key) res += stringifyToken(key);
    if (sep) for (const st of sep)res += st.source;
    if (value1) res += stringifyToken(value1);
    return res;
}
// ../../node_modules/yaml/browser/dist/parse/cst-visit.js
var BREAK2 = Symbol("break visit");
var SKIP2 = Symbol("skip children");
var REMOVE2 = Symbol("remove item");
function visit3(cst, visitor) {
    if ("type" in cst && cst.type === "document") cst = {
        start: cst.start,
        value: cst.value
    };
    _visit(Object.freeze([]), cst, visitor);
}
visit3.BREAK = BREAK2;
visit3.SKIP = SKIP2;
visit3.REMOVE = REMOVE2;
visit3.itemAtPath = (cst, path5)=>{
    let item = cst;
    for (const [field, index] of path5){
        const tok = item && item[field];
        if (tok && "items" in tok) {
            item = tok.items[index];
        } else return void 0;
    }
    return item;
};
visit3.parentCollection = (cst, path5)=>{
    const parent = visit3.itemAtPath(cst, path5.slice(0, -1));
    const field = path5[path5.length - 1][0];
    const coll = parent && parent[field];
    if (coll && "items" in coll) return coll;
    throw new Error("Parent collection not found");
};
function _visit(path5, item, visitor) {
    let ctrl = visitor(item, path5);
    if (typeof ctrl === "symbol") return ctrl;
    for (const field of [
        "key",
        "value"
    ]){
        const token = item[field];
        if (token && "items" in token) {
            for(let i = 0; i < token.items.length; ++i){
                const ci = _visit(Object.freeze(path5.concat([
                    [
                        field,
                        i
                    ]
                ])), token.items[i], visitor);
                if (typeof ci === "number") i = ci - 1;
                else if (ci === BREAK2) return BREAK2;
                else if (ci === REMOVE2) {
                    token.items.splice(i, 1);
                    i -= 1;
                }
            }
            if (typeof ctrl === "function" && field === "key") ctrl = ctrl(item, path5);
        }
    }
    return typeof ctrl === "function" ? ctrl(item, path5) : ctrl;
}
// ../../node_modules/yaml/browser/dist/parse/cst.js
var BOM = "\uFEFF";
var DOCUMENT = "";
var FLOW_END = "";
var SCALAR2 = "";
var isCollection2 = (token)=>!!token && "items" in token;
var isScalar2 = (token)=>!!token && (token.type === "scalar" || token.type === "single-quoted-scalar" || token.type === "double-quoted-scalar" || token.type === "block-scalar");
function prettyToken(token) {
    switch(token){
        case BOM:
            return "<BOM>";
        case DOCUMENT:
            return "<DOC>";
        case FLOW_END:
            return "<FLOW_END>";
        case SCALAR2:
            return "<SCALAR>";
        default:
            return JSON.stringify(token);
    }
}
function tokenType(source) {
    switch(source){
        case BOM:
            return "byte-order-mark";
        case DOCUMENT:
            return "doc-mode";
        case FLOW_END:
            return "flow-error-end";
        case SCALAR2:
            return "scalar";
        case "---":
            return "doc-start";
        case "...":
            return "doc-end";
        case "":
        case "\n":
        case "\r\n":
            return "newline";
        case "-":
            return "seq-item-ind";
        case "?":
            return "explicit-key-ind";
        case ":":
            return "map-value-ind";
        case "{":
            return "flow-map-start";
        case "}":
            return "flow-map-end";
        case "[":
            return "flow-seq-start";
        case "]":
            return "flow-seq-end";
        case ",":
            return "comma";
    }
    switch(source[0]){
        case " ":
        case "	":
            return "space";
        case "#":
            return "comment";
        case "%":
            return "directive-line";
        case "*":
            return "alias";
        case "&":
            return "anchor";
        case "!":
            return "tag";
        case "'":
            return "single-quoted-scalar";
        case '"':
            return "double-quoted-scalar";
        case "|":
        case ">":
            return "block-scalar-header";
    }
    return null;
}
// ../../node_modules/yaml/browser/dist/parse/lexer.js
function isEmpty(ch) {
    switch(ch){
        case void 0:
        case " ":
        case "\n":
        case "\r":
        case "	":
            return true;
        default:
            return false;
    }
}
var hexDigits = "0123456789ABCDEFabcdef".split("");
var tagChars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()".split("");
var invalidFlowScalarChars = ",[]{}".split("");
var invalidAnchorChars = " ,[]{}\n\r	".split("");
var isNotAnchorChar = (ch)=>!ch || invalidAnchorChars.includes(ch);
var Lexer = class {
    /**
   * Generate YAML tokens from the `source` string. If `incomplete`,
   * a part of the last line may be left as a buffer for the next call.
   *
   * @returns A generator of lexical tokens
   */ *lex(source, incomplete = false) {
        if (source) {
            this.buffer = this.buffer ? this.buffer + source : source;
            this.lineEndPos = null;
        }
        this.atEnd = !incomplete;
        let next = this.next || "stream";
        while(next && (incomplete || this.hasChars(1)))next = yield* this.parseNext(next);
    }
    atLineEnd() {
        let i = this.pos;
        let ch = this.buffer[i];
        while(ch === " " || ch === "	")ch = this.buffer[++i];
        if (!ch || ch === "#" || ch === "\n") return true;
        if (ch === "\r") return this.buffer[i + 1] === "\n";
        return false;
    }
    charAt(n) {
        return this.buffer[this.pos + n];
    }
    continueScalar(offset) {
        let ch = this.buffer[offset];
        if (this.indentNext > 0) {
            let indent = 0;
            while(ch === " ")ch = this.buffer[++indent + offset];
            if (ch === "\r") {
                const next = this.buffer[indent + offset + 1];
                if (next === "\n" || !next && !this.atEnd) return offset + indent + 1;
            }
            return ch === "\n" || indent >= this.indentNext || !ch && !this.atEnd ? offset + indent : -1;
        }
        if (ch === "-" || ch === ".") {
            const dt = this.buffer.substr(offset, 3);
            if ((dt === "---" || dt === "...") && isEmpty(this.buffer[offset + 3])) return -1;
        }
        return offset;
    }
    getLine() {
        let end = this.lineEndPos;
        if (typeof end !== "number" || end !== -1 && end < this.pos) {
            end = this.buffer.indexOf("\n", this.pos);
            this.lineEndPos = end;
        }
        if (end === -1) return this.atEnd ? this.buffer.substring(this.pos) : null;
        if (this.buffer[end - 1] === "\r") end -= 1;
        return this.buffer.substring(this.pos, end);
    }
    hasChars(n) {
        return this.pos + n <= this.buffer.length;
    }
    setNext(state) {
        this.buffer = this.buffer.substring(this.pos);
        this.pos = 0;
        this.lineEndPos = null;
        this.next = state;
        return null;
    }
    peek(n) {
        return this.buffer.substr(this.pos, n);
    }
    *parseNext(next) {
        switch(next){
            case "stream":
                return yield* this.parseStream();
            case "line-start":
                return yield* this.parseLineStart();
            case "block-start":
                return yield* this.parseBlockStart();
            case "doc":
                return yield* this.parseDocument();
            case "flow":
                return yield* this.parseFlowCollection();
            case "quoted-scalar":
                return yield* this.parseQuotedScalar();
            case "block-scalar":
                return yield* this.parseBlockScalar();
            case "plain-scalar":
                return yield* this.parsePlainScalar();
        }
    }
    *parseStream() {
        let line = this.getLine();
        if (line === null) return this.setNext("stream");
        if (line[0] === BOM) {
            yield* this.pushCount(1);
            line = line.substring(1);
        }
        if (line[0] === "%") {
            let dirEnd = line.length;
            const cs = line.indexOf("#");
            if (cs !== -1) {
                const ch = line[cs - 1];
                if (ch === " " || ch === "	") dirEnd = cs - 1;
            }
            while(true){
                const ch = line[dirEnd - 1];
                if (ch === " " || ch === "	") dirEnd -= 1;
                else break;
            }
            const n = (yield* this.pushCount(dirEnd)) + (yield* this.pushSpaces(true));
            yield* this.pushCount(line.length - n);
            this.pushNewline();
            return "stream";
        }
        if (this.atLineEnd()) {
            const sp = yield* this.pushSpaces(true);
            yield* this.pushCount(line.length - sp);
            yield* this.pushNewline();
            return "stream";
        }
        yield DOCUMENT;
        return yield* this.parseLineStart();
    }
    *parseLineStart() {
        const ch = this.charAt(0);
        if (!ch && !this.atEnd) return this.setNext("line-start");
        if (ch === "-" || ch === ".") {
            if (!this.atEnd && !this.hasChars(4)) return this.setNext("line-start");
            const s = this.peek(3);
            if (s === "---" && isEmpty(this.charAt(3))) {
                yield* this.pushCount(3);
                this.indentValue = 0;
                this.indentNext = 0;
                return "doc";
            } else if (s === "..." && isEmpty(this.charAt(3))) {
                yield* this.pushCount(3);
                return "stream";
            }
        }
        this.indentValue = yield* this.pushSpaces(false);
        if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1))) this.indentNext = this.indentValue;
        return yield* this.parseBlockStart();
    }
    *parseBlockStart() {
        const [ch0, ch1] = this.peek(2);
        if (!ch1 && !this.atEnd) return this.setNext("block-start");
        if ((ch0 === "-" || ch0 === "?" || ch0 === ":") && isEmpty(ch1)) {
            const n = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));
            this.indentNext = this.indentValue + 1;
            this.indentValue += n;
            return yield* this.parseBlockStart();
        }
        return "doc";
    }
    *parseDocument() {
        yield* this.pushSpaces(true);
        const line = this.getLine();
        if (line === null) return this.setNext("doc");
        let n = yield* this.pushIndicators();
        switch(line[n]){
            case "#":
                yield* this.pushCount(line.length - n);
            case void 0:
                yield* this.pushNewline();
                return yield* this.parseLineStart();
            case "{":
            case "[":
                yield* this.pushCount(1);
                this.flowKey = false;
                this.flowLevel = 1;
                return "flow";
            case "}":
            case "]":
                yield* this.pushCount(1);
                return "doc";
            case "*":
                yield* this.pushUntil(isNotAnchorChar);
                return "doc";
            case '"':
            case "'":
                return yield* this.parseQuotedScalar();
            case "|":
            case ">":
                n += yield* this.parseBlockScalarHeader();
                n += yield* this.pushSpaces(true);
                yield* this.pushCount(line.length - n);
                yield* this.pushNewline();
                return yield* this.parseBlockScalar();
            default:
                return yield* this.parsePlainScalar();
        }
    }
    *parseFlowCollection() {
        let nl, sp;
        let indent = -1;
        do {
            nl = yield* this.pushNewline();
            if (nl > 0) {
                sp = yield* this.pushSpaces(false);
                this.indentValue = indent = sp;
            } else {
                sp = 0;
            }
            sp += yield* this.pushSpaces(true);
        }while (nl + sp > 0)
        const line = this.getLine();
        if (line === null) return this.setNext("flow");
        if (indent !== -1 && indent < this.indentNext && line[0] !== "#" || indent === 0 && (line.startsWith("---") || line.startsWith("...")) && isEmpty(line[3])) {
            const atFlowEndMarker = indent === this.indentNext - 1 && this.flowLevel === 1 && (line[0] === "]" || line[0] === "}");
            if (!atFlowEndMarker) {
                this.flowLevel = 0;
                yield FLOW_END;
                return yield* this.parseLineStart();
            }
        }
        let n = 0;
        while(line[n] === ","){
            n += yield* this.pushCount(1);
            n += yield* this.pushSpaces(true);
            this.flowKey = false;
        }
        n += yield* this.pushIndicators();
        switch(line[n]){
            case void 0:
                return "flow";
            case "#":
                yield* this.pushCount(line.length - n);
                return "flow";
            case "{":
            case "[":
                yield* this.pushCount(1);
                this.flowKey = false;
                this.flowLevel += 1;
                return "flow";
            case "}":
            case "]":
                yield* this.pushCount(1);
                this.flowKey = true;
                this.flowLevel -= 1;
                return this.flowLevel ? "flow" : "doc";
            case "*":
                yield* this.pushUntil(isNotAnchorChar);
                return "flow";
            case '"':
            case "'":
                this.flowKey = true;
                return yield* this.parseQuotedScalar();
            case ":":
                {
                    const next = this.charAt(1);
                    if (this.flowKey || isEmpty(next) || next === ",") {
                        this.flowKey = false;
                        yield* this.pushCount(1);
                        yield* this.pushSpaces(true);
                        return "flow";
                    }
                }
            default:
                this.flowKey = false;
                return yield* this.parsePlainScalar();
        }
    }
    *parseQuotedScalar() {
        const quote = this.charAt(0);
        let end = this.buffer.indexOf(quote, this.pos + 1);
        if (quote === "'") {
            while(end !== -1 && this.buffer[end + 1] === "'")end = this.buffer.indexOf("'", end + 2);
        } else {
            while(end !== -1){
                let n = 0;
                while(this.buffer[end - 1 - n] === "\\")n += 1;
                if (n % 2 === 0) break;
                end = this.buffer.indexOf('"', end + 1);
            }
        }
        const qb = this.buffer.substring(0, end);
        let nl = qb.indexOf("\n", this.pos);
        if (nl !== -1) {
            while(nl !== -1){
                const cs = this.continueScalar(nl + 1);
                if (cs === -1) break;
                nl = qb.indexOf("\n", cs);
            }
            if (nl !== -1) {
                end = nl - (qb[nl - 1] === "\r" ? 2 : 1);
            }
        }
        if (end === -1) {
            if (!this.atEnd) return this.setNext("quoted-scalar");
            end = this.buffer.length;
        }
        yield* this.pushToIndex(end + 1, false);
        return this.flowLevel ? "flow" : "doc";
    }
    *parseBlockScalarHeader() {
        this.blockScalarIndent = -1;
        this.blockScalarKeep = false;
        let i = this.pos;
        while(true){
            const ch = this.buffer[++i];
            if (ch === "+") this.blockScalarKeep = true;
            else if (ch > "0" && ch <= "9") this.blockScalarIndent = Number(ch) - 1;
            else if (ch !== "-") break;
        }
        return yield* this.pushUntil((ch)=>isEmpty(ch) || ch === "#");
    }
    *parseBlockScalar() {
        let nl = this.pos - 1;
        let indent = 0;
        let ch;
        loop: for(let i = this.pos; ch = this.buffer[i]; ++i){
            switch(ch){
                case " ":
                    indent += 1;
                    break;
                case "\n":
                    nl = i;
                    indent = 0;
                    break;
                case "\r":
                    {
                        const next = this.buffer[i + 1];
                        if (!next && !this.atEnd) return this.setNext("block-scalar");
                        if (next === "\n") break;
                    }
                default:
                    break loop;
            }
        }
        if (!ch && !this.atEnd) return this.setNext("block-scalar");
        if (indent >= this.indentNext) {
            if (this.blockScalarIndent === -1) this.indentNext = indent;
            else this.indentNext += this.blockScalarIndent;
            do {
                const cs = this.continueScalar(nl + 1);
                if (cs === -1) break;
                nl = this.buffer.indexOf("\n", cs);
            }while (nl !== -1)
            if (nl === -1) {
                if (!this.atEnd) return this.setNext("block-scalar");
                nl = this.buffer.length;
            }
        }
        if (!this.blockScalarKeep) {
            do {
                let i = nl - 1;
                let ch2 = this.buffer[i];
                if (ch2 === "\r") ch2 = this.buffer[--i];
                const lastChar = i;
                while(ch2 === " " || ch2 === "	")ch2 = this.buffer[--i];
                if (ch2 === "\n" && i >= this.pos && i + 1 + indent > lastChar) nl = i;
                else break;
            }while (true)
        }
        yield SCALAR2;
        yield* this.pushToIndex(nl + 1, true);
        return yield* this.parseLineStart();
    }
    *parsePlainScalar() {
        const inFlow = this.flowLevel > 0;
        let end = this.pos - 1;
        let i = this.pos - 1;
        let ch;
        while(ch = this.buffer[++i]){
            if (ch === ":") {
                const next = this.buffer[i + 1];
                if (isEmpty(next) || inFlow && next === ",") break;
                end = i;
            } else if (isEmpty(ch)) {
                let next = this.buffer[i + 1];
                if (ch === "\r") {
                    if (next === "\n") {
                        i += 1;
                        ch = "\n";
                        next = this.buffer[i + 1];
                    } else end = i;
                }
                if (next === "#" || inFlow && invalidFlowScalarChars.includes(next)) break;
                if (ch === "\n") {
                    const cs = this.continueScalar(i + 1);
                    if (cs === -1) break;
                    i = Math.max(i, cs - 2);
                }
            } else {
                if (inFlow && invalidFlowScalarChars.includes(ch)) break;
                end = i;
            }
        }
        if (!ch && !this.atEnd) return this.setNext("plain-scalar");
        yield SCALAR2;
        yield* this.pushToIndex(end + 1, true);
        return inFlow ? "flow" : "doc";
    }
    *pushCount(n) {
        if (n > 0) {
            yield this.buffer.substr(this.pos, n);
            this.pos += n;
            return n;
        }
        return 0;
    }
    *pushToIndex(i, allowEmpty) {
        const s = this.buffer.slice(this.pos, i);
        if (s) {
            yield s;
            this.pos += s.length;
            return s.length;
        } else if (allowEmpty) yield "";
        return 0;
    }
    *pushIndicators() {
        switch(this.charAt(0)){
            case "!":
                return (yield* this.pushTag()) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
            case "&":
                return (yield* this.pushUntil(isNotAnchorChar)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
            case "-":
            case "?":
            case ":":
                {
                    const inFlow = this.flowLevel > 0;
                    const ch1 = this.charAt(1);
                    if (isEmpty(ch1) || inFlow && invalidFlowScalarChars.includes(ch1)) {
                        if (!inFlow) this.indentNext = this.indentValue + 1;
                        else if (this.flowKey) this.flowKey = false;
                        return (yield* this.pushCount(1)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
                    }
                }
        }
        return 0;
    }
    *pushTag() {
        if (this.charAt(1) === "<") {
            let i = this.pos + 2;
            let ch = this.buffer[i];
            while(!isEmpty(ch) && ch !== ">")ch = this.buffer[++i];
            return yield* this.pushToIndex(ch === ">" ? i + 1 : i, false);
        } else {
            let i = this.pos + 1;
            let ch = this.buffer[i];
            while(ch){
                if (tagChars.includes(ch)) ch = this.buffer[++i];
                else if (ch === "%" && hexDigits.includes(this.buffer[i + 1]) && hexDigits.includes(this.buffer[i + 2])) {
                    ch = this.buffer[i += 3];
                } else break;
            }
            return yield* this.pushToIndex(i, false);
        }
    }
    *pushNewline() {
        const ch = this.buffer[this.pos];
        if (ch === "\n") return yield* this.pushCount(1);
        else if (ch === "\r" && this.charAt(1) === "\n") return yield* this.pushCount(2);
        else return 0;
    }
    *pushSpaces(allowTabs) {
        let i = this.pos - 1;
        let ch;
        do {
            ch = this.buffer[++i];
        }while (ch === " " || allowTabs && ch === "	")
        const n = i - this.pos;
        if (n > 0) {
            yield this.buffer.substr(this.pos, n);
            this.pos = i;
        }
        return n;
    }
    *pushUntil(test) {
        let i = this.pos;
        let ch = this.buffer[i];
        while(!test(ch))ch = this.buffer[++i];
        return yield* this.pushToIndex(i, false);
    }
    constructor(){
        this.atEnd = false;
        this.blockScalarIndent = -1;
        this.blockScalarKeep = false;
        this.buffer = "";
        this.flowKey = false;
        this.flowLevel = 0;
        this.indentNext = 0;
        this.indentValue = 0;
        this.lineEndPos = null;
        this.next = null;
        this.pos = 0;
    }
};
// ../../node_modules/yaml/browser/dist/parse/line-counter.js
var LineCounter = class {
    constructor(){
        this.lineStarts = [];
        this.addNewLine = (offset)=>this.lineStarts.push(offset);
        this.linePos = (offset)=>{
            let low = 0;
            let high = this.lineStarts.length;
            while(low < high){
                const mid = low + high >> 1;
                if (this.lineStarts[mid] < offset) low = mid + 1;
                else high = mid;
            }
            if (this.lineStarts[low] === offset) return {
                line: low + 1,
                col: 1
            };
            if (low === 0) return {
                line: 0,
                col: offset
            };
            const start = this.lineStarts[low - 1];
            return {
                line: low,
                col: offset - start + 1
            };
        };
    }
};
// ../../node_modules/yaml/browser/dist/parse/parser.js
function includesToken(list, type) {
    for(let i = 0; i < list.length; ++i)if (list[i].type === type) return true;
    return false;
}
function includesNonEmpty(list) {
    for(let i = 0; i < list.length; ++i){
        switch(list[i].type){
            case "space":
            case "comment":
            case "newline":
                break;
            default:
                return true;
        }
    }
    return false;
}
function isFlowToken(token) {
    switch(token === null || token === void 0 ? void 0 : token.type){
        case "alias":
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar":
        case "flow-collection":
            return true;
        default:
            return false;
    }
}
function getPrevProps(parent) {
    switch(parent.type){
        case "document":
            return parent.start;
        case "block-map":
            {
                const it = parent.items[parent.items.length - 1];
                return it.sep || it.start;
            }
        case "block-seq":
            return parent.items[parent.items.length - 1].start;
        default:
            return [];
    }
}
function getFirstKeyStartProps(prev) {
    var _a;
    if (prev.length === 0) return [];
    let i = prev.length;
    loop: while(--i >= 0){
        switch(prev[i].type){
            case "doc-start":
            case "explicit-key-ind":
            case "map-value-ind":
            case "seq-item-ind":
            case "newline":
                break loop;
        }
    }
    while(((_a = prev[++i]) === null || _a === void 0 ? void 0 : _a.type) === "space"){}
    return prev.splice(i, prev.length);
}
function fixFlowSeqItems(fc) {
    if (fc.start.type === "flow-seq-start") {
        for (const it of fc.items){
            if (it.sep && !it.value && !includesToken(it.start, "explicit-key-ind") && !includesToken(it.sep, "map-value-ind")) {
                if (it.key) it.value = it.key;
                delete it.key;
                if (isFlowToken(it.value)) {
                    if (it.value.end) Array.prototype.push.apply(it.value.end, it.sep);
                    else it.value.end = it.sep;
                } else Array.prototype.push.apply(it.start, it.sep);
                delete it.sep;
            }
        }
    }
}
var Parser = class {
    /**
   * Parse `source` as a YAML stream.
   * If `incomplete`, a part of the last line may be left as a buffer for the next call.
   *
   * Errors are not thrown, but yielded as `{ type: 'error', message }` tokens.
   *
   * @returns A generator of tokens representing each directive, document, and other structure.
   */ *parse(source, incomplete = false) {
        if (this.onNewLine && this.offset === 0) this.onNewLine(0);
        for (const lexeme of this.lexer.lex(source, incomplete))yield* this.next(lexeme);
        if (!incomplete) yield* this.end();
    }
    /**
   * Advance the parser by the `source` of one lexical token.
   */ *next(source) {
        this.source = source;
        if (this.atScalar) {
            this.atScalar = false;
            yield* this.step();
            this.offset += source.length;
            return;
        }
        const type = tokenType(source);
        if (!type) {
            const message = `Not a YAML token: ${source}`;
            yield* this.pop({
                type: "error",
                offset: this.offset,
                message,
                source
            });
            this.offset += source.length;
        } else if (type === "scalar") {
            this.atNewLine = false;
            this.atScalar = true;
            this.type = "scalar";
        } else {
            this.type = type;
            yield* this.step();
            switch(type){
                case "newline":
                    this.atNewLine = true;
                    this.indent = 0;
                    if (this.onNewLine) this.onNewLine(this.offset + source.length);
                    break;
                case "space":
                    if (this.atNewLine && source[0] === " ") this.indent += source.length;
                    break;
                case "explicit-key-ind":
                case "map-value-ind":
                case "seq-item-ind":
                    if (this.atNewLine) this.indent += source.length;
                    break;
                case "doc-mode":
                case "flow-error-end":
                    return;
                default:
                    this.atNewLine = false;
            }
            this.offset += source.length;
        }
    }
    /** Call at end of input to push out any remaining constructions */ *end() {
        while(this.stack.length > 0)yield* this.pop();
    }
    get sourceToken() {
        const st = {
            type: this.type,
            offset: this.offset,
            indent: this.indent,
            source: this.source
        };
        return st;
    }
    *step() {
        const top = this.peek(1);
        if (this.type === "doc-end" && (!top || top.type !== "doc-end")) {
            while(this.stack.length > 0)yield* this.pop();
            this.stack.push({
                type: "doc-end",
                offset: this.offset,
                source: this.source
            });
            return;
        }
        if (!top) return yield* this.stream();
        switch(top.type){
            case "document":
                return yield* this.document(top);
            case "alias":
            case "scalar":
            case "single-quoted-scalar":
            case "double-quoted-scalar":
                return yield* this.scalar(top);
            case "block-scalar":
                return yield* this.blockScalar(top);
            case "block-map":
                return yield* this.blockMap(top);
            case "block-seq":
                return yield* this.blockSequence(top);
            case "flow-collection":
                return yield* this.flowCollection(top);
            case "doc-end":
                return yield* this.documentEnd(top);
        }
        yield* this.pop();
    }
    peek(n) {
        return this.stack[this.stack.length - n];
    }
    *pop(error) {
        const token = error || this.stack.pop();
        if (!token) {
            const message = "Tried to pop an empty stack";
            yield {
                type: "error",
                offset: this.offset,
                source: "",
                message
            };
        } else if (this.stack.length === 0) {
            yield token;
        } else {
            const top = this.peek(1);
            if (token.type === "block-scalar") {
                token.indent = "indent" in top ? top.indent : 0;
            } else if (token.type === "flow-collection" && top.type === "document") {
                token.indent = 0;
            }
            if (token.type === "flow-collection") fixFlowSeqItems(token);
            switch(top.type){
                case "document":
                    top.value = token;
                    break;
                case "block-scalar":
                    top.props.push(token);
                    break;
                case "block-map":
                    {
                        const it = top.items[top.items.length - 1];
                        if (it.value) {
                            top.items.push({
                                start: [],
                                key: token,
                                sep: []
                            });
                            this.onKeyLine = true;
                            return;
                        } else if (it.sep) {
                            it.value = token;
                        } else {
                            Object.assign(it, {
                                key: token,
                                sep: []
                            });
                            this.onKeyLine = !includesToken(it.start, "explicit-key-ind");
                            return;
                        }
                        break;
                    }
                case "block-seq":
                    {
                        const it = top.items[top.items.length - 1];
                        if (it.value) top.items.push({
                            start: [],
                            value: token
                        });
                        else it.value = token;
                        break;
                    }
                case "flow-collection":
                    {
                        const it = top.items[top.items.length - 1];
                        if (!it || it.value) top.items.push({
                            start: [],
                            key: token,
                            sep: []
                        });
                        else if (it.sep) it.value = token;
                        else Object.assign(it, {
                            key: token,
                            sep: []
                        });
                        return;
                    }
                default:
                    yield* this.pop();
                    yield* this.pop(token);
            }
            if ((top.type === "document" || top.type === "block-map" || top.type === "block-seq") && (token.type === "block-map" || token.type === "block-seq")) {
                const last = token.items[token.items.length - 1];
                if (last && !last.sep && !last.value && last.start.length > 0 && !includesNonEmpty(last.start) && (token.indent === 0 || last.start.every((st)=>st.type !== "comment" || st.indent < token.indent))) {
                    if (top.type === "document") top.end = last.start;
                    else top.items.push({
                        start: last.start
                    });
                    token.items.splice(-1, 1);
                }
            }
        }
    }
    *stream() {
        switch(this.type){
            case "directive-line":
                yield {
                    type: "directive",
                    offset: this.offset,
                    source: this.source
                };
                return;
            case "byte-order-mark":
            case "space":
            case "comment":
            case "newline":
                yield this.sourceToken;
                return;
            case "doc-mode":
            case "doc-start":
                {
                    const doc = {
                        type: "document",
                        offset: this.offset,
                        start: []
                    };
                    if (this.type === "doc-start") doc.start.push(this.sourceToken);
                    this.stack.push(doc);
                    return;
                }
        }
        yield {
            type: "error",
            offset: this.offset,
            message: `Unexpected ${this.type} token in YAML stream`,
            source: this.source
        };
    }
    *document(doc) {
        if (doc.value) return yield* this.lineEnd(doc);
        switch(this.type){
            case "doc-start":
                {
                    if (includesNonEmpty(doc.start)) {
                        yield* this.pop();
                        yield* this.step();
                    } else doc.start.push(this.sourceToken);
                    return;
                }
            case "anchor":
            case "tag":
            case "space":
            case "comment":
            case "newline":
                doc.start.push(this.sourceToken);
                return;
        }
        const bv = this.startBlockValue(doc);
        if (bv) this.stack.push(bv);
        else {
            yield {
                type: "error",
                offset: this.offset,
                message: `Unexpected ${this.type} token in YAML document`,
                source: this.source
            };
        }
    }
    *scalar(scalar) {
        if (this.type === "map-value-ind") {
            const prev = getPrevProps(this.peek(2));
            const start = getFirstKeyStartProps(prev);
            let sep;
            if (scalar.end) {
                sep = scalar.end;
                sep.push(this.sourceToken);
                delete scalar.end;
            } else sep = [
                this.sourceToken
            ];
            const map2 = {
                type: "block-map",
                offset: scalar.offset,
                indent: scalar.indent,
                items: [
                    {
                        start,
                        key: scalar,
                        sep
                    }
                ]
            };
            this.onKeyLine = true;
            this.stack[this.stack.length - 1] = map2;
        } else yield* this.lineEnd(scalar);
    }
    *blockScalar(scalar) {
        switch(this.type){
            case "space":
            case "comment":
            case "newline":
                scalar.props.push(this.sourceToken);
                return;
            case "scalar":
                scalar.source = this.source;
                this.atNewLine = true;
                this.indent = 0;
                if (this.onNewLine) {
                    let nl = this.source.indexOf("\n") + 1;
                    while(nl !== 0){
                        this.onNewLine(this.offset + nl);
                        nl = this.source.indexOf("\n", nl) + 1;
                    }
                }
                yield* this.pop();
                break;
            default:
                yield* this.pop();
                yield* this.step();
        }
    }
    *blockMap(map2) {
        var _a;
        const it = map2.items[map2.items.length - 1];
        switch(this.type){
            case "newline":
                this.onKeyLine = false;
                if (it.value) {
                    const end = "end" in it.value ? it.value.end : void 0;
                    const last = Array.isArray(end) ? end[end.length - 1] : void 0;
                    if ((last === null || last === void 0 ? void 0 : last.type) === "comment") end === null || end === void 0 ? void 0 : end.push(this.sourceToken);
                    else map2.items.push({
                        start: [
                            this.sourceToken
                        ]
                    });
                } else if (it.sep) it.sep.push(this.sourceToken);
                else it.start.push(this.sourceToken);
                return;
            case "space":
            case "comment":
                if (it.value) map2.items.push({
                    start: [
                        this.sourceToken
                    ]
                });
                else if (it.sep) it.sep.push(this.sourceToken);
                else {
                    if (this.atIndentedComment(it.start, map2.indent)) {
                        const prev = map2.items[map2.items.length - 2];
                        const end = (_a = prev === null || prev === void 0 ? void 0 : prev.value) === null || _a === void 0 ? void 0 : _a.end;
                        if (Array.isArray(end)) {
                            Array.prototype.push.apply(end, it.start);
                            end.push(this.sourceToken);
                            map2.items.pop();
                            return;
                        }
                    }
                    it.start.push(this.sourceToken);
                }
                return;
        }
        if (this.indent >= map2.indent) {
            const atNextItem = !this.onKeyLine && this.indent === map2.indent && (it.sep || includesNonEmpty(it.start));
            switch(this.type){
                case "anchor":
                case "tag":
                    if (atNextItem || it.value) {
                        map2.items.push({
                            start: [
                                this.sourceToken
                            ]
                        });
                        this.onKeyLine = true;
                    } else if (it.sep) it.sep.push(this.sourceToken);
                    else it.start.push(this.sourceToken);
                    return;
                case "explicit-key-ind":
                    if (!it.sep && !includesToken(it.start, "explicit-key-ind")) it.start.push(this.sourceToken);
                    else if (atNextItem || it.value) map2.items.push({
                        start: [
                            this.sourceToken
                        ]
                    });
                    else this.stack.push({
                        type: "block-map",
                        offset: this.offset,
                        indent: this.indent,
                        items: [
                            {
                                start: [
                                    this.sourceToken
                                ]
                            }
                        ]
                    });
                    this.onKeyLine = true;
                    return;
                case "map-value-ind":
                    if (includesToken(it.start, "explicit-key-ind")) {
                        if (!it.sep) {
                            if (includesToken(it.start, "newline")) {
                                Object.assign(it, {
                                    key: null,
                                    sep: [
                                        this.sourceToken
                                    ]
                                });
                            } else {
                                const start = getFirstKeyStartProps(it.start);
                                this.stack.push({
                                    type: "block-map",
                                    offset: this.offset,
                                    indent: this.indent,
                                    items: [
                                        {
                                            start,
                                            key: null,
                                            sep: [
                                                this.sourceToken
                                            ]
                                        }
                                    ]
                                });
                            }
                        } else if (it.value) {
                            map2.items.push({
                                start: [],
                                key: null,
                                sep: [
                                    this.sourceToken
                                ]
                            });
                        } else if (includesToken(it.sep, "map-value-ind")) {
                            this.stack.push({
                                type: "block-map",
                                offset: this.offset,
                                indent: this.indent,
                                items: [
                                    {
                                        start: [],
                                        key: null,
                                        sep: [
                                            this.sourceToken
                                        ]
                                    }
                                ]
                            });
                        } else if (isFlowToken(it.key) && !includesToken(it.sep, "newline")) {
                            const start = getFirstKeyStartProps(it.start);
                            const key = it.key;
                            const sep = it.sep;
                            sep.push(this.sourceToken);
                            delete it.key, delete it.sep;
                            this.stack.push({
                                type: "block-map",
                                offset: this.offset,
                                indent: this.indent,
                                items: [
                                    {
                                        start,
                                        key,
                                        sep
                                    }
                                ]
                            });
                        } else {
                            it.sep.push(this.sourceToken);
                        }
                    } else {
                        if (!it.sep) {
                            Object.assign(it, {
                                key: null,
                                sep: [
                                    this.sourceToken
                                ]
                            });
                        } else if (it.value || atNextItem) {
                            map2.items.push({
                                start: [],
                                key: null,
                                sep: [
                                    this.sourceToken
                                ]
                            });
                        } else if (includesToken(it.sep, "map-value-ind")) {
                            this.stack.push({
                                type: "block-map",
                                offset: this.offset,
                                indent: this.indent,
                                items: [
                                    {
                                        start: [],
                                        key: null,
                                        sep: [
                                            this.sourceToken
                                        ]
                                    }
                                ]
                            });
                        } else {
                            it.sep.push(this.sourceToken);
                        }
                    }
                    this.onKeyLine = true;
                    return;
                case "alias":
                case "scalar":
                case "single-quoted-scalar":
                case "double-quoted-scalar":
                    {
                        const fs = this.flowScalar(this.type);
                        if (atNextItem || it.value) {
                            map2.items.push({
                                start: [],
                                key: fs,
                                sep: []
                            });
                            this.onKeyLine = true;
                        } else if (it.sep) {
                            this.stack.push(fs);
                        } else {
                            Object.assign(it, {
                                key: fs,
                                sep: []
                            });
                            this.onKeyLine = true;
                        }
                        return;
                    }
                default:
                    {
                        const bv = this.startBlockValue(map2);
                        if (bv) {
                            if (atNextItem && bv.type !== "block-seq" && includesToken(it.start, "explicit-key-ind")) map2.items.push({
                                start: []
                            });
                            this.stack.push(bv);
                            return;
                        }
                    }
            }
        }
        yield* this.pop();
        yield* this.step();
    }
    *blockSequence(seq2) {
        var _a;
        const it = seq2.items[seq2.items.length - 1];
        switch(this.type){
            case "newline":
                if (it.value) {
                    const end = "end" in it.value ? it.value.end : void 0;
                    const last = Array.isArray(end) ? end[end.length - 1] : void 0;
                    if ((last === null || last === void 0 ? void 0 : last.type) === "comment") end === null || end === void 0 ? void 0 : end.push(this.sourceToken);
                    else seq2.items.push({
                        start: [
                            this.sourceToken
                        ]
                    });
                } else it.start.push(this.sourceToken);
                return;
            case "space":
            case "comment":
                if (it.value) seq2.items.push({
                    start: [
                        this.sourceToken
                    ]
                });
                else {
                    if (this.atIndentedComment(it.start, seq2.indent)) {
                        const prev = seq2.items[seq2.items.length - 2];
                        const end = (_a = prev === null || prev === void 0 ? void 0 : prev.value) === null || _a === void 0 ? void 0 : _a.end;
                        if (Array.isArray(end)) {
                            Array.prototype.push.apply(end, it.start);
                            end.push(this.sourceToken);
                            seq2.items.pop();
                            return;
                        }
                    }
                    it.start.push(this.sourceToken);
                }
                return;
            case "anchor":
            case "tag":
                if (it.value || this.indent <= seq2.indent) break;
                it.start.push(this.sourceToken);
                return;
            case "seq-item-ind":
                if (this.indent !== seq2.indent) break;
                if (it.value || includesToken(it.start, "seq-item-ind")) seq2.items.push({
                    start: [
                        this.sourceToken
                    ]
                });
                else it.start.push(this.sourceToken);
                return;
        }
        if (this.indent > seq2.indent) {
            const bv = this.startBlockValue(seq2);
            if (bv) {
                this.stack.push(bv);
                return;
            }
        }
        yield* this.pop();
        yield* this.step();
    }
    *flowCollection(fc) {
        const it = fc.items[fc.items.length - 1];
        if (this.type === "flow-error-end") {
            let top;
            do {
                yield* this.pop();
                top = this.peek(1);
            }while (top && top.type === "flow-collection")
        } else if (fc.end.length === 0) {
            switch(this.type){
                case "comma":
                case "explicit-key-ind":
                    if (!it || it.sep) fc.items.push({
                        start: [
                            this.sourceToken
                        ]
                    });
                    else it.start.push(this.sourceToken);
                    return;
                case "map-value-ind":
                    if (!it || it.value) fc.items.push({
                        start: [],
                        key: null,
                        sep: [
                            this.sourceToken
                        ]
                    });
                    else if (it.sep) it.sep.push(this.sourceToken);
                    else Object.assign(it, {
                        key: null,
                        sep: [
                            this.sourceToken
                        ]
                    });
                    return;
                case "space":
                case "comment":
                case "newline":
                case "anchor":
                case "tag":
                    if (!it || it.value) fc.items.push({
                        start: [
                            this.sourceToken
                        ]
                    });
                    else if (it.sep) it.sep.push(this.sourceToken);
                    else it.start.push(this.sourceToken);
                    return;
                case "alias":
                case "scalar":
                case "single-quoted-scalar":
                case "double-quoted-scalar":
                    {
                        const fs = this.flowScalar(this.type);
                        if (!it || it.value) fc.items.push({
                            start: [],
                            key: fs,
                            sep: []
                        });
                        else if (it.sep) this.stack.push(fs);
                        else Object.assign(it, {
                            key: fs,
                            sep: []
                        });
                        return;
                    }
                case "flow-map-end":
                case "flow-seq-end":
                    fc.end.push(this.sourceToken);
                    return;
            }
            const bv = this.startBlockValue(fc);
            if (bv) this.stack.push(bv);
            else {
                yield* this.pop();
                yield* this.step();
            }
        } else {
            const parent = this.peek(2);
            if (parent.type === "block-map" && (this.type === "map-value-ind" && parent.indent === fc.indent || this.type === "newline" && !parent.items[parent.items.length - 1].sep)) {
                yield* this.pop();
                yield* this.step();
            } else if (this.type === "map-value-ind" && parent.type !== "flow-collection") {
                const prev = getPrevProps(parent);
                const start = getFirstKeyStartProps(prev);
                fixFlowSeqItems(fc);
                const sep = fc.end.splice(1, fc.end.length);
                sep.push(this.sourceToken);
                const map2 = {
                    type: "block-map",
                    offset: fc.offset,
                    indent: fc.indent,
                    items: [
                        {
                            start,
                            key: fc,
                            sep
                        }
                    ]
                };
                this.onKeyLine = true;
                this.stack[this.stack.length - 1] = map2;
            } else {
                yield* this.lineEnd(fc);
            }
        }
    }
    flowScalar(type) {
        if (this.onNewLine) {
            let nl = this.source.indexOf("\n") + 1;
            while(nl !== 0){
                this.onNewLine(this.offset + nl);
                nl = this.source.indexOf("\n", nl) + 1;
            }
        }
        return {
            type,
            offset: this.offset,
            indent: this.indent,
            source: this.source
        };
    }
    startBlockValue(parent) {
        switch(this.type){
            case "alias":
            case "scalar":
            case "single-quoted-scalar":
            case "double-quoted-scalar":
                return this.flowScalar(this.type);
            case "block-scalar-header":
                return {
                    type: "block-scalar",
                    offset: this.offset,
                    indent: this.indent,
                    props: [
                        this.sourceToken
                    ],
                    source: ""
                };
            case "flow-map-start":
            case "flow-seq-start":
                return {
                    type: "flow-collection",
                    offset: this.offset,
                    indent: this.indent,
                    start: this.sourceToken,
                    items: [],
                    end: []
                };
            case "seq-item-ind":
                return {
                    type: "block-seq",
                    offset: this.offset,
                    indent: this.indent,
                    items: [
                        {
                            start: [
                                this.sourceToken
                            ]
                        }
                    ]
                };
            case "explicit-key-ind":
                {
                    this.onKeyLine = true;
                    const prev = getPrevProps(parent);
                    const start = getFirstKeyStartProps(prev);
                    start.push(this.sourceToken);
                    return {
                        type: "block-map",
                        offset: this.offset,
                        indent: this.indent,
                        items: [
                            {
                                start
                            }
                        ]
                    };
                }
            case "map-value-ind":
                {
                    this.onKeyLine = true;
                    const prev = getPrevProps(parent);
                    const start = getFirstKeyStartProps(prev);
                    return {
                        type: "block-map",
                        offset: this.offset,
                        indent: this.indent,
                        items: [
                            {
                                start,
                                key: null,
                                sep: [
                                    this.sourceToken
                                ]
                            }
                        ]
                    };
                }
        }
        return null;
    }
    atIndentedComment(start, indent) {
        if (this.type !== "comment") return false;
        if (this.indent <= indent) return false;
        return start.every((st)=>st.type === "newline" || st.type === "space");
    }
    *documentEnd(docEnd) {
        if (this.type !== "doc-mode") {
            if (docEnd.end) docEnd.end.push(this.sourceToken);
            else docEnd.end = [
                this.sourceToken
            ];
            if (this.type === "newline") yield* this.pop();
        }
    }
    *lineEnd(token) {
        switch(this.type){
            case "comma":
            case "doc-start":
            case "doc-end":
            case "flow-seq-end":
            case "flow-map-end":
            case "map-value-ind":
                yield* this.pop();
                yield* this.step();
                break;
            case "newline":
                this.onKeyLine = false;
            case "space":
            case "comment":
            default:
                if (token.end) token.end.push(this.sourceToken);
                else token.end = [
                    this.sourceToken
                ];
                if (this.type === "newline") yield* this.pop();
        }
    }
    /**
   * @param onNewLine - If defined, called separately with the start position of
   *   each new line (in `parse()`, including the start of input).
   */ constructor(onNewLine){
        this.atNewLine = true;
        this.atScalar = false;
        this.indent = 0;
        this.offset = 0;
        this.onKeyLine = false;
        this.stack = [];
        this.source = "";
        this.type = "";
        this.lexer = new Lexer();
        this.onNewLine = onNewLine;
    }
};
// ../../node_modules/yaml/browser/dist/public-api.js
function parseOptions(options) {
    const prettyErrors = options.prettyErrors !== false;
    const lineCounter = options.lineCounter || prettyErrors && new LineCounter() || null;
    return {
        lineCounter,
        prettyErrors
    };
}
function parseDocument(source, options = {}) {
    const { lineCounter , prettyErrors  } = parseOptions(options);
    const parser2 = new Parser(lineCounter === null || lineCounter === void 0 ? void 0 : lineCounter.addNewLine);
    const composer = new Composer(options);
    let doc = null;
    for (const _doc of composer.compose(parser2.parse(source), true, source.length)){
        if (!doc) doc = _doc;
        else if (doc.options.logLevel !== "silent") {
            doc.errors.push(new YAMLParseError(_doc.range.slice(0, 2), "MULTIPLE_DOCS", "Source contains multiple documents; please use YAML.parseAllDocuments()"));
            break;
        }
    }
    if (prettyErrors && lineCounter) {
        doc.errors.forEach(prettifyError(source, lineCounter));
        doc.warnings.forEach(prettifyError(source, lineCounter));
    }
    return doc;
}
function parse3(src, reviver, options) {
    let _reviver = void 0;
    if (typeof reviver === "function") {
        _reviver = reviver;
    } else if (options === void 0 && reviver && typeof reviver === "object") {
        options = reviver;
    }
    const doc = parseDocument(src, options);
    if (!doc) return null;
    doc.warnings.forEach((warning)=>warn(doc.options.logLevel, warning));
    if (doc.errors.length > 0) {
        if (doc.options.logLevel !== "silent") throw doc.errors[0];
        else doc.errors = [];
    }
    return doc.toJS(Object.assign({
        reviver: _reviver
    }, options));
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlSchemaService.js
var path2 = __toESM(require_path_browserify());
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/objects.js
function equals2(one, other) {
    if (one === other) {
        return true;
    }
    if (one === null || one === void 0 || other === null || other === void 0) {
        return false;
    }
    if (typeof one !== typeof other) {
        return false;
    }
    if (typeof one !== "object") {
        return false;
    }
    if (Array.isArray(one) !== Array.isArray(other)) {
        return false;
    }
    let i, key;
    if (Array.isArray(one)) {
        if (one.length !== other.length) {
            return false;
        }
        for(i = 0; i < one.length; i++){
            if (!equals2(one[i], other[i])) {
                return false;
            }
        }
    } else {
        const oneKeys = [];
        for(key in one){
            oneKeys.push(key);
        }
        oneKeys.sort();
        const otherKeys = [];
        for(key in other){
            otherKeys.push(key);
        }
        otherKeys.sort();
        if (!equals2(oneKeys, otherKeys)) {
            return false;
        }
        for(i = 0; i < oneKeys.length; i++){
            if (!equals2(one[oneKeys[i]], other[oneKeys[i]])) {
                return false;
            }
        }
    }
    return true;
}
function isNumber2(val) {
    return typeof val === "number";
}
function isDefined2(val) {
    return typeof val !== "undefined";
}
function isBoolean2(val) {
    return typeof val === "boolean";
}
function isString2(val) {
    return typeof val === "string";
}
function isIterable(val) {
    return Symbol.iterator in Object(val);
}
function convertErrorToTelemetryMsg(err) {
    var _a;
    if (!err) return "null";
    if (err instanceof Error) {
        return (_a = err.stack) != null ? _a : err.toString();
    }
    return err.toString();
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/schemaUtils.js
var path = __toESM(require_path_browserify());
function getSchemaTypeName(schema4) {
    if (schema4.title) {
        return schema4.title;
    }
    if (schema4.$id) {
        return getSchemaRefTypeTitle(schema4.$id);
    }
    if (schema4.$ref || schema4._$ref) {
        return getSchemaRefTypeTitle(schema4.$ref || schema4._$ref);
    }
    return schema4.closestTitle || (Array.isArray(schema4.type) ? schema4.type.join(" | ") : schema4.type);
}
function getSchemaRefTypeTitle($ref) {
    const match = $ref.match(/^(?:.*\/)?(.*?)(?:\.schema\.json)?$/);
    let type = !!match && match[1];
    if (!type) {
        type = "typeNotFound";
        console.error(`$ref (${$ref}) not parsed properly`);
    }
    return type;
}
function getSchemaTitle(schema4, url) {
    const uri = URI.parse(url);
    let baseName = path.basename(uri.fsPath);
    if (!path.extname(uri.fsPath)) {
        baseName += ".json";
    }
    if (Object.getOwnPropertyDescriptor(schema4, "name")) {
        return Object.getOwnPropertyDescriptor(schema4, "name").value + ` (${baseName})`;
    } else if (schema4.title) {
        return schema4.description ? schema4.title + " - " + schema4.description + ` (${baseName})` : schema4.title + ` (${baseName})`;
    }
    return baseName;
}
function isPrimitiveType(schema4) {
    return schema4.type !== "object" && !isAnyOfAllOfOneOfType(schema4);
}
function isAnyOfAllOfOneOfType(schema4) {
    return !!(schema4.anyOf || schema4.allOf || schema4.oneOf);
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/utils/json.js
function stringifyObject(obj, indent, stringifyLiteral) {
    if (obj !== null && typeof obj === "object") {
        var newIndent = indent + "	";
        if (Array.isArray(obj)) {
            if (obj.length === 0) {
                return "[]";
            }
            var result = "[\n";
            for(var i = 0; i < obj.length; i++){
                result += newIndent + stringifyObject(obj[i], newIndent, stringifyLiteral);
                if (i < obj.length - 1) {
                    result += ",";
                }
                result += "\n";
            }
            result += indent + "]";
            return result;
        } else {
            var keys = Object.keys(obj);
            if (keys.length === 0) {
                return "{}";
            }
            var result = "{\n";
            for(var i = 0; i < keys.length; i++){
                var key = keys[i];
                result += newIndent + JSON.stringify(key) + ": " + stringifyObject(obj[key], newIndent, stringifyLiteral);
                if (i < keys.length - 1) {
                    result += ",";
                }
                result += "\n";
            }
            result += indent + "}";
            return result;
        }
    }
    return stringifyLiteral(obj);
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonCompletion.js
var localize4 = loadMessageBundle();
var valueCommitCharacters = [
    ",",
    "}",
    "]"
];
var propertyCommitCharacters = [
    ":"
];
var JSONCompletion = /** @class */ function() {
    function JSONCompletion2(schemaService, contributions, promiseConstructor, clientCapabilities) {
        if (contributions === void 0) {
            contributions = [];
        }
        if (promiseConstructor === void 0) {
            promiseConstructor = Promise;
        }
        if (clientCapabilities === void 0) {
            clientCapabilities = {};
        }
        this.schemaService = schemaService;
        this.contributions = contributions;
        this.promiseConstructor = promiseConstructor;
        this.clientCapabilities = clientCapabilities;
    }
    JSONCompletion2.prototype.doResolve = function(item) {
        for(var i = this.contributions.length - 1; i >= 0; i--){
            var resolveCompletion = this.contributions[i].resolveCompletion;
            if (resolveCompletion) {
                var resolver = resolveCompletion(item);
                if (resolver) {
                    return resolver;
                }
            }
        }
        return this.promiseConstructor.resolve(item);
    };
    JSONCompletion2.prototype.doComplete = function(document, position, doc) {
        var _this = this;
        var result = {
            items: [],
            isIncomplete: false
        };
        var text = document.getText();
        var offset = document.offsetAt(position);
        var node = doc.getNodeFromOffset(offset, true);
        if (this.isInComment(document, node ? node.offset : 0, offset)) {
            return Promise.resolve(result);
        }
        if (node && offset === node.offset + node.length && offset > 0) {
            var ch = text[offset - 1];
            if (node.type === "object" && ch === "}" || node.type === "array" && ch === "]") {
                node = node.parent;
            }
        }
        var currentWord = this.getCurrentWord(document, offset);
        var overwriteRange;
        if (node && (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null")) {
            overwriteRange = Range.create(document.positionAt(node.offset), document.positionAt(node.offset + node.length));
        } else {
            var overwriteStart = offset - currentWord.length;
            if (overwriteStart > 0 && text[overwriteStart - 1] === '"') {
                overwriteStart--;
            }
            overwriteRange = Range.create(document.positionAt(overwriteStart), position);
        }
        var supportsCommitCharacters = false;
        var proposed = {};
        var collector = {
            add: function(suggestion) {
                var label = suggestion.label;
                var existing = proposed[label];
                if (!existing) {
                    label = label.replace(/[\n]/g, "\u21B5");
                    if (label.length > 60) {
                        var shortendedLabel = label.substr(0, 57).trim() + "...";
                        if (!proposed[shortendedLabel]) {
                            label = shortendedLabel;
                        }
                    }
                    if (overwriteRange && suggestion.insertText !== void 0) {
                        suggestion.textEdit = TextEdit.replace(overwriteRange, suggestion.insertText);
                    }
                    if (supportsCommitCharacters) {
                        suggestion.commitCharacters = suggestion.kind === lib_CompletionItemKind.Property ? propertyCommitCharacters : valueCommitCharacters;
                    }
                    suggestion.label = label;
                    proposed[label] = suggestion;
                    result.items.push(suggestion);
                } else {
                    if (!existing.documentation) {
                        existing.documentation = suggestion.documentation;
                    }
                    if (!existing.detail) {
                        existing.detail = suggestion.detail;
                    }
                }
            },
            setAsIncomplete: function() {
                result.isIncomplete = true;
            },
            error: function(message) {
                console.error(message);
            },
            log: function(message) {
                console.log(message);
            },
            getNumberOfProposals: function() {
                return result.items.length;
            }
        };
        return this.schemaService.getSchemaForResource(document.uri, doc).then(function(schema4) {
            var collectionPromises = [];
            var addValue = true;
            var currentKey = "";
            var currentProperty = void 0;
            if (node) {
                if (node.type === "string") {
                    var parent = node.parent;
                    if (parent && parent.type === "property" && parent.keyNode === node) {
                        addValue = !parent.valueNode;
                        currentProperty = parent;
                        currentKey = text.substr(node.offset + 1, node.length - 2);
                        if (parent) {
                            node = parent.parent;
                        }
                    }
                }
            }
            if (node && node.type === "object") {
                if (node.offset === offset) {
                    return result;
                }
                var properties = node.properties;
                properties.forEach(function(p) {
                    if (!currentProperty || currentProperty !== p) {
                        proposed[p.keyNode.value] = CompletionItem.create("__");
                    }
                });
                var separatorAfter_1 = "";
                if (addValue) {
                    separatorAfter_1 = _this.evaluateSeparatorAfter(document, document.offsetAt(overwriteRange.end));
                }
                if (schema4) {
                    _this.getPropertyCompletions(schema4, doc, node, addValue, separatorAfter_1, collector);
                } else {
                    _this.getSchemaLessPropertyCompletions(doc, node, currentKey, collector);
                }
                var location_1 = getNodePath3(node);
                _this.contributions.forEach(function(contribution) {
                    var collectPromise = contribution.collectPropertyCompletions(document.uri, location_1, currentWord, addValue, separatorAfter_1 === "", collector);
                    if (collectPromise) {
                        collectionPromises.push(collectPromise);
                    }
                });
                if (!schema4 && currentWord.length > 0 && text.charAt(offset - currentWord.length - 1) !== '"') {
                    collector.add({
                        kind: lib_CompletionItemKind.Property,
                        label: _this.getLabelForValue(currentWord),
                        insertText: _this.getInsertTextForProperty(currentWord, void 0, false, separatorAfter_1),
                        insertTextFormat: lib_InsertTextFormat.Snippet,
                        documentation: ""
                    });
                    collector.setAsIncomplete();
                }
            }
            var types = {};
            if (schema4) {
                _this.getValueCompletions(schema4, doc, node, offset, document, collector, types);
            } else {
                _this.getSchemaLessValueCompletions(doc, node, offset, document, collector);
            }
            if (_this.contributions.length > 0) {
                _this.getContributedValueCompletions(doc, node, offset, document, collector, collectionPromises);
            }
            return _this.promiseConstructor.all(collectionPromises).then(function() {
                if (collector.getNumberOfProposals() === 0) {
                    var offsetForSeparator = offset;
                    if (node && (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null")) {
                        offsetForSeparator = node.offset + node.length;
                    }
                    var separatorAfter = _this.evaluateSeparatorAfter(document, offsetForSeparator);
                    _this.addFillerValueCompletions(types, separatorAfter, collector);
                }
                return result;
            });
        });
    };
    JSONCompletion2.prototype.getPropertyCompletions = function(schema4, doc, node, addValue, separatorAfter, collector) {
        var _this = this;
        var matchingSchemas = doc.getMatchingSchemas(schema4.schema, node.offset);
        matchingSchemas.forEach(function(s) {
            if (s.node === node && !s.inverted) {
                var schemaProperties_1 = s.schema.properties;
                if (schemaProperties_1) {
                    Object.keys(schemaProperties_1).forEach(function(key) {
                        var propertySchema = schemaProperties_1[key];
                        if (typeof propertySchema === "object" && !propertySchema.deprecationMessage && !propertySchema.doNotSuggest) {
                            var proposal = {
                                kind: lib_CompletionItemKind.Property,
                                label: key,
                                insertText: _this.getInsertTextForProperty(key, propertySchema, addValue, separatorAfter),
                                insertTextFormat: lib_InsertTextFormat.Snippet,
                                filterText: _this.getFilterTextForValue(key),
                                documentation: _this.fromMarkup(propertySchema.markdownDescription) || propertySchema.description || ""
                            };
                            if (propertySchema.suggestSortText !== void 0) {
                                proposal.sortText = propertySchema.suggestSortText;
                            }
                            if (proposal.insertText && endsWith(proposal.insertText, "$1" + separatorAfter)) {
                                proposal.command = {
                                    title: "Suggest",
                                    command: "editor.action.triggerSuggest"
                                };
                            }
                            collector.add(proposal);
                        }
                    });
                }
                var schemaPropertyNames_1 = s.schema.propertyNames;
                if (typeof schemaPropertyNames_1 === "object" && !schemaPropertyNames_1.deprecationMessage && !schemaPropertyNames_1.doNotSuggest) {
                    var propertyNameCompletionItem = function(name, enumDescription2) {
                        if (enumDescription2 === void 0) {
                            enumDescription2 = void 0;
                        }
                        var proposal = {
                            kind: lib_CompletionItemKind.Property,
                            label: name,
                            insertText: _this.getInsertTextForProperty(name, void 0, addValue, separatorAfter),
                            insertTextFormat: lib_InsertTextFormat.Snippet,
                            filterText: _this.getFilterTextForValue(name),
                            documentation: enumDescription2 || _this.fromMarkup(schemaPropertyNames_1.markdownDescription) || schemaPropertyNames_1.description || ""
                        };
                        if (schemaPropertyNames_1.suggestSortText !== void 0) {
                            proposal.sortText = schemaPropertyNames_1.suggestSortText;
                        }
                        if (proposal.insertText && endsWith(proposal.insertText, "$1" + separatorAfter)) {
                            proposal.command = {
                                title: "Suggest",
                                command: "editor.action.triggerSuggest"
                            };
                        }
                        collector.add(proposal);
                    };
                    if (schemaPropertyNames_1.enum) {
                        for(var i = 0; i < schemaPropertyNames_1.enum.length; i++){
                            var enumDescription = void 0;
                            if (schemaPropertyNames_1.markdownEnumDescriptions && i < schemaPropertyNames_1.markdownEnumDescriptions.length) {
                                enumDescription = _this.fromMarkup(schemaPropertyNames_1.markdownEnumDescriptions[i]);
                            } else if (schemaPropertyNames_1.enumDescriptions && i < schemaPropertyNames_1.enumDescriptions.length) {
                                enumDescription = schemaPropertyNames_1.enumDescriptions[i];
                            }
                            propertyNameCompletionItem(schemaPropertyNames_1.enum[i], enumDescription);
                        }
                    }
                    if (schemaPropertyNames_1.const) {
                        propertyNameCompletionItem(schemaPropertyNames_1.const);
                    }
                }
            }
        });
    };
    JSONCompletion2.prototype.getSchemaLessPropertyCompletions = function(doc, node, currentKey, collector) {
        var _this = this;
        var collectCompletionsForSimilarObject = function(obj) {
            obj.properties.forEach(function(p) {
                var key = p.keyNode.value;
                collector.add({
                    kind: lib_CompletionItemKind.Property,
                    label: key,
                    insertText: _this.getInsertTextForValue(key, ""),
                    insertTextFormat: lib_InsertTextFormat.Snippet,
                    filterText: _this.getFilterTextForValue(key),
                    documentation: ""
                });
            });
        };
        if (node.parent) {
            if (node.parent.type === "property") {
                var parentKey_1 = node.parent.keyNode.value;
                doc.visit(function(n) {
                    if (n.type === "property" && n !== node.parent && n.keyNode.value === parentKey_1 && n.valueNode && n.valueNode.type === "object") {
                        collectCompletionsForSimilarObject(n.valueNode);
                    }
                    return true;
                });
            } else if (node.parent.type === "array") {
                node.parent.items.forEach(function(n) {
                    if (n.type === "object" && n !== node) {
                        collectCompletionsForSimilarObject(n);
                    }
                });
            }
        } else if (node.type === "object") {
            collector.add({
                kind: lib_CompletionItemKind.Property,
                label: "$schema",
                insertText: this.getInsertTextForProperty("$schema", void 0, true, ""),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                documentation: "",
                filterText: this.getFilterTextForValue("$schema")
            });
        }
    };
    JSONCompletion2.prototype.getSchemaLessValueCompletions = function(doc, node, offset, document, collector) {
        var _this = this;
        var offsetForSeparator = offset;
        if (node && (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null")) {
            offsetForSeparator = node.offset + node.length;
            node = node.parent;
        }
        if (!node) {
            collector.add({
                kind: this.getSuggestionKind("object"),
                label: "Empty object",
                insertText: this.getInsertTextForValue({}, ""),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                documentation: ""
            });
            collector.add({
                kind: this.getSuggestionKind("array"),
                label: "Empty array",
                insertText: this.getInsertTextForValue([], ""),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                documentation: ""
            });
            return;
        }
        var separatorAfter = this.evaluateSeparatorAfter(document, offsetForSeparator);
        var collectSuggestionsForValues = function(value1) {
            if (value1.parent && !contains2(value1.parent, offset, true)) {
                collector.add({
                    kind: _this.getSuggestionKind(value1.type),
                    label: _this.getLabelTextForMatchingNode(value1, document),
                    insertText: _this.getInsertTextForMatchingNode(value1, document, separatorAfter),
                    insertTextFormat: lib_InsertTextFormat.Snippet,
                    documentation: ""
                });
            }
            if (value1.type === "boolean") {
                _this.addBooleanValueCompletion(!value1.value, separatorAfter, collector);
            }
        };
        if (node.type === "property") {
            if (offset > (node.colonOffset || 0)) {
                var valueNode = node.valueNode;
                if (valueNode && (offset > valueNode.offset + valueNode.length || valueNode.type === "object" || valueNode.type === "array")) {
                    return;
                }
                var parentKey_2 = node.keyNode.value;
                doc.visit(function(n) {
                    if (n.type === "property" && n.keyNode.value === parentKey_2 && n.valueNode) {
                        collectSuggestionsForValues(n.valueNode);
                    }
                    return true;
                });
                if (parentKey_2 === "$schema" && node.parent && !node.parent.parent) {
                    this.addDollarSchemaCompletions(separatorAfter, collector);
                }
            }
        }
        if (node.type === "array") {
            if (node.parent && node.parent.type === "property") {
                var parentKey_3 = node.parent.keyNode.value;
                doc.visit(function(n) {
                    if (n.type === "property" && n.keyNode.value === parentKey_3 && n.valueNode && n.valueNode.type === "array") {
                        n.valueNode.items.forEach(collectSuggestionsForValues);
                    }
                    return true;
                });
            } else {
                node.items.forEach(collectSuggestionsForValues);
            }
        }
    };
    JSONCompletion2.prototype.getValueCompletions = function(schema4, doc, node, offset, document, collector, types) {
        var offsetForSeparator = offset;
        var parentKey = void 0;
        var valueNode = void 0;
        if (node && (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null")) {
            offsetForSeparator = node.offset + node.length;
            valueNode = node;
            node = node.parent;
        }
        if (!node) {
            this.addSchemaValueCompletions(schema4.schema, "", collector, types);
            return;
        }
        if (node.type === "property" && offset > (node.colonOffset || 0)) {
            var valueNode_1 = node.valueNode;
            if (valueNode_1 && offset > valueNode_1.offset + valueNode_1.length) {
                return;
            }
            parentKey = node.keyNode.value;
            node = node.parent;
        }
        if (node && (parentKey !== void 0 || node.type === "array")) {
            var separatorAfter = this.evaluateSeparatorAfter(document, offsetForSeparator);
            var matchingSchemas = doc.getMatchingSchemas(schema4.schema, node.offset, valueNode);
            for(var _i = 0, matchingSchemas_1 = matchingSchemas; _i < matchingSchemas_1.length; _i++){
                var s = matchingSchemas_1[_i];
                if (s.node === node && !s.inverted && s.schema) {
                    if (node.type === "array" && s.schema.items) {
                        if (Array.isArray(s.schema.items)) {
                            var index = this.findItemAtOffset(node, document, offset);
                            if (index < s.schema.items.length) {
                                this.addSchemaValueCompletions(s.schema.items[index], separatorAfter, collector, types);
                            }
                        } else {
                            this.addSchemaValueCompletions(s.schema.items, separatorAfter, collector, types);
                        }
                    }
                    if (parentKey !== void 0) {
                        var propertyMatched = false;
                        if (s.schema.properties) {
                            var propertySchema = s.schema.properties[parentKey];
                            if (propertySchema) {
                                propertyMatched = true;
                                this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types);
                            }
                        }
                        if (s.schema.patternProperties && !propertyMatched) {
                            for(var _a = 0, _b = Object.keys(s.schema.patternProperties); _a < _b.length; _a++){
                                var pattern = _b[_a];
                                var regex = extendedRegExp(pattern);
                                if (regex.test(parentKey)) {
                                    propertyMatched = true;
                                    var propertySchema = s.schema.patternProperties[pattern];
                                    this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types);
                                }
                            }
                        }
                        if (s.schema.additionalProperties && !propertyMatched) {
                            var propertySchema = s.schema.additionalProperties;
                            this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types);
                        }
                    }
                }
            }
            if (parentKey === "$schema" && !node.parent) {
                this.addDollarSchemaCompletions(separatorAfter, collector);
            }
            if (types["boolean"]) {
                this.addBooleanValueCompletion(true, separatorAfter, collector);
                this.addBooleanValueCompletion(false, separatorAfter, collector);
            }
            if (types["null"]) {
                this.addNullValueCompletion(separatorAfter, collector);
            }
        }
    };
    JSONCompletion2.prototype.getContributedValueCompletions = function(doc, node, offset, document, collector, collectionPromises) {
        if (!node) {
            this.contributions.forEach(function(contribution) {
                var collectPromise = contribution.collectDefaultCompletions(document.uri, collector);
                if (collectPromise) {
                    collectionPromises.push(collectPromise);
                }
            });
        } else {
            if (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null") {
                node = node.parent;
            }
            if (node && node.type === "property" && offset > (node.colonOffset || 0)) {
                var parentKey_4 = node.keyNode.value;
                var valueNode = node.valueNode;
                if ((!valueNode || offset <= valueNode.offset + valueNode.length) && node.parent) {
                    var location_2 = getNodePath3(node.parent);
                    this.contributions.forEach(function(contribution) {
                        var collectPromise = contribution.collectValueCompletions(document.uri, location_2, parentKey_4, collector);
                        if (collectPromise) {
                            collectionPromises.push(collectPromise);
                        }
                    });
                }
            }
        }
    };
    JSONCompletion2.prototype.addSchemaValueCompletions = function(schema4, separatorAfter, collector, types) {
        var _this = this;
        if (typeof schema4 === "object") {
            this.addEnumValueCompletions(schema4, separatorAfter, collector);
            this.addDefaultValueCompletions(schema4, separatorAfter, collector);
            this.collectTypes(schema4, types);
            if (Array.isArray(schema4.allOf)) {
                schema4.allOf.forEach(function(s) {
                    return _this.addSchemaValueCompletions(s, separatorAfter, collector, types);
                });
            }
            if (Array.isArray(schema4.anyOf)) {
                schema4.anyOf.forEach(function(s) {
                    return _this.addSchemaValueCompletions(s, separatorAfter, collector, types);
                });
            }
            if (Array.isArray(schema4.oneOf)) {
                schema4.oneOf.forEach(function(s) {
                    return _this.addSchemaValueCompletions(s, separatorAfter, collector, types);
                });
            }
        }
    };
    JSONCompletion2.prototype.addDefaultValueCompletions = function(schema4, separatorAfter, collector, arrayDepth) {
        var _this = this;
        if (arrayDepth === void 0) {
            arrayDepth = 0;
        }
        var hasProposals = false;
        if (isDefined(schema4.default)) {
            var type = schema4.type;
            var value1 = schema4.default;
            for(var i = arrayDepth; i > 0; i--){
                value1 = [
                    value1
                ];
                type = "array";
            }
            collector.add({
                kind: this.getSuggestionKind(type),
                label: this.getLabelForValue(value1),
                insertText: this.getInsertTextForValue(value1, separatorAfter),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                detail: localize4("json.suggest.default", "Default value")
            });
            hasProposals = true;
        }
        if (Array.isArray(schema4.examples)) {
            schema4.examples.forEach(function(example) {
                var type2 = schema4.type;
                var value2 = example;
                for(var i2 = arrayDepth; i2 > 0; i2--){
                    value2 = [
                        value2
                    ];
                    type2 = "array";
                }
                collector.add({
                    kind: _this.getSuggestionKind(type2),
                    label: _this.getLabelForValue(value2),
                    insertText: _this.getInsertTextForValue(value2, separatorAfter),
                    insertTextFormat: lib_InsertTextFormat.Snippet
                });
                hasProposals = true;
            });
        }
        if (Array.isArray(schema4.defaultSnippets)) {
            schema4.defaultSnippets.forEach(function(s) {
                var type2 = schema4.type;
                var value2 = s.body;
                var label = s.label;
                var insertText;
                var filterText;
                if (isDefined(value2)) {
                    var type_1 = schema4.type;
                    for(var i2 = arrayDepth; i2 > 0; i2--){
                        value2 = [
                            value2
                        ];
                        type_1 = "array";
                    }
                    insertText = _this.getInsertTextForSnippetValue(value2, separatorAfter);
                    filterText = _this.getFilterTextForSnippetValue(value2);
                    label = label || _this.getLabelForSnippetValue(value2);
                } else if (typeof s.bodyText === "string") {
                    var prefix = "", suffix = "", indent = "";
                    for(var i2 = arrayDepth; i2 > 0; i2--){
                        prefix = prefix + indent + "[\n";
                        suffix = suffix + "\n" + indent + "]";
                        indent += "	";
                        type2 = "array";
                    }
                    insertText = prefix + indent + s.bodyText.split("\n").join("\n" + indent) + suffix + separatorAfter;
                    label = label || insertText, filterText = insertText.replace(/[\n]/g, "");
                } else {
                    return;
                }
                collector.add({
                    kind: _this.getSuggestionKind(type2),
                    label,
                    documentation: _this.fromMarkup(s.markdownDescription) || s.description,
                    insertText,
                    insertTextFormat: lib_InsertTextFormat.Snippet,
                    filterText
                });
                hasProposals = true;
            });
        }
        if (!hasProposals && typeof schema4.items === "object" && !Array.isArray(schema4.items) && arrayDepth < 5) {
            this.addDefaultValueCompletions(schema4.items, separatorAfter, collector, arrayDepth + 1);
        }
    };
    JSONCompletion2.prototype.addEnumValueCompletions = function(schema4, separatorAfter, collector) {
        if (isDefined(schema4.const)) {
            collector.add({
                kind: this.getSuggestionKind(schema4.type),
                label: this.getLabelForValue(schema4.const),
                insertText: this.getInsertTextForValue(schema4.const, separatorAfter),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                documentation: this.fromMarkup(schema4.markdownDescription) || schema4.description
            });
        }
        if (Array.isArray(schema4.enum)) {
            for(var i = 0, length = schema4.enum.length; i < length; i++){
                var enm = schema4.enum[i];
                var documentation = this.fromMarkup(schema4.markdownDescription) || schema4.description;
                if (schema4.markdownEnumDescriptions && i < schema4.markdownEnumDescriptions.length && this.doesSupportMarkdown()) {
                    documentation = this.fromMarkup(schema4.markdownEnumDescriptions[i]);
                } else if (schema4.enumDescriptions && i < schema4.enumDescriptions.length) {
                    documentation = schema4.enumDescriptions[i];
                }
                collector.add({
                    kind: this.getSuggestionKind(schema4.type),
                    label: this.getLabelForValue(enm),
                    insertText: this.getInsertTextForValue(enm, separatorAfter),
                    insertTextFormat: lib_InsertTextFormat.Snippet,
                    documentation
                });
            }
        }
    };
    JSONCompletion2.prototype.collectTypes = function(schema4, types) {
        if (Array.isArray(schema4.enum) || isDefined(schema4.const)) {
            return;
        }
        var type = schema4.type;
        if (Array.isArray(type)) {
            type.forEach(function(t) {
                return types[t] = true;
            });
        } else if (type) {
            types[type] = true;
        }
    };
    JSONCompletion2.prototype.addFillerValueCompletions = function(types, separatorAfter, collector) {
        if (types["object"]) {
            collector.add({
                kind: this.getSuggestionKind("object"),
                label: "{}",
                insertText: this.getInsertTextForGuessedValue({}, separatorAfter),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                detail: localize4("defaults.object", "New object"),
                documentation: ""
            });
        }
        if (types["array"]) {
            collector.add({
                kind: this.getSuggestionKind("array"),
                label: "[]",
                insertText: this.getInsertTextForGuessedValue([], separatorAfter),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                detail: localize4("defaults.array", "New array"),
                documentation: ""
            });
        }
    };
    JSONCompletion2.prototype.addBooleanValueCompletion = function(value1, separatorAfter, collector) {
        collector.add({
            kind: this.getSuggestionKind("boolean"),
            label: value1 ? "true" : "false",
            insertText: this.getInsertTextForValue(value1, separatorAfter),
            insertTextFormat: lib_InsertTextFormat.Snippet,
            documentation: ""
        });
    };
    JSONCompletion2.prototype.addNullValueCompletion = function(separatorAfter, collector) {
        collector.add({
            kind: this.getSuggestionKind("null"),
            label: "null",
            insertText: "null" + separatorAfter,
            insertTextFormat: lib_InsertTextFormat.Snippet,
            documentation: ""
        });
    };
    JSONCompletion2.prototype.addDollarSchemaCompletions = function(separatorAfter, collector) {
        var _this = this;
        var schemaIds = this.schemaService.getRegisteredSchemaIds(function(schema4) {
            return schema4 === "http" || schema4 === "https";
        });
        schemaIds.forEach(function(schemaId) {
            return collector.add({
                kind: lib_CompletionItemKind.Module,
                label: _this.getLabelForValue(schemaId),
                filterText: _this.getFilterTextForValue(schemaId),
                insertText: _this.getInsertTextForValue(schemaId, separatorAfter),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                documentation: ""
            });
        });
    };
    JSONCompletion2.prototype.getLabelForValue = function(value1) {
        return JSON.stringify(value1);
    };
    JSONCompletion2.prototype.getFilterTextForValue = function(value1) {
        return JSON.stringify(value1);
    };
    JSONCompletion2.prototype.getFilterTextForSnippetValue = function(value1) {
        return JSON.stringify(value1).replace(/\$\{\d+:([^}]+)\}|\$\d+/g, "$1");
    };
    JSONCompletion2.prototype.getLabelForSnippetValue = function(value1) {
        var label = JSON.stringify(value1);
        return label.replace(/\$\{\d+:([^}]+)\}|\$\d+/g, "$1");
    };
    JSONCompletion2.prototype.getInsertTextForPlainText = function(text) {
        return text.replace(/[\\\$\}]/g, "\\$&");
    };
    JSONCompletion2.prototype.getInsertTextForValue = function(value1, separatorAfter) {
        var text = JSON.stringify(value1, null, "	");
        if (text === "{}") {
            return "{$1}" + separatorAfter;
        } else if (text === "[]") {
            return "[$1]" + separatorAfter;
        }
        return this.getInsertTextForPlainText(text + separatorAfter);
    };
    JSONCompletion2.prototype.getInsertTextForSnippetValue = function(value1, separatorAfter) {
        var replacer = function(value2) {
            if (typeof value2 === "string") {
                if (value2[0] === "^") {
                    return value2.substr(1);
                }
            }
            return JSON.stringify(value2);
        };
        return stringifyObject(value1, "", replacer) + separatorAfter;
    };
    JSONCompletion2.prototype.getInsertTextForGuessedValue = function(value1, separatorAfter) {
        switch(typeof value1){
            case "object":
                if (value1 === null) {
                    return "${1:null}" + separatorAfter;
                }
                return this.getInsertTextForValue(value1, separatorAfter);
            case "string":
                var snippetValue = JSON.stringify(value1);
                snippetValue = snippetValue.substr(1, snippetValue.length - 2);
                snippetValue = this.getInsertTextForPlainText(snippetValue);
                return '"${1:' + snippetValue + '}"' + separatorAfter;
            case "number":
            case "boolean":
                return "${1:" + JSON.stringify(value1) + "}" + separatorAfter;
        }
        return this.getInsertTextForValue(value1, separatorAfter);
    };
    JSONCompletion2.prototype.getSuggestionKind = function(type) {
        if (Array.isArray(type)) {
            var array = type;
            type = array.length > 0 ? array[0] : void 0;
        }
        if (!type) {
            return lib_CompletionItemKind.Value;
        }
        switch(type){
            case "string":
                return lib_CompletionItemKind.Value;
            case "object":
                return lib_CompletionItemKind.Module;
            case "property":
                return lib_CompletionItemKind.Property;
            default:
                return lib_CompletionItemKind.Value;
        }
    };
    JSONCompletion2.prototype.getLabelTextForMatchingNode = function(node, document) {
        switch(node.type){
            case "array":
                return "[]";
            case "object":
                return "{}";
            default:
                var content = document.getText().substr(node.offset, node.length);
                return content;
        }
    };
    JSONCompletion2.prototype.getInsertTextForMatchingNode = function(node, document, separatorAfter) {
        switch(node.type){
            case "array":
                return this.getInsertTextForValue([], separatorAfter);
            case "object":
                return this.getInsertTextForValue({}, separatorAfter);
            default:
                var content = document.getText().substr(node.offset, node.length) + separatorAfter;
                return this.getInsertTextForPlainText(content);
        }
    };
    JSONCompletion2.prototype.getInsertTextForProperty = function(key, propertySchema, addValue, separatorAfter) {
        var propertyText = this.getInsertTextForValue(key, "");
        if (!addValue) {
            return propertyText;
        }
        var resultText = propertyText + ": ";
        var value1;
        var nValueProposals = 0;
        if (propertySchema) {
            if (Array.isArray(propertySchema.defaultSnippets)) {
                if (propertySchema.defaultSnippets.length === 1) {
                    var body = propertySchema.defaultSnippets[0].body;
                    if (isDefined(body)) {
                        value1 = this.getInsertTextForSnippetValue(body, "");
                    }
                }
                nValueProposals += propertySchema.defaultSnippets.length;
            }
            if (propertySchema.enum) {
                if (!value1 && propertySchema.enum.length === 1) {
                    value1 = this.getInsertTextForGuessedValue(propertySchema.enum[0], "");
                }
                nValueProposals += propertySchema.enum.length;
            }
            if (isDefined(propertySchema.default)) {
                if (!value1) {
                    value1 = this.getInsertTextForGuessedValue(propertySchema.default, "");
                }
                nValueProposals++;
            }
            if (Array.isArray(propertySchema.examples) && propertySchema.examples.length) {
                if (!value1) {
                    value1 = this.getInsertTextForGuessedValue(propertySchema.examples[0], "");
                }
                nValueProposals += propertySchema.examples.length;
            }
            if (nValueProposals === 0) {
                var type = Array.isArray(propertySchema.type) ? propertySchema.type[0] : propertySchema.type;
                if (!type) {
                    if (propertySchema.properties) {
                        type = "object";
                    } else if (propertySchema.items) {
                        type = "array";
                    }
                }
                switch(type){
                    case "boolean":
                        value1 = "$1";
                        break;
                    case "string":
                        value1 = '"$1"';
                        break;
                    case "object":
                        value1 = "{$1}";
                        break;
                    case "array":
                        value1 = "[$1]";
                        break;
                    case "number":
                    case "integer":
                        value1 = "${1:0}";
                        break;
                    case "null":
                        value1 = "${1:null}";
                        break;
                    default:
                        return propertyText;
                }
            }
        }
        if (!value1 || nValueProposals > 1) {
            value1 = "$1";
        }
        return resultText + value1 + separatorAfter;
    };
    JSONCompletion2.prototype.getCurrentWord = function(document, offset) {
        var i = offset - 1;
        var text = document.getText();
        while(i >= 0 && ' 	\n\r\v":{[,]}'.indexOf(text.charAt(i)) === -1){
            i--;
        }
        return text.substring(i + 1, offset);
    };
    JSONCompletion2.prototype.evaluateSeparatorAfter = function(document, offset) {
        var scanner = createScanner2(document.getText(), true);
        scanner.setPosition(offset);
        var token = scanner.scan();
        switch(token){
            case 5:
            case 2:
            case 4:
            case 17:
                return "";
            default:
                return ",";
        }
    };
    JSONCompletion2.prototype.findItemAtOffset = function(node, document, offset) {
        var scanner = createScanner2(document.getText(), true);
        var children = node.items;
        for(var i = children.length - 1; i >= 0; i--){
            var child = children[i];
            if (offset > child.offset + child.length) {
                scanner.setPosition(child.offset + child.length);
                var token = scanner.scan();
                if (token === 5 && offset >= scanner.getTokenOffset() + scanner.getTokenLength()) {
                    return i + 1;
                }
                return i;
            } else if (offset >= child.offset) {
                return i;
            }
        }
        return 0;
    };
    JSONCompletion2.prototype.isInComment = function(document, start, offset) {
        var scanner = createScanner2(document.getText(), false);
        scanner.setPosition(start);
        var token = scanner.scan();
        while(token !== 17 && scanner.getTokenOffset() + scanner.getTokenLength() < offset){
            token = scanner.scan();
        }
        return (token === 12 || token === 13) && scanner.getTokenOffset() <= offset;
    };
    JSONCompletion2.prototype.fromMarkup = function(markupString) {
        if (markupString && this.doesSupportMarkdown()) {
            return {
                kind: MarkupKind.Markdown,
                value: markupString
            };
        }
        return void 0;
    };
    JSONCompletion2.prototype.doesSupportMarkdown = function() {
        if (!isDefined(this.supportsMarkdown)) {
            var completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;
            this.supportsMarkdown = completion && completion.completionItem && Array.isArray(completion.completionItem.documentationFormat) && completion.completionItem.documentationFormat.indexOf(MarkupKind.Markdown) !== -1;
        }
        return this.supportsMarkdown;
    };
    JSONCompletion2.prototype.doesSupportsCommitCharacters = function() {
        if (!isDefined(this.supportsCommitCharacters)) {
            var completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;
            this.supportsCommitCharacters = completion && completion.completionItem && !!completion.completionItem.commitCharactersSupport;
        }
        return this.supportsCommitCharacters;
    };
    return JSONCompletion2;
}();
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonHover.js
var JSONHover = /** @class */ function() {
    function JSONHover2(schemaService, contributions, promiseConstructor) {
        if (contributions === void 0) {
            contributions = [];
        }
        this.schemaService = schemaService;
        this.contributions = contributions;
        this.promise = promiseConstructor || Promise;
    }
    JSONHover2.prototype.doHover = function(document, position, doc) {
        var offset = document.offsetAt(position);
        var node = doc.getNodeFromOffset(offset);
        if (!node || (node.type === "object" || node.type === "array") && offset > node.offset + 1 && offset < node.offset + node.length - 1) {
            return this.promise.resolve(null);
        }
        var hoverRangeNode = node;
        if (node.type === "string") {
            var parent = node.parent;
            if (parent && parent.type === "property" && parent.keyNode === node) {
                node = parent.valueNode;
                if (!node) {
                    return this.promise.resolve(null);
                }
            }
        }
        var hoverRange = Range.create(document.positionAt(hoverRangeNode.offset), document.positionAt(hoverRangeNode.offset + hoverRangeNode.length));
        var createHover = function(contents) {
            var result = {
                contents,
                range: hoverRange
            };
            return result;
        };
        var location = getNodePath3(node);
        for(var i = this.contributions.length - 1; i >= 0; i--){
            var contribution = this.contributions[i];
            var promise = contribution.getInfoContribution(document.uri, location);
            if (promise) {
                return promise.then(function(htmlContent) {
                    return createHover(htmlContent);
                });
            }
        }
        return this.schemaService.getSchemaForResource(document.uri, doc).then(function(schema4) {
            if (schema4 && node) {
                var matchingSchemas = doc.getMatchingSchemas(schema4.schema, node.offset);
                var title_1 = void 0;
                var markdownDescription_1 = void 0;
                var markdownEnumValueDescription_1 = void 0, enumValue_1 = void 0;
                matchingSchemas.every(function(s) {
                    if (s.node === node && !s.inverted && s.schema) {
                        title_1 = title_1 || s.schema.title;
                        markdownDescription_1 = markdownDescription_1 || s.schema.markdownDescription || toMarkdown(s.schema.description);
                        if (s.schema.enum) {
                            var idx = s.schema.enum.indexOf(getNodeValue3(node));
                            if (s.schema.markdownEnumDescriptions) {
                                markdownEnumValueDescription_1 = s.schema.markdownEnumDescriptions[idx];
                            } else if (s.schema.enumDescriptions) {
                                markdownEnumValueDescription_1 = toMarkdown(s.schema.enumDescriptions[idx]);
                            }
                            if (markdownEnumValueDescription_1) {
                                enumValue_1 = s.schema.enum[idx];
                                if (typeof enumValue_1 !== "string") {
                                    enumValue_1 = JSON.stringify(enumValue_1);
                                }
                            }
                        }
                    }
                    return true;
                });
                var result = "";
                if (title_1) {
                    result = toMarkdown(title_1);
                }
                if (markdownDescription_1) {
                    if (result.length > 0) {
                        result += "\n\n";
                    }
                    result += markdownDescription_1;
                }
                if (markdownEnumValueDescription_1) {
                    if (result.length > 0) {
                        result += "\n\n";
                    }
                    result += "`" + toMarkdownCodeBlock(enumValue_1) + "`: " + markdownEnumValueDescription_1;
                }
                return createHover([
                    result
                ]);
            }
            return null;
        });
    };
    return JSONHover2;
}();
function toMarkdown(plain) {
    if (plain) {
        var res = plain.replace(/([^\n\r])(\r?\n)([^\n\r])/gm, "$1\n\n$3");
        return res.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
    }
    return void 0;
}
function toMarkdownCodeBlock(content) {
    if (content.indexOf("`") !== -1) {
        return "`` " + content + " ``";
    }
    return content;
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonValidation.js
var localize5 = loadMessageBundle();
var JSONValidation = /** @class */ function() {
    function JSONValidation2(jsonSchemaService, promiseConstructor) {
        this.jsonSchemaService = jsonSchemaService;
        this.promise = promiseConstructor;
        this.validationEnabled = true;
    }
    JSONValidation2.prototype.configure = function(raw) {
        if (raw) {
            this.validationEnabled = raw.validate !== false;
            this.commentSeverity = raw.allowComments ? void 0 : DiagnosticSeverity.Error;
        }
    };
    JSONValidation2.prototype.doValidation = function(textDocument, jsonDocument, documentSettings, schema4) {
        var _this = this;
        if (!this.validationEnabled) {
            return this.promise.resolve([]);
        }
        var diagnostics = [];
        var added = {};
        var addProblem = function(problem) {
            var signature = problem.range.start.line + " " + problem.range.start.character + " " + problem.message;
            if (!added[signature]) {
                added[signature] = true;
                diagnostics.push(problem);
            }
        };
        var getDiagnostics = function(schema5) {
            var trailingCommaSeverity = (documentSettings === null || documentSettings === void 0 ? void 0 : documentSettings.trailingCommas) ? toDiagnosticSeverity(documentSettings.trailingCommas) : DiagnosticSeverity.Error;
            var commentSeverity = (documentSettings === null || documentSettings === void 0 ? void 0 : documentSettings.comments) ? toDiagnosticSeverity(documentSettings.comments) : _this.commentSeverity;
            var schemaValidation = (documentSettings === null || documentSettings === void 0 ? void 0 : documentSettings.schemaValidation) ? toDiagnosticSeverity(documentSettings.schemaValidation) : DiagnosticSeverity.Warning;
            var schemaRequest = (documentSettings === null || documentSettings === void 0 ? void 0 : documentSettings.schemaRequest) ? toDiagnosticSeverity(documentSettings.schemaRequest) : DiagnosticSeverity.Warning;
            if (schema5) {
                if (schema5.errors.length && jsonDocument.root && schemaRequest) {
                    var astRoot = jsonDocument.root;
                    var property = astRoot.type === "object" ? astRoot.properties[0] : void 0;
                    if (property && property.keyNode.value === "$schema") {
                        var node = property.valueNode || property;
                        var range = Range.create(textDocument.positionAt(node.offset), textDocument.positionAt(node.offset + node.length));
                        addProblem(Diagnostic.create(range, schema5.errors[0], schemaRequest, ErrorCode.SchemaResolveError));
                    } else {
                        var range = Range.create(textDocument.positionAt(astRoot.offset), textDocument.positionAt(astRoot.offset + 1));
                        addProblem(Diagnostic.create(range, schema5.errors[0], schemaRequest, ErrorCode.SchemaResolveError));
                    }
                } else if (schemaValidation) {
                    var semanticErrors = jsonDocument.validate(textDocument, schema5.schema, schemaValidation);
                    if (semanticErrors) {
                        semanticErrors.forEach(addProblem);
                    }
                }
                if (schemaAllowsComments(schema5.schema)) {
                    commentSeverity = void 0;
                }
                if (schemaAllowsTrailingCommas(schema5.schema)) {
                    trailingCommaSeverity = void 0;
                }
            }
            for(var _i = 0, _a = jsonDocument.syntaxErrors; _i < _a.length; _i++){
                var p = _a[_i];
                if (p.code === ErrorCode.TrailingComma) {
                    if (typeof trailingCommaSeverity !== "number") {
                        continue;
                    }
                    p.severity = trailingCommaSeverity;
                }
                addProblem(p);
            }
            if (typeof commentSeverity === "number") {
                var message_1 = localize5("InvalidCommentToken", "Comments are not permitted in JSON.");
                jsonDocument.comments.forEach(function(c) {
                    addProblem(Diagnostic.create(c, message_1, commentSeverity, ErrorCode.CommentNotPermitted));
                });
            }
            return diagnostics;
        };
        if (schema4) {
            var id = schema4.id || "schemaservice://untitled/" + idCounter2++;
            return this.jsonSchemaService.resolveSchemaContent(new UnresolvedSchema(schema4), id, {}).then(function(resolvedSchema) {
                return getDiagnostics(resolvedSchema);
            });
        }
        return this.jsonSchemaService.getSchemaForResource(textDocument.uri, jsonDocument).then(function(schema5) {
            return getDiagnostics(schema5);
        });
    };
    return JSONValidation2;
}();
var idCounter2 = 0;
function schemaAllowsComments(schemaRef) {
    if (schemaRef && typeof schemaRef === "object") {
        if (isBoolean(schemaRef.allowComments)) {
            return schemaRef.allowComments;
        }
        if (schemaRef.allOf) {
            for(var _i = 0, _a = schemaRef.allOf; _i < _a.length; _i++){
                var schema4 = _a[_i];
                var allow = schemaAllowsComments(schema4);
                if (isBoolean(allow)) {
                    return allow;
                }
            }
        }
    }
    return void 0;
}
function schemaAllowsTrailingCommas(schemaRef) {
    if (schemaRef && typeof schemaRef === "object") {
        if (isBoolean(schemaRef.allowTrailingCommas)) {
            return schemaRef.allowTrailingCommas;
        }
        var deprSchemaRef = schemaRef;
        if (isBoolean(deprSchemaRef["allowsTrailingCommas"])) {
            return deprSchemaRef["allowsTrailingCommas"];
        }
        if (schemaRef.allOf) {
            for(var _i = 0, _a = schemaRef.allOf; _i < _a.length; _i++){
                var schema4 = _a[_i];
                var allow = schemaAllowsTrailingCommas(schema4);
                if (isBoolean(allow)) {
                    return allow;
                }
            }
        }
    }
    return void 0;
}
function toDiagnosticSeverity(severityLevel) {
    switch(severityLevel){
        case "error":
            return DiagnosticSeverity.Error;
        case "warning":
            return DiagnosticSeverity.Warning;
        case "ignore":
            return void 0;
    }
    return void 0;
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/utils/colors.js
var Digit0 = 48;
var Digit9 = 57;
var A = 65;
var a = 97;
var f = 102;
function hexDigit(charCode) {
    if (charCode < Digit0) {
        return 0;
    }
    if (charCode <= Digit9) {
        return charCode - Digit0;
    }
    if (charCode < a) {
        charCode += a - A;
    }
    if (charCode >= a && charCode <= f) {
        return charCode - a + 10;
    }
    return 0;
}
function colorFromHex(text) {
    if (text[0] !== "#") {
        return void 0;
    }
    switch(text.length){
        case 4:
            return {
                red: hexDigit(text.charCodeAt(1)) * 17 / 255,
                green: hexDigit(text.charCodeAt(2)) * 17 / 255,
                blue: hexDigit(text.charCodeAt(3)) * 17 / 255,
                alpha: 1
            };
        case 5:
            return {
                red: hexDigit(text.charCodeAt(1)) * 17 / 255,
                green: hexDigit(text.charCodeAt(2)) * 17 / 255,
                blue: hexDigit(text.charCodeAt(3)) * 17 / 255,
                alpha: hexDigit(text.charCodeAt(4)) * 17 / 255
            };
        case 7:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 16 + hexDigit(text.charCodeAt(2))) / 255,
                green: (hexDigit(text.charCodeAt(3)) * 16 + hexDigit(text.charCodeAt(4))) / 255,
                blue: (hexDigit(text.charCodeAt(5)) * 16 + hexDigit(text.charCodeAt(6))) / 255,
                alpha: 1
            };
        case 9:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 16 + hexDigit(text.charCodeAt(2))) / 255,
                green: (hexDigit(text.charCodeAt(3)) * 16 + hexDigit(text.charCodeAt(4))) / 255,
                blue: (hexDigit(text.charCodeAt(5)) * 16 + hexDigit(text.charCodeAt(6))) / 255,
                alpha: (hexDigit(text.charCodeAt(7)) * 16 + hexDigit(text.charCodeAt(8))) / 255
            };
    }
    return void 0;
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonDocumentSymbols.js
var JSONDocumentSymbols = /** @class */ function() {
    function JSONDocumentSymbols2(schemaService) {
        this.schemaService = schemaService;
    }
    JSONDocumentSymbols2.prototype.findDocumentSymbols = function(document, doc, context) {
        var _this = this;
        if (context === void 0) {
            context = {
                resultLimit: Number.MAX_VALUE
            };
        }
        var root = doc.root;
        if (!root) {
            return [];
        }
        var limit = context.resultLimit || Number.MAX_VALUE;
        var resourceString = document.uri;
        if (resourceString === "vscode://defaultsettings/keybindings.json" || endsWith(resourceString.toLowerCase(), "/user/keybindings.json")) {
            if (root.type === "array") {
                var result_1 = [];
                for(var _i = 0, _a = root.items; _i < _a.length; _i++){
                    var item = _a[_i];
                    if (item.type === "object") {
                        for(var _b = 0, _c = item.properties; _b < _c.length; _b++){
                            var property = _c[_b];
                            if (property.keyNode.value === "key" && property.valueNode) {
                                var location = Location.create(document.uri, getRange(document, item));
                                result_1.push({
                                    name: getNodeValue3(property.valueNode),
                                    kind: SymbolKind.Function,
                                    location
                                });
                                limit--;
                                if (limit <= 0) {
                                    if (context && context.onResultLimitExceeded) {
                                        context.onResultLimitExceeded(resourceString);
                                    }
                                    return result_1;
                                }
                            }
                        }
                    }
                }
                return result_1;
            }
        }
        var toVisit = [
            {
                node: root,
                containerName: ""
            }
        ];
        var nextToVisit = 0;
        var limitExceeded = false;
        var result = [];
        var collectOutlineEntries = function(node, containerName) {
            if (node.type === "array") {
                node.items.forEach(function(node2) {
                    if (node2) {
                        toVisit.push({
                            node: node2,
                            containerName
                        });
                    }
                });
            } else if (node.type === "object") {
                node.properties.forEach(function(property2) {
                    var valueNode = property2.valueNode;
                    if (valueNode) {
                        if (limit > 0) {
                            limit--;
                            var location2 = Location.create(document.uri, getRange(document, property2));
                            var childContainerName = containerName ? containerName + "." + property2.keyNode.value : property2.keyNode.value;
                            result.push({
                                name: _this.getKeyLabel(property2),
                                kind: _this.getSymbolKind(valueNode.type),
                                location: location2,
                                containerName
                            });
                            toVisit.push({
                                node: valueNode,
                                containerName: childContainerName
                            });
                        } else {
                            limitExceeded = true;
                        }
                    }
                });
            }
        };
        while(nextToVisit < toVisit.length){
            var next = toVisit[nextToVisit++];
            collectOutlineEntries(next.node, next.containerName);
        }
        if (limitExceeded && context && context.onResultLimitExceeded) {
            context.onResultLimitExceeded(resourceString);
        }
        return result;
    };
    JSONDocumentSymbols2.prototype.findDocumentSymbols2 = function(document, doc, context) {
        var _this = this;
        if (context === void 0) {
            context = {
                resultLimit: Number.MAX_VALUE
            };
        }
        var root = doc.root;
        if (!root) {
            return [];
        }
        var limit = context.resultLimit || Number.MAX_VALUE;
        var resourceString = document.uri;
        if (resourceString === "vscode://defaultsettings/keybindings.json" || endsWith(resourceString.toLowerCase(), "/user/keybindings.json")) {
            if (root.type === "array") {
                var result_2 = [];
                for(var _i = 0, _a = root.items; _i < _a.length; _i++){
                    var item = _a[_i];
                    if (item.type === "object") {
                        for(var _b = 0, _c = item.properties; _b < _c.length; _b++){
                            var property = _c[_b];
                            if (property.keyNode.value === "key" && property.valueNode) {
                                var range = getRange(document, item);
                                var selectionRange = getRange(document, property.keyNode);
                                result_2.push({
                                    name: getNodeValue3(property.valueNode),
                                    kind: SymbolKind.Function,
                                    range,
                                    selectionRange
                                });
                                limit--;
                                if (limit <= 0) {
                                    if (context && context.onResultLimitExceeded) {
                                        context.onResultLimitExceeded(resourceString);
                                    }
                                    return result_2;
                                }
                            }
                        }
                    }
                }
                return result_2;
            }
        }
        var result = [];
        var toVisit = [
            {
                node: root,
                result
            }
        ];
        var nextToVisit = 0;
        var limitExceeded = false;
        var collectOutlineEntries = function(node, result2) {
            if (node.type === "array") {
                node.items.forEach(function(node2, index) {
                    if (node2) {
                        if (limit > 0) {
                            limit--;
                            var range2 = getRange(document, node2);
                            var selectionRange2 = range2;
                            var name = String(index);
                            var symbol = {
                                name,
                                kind: _this.getSymbolKind(node2.type),
                                range: range2,
                                selectionRange: selectionRange2,
                                children: []
                            };
                            result2.push(symbol);
                            toVisit.push({
                                result: symbol.children,
                                node: node2
                            });
                        } else {
                            limitExceeded = true;
                        }
                    }
                });
            } else if (node.type === "object") {
                node.properties.forEach(function(property2) {
                    var valueNode = property2.valueNode;
                    if (valueNode) {
                        if (limit > 0) {
                            limit--;
                            var range2 = getRange(document, property2);
                            var selectionRange2 = getRange(document, property2.keyNode);
                            var children = [];
                            var symbol = {
                                name: _this.getKeyLabel(property2),
                                kind: _this.getSymbolKind(valueNode.type),
                                range: range2,
                                selectionRange: selectionRange2,
                                children,
                                detail: _this.getDetail(valueNode)
                            };
                            result2.push(symbol);
                            toVisit.push({
                                result: children,
                                node: valueNode
                            });
                        } else {
                            limitExceeded = true;
                        }
                    }
                });
            }
        };
        while(nextToVisit < toVisit.length){
            var next = toVisit[nextToVisit++];
            collectOutlineEntries(next.node, next.result);
        }
        if (limitExceeded && context && context.onResultLimitExceeded) {
            context.onResultLimitExceeded(resourceString);
        }
        return result;
    };
    JSONDocumentSymbols2.prototype.getSymbolKind = function(nodeType) {
        switch(nodeType){
            case "object":
                return SymbolKind.Module;
            case "string":
                return SymbolKind.String;
            case "number":
                return SymbolKind.Number;
            case "array":
                return SymbolKind.Array;
            case "boolean":
                return SymbolKind.Boolean;
            default:
                return SymbolKind.Variable;
        }
    };
    JSONDocumentSymbols2.prototype.getKeyLabel = function(property) {
        var name = property.keyNode.value;
        if (name) {
            name = name.replace(/[\n]/g, "\u21B5");
        }
        if (name && name.trim()) {
            return name;
        }
        return '"' + name + '"';
    };
    JSONDocumentSymbols2.prototype.getDetail = function(node) {
        if (!node) {
            return void 0;
        }
        if (node.type === "boolean" || node.type === "number" || node.type === "null" || node.type === "string") {
            return String(node.value);
        } else {
            if (node.type === "array") {
                return node.children.length ? void 0 : "[]";
            } else if (node.type === "object") {
                return node.children.length ? void 0 : "{}";
            }
        }
        return void 0;
    };
    JSONDocumentSymbols2.prototype.findDocumentColors = function(document, doc, context) {
        return this.schemaService.getSchemaForResource(document.uri, doc).then(function(schema4) {
            var result = [];
            if (schema4) {
                var limit = context && typeof context.resultLimit === "number" ? context.resultLimit : Number.MAX_VALUE;
                var matchingSchemas = doc.getMatchingSchemas(schema4.schema);
                var visitedNode = {};
                for(var _i = 0, matchingSchemas_1 = matchingSchemas; _i < matchingSchemas_1.length; _i++){
                    var s = matchingSchemas_1[_i];
                    if (!s.inverted && s.schema && (s.schema.format === "color" || s.schema.format === "color-hex") && s.node && s.node.type === "string") {
                        var nodeId = String(s.node.offset);
                        if (!visitedNode[nodeId]) {
                            var color = colorFromHex(getNodeValue3(s.node));
                            if (color) {
                                var range = getRange(document, s.node);
                                result.push({
                                    color,
                                    range
                                });
                            }
                            visitedNode[nodeId] = true;
                            limit--;
                            if (limit <= 0) {
                                if (context && context.onResultLimitExceeded) {
                                    context.onResultLimitExceeded(document.uri);
                                }
                                return result;
                            }
                        }
                    }
                }
            }
            return result;
        });
    };
    JSONDocumentSymbols2.prototype.getColorPresentations = function(document, doc, color, range) {
        var result = [];
        var red256 = Math.round(color.red * 255), green256 = Math.round(color.green * 255), blue256 = Math.round(color.blue * 255);
        function toTwoDigitHex(n) {
            var r = n.toString(16);
            return r.length !== 2 ? "0" + r : r;
        }
        var label;
        if (color.alpha === 1) {
            label = "#" + toTwoDigitHex(red256) + toTwoDigitHex(green256) + toTwoDigitHex(blue256);
        } else {
            label = "#" + toTwoDigitHex(red256) + toTwoDigitHex(green256) + toTwoDigitHex(blue256) + toTwoDigitHex(Math.round(color.alpha * 255));
        }
        result.push({
            label,
            textEdit: TextEdit.replace(range, JSON.stringify(label))
        });
        return result;
    };
    return JSONDocumentSymbols2;
}();
function getRange(document, node) {
    return Range.create(document.positionAt(node.offset), document.positionAt(node.offset + node.length));
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/configuration.js
var localize6 = loadMessageBundle();
var schemaContributions = {
    schemaAssociations: [],
    schemas: {
        // refer to the latest schema
        "http://json-schema.org/schema#": {
            $ref: "http://json-schema.org/draft-07/schema#"
        },
        // bundle the schema-schema to include (localized) descriptions
        "http://json-schema.org/draft-04/schema#": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "definitions": {
                "schemaArray": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#"
                    }
                },
                "positiveInteger": {
                    "type": "integer",
                    "minimum": 0
                },
                "positiveIntegerDefault0": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveInteger"
                        },
                        {
                            "default": 0
                        }
                    ]
                },
                "simpleTypes": {
                    "type": "string",
                    "enum": [
                        "array",
                        "boolean",
                        "integer",
                        "null",
                        "number",
                        "object",
                        "string"
                    ]
                },
                "stringArray": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "uniqueItems": true
                }
            },
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uri"
                },
                "$schema": {
                    "type": "string",
                    "format": "uri"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "default": {},
                "multipleOf": {
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true
                },
                "maximum": {
                    "type": "number"
                },
                "exclusiveMaximum": {
                    "type": "boolean",
                    "default": false
                },
                "minimum": {
                    "type": "number"
                },
                "exclusiveMinimum": {
                    "type": "boolean",
                    "default": false
                },
                "maxLength": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveInteger"
                        }
                    ]
                },
                "minLength": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveIntegerDefault0"
                        }
                    ]
                },
                "pattern": {
                    "type": "string",
                    "format": "regex"
                },
                "additionalItems": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "$ref": "#"
                        }
                    ],
                    "default": {}
                },
                "items": {
                    "anyOf": [
                        {
                            "$ref": "#"
                        },
                        {
                            "$ref": "#/definitions/schemaArray"
                        }
                    ],
                    "default": {}
                },
                "maxItems": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveInteger"
                        }
                    ]
                },
                "minItems": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveIntegerDefault0"
                        }
                    ]
                },
                "uniqueItems": {
                    "type": "boolean",
                    "default": false
                },
                "maxProperties": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveInteger"
                        }
                    ]
                },
                "minProperties": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveIntegerDefault0"
                        }
                    ]
                },
                "required": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/stringArray"
                        }
                    ]
                },
                "additionalProperties": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "$ref": "#"
                        }
                    ],
                    "default": {}
                },
                "definitions": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#"
                    },
                    "default": {}
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#"
                    },
                    "default": {}
                },
                "patternProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#"
                    },
                    "default": {}
                },
                "dependencies": {
                    "type": "object",
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "$ref": "#"
                            },
                            {
                                "$ref": "#/definitions/stringArray"
                            }
                        ]
                    }
                },
                "enum": {
                    "type": "array",
                    "minItems": 1,
                    "uniqueItems": true
                },
                "type": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/simpleTypes"
                        },
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/simpleTypes"
                            },
                            "minItems": 1,
                            "uniqueItems": true
                        }
                    ]
                },
                "format": {
                    "anyOf": [
                        {
                            "type": "string",
                            "enum": [
                                "date-time",
                                "uri",
                                "email",
                                "hostname",
                                "ipv4",
                                "ipv6",
                                "regex"
                            ]
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "allOf": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemaArray"
                        }
                    ]
                },
                "anyOf": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemaArray"
                        }
                    ]
                },
                "oneOf": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemaArray"
                        }
                    ]
                },
                "not": {
                    "allOf": [
                        {
                            "$ref": "#"
                        }
                    ]
                }
            },
            "dependencies": {
                "exclusiveMaximum": [
                    "maximum"
                ],
                "exclusiveMinimum": [
                    "minimum"
                ]
            },
            "default": {}
        },
        "http://json-schema.org/draft-07/schema#": {
            "definitions": {
                "schemaArray": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#"
                    }
                },
                "nonNegativeInteger": {
                    "type": "integer",
                    "minimum": 0
                },
                "nonNegativeIntegerDefault0": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/nonNegativeInteger"
                        },
                        {
                            "default": 0
                        }
                    ]
                },
                "simpleTypes": {
                    "enum": [
                        "array",
                        "boolean",
                        "integer",
                        "null",
                        "number",
                        "object",
                        "string"
                    ]
                },
                "stringArray": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true,
                    "default": []
                }
            },
            "type": [
                "object",
                "boolean"
            ],
            "properties": {
                "$id": {
                    "type": "string",
                    "format": "uri-reference"
                },
                "$schema": {
                    "type": "string",
                    "format": "uri"
                },
                "$ref": {
                    "type": "string",
                    "format": "uri-reference"
                },
                "$comment": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "default": true,
                "readOnly": {
                    "type": "boolean",
                    "default": false
                },
                "examples": {
                    "type": "array",
                    "items": true
                },
                "multipleOf": {
                    "type": "number",
                    "exclusiveMinimum": 0
                },
                "maximum": {
                    "type": "number"
                },
                "exclusiveMaximum": {
                    "type": "number"
                },
                "minimum": {
                    "type": "number"
                },
                "exclusiveMinimum": {
                    "type": "number"
                },
                "maxLength": {
                    "$ref": "#/definitions/nonNegativeInteger"
                },
                "minLength": {
                    "$ref": "#/definitions/nonNegativeIntegerDefault0"
                },
                "pattern": {
                    "type": "string",
                    "format": "regex"
                },
                "additionalItems": {
                    "$ref": "#"
                },
                "items": {
                    "anyOf": [
                        {
                            "$ref": "#"
                        },
                        {
                            "$ref": "#/definitions/schemaArray"
                        }
                    ],
                    "default": true
                },
                "maxItems": {
                    "$ref": "#/definitions/nonNegativeInteger"
                },
                "minItems": {
                    "$ref": "#/definitions/nonNegativeIntegerDefault0"
                },
                "uniqueItems": {
                    "type": "boolean",
                    "default": false
                },
                "contains": {
                    "$ref": "#"
                },
                "maxProperties": {
                    "$ref": "#/definitions/nonNegativeInteger"
                },
                "minProperties": {
                    "$ref": "#/definitions/nonNegativeIntegerDefault0"
                },
                "required": {
                    "$ref": "#/definitions/stringArray"
                },
                "additionalProperties": {
                    "$ref": "#"
                },
                "definitions": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#"
                    },
                    "default": {}
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#"
                    },
                    "default": {}
                },
                "patternProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#"
                    },
                    "propertyNames": {
                        "format": "regex"
                    },
                    "default": {}
                },
                "dependencies": {
                    "type": "object",
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "$ref": "#"
                            },
                            {
                                "$ref": "#/definitions/stringArray"
                            }
                        ]
                    }
                },
                "propertyNames": {
                    "$ref": "#"
                },
                "const": true,
                "enum": {
                    "type": "array",
                    "items": true,
                    "minItems": 1,
                    "uniqueItems": true
                },
                "type": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/simpleTypes"
                        },
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/simpleTypes"
                            },
                            "minItems": 1,
                            "uniqueItems": true
                        }
                    ]
                },
                "format": {
                    "type": "string"
                },
                "contentMediaType": {
                    "type": "string"
                },
                "contentEncoding": {
                    "type": "string"
                },
                "if": {
                    "$ref": "#"
                },
                "then": {
                    "$ref": "#"
                },
                "else": {
                    "$ref": "#"
                },
                "allOf": {
                    "$ref": "#/definitions/schemaArray"
                },
                "anyOf": {
                    "$ref": "#/definitions/schemaArray"
                },
                "oneOf": {
                    "$ref": "#/definitions/schemaArray"
                },
                "not": {
                    "$ref": "#"
                }
            },
            "default": true
        }
    }
};
var descriptions = {
    id: localize6("schema.json.id", "A unique identifier for the schema."),
    $schema: localize6("schema.json.$schema", "The schema to verify this document against."),
    title: localize6("schema.json.title", "A descriptive title of the element."),
    description: localize6("schema.json.description", "A long description of the element. Used in hover menus and suggestions."),
    default: localize6("schema.json.default", "A default value. Used by suggestions."),
    multipleOf: localize6("schema.json.multipleOf", "A number that should cleanly divide the current value (i.e. have no remainder)."),
    maximum: localize6("schema.json.maximum", "The maximum numerical value, inclusive by default."),
    exclusiveMaximum: localize6("schema.json.exclusiveMaximum", "Makes the maximum property exclusive."),
    minimum: localize6("schema.json.minimum", "The minimum numerical value, inclusive by default."),
    exclusiveMinimum: localize6("schema.json.exclusiveMininum", "Makes the minimum property exclusive."),
    maxLength: localize6("schema.json.maxLength", "The maximum length of a string."),
    minLength: localize6("schema.json.minLength", "The minimum length of a string."),
    pattern: localize6("schema.json.pattern", "A regular expression to match the string against. It is not implicitly anchored."),
    additionalItems: localize6("schema.json.additionalItems", "For arrays, only when items is set as an array. If it is a schema, then this schema validates items after the ones specified by the items array. If it is false, then additional items will cause validation to fail."),
    items: localize6("schema.json.items", "For arrays. Can either be a schema to validate every element against or an array of schemas to validate each item against in order (the first schema will validate the first element, the second schema will validate the second element, and so on."),
    maxItems: localize6("schema.json.maxItems", "The maximum number of items that can be inside an array. Inclusive."),
    minItems: localize6("schema.json.minItems", "The minimum number of items that can be inside an array. Inclusive."),
    uniqueItems: localize6("schema.json.uniqueItems", "If all of the items in the array must be unique. Defaults to false."),
    maxProperties: localize6("schema.json.maxProperties", "The maximum number of properties an object can have. Inclusive."),
    minProperties: localize6("schema.json.minProperties", "The minimum number of properties an object can have. Inclusive."),
    required: localize6("schema.json.required", "An array of strings that lists the names of all properties required on this object."),
    additionalProperties: localize6("schema.json.additionalProperties", "Either a schema or a boolean. If a schema, then used to validate all properties not matched by 'properties' or 'patternProperties'. If false, then any properties not matched by either will cause this schema to fail."),
    definitions: localize6("schema.json.definitions", "Not used for validation. Place subschemas here that you wish to reference inline with $ref."),
    properties: localize6("schema.json.properties", "A map of property names to schemas for each property."),
    patternProperties: localize6("schema.json.patternProperties", "A map of regular expressions on property names to schemas for matching properties."),
    dependencies: localize6("schema.json.dependencies", "A map of property names to either an array of property names or a schema. An array of property names means the property named in the key depends on the properties in the array being present in the object in order to be valid. If the value is a schema, then the schema is only applied to the object if the property in the key exists on the object."),
    enum: localize6("schema.json.enum", "The set of literal values that are valid."),
    type: localize6("schema.json.type", "Either a string of one of the basic schema types (number, integer, null, array, object, boolean, string) or an array of strings specifying a subset of those types."),
    format: localize6("schema.json.format", "Describes the format expected for the value."),
    allOf: localize6("schema.json.allOf", "An array of schemas, all of which must match."),
    anyOf: localize6("schema.json.anyOf", "An array of schemas, where at least one must match."),
    oneOf: localize6("schema.json.oneOf", "An array of schemas, exactly one of which must match."),
    not: localize6("schema.json.not", "A schema which must not match."),
    $id: localize6("schema.json.$id", "A unique identifier for the schema."),
    $ref: localize6("schema.json.$ref", "Reference a definition hosted on any location."),
    $comment: localize6("schema.json.$comment", "Comments from schema authors to readers or maintainers of the schema."),
    readOnly: localize6("schema.json.readOnly", "Indicates that the value of the instance is managed exclusively by the owning authority."),
    examples: localize6("schema.json.examples", "Sample JSON values associated with a particular schema, for the purpose of illustrating usage."),
    contains: localize6("schema.json.contains", 'An array instance is valid against "contains" if at least one of its elements is valid against the given schema.'),
    propertyNames: localize6("schema.json.propertyNames", "If the instance is an object, this keyword validates if every property name in the instance validates against the provided schema."),
    const: localize6("schema.json.const", "An instance validates successfully against this keyword if its value is equal to the value of the keyword."),
    contentMediaType: localize6("schema.json.contentMediaType", "Describes the media type of a string property."),
    contentEncoding: localize6("schema.json.contentEncoding", "Describes the content encoding of a string property."),
    if: localize6("schema.json.if", 'The validation outcome of the "if" subschema controls which of the "then" or "else" keywords are evaluated.'),
    then: localize6("schema.json.then", 'The "if" subschema is used for validation when the "if" subschema succeeds.'),
    else: localize6("schema.json.else", 'The "else" subschema is used for validation when the "if" subschema fails.')
};
for(schemaName in schemaContributions.schemas){
    schema4 = schemaContributions.schemas[schemaName];
    for(property in schema4.properties){
        propertyObject = schema4.properties[property];
        if (typeof propertyObject === "boolean") {
            propertyObject = schema4.properties[property] = {};
        }
        description = descriptions[property];
        if (description) {
            propertyObject["description"] = description;
        } else {
            console.log(property + ": localize('schema.json." + property + `', "")`);
        }
    }
}
var schema4;
var propertyObject;
var description;
var property;
var schemaName;
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonLinks.js
function findLinks(document, doc) {
    var links = [];
    doc.visit(function(node) {
        var _a;
        if (node.type === "property" && node.keyNode.value === "$ref" && ((_a = node.valueNode) === null || _a === void 0 ? void 0 : _a.type) === "string") {
            var path5 = node.valueNode.value;
            var targetNode = findTargetNode(doc, path5);
            if (targetNode) {
                var targetPos = document.positionAt(targetNode.offset);
                links.push({
                    target: document.uri + "#" + (targetPos.line + 1) + "," + (targetPos.character + 1),
                    range: createRange(document, node.valueNode)
                });
            }
        }
        return true;
    });
    return Promise.resolve(links);
}
function createRange(document, node) {
    return Range.create(document.positionAt(node.offset + 1), document.positionAt(node.offset + node.length - 1));
}
function findTargetNode(doc, path5) {
    var tokens = parseJSONPointer(path5);
    if (!tokens) {
        return null;
    }
    return findNode(tokens, doc.root);
}
function findNode(pointer, node) {
    if (!node) {
        return null;
    }
    if (pointer.length === 0) {
        return node;
    }
    var token = pointer.shift();
    if (node && node.type === "object") {
        var propertyNode = node.properties.find(function(propertyNode2) {
            return propertyNode2.keyNode.value === token;
        });
        if (!propertyNode) {
            return null;
        }
        return findNode(pointer, propertyNode.valueNode);
    } else if (node && node.type === "array") {
        if (token.match(/^(0|[1-9][0-9]*)$/)) {
            var index = Number.parseInt(token);
            var arrayItem = node.items[index];
            if (!arrayItem) {
                return null;
            }
            return findNode(pointer, arrayItem);
        }
    }
    return null;
}
function parseJSONPointer(path5) {
    if (path5 === "#") {
        return [];
    }
    if (path5[0] !== "#" || path5[1] !== "/") {
        return null;
    }
    return path5.substring(2).split(/\//).map(lib_unescape);
}
function lib_unescape(str) {
    return str.replace(/~1/g, "/").replace(/~0/g, "~");
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/arrUtils.js
function matchOffsetToDocument(offset, jsonDocuments) {
    for (const jsonDoc of jsonDocuments.documents){
        if (jsonDoc.internalDocument && jsonDoc.internalDocument.range[0] <= offset && jsonDoc.internalDocument.range[2] >= offset) {
            return jsonDoc;
        }
    }
    if (jsonDocuments.documents.length === 1) {
        return jsonDocuments.documents[0];
    }
    return null;
}
function filterInvalidCustomTags(customTags) {
    const validCustomTags = [
        "mapping",
        "scalar",
        "sequence"
    ];
    if (!customTags) {
        return [];
    }
    return customTags.filter((tag)=>{
        if (typeof tag === "string") {
            const typeInfo = tag.split(" ");
            const type = typeInfo[1] && typeInfo[1].toLowerCase() || "scalar";
            if (type === "map") {
                return false;
            }
            return validCustomTags.indexOf(type) !== -1;
        }
        return false;
    });
}
function isArrayEqual(fst, snd) {
    if (!snd || !fst) {
        return false;
    }
    if (snd.length !== fst.length) {
        return false;
    }
    for(let index = fst.length - 1; index >= 0; index--){
        if (fst[index] !== snd[index]) {
            return false;
        }
    }
    return true;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/parser/jsonParser07.js
var localize7 = loadMessageBundle();
var MSG_PROPERTY_NOT_ALLOWED = "Property {0} is not allowed.";
var formats2 = {
    "color-hex": {
        errorMessage: localize7("colorHexFormatWarning", "Invalid color format. Use #RGB, #RGBA, #RRGGBB or #RRGGBBAA."),
        pattern: /^#([0-9A-Fa-f]{3,4}|([0-9A-Fa-f]{2}){3,4})$/
    },
    "date-time": {
        errorMessage: localize7("dateTimeFormatWarning", "String is not a RFC3339 date-time."),
        pattern: /^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i
    },
    date: {
        errorMessage: localize7("dateFormatWarning", "String is not a RFC3339 date."),
        pattern: /^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/i
    },
    time: {
        errorMessage: localize7("timeFormatWarning", "String is not a RFC3339 time."),
        pattern: /^([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i
    },
    email: {
        errorMessage: localize7("emailFormatWarning", "String is not an e-mail address."),
        pattern: /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
    }
};
var YAML_SOURCE = "YAML";
var YAML_SCHEMA_PREFIX = "yaml-schema: ";
var ProblemType;
(function(ProblemType2) {
    ProblemType2["missingRequiredPropWarning"] = "missingRequiredPropWarning";
    ProblemType2["typeMismatchWarning"] = "typeMismatchWarning";
    ProblemType2["constWarning"] = "constWarning";
})(ProblemType || (ProblemType = {}));
var ProblemTypeMessages = {
    [ProblemType.missingRequiredPropWarning]: 'Missing property "{0}".',
    [ProblemType.typeMismatchWarning]: 'Incorrect type. Expected "{0}".',
    [ProblemType.constWarning]: "Value must be {0}."
};
var ASTNodeImpl2 = class {
    getNodeFromOffsetEndInclusive(offset) {
        const collector = [];
        const findNode2 = (node)=>{
            if (offset >= node.offset && offset <= node.offset + node.length) {
                const children = node.children;
                for(let i = 0; i < children.length && children[i].offset <= offset; i++){
                    const item = findNode2(children[i]);
                    if (item) {
                        collector.push(item);
                    }
                }
                return node;
            }
            return null;
        };
        const foundNode = findNode2(this);
        let currMinDist = Number.MAX_VALUE;
        let currMinNode = null;
        for (const currNode of collector){
            const minDist = currNode.length + currNode.offset - offset + (offset - currNode.offset);
            if (minDist < currMinDist) {
                currMinNode = currNode;
                currMinDist = minDist;
            }
        }
        return currMinNode || foundNode;
    }
    get children() {
        return [];
    }
    toString() {
        return "type: " + this.type + " (" + this.offset + "/" + this.length + ")" + (this.parent ? " parent: {" + this.parent.toString() + "}" : "");
    }
    constructor(parent, internalNode, offset, length){
        this.offset = offset;
        this.length = length;
        this.parent = parent;
        this.internalNode = internalNode;
    }
};
var NullASTNodeImpl2 = class extends ASTNodeImpl2 {
    constructor(parent, internalNode, offset, length){
        super(parent, internalNode, offset, length);
        this.type = "null";
        this.value = null;
    }
};
var BooleanASTNodeImpl2 = class extends ASTNodeImpl2 {
    constructor(parent, internalNode, boolValue, offset, length){
        super(parent, internalNode, offset, length);
        this.type = "boolean";
        this.value = boolValue;
    }
};
var ArrayASTNodeImpl2 = class extends ASTNodeImpl2 {
    get children() {
        return this.items;
    }
    constructor(parent, internalNode, offset, length){
        super(parent, internalNode, offset, length);
        this.type = "array";
        this.items = [];
    }
};
var NumberASTNodeImpl2 = class extends ASTNodeImpl2 {
    constructor(parent, internalNode, offset, length){
        super(parent, internalNode, offset, length);
        this.type = "number";
        this.isInteger = true;
        this.value = Number.NaN;
    }
};
var StringASTNodeImpl2 = class extends ASTNodeImpl2 {
    constructor(parent, internalNode, offset, length){
        super(parent, internalNode, offset, length);
        this.type = "string";
        this.value = "";
    }
};
var PropertyASTNodeImpl2 = class extends ASTNodeImpl2 {
    get children() {
        return this.valueNode ? [
            this.keyNode,
            this.valueNode
        ] : [
            this.keyNode
        ];
    }
    constructor(parent, internalNode, offset, length){
        super(parent, internalNode, offset, length);
        this.type = "property";
        this.colonOffset = -1;
    }
};
var ObjectASTNodeImpl2 = class extends ASTNodeImpl2 {
    get children() {
        return this.properties;
    }
    constructor(parent, internalNode, offset, length){
        super(parent, internalNode, offset, length);
        this.type = "object";
        this.properties = [];
    }
};
function asSchema2(schema4) {
    if (schema4 === void 0) {
        return void 0;
    }
    if (isBoolean2(schema4)) {
        return schema4 ? {} : {
            not: {}
        };
    }
    if (typeof schema4 !== "object") {
        console.warn(`Wrong schema: ${JSON.stringify(schema4)}, it MUST be an Object or Boolean`);
        schema4 = {
            type: schema4
        };
    }
    return schema4;
}
var EnumMatch2;
(function(EnumMatch3) {
    EnumMatch3[EnumMatch3["Key"] = 0] = "Key";
    EnumMatch3[EnumMatch3["Enum"] = 1] = "Enum";
})(EnumMatch2 || (EnumMatch2 = {}));
var SchemaCollector2 = class {
    add(schema4) {
        this.schemas.push(schema4);
    }
    merge(other) {
        this.schemas.push(...other.schemas);
    }
    include(node) {
        return (this.focusOffset === -1 || contains3(node, this.focusOffset)) && node !== this.exclude;
    }
    newSub() {
        return new SchemaCollector2(-1, this.exclude);
    }
    constructor(focusOffset = -1, exclude = null){
        this.focusOffset = focusOffset;
        this.exclude = exclude;
        this.schemas = [];
    }
};
var NoOpSchemaCollector2 = class {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    get schemas() {
        return [];
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    add(schema4) {}
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    merge(other) {}
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    include(node) {
        return true;
    }
    newSub() {
        return this;
    }
    constructor(){}
};
NoOpSchemaCollector2.instance = new NoOpSchemaCollector2();
var ValidationResult2 = class {
    hasProblems() {
        return !!this.problems.length;
    }
    mergeAll(validationResults) {
        for (const validationResult of validationResults){
            this.merge(validationResult);
        }
    }
    merge(validationResult) {
        this.problems = this.problems.concat(validationResult.problems);
    }
    mergeEnumValues(validationResult) {
        if (!this.enumValueMatch && !validationResult.enumValueMatch && this.enumValues && validationResult.enumValues) {
            this.enumValues = this.enumValues.concat(validationResult.enumValues);
            for (const error of this.problems){
                if (error.code === ErrorCode.EnumValueMismatch) {
                    error.message = localize7("enumWarning", "Value is not accepted. Valid values: {0}.", [
                        ...new Set(this.enumValues)
                    ].map((v)=>{
                        return JSON.stringify(v);
                    }).join(", "));
                }
            }
        }
    }
    /**
   * Merge multiple warnings with same problemType together
   * @param subValidationResult another possible result
   */ mergeWarningGeneric(subValidationResult, problemTypesToMerge) {
        var _a, _b;
        if ((_a = this.problems) == null ? void 0 : _a.length) {
            for (const problemType of problemTypesToMerge){
                const bestResults = this.problems.filter((p)=>p.problemType === problemType);
                for (const bestResult of bestResults){
                    const mergingResult = (_b = subValidationResult.problems) == null ? void 0 : _b.find((p)=>p.problemType === problemType && bestResult.location.offset === p.location.offset && (problemType !== ProblemType.missingRequiredPropWarning || isArrayEqual(p.problemArgs, bestResult.problemArgs)));
                    if (mergingResult) {
                        if (mergingResult.problemArgs.length) {
                            mergingResult.problemArgs.filter((p)=>!bestResult.problemArgs.includes(p)).forEach((p)=>bestResult.problemArgs.push(p));
                            bestResult.message = getWarningMessage(bestResult.problemType, bestResult.problemArgs);
                        }
                        this.mergeSources(mergingResult, bestResult);
                    }
                }
            }
        }
    }
    mergePropertyMatch(propertyValidationResult) {
        this.merge(propertyValidationResult);
        this.propertiesMatches++;
        if (propertyValidationResult.enumValueMatch || !propertyValidationResult.hasProblems() && propertyValidationResult.propertiesMatches) {
            this.propertiesValueMatches++;
        }
        if (propertyValidationResult.enumValueMatch && propertyValidationResult.enumValues) {
            this.primaryValueMatches++;
        }
    }
    mergeSources(mergingResult, bestResult) {
        const mergingSource = mergingResult.source.replace(YAML_SCHEMA_PREFIX, "");
        if (!bestResult.source.includes(mergingSource)) {
            bestResult.source = bestResult.source + " | " + mergingSource;
        }
        if (!bestResult.schemaUri.includes(mergingResult.schemaUri[0])) {
            bestResult.schemaUri = bestResult.schemaUri.concat(mergingResult.schemaUri);
        }
    }
    compareGeneric(other) {
        const hasProblems = this.hasProblems();
        if (hasProblems !== other.hasProblems()) {
            return hasProblems ? -1 : 1;
        }
        if (this.enumValueMatch !== other.enumValueMatch) {
            return other.enumValueMatch ? -1 : 1;
        }
        if (this.propertiesValueMatches !== other.propertiesValueMatches) {
            return this.propertiesValueMatches - other.propertiesValueMatches;
        }
        if (this.primaryValueMatches !== other.primaryValueMatches) {
            return this.primaryValueMatches - other.primaryValueMatches;
        }
        return this.propertiesMatches - other.propertiesMatches;
    }
    compareKubernetes(other) {
        const hasProblems = this.hasProblems();
        if (this.propertiesMatches !== other.propertiesMatches) {
            return this.propertiesMatches - other.propertiesMatches;
        }
        if (this.enumValueMatch !== other.enumValueMatch) {
            return other.enumValueMatch ? -1 : 1;
        }
        if (this.primaryValueMatches !== other.primaryValueMatches) {
            return this.primaryValueMatches - other.primaryValueMatches;
        }
        if (this.propertiesValueMatches !== other.propertiesValueMatches) {
            return this.propertiesValueMatches - other.propertiesValueMatches;
        }
        if (hasProblems !== other.hasProblems()) {
            return hasProblems ? -1 : 1;
        }
        return this.propertiesMatches - other.propertiesMatches;
    }
    constructor(isKubernetes){
        this.problems = [];
        this.propertiesMatches = 0;
        this.propertiesValueMatches = 0;
        this.primaryValueMatches = 0;
        this.enumValueMatch = false;
        if (isKubernetes) {
            this.enumValues = [];
        } else {
            this.enumValues = null;
        }
    }
};
function getNodeValue4(node) {
    switch(node.type){
        case "array":
            return node.children.map(getNodeValue4);
        case "object":
            {
                const obj = /* @__PURE__ */ Object.create(null);
                for(let _i = 0, _a = node.children; _i < _a.length; _i++){
                    const prop = _a[_i];
                    const valueNode = prop.children[1];
                    if (valueNode) {
                        obj[prop.children[0].value] = getNodeValue4(valueNode);
                    }
                }
                return obj;
            }
        case "null":
        case "string":
        case "number":
        case "boolean":
            return node.value;
        default:
            return void 0;
    }
}
function contains3(node, offset, includeRightBound = false) {
    return offset >= node.offset && offset <= node.offset + node.length || includeRightBound && offset === node.offset + node.length;
}
function findNodeAtOffset3(node, offset, includeRightBound) {
    if (includeRightBound === void 0) {
        includeRightBound = false;
    }
    if (contains3(node, offset, includeRightBound)) {
        const children = node.children;
        if (Array.isArray(children)) {
            for(let i = 0; i < children.length && children[i].offset <= offset; i++){
                const item = findNodeAtOffset3(children[i], offset, includeRightBound);
                if (item) {
                    return item;
                }
            }
        }
        return node;
    }
    return void 0;
}
var JSONDocument2 = class {
    getNodeFromOffset(offset, includeRightBound = false) {
        if (this.root) {
            return findNodeAtOffset3(this.root, offset, includeRightBound);
        }
        return void 0;
    }
    getNodeFromOffsetEndInclusive(offset) {
        return this.root && this.root.getNodeFromOffsetEndInclusive(offset);
    }
    visit(visitor) {
        if (this.root) {
            const doVisit = (node)=>{
                let ctn = visitor(node);
                const children = node.children;
                if (Array.isArray(children)) {
                    for(let i = 0; i < children.length && ctn; i++){
                        ctn = doVisit(children[i]);
                    }
                }
                return ctn;
            };
            doVisit(this.root);
        }
    }
    validate(textDocument, schema4) {
        if (this.root && schema4) {
            const validationResult = new ValidationResult2(this.isKubernetes);
            validate2(this.root, schema4, schema4, validationResult, NoOpSchemaCollector2.instance, {
                isKubernetes: this.isKubernetes,
                disableAdditionalProperties: this.disableAdditionalProperties,
                uri: this.uri
            });
            return validationResult.problems.map((p)=>{
                const range = Range.create(textDocument.positionAt(p.location.offset), textDocument.positionAt(p.location.offset + p.location.length));
                const diagnostic = Diagnostic.create(range, p.message, p.severity, p.code ? p.code : ErrorCode.Undefined, p.source);
                diagnostic.data = {
                    schemaUri: p.schemaUri,
                    ...p.data
                };
                return diagnostic;
            });
        }
        return null;
    }
    /**
   * This method returns the list of applicable schemas
   *
   * currently used @param didCallFromAutoComplete flag to differentiate the method call, when it is from auto complete
   * then user still types something and skip the validation for timebeing untill completed.
   * On https://github.com/redhat-developer/yaml-language-server/pull/719 the auto completes need to populate the list of enum string which matches to the enum
   * and on https://github.com/redhat-developer/vscode-yaml/issues/803 the validation should throw the error based on the enum string.
   *
   * @param schema schema
   * @param focusOffset  offsetValue
   * @param exclude excluded Node
   * @param didCallFromAutoComplete true if method called from AutoComplete
   * @returns array of applicable schemas
   */ getMatchingSchemas(schema4, focusOffset = -1, exclude = null, didCallFromAutoComplete) {
        const matchingSchemas = new SchemaCollector2(focusOffset, exclude);
        if (this.root && schema4) {
            validate2(this.root, schema4, schema4, new ValidationResult2(this.isKubernetes), matchingSchemas, {
                isKubernetes: this.isKubernetes,
                disableAdditionalProperties: this.disableAdditionalProperties,
                uri: this.uri,
                callFromAutoComplete: didCallFromAutoComplete
            });
        }
        return matchingSchemas.schemas;
    }
    constructor(root, syntaxErrors = [], comments = []){
        this.root = root;
        this.syntaxErrors = syntaxErrors;
        this.comments = comments;
    }
};
function validate2(node, schema4, originalSchema, validationResult, matchingSchemas, options) {
    const { isKubernetes , callFromAutoComplete  } = options;
    if (!node) {
        return;
    }
    if (typeof schema4 !== "object") {
        return;
    }
    if (!schema4.url) {
        schema4.url = originalSchema.url;
    }
    schema4.closestTitle = schema4.title || originalSchema.closestTitle;
    switch(node.type){
        case "object":
            _validateObjectNode(node, schema4, validationResult, matchingSchemas);
            break;
        case "array":
            _validateArrayNode(node, schema4, validationResult, matchingSchemas);
            break;
        case "string":
            _validateStringNode(node, schema4, validationResult);
            break;
        case "number":
            _validateNumberNode(node, schema4, validationResult);
            break;
        case "property":
            return validate2(node.valueNode, schema4, schema4, validationResult, matchingSchemas, options);
    }
    _validateNode();
    matchingSchemas.add({
        node,
        schema: schema4
    });
    function _validateNode() {
        function matchesType(type) {
            return node.type === type || type === "integer" && node.type === "number" && node.isInteger;
        }
        if (Array.isArray(schema4.type)) {
            if (!schema4.type.some(matchesType)) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: schema4.errorMessage || localize7("typeArrayMismatchWarning", "Incorrect type. Expected one of {0}.", schema4.type.join(", ")),
                    source: getSchemaSource(schema4, originalSchema),
                    schemaUri: getSchemaUri(schema4, originalSchema)
                });
            }
        } else if (schema4.type) {
            if (!matchesType(schema4.type)) {
                const schemaType = schema4.type === "object" ? getSchemaTypeName(schema4) : schema4.type;
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: schema4.errorMessage || getWarningMessage(ProblemType.typeMismatchWarning, [
                        schemaType
                    ]),
                    source: getSchemaSource(schema4, originalSchema),
                    schemaUri: getSchemaUri(schema4, originalSchema),
                    problemType: ProblemType.typeMismatchWarning,
                    problemArgs: [
                        schemaType
                    ]
                });
            }
        }
        if (Array.isArray(schema4.allOf)) {
            for (const subSchemaRef of schema4.allOf){
                validate2(node, asSchema2(subSchemaRef), schema4, validationResult, matchingSchemas, options);
            }
        }
        const notSchema = asSchema2(schema4.not);
        if (notSchema) {
            const subValidationResult = new ValidationResult2(isKubernetes);
            const subMatchingSchemas = matchingSchemas.newSub();
            validate2(node, notSchema, schema4, subValidationResult, subMatchingSchemas, options);
            if (!subValidationResult.hasProblems()) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: localize7("notSchemaWarning", "Matches a schema that is not allowed."),
                    source: getSchemaSource(schema4, originalSchema),
                    schemaUri: getSchemaUri(schema4, originalSchema)
                });
            }
            for (const ms of subMatchingSchemas.schemas){
                ms.inverted = !ms.inverted;
                matchingSchemas.add(ms);
            }
        }
        const testAlternatives = (alternatives, maxOneMatch)=>{
            const matches = [];
            const subMatches = [];
            const noPropertyMatches = [];
            let bestMatch = null;
            for (const subSchemaRef of alternatives){
                const subSchema = {
                    ...asSchema2(subSchemaRef)
                };
                const subValidationResult = new ValidationResult2(isKubernetes);
                const subMatchingSchemas = matchingSchemas.newSub();
                validate2(node, subSchema, schema4, subValidationResult, subMatchingSchemas, options);
                if (!subValidationResult.hasProblems() || callFromAutoComplete) {
                    matches.push(subSchema);
                    subMatches.push(subSchema);
                    if (subValidationResult.propertiesMatches === 0) {
                        noPropertyMatches.push(subSchema);
                    }
                    if (subSchema.format) {
                        subMatches.pop();
                    }
                }
                if (!bestMatch) {
                    bestMatch = {
                        schema: subSchema,
                        validationResult: subValidationResult,
                        matchingSchemas: subMatchingSchemas
                    };
                } else if (isKubernetes) {
                    bestMatch = alternativeComparison(subValidationResult, bestMatch, subSchema, subMatchingSchemas);
                } else {
                    bestMatch = genericComparison(node, maxOneMatch, subValidationResult, bestMatch, subSchema, subMatchingSchemas);
                }
            }
            if (subMatches.length > 1 && (subMatches.length > 1 || noPropertyMatches.length === 0) && maxOneMatch) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: 1
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: localize7("oneOfWarning", "Matches multiple schemas when only one must validate."),
                    source: getSchemaSource(schema4, originalSchema),
                    schemaUri: getSchemaUri(schema4, originalSchema)
                });
            }
            if (bestMatch !== null) {
                validationResult.merge(bestMatch.validationResult);
                validationResult.propertiesMatches += bestMatch.validationResult.propertiesMatches;
                validationResult.propertiesValueMatches += bestMatch.validationResult.propertiesValueMatches;
                matchingSchemas.merge(bestMatch.matchingSchemas);
            }
            return matches.length;
        };
        if (Array.isArray(schema4.anyOf)) {
            testAlternatives(schema4.anyOf, false);
        }
        if (Array.isArray(schema4.oneOf)) {
            testAlternatives(schema4.oneOf, true);
        }
        const testBranch = (schema5, originalSchema2)=>{
            const subValidationResult = new ValidationResult2(isKubernetes);
            const subMatchingSchemas = matchingSchemas.newSub();
            validate2(node, asSchema2(schema5), originalSchema2, subValidationResult, subMatchingSchemas, options);
            validationResult.merge(subValidationResult);
            validationResult.propertiesMatches += subValidationResult.propertiesMatches;
            validationResult.propertiesValueMatches += subValidationResult.propertiesValueMatches;
            matchingSchemas.merge(subMatchingSchemas);
        };
        const testCondition = (ifSchema2, originalSchema2, thenSchema, elseSchema)=>{
            const subSchema = asSchema2(ifSchema2);
            const subValidationResult = new ValidationResult2(isKubernetes);
            const subMatchingSchemas = matchingSchemas.newSub();
            validate2(node, subSchema, originalSchema2, subValidationResult, subMatchingSchemas, options);
            matchingSchemas.merge(subMatchingSchemas);
            const { filePatternAssociation  } = subSchema;
            if (filePatternAssociation) {
                const association = new FilePatternAssociation2(filePatternAssociation);
                if (!association.matchesPattern(options.uri)) {
                    subValidationResult.problems.push({
                        location: {
                            offset: node.offset,
                            length: node.length
                        },
                        severity: DiagnosticSeverity.Warning,
                        message: localize7("ifFilePatternAssociation", `filePatternAssociation '${filePatternAssociation}' does not match with doc uri '${options.uri}'.`),
                        source: getSchemaSource(schema4, originalSchema2),
                        schemaUri: getSchemaUri(schema4, originalSchema2)
                    });
                }
            }
            if (!subValidationResult.hasProblems()) {
                if (thenSchema) {
                    testBranch(thenSchema, originalSchema2);
                }
            } else if (elseSchema) {
                testBranch(elseSchema, originalSchema2);
            }
        };
        const ifSchema = asSchema2(schema4.if);
        if (ifSchema) {
            testCondition(ifSchema, schema4, asSchema2(schema4.then), asSchema2(schema4.else));
        }
        if (Array.isArray(schema4.enum)) {
            const val = getNodeValue4(node);
            let enumValueMatch = false;
            for (const e of schema4.enum){
                if (equals2(val, e) || callFromAutoComplete && isString2(val) && isString2(e) && val && e.startsWith(val)) {
                    enumValueMatch = true;
                    break;
                }
            }
            validationResult.enumValues = schema4.enum;
            validationResult.enumValueMatch = enumValueMatch;
            if (!enumValueMatch) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    code: ErrorCode.EnumValueMismatch,
                    message: schema4.errorMessage || localize7("enumWarning", "Value is not accepted. Valid values: {0}.", schema4.enum.map((v)=>{
                        return JSON.stringify(v);
                    }).join(", ")),
                    source: getSchemaSource(schema4, originalSchema),
                    schemaUri: getSchemaUri(schema4, originalSchema)
                });
            }
        }
        if (isDefined2(schema4.const)) {
            const val = getNodeValue4(node);
            if (!equals2(val, schema4.const)) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    code: ErrorCode.EnumValueMismatch,
                    problemType: ProblemType.constWarning,
                    message: schema4.errorMessage || getWarningMessage(ProblemType.constWarning, [
                        JSON.stringify(schema4.const)
                    ]),
                    source: getSchemaSource(schema4, originalSchema),
                    schemaUri: getSchemaUri(schema4, originalSchema),
                    problemArgs: [
                        JSON.stringify(schema4.const)
                    ]
                });
                validationResult.enumValueMatch = false;
            } else {
                validationResult.enumValueMatch = true;
            }
            validationResult.enumValues = [
                schema4.const
            ];
        }
        if (schema4.deprecationMessage && node.parent) {
            validationResult.problems.push({
                location: {
                    offset: node.parent.offset,
                    length: node.parent.length
                },
                severity: DiagnosticSeverity.Warning,
                message: schema4.deprecationMessage,
                source: getSchemaSource(schema4, originalSchema),
                schemaUri: getSchemaUri(schema4, originalSchema)
            });
        }
    }
    function _validateNumberNode(node2, schema5, validationResult2) {
        const val = node2.value;
        if (isNumber2(schema5.multipleOf)) {
            if (val % schema5.multipleOf !== 0) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: localize7("multipleOfWarning", "Value is not divisible by {0}.", schema5.multipleOf),
                    source: getSchemaSource(schema5, originalSchema),
                    schemaUri: getSchemaUri(schema5, originalSchema)
                });
            }
        }
        function getExclusiveLimit(limit, exclusive) {
            if (isNumber2(exclusive)) {
                return exclusive;
            }
            if (isBoolean2(exclusive) && exclusive) {
                return limit;
            }
            return void 0;
        }
        function getLimit(limit, exclusive) {
            if (!isBoolean2(exclusive) || !exclusive) {
                return limit;
            }
            return void 0;
        }
        const exclusiveMinimum = getExclusiveLimit(schema5.minimum, schema5.exclusiveMinimum);
        if (isNumber2(exclusiveMinimum) && val <= exclusiveMinimum) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                severity: DiagnosticSeverity.Warning,
                message: localize7("exclusiveMinimumWarning", "Value is below the exclusive minimum of {0}.", exclusiveMinimum),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        const exclusiveMaximum = getExclusiveLimit(schema5.maximum, schema5.exclusiveMaximum);
        if (isNumber2(exclusiveMaximum) && val >= exclusiveMaximum) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                severity: DiagnosticSeverity.Warning,
                message: localize7("exclusiveMaximumWarning", "Value is above the exclusive maximum of {0}.", exclusiveMaximum),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        const minimum = getLimit(schema5.minimum, schema5.exclusiveMinimum);
        if (isNumber2(minimum) && val < minimum) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                severity: DiagnosticSeverity.Warning,
                message: localize7("minimumWarning", "Value is below the minimum of {0}.", minimum),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        const maximum = getLimit(schema5.maximum, schema5.exclusiveMaximum);
        if (isNumber2(maximum) && val > maximum) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                severity: DiagnosticSeverity.Warning,
                message: localize7("maximumWarning", "Value is above the maximum of {0}.", maximum),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
    }
    function _validateStringNode(node2, schema5, validationResult2) {
        if (isNumber2(schema5.minLength) && node2.value.length < schema5.minLength) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                severity: DiagnosticSeverity.Warning,
                message: localize7("minLengthWarning", "String is shorter than the minimum length of {0}.", schema5.minLength),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        if (isNumber2(schema5.maxLength) && node2.value.length > schema5.maxLength) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                severity: DiagnosticSeverity.Warning,
                message: localize7("maxLengthWarning", "String is longer than the maximum length of {0}.", schema5.maxLength),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        if (isString2(schema5.pattern)) {
            const regex = safeCreateUnicodeRegExp(schema5.pattern);
            if (!regex.test(node2.value)) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: schema5.patternErrorMessage || schema5.errorMessage || localize7("patternWarning", 'String does not match the pattern of "{0}".', schema5.pattern),
                    source: getSchemaSource(schema5, originalSchema),
                    schemaUri: getSchemaUri(schema5, originalSchema)
                });
            }
        }
        if (schema5.format) {
            switch(schema5.format){
                case "uri":
                case "uri-reference":
                    {
                        let errorMessage;
                        if (!node2.value) {
                            errorMessage = localize7("uriEmpty", "URI expected.");
                        } else {
                            try {
                                const uri = URI.parse(node2.value);
                                if (!uri.scheme && schema5.format === "uri") {
                                    errorMessage = localize7("uriSchemeMissing", "URI with a scheme is expected.");
                                }
                            } catch (e) {
                                errorMessage = e.message;
                            }
                        }
                        if (errorMessage) {
                            validationResult2.problems.push({
                                location: {
                                    offset: node2.offset,
                                    length: node2.length
                                },
                                severity: DiagnosticSeverity.Warning,
                                message: schema5.patternErrorMessage || schema5.errorMessage || localize7("uriFormatWarning", "String is not a URI: {0}", errorMessage),
                                source: getSchemaSource(schema5, originalSchema),
                                schemaUri: getSchemaUri(schema5, originalSchema)
                            });
                        }
                    }
                    break;
                case "color-hex":
                case "date-time":
                case "date":
                case "time":
                case "email":
                    {
                        const format5 = formats2[schema5.format];
                        if (!node2.value || !format5.pattern.exec(node2.value)) {
                            validationResult2.problems.push({
                                location: {
                                    offset: node2.offset,
                                    length: node2.length
                                },
                                severity: DiagnosticSeverity.Warning,
                                message: schema5.patternErrorMessage || schema5.errorMessage || format5.errorMessage,
                                source: getSchemaSource(schema5, originalSchema),
                                schemaUri: getSchemaUri(schema5, originalSchema)
                            });
                        }
                    }
                    break;
                default:
            }
        }
    }
    function _validateArrayNode(node2, schema5, validationResult2, matchingSchemas2) {
        if (Array.isArray(schema5.items)) {
            const subSchemas = schema5.items;
            for(let index = 0; index < subSchemas.length; index++){
                const subSchemaRef = subSchemas[index];
                const subSchema = asSchema2(subSchemaRef);
                const itemValidationResult = new ValidationResult2(isKubernetes);
                const item = node2.items[index];
                if (item) {
                    validate2(item, subSchema, schema5, itemValidationResult, matchingSchemas2, options);
                    validationResult2.mergePropertyMatch(itemValidationResult);
                    validationResult2.mergeEnumValues(itemValidationResult);
                } else if (node2.items.length >= subSchemas.length) {
                    validationResult2.propertiesValueMatches++;
                }
            }
            if (node2.items.length > subSchemas.length) {
                if (typeof schema5.additionalItems === "object") {
                    for(let i = subSchemas.length; i < node2.items.length; i++){
                        const itemValidationResult = new ValidationResult2(isKubernetes);
                        validate2(node2.items[i], schema5.additionalItems, schema5, itemValidationResult, matchingSchemas2, options);
                        validationResult2.mergePropertyMatch(itemValidationResult);
                        validationResult2.mergeEnumValues(itemValidationResult);
                    }
                } else if (schema5.additionalItems === false) {
                    validationResult2.problems.push({
                        location: {
                            offset: node2.offset,
                            length: node2.length
                        },
                        severity: DiagnosticSeverity.Warning,
                        message: localize7("additionalItemsWarning", "Array has too many items according to schema. Expected {0} or fewer.", subSchemas.length),
                        source: getSchemaSource(schema5, originalSchema),
                        schemaUri: getSchemaUri(schema5, originalSchema)
                    });
                }
            }
        } else {
            const itemSchema = asSchema2(schema5.items);
            if (itemSchema) {
                const itemValidationResult = new ValidationResult2(isKubernetes);
                node2.items.forEach((item)=>{
                    if (itemSchema.oneOf && itemSchema.oneOf.length === 1) {
                        const subSchemaRef = itemSchema.oneOf[0];
                        const subSchema = {
                            ...asSchema2(subSchemaRef)
                        };
                        subSchema.title = schema5.title;
                        subSchema.closestTitle = schema5.closestTitle;
                        validate2(item, subSchema, schema5, itemValidationResult, matchingSchemas2, options);
                        validationResult2.mergePropertyMatch(itemValidationResult);
                        validationResult2.mergeEnumValues(itemValidationResult);
                    } else {
                        validate2(item, itemSchema, schema5, itemValidationResult, matchingSchemas2, options);
                        validationResult2.mergePropertyMatch(itemValidationResult);
                        validationResult2.mergeEnumValues(itemValidationResult);
                    }
                });
            }
        }
        const containsSchema = asSchema2(schema5.contains);
        if (containsSchema) {
            const doesContain = node2.items.some((item)=>{
                const itemValidationResult = new ValidationResult2(isKubernetes);
                validate2(item, containsSchema, schema5, itemValidationResult, NoOpSchemaCollector2.instance, options);
                return !itemValidationResult.hasProblems();
            });
            if (!doesContain) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: schema5.errorMessage || localize7("requiredItemMissingWarning", "Array does not contain required item."),
                    source: getSchemaSource(schema5, originalSchema),
                    schemaUri: getSchemaUri(schema5, originalSchema)
                });
            }
        }
        if (isNumber2(schema5.minItems) && node2.items.length < schema5.minItems) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                severity: DiagnosticSeverity.Warning,
                message: localize7("minItemsWarning", "Array has too few items. Expected {0} or more.", schema5.minItems),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        if (isNumber2(schema5.maxItems) && node2.items.length > schema5.maxItems) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                severity: DiagnosticSeverity.Warning,
                message: localize7("maxItemsWarning", "Array has too many items. Expected {0} or fewer.", schema5.maxItems),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        if (schema5.uniqueItems === true) {
            const values = getNodeValue4(node2);
            const duplicates = values.some((value1, index)=>{
                return index !== values.lastIndexOf(value1);
            });
            if (duplicates) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: localize7("uniqueItemsWarning", "Array has duplicate items."),
                    source: getSchemaSource(schema5, originalSchema),
                    schemaUri: getSchemaUri(schema5, originalSchema)
                });
            }
        }
    }
    function _validateObjectNode(node2, schema5, validationResult2, matchingSchemas2) {
        var _a;
        const seenKeys = /* @__PURE__ */ Object.create(null);
        const unprocessedProperties = [];
        const unprocessedNodes = [
            ...node2.properties
        ];
        while(unprocessedNodes.length > 0){
            const propertyNode = unprocessedNodes.pop();
            const key = propertyNode.keyNode.value;
            if (key === "<<" && propertyNode.valueNode) {
                switch(propertyNode.valueNode.type){
                    case "object":
                        {
                            unprocessedNodes.push(...propertyNode.valueNode["properties"]);
                            break;
                        }
                    case "array":
                        {
                            propertyNode.valueNode["items"].forEach((sequenceNode)=>{
                                if (sequenceNode && isIterable(sequenceNode["properties"])) {
                                    unprocessedNodes.push(...sequenceNode["properties"]);
                                }
                            });
                            break;
                        }
                    default:
                        {
                            break;
                        }
                }
            } else {
                seenKeys[key] = propertyNode.valueNode;
                unprocessedProperties.push(key);
            }
        }
        if (Array.isArray(schema5.required)) {
            for (const propertyName of schema5.required){
                if (seenKeys[propertyName] === void 0) {
                    const keyNode = node2.parent && node2.parent.type === "property" && node2.parent.keyNode;
                    const location = keyNode ? {
                        offset: keyNode.offset,
                        length: keyNode.length
                    } : {
                        offset: node2.offset,
                        length: 1
                    };
                    validationResult2.problems.push({
                        location,
                        severity: DiagnosticSeverity.Warning,
                        message: getWarningMessage(ProblemType.missingRequiredPropWarning, [
                            propertyName
                        ]),
                        source: getSchemaSource(schema5, originalSchema),
                        schemaUri: getSchemaUri(schema5, originalSchema),
                        problemArgs: [
                            propertyName
                        ],
                        problemType: ProblemType.missingRequiredPropWarning
                    });
                }
            }
        }
        const propertyProcessed = (prop)=>{
            let index = unprocessedProperties.indexOf(prop);
            while(index >= 0){
                unprocessedProperties.splice(index, 1);
                index = unprocessedProperties.indexOf(prop);
            }
        };
        if (schema5.properties) {
            for (const propertyName of Object.keys(schema5.properties)){
                propertyProcessed(propertyName);
                const propertySchema = schema5.properties[propertyName];
                const child = seenKeys[propertyName];
                if (child) {
                    if (isBoolean2(propertySchema)) {
                        if (!propertySchema) {
                            const propertyNode = child.parent;
                            validationResult2.problems.push({
                                location: {
                                    offset: propertyNode.keyNode.offset,
                                    length: propertyNode.keyNode.length
                                },
                                severity: DiagnosticSeverity.Warning,
                                message: schema5.errorMessage || localize7("DisallowedExtraPropWarning", MSG_PROPERTY_NOT_ALLOWED, propertyName),
                                source: getSchemaSource(schema5, originalSchema),
                                schemaUri: getSchemaUri(schema5, originalSchema)
                            });
                        } else {
                            validationResult2.propertiesMatches++;
                            validationResult2.propertiesValueMatches++;
                        }
                    } else {
                        propertySchema.url = (_a = schema5.url) != null ? _a : originalSchema.url;
                        const propertyValidationResult = new ValidationResult2(isKubernetes);
                        validate2(child, propertySchema, schema5, propertyValidationResult, matchingSchemas2, options);
                        validationResult2.mergePropertyMatch(propertyValidationResult);
                        validationResult2.mergeEnumValues(propertyValidationResult);
                    }
                }
            }
        }
        if (schema5.patternProperties) {
            for (const propertyPattern of Object.keys(schema5.patternProperties)){
                const regex = safeCreateUnicodeRegExp(propertyPattern);
                for (const propertyName of unprocessedProperties.slice(0)){
                    if (regex.test(propertyName)) {
                        propertyProcessed(propertyName);
                        const child = seenKeys[propertyName];
                        if (child) {
                            const propertySchema = schema5.patternProperties[propertyPattern];
                            if (isBoolean2(propertySchema)) {
                                if (!propertySchema) {
                                    const propertyNode = child.parent;
                                    validationResult2.problems.push({
                                        location: {
                                            offset: propertyNode.keyNode.offset,
                                            length: propertyNode.keyNode.length
                                        },
                                        severity: DiagnosticSeverity.Warning,
                                        message: schema5.errorMessage || localize7("DisallowedExtraPropWarning", MSG_PROPERTY_NOT_ALLOWED, propertyName),
                                        source: getSchemaSource(schema5, originalSchema),
                                        schemaUri: getSchemaUri(schema5, originalSchema)
                                    });
                                } else {
                                    validationResult2.propertiesMatches++;
                                    validationResult2.propertiesValueMatches++;
                                }
                            } else {
                                const propertyValidationResult = new ValidationResult2(isKubernetes);
                                validate2(child, propertySchema, schema5, propertyValidationResult, matchingSchemas2, options);
                                validationResult2.mergePropertyMatch(propertyValidationResult);
                                validationResult2.mergeEnumValues(propertyValidationResult);
                            }
                        }
                    }
                }
            }
        }
        if (typeof schema5.additionalProperties === "object") {
            for (const propertyName of unprocessedProperties){
                const child = seenKeys[propertyName];
                if (child) {
                    const propertyValidationResult = new ValidationResult2(isKubernetes);
                    validate2(child, schema5.additionalProperties, schema5, propertyValidationResult, matchingSchemas2, options);
                    validationResult2.mergePropertyMatch(propertyValidationResult);
                    validationResult2.mergeEnumValues(propertyValidationResult);
                }
            }
        } else if (schema5.additionalProperties === false || schema5.type === "object" && schema5.additionalProperties === void 0 && options.disableAdditionalProperties === true) {
            if (unprocessedProperties.length > 0) {
                const possibleProperties = schema5.properties && Object.keys(schema5.properties).filter((prop)=>!seenKeys[prop]);
                for (const propertyName of unprocessedProperties){
                    const child = seenKeys[propertyName];
                    if (child) {
                        let propertyNode = null;
                        if (child.type !== "property") {
                            propertyNode = child.parent;
                            if (propertyNode.type === "object") {
                                propertyNode = propertyNode.properties[0];
                            }
                        } else {
                            propertyNode = child;
                        }
                        const problem = {
                            location: {
                                offset: propertyNode.keyNode.offset,
                                length: propertyNode.keyNode.length
                            },
                            severity: DiagnosticSeverity.Warning,
                            message: schema5.errorMessage || localize7("DisallowedExtraPropWarning", MSG_PROPERTY_NOT_ALLOWED, propertyName),
                            source: getSchemaSource(schema5, originalSchema),
                            schemaUri: getSchemaUri(schema5, originalSchema)
                        };
                        if (possibleProperties == null ? void 0 : possibleProperties.length) {
                            problem.data = {
                                properties: possibleProperties
                            };
                        }
                        validationResult2.problems.push(problem);
                    }
                }
            }
        }
        if (isNumber2(schema5.maxProperties)) {
            if (node2.properties.length > schema5.maxProperties) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: localize7("MaxPropWarning", "Object has more properties than limit of {0}.", schema5.maxProperties),
                    source: getSchemaSource(schema5, originalSchema),
                    schemaUri: getSchemaUri(schema5, originalSchema)
                });
            }
        }
        if (isNumber2(schema5.minProperties)) {
            if (node2.properties.length < schema5.minProperties) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: localize7("MinPropWarning", "Object has fewer properties than the required number of {0}", schema5.minProperties),
                    source: getSchemaSource(schema5, originalSchema),
                    schemaUri: getSchemaUri(schema5, originalSchema)
                });
            }
        }
        if (schema5.dependencies) {
            for (const key of Object.keys(schema5.dependencies)){
                const prop = seenKeys[key];
                if (prop) {
                    const propertyDep = schema5.dependencies[key];
                    if (Array.isArray(propertyDep)) {
                        for (const requiredProp of propertyDep){
                            if (!seenKeys[requiredProp]) {
                                validationResult2.problems.push({
                                    location: {
                                        offset: node2.offset,
                                        length: node2.length
                                    },
                                    severity: DiagnosticSeverity.Warning,
                                    message: localize7("RequiredDependentPropWarning", "Object is missing property {0} required by property {1}.", requiredProp, key),
                                    source: getSchemaSource(schema5, originalSchema),
                                    schemaUri: getSchemaUri(schema5, originalSchema)
                                });
                            } else {
                                validationResult2.propertiesValueMatches++;
                            }
                        }
                    } else {
                        const propertySchema = asSchema2(propertyDep);
                        if (propertySchema) {
                            const propertyValidationResult = new ValidationResult2(isKubernetes);
                            validate2(node2, propertySchema, schema5, propertyValidationResult, matchingSchemas2, options);
                            validationResult2.mergePropertyMatch(propertyValidationResult);
                            validationResult2.mergeEnumValues(propertyValidationResult);
                        }
                    }
                }
            }
        }
        const propertyNames = asSchema2(schema5.propertyNames);
        if (propertyNames) {
            for (const f2 of node2.properties){
                const key = f2.keyNode;
                if (key) {
                    validate2(key, propertyNames, schema5, validationResult2, NoOpSchemaCollector2.instance, options);
                }
            }
        }
    }
    function alternativeComparison(subValidationResult, bestMatch, subSchema, subMatchingSchemas) {
        const compareResult = subValidationResult.compareKubernetes(bestMatch.validationResult);
        if (compareResult > 0) {
            bestMatch = {
                schema: subSchema,
                validationResult: subValidationResult,
                matchingSchemas: subMatchingSchemas
            };
        } else if (compareResult === 0) {
            bestMatch.matchingSchemas.merge(subMatchingSchemas);
            bestMatch.validationResult.mergeEnumValues(subValidationResult);
        }
        return bestMatch;
    }
    function genericComparison(node2, maxOneMatch, subValidationResult, bestMatch, subSchema, subMatchingSchemas) {
        if (!maxOneMatch && !subValidationResult.hasProblems() && (!bestMatch.validationResult.hasProblems() || callFromAutoComplete)) {
            bestMatch.matchingSchemas.merge(subMatchingSchemas);
            bestMatch.validationResult.propertiesMatches += subValidationResult.propertiesMatches;
            bestMatch.validationResult.propertiesValueMatches += subValidationResult.propertiesValueMatches;
        } else {
            const compareResult = subValidationResult.compareGeneric(bestMatch.validationResult);
            if (compareResult > 0 || compareResult === 0 && maxOneMatch && bestMatch.schema.type === "object" && node2.type !== "null" && node2.type !== bestMatch.schema.type) {
                bestMatch = {
                    schema: subSchema,
                    validationResult: subValidationResult,
                    matchingSchemas: subMatchingSchemas
                };
            } else if (compareResult === 0) {
                bestMatch.matchingSchemas.merge(subMatchingSchemas);
                bestMatch.validationResult.mergeEnumValues(subValidationResult);
                bestMatch.validationResult.mergeWarningGeneric(subValidationResult, [
                    ProblemType.missingRequiredPropWarning,
                    ProblemType.typeMismatchWarning,
                    ProblemType.constWarning
                ]);
            }
        }
        return bestMatch;
    }
}
function getSchemaSource(schema4, originalSchema) {
    var _a;
    if (schema4) {
        let label;
        if (schema4.title) {
            label = schema4.title;
        } else if (schema4.closestTitle) {
            label = schema4.closestTitle;
        } else if (originalSchema.closestTitle) {
            label = originalSchema.closestTitle;
        } else {
            const uriString = (_a = schema4.url) != null ? _a : originalSchema.url;
            if (uriString) {
                const url = URI.parse(uriString);
                if (url.scheme === "file") {
                    label = url.fsPath;
                }
                label = url.toString();
            }
        }
        if (label) {
            return `${YAML_SCHEMA_PREFIX}${label}`;
        }
    }
    return YAML_SOURCE;
}
function getSchemaUri(schema4, originalSchema) {
    var _a;
    const uriString = (_a = schema4.url) != null ? _a : originalSchema.url;
    return uriString ? [
        uriString
    ] : [];
}
function getWarningMessage(problemType, args) {
    return localize7(problemType, ProblemTypeMessages[problemType], args.join(" | "));
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/parser/ast-converter.js
var maxRefCount = 1e3;
var refDepth = 0;
function convertAST(parent, node, doc, lineCounter) {
    if (!parent) {
        refDepth = 0;
    }
    if (!node) {
        return null;
    }
    if (isMap(node)) {
        return convertMap(node, parent, doc, lineCounter);
    }
    if (isPair(node)) {
        return convertPair(node, parent, doc, lineCounter);
    }
    if (isSeq(node)) {
        return convertSeq(node, parent, doc, lineCounter);
    }
    if (isScalar(node)) {
        return convertScalar(node, parent);
    }
    if (isAlias(node)) {
        if (refDepth > maxRefCount) {
            return;
        }
        return convertAlias(node, parent, doc, lineCounter);
    }
}
function convertMap(node, parent, doc, lineCounter) {
    let range;
    if (node.flow && !node.range) {
        range = collectFlowMapRange(node);
    } else {
        range = node.range;
    }
    const result = new ObjectASTNodeImpl2(parent, node, ...toFixedOffsetLength(range, lineCounter));
    for (const it of node.items){
        if (isPair(it)) {
            result.properties.push(convertAST(result, it, doc, lineCounter));
        }
    }
    return result;
}
function convertPair(node, parent, doc, lineCounter) {
    const keyNode = node.key;
    const valueNode = node.value;
    const rangeStart = keyNode.range[0];
    let rangeEnd = keyNode.range[1];
    let nodeEnd = keyNode.range[2];
    if (valueNode) {
        rangeEnd = valueNode.range[1];
        nodeEnd = valueNode.range[2];
    }
    const result = new PropertyASTNodeImpl2(parent, node, ...toFixedOffsetLength([
        rangeStart,
        rangeEnd,
        nodeEnd
    ], lineCounter));
    if (isAlias(keyNode)) {
        const keyAlias = new StringASTNodeImpl2(parent, keyNode, ...toOffsetLength(keyNode.range));
        keyAlias.value = keyNode.source;
        result.keyNode = keyAlias;
    } else {
        result.keyNode = convertAST(result, keyNode, doc, lineCounter);
    }
    result.valueNode = convertAST(result, valueNode, doc, lineCounter);
    return result;
}
function convertSeq(node, parent, doc, lineCounter) {
    const result = new ArrayASTNodeImpl2(parent, node, ...toOffsetLength(node.range));
    for (const it of node.items){
        if (isNode(it)) {
            const convertedNode = convertAST(result, it, doc, lineCounter);
            if (convertedNode) {
                result.children.push(convertedNode);
            }
        }
    }
    return result;
}
function convertScalar(node, parent) {
    if (node.value === null) {
        return new NullASTNodeImpl2(parent, node, ...toOffsetLength(node.range));
    }
    switch(typeof node.value){
        case "string":
            {
                const result = new StringASTNodeImpl2(parent, node, ...toOffsetLength(node.range));
                result.value = node.value;
                return result;
            }
        case "boolean":
            return new BooleanASTNodeImpl2(parent, node, node.value, ...toOffsetLength(node.range));
        case "number":
            {
                const result = new NumberASTNodeImpl2(parent, node, ...toOffsetLength(node.range));
                result.value = node.value;
                result.isInteger = Number.isInteger(result.value);
                return result;
            }
        default:
            {
                const result = new StringASTNodeImpl2(parent, node, ...toOffsetLength(node.range));
                result.value = node.source;
                return result;
            }
    }
}
function convertAlias(node, parent, doc, lineCounter) {
    refDepth++;
    const resolvedNode = node.resolve(doc);
    if (resolvedNode) {
        return convertAST(parent, resolvedNode, doc, lineCounter);
    } else {
        const resultNode = new StringASTNodeImpl2(parent, node, ...toOffsetLength(node.range));
        resultNode.value = node.source;
        return resultNode;
    }
}
function toOffsetLength(range) {
    return [
        range[0],
        range[1] - range[0]
    ];
}
function toFixedOffsetLength(range, lineCounter) {
    const start = lineCounter.linePos(range[0]);
    const end = lineCounter.linePos(range[1]);
    const result = [
        range[0],
        range[1] - range[0]
    ];
    if (start.line !== end.line && (lineCounter.lineStarts.length !== end.line || end.col === 1)) {
        result[1]--;
    }
    return result;
}
function collectFlowMapRange(node) {
    let start = Number.MAX_SAFE_INTEGER;
    let end = 0;
    for (const it of node.items){
        if (isPair(it)) {
            if (isNode(it.key)) {
                if (it.key.range && it.key.range[0] <= start) {
                    start = it.key.range[0];
                }
            }
            if (isNode(it.value)) {
                if (it.value.range && it.value.range[2] >= end) {
                    end = it.value.range[2];
                }
            }
        }
    }
    return [
        start,
        end,
        end
    ];
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/astUtils.js
function getParent(doc, nodeToFind) {
    let parentNode;
    visit2(doc, (_, node, path5)=>{
        if (node === nodeToFind) {
            parentNode = path5[path5.length - 1];
            return visit2.BREAK;
        }
    });
    if (isDocument(parentNode)) {
        return void 0;
    }
    return parentNode;
}
function isMapContainsEmptyPair(map2) {
    if (map2.items.length > 1) {
        return false;
    }
    const pair = map2.items[0];
    return isScalar(pair.key) && isScalar(pair.value) && pair.key.value === "" && !pair.value.value;
}
function indexOf(seq2, item) {
    for (const [i, obj] of seq2.items.entries()){
        if (item === obj) {
            return i;
        }
    }
    return void 0;
}
function isInComment(tokens, offset) {
    let inComment = false;
    for (const token of tokens){
        if (token.type === "document") {
            _visit2([], token, (item)=>{
                var _a;
                if (isCollectionItem(item) && ((_a = item.value) == null ? void 0 : _a.type) === "comment") {
                    if (token.offset <= offset && item.value.source.length + item.value.offset >= offset) {
                        inComment = true;
                        return visit2.BREAK;
                    }
                } else if (item.type === "comment" && item.offset <= offset && item.offset + item.source.length >= offset) {
                    inComment = true;
                    return visit2.BREAK;
                }
            });
        } else if (token.type === "comment") {
            if (token.offset <= offset && token.source.length + token.offset >= offset) {
                return true;
            }
        }
        if (inComment) {
            break;
        }
    }
    return inComment;
}
function isCollectionItem(token) {
    return token["start"] !== void 0;
}
function _visit2(path5, item, visitor) {
    let ctrl = visitor(item, path5);
    if (typeof ctrl === "symbol") return ctrl;
    for (const field of [
        "key",
        "value"
    ]){
        const token2 = item[field];
        if (token2 && "items" in token2) {
            for(let i = 0; i < token2.items.length; ++i){
                const ci = _visit2(Object.freeze(path5.concat([
                    [
                        field,
                        i
                    ]
                ])), token2.items[i], visitor);
                if (typeof ci === "number") i = ci - 1;
                else if (ci === visit2.BREAK) return visit2.BREAK;
                else if (ci === visit2.REMOVE) {
                    token2.items.splice(i, 1);
                    i -= 1;
                }
            }
            if (typeof ctrl === "function" && field === "key") ctrl = ctrl(item, path5);
        }
    }
    const token = item["sep"];
    if (token) {
        for(let i = 0; i < token.length; ++i){
            const ci = _visit2(Object.freeze(path5), token[i], visitor);
            if (typeof ci === "number") i = ci - 1;
            else if (ci === visit2.BREAK) return visit2.BREAK;
            else if (ci === visit2.REMOVE) {
                token.items.splice(i, 1);
                i -= 1;
            }
        }
    }
    return typeof ctrl === "function" ? ctrl(item, path5) : ctrl;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/parser/yaml-documents.js
var SingleYAMLDocument = class extends JSONDocument2 {
    /**
   * Create a deep copy of this document
   */ clone() {
        const copy = new SingleYAMLDocument(this.lineCounter);
        copy.isKubernetes = this.isKubernetes;
        copy.disableAdditionalProperties = this.disableAdditionalProperties;
        copy.uri = this.uri;
        copy.currentDocIndex = this.currentDocIndex;
        copy._lineComments = this.lineComments.slice();
        copy.internalDocument = this._internalDocument.clone();
        return copy;
    }
    collectLineComments() {
        this._lineComments = [];
        if (this._internalDocument.commentBefore) {
            const comments = this._internalDocument.commentBefore.split("\n");
            comments.forEach((comment)=>this._lineComments.push(`#${comment}`));
        }
        visit2(this.internalDocument, (_key, node)=>{
            if (node == null ? void 0 : node.commentBefore) {
                const comments = node == null ? void 0 : node.commentBefore.split("\n");
                comments.forEach((comment)=>this._lineComments.push(`#${comment}`));
            }
            if (node == null ? void 0 : node.comment) {
                this._lineComments.push(`#${node.comment}`);
            }
        });
        if (this._internalDocument.comment) {
            this._lineComments.push(`#${this._internalDocument.comment}`);
        }
    }
    set internalDocument(document) {
        this._internalDocument = document;
        this.root = convertAST(null, this._internalDocument.contents, this._internalDocument, this.lineCounter);
    }
    get internalDocument() {
        return this._internalDocument;
    }
    get lineComments() {
        if (!this._lineComments) {
            this.collectLineComments();
        }
        return this._lineComments;
    }
    set lineComments(val) {
        this._lineComments = val;
    }
    get errors() {
        return this.internalDocument.errors.map(YAMLErrorToYamlDocDiagnostics);
    }
    get warnings() {
        return this.internalDocument.warnings.map(YAMLErrorToYamlDocDiagnostics);
    }
    getNodeFromPosition(positionOffset, textBuffer, configuredIndentation) {
        const position = textBuffer.getPosition(positionOffset);
        const lineContent = textBuffer.getLineContent(position.line);
        if (lineContent.trim().length === 0) {
            return [
                this.findClosestNode(positionOffset, textBuffer, configuredIndentation),
                true
            ];
        }
        const textAfterPosition = lineContent.substring(position.character);
        const spacesAfterPositionMatch = textAfterPosition.match(/^([ ]+)\n?$/);
        const areOnlySpacesAfterPosition = !!spacesAfterPositionMatch;
        const countOfSpacesAfterPosition = spacesAfterPositionMatch == null ? void 0 : spacesAfterPositionMatch[1].length;
        let closestNode;
        visit2(this.internalDocument, (key, node)=>{
            if (!node) {
                return;
            }
            const range = node.range;
            if (!range) {
                return;
            }
            const isNullNodeOnTheLine = ()=>areOnlySpacesAfterPosition && positionOffset + countOfSpacesAfterPosition === range[2] && isScalar(node) && node.value === null;
            if (range[0] <= positionOffset && range[1] >= positionOffset || isNullNodeOnTheLine()) {
                closestNode = node;
            } else {
                return visit2.SKIP;
            }
        });
        return [
            closestNode,
            false
        ];
    }
    findClosestNode(offset, textBuffer, configuredIndentation) {
        let offsetDiff = this.internalDocument.range[2];
        let maxOffset = this.internalDocument.range[0];
        let closestNode;
        visit2(this.internalDocument, (key, node)=>{
            if (!node) {
                return;
            }
            const range = node.range;
            if (!range) {
                return;
            }
            const diff = range[1] - offset;
            if (maxOffset <= range[0] && diff <= 0 && Math.abs(diff) <= offsetDiff) {
                offsetDiff = Math.abs(diff);
                maxOffset = range[0];
                closestNode = node;
            }
        });
        const position = textBuffer.getPosition(offset);
        const lineContent = textBuffer.getLineContent(position.line);
        const indentation = getIndentation(lineContent, position.character);
        if (isScalar(closestNode) && closestNode.value === null) {
            return closestNode;
        }
        if (indentation === position.character) {
            closestNode = this.getProperParentByIndentation(indentation, closestNode, textBuffer, "", configuredIndentation);
        }
        return closestNode;
    }
    getProperParentByIndentation(indentation, node, textBuffer, currentLine, configuredIndentation, rootParent) {
        if (!node) {
            return this.internalDocument.contents;
        }
        configuredIndentation = !configuredIndentation ? 2 : configuredIndentation;
        if (isNode(node) && node.range) {
            const position = textBuffer.getPosition(node.range[0]);
            const lineContent = textBuffer.getLineContent(position.line);
            currentLine = currentLine === "" ? lineContent.trim() : currentLine;
            if (currentLine.startsWith("-") && indentation === configuredIndentation && currentLine === lineContent.trim()) {
                position.character += indentation;
            }
            if (position.character > indentation && position.character > 0) {
                const parent = this.getParent(node);
                if (parent) {
                    return this.getProperParentByIndentation(indentation, parent, textBuffer, currentLine, configuredIndentation, rootParent);
                }
            } else if (position.character < indentation) {
                const parent = this.getParent(node);
                if (isPair(parent) && isNode(parent.value)) {
                    return parent.value;
                } else if (isPair(rootParent) && isNode(rootParent.value)) {
                    return rootParent.value;
                }
            } else {
                return node;
            }
        } else if (isPair(node)) {
            rootParent = node;
            const parent = this.getParent(node);
            return this.getProperParentByIndentation(indentation, parent, textBuffer, currentLine, configuredIndentation, rootParent);
        }
        return node;
    }
    getParent(node) {
        return getParent(this.internalDocument, node);
    }
    constructor(lineCounter){
        super(null, []);
        this.lineCounter = lineCounter;
    }
};
var YAMLDocument = class {
    constructor(documents, tokens){
        this.documents = documents;
        this.tokens = tokens;
        this.errors = [];
        this.warnings = [];
    }
};
var YamlDocuments = class {
    /**
   * Get cached YAMLDocument
   * @param document TextDocument to parse
   * @param parserOptions YAML parserOptions
   * @param addRootObject if true and document is empty add empty object {} to force schema usage
   * @returns the YAMLDocument
   */ getYamlDocument(document, parserOptions, addRootObject = false) {
        this.ensureCache(document, parserOptions != null ? parserOptions : defaultOptions, addRootObject);
        return this.cache.get(document.uri).document;
    }
    /**
   * For test purpose only!
   */ clear() {
        this.cache.clear();
    }
    ensureCache(document, parserOptions, addRootObject) {
        const key = document.uri;
        if (!this.cache.has(key)) {
            this.cache.set(key, {
                version: -1,
                document: new YAMLDocument([], []),
                parserOptions: defaultOptions
            });
        }
        const cacheEntry = this.cache.get(key);
        if (cacheEntry.version !== document.version || parserOptions.customTags && !isArrayEqual(cacheEntry.parserOptions.customTags, parserOptions.customTags)) {
            let text = document.getText();
            if (addRootObject && !/\S/.test(text)) {
                text = `{${text}}`;
            }
            const doc = parse5(text, parserOptions, document);
            cacheEntry.document = doc;
            cacheEntry.version = document.version;
            cacheEntry.parserOptions = parserOptions;
        }
    }
    constructor(){
        this.cache = /* @__PURE__ */ new Map();
    }
};
var yamlDocumentsCache = new YamlDocuments();
function YAMLErrorToYamlDocDiagnostics(error) {
    return {
        message: error.message,
        location: {
            start: error.pos[0],
            end: error.pos[1],
            toLineEnd: true
        },
        severity: 1,
        code: ErrorCode.Undefined
    };
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/parser/custom-tag-provider.js
var CommonTagImpl = class {
    get collection() {
        if (this.type === "mapping") {
            return "map";
        }
        if (this.type === "sequence") {
            return "seq";
        }
        return void 0;
    }
    resolve(value1) {
        if (isMap(value1) && this.type === "mapping") {
            return value1;
        }
        if (isSeq(value1) && this.type === "sequence") {
            return value1;
        }
        if (typeof value1 === "string" && this.type === "scalar") {
            return value1;
        }
    }
    constructor(tag, type){
        this.tag = tag;
        this.type = type;
    }
};
var IncludeTag = class {
    resolve(value1, onError) {
        if (value1 && value1.length > 0 && value1.trim()) {
            return value1;
        }
        onError("!include without value");
    }
    constructor(){
        this.tag = "!include";
        this.type = "scalar";
    }
};
function getCustomTags(customTags) {
    const tags = [];
    const filteredTags = filterInvalidCustomTags(customTags);
    for (const tag of filteredTags){
        const typeInfo = tag.split(" ");
        const tagName = typeInfo[0];
        const tagType = typeInfo[1] && typeInfo[1].toLowerCase() || "scalar";
        tags.push(new CommonTagImpl(tagName, tagType));
    }
    tags.push(new IncludeTag());
    return tags;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/textBuffer.js
var TextBuffer = class {
    getLineCount() {
        return this.doc.lineCount;
    }
    getLineLength(lineNumber) {
        const lineOffsets = this.doc.getLineOffsets();
        if (lineNumber >= lineOffsets.length) {
            return this.doc.getText().length;
        } else if (lineNumber < 0) {
            return 0;
        }
        const nextLineOffset = lineNumber + 1 < lineOffsets.length ? lineOffsets[lineNumber + 1] : this.doc.getText().length;
        return nextLineOffset - lineOffsets[lineNumber];
    }
    getLineContent(lineNumber) {
        const lineOffsets = this.doc.getLineOffsets();
        if (lineNumber >= lineOffsets.length) {
            return this.doc.getText();
        } else if (lineNumber < 0) {
            return "";
        }
        const nextLineOffset = lineNumber + 1 < lineOffsets.length ? lineOffsets[lineNumber + 1] : this.doc.getText().length;
        return this.doc.getText().substring(lineOffsets[lineNumber], nextLineOffset);
    }
    getLineCharCode(lineNumber, index) {
        return this.doc.getText(Range.create(lineNumber - 1, index, lineNumber - 1, index + 1)).charCodeAt(0);
    }
    getText(range) {
        return this.doc.getText(range);
    }
    getPosition(offest) {
        return this.doc.positionAt(offest);
    }
    constructor(doc){
        this.doc = doc;
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/parser/yamlParser07.js
var defaultOptions = {
    customTags: [],
    yamlVersion: "1.2"
};
function parse5(text, parserOptions = defaultOptions, document) {
    var _a;
    const options = {
        strict: false,
        customTags: getCustomTags(parserOptions.customTags),
        version: (_a = parserOptions.yamlVersion) != null ? _a : defaultOptions.yamlVersion,
        keepSourceTokens: true
    };
    const composer = new Composer(options);
    const lineCounter = new LineCounter();
    let isLastLineEmpty = false;
    if (document) {
        const textBuffer = new TextBuffer(document);
        const position = textBuffer.getPosition(text.length);
        const lineContent = textBuffer.getLineContent(position.line);
        isLastLineEmpty = lineContent.trim().length === 0;
    }
    const parser2 = isLastLineEmpty ? new Parser() : new Parser(lineCounter.addNewLine);
    const tokens = parser2.parse(text);
    const tokensArr = Array.from(tokens);
    const docs = composer.compose(tokensArr, true, text.length);
    const yamlDocs = Array.from(docs, (doc)=>parsedDocToSingleYAMLDocument(doc, lineCounter));
    return new YAMLDocument(yamlDocs, tokensArr);
}
function parsedDocToSingleYAMLDocument(parsedDoc, lineCounter) {
    const syd = new SingleYAMLDocument(lineCounter);
    syd.internalDocument = parsedDoc;
    return syd;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/modelineUtil.js
function getSchemaFromModeline(doc) {
    if (doc instanceof SingleYAMLDocument) {
        const yamlLanguageServerModeline = doc.lineComments.find((lineComment2)=>{
            return isModeline(lineComment2);
        });
        if (yamlLanguageServerModeline != void 0) {
            const schemaMatchs = yamlLanguageServerModeline.match(/\$schema=\S+/g);
            if (schemaMatchs !== null && schemaMatchs.length >= 1) {
                if (schemaMatchs.length >= 2) {
                    console.log("Several $schema attributes have been found on the yaml-language-server modeline. The first one will be picked.");
                }
                return schemaMatchs[0].substring("$schema=".length);
            }
        }
    }
    return void 0;
}
function isModeline(lineText) {
    const matchModeline = lineText.match(/^#\s+yaml-language-server\s*:/g);
    return matchModeline !== null && matchModeline.length === 1;
}
// src/fillers/ajv.js
var AJVStub = class {
    compile() {
        return ()=>true;
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlSchemaService.js
var localize8 = loadMessageBundle();
var ajv = new AJVStub();
var jsonSchema07 = require_json_schema_draft_07();
var schema07Validator = ajv.compile(jsonSchema07);
var MODIFICATION_ACTIONS;
(function(MODIFICATION_ACTIONS2) {
    MODIFICATION_ACTIONS2[MODIFICATION_ACTIONS2["delete"] = 0] = "delete";
    MODIFICATION_ACTIONS2[MODIFICATION_ACTIONS2["add"] = 1] = "add";
    MODIFICATION_ACTIONS2[MODIFICATION_ACTIONS2["deleteAll"] = 2] = "deleteAll";
})(MODIFICATION_ACTIONS || (MODIFICATION_ACTIONS = {}));
var FilePatternAssociation2 = class {
    addSchema(id) {
        this.schemas.push(id);
    }
    matchesPattern(fileName) {
        return this.patternRegExp && this.patternRegExp.test(fileName);
    }
    getSchemas() {
        return this.schemas;
    }
    constructor(pattern){
        try {
            this.patternRegExp = new RegExp(convertSimple2RegExpPattern(pattern) + "$");
        } catch (e) {
            this.patternRegExp = null;
        }
        this.schemas = [];
    }
};
var YAMLSchemaService = class extends JSONSchemaService {
    registerCustomSchemaProvider(customSchemaProvider) {
        this.customSchemaProvider = customSchemaProvider;
    }
    getAllSchemas() {
        const result = [];
        const schemaUris = /* @__PURE__ */ new Set();
        for (const filePattern of this.filePatternAssociations){
            const schemaUri = filePattern.uris[0];
            if (schemaUris.has(schemaUri)) {
                continue;
            }
            schemaUris.add(schemaUri);
            const schemaHandle = {
                uri: schemaUri,
                fromStore: false,
                usedForCurrentFile: false
            };
            if (this.schemaUriToNameAndDescription.has(schemaUri)) {
                const { name , description , versions  } = this.schemaUriToNameAndDescription.get(schemaUri);
                schemaHandle.name = name;
                schemaHandle.description = description;
                schemaHandle.fromStore = true;
                schemaHandle.versions = versions;
            }
            result.push(schemaHandle);
        }
        return result;
    }
    async resolveSchemaContent(schemaToResolve, schemaURL, dependencies) {
        const resolveErrors = schemaToResolve.errors.slice(0);
        let schema4 = schemaToResolve.schema;
        const contextService = this.contextService;
        if (!schema07Validator(schema4)) {
            const errs = [];
            for (const err of schema07Validator.errors){
                errs.push(`${err.instancePath} : ${err.message}`);
            }
            resolveErrors.push(`Schema '${getSchemaTitle(schemaToResolve.schema, schemaURL)}' is not valid:
${errs.join("\n")}`);
        }
        const findSection = (schema5, path5)=>{
            if (!path5) {
                return schema5;
            }
            let current = schema5;
            if (path5[0] === "/") {
                path5 = path5.substr(1);
            }
            path5.split("/").some((part)=>{
                current = current[part];
                return !current;
            });
            return current;
        };
        const merge = (target, sourceRoot, sourceURI, path5)=>{
            const section = findSection(sourceRoot, path5);
            if (section) {
                for(const key in section){
                    if (Object.prototype.hasOwnProperty.call(section, key) && !Object.prototype.hasOwnProperty.call(target, key)) {
                        target[key] = section[key];
                    }
                }
            } else {
                resolveErrors.push(localize8("json.schema.invalidref", "$ref '{0}' in '{1}' can not be resolved.", path5, sourceURI));
            }
        };
        const resolveExternalLink = (node, uri, linkPath, parentSchemaURL, parentSchemaDependencies)=>{
            if (contextService && !/^\w+:\/\/.*/.test(uri)) {
                uri = contextService.resolveRelativePath(uri, parentSchemaURL);
            }
            uri = this.normalizeId(uri);
            const referencedHandle = this.getOrAddSchemaHandle(uri);
            return referencedHandle.getUnresolvedSchema().then((unresolvedSchema)=>{
                parentSchemaDependencies[uri] = true;
                if (unresolvedSchema.errors.length) {
                    const loc = linkPath ? uri + "#" + linkPath : uri;
                    resolveErrors.push(localize8("json.schema.problemloadingref", "Problems loading reference '{0}': {1}", loc, unresolvedSchema.errors[0]));
                }
                merge(node, unresolvedSchema.schema, uri, linkPath);
                node.url = uri;
                return resolveRefs(node, unresolvedSchema.schema, uri, referencedHandle.dependencies);
            });
        };
        const resolveRefs = async (node, parentSchema, parentSchemaURL, parentSchemaDependencies)=>{
            if (!node || typeof node !== "object") {
                return null;
            }
            const toWalk = [
                node
            ];
            const seen = [];
            const openPromises = [];
            const collectEntries = (...entries)=>{
                for (const entry of entries){
                    if (typeof entry === "object") {
                        toWalk.push(entry);
                    }
                }
            };
            const collectMapEntries = (...maps)=>{
                for (const map2 of maps){
                    if (typeof map2 === "object") {
                        for(const key in map2){
                            const entry = map2[key];
                            if (typeof entry === "object") {
                                toWalk.push(entry);
                            }
                        }
                    }
                }
            };
            const collectArrayEntries = (...arrays)=>{
                for (const array of arrays){
                    if (Array.isArray(array)) {
                        for (const entry of array){
                            if (typeof entry === "object") {
                                toWalk.push(entry);
                            }
                        }
                    }
                }
            };
            const handleRef = (next)=>{
                const seenRefs = [];
                while(next.$ref){
                    const ref = next.$ref;
                    const segments = ref.split("#", 2);
                    next._$ref = next.$ref;
                    delete next.$ref;
                    if (segments[0].length > 0) {
                        openPromises.push(resolveExternalLink(next, segments[0], segments[1], parentSchemaURL, parentSchemaDependencies));
                        return;
                    } else {
                        if (seenRefs.indexOf(ref) === -1) {
                            merge(next, parentSchema, parentSchemaURL, segments[1]);
                            seenRefs.push(ref);
                        }
                    }
                }
                collectEntries(next.items, next.additionalItems, next.additionalProperties, next.not, next.contains, next.propertyNames, next.if, next.then, next.else);
                collectMapEntries(next.definitions, next.properties, next.patternProperties, next.dependencies);
                collectArrayEntries(next.anyOf, next.allOf, next.oneOf, next.items, next.schemaSequence);
            };
            if (parentSchemaURL.indexOf("#") > 0) {
                const segments = parentSchemaURL.split("#", 2);
                if (segments[0].length > 0 && segments[1].length > 0) {
                    const newSchema = {};
                    await resolveExternalLink(newSchema, segments[0], segments[1], parentSchemaURL, parentSchemaDependencies);
                    for(const key in schema4){
                        if (key === "required") {
                            continue;
                        }
                        if (Object.prototype.hasOwnProperty.call(schema4, key) && !Object.prototype.hasOwnProperty.call(newSchema, key)) {
                            newSchema[key] = schema4[key];
                        }
                    }
                    schema4 = newSchema;
                }
            }
            while(toWalk.length){
                const next = toWalk.pop();
                if (seen.indexOf(next) >= 0) {
                    continue;
                }
                seen.push(next);
                handleRef(next);
            }
            return Promise.all(openPromises);
        };
        await resolveRefs(schema4, schema4, schemaURL, dependencies);
        return new ResolvedSchema(schema4, resolveErrors);
    }
    getSchemaForResource(resource, doc) {
        const resolveModelineSchema = ()=>{
            let schemaFromModeline = getSchemaFromModeline(doc);
            if (schemaFromModeline !== void 0) {
                if (!schemaFromModeline.startsWith("file:") && !schemaFromModeline.startsWith("http")) {
                    let appendix = "";
                    if (schemaFromModeline.indexOf("#") > 0) {
                        const segments = schemaFromModeline.split("#", 2);
                        schemaFromModeline = segments[0];
                        appendix = segments[1];
                    }
                    if (!path2.isAbsolute(schemaFromModeline)) {
                        const resUri = URI.parse(resource);
                        schemaFromModeline = URI.file(path2.resolve(path2.parse(resUri.fsPath).dir, schemaFromModeline)).toString();
                    } else {
                        schemaFromModeline = URI.file(schemaFromModeline).toString();
                    }
                    if (appendix.length > 0) {
                        schemaFromModeline += "#" + appendix;
                    }
                }
                return schemaFromModeline;
            }
        };
        const resolveSchemaForResource = (schemas2)=>{
            const schemaHandle = super.createCombinedSchema(resource, schemas2);
            return schemaHandle.getResolvedSchema().then((schema4)=>{
                if (schema4.schema && typeof schema4.schema === "object") {
                    schema4.schema.url = schemaHandle.url;
                }
                if (schema4.schema && schema4.schema.schemaSequence && schema4.schema.schemaSequence[doc.currentDocIndex]) {
                    return new ResolvedSchema(schema4.schema.schemaSequence[doc.currentDocIndex]);
                }
                return schema4;
            });
        };
        const resolveSchema = ()=>{
            const seen = /* @__PURE__ */ Object.create(null);
            const schemas2 = [];
            for (const entry of this.filePatternAssociations){
                if (entry.matchesPattern(resource)) {
                    for (const schemaId of entry.getURIs()){
                        if (!seen[schemaId]) {
                            schemas2.push(schemaId);
                            seen[schemaId] = true;
                        }
                    }
                }
            }
            const normalizedResourceID = this.normalizeId(resource);
            if (this.schemasById[normalizedResourceID]) {
                schemas2.push(normalizedResourceID);
            }
            if (schemas2.length > 0) {
                const highestPrioSchemas = this.highestPrioritySchemas(schemas2);
                return resolveSchemaForResource(highestPrioSchemas);
            }
            return Promise.resolve(null);
        };
        const modelineSchema = resolveModelineSchema();
        if (modelineSchema) {
            return resolveSchemaForResource([
                modelineSchema
            ]);
        }
        if (this.customSchemaProvider) {
            return this.customSchemaProvider(resource).then((schemaUri)=>{
                if (Array.isArray(schemaUri)) {
                    if (schemaUri.length === 0) {
                        return resolveSchema();
                    }
                    return Promise.all(schemaUri.map((schemaUri2)=>{
                        return this.resolveCustomSchema(schemaUri2, doc);
                    })).then((schemas2)=>{
                        return {
                            errors: [],
                            schema: {
                                anyOf: schemas2.map((schemaObj)=>{
                                    return schemaObj.schema;
                                })
                            }
                        };
                    }, ()=>{
                        return resolveSchema();
                    });
                }
                if (!schemaUri) {
                    return resolveSchema();
                }
                return this.resolveCustomSchema(schemaUri, doc);
            }).then((schema4)=>{
                return schema4;
            }, ()=>{
                return resolveSchema();
            });
        } else {
            return resolveSchema();
        }
    }
    // Set the priority of a schema in the schema service
    addSchemaPriority(uri, priority) {
        let currSchemaArray = this.schemaPriorityMapping.get(uri);
        if (currSchemaArray) {
            currSchemaArray = currSchemaArray.add(priority);
            this.schemaPriorityMapping.set(uri, currSchemaArray);
        } else {
            this.schemaPriorityMapping.set(uri, /* @__PURE__ */ new Set().add(priority));
        }
    }
    /**
   * Search through all the schemas and find the ones with the highest priority
   */ highestPrioritySchemas(schemas2) {
        let highestPrio = 0;
        const priorityMapping = /* @__PURE__ */ new Map();
        schemas2.forEach((schema4)=>{
            const priority = this.schemaPriorityMapping.get(schema4) || [
                0
            ];
            priority.forEach((prio)=>{
                if (prio > highestPrio) {
                    highestPrio = prio;
                }
                let currPriorityArray = priorityMapping.get(prio);
                if (currPriorityArray) {
                    currPriorityArray = currPriorityArray.concat(schema4);
                    priorityMapping.set(prio, currPriorityArray);
                } else {
                    priorityMapping.set(prio, [
                        schema4
                    ]);
                }
            });
        });
        return priorityMapping.get(highestPrio) || [];
    }
    async resolveCustomSchema(schemaUri, doc) {
        const unresolvedSchema = await this.loadSchema(schemaUri);
        const schema4 = await this.resolveSchemaContent(unresolvedSchema, schemaUri, []);
        if (schema4.schema) {
            schema4.schema.url = schemaUri;
        }
        if (schema4.schema && schema4.schema.schemaSequence && schema4.schema.schemaSequence[doc.currentDocIndex]) {
            return new ResolvedSchema(schema4.schema.schemaSequence[doc.currentDocIndex]);
        }
        return schema4;
    }
    /**
   * Save a schema with schema ID and schema content.
   * Overrides previous schemas set for that schema ID.
   */ async saveSchema(schemaId, schemaContent) {
        const id = this.normalizeId(schemaId);
        this.getOrAddSchemaHandle(id, schemaContent);
        this.schemaPriorityMapping.set(id, /* @__PURE__ */ new Set().add(SchemaPriority.Settings));
        return Promise.resolve(void 0);
    }
    /**
   * Delete schemas on specific path
   */ async deleteSchemas(deletions) {
        deletions.schemas.forEach((s)=>{
            this.deleteSchema(s);
        });
        return Promise.resolve(void 0);
    }
    /**
   * Delete a schema with schema ID.
   */ async deleteSchema(schemaId) {
        const id = this.normalizeId(schemaId);
        if (this.schemasById[id]) {
            delete this.schemasById[id];
        }
        this.schemaPriorityMapping.delete(id);
        return Promise.resolve(void 0);
    }
    /**
   * Add content to a specified schema at a specified path
   */ async addContent(additions) {
        const schema4 = await this.getResolvedSchema(additions.schema);
        if (schema4) {
            const resolvedSchemaLocation = this.resolveJSONSchemaToSection(schema4.schema, additions.path);
            if (typeof resolvedSchemaLocation === "object") {
                resolvedSchemaLocation[additions.key] = additions.content;
            }
            await this.saveSchema(additions.schema, schema4.schema);
        }
    }
    /**
   * Delete content in a specified schema at a specified path
   */ async deleteContent(deletions) {
        const schema4 = await this.getResolvedSchema(deletions.schema);
        if (schema4) {
            const resolvedSchemaLocation = this.resolveJSONSchemaToSection(schema4.schema, deletions.path);
            if (typeof resolvedSchemaLocation === "object") {
                delete resolvedSchemaLocation[deletions.key];
            }
            await this.saveSchema(deletions.schema, schema4.schema);
        }
    }
    /**
   * Take a JSON Schema and the path that you would like to get to
   * @returns the JSON Schema resolved at that specific path
   */ resolveJSONSchemaToSection(schema4, paths) {
        const splitPathway = paths.split("/");
        let resolvedSchemaLocation = schema4;
        for (const path5 of splitPathway){
            if (path5 === "") {
                continue;
            }
            this.resolveNext(resolvedSchemaLocation, path5);
            resolvedSchemaLocation = resolvedSchemaLocation[path5];
        }
        return resolvedSchemaLocation;
    }
    /**
   * Resolve the next Object if they have compatible types
   * @param object a location in the JSON Schema
   * @param token the next token that you want to search for
   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    resolveNext(object, token) {
        if (Array.isArray(object) && isNaN(token)) {
            throw new Error("Expected a number after the array object");
        } else if (typeof object === "object" && typeof token !== "string") {
            throw new Error("Expected a string after the object");
        }
    }
    /**
   * Everything below here is needed because we're importing from vscode-json-languageservice umd and we need
   * to provide a wrapper around the javascript methods we are calling since they have no type
   */ normalizeId(id) {
        try {
            return URI.parse(id).toString();
        } catch (e) {
            return id;
        }
    }
    /*
   * Everything below here is needed because we're importing from vscode-json-languageservice umd and we need
   * to provide a wrapper around the javascript methods we are calling since they have no type
   */ getOrAddSchemaHandle(id, unresolvedSchemaContent) {
        return super.getOrAddSchemaHandle(id, unresolvedSchemaContent);
    }
    loadSchema(schemaUri) {
        const requestService = this.requestService;
        return super.loadSchema(schemaUri).then((unresolvedJsonSchema)=>{
            if (unresolvedJsonSchema.errors && unresolvedJsonSchema.schema === void 0) {
                return requestService(schemaUri).then((content)=>{
                    if (!content) {
                        const errorMessage = localize8("json.schema.nocontent", "Unable to load schema from '{0}': No content. {1}", toDisplayString2(schemaUri), unresolvedJsonSchema.errors);
                        return new UnresolvedSchema({}, [
                            errorMessage
                        ]);
                    }
                    try {
                        const schemaContent = parse3(content);
                        return new UnresolvedSchema(schemaContent, []);
                    } catch (yamlError) {
                        const errorMessage = localize8("json.schema.invalidFormat", "Unable to parse content from '{0}': {1}.", toDisplayString2(schemaUri), yamlError);
                        return new UnresolvedSchema({}, [
                            errorMessage
                        ]);
                    }
                }, // eslint-disable-next-line @typescript-eslint/no-explicit-any
                (error)=>{
                    let errorMessage = error.toString();
                    const errorSplit = error.toString().split("Error: ");
                    if (errorSplit.length > 1) {
                        errorMessage = errorSplit[1];
                    }
                    return new UnresolvedSchema({}, [
                        errorMessage
                    ]);
                });
            }
            unresolvedJsonSchema.uri = schemaUri;
            if (this.schemaUriToNameAndDescription.has(schemaUri)) {
                const { name , description , versions  } = this.schemaUriToNameAndDescription.get(schemaUri);
                unresolvedJsonSchema.schema.title = name != null ? name : unresolvedJsonSchema.schema.title;
                unresolvedJsonSchema.schema.description = description != null ? description : unresolvedJsonSchema.schema.description;
                unresolvedJsonSchema.schema.versions = versions != null ? versions : unresolvedJsonSchema.schema.versions;
            }
            return unresolvedJsonSchema;
        });
    }
    registerExternalSchema(uri, filePatterns, unresolvedSchema, name, description, versions) {
        if (name || description) {
            this.schemaUriToNameAndDescription.set(uri, {
                name,
                description,
                versions
            });
        }
        return super.registerExternalSchema(uri, filePatterns, unresolvedSchema);
    }
    clearExternalSchemas() {
        super.clearExternalSchemas();
    }
    setSchemaContributions(schemaContributions2) {
        super.setSchemaContributions(schemaContributions2);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getRegisteredSchemaIds(filter) {
        return super.getRegisteredSchemaIds(filter);
    }
    getResolvedSchema(schemaId) {
        return super.getResolvedSchema(schemaId);
    }
    onResourceChange(uri) {
        return super.onResourceChange(uri);
    }
    constructor(requestService, contextService, promiseConstructor){
        super(requestService, contextService, promiseConstructor);
        this.schemaUriToNameAndDescription = /* @__PURE__ */ new Map();
        this.customSchemaProvider = void 0;
        this.requestService = requestService;
        this.schemaPriorityMapping = /* @__PURE__ */ new Map();
    }
};
function toDisplayString2(url) {
    try {
        const uri = URI.parse(url);
        if (uri.scheme === "file") {
            return uri.fsPath;
        }
    } catch (e) {}
    return url;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/documentSymbols.js
var YAMLDocumentSymbols = class {
    findDocumentSymbols(document, context = {
        resultLimit: Number.MAX_VALUE
    }) {
        let results = [];
        try {
            const doc = yamlDocumentsCache.getYamlDocument(document);
            if (!doc || doc["documents"].length === 0) {
                return null;
            }
            for (const yamlDoc of doc["documents"]){
                if (yamlDoc.root) {
                    results = results.concat(this.jsonDocumentSymbols.findDocumentSymbols(document, yamlDoc, context));
                }
            }
        } catch (err) {
            this.telemetry.sendError("yaml.documentSymbols.error", {
                error: convertErrorToTelemetryMsg(err)
            });
        }
        return results;
    }
    findHierarchicalDocumentSymbols(document, context = {
        resultLimit: Number.MAX_VALUE
    }) {
        let results = [];
        try {
            const doc = yamlDocumentsCache.getYamlDocument(document);
            if (!doc || doc["documents"].length === 0) {
                return null;
            }
            for (const yamlDoc of doc["documents"]){
                if (yamlDoc.root) {
                    results = results.concat(this.jsonDocumentSymbols.findDocumentSymbols2(document, yamlDoc, context));
                }
            }
        } catch (err) {
            this.telemetry.sendError("yaml.hierarchicalDocumentSymbols.error", {
                error: convertErrorToTelemetryMsg(err)
            });
        }
        return results;
    }
    constructor(schemaService, telemetry){
        this.telemetry = telemetry;
        this.jsonDocumentSymbols = new JSONDocumentSymbols(schemaService);
        this.jsonDocumentSymbols.getKeyLabel = (property)=>{
            const keyNode = property.keyNode.internalNode;
            let name = "";
            if (isMap(keyNode)) {
                name = "{}";
            } else if (isSeq(keyNode)) {
                name = "[]";
            } else {
                name = keyNode.source;
            }
            return name;
        };
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/parser/isKubernetes.js
function setKubernetesParserOption(jsonDocuments, option) {
    for (const jsonDoc of jsonDocuments){
        jsonDoc.isKubernetes = option;
    }
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlHover.js
var path3 = __toESM(require_path_browserify());
var YAMLHover = class {
    configure(languageSettings) {
        if (languageSettings) {
            this.shouldHover = languageSettings.hover;
        }
    }
    doHover(document, position, isKubernetes = false) {
        try {
            if (!this.shouldHover || !document) {
                return Promise.resolve(void 0);
            }
            const doc = yamlDocumentsCache.getYamlDocument(document);
            const offset = document.offsetAt(position);
            const currentDoc = matchOffsetToDocument(offset, doc);
            if (currentDoc === null) {
                return Promise.resolve(void 0);
            }
            setKubernetesParserOption(doc.documents, isKubernetes);
            const currentDocIndex = doc.documents.indexOf(currentDoc);
            currentDoc.currentDocIndex = currentDocIndex;
            return this.getHover(document, position, currentDoc);
        } catch (error) {
            this.telemetry.sendError("yaml.hover.error", {
                error: convertErrorToTelemetryMsg(error)
            });
        }
    }
    // method copied from https://github.com/microsoft/vscode-json-languageservice/blob/2ea5ad3d2ffbbe40dea11cfe764a502becf113ce/src/services/jsonHover.ts#L23
    getHover(document, position, doc) {
        const offset = document.offsetAt(position);
        let node = doc.getNodeFromOffset(offset);
        if (!node || (node.type === "object" || node.type === "array") && offset > node.offset + 1 && offset < node.offset + node.length - 1) {
            return Promise.resolve(null);
        }
        const hoverRangeNode = node;
        if (node.type === "string") {
            const parent = node.parent;
            if (parent && parent.type === "property" && parent.keyNode === node) {
                node = parent.valueNode;
                if (!node) {
                    return Promise.resolve(null);
                }
            }
        }
        const hoverRange = Range.create(document.positionAt(hoverRangeNode.offset), document.positionAt(hoverRangeNode.offset + hoverRangeNode.length));
        const createHover = (contents)=>{
            const markupContent = {
                kind: "markdown",
                value: contents
            };
            const result = {
                contents: markupContent,
                range: hoverRange
            };
            return result;
        };
        const removePipe = (value1)=>{
            return value1.replace(/\|\|\s*$/, "");
        };
        return this.schemaService.getSchemaForResource(document.uri, doc).then((schema4)=>{
            if (schema4 && node && !schema4.errors.length) {
                const matchingSchemas = doc.getMatchingSchemas(schema4.schema, node.offset);
                let title = void 0;
                let markdownDescription = void 0;
                let markdownEnumValueDescription = void 0;
                let enumValue = void 0;
                const markdownExamples = [];
                matchingSchemas.every((s)=>{
                    if ((s.node === node || node.type === "property" && node.valueNode === s.node) && !s.inverted && s.schema) {
                        title = title || s.schema.title || s.schema.closestTitle;
                        markdownDescription = markdownDescription || s.schema.markdownDescription || toMarkdown2(s.schema.description);
                        if (s.schema.enum) {
                            const idx = s.schema.enum.indexOf(getNodeValue4(node));
                            if (s.schema.markdownEnumDescriptions) {
                                markdownEnumValueDescription = s.schema.markdownEnumDescriptions[idx];
                            } else if (s.schema.enumDescriptions) {
                                markdownEnumValueDescription = toMarkdown2(s.schema.enumDescriptions[idx]);
                            }
                            if (markdownEnumValueDescription) {
                                enumValue = s.schema.enum[idx];
                                if (typeof enumValue !== "string") {
                                    enumValue = JSON.stringify(enumValue);
                                }
                            }
                        }
                        if (s.schema.anyOf && isAllSchemasMatched(node, matchingSchemas, s.schema)) {
                            title = "";
                            markdownDescription = "";
                            s.schema.anyOf.forEach((childSchema, index)=>{
                                title += childSchema.title || s.schema.closestTitle || "";
                                markdownDescription += childSchema.markdownDescription || toMarkdown2(childSchema.description) || "";
                                if (index !== s.schema.anyOf.length - 1) {
                                    title += " || ";
                                    markdownDescription += " || ";
                                }
                            });
                            title = removePipe(title);
                            markdownDescription = removePipe(markdownDescription);
                        }
                        if (s.schema.examples) {
                            s.schema.examples.forEach((example)=>{
                                markdownExamples.push(JSON.stringify(example));
                            });
                        }
                    }
                    return true;
                });
                let result = "";
                if (title) {
                    result = "#### " + toMarkdown2(title);
                }
                if (markdownDescription) {
                    if (result.length > 0) {
                        result += "\n\n";
                    }
                    result += markdownDescription;
                }
                if (markdownEnumValueDescription) {
                    if (result.length > 0) {
                        result += "\n\n";
                    }
                    result += `\`${toMarkdownCodeBlock2(enumValue)}\`: ${markdownEnumValueDescription}`;
                }
                if (markdownExamples.length !== 0) {
                    if (result.length > 0) {
                        result += "\n\n";
                    }
                    result += "Examples:";
                    markdownExamples.forEach((example)=>{
                        result += `

\`\`\`${example}\`\`\``;
                    });
                }
                if (result.length > 0 && schema4.schema.url) {
                    result += `

Source: [${getSchemaName(schema4.schema)}](${schema4.schema.url})`;
                }
                return createHover(result);
            }
            return null;
        });
    }
    constructor(schemaService, telemetry){
        this.telemetry = telemetry;
        this.shouldHover = true;
        this.schemaService = schemaService;
    }
};
function getSchemaName(schema4) {
    let result = "JSON Schema";
    const urlString = schema4.url;
    if (urlString) {
        const url = URI.parse(urlString);
        result = path3.basename(url.fsPath);
    } else if (schema4.title) {
        result = schema4.title;
    }
    return result;
}
function toMarkdown2(plain) {
    if (plain) {
        const res = plain.replace(/([^\n\r])(\r?\n)([^\n\r])/gm, "$1\n\n$3");
        return res.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
    }
    return void 0;
}
function toMarkdownCodeBlock2(content) {
    if (content.indexOf("`") !== -1) {
        return "`` " + content + " ``";
    }
    return content;
}
function isAllSchemasMatched(node, matchingSchemas, schema4) {
    let count = 0;
    for (const matchSchema of matchingSchemas){
        if (node === matchSchema.node && matchSchema.schema !== schema4) {
            schema4.anyOf.forEach((childSchema)=>{
                if (matchSchema.schema.title === childSchema.title && matchSchema.schema.description === childSchema.description && matchSchema.schema.properties === childSchema.properties) {
                    count++;
                }
            });
        }
    }
    return count === schema4.anyOf.length;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/validation/unused-anchors.js
var UnusedAnchorsValidator = class {
    validate(document, yamlDoc) {
        const result = [];
        const anchors = /* @__PURE__ */ new Set();
        const usedAnchors = /* @__PURE__ */ new Set();
        const anchorParent = /* @__PURE__ */ new Map();
        visit2(yamlDoc.internalDocument, (key, node, path5)=>{
            if (!isNode(node)) {
                return;
            }
            if ((isCollection(node) || isScalar(node)) && node.anchor) {
                anchors.add(node);
                anchorParent.set(node, path5[path5.length - 1]);
            }
            if (isAlias(node)) {
                usedAnchors.add(node.resolve(yamlDoc.internalDocument));
            }
        });
        for (const anchor of anchors){
            if (!usedAnchors.has(anchor)) {
                const aToken = this.getAnchorNode(anchorParent.get(anchor));
                if (aToken) {
                    const range = Range.create(document.positionAt(aToken.offset), document.positionAt(aToken.offset + aToken.source.length));
                    const warningDiagnostic = Diagnostic.create(range, `Unused anchor "${aToken.source}"`, DiagnosticSeverity.Hint, 0);
                    warningDiagnostic.tags = [
                        DiagnosticTag.Unnecessary
                    ];
                    result.push(warningDiagnostic);
                }
            }
        }
        return result;
    }
    getAnchorNode(parentNode) {
        if (parentNode && parentNode.srcToken) {
            const token = parentNode.srcToken;
            if (isCollectionItem(token)) {
                return getAnchorFromCollectionItem(token);
            } else if (cst_exports.isCollection(token)) {
                for (const t of token.items){
                    const anchor = getAnchorFromCollectionItem(t);
                    if (anchor) {
                        return anchor;
                    }
                }
            }
        }
        return void 0;
    }
};
function getAnchorFromCollectionItem(token) {
    for (const t of token.start){
        if (t.type === "anchor") {
            return t;
        }
    }
    if (token.sep && Array.isArray(token.sep)) {
        for (const t of token.sep){
            if (t.type === "anchor") {
                return t;
            }
        }
    }
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/validation/yaml-style.js
var YAMLStyleValidator = class {
    validate(document, yamlDoc) {
        const result = [];
        visit2(yamlDoc.internalDocument, (key, node)=>{
            var _a, _b;
            if (this.forbidMapping && isMap(node) && ((_a = node.srcToken) == null ? void 0 : _a.type) === "flow-collection") {
                result.push(Diagnostic.create(this.getRangeOf(document, node.srcToken), "Flow style mapping is forbidden", DiagnosticSeverity.Error, "flowMap"));
            }
            if (this.forbidSequence && isSeq(node) && ((_b = node.srcToken) == null ? void 0 : _b.type) === "flow-collection") {
                result.push(Diagnostic.create(this.getRangeOf(document, node.srcToken), "Flow style sequence is forbidden", DiagnosticSeverity.Error, "flowSeq"));
            }
        });
        return result;
    }
    getRangeOf(document, node) {
        return Range.create(document.positionAt(node.start.offset), document.positionAt(node.end.pop().offset));
    }
    constructor(settings){
        this.forbidMapping = settings.flowMapping === "forbid";
        this.forbidSequence = settings.flowSequence === "forbid";
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlValidation.js
var yamlDiagToLSDiag = (yamlDiag, textDocument)=>{
    const start = textDocument.positionAt(yamlDiag.location.start);
    const range = {
        start,
        end: yamlDiag.location.toLineEnd ? Position.create(start.line, new TextBuffer(textDocument).getLineLength(start.line)) : textDocument.positionAt(yamlDiag.location.end)
    };
    return Diagnostic.create(range, yamlDiag.message, yamlDiag.severity, yamlDiag.code, YAML_SOURCE);
};
var YAMLValidation = class {
    configure(settings) {
        this.validators = [];
        if (settings) {
            this.validationEnabled = settings.validate;
            this.customTags = settings.customTags;
            this.disableAdditionalProperties = settings.disableAdditionalProperties;
            this.yamlVersion = settings.yamlVersion;
            if (settings.flowMapping === "forbid" || settings.flowSequence === "forbid") {
                this.validators.push(new YAMLStyleValidator(settings));
            }
        }
        this.validators.push(new UnusedAnchorsValidator());
    }
    async doValidation(textDocument, isKubernetes = false) {
        if (!this.validationEnabled) {
            return Promise.resolve([]);
        }
        const validationResult = [];
        try {
            const yamlDocument = yamlDocumentsCache.getYamlDocument(textDocument, {
                customTags: this.customTags,
                yamlVersion: this.yamlVersion
            }, true);
            let index = 0;
            for (const currentYAMLDoc of yamlDocument.documents){
                currentYAMLDoc.isKubernetes = isKubernetes;
                currentYAMLDoc.currentDocIndex = index;
                currentYAMLDoc.disableAdditionalProperties = this.disableAdditionalProperties;
                currentYAMLDoc.uri = textDocument.uri;
                const validation = await this.jsonValidation.doValidation(textDocument, currentYAMLDoc);
                const syd = currentYAMLDoc;
                if (syd.errors.length > 0) {
                    validationResult.push(...syd.errors);
                }
                if (syd.warnings.length > 0) {
                    validationResult.push(...syd.warnings);
                }
                validationResult.push(...validation);
                validationResult.push(...this.runAdditionalValidators(textDocument, currentYAMLDoc));
                index++;
            }
        } catch (err) {
            this.telemetry.sendError("yaml.validation.error", {
                error: convertErrorToTelemetryMsg(err)
            });
        }
        let previousErr;
        const foundSignatures = /* @__PURE__ */ new Set();
        const duplicateMessagesRemoved = [];
        for (let err of validationResult){
            if (isKubernetes && err.message === this.MATCHES_MULTIPLE) {
                continue;
            }
            if (Object.prototype.hasOwnProperty.call(err, "location")) {
                err = yamlDiagToLSDiag(err, textDocument);
            }
            if (!err.source) {
                err.source = YAML_SOURCE;
            }
            if (previousErr && previousErr.message === err.message && previousErr.range.end.line === err.range.start.line && Math.abs(previousErr.range.end.character - err.range.end.character) >= 1) {
                previousErr.range.end = err.range.end;
                continue;
            } else {
                previousErr = err;
            }
            const errSig = err.range.start.line + " " + err.range.start.character + " " + err.message;
            if (!foundSignatures.has(errSig)) {
                duplicateMessagesRemoved.push(err);
                foundSignatures.add(errSig);
            }
        }
        return duplicateMessagesRemoved;
    }
    runAdditionalValidators(document, yarnDoc) {
        const result = [];
        for (const validator of this.validators){
            result.push(...validator.validate(document, yarnDoc));
        }
        return result;
    }
    constructor(schemaService, telemetry){
        this.telemetry = telemetry;
        this.validators = [];
        this.MATCHES_MULTIPLE = "Matches multiple schemas when only one must validate.";
        this.validationEnabled = true;
        this.jsonValidation = new JSONValidation(schemaService, Promise);
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlFormatter.js
var prettier = __toESM(require_standalone());
var parser = __toESM(require_parser_yaml());
var YAMLFormatter = class {
    configure(shouldFormat) {
        if (shouldFormat) {
            this.formatterEnabled = shouldFormat.format;
        }
    }
    format(document, options) {
        if (!this.formatterEnabled) {
            return [];
        }
        try {
            const text = document.getText();
            const prettierOptions = {
                parser: "yaml",
                plugins: [
                    parser
                ],
                // --- FormattingOptions ---
                tabWidth: options.tabWidth || options.tabSize,
                // --- CustomFormatterOptions ---
                singleQuote: options.singleQuote,
                bracketSpacing: options.bracketSpacing,
                // 'preserve' is the default for Options.proseWrap. See also server.ts
                proseWrap: "always" === options.proseWrap ? "always" : "never" === options.proseWrap ? "never" : "preserve",
                printWidth: options.printWidth
            };
            const formatted = prettier.format(text, prettierOptions);
            return [
                TextEdit.replace(Range.create(Position.create(0, 0), document.positionAt(text.length)), formatted)
            ];
        } catch (error) {
            return [];
        }
    }
    constructor(){
        this.formatterEnabled = true;
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlLinks.js
var YamlLinks = class {
    findLinks(document) {
        try {
            const doc = yamlDocumentsCache.getYamlDocument(document);
            const linkPromises = [];
            for (const yamlDoc of doc.documents){
                linkPromises.push(findLinks(document, yamlDoc));
            }
            return Promise.all(linkPromises).then((yamlLinkArray)=>[].concat(...yamlLinkArray));
        } catch (err) {
            this.telemetry.sendError("yaml.documentLink.error", {
                error: convertErrorToTelemetryMsg(err)
            });
        }
    }
    constructor(telemetry){
        this.telemetry = telemetry;
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlFolding.js
function getFoldingRanges2(document, context) {
    if (!document) {
        return;
    }
    const result = [];
    const doc = yamlDocumentsCache.getYamlDocument(document);
    for (const ymlDoc of doc.documents){
        if (doc.documents.length > 1) {
            result.push(createNormalizedFolding(document, ymlDoc.root));
        }
        ymlDoc.visit((node)=>{
            var _a;
            if (node.type === "object" && ((_a = node.parent) == null ? void 0 : _a.type) === "array") {
                result.push(createNormalizedFolding(document, node));
            }
            if (node.type === "property" && node.valueNode) {
                switch(node.valueNode.type){
                    case "array":
                    case "object":
                        result.push(createNormalizedFolding(document, node));
                        break;
                    case "string":
                        {
                            const nodePosn = document.positionAt(node.offset);
                            const valuePosn = document.positionAt(node.valueNode.offset + node.valueNode.length);
                            if (nodePosn.line !== valuePosn.line) {
                                result.push(createNormalizedFolding(document, node));
                            }
                            break;
                        }
                    default:
                        return true;
                }
            }
            return true;
        });
    }
    const rangeLimit = context && context.rangeLimit;
    if (typeof rangeLimit !== "number" || result.length <= rangeLimit) {
        return result;
    }
    if (context && context.onRangeLimitExceeded) {
        context.onRangeLimitExceeded(document.uri);
    }
    return result.slice(0, context.rangeLimit);
}
function createNormalizedFolding(document, node) {
    const startPos = document.positionAt(node.offset);
    let endPos = document.positionAt(node.offset + node.length);
    const textFragment = document.getText(Range.create(startPos, endPos));
    const newLength = textFragment.length - textFragment.trimRight().length;
    if (newLength > 0) {
        endPos = document.positionAt(node.offset + node.length - newLength);
    }
    return FoldingRange.create(startPos.line, endPos.line, startPos.character, endPos.character);
}
// ../../node_modules/yaml-language-server/lib/esm/commands.js
var YamlCommands;
(function(YamlCommands2) {
    YamlCommands2["JUMP_TO_SCHEMA"] = "jumpToSchema";
})(YamlCommands || (YamlCommands = {}));
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlCodeActions.js
var path4 = __toESM(require_path_browserify());
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/flow-style-rewriter.js
var FlowStyleRewriter = class {
    write(node) {
        if (node.internalNode.srcToken["type"] !== "flow-collection") {
            return null;
        }
        const collection = node.internalNode.srcToken;
        const blockType = collection.start.type === "flow-map-start" ? "block-map" : "block-seq";
        const parentType = node.parent.type;
        const blockStyle = {
            type: blockType,
            offset: collection.offset,
            indent: collection.indent,
            items: []
        };
        for (const item of collection.items){
            cst_exports.visit(item, ({ key , sep , value: value1  })=>{
                if (blockType === "block-map") {
                    const start = [
                        {
                            type: "space",
                            indent: 0,
                            offset: key.offset,
                            source: this.indentation
                        }
                    ];
                    if (parentType === "property") {
                        start.unshift({
                            type: "newline",
                            indent: 0,
                            offset: key.offset,
                            source: "\n"
                        });
                    }
                    blockStyle.items.push({
                        start,
                        key,
                        sep,
                        value: value1
                    });
                } else if (blockType === "block-seq") {
                    blockStyle.items.push({
                        start: [
                            {
                                type: "newline",
                                indent: 0,
                                offset: value1.offset,
                                source: "\n"
                            },
                            {
                                type: "space",
                                indent: 0,
                                offset: value1.offset,
                                source: this.indentation
                            },
                            {
                                type: "seq-item-ind",
                                indent: 0,
                                offset: value1.offset,
                                source: "-"
                            },
                            {
                                type: "space",
                                indent: 0,
                                offset: value1.offset,
                                source: " "
                            }
                        ],
                        value: value1
                    });
                }
                if (value1.type === "flow-collection") {
                    return visit2.SKIP;
                }
            });
        }
        return cst_exports.stringify(blockStyle);
    }
    constructor(indentation){
        this.indentation = indentation;
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlCodeActions.js
var YamlCodeActions = class {
    configure(settings) {
        this.indentation = settings.indentation;
    }
    getCodeAction(document, params) {
        if (!params.context.diagnostics) {
            return;
        }
        const result = [];
        result.push(...this.getConvertToBooleanActions(params.context.diagnostics, document));
        result.push(...this.getJumpToSchemaActions(params.context.diagnostics));
        result.push(...this.getTabToSpaceConverting(params.context.diagnostics, document));
        result.push(...this.getUnusedAnchorsDelete(params.context.diagnostics, document));
        result.push(...this.getConvertToBlockStyleActions(params.context.diagnostics, document));
        return result;
    }
    getJumpToSchemaActions(diagnostics) {
        var _a, _b, _c, _d, _e;
        const isOpenTextDocumentEnabled = (_d = (_c = (_b = (_a = this.clientCapabilities) == null ? void 0 : _a.window) == null ? void 0 : _b.showDocument) == null ? void 0 : _c.support) != null ? _d : false;
        if (!isOpenTextDocumentEnabled) {
            return [];
        }
        const schemaUriToDiagnostic = /* @__PURE__ */ new Map();
        for (const diagnostic of diagnostics){
            const schemaUri = ((_e = diagnostic.data) == null ? void 0 : _e.schemaUri) || [];
            for (const schemaUriStr of schemaUri){
                if (schemaUriStr) {
                    if (!schemaUriToDiagnostic.has(schemaUriStr)) {
                        schemaUriToDiagnostic.set(schemaUriStr, []);
                    }
                    schemaUriToDiagnostic.get(schemaUriStr).push(diagnostic);
                }
            }
        }
        const result = [];
        for (const schemaUri of schemaUriToDiagnostic.keys()){
            const action = CodeAction.create(`Jump to schema location (${path4.basename(schemaUri)})`, Command.create("JumpToSchema", YamlCommands.JUMP_TO_SCHEMA, schemaUri));
            action.diagnostics = schemaUriToDiagnostic.get(schemaUri);
            result.push(action);
        }
        return result;
    }
    getTabToSpaceConverting(diagnostics, document) {
        const result = [];
        const textBuff = new TextBuffer(document);
        const processedLine = [];
        for (const diag of diagnostics){
            if (diag.message === "Using tabs can lead to unpredictable results") {
                if (processedLine.includes(diag.range.start.line)) {
                    continue;
                }
                const lineContent = textBuff.getLineContent(diag.range.start.line);
                let replacedTabs = 0;
                let newText = "";
                for(let i = diag.range.start.character; i <= diag.range.end.character; i++){
                    const char = lineContent.charAt(i);
                    if (char !== "	") {
                        break;
                    }
                    replacedTabs++;
                    newText += this.indentation;
                }
                processedLine.push(diag.range.start.line);
                let resultRange = diag.range;
                if (replacedTabs !== diag.range.end.character - diag.range.start.character) {
                    resultRange = Range.create(diag.range.start, Position.create(diag.range.end.line, diag.range.start.character + replacedTabs));
                }
                result.push(CodeAction.create("Convert Tab to Spaces", createWorkspaceEdit(document.uri, [
                    TextEdit.replace(resultRange, newText)
                ]), CodeActionKind.QuickFix));
            }
        }
        if (result.length !== 0) {
            const replaceEdits = [];
            for(let i = 0; i <= textBuff.getLineCount(); i++){
                const lineContent = textBuff.getLineContent(i);
                let replacedTabs = 0;
                let newText = "";
                for(let j = 0; j < lineContent.length; j++){
                    const char = lineContent.charAt(j);
                    if (char !== " " && char !== "	") {
                        if (replacedTabs !== 0) {
                            replaceEdits.push(TextEdit.replace(Range.create(i, j - replacedTabs, i, j), newText));
                            replacedTabs = 0;
                            newText = "";
                        }
                        break;
                    }
                    if (char === " " && replacedTabs !== 0) {
                        replaceEdits.push(TextEdit.replace(Range.create(i, j - replacedTabs, i, j), newText));
                        replacedTabs = 0;
                        newText = "";
                        continue;
                    }
                    if (char === "	") {
                        newText += this.indentation;
                        replacedTabs++;
                    }
                }
                if (replacedTabs !== 0) {
                    replaceEdits.push(TextEdit.replace(Range.create(i, 0, i, textBuff.getLineLength(i)), newText));
                }
            }
            if (replaceEdits.length > 0) {
                result.push(CodeAction.create("Convert all Tabs to Spaces", createWorkspaceEdit(document.uri, replaceEdits), CodeActionKind.QuickFix));
            }
        }
        return result;
    }
    getUnusedAnchorsDelete(diagnostics, document) {
        const result = [];
        const buffer = new TextBuffer(document);
        for (const diag of diagnostics){
            if (diag.message.startsWith("Unused anchor") && diag.source === YAML_SOURCE) {
                const range = Range.create(diag.range.start, diag.range.end);
                const actual = buffer.getText(range);
                const lineContent = buffer.getLineContent(range.end.line);
                const lastWhitespaceChar = getFirstNonWhitespaceCharacterAfterOffset(lineContent, range.end.character);
                range.end.character = lastWhitespaceChar;
                const action = CodeAction.create(`Delete unused anchor: ${actual}`, createWorkspaceEdit(document.uri, [
                    TextEdit.del(range)
                ]), CodeActionKind.QuickFix);
                action.diagnostics = [
                    diag
                ];
                result.push(action);
            }
        }
        return result;
    }
    getConvertToBooleanActions(diagnostics, document) {
        const results = [];
        for (const diagnostic of diagnostics){
            if (diagnostic.message === 'Incorrect type. Expected "boolean".') {
                const value1 = document.getText(diagnostic.range).toLocaleLowerCase();
                if (value1 === '"true"' || value1 === '"false"' || value1 === "'true'" || value1 === "'false'") {
                    const newValue = value1.includes("true") ? "true" : "false";
                    results.push(CodeAction.create("Convert to boolean", createWorkspaceEdit(document.uri, [
                        TextEdit.replace(diagnostic.range, newValue)
                    ]), CodeActionKind.QuickFix));
                }
            }
        }
        return results;
    }
    getConvertToBlockStyleActions(diagnostics, document) {
        const results = [];
        for (const diagnostic of diagnostics){
            if (diagnostic.code === "flowMap" || diagnostic.code === "flowSeq") {
                const yamlDocuments = yamlDocumentsCache.getYamlDocument(document);
                const startOffset = document.offsetAt(diagnostic.range.start);
                const yamlDoc = matchOffsetToDocument(startOffset, yamlDocuments);
                const node = yamlDoc.getNodeFromOffset(startOffset);
                if (isMap(node.internalNode) || isSeq(node.internalNode)) {
                    const blockTypeDescription = isMap(node.internalNode) ? "map" : "sequence";
                    const rewriter = new FlowStyleRewriter(this.indentation);
                    results.push(CodeAction.create(`Convert to block style ${blockTypeDescription}`, createWorkspaceEdit(document.uri, [
                        TextEdit.replace(diagnostic.range, rewriter.write(node))
                    ]), CodeActionKind.QuickFix));
                }
            }
        }
        return results;
    }
    constructor(clientCapabilities){
        this.clientCapabilities = clientCapabilities;
        this.indentation = "  ";
    }
};
function createWorkspaceEdit(uri, edits) {
    const changes = {};
    changes[uri] = edits;
    const edit = {
        changes
    };
    return edit;
}
// ../../node_modules/yaml-language-server/lib/esm/languageserver/commandExecutor.js
var CommandExecutor = class {
    executeCommand(params) {
        if (this.commands.has(params.command)) {
            const handler = this.commands.get(params.command);
            return handler(...params.arguments);
        }
        throw new Error(`Command '${params.command}' not found`);
    }
    registerCommand(commandId, handler) {
        this.commands.set(commandId, handler);
    }
    constructor(){
        this.commands = /* @__PURE__ */ new Map();
    }
};
var commandExecutor = new CommandExecutor();
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlOnTypeFormatting.js
function doDocumentOnTypeFormatting(document, params) {
    const { position  } = params;
    const tb = new TextBuffer(document);
    if (params.ch === "\n") {
        const previousLine = tb.getLineContent(position.line - 1);
        if (previousLine.trimRight().endsWith(":")) {
            const currentLine = tb.getLineContent(position.line);
            const subLine = currentLine.substring(position.character, currentLine.length);
            const isInArray = previousLine.indexOf(" - ") !== -1;
            if (subLine.trimRight().length === 0) {
                const indentationFix = position.character - (previousLine.length - previousLine.trimLeft().length);
                if (indentationFix === params.options.tabSize && !isInArray) {
                    return;
                }
                const result = [];
                if (currentLine.length > 0) {
                    result.push(TextEdit.del(Range.create(position, Position.create(position.line, currentLine.length - 1))));
                }
                result.push(TextEdit.insert(position, " ".repeat(params.options.tabSize + (isInArray ? 2 - indentationFix : 0))));
                return result;
            }
            if (isInArray) {
                return [
                    TextEdit.insert(position, " ".repeat(params.options.tabSize))
                ];
            }
        }
        if (previousLine.trimRight().endsWith("|")) {
            return [
                TextEdit.insert(position, " ".repeat(params.options.tabSize))
            ];
        }
        if (previousLine.includes(" - ") && !previousLine.includes(": ")) {
            return [
                TextEdit.insert(position, "- ")
            ];
        }
        if (previousLine.includes(" - ") && previousLine.includes(": ")) {
            return [
                TextEdit.insert(position, "  ")
            ];
        }
    }
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/schemaUrls.js
var JSON_SCHEMASTORE_URL = "https://www.schemastore.org/api/json/catalog.json";
function getSchemaUrls(schema4) {
    const result = /* @__PURE__ */ new Map();
    if (!schema4) {
        return result;
    }
    if (schema4.url) {
        if (schema4.url.startsWith("schemaservice://combinedSchema/")) {
            addSchemasForOf(schema4, result);
        } else {
            result.set(schema4.url, schema4);
        }
    } else {
        addSchemasForOf(schema4, result);
    }
    return result;
}
function addSchemasForOf(schema4, result) {
    if (schema4.allOf) {
        addInnerSchemaUrls(schema4.allOf, result);
    }
    if (schema4.anyOf) {
        addInnerSchemaUrls(schema4.anyOf, result);
    }
    if (schema4.oneOf) {
        addInnerSchemaUrls(schema4.oneOf, result);
    }
}
function addInnerSchemaUrls(schemas2, result) {
    for (const subSchema of schemas2){
        if (!isBoolean2(subSchema) && subSchema.url && !result.has(subSchema.url)) {
            result.set(subSchema.url, subSchema);
        }
    }
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlCodeLens.js
var YamlCodeLens = class {
    async getCodeLens(document) {
        const result = [];
        try {
            const yamlDocument = yamlDocumentsCache.getYamlDocument(document);
            let schemaUrls = /* @__PURE__ */ new Map();
            for (const currentYAMLDoc of yamlDocument.documents){
                const schema4 = await this.schemaService.getSchemaForResource(document.uri, currentYAMLDoc);
                if (schema4 == null ? void 0 : schema4.schema) {
                    schemaUrls = new Map([
                        ...getSchemaUrls(schema4 == null ? void 0 : schema4.schema),
                        ...schemaUrls
                    ]);
                }
            }
            for (const urlToSchema of schemaUrls){
                const lens = CodeLens.create(Range.create(0, 0, 0, 0));
                lens.command = {
                    title: getSchemaTitle(urlToSchema[1], urlToSchema[0]),
                    command: YamlCommands.JUMP_TO_SCHEMA,
                    arguments: [
                        urlToSchema[0]
                    ]
                };
                result.push(lens);
            }
        } catch (err) {
            this.telemetry.sendError("yaml.codeLens.error", {
                error: convertErrorToTelemetryMsg(err)
            });
        }
        return result;
    }
    resolveCodeLens(param) {
        return param;
    }
    constructor(schemaService, telemetry){
        this.schemaService = schemaService;
        this.telemetry = telemetry;
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlCommands.js
function registerCommands(commandExecutor2, connection) {
    commandExecutor2.registerCommand(YamlCommands.JUMP_TO_SCHEMA, async (uri)=>{
        if (!uri) {
            return;
        }
        if (!uri.startsWith("file") && !/^[a-z]:[\\/]/i.test(uri)) {
            const origUri = URI.parse(uri);
            const customUri = URI.from({
                scheme: "json-schema",
                authority: origUri.authority,
                path: origUri.path.endsWith(".json") ? origUri.path : origUri.path + ".json",
                fragment: uri
            });
            uri = customUri.toString();
        }
        if (/^[a-z]:[\\/]/i.test(uri)) {
            const winUri = URI.file(uri);
            uri = winUri.toString();
        }
        const result = await connection.window.showDocument({
            uri,
            external: false,
            takeFocus: true
        });
        if (!result) {
            connection.window.showErrorMessage(`Cannot open ${uri}`);
        }
    });
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/indentationGuesser.js
var SpacesDiffResult = class {
    constructor(){
        this.spacesDiff = 0;
        this.looksLikeAlignment = false;
    }
};
function spacesDiff(a2, aLength, b, bLength, result) {
    result.spacesDiff = 0;
    result.looksLikeAlignment = false;
    let i;
    for(i = 0; i < aLength && i < bLength; i++){
        const aCharCode = a2.charCodeAt(i);
        const bCharCode = b.charCodeAt(i);
        if (aCharCode !== bCharCode) {
            break;
        }
    }
    let aSpacesCnt = 0, aTabsCount = 0;
    for(let j = i; j < aLength; j++){
        const aCharCode = a2.charCodeAt(j);
        if (aCharCode === 32) {
            aSpacesCnt++;
        } else {
            aTabsCount++;
        }
    }
    let bSpacesCnt = 0, bTabsCount = 0;
    for(let j = i; j < bLength; j++){
        const bCharCode = b.charCodeAt(j);
        if (bCharCode === 32) {
            bSpacesCnt++;
        } else {
            bTabsCount++;
        }
    }
    if (aSpacesCnt > 0 && aTabsCount > 0) {
        return;
    }
    if (bSpacesCnt > 0 && bTabsCount > 0) {
        return;
    }
    const tabsDiff = Math.abs(aTabsCount - bTabsCount);
    const spacesDiff2 = Math.abs(aSpacesCnt - bSpacesCnt);
    if (tabsDiff === 0) {
        result.spacesDiff = spacesDiff2;
        if (spacesDiff2 > 0 && 0 <= bSpacesCnt - 1 && bSpacesCnt - 1 < a2.length && bSpacesCnt < b.length) {
            if (b.charCodeAt(bSpacesCnt) !== 32 && a2.charCodeAt(bSpacesCnt - 1) === 32) {
                if (a2.charCodeAt(a2.length - 1) === 44) {
                    result.looksLikeAlignment = true;
                }
            }
        }
        return;
    }
    if (spacesDiff2 % tabsDiff === 0) {
        result.spacesDiff = spacesDiff2 / tabsDiff;
    }
}
function guessIndentation(source, defaultTabSize, defaultInsertSpaces) {
    const linesCount = Math.min(source.getLineCount(), 1e4);
    let linesIndentedWithTabsCount = 0;
    let linesIndentedWithSpacesCount = 0;
    let previousLineText = "";
    let previousLineIndentation = 0;
    const ALLOWED_TAB_SIZE_GUESSES = [
        2,
        4,
        6,
        8,
        3,
        5,
        7
    ];
    const MAX_ALLOWED_TAB_SIZE_GUESS = 8;
    const spacesDiffCount = [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
    ];
    const tmp = new SpacesDiffResult();
    for(let lineNumber = 1; lineNumber <= linesCount; lineNumber++){
        const currentLineLength = source.getLineLength(lineNumber);
        const currentLineText = source.getLineContent(lineNumber);
        const useCurrentLineText = currentLineLength <= 65536;
        let currentLineHasContent = false;
        let currentLineIndentation = 0;
        let currentLineSpacesCount = 0;
        let currentLineTabsCount = 0;
        for(let j = 0, lenJ = currentLineLength; j < lenJ; j++){
            const charCode = useCurrentLineText ? currentLineText.charCodeAt(j) : source.getLineCharCode(lineNumber, j);
            if (charCode === 9) {
                currentLineTabsCount++;
            } else if (charCode === 32) {
                currentLineSpacesCount++;
            } else {
                currentLineHasContent = true;
                currentLineIndentation = j;
                break;
            }
        }
        if (!currentLineHasContent) {
            continue;
        }
        if (currentLineTabsCount > 0) {
            linesIndentedWithTabsCount++;
        } else if (currentLineSpacesCount > 1) {
            linesIndentedWithSpacesCount++;
        }
        spacesDiff(previousLineText, previousLineIndentation, currentLineText, currentLineIndentation, tmp);
        if (tmp.looksLikeAlignment) {
            if (!(defaultInsertSpaces && defaultTabSize === tmp.spacesDiff)) {
                continue;
            }
        }
        const currentSpacesDiff = tmp.spacesDiff;
        if (currentSpacesDiff <= MAX_ALLOWED_TAB_SIZE_GUESS) {
            spacesDiffCount[currentSpacesDiff]++;
        }
        previousLineText = currentLineText;
        previousLineIndentation = currentLineIndentation;
    }
    let insertSpaces = defaultInsertSpaces;
    if (linesIndentedWithTabsCount !== linesIndentedWithSpacesCount) {
        insertSpaces = linesIndentedWithTabsCount < linesIndentedWithSpacesCount;
    }
    let tabSize = defaultTabSize;
    if (insertSpaces) {
        let tabSizeScore = insertSpaces ? 0 : 0.1 * linesCount;
        ALLOWED_TAB_SIZE_GUESSES.forEach((possibleTabSize)=>{
            const possibleTabSizeScore = spacesDiffCount[possibleTabSize];
            if (possibleTabSizeScore > tabSizeScore) {
                tabSizeScore = possibleTabSizeScore;
                tabSize = possibleTabSize;
            }
        });
        if (tabSize === 4 && spacesDiffCount[4] > 0 && spacesDiffCount[2] > 0 && spacesDiffCount[2] >= spacesDiffCount[4] / 2) {
            tabSize = 2;
        }
    }
    return {
        insertSpaces,
        tabSize
    };
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/json.js
function stringifyObject2(obj, indent, stringifyLiteral, settings, depth = 0, consecutiveArrays = 0) {
    if (obj !== null && typeof obj === "object") {
        const newIndent = depth === 0 && settings.shouldIndentWithTab || depth > 0 ? indent + settings.indentation : "";
        if (Array.isArray(obj)) {
            consecutiveArrays += 1;
            if (obj.length === 0) {
                return "";
            }
            let result = "";
            for(let i = 0; i < obj.length; i++){
                let pseudoObj = obj[i];
                if (typeof obj[i] !== "object") {
                    result += "\n" + newIndent + "- " + stringifyLiteral(obj[i]);
                    continue;
                }
                if (!Array.isArray(obj[i])) {
                    pseudoObj = prependToObject(obj[i], consecutiveArrays);
                }
                result += stringifyObject2(pseudoObj, indent, stringifyLiteral, settings, depth += 1, consecutiveArrays);
            }
            return result;
        } else {
            const keys = Object.keys(obj);
            if (keys.length === 0) {
                return "";
            }
            let result = depth === 0 && settings.newLineFirst || depth > 0 ? "\n" : "";
            for(let i = 0; i < keys.length; i++){
                const key = keys[i];
                const isObject = typeof obj[key] === "object";
                const colonDelimiter = isObject ? ":" : ": ";
                const parentArrayCompensation = isObject && /^\s|-/.test(key) ? settings.indentation : "";
                const objectIndent = newIndent + parentArrayCompensation;
                if (depth === 0 && i === 0 && !settings.indentFirstObject) {
                    const value1 = stringifyObject2(obj[key], objectIndent, stringifyLiteral, settings, depth += 1, 0);
                    result += indent + key + colonDelimiter + value1;
                } else {
                    const value1 = stringifyObject2(obj[key], objectIndent, stringifyLiteral, settings, depth += 1, 0);
                    result += newIndent + key + colonDelimiter + value1;
                }
                if (i < keys.length - 1) {
                    result += "\n";
                }
            }
            return result;
        }
    }
    return stringifyLiteral(obj);
}
function prependToObject(obj, consecutiveArrays) {
    const newObj = {};
    for(let i = 0; i < Object.keys(obj).length; i++){
        const key = Object.keys(obj)[i];
        if (i === 0) {
            newObj["- ".repeat(consecutiveArrays) + key] = obj[key];
        } else {
            newObj["  ".repeat(consecutiveArrays) + key] = obj[key];
        }
    }
    return newObj;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlCompletion.js
var localize9 = loadMessageBundle();
var doubleQuotesEscapeRegExp = /[\\]+"/g;
var parentCompletionKind = lib_CompletionItemKind.Class;
var YamlCompletion = class {
    configure(languageSettings) {
        if (languageSettings) {
            this.completionEnabled = languageSettings.completion;
        }
        this.customTags = languageSettings.customTags;
        this.yamlVersion = languageSettings.yamlVersion;
        this.configuredIndentation = languageSettings.indentation;
        this.disableDefaultProperties = languageSettings.disableDefaultProperties;
        this.parentSkeletonSelectedFirst = languageSettings.parentSkeletonSelectedFirst;
    }
    async doComplete(document, position, isKubernetes = false, doComplete = true) {
        const result = CompletionList.create([], false);
        if (!this.completionEnabled) {
            return result;
        }
        const doc = this.yamlDocument.getYamlDocument(document, {
            customTags: this.customTags,
            yamlVersion: this.yamlVersion
        }, true);
        const textBuffer = new TextBuffer(document);
        if (!this.configuredIndentation) {
            const indent = guessIndentation(textBuffer, 2, true);
            this.indentation = indent.insertSpaces ? " ".repeat(indent.tabSize) : "	";
        } else {
            this.indentation = this.configuredIndentation;
        }
        setKubernetesParserOption(doc.documents, isKubernetes);
        for (const jsonDoc of doc.documents){
            jsonDoc.uri = document.uri;
        }
        const offset = document.offsetAt(position);
        const text = document.getText();
        if (text.charAt(offset - 1) === ":") {
            return Promise.resolve(result);
        }
        let currentDoc = matchOffsetToDocument(offset, doc);
        if (currentDoc === null) {
            return Promise.resolve(result);
        }
        currentDoc = currentDoc.clone();
        let [node, foundByClosest] = currentDoc.getNodeFromPosition(offset, textBuffer, this.indentation.length);
        const currentWord = this.getCurrentWord(document, offset);
        let lineContent = textBuffer.getLineContent(position.line);
        const lineAfterPosition = lineContent.substring(position.character);
        const areOnlySpacesAfterPosition = /^[ ]+\n?$/.test(lineAfterPosition);
        this.arrayPrefixIndentation = "";
        let overwriteRange = null;
        if (areOnlySpacesAfterPosition) {
            overwriteRange = Range.create(position, Position.create(position.line, lineContent.length));
            const isOnlyWhitespace = lineContent.trim().length === 0;
            const isOnlyDash = lineContent.match(/^\s*(-)\s*$/);
            if (node && isScalar(node) && !isOnlyWhitespace && !isOnlyDash) {
                const matches = lineContent.match(/^([\s-]*)[^:]+[ \t]+\n?$/);
                if (matches == null ? void 0 : matches.length) {
                    overwriteRange = Range.create(Position.create(position.line, matches[1].length), Position.create(position.line, lineContent.length));
                }
            }
        } else if (node && isScalar(node) && node.value === "null") {
            const nodeStartPos = document.positionAt(node.range[0]);
            nodeStartPos.character += 1;
            const nodeEndPos = document.positionAt(node.range[2]);
            nodeEndPos.character += 1;
            overwriteRange = Range.create(nodeStartPos, nodeEndPos);
        } else if (node && isScalar(node) && node.value) {
            const start = document.positionAt(node.range[0]);
            if (offset > 0 && start.character > 0 && text.charAt(offset - 1) === "-") {
                start.character -= 1;
            }
            overwriteRange = Range.create(start, document.positionAt(node.range[1]));
        } else if (node && isScalar(node) && node.value === null && currentWord === "-") {
            overwriteRange = Range.create(position, position);
            this.arrayPrefixIndentation = " ";
        } else {
            let overwriteStart = document.offsetAt(position) - currentWord.length;
            if (overwriteStart > 0 && text[overwriteStart - 1] === '"') {
                overwriteStart--;
            }
            overwriteRange = Range.create(document.positionAt(overwriteStart), position);
        }
        const proposed = {};
        const existingProposeItem = "__";
        const collector = {
            add: (completionItem, oneOfSchema)=>{
                const addSuggestionForParent = function(completionItem2) {
                    var _a;
                    const existsInYaml = ((_a = proposed[completionItem2.label]) == null ? void 0 : _a.label) === existingProposeItem;
                    if (existsInYaml) {
                        return;
                    }
                    const schema4 = completionItem2.parent.schema;
                    const schemaType = getSchemaTypeName(schema4);
                    const schemaDescription = schema4.markdownDescription || schema4.description;
                    let parentCompletion = result.items.find((item)=>{
                        var _a2;
                        return ((_a2 = item.parent) == null ? void 0 : _a2.schema) === schema4 && item.kind === parentCompletionKind;
                    });
                    if (parentCompletion && parentCompletion.parent.insertTexts.includes(completionItem2.insertText)) {
                        return;
                    } else if (!parentCompletion) {
                        parentCompletion = {
                            ...completionItem2,
                            label: schemaType,
                            documentation: schemaDescription,
                            sortText: "_" + schemaType,
                            kind: parentCompletionKind
                        };
                        parentCompletion.label = parentCompletion.label || completionItem2.label;
                        parentCompletion.parent.insertTexts = [
                            completionItem2.insertText
                        ];
                        result.items.push(parentCompletion);
                    } else {
                        parentCompletion.parent.insertTexts.push(completionItem2.insertText);
                    }
                };
                const isForParentCompletion = !!completionItem.parent;
                let label = completionItem.label;
                if (!label) {
                    console.warn(`Ignoring CompletionItem without label: ${JSON.stringify(completionItem)}`);
                    return;
                }
                if (!isString2(label)) {
                    label = String(label);
                }
                label = label.replace(/[\n]/g, "\u21B5");
                if (label.length > 60) {
                    const shortendedLabel = label.substr(0, 57).trim() + "...";
                    if (!proposed[shortendedLabel]) {
                        label = shortendedLabel;
                    }
                }
                if (completionItem.insertText.endsWith("$1") && !isForParentCompletion) {
                    completionItem.insertText = completionItem.insertText.substr(0, completionItem.insertText.length - 2);
                }
                if (overwriteRange && overwriteRange.start.line === overwriteRange.end.line) {
                    completionItem.textEdit = TextEdit.replace(overwriteRange, completionItem.insertText);
                }
                completionItem.label = label;
                if (isForParentCompletion) {
                    addSuggestionForParent(completionItem);
                    return;
                }
                if (this.arrayPrefixIndentation) {
                    this.updateCompletionText(completionItem, this.arrayPrefixIndentation + completionItem.insertText);
                }
                const existing = proposed[label];
                const isInsertTextDifferent = (existing == null ? void 0 : existing.label) !== existingProposeItem && (existing == null ? void 0 : existing.insertText) !== completionItem.insertText;
                if (!existing) {
                    proposed[label] = completionItem;
                    result.items.push(completionItem);
                } else if (isInsertTextDifferent) {
                    const mergedText = this.mergeSimpleInsertTexts(label, existing.insertText, completionItem.insertText, oneOfSchema);
                    if (mergedText) {
                        this.updateCompletionText(existing, mergedText);
                    } else {
                        proposed[label] = completionItem;
                        result.items.push(completionItem);
                    }
                }
                if (existing && !existing.documentation && completionItem.documentation) {
                    existing.documentation = completionItem.documentation;
                }
            },
            error: (message)=>{
                this.telemetry.sendError("yaml.completion.error", {
                    error: convertErrorToTelemetryMsg(message)
                });
            },
            log: (message)=>{
                console.log(message);
            },
            getNumberOfProposals: ()=>{
                return result.items.length;
            },
            result
        };
        if (this.customTags.length > 0) {
            this.getCustomTagValueCompletions(collector);
        }
        if (lineContent.endsWith("\n")) {
            lineContent = lineContent.substr(0, lineContent.length - 1);
        }
        try {
            const schema4 = await this.schemaService.getSchemaForResource(document.uri, currentDoc);
            if (!schema4 || schema4.errors.length) {
                if (position.line === 0 && position.character === 0 && !isModeline(lineContent)) {
                    const inlineSchemaCompletion = {
                        kind: lib_CompletionItemKind.Text,
                        label: "Inline schema",
                        insertText: "# yaml-language-server: $schema=",
                        insertTextFormat: lib_InsertTextFormat.PlainText
                    };
                    result.items.push(inlineSchemaCompletion);
                }
            }
            if (isModeline(lineContent) || isInComment(doc.tokens, offset)) {
                const schemaIndex = lineContent.indexOf("$schema=");
                if (schemaIndex !== -1 && schemaIndex + "$schema=".length <= position.character) {
                    this.schemaService.getAllSchemas().forEach((schema5)=>{
                        var _a;
                        const schemaIdCompletion = {
                            kind: lib_CompletionItemKind.Constant,
                            label: (_a = schema5.name) != null ? _a : schema5.uri,
                            detail: schema5.description,
                            insertText: schema5.uri,
                            insertTextFormat: lib_InsertTextFormat.PlainText,
                            insertTextMode: InsertTextMode.asIs
                        };
                        result.items.push(schemaIdCompletion);
                    });
                }
                return result;
            }
            if (!schema4 || schema4.errors.length) {
                return result;
            }
            let currentProperty = null;
            if (!node) {
                if (!currentDoc.internalDocument.contents || isScalar(currentDoc.internalDocument.contents)) {
                    const map2 = currentDoc.internalDocument.createNode({});
                    map2.range = [
                        offset,
                        offset + 1,
                        offset + 1
                    ];
                    currentDoc.internalDocument.contents = map2;
                    currentDoc.internalDocument = currentDoc.internalDocument;
                    node = map2;
                } else {
                    node = currentDoc.findClosestNode(offset, textBuffer);
                    foundByClosest = true;
                }
            }
            const originalNode = node;
            if (node) {
                if (lineContent.length === 0) {
                    node = currentDoc.internalDocument.contents;
                } else {
                    const parent = currentDoc.getParent(node);
                    if (parent) {
                        if (isScalar(node)) {
                            if (node.value) {
                                if (isPair(parent)) {
                                    if (parent.value === node) {
                                        if (lineContent.trim().length > 0 && lineContent.indexOf(":") < 0) {
                                            const map2 = this.createTempObjNode(currentWord, node, currentDoc);
                                            const parentParent = currentDoc.getParent(parent);
                                            if (isSeq(currentDoc.internalDocument.contents)) {
                                                const index = indexOf(currentDoc.internalDocument.contents, parent);
                                                if (typeof index === "number") {
                                                    currentDoc.internalDocument.set(index, map2);
                                                    currentDoc.internalDocument = currentDoc.internalDocument;
                                                }
                                            } else if (parentParent && (isMap(parentParent) || isSeq(parentParent))) {
                                                parentParent.set(parent.key, map2);
                                                currentDoc.internalDocument = currentDoc.internalDocument;
                                            } else {
                                                currentDoc.internalDocument.set(parent.key, map2);
                                                currentDoc.internalDocument = currentDoc.internalDocument;
                                            }
                                            currentProperty = map2.items[0];
                                            node = map2;
                                        } else if (lineContent.trim().length === 0) {
                                            const parentParent = currentDoc.getParent(parent);
                                            if (parentParent) {
                                                node = parentParent;
                                            }
                                        }
                                    } else if (parent.key === node) {
                                        const parentParent = currentDoc.getParent(parent);
                                        currentProperty = parent;
                                        if (parentParent) {
                                            node = parentParent;
                                        }
                                    }
                                } else if (isSeq(parent)) {
                                    if (lineContent.trim().length > 0) {
                                        const map2 = this.createTempObjNode(currentWord, node, currentDoc);
                                        parent.delete(node);
                                        parent.add(map2);
                                        currentDoc.internalDocument = currentDoc.internalDocument;
                                        node = map2;
                                    } else {
                                        node = parent;
                                    }
                                }
                            } else if (node.value === null) {
                                if (isPair(parent)) {
                                    if (parent.key === node) {
                                        node = parent;
                                    } else {
                                        if (isNode(parent.key) && parent.key.range) {
                                            const parentParent = currentDoc.getParent(parent);
                                            if (foundByClosest && parentParent && isMap(parentParent) && isMapContainsEmptyPair(parentParent)) {
                                                node = parentParent;
                                            } else {
                                                const parentPosition = document.positionAt(parent.key.range[0]);
                                                if (position.character > parentPosition.character && position.line !== parentPosition.line) {
                                                    const map2 = this.createTempObjNode(currentWord, node, currentDoc);
                                                    if (parentParent && (isMap(parentParent) || isSeq(parentParent))) {
                                                        parentParent.set(parent.key, map2);
                                                        currentDoc.internalDocument = currentDoc.internalDocument;
                                                    } else {
                                                        currentDoc.internalDocument.set(parent.key, map2);
                                                        currentDoc.internalDocument = currentDoc.internalDocument;
                                                    }
                                                    currentProperty = map2.items[0];
                                                    node = map2;
                                                } else if (parentPosition.character === position.character) {
                                                    if (parentParent) {
                                                        node = parentParent;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else if (isSeq(parent)) {
                                    if (lineContent.charAt(position.character - 1) !== "-") {
                                        const map2 = this.createTempObjNode(currentWord, node, currentDoc);
                                        parent.delete(node);
                                        parent.add(map2);
                                        currentDoc.internalDocument = currentDoc.internalDocument;
                                        node = map2;
                                    } else if (lineContent.charAt(position.character - 1) === "-") {
                                        const map2 = this.createTempObjNode("", node, currentDoc);
                                        parent.delete(node);
                                        parent.add(map2);
                                        currentDoc.internalDocument = currentDoc.internalDocument;
                                        node = map2;
                                    } else {
                                        node = parent;
                                    }
                                }
                            }
                        } else if (isMap(node)) {
                            if (!foundByClosest && lineContent.trim().length === 0 && isSeq(parent)) {
                                const nextLine = textBuffer.getLineContent(position.line + 1);
                                if (textBuffer.getLineCount() === position.line + 1 || nextLine.trim().length === 0) {
                                    node = parent;
                                }
                            }
                        }
                    } else if (isScalar(node)) {
                        const map2 = this.createTempObjNode(currentWord, node, currentDoc);
                        currentDoc.internalDocument.contents = map2;
                        currentDoc.internalDocument = currentDoc.internalDocument;
                        currentProperty = map2.items[0];
                        node = map2;
                    } else if (isMap(node)) {
                        for (const pair of node.items){
                            if (isNode(pair.value) && pair.value.range && pair.value.range[0] === offset + 1) {
                                node = pair.value;
                            }
                        }
                    } else if (isSeq(node)) {
                        if (lineContent.charAt(position.character - 1) !== "-") {
                            const map2 = this.createTempObjNode(currentWord, node, currentDoc);
                            map2.items = [];
                            currentDoc.internalDocument = currentDoc.internalDocument;
                            for (const pair of node.items){
                                if (isMap(pair)) {
                                    pair.items.forEach((value1)=>{
                                        map2.items.push(value1);
                                    });
                                }
                            }
                            node = map2;
                        }
                    }
                }
            }
            if (node && isMap(node)) {
                const properties = node.items;
                for (const p of properties){
                    if (!currentProperty || currentProperty !== p) {
                        if (isScalar(p.key)) {
                            proposed[p.key.value + ""] = CompletionItem.create(existingProposeItem);
                        }
                    }
                }
                this.addPropertyCompletions(schema4, currentDoc, node, originalNode, "", collector, textBuffer, overwriteRange, doComplete);
                if (!schema4 && currentWord.length > 0 && text.charAt(offset - currentWord.length - 1) !== '"') {
                    collector.add({
                        kind: lib_CompletionItemKind.Property,
                        label: currentWord,
                        insertText: this.getInsertTextForProperty(currentWord, null, ""),
                        insertTextFormat: lib_InsertTextFormat.Snippet
                    });
                }
            }
            const types = {};
            this.getValueCompletions(schema4, currentDoc, node, offset, document, collector, types, doComplete);
        } catch (err) {
            this.telemetry.sendError("yaml.completion.error", {
                error: convertErrorToTelemetryMsg(err)
            });
        }
        this.finalizeParentCompletion(result);
        const uniqueItems = result.items.filter((arr, index, self2)=>index === self2.findIndex((item)=>item.label === arr.label && item.insertText === arr.insertText && item.kind === arr.kind));
        if ((uniqueItems == null ? void 0 : uniqueItems.length) > 0) {
            result.items = uniqueItems;
        }
        return result;
    }
    updateCompletionText(completionItem, text) {
        completionItem.insertText = text;
        if (completionItem.textEdit) {
            completionItem.textEdit.newText = text;
        }
    }
    mergeSimpleInsertTexts(label, existingText, addingText, oneOfSchema) {
        const containsNewLineAfterColon = (value1)=>{
            return value1.includes("\n");
        };
        const startWithNewLine = (value1)=>{
            return value1.startsWith("\n");
        };
        const isNullObject = (value1)=>{
            const index = value1.indexOf("\n");
            return index > 0 && value1.substring(index, value1.length).trim().length === 0;
        };
        if (containsNewLineAfterColon(existingText) || containsNewLineAfterColon(addingText)) {
            if (oneOfSchema && isNullObject(existingText) && !isNullObject(addingText) && !startWithNewLine(addingText)) {
                return addingText;
            }
            return void 0;
        }
        const existingValues = this.getValuesFromInsertText(existingText);
        const addingValues = this.getValuesFromInsertText(addingText);
        const newValues = Array.prototype.concat(existingValues, addingValues);
        if (!newValues.length) {
            return void 0;
        } else if (newValues.length === 1) {
            return `${label}: \${1:${newValues[0]}}`;
        } else {
            return `${label}: \${1|${newValues.join(",")}|}`;
        }
    }
    getValuesFromInsertText(insertText) {
        const value1 = insertText.substring(insertText.indexOf(":") + 1).trim();
        if (!value1) {
            return [];
        }
        const valueMath = value1.match(/^\${1[|:]([^|]*)+\|?}$/);
        if (valueMath) {
            return valueMath[1].split(",");
        }
        return [
            value1
        ];
    }
    finalizeParentCompletion(result) {
        const reindexText = (insertTexts)=>{
            let max$index = 0;
            return insertTexts.map((text)=>{
                const match = text.match(/\$([0-9]+)|\${[0-9]+:/g);
                if (!match) {
                    return text;
                }
                const max$indexLocal = match.map((m)=>+m.replace(/\${([0-9]+)[:|]/g, "$1").replace("$", "")).reduce((p, n)=>n > p ? n : p, 0);
                const reindexedStr = text.replace(/\$([0-9]+)/g, (s, args)=>"$" + (+args + max$index)).replace(/\${([0-9]+)[:|]/g, (s, args)=>"${" + (+args + max$index) + ":");
                max$index += max$indexLocal;
                return reindexedStr;
            });
        };
        result.items.forEach((completionItem)=>{
            if (isParentCompletionItem(completionItem)) {
                const indent = completionItem.parent.indent || "";
                const reindexedTexts = reindexText(completionItem.parent.insertTexts);
                let insertText = reindexedTexts.join(`
${indent}`);
                if (insertText.endsWith("$1")) {
                    insertText = insertText.substring(0, insertText.length - 2);
                }
                completionItem.insertText = this.arrayPrefixIndentation + insertText;
                if (completionItem.textEdit) {
                    completionItem.textEdit.newText = completionItem.insertText;
                }
                const mdText = insertText.replace(/\${[0-9]+[:|](.*)}/g, (s, arg)=>arg).replace(/\$([0-9]+)/g, "");
                const originalDocumentation = completionItem.documentation ? [
                    completionItem.documentation,
                    "",
                    "----",
                    ""
                ] : [];
                completionItem.documentation = {
                    kind: MarkupKind.Markdown,
                    value: [
                        ...originalDocumentation,
                        "```yaml",
                        indent + mdText,
                        "```"
                    ].join("\n")
                };
                delete completionItem.parent;
            }
        });
    }
    createTempObjNode(currentWord, node, currentDoc) {
        const obj = {};
        obj[currentWord] = null;
        const map2 = currentDoc.internalDocument.createNode(obj);
        map2.range = node.range;
        map2.items[0].key.range = node.range;
        map2.items[0].value.range = node.range;
        return map2;
    }
    addPropertyCompletions(schema4, doc, node, originalNode, separatorAfter, collector, textBuffer, overwriteRange, doComplete) {
        var _a, _b, _c;
        const matchingSchemas = doc.getMatchingSchemas(schema4.schema, -1, null, doComplete);
        const existingKey = textBuffer.getText(overwriteRange);
        const lineContent = textBuffer.getLineContent(overwriteRange.start.line);
        const hasOnlyWhitespace = lineContent.trim().length === 0;
        const hasColon = lineContent.indexOf(":") !== -1;
        const isInArray = lineContent.trimLeft().indexOf("-") === 0;
        const nodeParent = doc.getParent(node);
        const matchOriginal = matchingSchemas.find((it)=>it.node.internalNode === originalNode && it.schema.properties);
        const oneOfSchema = matchingSchemas.filter((schema5)=>schema5.schema.oneOf).map((oneOfSchema2)=>oneOfSchema2.schema.oneOf)[0];
        let didOneOfSchemaMatches = false;
        if ((oneOfSchema == null ? void 0 : oneOfSchema.length) < matchingSchemas.length) {
            oneOfSchema == null ? void 0 : oneOfSchema.forEach((property, index)=>{
                var _a2, _b2;
                if (!((_a2 = matchingSchemas[index]) == null ? void 0 : _a2.schema.oneOf) && ((_b2 = matchingSchemas[index]) == null ? void 0 : _b2.schema.properties) === property.properties) {
                    didOneOfSchemaMatches = true;
                }
            });
        }
        for (const schema5 of matchingSchemas){
            if ((schema5.node.internalNode === node && !matchOriginal || schema5.node.internalNode === originalNode && !hasColon || ((_a = schema5.node.parent) == null ? void 0 : _a.internalNode) === originalNode && !hasColon) && !schema5.inverted) {
                this.collectDefaultSnippets(schema5.schema, separatorAfter, collector, {
                    newLineFirst: false,
                    indentFirstObject: false,
                    shouldIndentWithTab: isInArray
                });
                const schemaProperties = schema5.schema.properties;
                if (schemaProperties) {
                    const maxProperties = schema5.schema.maxProperties;
                    if (maxProperties === void 0 || node.items === void 0 || node.items.length < maxProperties || node.items.length === maxProperties && !hasOnlyWhitespace) {
                        for(const key in schemaProperties){
                            if (Object.prototype.hasOwnProperty.call(schemaProperties, key)) {
                                const propertySchema = schemaProperties[key];
                                if (typeof propertySchema === "object" && !propertySchema.deprecationMessage && !propertySchema["doNotSuggest"]) {
                                    let identCompensation = "";
                                    if (nodeParent && isSeq(nodeParent) && node.items.length <= 1 && !hasOnlyWhitespace) {
                                        const sourceText = textBuffer.getText();
                                        const indexOfSlash = sourceText.lastIndexOf("-", node.range[0] - 1);
                                        if (indexOfSlash >= 0) {
                                            const overwriteChars = overwriteRange.end.character - overwriteRange.start.character;
                                            identCompensation = " " + sourceText.slice(indexOfSlash + 1, node.range[1] - overwriteChars);
                                        }
                                    }
                                    identCompensation += this.arrayPrefixIndentation;
                                    let pair;
                                    if (propertySchema.type === "array" && (pair = node.items.find((it)=>isScalar(it.key) && it.key.range && it.key.value === key && isScalar(it.value) && !it.value.value && textBuffer.getPosition(it.key.range[2]).line === overwriteRange.end.line - 1)) && pair) {
                                        if (Array.isArray(propertySchema.items)) {
                                            this.addSchemaValueCompletions(propertySchema.items[0], separatorAfter, collector, {}, "property");
                                        } else if (typeof propertySchema.items === "object" && propertySchema.items.type === "object") {
                                            this.addArrayItemValueCompletion(propertySchema.items, separatorAfter, collector);
                                        }
                                    }
                                    let insertText = key;
                                    if (!key.startsWith(existingKey) || !hasColon) {
                                        insertText = this.getInsertTextForProperty(key, propertySchema, separatorAfter, identCompensation + this.indentation);
                                    }
                                    const isNodeNull = isScalar(originalNode) && originalNode.value === null || isMap(originalNode) && originalNode.items.length === 0;
                                    const existsParentCompletion = ((_b = schema5.schema.required) == null ? void 0 : _b.length) > 0;
                                    if (!this.parentSkeletonSelectedFirst || !isNodeNull || !existsParentCompletion) {
                                        collector.add({
                                            kind: lib_CompletionItemKind.Property,
                                            label: key,
                                            insertText,
                                            insertTextFormat: lib_InsertTextFormat.Snippet,
                                            documentation: this.fromMarkup(propertySchema.markdownDescription) || propertySchema.description || ""
                                        }, didOneOfSchemaMatches);
                                    }
                                    if ((_c = schema5.schema.required) == null ? void 0 : _c.includes(key)) {
                                        collector.add({
                                            label: key,
                                            insertText: this.getInsertTextForProperty(key, propertySchema, separatorAfter, identCompensation + this.indentation),
                                            insertTextFormat: lib_InsertTextFormat.Snippet,
                                            documentation: this.fromMarkup(propertySchema.markdownDescription) || propertySchema.description || "",
                                            parent: {
                                                schema: schema5.schema,
                                                indent: identCompensation
                                            }
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
                if (nodeParent && isSeq(nodeParent) && isPrimitiveType(schema5.schema)) {
                    this.addSchemaValueCompletions(schema5.schema, separatorAfter, collector, {}, "property", Array.isArray(nodeParent.items));
                }
                if (schema5.schema.propertyNames && schema5.schema.additionalProperties && schema5.schema.type === "object") {
                    const propertyNameSchema = asSchema2(schema5.schema.propertyNames);
                    const label = propertyNameSchema.title || "property";
                    collector.add({
                        kind: lib_CompletionItemKind.Property,
                        label,
                        insertText: `\${1:${label}}: `,
                        insertTextFormat: lib_InsertTextFormat.Snippet,
                        documentation: this.fromMarkup(propertyNameSchema.markdownDescription) || propertyNameSchema.description || ""
                    });
                }
            }
            if (nodeParent && schema5.node.internalNode === nodeParent && schema5.schema.defaultSnippets) {
                if (node.items.length === 1) {
                    this.collectDefaultSnippets(schema5.schema, separatorAfter, collector, {
                        newLineFirst: false,
                        indentFirstObject: false,
                        shouldIndentWithTab: true
                    }, 1);
                } else {
                    this.collectDefaultSnippets(schema5.schema, separatorAfter, collector, {
                        newLineFirst: false,
                        indentFirstObject: true,
                        shouldIndentWithTab: false
                    }, 1);
                }
            }
        }
    }
    getValueCompletions(schema4, doc, node, offset, document, collector, types, doComplete) {
        let parentKey = null;
        if (node && isScalar(node)) {
            node = doc.getParent(node);
        }
        if (!node) {
            this.addSchemaValueCompletions(schema4.schema, "", collector, types, "value");
            return;
        }
        if (isPair(node)) {
            const valueNode = node.value;
            if (valueNode && valueNode.range && offset > valueNode.range[0] + valueNode.range[2]) {
                return;
            }
            parentKey = isScalar(node.key) ? node.key.value + "" : null;
            node = doc.getParent(node);
        }
        if (node && (parentKey !== null || isSeq(node))) {
            const separatorAfter = "";
            const matchingSchemas = doc.getMatchingSchemas(schema4.schema, -1, null, doComplete);
            for (const s of matchingSchemas){
                if (s.node.internalNode === node && !s.inverted && s.schema) {
                    if (s.schema.items) {
                        this.collectDefaultSnippets(s.schema, separatorAfter, collector, {
                            newLineFirst: false,
                            indentFirstObject: false,
                            shouldIndentWithTab: false
                        });
                        if (isSeq(node) && node.items) {
                            if (Array.isArray(s.schema.items)) {
                                const index = this.findItemAtOffset(node, document, offset);
                                if (index < s.schema.items.length) {
                                    this.addSchemaValueCompletions(s.schema.items[index], separatorAfter, collector, types, "value");
                                }
                            } else if (typeof s.schema.items === "object" && (s.schema.items.type === "object" || isAnyOfAllOfOneOfType(s.schema.items))) {
                                this.addSchemaValueCompletions(s.schema.items, separatorAfter, collector, types, "value", true);
                            } else {
                                this.addSchemaValueCompletions(s.schema.items, separatorAfter, collector, types, "value");
                            }
                        }
                    }
                    if (s.schema.properties) {
                        const propertySchema = s.schema.properties[parentKey];
                        if (propertySchema) {
                            this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types, "value");
                        }
                    } else if (s.schema.additionalProperties) {
                        this.addSchemaValueCompletions(s.schema.additionalProperties, separatorAfter, collector, types, "value");
                    }
                }
            }
            if (types["boolean"]) {
                this.addBooleanValueCompletion(true, separatorAfter, collector);
                this.addBooleanValueCompletion(false, separatorAfter, collector);
            }
            if (types["null"]) {
                this.addNullValueCompletion(separatorAfter, collector);
            }
        }
    }
    addArrayItemValueCompletion(schema4, separatorAfter, collector, index) {
        const schemaType = getSchemaTypeName(schema4);
        const insertText = `- ${this.getInsertTextForObject(schema4, separatorAfter).insertText.trimLeft()}`;
        const schemaTypeTitle = schemaType ? " type `" + schemaType + "`" : "";
        const schemaDescription = schema4.description ? " (" + schema4.description + ")" : "";
        const documentation = this.getDocumentationWithMarkdownText(`Create an item of an array${schemaTypeTitle}${schemaDescription}`, insertText);
        collector.add({
            kind: this.getSuggestionKind(schema4.type),
            label: "- (array item) " + (schemaType || index),
            documentation,
            insertText,
            insertTextFormat: lib_InsertTextFormat.Snippet
        });
    }
    getInsertTextForProperty(key, propertySchema, separatorAfter, indent = this.indentation) {
        const propertyText = this.getInsertTextForValue(key, "", "string");
        const resultText = propertyText + ":";
        let value1;
        let nValueProposals = 0;
        if (propertySchema) {
            let type = Array.isArray(propertySchema.type) ? propertySchema.type[0] : propertySchema.type;
            if (!type) {
                if (propertySchema.properties) {
                    type = "object";
                } else if (propertySchema.items) {
                    type = "array";
                } else if (propertySchema.anyOf) {
                    type = "anyOf";
                }
            }
            if (Array.isArray(propertySchema.defaultSnippets)) {
                if (propertySchema.defaultSnippets.length === 1) {
                    const body = propertySchema.defaultSnippets[0].body;
                    if (isDefined2(body)) {
                        value1 = this.getInsertTextForSnippetValue(body, "", {
                            newLineFirst: true,
                            indentFirstObject: false,
                            shouldIndentWithTab: false
                        }, 1);
                        if (!value1.startsWith(" ") && !value1.startsWith("\n")) {
                            value1 = " " + value1;
                        }
                    }
                }
                nValueProposals += propertySchema.defaultSnippets.length;
            }
            if (propertySchema.enum) {
                if (!value1 && propertySchema.enum.length === 1) {
                    value1 = " " + this.getInsertTextForGuessedValue(propertySchema.enum[0], "", type);
                }
                nValueProposals += propertySchema.enum.length;
            }
            if (propertySchema.const) {
                if (!value1) {
                    value1 = this.getInsertTextForGuessedValue(propertySchema.const, "", type);
                    value1 = evaluateTab1Symbol(value1);
                    value1 = " " + value1;
                }
                nValueProposals++;
            }
            if (isDefined2(propertySchema.default)) {
                if (!value1) {
                    value1 = " " + this.getInsertTextForGuessedValue(propertySchema.default, "", type);
                }
                nValueProposals++;
            }
            if (Array.isArray(propertySchema.examples) && propertySchema.examples.length) {
                if (!value1) {
                    value1 = " " + this.getInsertTextForGuessedValue(propertySchema.examples[0], "", type);
                }
                nValueProposals += propertySchema.examples.length;
            }
            if (propertySchema.properties) {
                return `${resultText}
${this.getInsertTextForObject(propertySchema, separatorAfter, indent).insertText}`;
            } else if (propertySchema.items) {
                return `${resultText}
${indent}- ${this.getInsertTextForArray(propertySchema.items, separatorAfter, 1, indent).insertText}`;
            }
            if (nValueProposals === 0) {
                switch(type){
                    case "boolean":
                        value1 = " $1";
                        break;
                    case "string":
                        value1 = " $1";
                        break;
                    case "object":
                        value1 = `
${indent}`;
                        break;
                    case "array":
                        value1 = `
${indent}- `;
                        break;
                    case "number":
                    case "integer":
                        value1 = " ${1:0}";
                        break;
                    case "null":
                        value1 = " ${1:null}";
                        break;
                    case "anyOf":
                        value1 = " $1";
                        break;
                    default:
                        return propertyText;
                }
            }
        }
        if (!value1 || nValueProposals > 1) {
            value1 = " $1";
        }
        return resultText + value1 + separatorAfter;
    }
    getInsertTextForObject(schema4, separatorAfter, indent = this.indentation, insertIndex = 1) {
        let insertText = "";
        if (!schema4.properties) {
            insertText = `${indent}$${insertIndex++}
`;
            return {
                insertText,
                insertIndex
            };
        }
        Object.keys(schema4.properties).forEach((key)=>{
            const propertySchema = schema4.properties[key];
            let type = Array.isArray(propertySchema.type) ? propertySchema.type[0] : propertySchema.type;
            if (!type) {
                if (propertySchema.anyOf) {
                    type = "anyOf";
                }
                if (propertySchema.properties) {
                    type = "object";
                }
                if (propertySchema.items) {
                    type = "array";
                }
            }
            if (schema4.required && schema4.required.indexOf(key) > -1) {
                switch(type){
                    case "boolean":
                    case "string":
                    case "number":
                    case "integer":
                    case "anyOf":
                        {
                            let value1 = propertySchema.default || propertySchema.const;
                            if (value1) {
                                if (type === "string") {
                                    value1 = convertToStringValue(value1);
                                }
                                insertText += `${indent}${key}: \${${insertIndex++}:${value1}}
`;
                            } else {
                                insertText += `${indent}${key}: $${insertIndex++}
`;
                            }
                            break;
                        }
                    case "array":
                        {
                            const arrayInsertResult = this.getInsertTextForArray(propertySchema.items, separatorAfter, insertIndex++, indent);
                            const arrayInsertLines = arrayInsertResult.insertText.split("\n");
                            let arrayTemplate = arrayInsertResult.insertText;
                            if (arrayInsertLines.length > 1) {
                                for(let index = 1; index < arrayInsertLines.length; index++){
                                    const element = arrayInsertLines[index];
                                    arrayInsertLines[index] = `  ${element}`;
                                }
                                arrayTemplate = arrayInsertLines.join("\n");
                            }
                            insertIndex = arrayInsertResult.insertIndex;
                            insertText += `${indent}${key}:
${indent}${this.indentation}- ${arrayTemplate}
`;
                        }
                        break;
                    case "object":
                        {
                            const objectInsertResult = this.getInsertTextForObject(propertySchema, separatorAfter, `${indent}${this.indentation}`, insertIndex++);
                            insertIndex = objectInsertResult.insertIndex;
                            insertText += `${indent}${key}:
${objectInsertResult.insertText}
`;
                        }
                        break;
                }
            } else if (!this.disableDefaultProperties && propertySchema.default !== void 0) {
                switch(type){
                    case "boolean":
                    case "number":
                    case "integer":
                        insertText += `${indent}${key === "null" ? this.getInsertTextForValue(key, "", "string") : key}: \${${insertIndex++}:${propertySchema.default}}
`;
                        break;
                    case "string":
                        insertText += `${indent}${key}: \${${insertIndex++}:${convertToStringValue(propertySchema.default)}}
`;
                        break;
                    case "array":
                    case "object":
                        break;
                }
            }
        });
        if (insertText.trim().length === 0) {
            insertText = `${indent}$${insertIndex++}
`;
        }
        insertText = insertText.trimRight() + separatorAfter;
        return {
            insertText,
            insertIndex
        };
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getInsertTextForArray(schema4, separatorAfter, insertIndex = 1, indent = this.indentation) {
        let insertText = "";
        if (!schema4) {
            insertText = `$${insertIndex++}`;
            return {
                insertText,
                insertIndex
            };
        }
        let type = Array.isArray(schema4.type) ? schema4.type[0] : schema4.type;
        if (!type) {
            if (schema4.properties) {
                type = "object";
            }
            if (schema4.items) {
                type = "array";
            }
        }
        switch(schema4.type){
            case "boolean":
                insertText = `\${${insertIndex++}:false}`;
                break;
            case "number":
            case "integer":
                insertText = `\${${insertIndex++}:0}`;
                break;
            case "string":
                insertText = `\${${insertIndex++}:""}`;
                break;
            case "object":
                {
                    const objectInsertResult = this.getInsertTextForObject(schema4, separatorAfter, `${indent}  `, insertIndex++);
                    insertText = objectInsertResult.insertText.trimLeft();
                    insertIndex = objectInsertResult.insertIndex;
                }
                break;
        }
        return {
            insertText,
            insertIndex
        };
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getInsertTextForGuessedValue(value1, separatorAfter, type) {
        switch(typeof value1){
            case "object":
                if (value1 === null) {
                    return "${1:null}" + separatorAfter;
                }
                return this.getInsertTextForValue(value1, separatorAfter, type);
            case "string":
                {
                    let snippetValue = JSON.stringify(value1);
                    snippetValue = snippetValue.substr(1, snippetValue.length - 2);
                    snippetValue = this.getInsertTextForPlainText(snippetValue);
                    if (type === "string") {
                        snippetValue = convertToStringValue(snippetValue);
                    }
                    return "${1:" + snippetValue + "}" + separatorAfter;
                }
            case "number":
            case "boolean":
                return "${1:" + value1 + "}" + separatorAfter;
        }
        return this.getInsertTextForValue(value1, separatorAfter, type);
    }
    getInsertTextForPlainText(text) {
        return text.replace(/[\\$}]/g, "\\$&");
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getInsertTextForValue(value1, separatorAfter, type) {
        if (value1 === null) {
            return "null";
        }
        switch(typeof value1){
            case "object":
                {
                    const indent = this.indentation;
                    return this.getInsertTemplateForValue(value1, indent, {
                        index: 1
                    }, separatorAfter);
                }
            case "number":
            case "boolean":
                return this.getInsertTextForPlainText(value1 + separatorAfter);
        }
        type = Array.isArray(type) ? type[0] : type;
        if (type === "string") {
            value1 = convertToStringValue(value1);
        }
        return this.getInsertTextForPlainText(value1 + separatorAfter);
    }
    getInsertTemplateForValue(value1, indent, navOrder, separatorAfter) {
        if (Array.isArray(value1)) {
            let insertText = "\n";
            for (const arrValue of value1){
                insertText += `${indent}- \${${navOrder.index++}:${arrValue}}
`;
            }
            return insertText;
        } else if (typeof value1 === "object") {
            let insertText = "\n";
            for(const key in value1){
                if (Object.prototype.hasOwnProperty.call(value1, key)) {
                    const element = value1[key];
                    insertText += `${indent}\${${navOrder.index++}:${key}}:`;
                    let valueTemplate;
                    if (typeof element === "object") {
                        valueTemplate = `${this.getInsertTemplateForValue(element, indent + this.indentation, navOrder, separatorAfter)}`;
                    } else {
                        valueTemplate = ` \${${navOrder.index++}:${this.getInsertTextForPlainText(element + separatorAfter)}}
`;
                    }
                    insertText += `${valueTemplate}`;
                }
            }
            return insertText;
        }
        return this.getInsertTextForPlainText(value1 + separatorAfter);
    }
    addSchemaValueCompletions(schema4, separatorAfter, collector, types, completionType, isArray) {
        if (typeof schema4 === "object") {
            this.addEnumValueCompletions(schema4, separatorAfter, collector, isArray);
            this.addDefaultValueCompletions(schema4, separatorAfter, collector);
            this.collectTypes(schema4, types);
            if (isArray && completionType === "value" && !isAnyOfAllOfOneOfType(schema4)) {
                this.addArrayItemValueCompletion(schema4, separatorAfter, collector);
            }
            if (Array.isArray(schema4.allOf)) {
                schema4.allOf.forEach((s)=>{
                    return this.addSchemaValueCompletions(s, separatorAfter, collector, types, completionType, isArray);
                });
            }
            if (Array.isArray(schema4.anyOf)) {
                schema4.anyOf.forEach((s)=>{
                    return this.addSchemaValueCompletions(s, separatorAfter, collector, types, completionType, isArray);
                });
            }
            if (Array.isArray(schema4.oneOf)) {
                schema4.oneOf.forEach((s)=>{
                    return this.addSchemaValueCompletions(s, separatorAfter, collector, types, completionType, isArray);
                });
            }
        }
    }
    collectTypes(schema4, types) {
        if (Array.isArray(schema4.enum) || isDefined2(schema4.const)) {
            return;
        }
        const type = schema4.type;
        if (Array.isArray(type)) {
            type.forEach(function(t) {
                return types[t] = true;
            });
        } else if (type) {
            types[type] = true;
        }
    }
    addDefaultValueCompletions(schema4, separatorAfter, collector, arrayDepth = 0) {
        let hasProposals = false;
        if (isDefined2(schema4.default)) {
            let type = schema4.type;
            let value1 = schema4.default;
            for(let i = arrayDepth; i > 0; i--){
                value1 = [
                    value1
                ];
                type = "array";
            }
            let label;
            if (typeof value1 == "object") {
                label = "Default value";
            } else {
                label = value1.toString().replace(doubleQuotesEscapeRegExp, '"');
            }
            collector.add({
                kind: this.getSuggestionKind(type),
                label,
                insertText: this.getInsertTextForValue(value1, separatorAfter, type),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                detail: localize9("json.suggest.default", "Default value")
            });
            hasProposals = true;
        }
        if (Array.isArray(schema4.examples)) {
            schema4.examples.forEach((example)=>{
                let type = schema4.type;
                let value1 = example;
                for(let i = arrayDepth; i > 0; i--){
                    value1 = [
                        value1
                    ];
                    type = "array";
                }
                collector.add({
                    kind: this.getSuggestionKind(type),
                    label: this.getLabelForValue(value1),
                    insertText: this.getInsertTextForValue(value1, separatorAfter, type),
                    insertTextFormat: lib_InsertTextFormat.Snippet
                });
                hasProposals = true;
            });
        }
        this.collectDefaultSnippets(schema4, separatorAfter, collector, {
            newLineFirst: true,
            indentFirstObject: true,
            shouldIndentWithTab: true
        });
        if (!hasProposals && typeof schema4.items === "object" && !Array.isArray(schema4.items)) {
            this.addDefaultValueCompletions(schema4.items, separatorAfter, collector, arrayDepth + 1);
        }
    }
    addEnumValueCompletions(schema4, separatorAfter, collector, isArray) {
        if (isDefined2(schema4.const) && !isArray) {
            collector.add({
                kind: this.getSuggestionKind(schema4.type),
                label: this.getLabelForValue(schema4.const),
                insertText: this.getInsertTextForValue(schema4.const, separatorAfter, schema4.type),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                documentation: this.fromMarkup(schema4.markdownDescription) || schema4.description
            });
        }
        if (Array.isArray(schema4.enum)) {
            for(let i = 0, length = schema4.enum.length; i < length; i++){
                const enm = schema4.enum[i];
                let documentation = this.fromMarkup(schema4.markdownDescription) || schema4.description;
                if (schema4.markdownEnumDescriptions && i < schema4.markdownEnumDescriptions.length && this.doesSupportMarkdown()) {
                    documentation = this.fromMarkup(schema4.markdownEnumDescriptions[i]);
                } else if (schema4.enumDescriptions && i < schema4.enumDescriptions.length) {
                    documentation = schema4.enumDescriptions[i];
                }
                collector.add({
                    kind: this.getSuggestionKind(schema4.type),
                    label: this.getLabelForValue(enm),
                    insertText: this.getInsertTextForValue(enm, separatorAfter, schema4.type),
                    insertTextFormat: lib_InsertTextFormat.Snippet,
                    documentation
                });
            }
        }
    }
    getLabelForValue(value1) {
        if (value1 === null) {
            return "null";
        }
        if (Array.isArray(value1)) {
            return JSON.stringify(value1);
        }
        return "" + value1;
    }
    collectDefaultSnippets(schema4, separatorAfter, collector, settings, arrayDepth = 0) {
        if (Array.isArray(schema4.defaultSnippets)) {
            for (const s of schema4.defaultSnippets){
                let type = schema4.type;
                let value1 = s.body;
                let label = s.label;
                let insertText;
                let filterText;
                if (isDefined2(value1)) {
                    const type2 = s.type || schema4.type;
                    if (arrayDepth === 0 && type2 === "array") {
                        const fixedObj = {};
                        Object.keys(value1).forEach((val, index)=>{
                            if (index === 0 && !val.startsWith("-")) {
                                fixedObj[`- ${val}`] = value1[val];
                            } else {
                                fixedObj[`  ${val}`] = value1[val];
                            }
                        });
                        value1 = fixedObj;
                    }
                    insertText = this.getInsertTextForSnippetValue(value1, separatorAfter, settings);
                    label = label || this.getLabelForSnippetValue(value1);
                } else if (typeof s.bodyText === "string") {
                    let prefix = "", suffix = "", indent = "";
                    for(let i = arrayDepth; i > 0; i--){
                        prefix = prefix + indent + "[\n";
                        suffix = suffix + "\n" + indent + "]";
                        indent += this.indentation;
                        type = "array";
                    }
                    insertText = prefix + indent + s.bodyText.split("\n").join("\n" + indent) + suffix + separatorAfter;
                    label = label || insertText;
                    filterText = insertText.replace(/[\n]/g, "");
                }
                collector.add({
                    kind: s.suggestionKind || this.getSuggestionKind(type),
                    label,
                    sortText: s.sortText || s.label,
                    documentation: this.fromMarkup(s.markdownDescription) || s.description,
                    insertText,
                    insertTextFormat: lib_InsertTextFormat.Snippet,
                    filterText
                });
            }
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getInsertTextForSnippetValue(value1, separatorAfter, settings, depth) {
        const replacer = (value2)=>{
            if (typeof value2 === "string") {
                if (value2[0] === "^") {
                    return value2.substr(1);
                }
                if (value2 === "true" || value2 === "false") {
                    return `"${value2}"`;
                }
            }
            return value2;
        };
        return stringifyObject2(value1, "", replacer, {
            ...settings,
            indentation: this.indentation
        }, depth) + separatorAfter;
    }
    addBooleanValueCompletion(value1, separatorAfter, collector) {
        collector.add({
            kind: this.getSuggestionKind("boolean"),
            label: value1 ? "true" : "false",
            insertText: this.getInsertTextForValue(value1, separatorAfter, "boolean"),
            insertTextFormat: lib_InsertTextFormat.Snippet,
            documentation: ""
        });
    }
    addNullValueCompletion(separatorAfter, collector) {
        collector.add({
            kind: this.getSuggestionKind("null"),
            label: "null",
            insertText: "null" + separatorAfter,
            insertTextFormat: lib_InsertTextFormat.Snippet,
            documentation: ""
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getLabelForSnippetValue(value1) {
        const label = JSON.stringify(value1);
        return label.replace(/\$\{\d+:([^}]+)\}|\$\d+/g, "$1");
    }
    getCustomTagValueCompletions(collector) {
        const validCustomTags = filterInvalidCustomTags(this.customTags);
        validCustomTags.forEach((validTag)=>{
            const label = validTag.split(" ")[0];
            this.addCustomTagValueCompletion(collector, " ", label);
        });
    }
    addCustomTagValueCompletion(collector, separatorAfter, label) {
        collector.add({
            kind: this.getSuggestionKind("string"),
            label,
            insertText: label + separatorAfter,
            insertTextFormat: lib_InsertTextFormat.Snippet,
            documentation: ""
        });
    }
    getDocumentationWithMarkdownText(documentation, insertText) {
        let res = documentation;
        if (this.doesSupportMarkdown()) {
            insertText = insertText.replace(/\${[0-9]+[:|](.*)}/g, (s, arg)=>{
                return arg;
            }).replace(/\$([0-9]+)/g, "");
            res = this.fromMarkup(`${documentation}
 \`\`\`
${insertText}
\`\`\``);
        }
        return res;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getSuggestionKind(type) {
        if (Array.isArray(type)) {
            const array = type;
            type = array.length > 0 ? array[0] : null;
        }
        if (!type) {
            return lib_CompletionItemKind.Value;
        }
        switch(type){
            case "string":
                return lib_CompletionItemKind.Value;
            case "object":
                return lib_CompletionItemKind.Module;
            case "property":
                return lib_CompletionItemKind.Property;
            default:
                return lib_CompletionItemKind.Value;
        }
    }
    getCurrentWord(doc, offset) {
        let i = offset - 1;
        const text = doc.getText();
        while(i >= 0 && ' 	\n\r\v":{[,]}'.indexOf(text.charAt(i)) === -1){
            i--;
        }
        return text.substring(i + 1, offset);
    }
    fromMarkup(markupString) {
        if (markupString && this.doesSupportMarkdown()) {
            return {
                kind: MarkupKind.Markdown,
                value: markupString
            };
        }
        return void 0;
    }
    doesSupportMarkdown() {
        if (this.supportsMarkdown === void 0) {
            const completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;
            this.supportsMarkdown = completion && completion.completionItem && Array.isArray(completion.completionItem.documentationFormat) && completion.completionItem.documentationFormat.indexOf(MarkupKind.Markdown) !== -1;
        }
        return this.supportsMarkdown;
    }
    findItemAtOffset(seqNode, doc, offset) {
        for(let i = seqNode.items.length - 1; i >= 0; i--){
            const node = seqNode.items[i];
            if (isNode(node)) {
                if (node.range) {
                    if (offset > node.range[1]) {
                        return i;
                    } else if (offset >= node.range[0]) {
                        return i;
                    }
                }
            }
        }
        return 0;
    }
    constructor(schemaService, clientCapabilities = {}, yamlDocument, telemetry){
        this.schemaService = schemaService;
        this.clientCapabilities = clientCapabilities;
        this.yamlDocument = yamlDocument;
        this.telemetry = telemetry;
        this.completionEnabled = true;
        this.arrayPrefixIndentation = "";
    }
};
var isNumberExp = /^\d+$/;
function convertToStringValue(param) {
    let value1;
    if (typeof param === "string") {
        value1 = param;
    } else {
        value1 = "" + param;
    }
    if (value1.length === 0) {
        return value1;
    }
    if (value1 === "true" || value1 === "false" || value1 === "null" || isNumberExp.test(value1)) {
        return `"${value1}"`;
    }
    if (value1.indexOf('"') !== -1) {
        value1 = value1.replace(doubleQuotesEscapeRegExp, '"');
    }
    let doQuote = !isNaN(parseInt(value1)) || value1.charAt(0) === "@";
    if (!doQuote) {
        let idx = value1.indexOf(":", 0);
        for(; idx > 0 && idx < value1.length; idx = value1.indexOf(":", idx + 1)){
            if (idx === value1.length - 1) {
                doQuote = true;
                break;
            }
            const nextChar = value1.charAt(idx + 1);
            if (nextChar === "	" || nextChar === " ") {
                doQuote = true;
                break;
            }
        }
    }
    if (doQuote) {
        value1 = `"${value1}"`;
    }
    return value1;
}
function evaluateTab1Symbol(value1) {
    return value1.replace(/\$\{1:(.*)\}/, "$1");
}
function isParentCompletionItem(item) {
    return "parent" in item;
}
// src/fillers/schemaSelectionHandlers.js
function JSONSchemaSelection() {}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlDefinition.js
var YamlDefinition = class {
    getDefinition(document, params) {
        try {
            const yamlDocument = yamlDocumentsCache.getYamlDocument(document);
            const offset = document.offsetAt(params.position);
            const currentDoc = matchOffsetToDocument(offset, yamlDocument);
            if (currentDoc) {
                const [node] = currentDoc.getNodeFromPosition(offset, new TextBuffer(document));
                if (node && isAlias(node)) {
                    const defNode = node.resolve(currentDoc.internalDocument);
                    if (defNode && defNode.range) {
                        const targetRange = Range.create(document.positionAt(defNode.range[0]), document.positionAt(defNode.range[2]));
                        const selectionRange = Range.create(document.positionAt(defNode.range[0]), document.positionAt(defNode.range[1]));
                        return [
                            LocationLink.create(document.uri, targetRange, selectionRange)
                        ];
                    }
                }
            }
        } catch (err) {
            this.telemetry.sendError("yaml.definition.error", {
                error: convertErrorToTelemetryMsg(err)
            });
        }
        return void 0;
    }
    constructor(telemetry){
        this.telemetry = telemetry;
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/yamlLanguageService.js
var SchemaPriority;
(function(SchemaPriority2) {
    SchemaPriority2[SchemaPriority2["SchemaStore"] = 1] = "SchemaStore";
    SchemaPriority2[SchemaPriority2["SchemaAssociation"] = 2] = "SchemaAssociation";
    SchemaPriority2[SchemaPriority2["Settings"] = 3] = "Settings";
})(SchemaPriority || (SchemaPriority = {}));
function getLanguageService(schemaRequestService, workspaceContext, connection, telemetry, yamlSettings, clientCapabilities) {
    const schemaService = new YAMLSchemaService(schemaRequestService, workspaceContext);
    const completer = new YamlCompletion(schemaService, clientCapabilities, yamlDocumentsCache, telemetry);
    const hover = new YAMLHover(schemaService, telemetry);
    const yamlDocumentSymbols = new YAMLDocumentSymbols(schemaService, telemetry);
    const yamlValidation = new YAMLValidation(schemaService, telemetry);
    const formatter = new YAMLFormatter();
    const yamlCodeActions = new YamlCodeActions(clientCapabilities);
    const yamlCodeLens = new YamlCodeLens(schemaService, telemetry);
    const yamlLinks = new YamlLinks(telemetry);
    const yamlDefinition = new YamlDefinition(telemetry);
    new JSONSchemaSelection(schemaService, yamlSettings, connection);
    registerCommands(commandExecutor, connection);
    return {
        configure: (settings)=>{
            schemaService.clearExternalSchemas();
            if (settings.schemas) {
                schemaService.schemaPriorityMapping = /* @__PURE__ */ new Map();
                settings.schemas.forEach((settings2)=>{
                    const currPriority = settings2.priority ? settings2.priority : 0;
                    schemaService.addSchemaPriority(settings2.uri, currPriority);
                    schemaService.registerExternalSchema(settings2.uri, settings2.fileMatch, settings2.schema, settings2.name, settings2.description, settings2.versions);
                });
            }
            yamlValidation.configure(settings);
            hover.configure(settings);
            completer.configure(settings);
            formatter.configure(settings);
            yamlCodeActions.configure(settings);
        },
        registerCustomSchemaProvider: (schemaProvider)=>{
            schemaService.registerCustomSchemaProvider(schemaProvider);
        },
        findLinks: yamlLinks.findLinks.bind(yamlLinks),
        doComplete: completer.doComplete.bind(completer),
        doValidation: yamlValidation.doValidation.bind(yamlValidation),
        doHover: hover.doHover.bind(hover),
        findDocumentSymbols: yamlDocumentSymbols.findDocumentSymbols.bind(yamlDocumentSymbols),
        findDocumentSymbols2: yamlDocumentSymbols.findHierarchicalDocumentSymbols.bind(yamlDocumentSymbols),
        doDefinition: yamlDefinition.getDefinition.bind(yamlDefinition),
        resetSchema: (uri)=>{
            return schemaService.onResourceChange(uri);
        },
        doFormat: formatter.format.bind(formatter),
        doDocumentOnTypeFormatting,
        addSchema: (schemaID, schema4)=>{
            return schemaService.saveSchema(schemaID, schema4);
        },
        deleteSchema: (schemaID)=>{
            return schemaService.deleteSchema(schemaID);
        },
        modifySchemaContent: (schemaAdditions)=>{
            return schemaService.addContent(schemaAdditions);
        },
        deleteSchemaContent: (schemaDeletions)=>{
            return schemaService.deleteContent(schemaDeletions);
        },
        deleteSchemasWhole: (schemaDeletions)=>{
            return schemaService.deleteSchemas(schemaDeletions);
        },
        getFoldingRanges: getFoldingRanges2,
        getCodeAction: (document, params)=>{
            return yamlCodeActions.getCodeAction(document, params);
        },
        getCodeLens: (document)=>{
            return yamlCodeLens.getCodeLens(document);
        },
        resolveCodeLens: (param)=>yamlCodeLens.resolveCodeLens(param)
    };
}
// ../../node_modules/yaml-language-server/lib/esm/yamlSettings.js
var import_vscode_languageserver = __toESM(require_main4());
var SettingsState = class {
    constructor(){
        this.yamlConfigurationSettings = void 0;
        this.schemaAssociations = void 0;
        this.formatterRegistration = null;
        this.specificValidatorPaths = [];
        this.schemaConfigurationSettings = [];
        this.yamlShouldValidate = true;
        this.yamlFormatterSettings = {
            singleQuote: false,
            bracketSpacing: true,
            proseWrap: "preserve",
            printWidth: 80,
            enable: true
        };
        this.yamlShouldHover = true;
        this.yamlShouldCompletion = true;
        this.schemaStoreSettings = [];
        this.customTags = [];
        this.schemaStoreEnabled = true;
        this.schemaStoreUrl = JSON_SCHEMASTORE_URL;
        this.indentation = void 0;
        this.disableAdditionalProperties = false;
        this.disableDefaultProperties = false;
        this.suggest = {
            parentSkeletonSelectedFirst: false
        };
        this.maxItemsComputed = 5e3;
        this.pendingValidationRequests = {};
        this.validationDelayMs = 200;
        this.documents = new import_vscode_languageserver.TextDocuments(TextDocument2);
        this.workspaceRoot = null;
        this.workspaceFolders = [];
        this.clientDynamicRegisterSupport = false;
        this.hierarchicalDocumentSymbolSupport = false;
        this.hasWorkspaceFolderCapability = false;
        this.hasConfigurationCapability = false;
        this.useVSCodeContentRequest = false;
        this.yamlVersion = "1.2";
        this.useSchemaSelectionRequests = false;
        this.hasWsChangeWatchedFileDynamicRegistration = false;
        this.fileExtensions = [
            ".yml",
            ".yaml"
        ];
    }
};
 /*! Bundled license information:

prettier/standalone.js:
  (*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0
  
    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.
  
    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** *)

prettier/parser-yaml.js:
  (*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0
  
    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.
  
    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** *)
*/ 

// EXTERNAL MODULE: ../../node_modules/vscode-languageserver-protocol/lib/browser/main.js
var main = __webpack_require__(294);
;// CONCATENATED MODULE: ./type-converters/common-converters.ts


var common_converters_CommonConverter;
(function(CommonConverter) {
    function normalizeRanges(completions, editor) {
        const Range = editor.getSelectionRange().constructor;
        return completions && completions.map((el)=>{
            if (el["range"]) {
                el["range"] = toRange(el["range"], Range);
            }
            return el;
        });
    }
    CommonConverter.normalizeRanges = normalizeRanges;
    function cleanHtml(html) {
        return html.replace(/<a\s/, "<a target='_blank' ");
    }
    CommonConverter.cleanHtml = cleanHtml;
    function toRange(range, Range) {
        if (!range || !range.start || !range.end) {
            return;
        }
        return Range.fromPoints(range.start, range.end);
    }
    CommonConverter.toRange = toRange;
    function convertKind(kind) {
        switch(kind){
            case "primitiveType":
            case "keyword":
                return main.CompletionItemKind.Keyword;
            case "variable":
            case "localVariable":
                return main.CompletionItemKind.Variable;
            case "memberVariable":
            case "memberGetAccessor":
            case "memberSetAccessor":
                return main.CompletionItemKind.Field;
            case "function":
            case "memberFunction":
            case "constructSignature":
            case "callSignature":
            case "indexSignature":
                return main.CompletionItemKind.Function;
            case "enum":
                return main.CompletionItemKind.Enum;
            case "module":
                return main.CompletionItemKind.Module;
            case "class":
                return main.CompletionItemKind.Class;
            case "interface":
                return main.CompletionItemKind.Interface;
            case "warning":
                return main.CompletionItemKind.File;
        }
        return main.CompletionItemKind.Property;
    }
    CommonConverter.convertKind = convertKind;
    function excludeByErrorMessage(diagnostics, errorMessagesToIgnore, fieldName = "message") {
        if (!errorMessagesToIgnore) return diagnostics;
        return diagnostics.filter((el)=>!checkValueAgainstRegexpArray(el[fieldName], errorMessagesToIgnore));
    }
    CommonConverter.excludeByErrorMessage = excludeByErrorMessage;
})(common_converters_CommonConverter || (common_converters_CommonConverter = {}));

;// CONCATENATED MODULE: ./type-converters/lsp-converters.ts




function fromRange(range) {
    return {
        start: {
            line: range.start.row,
            character: range.start.column
        },
        end: {
            line: range.end.row,
            character: range.end.column
        }
    };
}
function rangeFromPositions(start, end) {
    return {
        start: start,
        end: end
    };
}
function toRange(range) {
    return {
        start: {
            row: range.start.line,
            column: range.start.character
        },
        end: {
            row: range.end.line,
            column: range.end.character
        }
    };
}
function fromPoint(point) {
    return {
        line: point.row,
        character: point.column
    };
}
function toPoint(position) {
    return {
        row: position.line,
        column: position.character
    };
}
function toAnnotations(diagnostics) {
    return diagnostics.map((el)=>{
        return {
            row: el.range.start.line,
            column: el.range.start.character,
            text: el.message,
            type: el.severity === 1 ? "error" : el.severity === 2 ? "warning" : "info"
        };
    });
}
function toCompletion(item) {
    var _item_textEdit, _item_command;
    let itemKind = item.kind;
    let kind = itemKind ? Object.keys(CompletionItemKind)[Object.values(CompletionItemKind).indexOf(itemKind)] : undefined;
    var _item_textEdit_newText, _ref;
    let text = (_ref = (_item_textEdit_newText = (_item_textEdit = item.textEdit) === null || _item_textEdit === void 0 ? void 0 : _item_textEdit.newText) !== null && _item_textEdit_newText !== void 0 ? _item_textEdit_newText : item.insertText) !== null && _ref !== void 0 ? _ref : item.label;
    let command = ((_item_command = item.command) === null || _item_command === void 0 ? void 0 : _item_command.command) == "editor.action.triggerSuggest" ? "startAutocomplete" : undefined;
    let range = item.textEdit ? getTextEditRange(item.textEdit) : undefined;
    let completion = {
        meta: kind,
        caption: item.label,
        command: command,
        range: range,
        value: "",
        score: undefined,
        item: item
    };
    if (item.insertTextFormat == InsertTextFormat.Snippet) {
        completion["snippet"] = text;
    } else {
        completion["value"] = text;
    }
    completion["documentation"] = item.documentation; //TODO: this is workaround for services with instant completion
    completion["position"] = item["position"];
    completion["service"] = item["service"]; //TODO: since we have multiple servers, we need to determine which
    // server to use for resolving
    return completion;
}
function toCompletions(completions) {
    if (completions.length > 0) {
        let combinedCompletions = completions.map((el)=>{
            if (!el.completions) {
                return [];
            }
            let allCompletions;
            if (Array.isArray(el.completions)) {
                allCompletions = el.completions;
            } else {
                allCompletions = el.completions.items;
            }
            return allCompletions.map((item)=>{
                item["service"] = el.service;
                return item;
            });
        }).flat();
        return combinedCompletions.map((item)=>toCompletion(item));
    }
    return [];
}
function toResolvedCompletion(completion, item) {
    completion["docMarkdown"] = fromMarkupContent(item.documentation);
    return completion;
}
function toCompletionItem(completion) {
    let command;
    if (completion["command"]) {
        command = {
            title: "triggerSuggest",
            command: completion["command"]
        };
    }
    var _completion_caption;
    let completionItem = {
        label: (_completion_caption = completion.caption) !== null && _completion_caption !== void 0 ? _completion_caption : "",
        kind: CommonConverter.convertKind(completion.meta),
        command: command,
        insertTextFormat: completion["snippet"] ? InsertTextFormat.Snippet : InsertTextFormat.PlainText,
        documentation: completion["documentation"]
    };
    if (completion["range"]) {
        var _completion_snippet;
        completionItem.textEdit = {
            range: fromRange(completion["range"]),
            newText: (_completion_snippet = completion["snippet"]) !== null && _completion_snippet !== void 0 ? _completion_snippet : completion["value"]
        };
    } else {
        var _completion_snippet1;
        completionItem.insertText = (_completion_snippet1 = completion["snippet"]) !== null && _completion_snippet1 !== void 0 ? _completion_snippet1 : completion["value"];
    }
    completionItem["fileName"] = completion["fileName"];
    completionItem["position"] = completion["position"];
    completionItem["item"] = completion["item"];
    completionItem["service"] = completion["service"]; //TODO:
    return completionItem;
}
function getTextEditRange(textEdit) {
    if (textEdit.hasOwnProperty("insert") && textEdit.hasOwnProperty("replace")) {
        textEdit = textEdit;
        let mergedRanges = mergeRanges([
            toRange(textEdit.insert),
            toRange(textEdit.replace)
        ]);
        return mergedRanges[0];
    } else {
        textEdit = textEdit;
        return toRange(textEdit.range);
    }
}
function toTooltip(hover) {
    var _hover_find;
    if (!hover) return;
    let content = hover.map((el)=>{
        if (!el || !el.contents) return;
        if (MarkupContent.is(el.contents)) {
            return fromMarkupContent(el.contents);
        } else if (MarkedString.is(el.contents)) {
            return "```" + el.contents.value + "```";
        } else {
            let contents = el.contents.map((el)=>{
                if (typeof el !== "string") {
                    return `\`\`\`${el.value}\`\`\``;
                } else {
                    return el;
                }
            });
            return contents.join("\n\n");
        }
    }).filter(notEmpty);
    if (content.length === 0) return;
    //TODO: it could be merged within all ranges in future
    let lspRange = (_hover_find = hover.find((el)=>{
        return el === null || el === void 0 ? void 0 : el.range;
    })) === null || _hover_find === void 0 ? void 0 : _hover_find.range;
    let range;
    if (lspRange) range = toRange(lspRange);
    return {
        content: {
            type: "markdown",
            text: content.join("\n\n")
        },
        range: range
    };
}
function fromSignatureHelp(signatureHelp) {
    if (!signatureHelp) return;
    let content = signatureHelp.map((el)=>{
        let signatureIndex = (el === null || el === void 0 ? void 0 : el.activeSignature) || 0;
        let activeSignature = el.signatures[signatureIndex];
        if (!activeSignature) return;
        let activeParam = el === null || el === void 0 ? void 0 : el.activeParameter;
        let contents = activeSignature.label;
        if (activeParam != undefined && activeSignature.parameters && activeSignature.parameters[activeParam]) {
            let param = activeSignature.parameters[activeParam].label;
            if (typeof param == "string") {
                contents = contents.replace(param, `**${param}**`);
            }
        }
        if (activeSignature.documentation) {
            if (MarkupContent.is(activeSignature.documentation)) {
                return contents + "\n\n" + fromMarkupContent(activeSignature.documentation);
            } else {
                contents += "\n\n" + activeSignature.documentation;
                return contents;
            }
        } else {
            return contents;
        }
    }).filter(notEmpty);
    if (content.length === 0) return;
    return {
        content: {
            type: "markdown",
            text: content.join("\n\n")
        }
    };
}
function fromMarkupContent(content) {
    if (!content) return;
    if (typeof content === "string") {
        return content;
    } else {
        return content.value;
    }
}
function fromAceDelta(delta, eol) {
    const text = delta.lines.length > 1 ? delta.lines.join(eol) : delta.lines[0];
    return {
        range: delta.action === "insert" ? rangeFromPositions(fromPoint(delta.start), fromPoint(delta.start)) : rangeFromPositions(fromPoint(delta.start), fromPoint(delta.end)),
        text: delta.action === "insert" ? text : ""
    };
}
function filterDiagnostics(diagnostics, filterErrors) {
    return common_converters_CommonConverter.excludeByErrorMessage(diagnostics, filterErrors.errorMessagesToIgnore).map((el)=>{
        if (checkValueAgainstRegexpArray(el.message, filterErrors.errorMessagesToTreatAsWarning)) {
            el.severity = main.DiagnosticSeverity.Warning;
        } else if (checkValueAgainstRegexpArray(el.message, filterErrors.errorMessagesToTreatAsInfo)) {
            el.severity = main.DiagnosticSeverity.Information;
        }
        return el;
    });
}

;// CONCATENATED MODULE: ./services/yaml/yaml-service.ts
function yaml_service_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}



class YamlService extends BaseService {
    $getYamlSchemaUri(sessionID) {
        return this.getOption(sessionID, "schemaUri");
    }
    addDocument(document) {
        super.addDocument(document);
        this.$configureService(document.uri);
    }
    $configureService(sessionID) {
        let schemas = this.getOption(sessionID, "schemas");
        schemas === null || schemas === void 0 ? void 0 : schemas.forEach((el)=>{
            if (el.uri === this.$getYamlSchemaUri(sessionID)) {
                var _el;
                var _fileMatch;
                (_fileMatch = (_el = el).fileMatch) !== null && _fileMatch !== void 0 ? _fileMatch : _el.fileMatch = [];
                el.fileMatch.push(sessionID);
            }
            var _el_schema;
            let schema = (_el_schema = el.schema) !== null && _el_schema !== void 0 ? _el_schema : this.schemas[el.uri];
            if (schema) this.schemas[el.uri] = schema;
            this.$service.resetSchema(el.uri);
            el.schema = undefined;
        });
        this.$service.configure({
            schemas: schemas,
            hover: true,
            validate: true,
            completion: true,
            format: true,
            customTags: false
        });
    }
    removeDocument(document) {
        super.removeDocument(document);
        let schemas = this.getOption(document.uri, "schemas");
        schemas === null || schemas === void 0 ? void 0 : schemas.forEach((el)=>{
            if (el.uri === this.$getYamlSchemaUri(document.uri)) {
                var _el_fileMatch;
                el.fileMatch = (_el_fileMatch = el.fileMatch) === null || _el_fileMatch === void 0 ? void 0 : _el_fileMatch.filter((pattern)=>pattern != document.uri);
            }
        });
        this.$service.configure({
            schemas: schemas
        });
    }
    setOptions(sessionID, options, merge = false) {
        super.setOptions(sessionID, options, merge);
        this.$configureService(sessionID);
    }
    setGlobalOptions(options) {
        super.setGlobalOptions(options);
        this.$configureService("");
    }
    format(document, range, options) {
        let fullDocument = this.getDocument(document.uri);
        if (!fullDocument) return [];
        return this.$service.doFormat(fullDocument, {}); //TODO: options?
    }
    async doHover(document, position) {
        let fullDocument = this.getDocument(document.uri);
        if (!fullDocument) return null;
        return this.$service.doHover(fullDocument, position);
    }
    async doValidation(document) {
        let fullDocument = this.getDocument(document.uri);
        if (!fullDocument) return [];
        return filterDiagnostics(await this.$service.doValidation(fullDocument, false), this.optionsToFilterDiagnostics);
    }
    async doComplete(document, position) {
        let fullDocument = this.getDocument(document.uri);
        if (!fullDocument) return null;
        return this.$service.doComplete(fullDocument, position, false);
    }
    async doResolve(item) {
        return item;
    }
    constructor(mode){
        super(mode);
        yaml_service_define_property(this, "$service", void 0);
        yaml_service_define_property(this, "schemas", {});
        this.$service = getLanguageService((uri)=>{
            uri = uri.replace("file:///", "");
            let jsonSchema = this.schemas[uri];
            if (jsonSchema) return Promise.resolve(jsonSchema);
            return Promise.reject(`Unable to load schema at ${uri}`);
        //@ts-ignore
        }, null, null, null, null);
    }
}

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});